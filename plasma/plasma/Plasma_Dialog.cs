//Auto-generated by kalyptus. DO NOT EDIT.
namespace Plasma {
    using Plasma;
    using System;
    using Kimono;
    using Qyoto;
    /// <remarks>
    ///  Dialog provides a dialog-like widget that can be used to display additional
    ///  information.
    ///  Dialog uses the plasma theme, and usually has no window decoration. It's meant
    ///  as an interim solution to display widgets as extension to plasma applets, for
    ///  example when you click on an applet like the devicenotifier or the clock, the
    ///  widget that is then displayed, is a Dialog.
    ///  </remarks>        <short> A dialog that uses the Plasma style.</short>
    [SmokeClass("Plasma::Dialog")]
    public class Dialog : QWidget, IDisposable {
        protected Dialog(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(Dialog), this);
        }
        /// <remarks>
        ///  @arg parent the parent widget, for plasmoids, this is usually 0.
        ///  @arg f the Qt.WindowFlags, default is to not show a windowborder.
        ///          </remarks>        <short>    @arg parent the parent widget, for plasmoids, this is usually 0.</short>
        public Dialog(QWidget parent, uint f) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("Dialog#$", "Dialog(QWidget*, Qt::WindowFlags)", typeof(void), typeof(QWidget), parent, typeof(uint), f);
        }
        public Dialog(QWidget parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("Dialog#", "Dialog(QWidget*)", typeof(void), typeof(QWidget), parent);
        }
        public Dialog() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("Dialog", "Dialog()", typeof(void));
        }
        public void SetGraphicsWidget(QGraphicsWidget widget) {
            interceptor.Invoke("setGraphicsWidget#", "setGraphicsWidget(QGraphicsWidget*)", typeof(void), typeof(QGraphicsWidget), widget);
        }
        public QGraphicsWidget GraphicsWidget() {
            return (QGraphicsWidget) interceptor.Invoke("graphicsWidget", "graphicsWidget()", typeof(QGraphicsWidget));
        }
        /// <remarks>
        ///  Reimplemented from QWidget
        ///          </remarks>        <short>    Reimplemented from QWidget          </short>
        [SmokeMethod("paintEvent(QPaintEvent*)")]
        protected override void PaintEvent(QPaintEvent e) {
            interceptor.Invoke("paintEvent#", "paintEvent(QPaintEvent*)", typeof(void), typeof(QPaintEvent), e);
        }
        [SmokeMethod("resizeEvent(QResizeEvent*)")]
        protected override void ResizeEvent(QResizeEvent e) {
            interceptor.Invoke("resizeEvent#", "resizeEvent(QResizeEvent*)", typeof(void), typeof(QResizeEvent), e);
        }
        [SmokeMethod("eventFilter(QObject*, QEvent*)")]
        protected new virtual bool EventFilter(QObject watched, QEvent arg2) {
            return (bool) interceptor.Invoke("eventFilter##", "eventFilter(QObject*, QEvent*)", typeof(bool), typeof(QObject), watched, typeof(QEvent), arg2);
        }
        ~Dialog() {
            interceptor.Invoke("~Dialog", "~Dialog()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~Dialog", "~Dialog()", typeof(void));
        }
        protected new IDialogSignals Emit {
            get { return (IDialogSignals) Q_EMIT; }
        }
    }

    public interface IDialogSignals : IQWidgetSignals {
    }
}
