//Auto-generated by kalyptus. DO NOT EDIT.
namespace Plasma {
	using Plasma;
	using System;
	using Kimono;
	using Qyoto;
	[SmokeClass("Plasma::AppletBrowserWidget")]
	public class AppletBrowserWidget : QWidget, IDisposable {
 		protected AppletBrowserWidget(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(AppletBrowserWidget), this);
		}
		public AppletBrowserWidget(QWidget parent, uint f) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("AppletBrowserWidget#$", "AppletBrowserWidget(QWidget*, Qt::WindowFlags)", typeof(void), typeof(QWidget), parent, typeof(uint), f);
		}
		public AppletBrowserWidget(QWidget parent) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("AppletBrowserWidget#", "AppletBrowserWidget(QWidget*)", typeof(void), typeof(QWidget), parent);
		}
		public AppletBrowserWidget() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("AppletBrowserWidget", "AppletBrowserWidget()", typeof(void));
		}
		public void SetApplication(string application) {
			interceptor.Invoke("setApplication$", "setApplication(const QString&)", typeof(void), typeof(string), application);
		}
		public void SetApplication() {
			interceptor.Invoke("setApplication", "setApplication()", typeof(void));
		}
		public string Application() {
			return (string) interceptor.Invoke("application", "application()", typeof(string));
		}
		/// <remarks>
		///  Changes the current default containment to add applets to
		///  @arg containment the new default
		///      </remarks>		<short>    Changes the current default containment to add applets to </short>
		public void SetContainment(Plasma.Containment containment) {
			interceptor.Invoke("setContainment#", "setContainment(Plasma::Containment*)", typeof(void), typeof(Plasma.Containment), containment);
		}
		/// <remarks>
		/// </remarks>		<return> the current default containment to add applets to
		///      </return>
		/// 		<short>   </short>
		public Plasma.Containment Containment() {
			return (Plasma.Containment) interceptor.Invoke("containment", "containment() const", typeof(Plasma.Containment));
		}
		/// <remarks>
		///  Adds currently selected applets
		///      </remarks>		<short>    Adds currently selected applets      </short>
		[Q_SLOT("void addApplet()")]
		public void AddApplet() {
			interceptor.Invoke("addApplet", "addApplet()", typeof(void));
		}
		/// <remarks>
		///  Destroy all applets with this name
		///      </remarks>		<short>    Destroy all applets with this name      </short>
		[Q_SLOT("void destroyApplets(const QString&)")]
		public void DestroyApplets(string name) {
			interceptor.Invoke("destroyApplets$", "destroyApplets(const QString&)", typeof(void), typeof(string), name);
		}
		/// <remarks>
		///  Launches a download dialog to retrieve new applets from the Internet
		///      </remarks>		<short>    Launches a download dialog to retrieve new applets from the Internet      </short>
		[Q_SLOT("void downloadWidgets()")]
		public void DownloadWidgets() {
			interceptor.Invoke("downloadWidgets", "downloadWidgets()", typeof(void));
		}
		/// <remarks>
		///  Opens a file dialog to open a widget from a local file
		///      </remarks>		<short>    Opens a file dialog to open a widget from a local file      </short>
		[Q_SLOT("void openWidgetFile()")]
		public void OpenWidgetFile() {
			interceptor.Invoke("openWidgetFile", "openWidgetFile()", typeof(void));
		}
		~AppletBrowserWidget() {
			interceptor.Invoke("~AppletBrowserWidget", "~AppletBrowserWidget()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~AppletBrowserWidget", "~AppletBrowserWidget()", typeof(void));
		}
		protected new IAppletBrowserWidgetSignals Emit {
			get { return (IAppletBrowserWidgetSignals) Q_EMIT; }
		}
	}

	public interface IAppletBrowserWidgetSignals : IQWidgetSignals {
	}
}
