//Auto-generated by kalyptus. DO NOT EDIT.
namespace Plasma {
    using Plasma;
    using System;
    using Kimono;
    using Qyoto;
    /// <remarks>
    ///  @class Flash plasma/widgets/flash.h <Plasma/Widgets/Flash>
    /// </remarks>        <short> Provides flashing text or icons inside Plasma.</short>
    [SmokeClass("Plasma::Flash")]
    public class Flash : QGraphicsWidget, IDisposable {
        protected Flash(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(Flash), this);
        }
        public Flash(IQGraphicsItem parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("Flash#", "Flash(QGraphicsItem*)", typeof(void), typeof(IQGraphicsItem), parent);
        }
        public Flash() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("Flash", "Flash()", typeof(void));
        }
        [SmokeMethod("paint(QPainter*, const QStyleOptionGraphicsItem*, QWidget*)")]
        public override void Paint(QPainter painter, QStyleOptionGraphicsItem option, QWidget widget) {
            interceptor.Invoke("paint###", "paint(QPainter*, const QStyleOptionGraphicsItem*, QWidget*)", typeof(void), typeof(QPainter), painter, typeof(QStyleOptionGraphicsItem), option, typeof(QWidget), widget);
        }
        [SmokeMethod("paint(QPainter*, const QStyleOptionGraphicsItem*)")]
        public override void Paint(QPainter painter, QStyleOptionGraphicsItem option) {
            interceptor.Invoke("paint##", "paint(QPainter*, const QStyleOptionGraphicsItem*)", typeof(void), typeof(QPainter), painter, typeof(QStyleOptionGraphicsItem), option);
        }
        public void SetFont(QFont arg1) {
            interceptor.Invoke("setFont#", "setFont(const QFont&)", typeof(void), typeof(QFont), arg1);
        }
        public void SetColor(QColor arg1) {
            interceptor.Invoke("setColor#", "setColor(const QColor&)", typeof(void), typeof(QColor), arg1);
        }
        public void SetDuration(int duration) {
            interceptor.Invoke("setDuration$", "setDuration(int)", typeof(void), typeof(int), duration);
        }
        public void flash(string text, int duration, QTextOption option) {
            interceptor.Invoke("flash$$#", "flash(const QString&, int, const QTextOption&)", typeof(void), typeof(string), text, typeof(int), duration, typeof(QTextOption), option);
        }
        public void flash(string text, int duration) {
            interceptor.Invoke("flash$$", "flash(const QString&, int)", typeof(void), typeof(string), text, typeof(int), duration);
        }
        public void flash(string text) {
            interceptor.Invoke("flash$", "flash(const QString&)", typeof(void), typeof(string), text);
        }
        public void flash(QPixmap pixmap, int duration, uint align) {
            interceptor.Invoke("flash#$$", "flash(const QPixmap&, int, Qt::Alignment)", typeof(void), typeof(QPixmap), pixmap, typeof(int), duration, typeof(uint), align);
        }
        public void flash(QPixmap pixmap, int duration) {
            interceptor.Invoke("flash#$", "flash(const QPixmap&, int)", typeof(void), typeof(QPixmap), pixmap, typeof(int), duration);
        }
        public void flash(QPixmap pixmap) {
            interceptor.Invoke("flash#", "flash(const QPixmap&)", typeof(void), typeof(QPixmap), pixmap);
        }
        [Q_SLOT("void kill()")]
        public void Kill() {
            interceptor.Invoke("kill", "kill()", typeof(void));
        }
        protected QPixmap RenderPixmap() {
            return (QPixmap) interceptor.Invoke("renderPixmap", "renderPixmap()", typeof(QPixmap));
        }
        [Q_SLOT("void fadeIn()")]
        protected void FadeIn() {
            interceptor.Invoke("fadeIn", "fadeIn()", typeof(void));
        }
        [Q_SLOT("void fadeOut()")]
        protected void FadeOut() {
            interceptor.Invoke("fadeOut", "fadeOut()", typeof(void));
        }
        ~Flash() {
            interceptor.Invoke("~Flash", "~Flash()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~Flash", "~Flash()", typeof(void));
        }
        protected new IFlashSignals Emit {
            get { return (IFlashSignals) Q_EMIT; }
        }
    }

    public interface IFlashSignals : IQGraphicsWidgetSignals {
    }
}
