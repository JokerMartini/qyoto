//Auto-generated by kalyptus. DO NOT EDIT.
namespace Plasma {
	using Plasma;
	using System;
	using Kimono;
	using Qyoto;
	[SmokeClass("Plasma::AppletBrowser")]
	public class AppletBrowser : KDialog, IDisposable {
 		protected AppletBrowser(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(AppletBrowser), this);
		}
		public AppletBrowser(QWidget parent, uint f) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("AppletBrowser#$", "AppletBrowser(QWidget*, Qt::WindowFlags)", typeof(void), typeof(QWidget), parent, typeof(uint), f);
		}
		public AppletBrowser(QWidget parent) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("AppletBrowser#", "AppletBrowser(QWidget*)", typeof(void), typeof(QWidget), parent);
		}
		public AppletBrowser() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("AppletBrowser", "AppletBrowser()", typeof(void));
		}
		public void SetApplication(string application) {
			interceptor.Invoke("setApplication$", "setApplication(const QString&)", typeof(void), typeof(string), application);
		}
		public void SetApplication() {
			interceptor.Invoke("setApplication", "setApplication()", typeof(void));
		}
		public string Application() {
			return (string) interceptor.Invoke("application", "application()", typeof(string));
		}
		/// <remarks>
		///  Changes the current default containment to add applets to
		///  @arg containment the new default
		///      </remarks>		<short>    Changes the current default containment to add applets to </short>
		public void SetContainment(Plasma.Containment containment) {
			interceptor.Invoke("setContainment#", "setContainment(Plasma::Containment*)", typeof(void), typeof(Plasma.Containment), containment);
		}
		/// <remarks>
		/// </remarks>		<return> the current default containment to add applets to
		///      </return>
		/// 		<short>   </short>
		public Plasma.Containment Containment() {
			return (Plasma.Containment) interceptor.Invoke("containment", "containment() const", typeof(Plasma.Containment));
		}
		~AppletBrowser() {
			interceptor.Invoke("~AppletBrowser", "~AppletBrowser()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~AppletBrowser", "~AppletBrowser()", typeof(void));
		}
		protected new IAppletBrowserSignals Emit {
			get { return (IAppletBrowserSignals) Q_EMIT; }
		}
	}

	public interface IAppletBrowserSignals : IKDialogSignals {
	}
}
