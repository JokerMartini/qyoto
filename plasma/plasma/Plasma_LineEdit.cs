//Auto-generated by kalyptus. DO NOT EDIT.
namespace Plasma {
	using Plasma;
	using System;
	using Kimono;
	using Qyoto;
	/// <remarks> See <see cref="ILineEditSignals"></see> for signals emitted by LineEdit
	/// </remarks>
	[SmokeClass("Plasma::LineEdit")]
	public class LineEdit : QGraphicsProxyWidget, IDisposable {
 		protected LineEdit(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(LineEdit), this);
		}
		[Q_PROPERTY("QGraphicsWidget*", "parentWidget")]
		public QGraphicsWidget ParentWidget {
			get { return (QGraphicsWidget) interceptor.Invoke("parentWidget", "parentWidget()", typeof(QGraphicsWidget)); }
		}
		[Q_PROPERTY("QString", "text")]
		public string Text {
			get { return (string) interceptor.Invoke("text", "text()", typeof(string)); }
			set { interceptor.Invoke("setText$", "setText(QString)", typeof(void), typeof(string), value); }
		}
		[Q_PROPERTY("QString", "stylesheet")]
		public string Stylesheet {
			get { return (string) interceptor.Invoke("stylesheet", "stylesheet()", typeof(string)); }
			set { interceptor.Invoke("setStylesheet$", "setStylesheet(QString)", typeof(void), typeof(string), value); }
		}
		[Q_PROPERTY("QLineEdit*", "nativeWidget")]
		public QLineEdit NativeWidget {
			get { return (QLineEdit) interceptor.Invoke("nativeWidget", "nativeWidget()", typeof(QLineEdit)); }
		}
		public LineEdit(QGraphicsWidget parent) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("LineEdit#", "LineEdit(QGraphicsWidget*)", typeof(void), typeof(QGraphicsWidget), parent);
		}
		public LineEdit() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("LineEdit", "LineEdit()", typeof(void));
		}
		~LineEdit() {
			interceptor.Invoke("~LineEdit", "~LineEdit()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~LineEdit", "~LineEdit()", typeof(void));
		}
		protected new ILineEditSignals Emit {
			get { return (ILineEditSignals) Q_EMIT; }
		}
	}

	public interface ILineEditSignals : IQGraphicsProxyWidgetSignals {
		[Q_SIGNAL("void editingFinished()")]
		void EditingFinished();
		[Q_SIGNAL("void returnPressed()")]
		void ReturnPressed();
		[Q_SIGNAL("void textEdited(const QString&)")]
		void TextEdited(string text);
	}
}
