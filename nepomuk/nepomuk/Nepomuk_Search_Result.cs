//Auto-generated by kalyptus. DO NOT EDIT.
namespace Nepomuk.Search {
    using Kimono;
    using System;
    using Qyoto;
    /// <remarks>
    ///  \brief A single search result.
    ///  A search returns a set of Result object.
    ///  \author Sebastian Trueg <trueg@kde.org>
    ///          </remarks>        <short>    \brief A single search result.</short>
    [SmokeClass("Nepomuk::Search::Result")]
    public class Result : Object, IDisposable {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected Result(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(Result), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static Result() {
            staticInterceptor = new SmokeInvocation(typeof(Result), null);
        }
        // QHash<QUrl, Soprano::Node> requestProperties(); >>>> NOT CONVERTED
        public Result() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("Result", "Result()", typeof(void));
        }
        public Result(QUrl uri, double score) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("Result#$", "Result(const QUrl&, double)", typeof(void), typeof(QUrl), uri, typeof(double), score);
        }
        public Result(QUrl uri) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("Result#", "Result(const QUrl&)", typeof(void), typeof(QUrl), uri);
        }
        public Result(Nepomuk.Search.Result arg1) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("Result#", "Result(const Nepomuk::Search::Result&)", typeof(void), typeof(Nepomuk.Search.Result), arg1);
        }
        public double Score() {
            return (double) interceptor.Invoke("score", "score() const", typeof(double));
        }
        public QUrl ResourceUri() {
            return (QUrl) interceptor.Invoke("resourceUri", "resourceUri() const", typeof(QUrl));
        }
        public void SetScore(double score) {
            interceptor.Invoke("setScore$", "setScore(double)", typeof(void), typeof(double), score);
        }
        public void AddRequestProperty(QUrl property, Soprano.Node value) {
            interceptor.Invoke("addRequestProperty##", "addRequestProperty(const QUrl&, const Soprano::Node&)", typeof(void), typeof(QUrl), property, typeof(Soprano.Node), value);
        }
        public Soprano.Node RequestProperty(QUrl property) {
            return (Soprano.Node) interceptor.Invoke("requestProperty#", "requestProperty(const QUrl&) const", typeof(Soprano.Node), typeof(QUrl), property);
        }
        public override bool Equals(object o) {
            if (!(o is Result)) { return false; }
            return this == (Result) o;
        }
        public override int GetHashCode() {
            return interceptor.GetHashCode();
        }
        ~Result() {
            interceptor.Invoke("~Result", "~Result()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~Result", "~Result()", typeof(void));
        }
        public static bool operator==(Result lhs, Nepomuk.Search.Result arg1) {
            return (bool) staticInterceptor.Invoke("operator==#", "operator==(const Nepomuk::Search::Result&) const", typeof(bool), typeof(Result), lhs, typeof(Nepomuk.Search.Result), arg1);
        }
        public static bool operator!=(Result lhs, Nepomuk.Search.Result arg1) {
            return !(bool) staticInterceptor.Invoke("operator==#", "operator==(const Nepomuk::Search::Result&) const", typeof(bool), typeof(Result), lhs, typeof(Nepomuk.Search.Result), arg1);
        }
    }
}
