//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	using System;
	using Qyoto;

	/// <remarks>
	///  KDE SSL Connection Information
	///  This class contains the information about an SSL connection.  It is
	///  generally referenced through KSSL.
	/// </remarks>		<author> George Staikos <staikos@kde.org>
	/// </author>
	/// 		<short> KDE SSL Connection Information.</short>
	/// 		<see> KSSL</see>

	[SmokeClass("KSSLConnectionInfo")]
	public class KSSLConnectionInfo : Object, IDisposable {
		protected SmokeInvocation interceptor = null;
		private IntPtr smokeObject;
		protected KSSLConnectionInfo(Type dummy) {}
		protected void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(KSSLConnectionInfo), this);
		}
		/// <remarks>
		///   Get the cipher in use.
		/// </remarks>		<return> the cipher in use
		/// 	 </return>
		/// 		<short>     Get the cipher in use.</short>
		public string GetCipher() {
			return (string) interceptor.Invoke("getCipher", "getCipher() const", typeof(string));
		}
		/// <remarks>
		///   Describe the cipher in use.
		/// </remarks>		<return> the cipher description (from OpenSSL)
		/// 	 </return>
		/// 		<short>     Describe the cipher in use.</short>
		public string GetCipherDescription() {
			return (string) interceptor.Invoke("getCipherDescription", "getCipherDescription() const", typeof(string));
		}
		/// <remarks>
		///   Get the version of the cipher in use.
		/// </remarks>		<return> the version of the cipher
		/// 	 </return>
		/// 		<short>     Get the version of the cipher in use.</short>
		public string GetCipherVersion() {
			return (string) interceptor.Invoke("getCipherVersion", "getCipherVersion() const", typeof(string));
		}
		/// <remarks>
		///   Get the number of bits of the cipher that are actually used.
		/// </remarks>		<return> the number of bits in use
		/// 	 </return>
		/// 		<short>     Get the number of bits of the cipher that are actually used.</short>
		public int GetCipherUsedBits() {
			return (int) interceptor.Invoke("getCipherUsedBits", "getCipherUsedBits() const", typeof(int));
		}
		/// <remarks>
		///   Get bit-size of the cipher
		/// </remarks>		<return> the number of bits
		/// 	 </return>
		/// 		<short>     Get bit-size of the cipher </short>
		public int GetCipherBits() {
			return (int) interceptor.Invoke("getCipherBits", "getCipherBits() const", typeof(int));
		}
		public KSSLConnectionInfo() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KSSLConnectionInfo", "KSSLConnectionInfo()", typeof(void));
		}
		protected void Clean() {
			interceptor.Invoke("clean", "clean()", typeof(void));
		}
		~KSSLConnectionInfo() {
			interceptor.Invoke("~KSSLConnectionInfo", "~KSSLConnectionInfo()", typeof(void));
		}
		public void Dispose() {
			interceptor.Invoke("~KSSLConnectionInfo", "~KSSLConnectionInfo()", typeof(void));
		}
	}
}
