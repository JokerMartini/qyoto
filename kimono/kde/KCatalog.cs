//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	using System;
	using Qyoto;

	/// <remarks>
	///  This class abstracts a gettext message catalog. It will take care of
	///  needed gettext bindings.
	/// </remarks>		<short>    This class abstracts a gettext message catalog.</short>
	/// 		<see> KLocale</see>

	[SmokeClass("KCatalog")]
	public class KCatalog : Object, IDisposable {
		protected SmokeInvocation interceptor = null;
		private IntPtr smokeObject;
		protected KCatalog(Type dummy) {}
		protected void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(KCatalog), this);
		}
		private static SmokeInvocation staticInterceptor = null;
		static KCatalog() {
			staticInterceptor = new SmokeInvocation(typeof(KCatalog), null);
		}
		/// <remarks>
		///  Constructor.
		/// <param> name="name" The name of the catalog
		/// </param><param> name="language" The language of this catalog
		///    </param></remarks>		<short>    Constructor.</short>
		public KCatalog(string name, string language) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KCatalog$$", "KCatalog(const QString&, const QString&)", typeof(void), typeof(string), name, typeof(string), language);
		}
		/// <remarks>
		///  Copy constructor.
		///    </remarks>		<short>    Copy constructor.</short>
		public KCatalog(KCatalog rhs) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KCatalog#", "KCatalog(const KCatalog&)", typeof(void), typeof(KCatalog), rhs);
		}
		/// <remarks>
		///  Returns the name of the catalog.
		/// </remarks>		<return> The name of the catalog
		///    </return>
		/// 		<short>    Returns the name of the catalog.</short>
		public string Name() {
			return (string) interceptor.Invoke("name", "name() const", typeof(string));
		}
		/// <remarks>
		///  Returns the language of the catalog.
		/// </remarks>		<return> The language of the catalog
		///    </return>
		/// 		<short>    Returns the language of the catalog.</short>
		public string Language() {
			return (string) interceptor.Invoke("language", "language() const", typeof(string));
		}
		/// <remarks>
		///  Returns locale directory of the catalog.
		/// </remarks>		<return> The locale directory of the catalog.
		///    </return>
		/// 		<short>    Returns locale directory of the catalog.</short>
		public string LocaleDir() {
			return (string) interceptor.Invoke("localeDir", "localeDir() const", typeof(string));
		}
		/// <remarks>
		///  Retrieves a translation of the specified message id.
		///  Do not pass 0 or "" strings as message id.
		/// <param> name="msgid" The message id
		/// </param></remarks>		<return> The translated message, or <code>msgid</code> if not found
		///    </return>
		/// 		<short>    Retrieves a translation of the specified message id.</short>
		public string Translate(string msgid) {
			return (string) interceptor.Invoke("translate$", "translate(const char*) const", typeof(string), typeof(string), msgid);
		}
		/// <remarks>
		///  Retrieves a translation of the specified message id with given context.
		///  Do not pass 0 or "" strings as message id or context.
		/// <param> name="msgctxt" The context
		/// </param><param> name="msgid" The message id
		/// </param></remarks>		<return> The translated message, or <code>msgid</code> if not found
		///    </return>
		/// 		<short>    Retrieves a translation of the specified message id with given context.</short>
		public string Translate(string msgctxt, string msgid) {
			return (string) interceptor.Invoke("translate$$", "translate(const char*, const char*) const", typeof(string), typeof(string), msgctxt, typeof(string), msgid);
		}
		/// <remarks>
		///  Retrieves a proper plural form of translation for the specified English
		///  singular and plural message ids.
		///  Do not pass 0 or "" strings as message ids.
		/// <param> name="msgid" The singular message id
		/// </param><param> name="msgid_plural" The plural message id
		/// </param><param> name="n" The number to which the plural form applies
		/// </param></remarks>		<return> The translated message, or proper English form if not found
		///    </return>
		/// 		<short>    Retrieves a proper plural form of translation for the specified English  singular and plural message ids.</short>
		public string Translate(string msgid, string msgid_plural, ulong n) {
			return (string) interceptor.Invoke("translate$$$", "translate(const char*, const char*, unsigned long) const", typeof(string), typeof(string), msgid, typeof(string), msgid_plural, typeof(ulong), n);
		}
		/// <remarks>
		///  Retrieves a proper plural form of translation for the specified English
		///  singular and plural message ids, with given context.
		///  Do not pass 0 or "" strings as message ids or context.
		/// <param> name="msgctxt" The context
		/// </param><param> name="msgid" The singular message id
		/// </param><param> name="msgid_plural" The plural message id
		/// </param><param> name="n" The number to which the plural form applies
		/// </param></remarks>		<return> The translated message, or proper English form if not found
		///    </return>
		/// 		<short>    Retrieves a proper plural form of translation for the specified English  singular and plural message ids, with given context.</short>
		public string Translate(string msgctxt, string msgid, string msgid_plural, ulong n) {
			return (string) interceptor.Invoke("translate$$$$", "translate(const char*, const char*, const char*, unsigned long) const", typeof(string), typeof(string), msgctxt, typeof(string), msgid, typeof(string), msgid_plural, typeof(ulong), n);
		}
		~KCatalog() {
			interceptor.Invoke("~KCatalog", "~KCatalog()", typeof(void));
		}
		public void Dispose() {
			interceptor.Invoke("~KCatalog", "~KCatalog()", typeof(void));
		}
		/// <remarks>
		///  Finds the locale directory for the given catalog in given language.
		/// <param> name="name" The name of the catalog
		/// </param><param> name="language" The language of this catalog
		/// </param></remarks>		<return> The locale directory if found, string() otherwise.
		///    </return>
		/// 		<short>    Finds the locale directory for the given catalog in given language.</short>
		public static string CatalogLocaleDir(string name, string language) {
			return (string) staticInterceptor.Invoke("catalogLocaleDir$$", "catalogLocaleDir(const QString&, const QString&)", typeof(string), typeof(string), name, typeof(string), language);
		}
	}
}
