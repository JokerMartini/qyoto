//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	using System;
	using Qyoto;


	[SmokeClass("KBookmarkAction")]
	public class KBookmarkAction : KAction, IKBookmarkAction, IDisposable {
 		protected KBookmarkAction(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(KBookmarkAction), this);
		}
		// void contextMenu(const QPoint& arg1,KBookmarkManager* arg2,KBookmarkOwner* arg3); >>>> NOT CONVERTED
		// void contextMenu(const QPoint& arg1,KBookmarkManager* arg2,KBookmarkOwner* arg3); >>>> NOT CONVERTED
		public KBookmarkAction(KBookmark bk, KBookmarkOwner owner, QObject parent) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KBookmarkAction###", "KBookmarkAction(const KBookmark&, KBookmarkOwner*, QObject*)", typeof(void), typeof(KBookmark), bk, typeof(KBookmarkOwner), owner, typeof(QObject), parent);
		}
		[Q_SLOT("void slotSelected(Qt::MouseButtons, Qt::KeyboardModifiers)")]
		public void SlotSelected(int mb, int km) {
			interceptor.Invoke("slotSelected$$", "slotSelected(Qt::MouseButtons, Qt::KeyboardModifiers)", typeof(void), typeof(int), mb, typeof(int), km);
		}
		~KBookmarkAction() {
			interceptor.Invoke("~KBookmarkAction", "~KBookmarkAction()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~KBookmarkAction", "~KBookmarkAction()", typeof(void));
		}
		protected KBookmark Bookmark() {
			return (KBookmark) interceptor.Invoke("bookmark", "bookmark() const", typeof(KBookmark));
		}
		protected new IKBookmarkActionSignals Emit {
			get { return (IKBookmarkActionSignals) Q_EMIT; }
		}
	}

	public interface IKBookmarkActionSignals : IKActionSignals {
	}
}
