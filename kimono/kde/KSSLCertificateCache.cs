//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	using System;
	using Qyoto;
	using System.Collections.Generic;


	[SmokeClass("KSSLCertificateCache")]
	public class KSSLCertificateCache : Object, IDisposable {
		protected SmokeInvocation interceptor = null;
		private IntPtr smokeObject;
		protected KSSLCertificateCache(Type dummy) {}
		protected void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(KSSLCertificateCache), this);
		}
		public enum KSSLCertificatePolicy {
			Unknown = 0,
			Reject = 1,
			Accept = 2,
			Prompt = 3,
			Ambiguous = 4,
		}
		public KSSLCertificateCache() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KSSLCertificateCache", "KSSLCertificateCache()", typeof(void));
		}
		public void AddCertificate(KSSLCertificate cert, KSSLCertificateCache.KSSLCertificatePolicy policy, bool permanent) {
			interceptor.Invoke("addCertificate#$$", "addCertificate(KSSLCertificate&, KSSLCertificateCache::KSSLCertificatePolicy, bool)", typeof(void), typeof(KSSLCertificate), cert, typeof(KSSLCertificateCache.KSSLCertificatePolicy), policy, typeof(bool), permanent);
		}
		public void AddCertificate(KSSLCertificate cert, KSSLCertificateCache.KSSLCertificatePolicy policy) {
			interceptor.Invoke("addCertificate#$", "addCertificate(KSSLCertificate&, KSSLCertificateCache::KSSLCertificatePolicy)", typeof(void), typeof(KSSLCertificate), cert, typeof(KSSLCertificateCache.KSSLCertificatePolicy), policy);
		}
		public KSSLCertificateCache.KSSLCertificatePolicy GetPolicyByCN(string cn) {
			return (KSSLCertificateCache.KSSLCertificatePolicy) interceptor.Invoke("getPolicyByCN$", "getPolicyByCN(const QString&)", typeof(KSSLCertificateCache.KSSLCertificatePolicy), typeof(string), cn);
		}
		public KSSLCertificateCache.KSSLCertificatePolicy GetPolicyByCertificate(KSSLCertificate cert) {
			return (KSSLCertificateCache.KSSLCertificatePolicy) interceptor.Invoke("getPolicyByCertificate#", "getPolicyByCertificate(KSSLCertificate&)", typeof(KSSLCertificateCache.KSSLCertificatePolicy), typeof(KSSLCertificate), cert);
		}
		public bool SeenCN(string cn) {
			return (bool) interceptor.Invoke("seenCN$", "seenCN(const QString&)", typeof(bool), typeof(string), cn);
		}
		public bool SeenCertificate(KSSLCertificate cert) {
			return (bool) interceptor.Invoke("seenCertificate#", "seenCertificate(KSSLCertificate&)", typeof(bool), typeof(KSSLCertificate), cert);
		}
		public bool RemoveByCN(string cn) {
			return (bool) interceptor.Invoke("removeByCN$", "removeByCN(const QString&)", typeof(bool), typeof(string), cn);
		}
		public bool RemoveByCertificate(KSSLCertificate cert) {
			return (bool) interceptor.Invoke("removeByCertificate#", "removeByCertificate(KSSLCertificate&)", typeof(bool), typeof(KSSLCertificate), cert);
		}
		public bool IsPermanent(KSSLCertificate cert) {
			return (bool) interceptor.Invoke("isPermanent#", "isPermanent(KSSLCertificate&)", typeof(bool), typeof(KSSLCertificate), cert);
		}
		public bool ModifyByCN(string cn, KSSLCertificateCache.KSSLCertificatePolicy policy, bool permanent, QDateTime expires) {
			return (bool) interceptor.Invoke("modifyByCN$$$#", "modifyByCN(const QString&, KSSLCertificateCache::KSSLCertificatePolicy, bool, QDateTime&)", typeof(bool), typeof(string), cn, typeof(KSSLCertificateCache.KSSLCertificatePolicy), policy, typeof(bool), permanent, typeof(QDateTime), expires);
		}
		public bool ModifyByCertificate(KSSLCertificate cert, KSSLCertificateCache.KSSLCertificatePolicy policy, bool permanent, QDateTime expires) {
			return (bool) interceptor.Invoke("modifyByCertificate#$$#", "modifyByCertificate(KSSLCertificate&, KSSLCertificateCache::KSSLCertificatePolicy, bool, QDateTime&)", typeof(bool), typeof(KSSLCertificate), cert, typeof(KSSLCertificateCache.KSSLCertificatePolicy), policy, typeof(bool), permanent, typeof(QDateTime), expires);
		}
		public List<string> GetHostList(KSSLCertificate cert) {
			return (List<string>) interceptor.Invoke("getHostList#", "getHostList(KSSLCertificate&)", typeof(List<string>), typeof(KSSLCertificate), cert);
		}
		public bool AddHost(KSSLCertificate cert, string host) {
			return (bool) interceptor.Invoke("addHost#$", "addHost(KSSLCertificate&, const QString&)", typeof(bool), typeof(KSSLCertificate), cert, typeof(string), host);
		}
		public bool RemoveHost(KSSLCertificate cert, string host) {
			return (bool) interceptor.Invoke("removeHost#$", "removeHost(KSSLCertificate&, const QString&)", typeof(bool), typeof(KSSLCertificate), cert, typeof(string), host);
		}
		public List<string> GetKDEKeyByEmail(string email) {
			return (List<string>) interceptor.Invoke("getKDEKeyByEmail$", "getKDEKeyByEmail(const QString&)", typeof(List<string>), typeof(string), email);
		}
		public KSSLCertificate GetCertByMD5Digest(string key) {
			return (KSSLCertificate) interceptor.Invoke("getCertByMD5Digest$", "getCertByMD5Digest(const QString&)", typeof(KSSLCertificate), typeof(string), key);
		}
		public void Reload() {
			interceptor.Invoke("reload", "reload()", typeof(void));
		}
		public void SaveToDisk() {
			interceptor.Invoke("saveToDisk", "saveToDisk()", typeof(void));
		}
		~KSSLCertificateCache() {
			interceptor.Invoke("~KSSLCertificateCache", "~KSSLCertificateCache()", typeof(void));
		}
		public void Dispose() {
			interceptor.Invoke("~KSSLCertificateCache", "~KSSLCertificateCache()", typeof(void));
		}
	}
}
