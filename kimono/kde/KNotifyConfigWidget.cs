//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	using System;
	using Qyoto;

	/// <remarks>
	///  Configure the notification for a given application / context
	///  You probably will want to use the static function configure
	///  If you create the widget yourself, you must call setApplication before showing it
	///  See <see cref="IKNotifyConfigWidgetSignals"></see> for signals emitted by KNotifyConfigWidget
	/// </remarks>		<author> Olivier Goffart <ogoffart @ kde.org>
	///  </author>
	/// 		<short>    Configure the notification for a given application / context </short>

	[SmokeClass("KNotifyConfigWidget")]
	public class KNotifyConfigWidget : KVBox, IDisposable {
 		protected KNotifyConfigWidget(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(KNotifyConfigWidget), this);
		}
		private static SmokeInvocation staticInterceptor = null;
		static KNotifyConfigWidget() {
			staticInterceptor = new SmokeInvocation(typeof(KNotifyConfigWidget), null);
		}
		public KNotifyConfigWidget(QWidget parent) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KNotifyConfigWidget#", "KNotifyConfigWidget(QWidget*)", typeof(void), typeof(QWidget), parent);
		}
		/// <remarks>
		///  Change the application and the context
		/// <param> name="appname" name of the application.   if null KGlobal.MainComponent().componentName() is used
		/// </param><param> name="context_name" the name of the context, if null , avery context are considered
		/// </param><param> name="context_value" the context value
		/// 	 </param></remarks>		<short>    Change the application and the context </short>
		public void SetApplication(string appname, string context_name, string context_value) {
			interceptor.Invoke("setApplication$$$", "setApplication(const QString&, const QString&, const QString&)", typeof(void), typeof(string), appname, typeof(string), context_name, typeof(string), context_value);
		}
		public void SetApplication(string appname, string context_name) {
			interceptor.Invoke("setApplication$$", "setApplication(const QString&, const QString&)", typeof(void), typeof(string), appname, typeof(string), context_name);
		}
		public void SetApplication(string appname) {
			interceptor.Invoke("setApplication$", "setApplication(const QString&)", typeof(void), typeof(string), appname);
		}
		public void SetApplication() {
			interceptor.Invoke("setApplication", "setApplication()", typeof(void));
		}
		/// <remarks>
		///  save to the config file
		/// 	 </remarks>		<short>    save to the config file 	 </short>
		[Q_SLOT("void save()")]
		public void Save() {
			interceptor.Invoke("save", "save()", typeof(void));
		}
		~KNotifyConfigWidget() {
			interceptor.Invoke("~KNotifyConfigWidget", "~KNotifyConfigWidget()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~KNotifyConfigWidget", "~KNotifyConfigWidget()", typeof(void));
		}
		/// <remarks>
		///  Show a dialog with the widget.
		/// <param> name="parent" the parent widget of the dialog
		/// </param><param> name="appname" the application name,  if null, it is autodetected
		/// </param></remarks>		<return> the widget itself    the topLevelWidget of it is probably a KDialog
		/// 	 </return>
		/// 		<short>    Show a dialog with the widget.</short>
		public static KNotifyConfigWidget Configure(QWidget parent, string appname) {
			return (KNotifyConfigWidget) staticInterceptor.Invoke("configure#$", "configure(QWidget*, const QString&)", typeof(KNotifyConfigWidget), typeof(QWidget), parent, typeof(string), appname);
		}
		public static KNotifyConfigWidget Configure(QWidget parent) {
			return (KNotifyConfigWidget) staticInterceptor.Invoke("configure#", "configure(QWidget*)", typeof(KNotifyConfigWidget), typeof(QWidget), parent);
		}
		public static KNotifyConfigWidget Configure() {
			return (KNotifyConfigWidget) staticInterceptor.Invoke("configure", "configure()", typeof(KNotifyConfigWidget));
		}
		protected new IKNotifyConfigWidgetSignals Emit {
			get { return (IKNotifyConfigWidgetSignals) Q_EMIT; }
		}
	}

	public interface IKNotifyConfigWidgetSignals : IKVBoxSignals {
		/// <remarks>
		///  Indicate that the state of the modules contents has changed. 
		///  This signal is emitted whenever the state of the configuration changes. 
		/// </remarks>		<short>    Indicate that the state of the modules contents has changed.</short>
		/// 		<see> KCModule.Changed</see>
		[Q_SIGNAL("void changed(bool)")]
		void Changed(bool state);
	}
}
