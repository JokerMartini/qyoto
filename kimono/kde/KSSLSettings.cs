//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	using System;
	using Qyoto;
	using System.Text;

	/// <remarks>
	///  KDE SSL Settings
	///  This class contains some of the SSL settings for easy use.
	/// </remarks>		<author> George Staikos <staikos@kde.org>
	/// </author>
	/// 		<short> KDE SSL Settings.</short>
	/// 		<see> KSSL</see>

	[SmokeClass("KSSLSettings")]
	public class KSSLSettings : Object, IDisposable {
		protected SmokeInvocation interceptor = null;
		private IntPtr smokeObject;
		protected KSSLSettings(Type dummy) {}
		protected void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(KSSLSettings), this);
		}
		/// <remarks>
		///   Construct a KSSL Settings object
		/// <param> name="readConfig" read in the configuration immediately if true
		/// 	 </param></remarks>		<short>     Construct a KSSL Settings object </short>
		public KSSLSettings(bool readConfig) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KSSLSettings$", "KSSLSettings(bool)", typeof(void), typeof(bool), readConfig);
		}
		public KSSLSettings() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KSSLSettings", "KSSLSettings()", typeof(void));
		}
		/// <remarks>
		///   Does the user want to be warned on entering SSL mode
		/// </remarks>		<return> true if the user wants to be warned
		/// 	 </return>
		/// 		<short>     Does the user want to be warned on entering SSL mode </short>
		public bool WarnOnEnter() {
			return (bool) interceptor.Invoke("warnOnEnter", "warnOnEnter() const", typeof(bool));
		}
		/// <remarks>
		///   Change the user's warnOnEnter() setting
		/// <param> name="x" true if the user is to be warned
		/// </param></remarks>		<short>     Change the user's warnOnEnter() setting </short>
		/// 		<see> warnOnEnter</see>
		public void SetWarnOnEnter(bool x) {
			interceptor.Invoke("setWarnOnEnter$", "setWarnOnEnter(bool)", typeof(void), typeof(bool), x);
		}
		/// <remarks>
		///   Does the user want to be warned on sending unencrypted data
		/// </remarks>		<return> true if the user wants to be warned
		/// </return>
		/// 		<short>     Does the user want to be warned on sending unencrypted data </short>
		/// 		<see> setWarnOnUnencrypted</see>
		public bool WarnOnUnencrypted() {
			return (bool) interceptor.Invoke("warnOnUnencrypted", "warnOnUnencrypted() const", typeof(bool));
		}
		/// <remarks>
		///   Change the user's warnOnUnencrypted() setting
		/// <param> name="x" true if the user is to be warned
		/// </param></remarks>		<short>     Change the user's warnOnUnencrypted() setting </short>
		/// 		<see> warnOnUnencrypted</see>
		public void SetWarnOnUnencrypted(bool x) {
			interceptor.Invoke("setWarnOnUnencrypted$", "setWarnOnUnencrypted(bool)", typeof(void), typeof(bool), x);
		}
		/// <remarks>
		///   Does the user want to be warned on leaving SSL mode
		/// </remarks>		<return> true if the user wants to be warned
		/// 	 </return>
		/// 		<short>     Does the user want to be warned on leaving SSL mode </short>
		public bool WarnOnLeave() {
			return (bool) interceptor.Invoke("warnOnLeave", "warnOnLeave() const", typeof(bool));
		}
		/// <remarks>
		///   Change the user's warnOnLeave() setting
		/// <param> name="x" true if the user is to be warned
		/// </param></remarks>		<short>     Change the user's warnOnLeave() setting </short>
		/// 		<see> warnOnLeave</see>
		public void SetWarnOnLeave(bool x) {
			interceptor.Invoke("setWarnOnLeave$", "setWarnOnLeave(bool)", typeof(void), typeof(bool), x);
		}
		/// <remarks>
		///   Does the user want to be warned during mixed SSL/non-SSL mode
		/// </remarks>		<return> true if the user wants to be warned
		/// 	 </return>
		/// 		<short>     Does the user want to be warned during mixed SSL/non-SSL mode </short>
		public bool WarnOnMixed() {
			return (bool) interceptor.Invoke("warnOnMixed", "warnOnMixed() const", typeof(bool));
		}
		/// <remarks>
		///   Does the user want to use the Entropy Gathering Daemon?
		/// </remarks>		<return> true if the user wants to use EGD
		/// 	 </return>
		/// 		<short>     Does the user want to use the Entropy Gathering Daemon? </short>
		public bool UseEGD() {
			return (bool) interceptor.Invoke("useEGD", "useEGD() const", typeof(bool));
		}
		/// <remarks>
		///   Does the user want to use an entropy file?
		/// </remarks>		<return> true if the user wants to use an entropy file
		/// 	 </return>
		/// 		<short>     Does the user want to use an entropy file? </short>
		public bool UseEFile() {
			return (bool) interceptor.Invoke("useEFile", "useEFile() const", typeof(bool));
		}
		/// <remarks>
		///   Does the user want X.509 client certificates to always be sent when
		///   possible?
		/// </remarks>		<return> true if the user always wants a certificate sent
		/// 	 </return>
		/// 		<short>     Does the user want X.</short>
		public bool AutoSendX509() {
			return (bool) interceptor.Invoke("autoSendX509", "autoSendX509() const", typeof(bool));
		}
		/// <remarks>
		///   Does the user want to be prompted to send X.509 client certificates
		///   when possible?
		/// </remarks>		<return> true if the user wants to be prompted
		/// 	 </return>
		/// 		<short>     Does the user want to be prompted to send X.</short>
		public bool PromptSendX509() {
			return (bool) interceptor.Invoke("promptSendX509", "promptSendX509() const", typeof(bool));
		}
		/// <remarks>
		///   Get the OpenSSL cipher list for selecting the list of ciphers to
		///   use in a connection.
		/// </remarks>		<return> the cipher list
		/// 	 </return>
		/// 		<short>     Get the OpenSSL cipher list for selecting the list of ciphers to   use in a connection.</short>
		public string GetCipherList() {
			return (string) interceptor.Invoke("getCipherList", "getCipherList()", typeof(string));
		}
		/// <remarks>
		///   Get the configured path to the entropy gathering daemon or entropy
		///   file.
		/// </remarks>		<return> the path
		/// 	 </return>
		/// 		<short>     Get the configured path to the entropy gathering daemon or entropy   file.</short>
		public string GetEGDPath() {
			return (string) interceptor.Invoke("getEGDPath", "getEGDPath()", typeof(string));
		}
		/// <remarks>
		///   Load the user's settings.
		/// 	 </remarks>		<short>     Load the user's settings.</short>
		public void Load() {
			interceptor.Invoke("load", "load()", typeof(void));
		}
		/// <remarks>
		///   Revert to default settings.
		/// 	 </remarks>		<short>     Revert to default settings.</short>
		public void Defaults() {
			interceptor.Invoke("defaults", "defaults()", typeof(void));
		}
		/// <remarks>
		///   Save the current settings.
		/// 	 </remarks>		<short>     Save the current settings.</short>
		public void Save() {
			interceptor.Invoke("save", "save()", typeof(void));
		}
		~KSSLSettings() {
			interceptor.Invoke("~KSSLSettings", "~KSSLSettings()", typeof(void));
		}
		public void Dispose() {
			interceptor.Invoke("~KSSLSettings", "~KSSLSettings()", typeof(void));
		}
	}
}
