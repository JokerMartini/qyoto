//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	using System;
	using Qyoto;


	[SmokeClass("KSSLCertificateFactory")]
	public class KSSLCertificateFactory : Object, IDisposable {
		protected SmokeInvocation interceptor = null;
		private IntPtr smokeObject;
		protected KSSLCertificateFactory(Type dummy) {}
		protected void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(KSSLCertificateFactory), this);
		}
		private static SmokeInvocation staticInterceptor = null;
		static KSSLCertificateFactory() {
			staticInterceptor = new SmokeInvocation(typeof(KSSLCertificateFactory), null);
		}
		public KSSLCertificateFactory() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KSSLCertificateFactory", "KSSLCertificateFactory()", typeof(void));
		}
		~KSSLCertificateFactory() {
			interceptor.Invoke("~KSSLCertificateFactory", "~KSSLCertificateFactory()", typeof(void));
		}
		public void Dispose() {
			interceptor.Invoke("~KSSLCertificateFactory", "~KSSLCertificateFactory()", typeof(void));
		}
		public static KSSLCertificate GenerateSelfSigned(int keytype) {
			return (KSSLCertificate) staticInterceptor.Invoke("generateSelfSigned?", "generateSelfSigned(KSSLKeyType)", typeof(KSSLCertificate), typeof(int), keytype);
		}
	}
}
