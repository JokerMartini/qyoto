//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	using System;
	using Qyoto;
	using System.Collections.Generic;

	/// <remarks>
	///  internal class to make easier to use signals possible
	///  See <see cref="IKFileViewSignalerSignals"></see> for signals emitted by KFileViewSignaler
	/// </remarks>		<short>    internal class to make easier to use signals possible </short>

	[SmokeClass("KFileViewSignaler")]
	public class KFileViewSignaler : QObject, IDisposable {
 		protected KFileViewSignaler(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(KFileViewSignaler), this);
		}
		/// <remarks>
		///  Call this method when an item is selected (depends on single click /
		///  double click configuration). Emits the appropriate signal.
		/// </remarks>		<short>    Call this method when an item is selected (depends on single click /  double click configuration).</short>
		public void Activate(KFileItem item) {
			interceptor.Invoke("activate#", "activate(const KFileItem&)", typeof(void), typeof(KFileItem), item);
		}
		/// <remarks>
		///  emits the highlighted signal for item. Call this in your view class
		///  whenever the selection changes.
		///      </remarks>		<short>    emits the highlighted signal for item.</short>
		public void HighlightFile(KFileItem item) {
			interceptor.Invoke("highlightFile#", "highlightFile(const KFileItem&)", typeof(void), typeof(KFileItem), item);
		}
		public void ActivateMenu(KFileItem item, QPoint pos) {
			interceptor.Invoke("activateMenu##", "activateMenu(const KFileItem&, const QPoint&)", typeof(void), typeof(KFileItem), item, typeof(QPoint), pos);
		}
		public void ChangeSorting(uint sorting) {
			interceptor.Invoke("changeSorting$", "changeSorting(QDir::SortFlags)", typeof(void), typeof(uint), sorting);
		}
		public void DropURLs(KFileItem item, QDropEvent arg2, List<KUrl> urls) {
			interceptor.Invoke("dropURLs##?", "dropURLs(const KFileItem&, QDropEvent*, const KUrl::List&)", typeof(void), typeof(KFileItem), item, typeof(QDropEvent), arg2, typeof(List<KUrl>), urls);
		}
		public KFileViewSignaler() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KFileViewSignaler", "KFileViewSignaler()", typeof(void));
		}
		~KFileViewSignaler() {
			interceptor.Invoke("~KFileViewSignaler", "~KFileViewSignaler()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~KFileViewSignaler", "~KFileViewSignaler()", typeof(void));
		}
		protected new IKFileViewSignalerSignals Emit {
			get { return (IKFileViewSignalerSignals) Q_EMIT; }
		}
	}

	public interface IKFileViewSignalerSignals : IQObjectSignals {
		[Q_SIGNAL("void dirActivated(const KFileItem&)")]
		void DirActivated(KFileItem item);
		[Q_SIGNAL("void sortingChanged(QDir::SortFlags)")]
		void SortingChanged(uint arg1);
		/// <remarks>
		///  the <code>item</code> maybe be a null item, indicating that we're in multiselection mode and
		///  the selection has changed.
		///      </remarks>		<short>    the <code>item</code> maybe be a null item, indicating that we're in multiselection mode and  the selection has changed.</short>
		[Q_SIGNAL("void fileHighlighted(const KFileItem&)")]
		void FileHighlighted(KFileItem item);
		[Q_SIGNAL("void fileSelected(const KFileItem&)")]
		void FileSelected(KFileItem item);
		[Q_SIGNAL("void activatedMenu(const KFileItem&, const QPoint&)")]
		void ActivatedMenu(KFileItem item, QPoint pos);
		[Q_SIGNAL("void dropped(const KFileItem&, QDropEvent*, const KUrl::List&)")]
		void Dropped(KFileItem item, QDropEvent arg2, List<KUrl> urls);
	}
}
