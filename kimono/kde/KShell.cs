//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	using System;
	using Qyoto;
	using System.Collections.Generic;

	/// <remarks>
	///  \namespace KShell
	///  Provides some basic POSIX shell and bash functionality.
	/// </remarks>		<short>    \namespace KShell  Provides some basic POSIX shell and bash functionality.</short>
	/// 		<see> KStringHandler</see>

	[SmokeClass("KShell")]
	public class KShell : Object {
		protected SmokeInvocation interceptor = null;
		private static SmokeInvocation staticInterceptor = null;
		static KShell() {
			staticInterceptor = new SmokeInvocation(typeof(KShell), null);
		}
		/// <remarks>
		///  Flags for splitArgs().
		///      </remarks>		<short>    Flags for splitArgs().</short>
		public enum Option {
			NoOptions = 0,
			TildeExpand = 1,
			AbortOnMeta = 2,
		}
		/// <remarks>
		///  Status codes from splitArgs()
		///      </remarks>		<short>    Status codes from splitArgs()      </short>
		public enum Errors {
			NoError = 0,
			BadQuoting = 1,
			FoundMeta = 2,
		}
		/// <remarks>
		///  Splits <code>cmd</code> according to POSIX shell word splitting and quoting rules.
		///  Can optionally perform tilde expansion and/or abort if it finds shell
		///  meta characters it cannot process.
		/// <param> name="cmd" the command to split
		/// </param><param> name="flags" operation flags, see Options
		/// </param><param> name="err" if not NULL, a status code will be stored at the pointer
		///   target, see Errors
		/// </param></remarks>		<return> a list of unquoted words or an empty list if an error occurred
		///      </return>
		/// 		<short>    Splits <code>cmd</code> according to POSIX shell word splitting and quoting rules.</short>
		public static List<string> SplitArgs(string cmd, uint flags, KShell.Errors err) {
			return (List<string>) staticInterceptor.Invoke("splitArgs$$$", "splitArgs(const QString&, KShell::Options, KShell::Errors*)", typeof(List<string>), typeof(string), cmd, typeof(uint), flags, typeof(KShell.Errors), err);
		}
		public static List<string> SplitArgs(string cmd, uint flags) {
			return (List<string>) staticInterceptor.Invoke("splitArgs$$", "splitArgs(const QString&, KShell::Options)", typeof(List<string>), typeof(string), cmd, typeof(uint), flags);
		}
		public static List<string> SplitArgs(string cmd) {
			return (List<string>) staticInterceptor.Invoke("splitArgs$", "splitArgs(const QString&)", typeof(List<string>), typeof(string), cmd);
		}
		/// <remarks>
		///  Quotes and joins <code>args</code> together according to POSIX shell rules.
		/// <param> name="args" a list of strings to quote and join
		/// </param></remarks>		<return> a command suitable for shell execution
		///      </return>
		/// 		<short>    Quotes and joins <code>args</code> together according to POSIX shell rules.</short>
		public static string JoinArgs(List<string> args) {
			return (string) staticInterceptor.Invoke("joinArgs?", "joinArgs(const QStringList&)", typeof(string), typeof(List<string>), args);
		}
		/// <remarks>
		///  Quotes <code>arg</code> according to POSIX shell rules.
		///  This function can be used to quote an argument string such that
		///  the shell processes it properly. This is e.g. necessary for
		///  user-provided file names which may contain spaces or quotes.
		///  It also prevents expansion of wild cards and environment variables.
		/// <param> name="arg" the argument to quote
		/// </param></remarks>		<return> the quoted argument
		///      </return>
		/// 		<short>    Quotes <code>arg</code> according to POSIX shell rules.</short>
		public static string QuoteArg(string arg) {
			return (string) staticInterceptor.Invoke("quoteArg$", "quoteArg(const QString&)", typeof(string), typeof(string), arg);
		}
		/// <remarks>
		///  Performs tilde expansion on <code>path.</code> Interprets "~/path" and
		///  "~user/path". If the path starts with "\~" (i.e., an escaped tilde),
		///  the backslash is removed and the path is returned as is.
		/// <param> name="path" the path to tilde-expand
		/// </param></remarks>		<return> the expanded path
		///      </return>
		/// 		<short>    Performs tilde expansion on <code>path.</code></short>
		public static string TildeExpand(string path) {
			return (string) staticInterceptor.Invoke("tildeExpand$", "tildeExpand(const QString&)", typeof(string), typeof(string), path);
		}
	}
}
