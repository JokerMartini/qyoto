//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	using System;
	using Qyoto;


	[SmokeClass("KConfigFlags")]
	public class KConfigFlags : Object, IDisposable {
		protected SmokeInvocation interceptor = null;
		private IntPtr smokeObject;
		protected KConfigFlags(Type dummy) {}
		protected void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(KConfigFlags), this);
		}
		/// <remarks>
		///  Flags to control write entry
		///      </remarks>		<short>    Flags to control write entry      </short>
		public enum WriteConfigFlag {
			Persistent = 0x01,
			Global = 0x02,
			Localized = 0x04,
			NLS = Localized,
			Normal = Persistent,
		}
		public KConfigFlags() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KConfigFlags", "KConfigFlags()", typeof(void));
		}
		~KConfigFlags() {
			interceptor.Invoke("~KConfigFlags", "~KConfigFlags()", typeof(void));
		}
		public void Dispose() {
			interceptor.Invoke("~KConfigFlags", "~KConfigFlags()", typeof(void));
		}
	}
}
