//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	using System;
	using Qyoto;


	[SmokeClass("KBookmarkGroupTraverser")]
	public class KBookmarkGroupTraverser : Object {
		protected SmokeInvocation interceptor = null;
		private IntPtr smokeObject;
		protected KBookmarkGroupTraverser(Type dummy) {}
		protected void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(KBookmarkGroupTraverser), this);
		}
		// void traverse(const KBookmarkGroup& arg1); >>>> NOT CONVERTED
		// void visitEnter(const KBookmarkGroup& arg1); >>>> NOT CONVERTED
		// void visitLeave(const KBookmarkGroup& arg1); >>>> NOT CONVERTED
		public KBookmarkGroupTraverser() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KBookmarkGroupTraverser", "KBookmarkGroupTraverser()", typeof(void));
		}
		[SmokeMethod("visit(const KBookmark&)")]
		protected virtual void Visit(KBookmark arg1) {
			interceptor.Invoke("visit#", "visit(const KBookmark&)", typeof(void), typeof(KBookmark), arg1);
		}
	}
}
