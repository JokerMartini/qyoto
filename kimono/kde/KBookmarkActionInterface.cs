//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	using System;
	using Qyoto;

	public interface IKBookmarkAction {
	}


	[SmokeClass("KBookmarkActionInterface")]
	public abstract class KBookmarkActionInterface : Object, IKBookmarkAction {
		protected SmokeInvocation interceptor = null;
		private IntPtr smokeObject;
		protected KBookmarkActionInterface(Type dummy) {}
		protected void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(KBookmarkActionInterface), this);
		}
		// void contextMenu(const QPoint& arg1,KBookmarkManager* arg2,KBookmarkOwner* arg3); >>>> NOT CONVERTED
		public KBookmarkActionInterface(KBookmark bk) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KBookmarkActionInterface#", "KBookmarkActionInterface(const KBookmark&)", typeof(void), typeof(KBookmark), bk);
		}
		protected KBookmark Bookmark() {
			return (KBookmark) interceptor.Invoke("bookmark", "bookmark() const", typeof(KBookmark));
		}
	}
}
