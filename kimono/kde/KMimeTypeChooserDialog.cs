//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	using System;
	using Qyoto;
	using System.Collections.Generic;

	/// <remarks>
	///  Here is an example, using the dialog to set the text of two lineedits:
	///  @code
	///     string text = i18n("Select the MimeTypes you want for this file type.");
	///     List<string> list = List<string>.Split( QRegExp("\\s;\\s*"), leMimetypes.Text() );
	///     KMimeTypeChooserDialog dlg( i18n("Select Mime Types"), text, list, "text", this );
	///     if ( dlg.exec() == KDialog.Accepted ) {
	///       leWildcards.SetText( dlg.chooser().Patterns().join(";") );
	///       leMimetypes.SetText( dlg.chooser().MimeTypes().join(";") );
	///     }
	///  @endcode
	///  \image html kmimetypechooserdialog.png "KMimeTypeChooserDialog in action"
	/// </remarks>		<author> Anders Lund (anders at alweb dk) dec 19, 2001
	///   </author>
	/// 		<short> A Dialog to choose some mimetypes.  Provides a checkable tree list of mimetypes, with icons and optinally  comments and patterns, and an (optional) button to display the KDE mimetype  editor. </short>

	[SmokeClass("KMimeTypeChooserDialog")]
	public class KMimeTypeChooserDialog : KDialog, IDisposable {
 		protected KMimeTypeChooserDialog(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(KMimeTypeChooserDialog), this);
		}
		/// <remarks>
		///  Create a KMimeTypeChooser dialog.
		/// <param> name="caption" The title of the dialog
		/// </param><param> name="text" A Text to display above the list
		/// </param><param> name="selectedMimeTypes" A list of mimetype names, theese will be
		///         checked in the list if they exist.
		///         patterns will be added to the list view.
		/// </param><param> name="visuals" A OR'd KMimetypeChooser.Visuals enum to decide which data
		///         and buttons to display.
		/// </param><param> name="defaultGroup" The group to open when no groups are selected (like
		///         "text"). If not provided, no group is opened. If <code>groupsToShow</code>
		///         is provided and defaultGroup is not a member of that, it is ignored.
		/// </param><param> name="groupsToShow" a list of mimetype groups to show. If empty, all
		///         groups are shown.
		/// </param><param> name="parent" The parent widget to use
		///      </param></remarks>		<short>    Create a KMimeTypeChooser dialog.</short>
		public KMimeTypeChooserDialog(string caption, string text, List<string> selectedMimeTypes, string defaultGroup, List<string> groupsToShow, int visuals, QWidget parent) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KMimeTypeChooserDialog$$?$?$#", "KMimeTypeChooserDialog(const QString&, const QString&, const QStringList&, const QString&, const QStringList&, int, QWidget*)", typeof(void), typeof(string), caption, typeof(string), text, typeof(List<string>), selectedMimeTypes, typeof(string), defaultGroup, typeof(List<string>), groupsToShow, typeof(int), visuals, typeof(QWidget), parent);
		}
		public KMimeTypeChooserDialog(string caption, string text, List<string> selectedMimeTypes, string defaultGroup, List<string> groupsToShow, int visuals) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KMimeTypeChooserDialog$$?$?$", "KMimeTypeChooserDialog(const QString&, const QString&, const QStringList&, const QString&, const QStringList&, int)", typeof(void), typeof(string), caption, typeof(string), text, typeof(List<string>), selectedMimeTypes, typeof(string), defaultGroup, typeof(List<string>), groupsToShow, typeof(int), visuals);
		}
		public KMimeTypeChooserDialog(string caption, string text, List<string> selectedMimeTypes, string defaultGroup, List<string> groupsToShow) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KMimeTypeChooserDialog$$?$?", "KMimeTypeChooserDialog(const QString&, const QString&, const QStringList&, const QString&, const QStringList&)", typeof(void), typeof(string), caption, typeof(string), text, typeof(List<string>), selectedMimeTypes, typeof(string), defaultGroup, typeof(List<string>), groupsToShow);
		}
		public KMimeTypeChooserDialog(string caption, string text, List<string> selectedMimeTypes, string defaultGroup) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KMimeTypeChooserDialog$$?$", "KMimeTypeChooserDialog(const QString&, const QString&, const QStringList&, const QString&)", typeof(void), typeof(string), caption, typeof(string), text, typeof(List<string>), selectedMimeTypes, typeof(string), defaultGroup);
		}
		public KMimeTypeChooserDialog(string caption, string text, List<string> selectedMimeTypes) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KMimeTypeChooserDialog$$?", "KMimeTypeChooserDialog(const QString&, const QString&, const QStringList&)", typeof(void), typeof(string), caption, typeof(string), text, typeof(List<string>), selectedMimeTypes);
		}
		public KMimeTypeChooserDialog(string caption, string text) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KMimeTypeChooserDialog$$", "KMimeTypeChooserDialog(const QString&, const QString&)", typeof(void), typeof(string), caption, typeof(string), text);
		}
		public KMimeTypeChooserDialog(string caption) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KMimeTypeChooserDialog$", "KMimeTypeChooserDialog(const QString&)", typeof(void), typeof(string), caption);
		}
		public KMimeTypeChooserDialog() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KMimeTypeChooserDialog", "KMimeTypeChooserDialog()", typeof(void));
		}
		/// <remarks>
		///  @overload
		///      </remarks>		<short>    @overload      </short>
		public KMimeTypeChooserDialog(string caption, string text, List<string> selectedMimeTypes, string defaultGroup, QWidget parent) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KMimeTypeChooserDialog$$?$#", "KMimeTypeChooserDialog(const QString&, const QString&, const QStringList&, const QString&, QWidget*)", typeof(void), typeof(string), caption, typeof(string), text, typeof(List<string>), selectedMimeTypes, typeof(string), defaultGroup, typeof(QWidget), parent);
		}
		/// <remarks>
		/// </remarks>		<return> a pointer to the KMimeTypeChooser widget
		///      </return>
		/// 		<short>   </short>
		public KMimeTypeChooser Chooser() {
			return (KMimeTypeChooser) interceptor.Invoke("chooser", "chooser()", typeof(KMimeTypeChooser));
		}
		~KMimeTypeChooserDialog() {
			interceptor.Invoke("~KMimeTypeChooserDialog", "~KMimeTypeChooserDialog()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~KMimeTypeChooserDialog", "~KMimeTypeChooserDialog()", typeof(void));
		}
		protected new IKMimeTypeChooserDialogSignals Emit {
			get { return (IKMimeTypeChooserDialogSignals) Q_EMIT; }
		}
	}

	public interface IKMimeTypeChooserDialogSignals : IKDialogSignals {
	}
}
