//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	using System;
	using Qyoto;
	using System.Collections.Generic;

	/// <remarks>
	///  KDE Certificate Chain Representation Class
	///  This class provides a representation for an X.509 certificate chain.
	/// </remarks>		<author> George Staikos <staikos@kde.org>
	/// </author>
	/// 		<short> KDE X.509 Certificate Chain.</short>
	/// 		<see> KSSL</see>
	/// 		<see> KSSLCertificate</see>
	/// 		<see> KSSLPeerInfo</see>

	[SmokeClass("KSSLCertChain")]
	public class KSSLCertChain : Object, IDisposable {
		protected SmokeInvocation interceptor = null;
		private IntPtr smokeObject;
		protected KSSLCertChain(Type dummy) {}
		protected void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(KSSLCertChain), this);
		}
		// void setChain(void* arg1); >>>> NOT CONVERTED
		// QList<KSSLCertificate*> getChain(); >>>> NOT CONVERTED
		// void* rawChain(); >>>> NOT CONVERTED
		/// <remarks>
		///   Construct a KSSLCertChain object
		/// 	 </remarks>		<short>     Construct a KSSLCertChain object 	 </short>
		public KSSLCertChain() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KSSLCertChain", "KSSLCertChain()", typeof(void));
		}
		/// <remarks>
		///   Determine if this represents a valid certificate chain
		/// </remarks>		<return> true if it is a valid certificate chain
		/// 	 </return>
		/// 		<short>     Determine if this represents a valid certificate chain </short>
		public bool IsValid() {
			return (bool) interceptor.Invoke("isValid", "isValid()", typeof(bool));
		}
		/// <remarks>
		///   Do a deep copy of the certificate chain.
		///   This is an expensive operation, and you are responsible for deleting
		///   the returned object yourself.
		/// 	 </remarks>		<return> pointer to a new certificate chain object
		/// </return>
		/// 		<short>     Do a deep copy of the certificate chain.</short>
		public KSSLCertChain Replicate() {
			return (KSSLCertChain) interceptor.Invoke("replicate", "replicate()", typeof(KSSLCertChain));
		}
		/// <remarks>
		///   Set the raw chain from OpenSSL
		/// 	 </remarks>		<short>     Set the raw chain from OpenSSL </short>
		/// <remarks>
		///   Set the certificate chain as a pointer list of KSSL certificates.
		/// <param> name="chain" the certificate chain
		/// </param></remarks>		<short>     Set the certificate chain as a pointer list of KSSL certificates.</short>
		/// 		<see> KSSLCertificate</see>
		public void SetChain(List<KSSLCertificate> chain) {
			interceptor.Invoke("setChain?", "setChain(const QList<KSSLCertificate*>&)", typeof(void), typeof(List<KSSLCertificate>), chain);
		}
		/// <remarks>
		///   Set the certificate chain as a list of base64 encoded X.509
		///   certificates.
		/// <param> name="chain" the certificate chain
		/// 	 </param></remarks>		<short>     Set the certificate chain as a list of base64 encoded X.</short>
		public void SetCertChain(List<string> chain) {
			interceptor.Invoke("setCertChain?", "setCertChain(const QStringList&)", typeof(void), typeof(List<string>), chain);
		}
		/// <remarks>
		///   Obtain a copy of the certificate chain.
		///   The caller is responsible for deleting all certificates in the chain.
		/// </remarks>		<return> a deep copy of the certificate chain.
		/// </return>
		/// 		<short>     Obtain a copy of the certificate chain.</short>
		/// 		<see> KSSLCertificate</see>
		/// <remarks>
		///   Determine the number of entries (depth) of the chain.
		/// </remarks>		<return> the number of entries in the certificate chain
		/// 	 </return>
		/// 		<short>     Determine the number of entries (depth) of the chain.</short>
		public int Depth() {
			return (int) interceptor.Invoke("depth", "depth()", typeof(int));
		}
		/// <remarks>
		///   Read the raw chain in OpenSSL format
		/// 	 </remarks>		<short>     Read the raw chain in OpenSSL format </short>
		~KSSLCertChain() {
			interceptor.Invoke("~KSSLCertChain", "~KSSLCertChain()", typeof(void));
		}
		public void Dispose() {
			interceptor.Invoke("~KSSLCertChain", "~KSSLCertChain()", typeof(void));
		}
	}
}
