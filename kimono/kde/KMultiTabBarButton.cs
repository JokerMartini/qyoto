//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	using System;
	using Qyoto;

	/// <remarks>
	///  Use KMultiTabBar.AppendButton to append a button, which creates a KMultiTabBarButton instance
	///   See <see cref="IKMultiTabBarButtonSignals"></see> for signals emitted by KMultiTabBarButton
	/// </remarks>		<short>    Use KMultiTabBar.AppendButton to append a button, which creates a KMultiTabBarButton instance  </short>

	[SmokeClass("KMultiTabBarButton")]
	public class KMultiTabBarButton : QPushButton, IDisposable {
 		protected KMultiTabBarButton(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(KMultiTabBarButton), this);
		}
		public int Id() {
			return (int) interceptor.Invoke("id", "id() const", typeof(int));
		}
		/// <remarks>
		///  this is used internaly, but can be used by the user, if (s)he wants to
		///  It the according call of KMultiTabBar is invoked though this modifications will be overwritten
		///      </remarks>		<short>    this is used internaly, but can be used by the user, if (s)he wants to  It the according call of KMultiTabBar is invoked though this modifications will be overwritten      </short>
		[Q_SLOT("void setPosition(KMultiTabBar::KMultiTabBarPosition)")]
		public void SetPosition(KMultiTabBar.KMultiTabBarPosition arg1) {
			interceptor.Invoke("setPosition$", "setPosition(KMultiTabBar::KMultiTabBarPosition)", typeof(void), typeof(KMultiTabBar.KMultiTabBarPosition), arg1);
		}
		/// <remarks>
		///  this is used internaly, but can be used by the user, if (s)he wants to
		///  It the according call of KMultiTabBar is invoked though this modifications will be overwritten
		///      </remarks>		<short>    this is used internaly, but can be used by the user, if (s)he wants to  It the according call of KMultiTabBar is invoked though this modifications will be overwritten      </short>
		[Q_SLOT("void setStyle(KMultiTabBar::KMultiTabBarStyle)")]
		public void SetStyle(KMultiTabBar.KMultiTabBarStyle arg1) {
			interceptor.Invoke("setStyle$", "setStyle(KMultiTabBar::KMultiTabBarStyle)", typeof(void), typeof(KMultiTabBar.KMultiTabBarStyle), arg1);
		}
		/// <remarks>
		///  Modifies the text of the button
		///      </remarks>		<short>    Modifies the text of the button      </short>
		[Q_SLOT("void setText(const QString&)")]
		public void SetText(string arg1) {
			interceptor.Invoke("setText$", "setText(const QString&)", typeof(void), typeof(string), arg1);
		}
		/// <remarks>
		///  Returns the text of the button
		///      </remarks>		<short>    Returns the text of the button      </short>
		[Q_SLOT("QString text() const")]
		public new string Text() {
			return (string) interceptor.Invoke("text", "text() const", typeof(string));
		}
		[Q_SLOT("QSize sizeHint() const")]
		[SmokeMethod("sizeHint() const")]
		public override QSize SizeHint() {
			return (QSize) interceptor.Invoke("sizeHint", "sizeHint() const", typeof(QSize));
		}
		public KMultiTabBarButton(QPixmap pic, string arg2, QMenu popup, int id, QWidget parent, KMultiTabBar.KMultiTabBarPosition pos, KMultiTabBar.KMultiTabBarStyle style) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KMultiTabBarButton#$#$#$$", "KMultiTabBarButton(const QPixmap&, const QString&, QMenu*, int, QWidget*, KMultiTabBar::KMultiTabBarPosition, KMultiTabBar::KMultiTabBarStyle)", typeof(void), typeof(QPixmap), pic, typeof(string), arg2, typeof(QMenu), popup, typeof(int), id, typeof(QWidget), parent, typeof(KMultiTabBar.KMultiTabBarPosition), pos, typeof(KMultiTabBar.KMultiTabBarStyle), style);
		}
		[SmokeMethod("hideEvent(QHideEvent*)")]
		protected override void HideEvent(QHideEvent arg1) {
			interceptor.Invoke("hideEvent#", "hideEvent(QHideEvent*)", typeof(void), typeof(QHideEvent), arg1);
		}
		[SmokeMethod("showEvent(QShowEvent*)")]
		protected override void ShowEvent(QShowEvent arg1) {
			interceptor.Invoke("showEvent#", "showEvent(QShowEvent*)", typeof(void), typeof(QShowEvent), arg1);
		}
		[Q_SLOT("void slotClicked()")]
		[SmokeMethod("slotClicked()")]
		protected virtual void SlotClicked() {
			interceptor.Invoke("slotClicked", "slotClicked()", typeof(void));
		}
		~KMultiTabBarButton() {
			interceptor.Invoke("~KMultiTabBarButton", "~KMultiTabBarButton()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~KMultiTabBarButton", "~KMultiTabBarButton()", typeof(void));
		}
		protected new IKMultiTabBarButtonSignals Emit {
			get { return (IKMultiTabBarButtonSignals) Q_EMIT; }
		}
	}

	public interface IKMultiTabBarButtonSignals : IQPushButtonSignals {
		/// <remarks>
		///  this is emitted if  the button is clicked
		/// <param> name="id" the ID identifying the button
		///      </param></remarks>		<short>    this is emitted if  the button is clicked </short>
		[Q_SIGNAL("void clicked(int)")]
		void Clicked(int id);
	}
}
