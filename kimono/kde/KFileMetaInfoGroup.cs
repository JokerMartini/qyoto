//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	using System;
	using Qyoto;
	using System.Collections.Generic;


	[SmokeClass("KFileMetaInfoGroup")]
	public class KFileMetaInfoGroup : Object, IDisposable {
		protected SmokeInvocation interceptor = null;
		private IntPtr smokeObject;
		protected KFileMetaInfoGroup(Type dummy) {}
		protected void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(KFileMetaInfoGroup), this);
		}
		// KFileMetaInfoItemList items(); >>>> NOT CONVERTED
		public KFileMetaInfoGroup() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KFileMetaInfoGroup", "KFileMetaInfoGroup()", typeof(void));
		}
		public KFileMetaInfoGroup(KFileMetaInfoGroup arg1) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KFileMetaInfoGroup#", "KFileMetaInfoGroup(const KFileMetaInfoGroup&)", typeof(void), typeof(KFileMetaInfoGroup), arg1);
		}
		public string Name() {
			return (string) interceptor.Invoke("name", "name() const", typeof(string));
		}
		public List<string> Keys() {
			return (List<string>) interceptor.Invoke("keys", "keys() const", typeof(List<string>));
		}
		~KFileMetaInfoGroup() {
			interceptor.Invoke("~KFileMetaInfoGroup", "~KFileMetaInfoGroup()", typeof(void));
		}
		public void Dispose() {
			interceptor.Invoke("~KFileMetaInfoGroup", "~KFileMetaInfoGroup()", typeof(void));
		}
	}
}
