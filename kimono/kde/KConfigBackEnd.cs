//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	using System;
	using Qyoto;
	using System.Collections.Generic;

	/// <remarks>
	///  Abstract base class for KDE configuration file loading/saving.
	///  This class forms the base for all classes that implement some
	///  manner of loading/saving to configuration files.  It is an
	///  abstract base class, meaning that you cannot directly instantiate
	///  objects of this class. As of right now, the only back end available
	///  is one to read/write to INI-style files, but in the future, other
	///  formats may be available, such as XML or a database.
	/// </remarks>		<author> Preston Brown <pbrown@kde.org>,
	///          Matthias Kalle Dalheimer <kalle@kde.org>
	/// </author>
	/// 		<short> KDE Configuration file loading/saving abstract base class.</short>

	[SmokeClass("KConfigBackEnd")]
	public abstract class KConfigBackEnd : Object {
		protected SmokeInvocation interceptor = null;
		private IntPtr smokeObject;
		protected KConfigBackEnd(Type dummy) {}
		protected void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(KConfigBackEnd), this);
		}
		// KLockFile::Ptr lockFile(bool arg1); >>>> NOT CONVERTED
		// KLockFile::Ptr lockFile(); >>>> NOT CONVERTED
		/// <remarks>
		///  Constructs a configuration back end.
		/// <param> name="_config" Specifies the configuration object which values
		///         will be passed to as they are read, or from where values
		///         to be written to will be obtained from.
		/// </param><param> name="_fileName" The name of the file in which config
		///         data is stored.  All registered configuration directories
		///         will be looked in in order of decreasing relevance.
		/// </param><param> name="_resType" the resource type of the fileName specified, _if_
		///         it is not an absolute path (otherwise this parameter is ignored).
		/// </param><param> name="_useKDEGlobals" If true, the user's system-wide kdeglobals file
		///         will be imported into the config object.  If false, only
		///         the filename specified will be dealt with.
		///    </param></remarks>		<short>    Constructs a configuration back end.</short>
		public KConfigBackEnd(KConfigBase _config, string _fileName, string _resType, bool _useKDEGlobals) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KConfigBackEnd#$$$", "KConfigBackEnd(KConfigBase*, const QString&, const char*, bool)", typeof(void), typeof(KConfigBase), _config, typeof(string), _fileName, typeof(string), _resType, typeof(bool), _useKDEGlobals);
		}
		/// <remarks>
		///  Parses all configuration files for a configuration object.  This
		///  method must be reimplemented by the derived classes.
		/// </remarks>		<return> Whether or not parsing was successful.
		///    </return>
		/// 		<short>    Parses all configuration files for a configuration object.</short>
		[SmokeMethod("parseConfigFiles()")]
		public abstract bool ParseConfigFiles();
		/// <remarks>
		///  Writes configuration data to file(s).  This method must be
		///  reimplemented by the derived classes.
		/// <param> name="bMerge" Specifies whether the old config file already
		///         on disk should be merged in with the data in memory.  If true,
		///         data is read off the disk and merged.  If false, the on-disk
		///         file is removed and only in-memory data is written out.
		///    </param></remarks>		<short>    Writes configuration data to file(s).</short>
		[SmokeMethod("sync(bool)")]
		public abstract void Sync(bool bMerge);
		/// <remarks>
		///  Changes the filenames associated with this back end.  You should
		///  probably reparse your config info after doing this.
		/// <param> name="_fileName" the new filename to use
		/// </param><param> name="_resType" the resource type of the fileName specified, _if_
		///         it is not an absolute path (otherwise this parameter is ignored).
		/// </param><param> name="_useKDEGlobals" specifies whether or not to also parse the
		///         global KDE configuration files.
		///    </param></remarks>		<short>    Changes the filenames associated with this back end.</short>
		public void ChangeFileName(string _fileName, string _resType, bool _useKDEGlobals) {
			interceptor.Invoke("changeFileName$$$", "changeFileName(const QString&, const char*, bool)", typeof(void), typeof(string), _fileName, typeof(string), _resType, typeof(bool), _useKDEGlobals);
		}
		/// <remarks>
		///  Returns the state of the app-config object.
		/// </remarks>		<short>    Returns the state of the app-config object.</short>
		/// 		<see> KConfig.GetConfigState</see>
		[SmokeMethod("getConfigState() const")]
		public virtual KConfigBase.ConfigState GetConfigState() {
			return (KConfigBase.ConfigState) interceptor.Invoke("getConfigState", "getConfigState() const", typeof(KConfigBase.ConfigState));
		}
		/// <remarks>
		///  Returns the filename as passed to the constructor.
		/// </remarks>		<return> the filename as passed to the constructor.
		///    </return>
		/// 		<short>    Returns the filename as passed to the constructor.</short>
		public string FileName() {
			return (string) interceptor.Invoke("fileName", "fileName() const", typeof(string));
		}
		/// <remarks>
		///  Returns the resource type as passed to the constructor.
		/// </remarks>		<return> the resource type as passed to the constructor.
		///    </return>
		/// 		<short>    Returns the resource type as passed to the constructor.</short>
		public string Resource() {
			return (string) interceptor.Invoke("resource", "resource() const", typeof(string));
		}
		/// <remarks>
		///  Set the locale string that defines the current language.
		/// <param> name="_localeString" the identifier of the language
		/// </param></remarks>		<short>    Set the locale string that defines the current language.</short>
		/// 		<see> KLocale</see>
		public void SetLocaleString(QByteArray _localeString) {
			interceptor.Invoke("setLocaleString#", "setLocaleString(const QByteArray&)", typeof(void), typeof(QByteArray), _localeString);
		}
		/// <remarks>
		///  Set the file mode for newly created files.
		/// <param> name="mode" the filemode (as in chmod)
		///    </param></remarks>		<short>    Set the file mode for newly created files.</short>
		public void SetFileWriteMode(int mode) {
			interceptor.Invoke("setFileWriteMode$", "setFileWriteMode(int)", typeof(void), typeof(int), mode);
		}
		/// <remarks>
		///  Check whether the config files are writable.
		/// <param> name="warnUser" Warn the user if the configuration files are not writable.
		/// </param></remarks>		<return> Indicates that all of the configuration files used are writable.
		///    </return>
		/// 		<short>    Check whether the config files are writable.</short>
		public bool CheckConfigFilesWritable(bool warnUser) {
			return (bool) interceptor.Invoke("checkConfigFilesWritable$", "checkConfigFilesWritable(bool)", typeof(bool), typeof(bool), warnUser);
		}
		/// <remarks>
		///  Gets the extraConfigFiles in the merge stack.
		///    </remarks>		<short>    Gets the extraConfigFiles in the merge stack.</short>
		public List<string> ExtraConfigFiles() {
			return (List<string>) interceptor.Invoke("extraConfigFiles", "extraConfigFiles() const", typeof(List<string>));
		}
		/// <remarks>
		///  Sets the merge stack to the list of files. The stack is last in first out with
		///  the top of the stack being the most specific config file.
		/// <param> name="files" A list of extra config files containing the full path of the
		///  local config file to remove from the stack.
		///    </param></remarks>		<short>    Sets the merge stack to the list of files.</short>
		public void SetExtraConfigFiles(List<string> files) {
			interceptor.Invoke("setExtraConfigFiles?", "setExtraConfigFiles(const QStringList&)", typeof(void), typeof(List<string>), files);
		}
		/// <remarks>
		///  Remove all files from merge stack. This does not include the local file that
		///  was specified in the constructor.
		///    </remarks>		<short>    Remove all files from merge stack.</short>
		public void RemoveAllExtraConfigFiles() {
			interceptor.Invoke("removeAllExtraConfigFiles", "removeAllExtraConfigFiles()", typeof(void));
		}
		/// <remarks>
		///  Returns a lock file object for the configuration file
		/// <param> name="bGlobal" If true, returns a lock file object for kdeglobals
		///    </param></remarks>		<short>    Returns a lock file object for the configuration file </short>
	}
}
