//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	using System;
	using Qyoto;


	[SmokeClass("KServiceSeparator")]
	public class KServiceSeparator : KSycocaEntry, IDisposable {
 		protected KServiceSeparator(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(KServiceSeparator), this);
		}
		/// <remarks>
		///  Construct a service separator
		///    </remarks>		<short>    Construct a service separator    </short>
		public KServiceSeparator() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KServiceSeparator", "KServiceSeparator()", typeof(void));
		}
		[SmokeMethod("isValid() const")]
		public override bool IsValid() {
			return (bool) interceptor.Invoke("isValid", "isValid() const", typeof(bool));
		}
		[SmokeMethod("name() const")]
		public override string Name() {
			return (string) interceptor.Invoke("name", "name() const", typeof(string));
		}
		[SmokeMethod("load(QDataStream&)")]
		public override void Load(QDataStream ds) {
			interceptor.Invoke("load#", "load(QDataStream&)", typeof(void), typeof(QDataStream), ds);
		}
		[SmokeMethod("save(QDataStream&)")]
		public override void Save(QDataStream ds) {
			interceptor.Invoke("save#", "save(QDataStream&)", typeof(void), typeof(QDataStream), ds);
		}
		~KServiceSeparator() {
			interceptor.Invoke("~KServiceSeparator", "~KServiceSeparator()", typeof(void));
		}
		public void Dispose() {
			interceptor.Invoke("~KServiceSeparator", "~KServiceSeparator()", typeof(void));
		}
	}
}
