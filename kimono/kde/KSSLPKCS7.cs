//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	using System;
	using Qyoto;

	/// <remarks>
	///  KDE PKCS#7 Certificate
	///  This class represents a PKCS#7 certificate
	/// </remarks>		<author> George Staikos <staikos@kde.org>
	/// </author>
	/// 		<short> KDE PKCS#7 Certificate.</short>
	/// 		<see> KSSL</see>

	[SmokeClass("KSSLPKCS7")]
	public class KSSLPKCS7 : Object, IDisposable {
		protected SmokeInvocation interceptor = null;
		private IntPtr smokeObject;
		protected KSSLPKCS7(Type dummy) {}
		protected void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(KSSLPKCS7), this);
		}
		private static SmokeInvocation staticInterceptor = null;
		static KSSLPKCS7() {
			staticInterceptor = new SmokeInvocation(typeof(KSSLPKCS7), null);
		}
		// void setCert(PKCS7* arg1); >>>> NOT CONVERTED
		/// <remarks>
		///   The name of this certificate.  This can be used to refer to the
		///   certificate instead of passing the object itself.
		/// </remarks>		<return> the name of the certificate
		/// 	 </return>
		/// 		<short>     The name of this certificate.</short>
		public string Name() {
			return (string) interceptor.Invoke("name", "name() const", typeof(string));
		}
		/// <remarks>
		///   Convert to a Base64 string.
		/// </remarks>		<return> the PKCS#7 object in base64 form
		/// 	 </return>
		/// 		<short>     Convert to a Base64 string.</short>
		public new string ToString() {
			return (string) interceptor.Invoke("toString", "toString() const", typeof(string));
		}
		/// <remarks>
		///   Raw set the PKCS7 object.
		/// <param> name="c" the PKCS7 object
		/// </param>	 </remarks>		<short>     Raw set the PKCS7 object.</short>
		/// <remarks>
		///   Get the bottom level X.509 certificate.
		/// </remarks>		<return> the certificate, or NULL on failure
		/// </return>
		/// 		<short>     Get the bottom level X.</short>
		/// 		<see> KSSLCertificate</see>
		public KSSLCertificate GetCertificate() {
			return (KSSLCertificate) interceptor.Invoke("getCertificate", "getCertificate()", typeof(KSSLCertificate));
		}
		/// <remarks>
		///   Get the certificate chain.
		/// </remarks>		<return> the certificate chain
		/// </return>
		/// 		<short>     Get the certificate chain.</short>
		/// 		<see> KSSLCertChain</see>
		public KSSLCertChain GetChain() {
			return (KSSLCertChain) interceptor.Invoke("getChain", "getChain()", typeof(KSSLCertChain));
		}
		/// <remarks>
		///   Write the PKCS#7 to a file in raw mode.
		/// <param> name="filename" the filename to write
		/// </param></remarks>		<return> true on success
		/// 	 </return>
		/// 		<short>     Write the PKCS#7 to a file in raw mode.</short>
		public bool ToFile(string filename) {
			return (bool) interceptor.Invoke("toFile$", "toFile(const QString&)", typeof(bool), typeof(string), filename);
		}
		/// <remarks>
		///   Return true if the chain is valid.
		/// 	 </remarks>		<short>     Return true if the chain is valid.</short>
		public bool IsValid() {
			return (bool) interceptor.Invoke("isValid", "isValid() const", typeof(bool));
		}
		public KSSLPKCS7() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KSSLPKCS7", "KSSLPKCS7()", typeof(void));
		}
		~KSSLPKCS7() {
			interceptor.Invoke("~KSSLPKCS7", "~KSSLPKCS7()", typeof(void));
		}
		public void Dispose() {
			interceptor.Invoke("~KSSLPKCS7", "~KSSLPKCS7()", typeof(void));
		}
		/// <remarks>
		///   Create a KSSLPKCS7 object from a Base64 in a string.
		/// <param> name="base64" the base64 representation of the certificate
		/// </param></remarks>		<return> a PKCS#7 object, or NULL on failure
		/// 	 </return>
		/// 		<short>     Create a KSSLPKCS7 object from a Base64 in a string.</short>
		public static KSSLPKCS7 FromString(string base64) {
			return (KSSLPKCS7) staticInterceptor.Invoke("fromString$", "fromString(const QString&)", typeof(KSSLPKCS7), typeof(string), base64);
		}
		/// <remarks>
		///   Create a KSSLPKCS7 object by reading a PKCS#7 file.
		/// <param> name="filename" the filename to read the certificate from
		/// </param></remarks>		<return> a PKCS#7 object, or NULL on failure
		/// 	 </return>
		/// 		<short>     Create a KSSLPKCS7 object by reading a PKCS#7 file.</short>
		public static KSSLPKCS7 LoadCertFile(string filename) {
			return (KSSLPKCS7) staticInterceptor.Invoke("loadCertFile$", "loadCertFile(const QString&)", typeof(KSSLPKCS7), typeof(string), filename);
		}
	}
}
