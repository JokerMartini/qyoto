//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	using System;
	using Qyoto;

	/// <remarks>
	///  KDE SSL Session Information
	///  This class contains data about an SSL session.
	///  It is just used as a container that is taken from or passed to KSSL objects.
	/// </remarks>		<author> George Staikos <staikos@kde.org>
	/// </author>
	/// 		<short> KDE SSL Session Information.</short>
	/// 		<see> KSSL</see>

	[SmokeClass("KSSLSession")]
	public class KSSLSession : Object, IDisposable {
		protected SmokeInvocation interceptor = null;
		private IntPtr smokeObject;
		protected KSSLSession(Type dummy) {}
		protected void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(KSSLSession), this);
		}
		private static SmokeInvocation staticInterceptor = null;
		static KSSLSession() {
			staticInterceptor = new SmokeInvocation(typeof(KSSLSession), null);
		}
		/// <remarks>
		///   Convert to a base64 encoded string (so it can be copied safely)
		/// 	 </remarks>		<short>     Convert to a base64 encoded string (so it can be copied safely) 	 </short>
		public new string ToString() {
			return (string) interceptor.Invoke("toString", "toString() const", typeof(string));
		}
		public KSSLSession() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KSSLSession", "KSSLSession()", typeof(void));
		}
		~KSSLSession() {
			interceptor.Invoke("~KSSLSession", "~KSSLSession()", typeof(void));
		}
		public void Dispose() {
			interceptor.Invoke("~KSSLSession", "~KSSLSession()", typeof(void));
		}
		/// <remarks>
		///   Create as session ID object from a base64 encoded string.
		/// <param> name="s" the session id in base64 encoded ASN.1 format
		/// </param></remarks>		<return> a KSSLSession object, or 0L on error
		/// 	 </return>
		/// 		<short>     Create as session ID object from a base64 encoded string.</short>
		public static KSSLSession FromString(string s) {
			return (KSSLSession) staticInterceptor.Invoke("fromString$", "fromString(const QString&)", typeof(KSSLSession), typeof(string), s);
		}
	}
}
