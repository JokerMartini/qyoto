//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	using System;
	using Qyoto;


	[SmokeClass("KMultiTabBarTab")]
	public class KMultiTabBarTab : KMultiTabBarButton {
 		protected KMultiTabBarTab(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(KMultiTabBarTab), this);
		}
		/// <remarks>
		///  set the active state of the tab
		/// <param> name="state" true==active false==not active
		///      </param></remarks>		<short>    set the active state of the tab </short>
		public void SetState(bool state) {
			interceptor.Invoke("setState$", "setState(bool)", typeof(void), typeof(bool), state);
		}
		/// <remarks>
		///  choose if the text should always be displayed
		///  this is only used in classic mode if at all
		///      </remarks>		<short>    choose if the text should always be displayed  this is only used in classic mode if at all      </short>
		public void ShowActiveTabText(bool show) {
			interceptor.Invoke("showActiveTabText$", "showActiveTabText(bool)", typeof(void), typeof(bool), show);
		}
		public void Resize() {
			interceptor.Invoke("resize", "resize()", typeof(void));
		}
		[Q_SLOT("void setIcon(const QString&)")]
		[SmokeMethod("setIcon(const QString&)")]
		public virtual void SetIcon(string arg1) {
			interceptor.Invoke("setIcon$", "setIcon(const QString&)", typeof(void), typeof(string), arg1);
		}
		[Q_SLOT("void setIcon(const QPixmap&)")]
		[SmokeMethod("setIcon(const QPixmap&)")]
		public virtual void SetIcon(QPixmap arg1) {
			interceptor.Invoke("setIcon#", "setIcon(const QPixmap&)", typeof(void), typeof(QPixmap), arg1);
		}
		protected new IKMultiTabBarTabSignals Emit {
			get { return (IKMultiTabBarTabSignals) Q_EMIT; }
		}
	}

	public interface IKMultiTabBarTabSignals : IKMultiTabBarButtonSignals {
	}
}
