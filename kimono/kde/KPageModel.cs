//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	using System;
	using Qyoto;

	/// <remarks>
	///   This class is an abstract base class which must be used to
	///   implement custom models for KPageView. Additional to the the standard
	///   Qt.ItemDataRoles it provides the two roles
	/// 
	/// <li>
	/// HeaderRole
	/// </li>
	/// 
	/// <li>
	/// WidgetRole
	/// </li>
	///   which are used to return a header string for a page and a QWidget
	///   pointer to the page itself.
	///   <li><b>Example:</b></li>
	///   <pre>
	///     KPageView view = new KPageView( this );
	///     KPageModel model = new MyPageModel( this );
	///     view.SetModel( model );
	///   </pre>
	/// </remarks>		<author> Tobias Koenig <tokoe@kde.org>
	///  </author>
	/// 		<short> A base class for a model used by KPageView. </short>
	/// 		<see> KPageView</see>

	[SmokeClass("KPageModel")]
	public abstract class KPageModel : QAbstractItemModel, IDisposable {
 		protected KPageModel(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocationKDE(typeof(KPageModel), this);
		}
		/// <remarks>
		///  Additional roles that KPageView uses.
		///          </remarks>		<short>    Additional roles that KPageView uses.</short>
		public enum Role {
			HeaderRole = Qt.ItemDataRole.UserRole+1,
			WidgetRole = 0,
		}
		// KPageModel* KPageModel(KPageModelPrivate& arg1,QObject* arg2); >>>> NOT CONVERTED
		/// <remarks>
		///  Constructs a page model with the given parent.
		///      </remarks>		<short>    Constructs a page model with the given parent.</short>
		public KPageModel(QObject parent) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KPageModel#", "KPageModel(QObject*)", typeof(void), typeof(QObject), parent);
		}
		public KPageModel() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KPageModel", "KPageModel()", typeof(void));
		}
		~KPageModel() {
			interceptor.Invoke("~KPageModel", "~KPageModel()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~KPageModel", "~KPageModel()", typeof(void));
		}
		protected new IKPageModelSignals Emit {
			get { return (IKPageModelSignals) Q_EMIT; }
		}
	}

	public interface IKPageModelSignals : IQAbstractItemModelSignals {
	}
}
