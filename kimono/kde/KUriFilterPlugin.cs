//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	using System;
	using Qyoto;

	/// <remarks>
	///  Base class for URI filter plugins.
	///  This class applies a single filter to a URI.  All plugins designed
	///  to provide URI filtering service should inherit from this abstract
	///  class and provide a concrete implementation.
	///  All inheriting classes need to implement the pure function
	///  filterUri.
	/// </remarks>		<short> Abstract class for URI filter plugins.  </short>

	[SmokeClass("KUriFilterPlugin")]
	public abstract class KUriFilterPlugin : QObject {
 		protected KUriFilterPlugin(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(KUriFilterPlugin), this);
		}
		/// <remarks>
		///  Constructs a filter plugin with a given name
		/// <param> name="parent" the parent object, or 0 for no parent
		/// </param><param> name="name" the name of the plugin, mandatory
		///      </param></remarks>		<short>    Constructs a filter plugin with a given name </short>
		public KUriFilterPlugin(string name, QObject parent) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KUriFilterPlugin$#", "KUriFilterPlugin(const QString&, QObject*)", typeof(void), typeof(string), name, typeof(QObject), parent);
		}
		public KUriFilterPlugin(string name) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KUriFilterPlugin$", "KUriFilterPlugin(const QString&)", typeof(void), typeof(string), name);
		}
		/// <remarks>
		///  Filters a URI.
		/// <param> name="data" the URI data to be filtered.
		/// </param></remarks>		<return> A boolean indicating whether the URI has been changed.
		///      </return>
		/// 		<short>    Filters a URI.</short>
		[SmokeMethod("filterUri(KUriFilterData&) const")]
		public abstract bool FilterUri(KUriFilterData data);
		/// <remarks>
		///  Creates a configuration module for the filter.
		///  It is the responsibility of the caller to delete the module
		///  once it is not needed anymore.
		/// </remarks>		<return> A configuration module, 0 if the filter isn't configurable.
		///      </return>
		/// 		<short>    Creates a configuration module for the filter.</short>
		[SmokeMethod("configModule(QWidget*, const char*) const")]
		public virtual KCModule ConfigModule(QWidget arg1, string arg2) {
			return (KCModule) interceptor.Invoke("configModule#$", "configModule(QWidget*, const char*) const", typeof(KCModule), typeof(QWidget), arg1, typeof(string), arg2);
		}
		/// <remarks>
		///  Returns the name of the configuration module for the filter.
		/// </remarks>		<return> the name of a configuration module or string() if none.
		///      </return>
		/// 		<short>    Returns the name of the configuration module for the filter.</short>
		[SmokeMethod("configName() const")]
		public virtual string ConfigName() {
			return (string) interceptor.Invoke("configName", "configName() const", typeof(string));
		}
		/// <remarks>
		///  Sets the the URL in <code>data</code> to <code>uri.</code>
		///      </remarks>		<short>    Sets the the URL in <code>data</code> to <code>uri.</code></short>
		protected void SetFilteredUri(KUriFilterData data, KUrl uri) {
			interceptor.Invoke("setFilteredUri##", "setFilteredUri(KUriFilterData&, const KUrl&) const", typeof(void), typeof(KUriFilterData), data, typeof(KUrl), uri);
		}
		/// <remarks>
		///  Sets the error message in <code>data</code> to <code>errormsg.</code>
		///      </remarks>		<short>    Sets the error message in <code>data</code> to <code>errormsg.</code></short>
		protected void SetErrorMsg(KUriFilterData data, string errmsg) {
			interceptor.Invoke("setErrorMsg#$", "setErrorMsg(KUriFilterData&, const QString&) const", typeof(void), typeof(KUriFilterData), data, typeof(string), errmsg);
		}
		/// <remarks>
		///  Sets the URI type in <code>data</code> to <code>type.</code>
		///      </remarks>		<short>    Sets the URI type in <code>data</code> to <code>type.</code></short>
		protected void SetUriType(KUriFilterData data, KUriFilterData.UriTypes type) {
			interceptor.Invoke("setUriType#$", "setUriType(KUriFilterData&, KUriFilterData::UriTypes) const", typeof(void), typeof(KUriFilterData), data, typeof(KUriFilterData.UriTypes), type);
		}
		/// <remarks>
		///  Sets the arguments and options string in <code>data</code>
		///  to <code>args</code> if any were found during filterting.
		///      </remarks>		<short>    Sets the arguments and options string in <code>data</code>  to <code>args</code> if any were found during filterting.</short>
		protected void SetArguments(KUriFilterData data, string args) {
			interceptor.Invoke("setArguments#$", "setArguments(KUriFilterData&, const QString&) const", typeof(void), typeof(KUriFilterData), data, typeof(string), args);
		}
		protected new IKUriFilterPluginSignals Emit {
			get { return (IKUriFilterPluginSignals) Q_EMIT; }
		}
	}

	public interface IKUriFilterPluginSignals : IQObjectSignals {
	}
}
