//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	using System;
	using Qyoto;

	/// <remarks>
	///  The parsed data returned by KTzfileTimeZoneSource.
	/// </remarks>		<author> David Jarvie <software@astrojar.org.uk>.
	///  </author>
	/// 		<short> Parsed data from tzfile(5) time zone definition files.</short>
	/// 		<see> KTzfileTimeZoneSource</see>
	/// 		<see> KTzfileTimeZone</see>
	/// 		<see> @ingroup</see>
	/// 		<see> timezones</see>

	[SmokeClass("KTzfileTimeZoneData")]
	public class KTzfileTimeZoneData : KTimeZoneData, IDisposable {
 		protected KTzfileTimeZoneData(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(KTzfileTimeZoneData), this);
		}
		public KTzfileTimeZoneData() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KTzfileTimeZoneData", "KTzfileTimeZoneData()", typeof(void));
		}
		public KTzfileTimeZoneData(KTzfileTimeZoneData arg1) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KTzfileTimeZoneData#", "KTzfileTimeZoneData(const KTzfileTimeZoneData&)", typeof(void), typeof(KTzfileTimeZoneData), arg1);
		}
		/// <remarks>
		///  Creates a new copy of this object.
		///  The caller is responsible for deleting the copy.
		///  Derived classes must reimplement this method to return a copy of the
		///  calling instance
		/// </remarks>		<return> copy of this instance. This is a KTzfileTimeZoneData pointer.
		///      </return>
		/// 		<short>    Creates a new copy of this object.</short>
		[SmokeMethod("clone()")]
		public override KTimeZoneData Clone() {
			return (KTimeZoneData) interceptor.Invoke("clone", "clone()", typeof(KTimeZoneData));
		}
		/// <remarks>
		///  Return whether daylight saving transitions are available for the time zone.
		/// </remarks>		<return> @c true
		///      </return>
		/// 		<short>    Return whether daylight saving transitions are available for the time zone.</short>
		[SmokeMethod("hasTransitions() const")]
		public override bool HasTransitions() {
			return (bool) interceptor.Invoke("hasTransitions", "hasTransitions() const", typeof(bool));
		}
		~KTzfileTimeZoneData() {
			interceptor.Invoke("~KTzfileTimeZoneData", "~KTzfileTimeZoneData()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~KTzfileTimeZoneData", "~KTzfileTimeZoneData()", typeof(void));
		}
	}
}
