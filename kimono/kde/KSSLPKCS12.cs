//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	using System;
	using Qyoto;

	/// <remarks>
	///  KDE PKCS#12 Certificate
	///  As of yet, this class is being defined.  if you use it, let it be known
	///  that BC will break on you until this message is removed.
	/// </remarks>		<author> George Staikos <staikos@kde.org>
	/// </author>
	/// 		<short> KDE PKCS#12 Certificate.</short>
	/// 		<see> KSSL</see>
	/// 		<see> KSSLCertificate</see>

	[SmokeClass("KSSLPKCS12")]
	public class KSSLPKCS12 : Object, IDisposable {
		protected SmokeInvocation interceptor = null;
		private IntPtr smokeObject;
		protected KSSLPKCS12(Type dummy) {}
		protected void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(KSSLPKCS12), this);
		}
		private static SmokeInvocation staticInterceptor = null;
		static KSSLPKCS12() {
			staticInterceptor = new SmokeInvocation(typeof(KSSLPKCS12), null);
		}
		// void setCert(PKCS12* arg1); >>>> NOT CONVERTED
		// EVP_PKEY* getPrivateKey(); >>>> NOT CONVERTED
		/// <remarks>
		///   The name of this certificate.  This can be used to refer to the
		///   certificate instead of passing the object itself.
		/// </remarks>		<return> the name of the certificate
		/// 	 </return>
		/// 		<short>     The name of this certificate.</short>
		public string Name() {
			return (string) interceptor.Invoke("name", "name() const", typeof(string));
		}
		/// <remarks>
		///   Convert to a Base64 string.
		/// </remarks>		<return> the certificate in base64 form
		/// 	 </return>
		/// 		<short>     Convert to a Base64 string.</short>
		public new string ToString() {
			return (string) interceptor.Invoke("toString", "toString()", typeof(string));
		}
		/// <remarks>
		///   Raw set the PKCS12 object.
		/// <param> name="c" the openssl PKCS12 object
		/// </param>	 </remarks>		<short>     Raw set the PKCS12 object.</short>
		/// <remarks>
		///   Change the password of the PKCS#12 in memory.
		/// <param> name="pold" the old password
		/// </param><param> name="pnew" the new password
		/// </param></remarks>		<return> true on success
		/// 	 </return>
		/// 		<short>     Change the password of the PKCS#12 in memory.</short>
		public bool ChangePassword(string pold, string pnew) {
			return (bool) interceptor.Invoke("changePassword$$", "changePassword(const QString&, const QString&)", typeof(bool), typeof(string), pold, typeof(string), pnew);
		}
		/// <remarks>
		///   Get the private key.
		/// 	 </remarks>		<return> the internal OpenSSL private key format
		/// </return>
		/// 		<short>     Get the private key.</short>
		/// <remarks>
		///   Get the X.509 certificate.
		/// </remarks>		<return> the X.509 certificate for the PKCS#12 object, or NULL
		/// 	 </return>
		/// 		<short>     Get the X.</short>
		public KSSLCertificate GetCertificate() {
			return (KSSLCertificate) interceptor.Invoke("getCertificate", "getCertificate()", typeof(KSSLCertificate));
		}
		/// <remarks>
		///   Write the PKCS#12 to a file in raw mode.
		/// <param> name="filename" the file to write to
		/// </param></remarks>		<return> true on success
		/// 	 </return>
		/// 		<short>     Write the PKCS#12 to a file in raw mode.</short>
		public bool ToFile(string filename) {
			return (bool) interceptor.Invoke("toFile$", "toFile(const QString&)", typeof(bool), typeof(string), filename);
		}
		/// <remarks>
		///   Check the X.509 and private key to make sure they're valid.
		/// </remarks>		<return> the result of the validation
		/// </return>
		/// 		<short>     Check the X.</short>
		/// 		<see> KSSLCertificate</see>
		public KSSLCertificate.KSSLValidation Validate() {
			return (KSSLCertificate.KSSLValidation) interceptor.Invoke("validate", "validate()", typeof(KSSLCertificate.KSSLValidation));
		}
		/// <remarks>
		///   Check the X.509 and private key to make sure they're valid.
		/// <param> name="p" the purpose to validate for
		/// </param></remarks>		<return> the result of the validation
		/// </return>
		/// 		<short>     Check the X.</short>
		/// 		<see> KSSLCertificate</see>
		public KSSLCertificate.KSSLValidation Validate(KSSLCertificate.KSSLPurpose p) {
			return (KSSLCertificate.KSSLValidation) interceptor.Invoke("validate$", "validate(KSSLCertificate::KSSLPurpose)", typeof(KSSLCertificate.KSSLValidation), typeof(KSSLCertificate.KSSLPurpose), p);
		}
		/// <remarks>
		///   Check the X.509 and private key to make sure they're valid.
		///   Ignore any cached validation result.
		/// </remarks>		<return> the result of the validation
		/// </return>
		/// 		<short>     Check the X.</short>
		/// 		<see> KSSLCertificate</see>
		public KSSLCertificate.KSSLValidation Revalidate() {
			return (KSSLCertificate.KSSLValidation) interceptor.Invoke("revalidate", "revalidate()", typeof(KSSLCertificate.KSSLValidation));
		}
		/// <remarks>
		///   Check the X.509 and private key to make sure they're valid.
		///   Ignore any cached validation result.
		/// <param> name="p" the purpose to validate for
		/// </param></remarks>		<return> the result of the validation
		/// </return>
		/// 		<short>     Check the X.</short>
		/// 		<see> KSSLCertificate</see>
		public KSSLCertificate.KSSLValidation Revalidate(KSSLCertificate.KSSLPurpose p) {
			return (KSSLCertificate.KSSLValidation) interceptor.Invoke("revalidate$", "revalidate(KSSLCertificate::KSSLPurpose)", typeof(KSSLCertificate.KSSLValidation), typeof(KSSLCertificate.KSSLPurpose), p);
		}
		/// <remarks>
		///   Check if the X.509 and private key are valid.
		/// </remarks>		<return> true if valid
		/// 	 </return>
		/// 		<short>     Check if the X.</short>
		public bool IsValid() {
			return (bool) interceptor.Invoke("isValid", "isValid()", typeof(bool));
		}
		/// <remarks>
		///   Check if the X.509 and private key are valid.
		/// <param> name="p" the purpose to validate for
		/// </param></remarks>		<return> true if valid
		/// 	 </return>
		/// 		<short>     Check if the X.</short>
		public bool IsValid(KSSLCertificate.KSSLPurpose p) {
			return (bool) interceptor.Invoke("isValid$", "isValid(KSSLCertificate::KSSLPurpose)", typeof(bool), typeof(KSSLCertificate.KSSLPurpose), p);
		}
		public KSSLPKCS12() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KSSLPKCS12", "KSSLPKCS12()", typeof(void));
		}
		protected bool Parse(string pass) {
			return (bool) interceptor.Invoke("parse$", "parse(const QString&)", typeof(bool), typeof(string), pass);
		}
		~KSSLPKCS12() {
			interceptor.Invoke("~KSSLPKCS12", "~KSSLPKCS12()", typeof(void));
		}
		public void Dispose() {
			interceptor.Invoke("~KSSLPKCS12", "~KSSLPKCS12()", typeof(void));
		}
		/// <remarks>
		///   Create a KSSLPKCS12 object from a Base64 in a string.
		/// <param> name="base64" the base64 encoded certificate
		/// </param><param> name="password" a password for the certificate if encrypted
		/// </param></remarks>		<return> the PKCS#12 object, or NULL on failure.
		/// 	 </return>
		/// 		<short>     Create a KSSLPKCS12 object from a Base64 in a string.</short>
		public static KSSLPKCS12 FromString(string base64, string password) {
			return (KSSLPKCS12) staticInterceptor.Invoke("fromString$$", "fromString(const QString&, const QString&)", typeof(KSSLPKCS12), typeof(string), base64, typeof(string), password);
		}
		public static KSSLPKCS12 FromString(string base64) {
			return (KSSLPKCS12) staticInterceptor.Invoke("fromString$", "fromString(const QString&)", typeof(KSSLPKCS12), typeof(string), base64);
		}
		/// <remarks>
		///   Create a KSSLPKCS12 object by reading a PKCS#12 file.
		/// <param> name="filename" the filename of the certificate
		/// </param><param> name="password" a password for the certificate if encrypted
		/// </param></remarks>		<return> the PKCS#12 object, or NULL on failure.
		/// 	 </return>
		/// 		<short>     Create a KSSLPKCS12 object by reading a PKCS#12 file.</short>
		public static KSSLPKCS12 LoadCertFile(string filename, string password) {
			return (KSSLPKCS12) staticInterceptor.Invoke("loadCertFile$$", "loadCertFile(const QString&, const QString&)", typeof(KSSLPKCS12), typeof(string), filename, typeof(string), password);
		}
		public static KSSLPKCS12 LoadCertFile(string filename) {
			return (KSSLPKCS12) staticInterceptor.Invoke("loadCertFile$", "loadCertFile(const QString&)", typeof(KSSLPKCS12), typeof(string), filename);
		}
	}
}
