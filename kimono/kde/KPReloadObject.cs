//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	using System;
	using Qyoto;


	[SmokeClass("KPReloadObject")]
	public abstract class KPReloadObject : Object {
		protected SmokeInvocation interceptor = null;
		private IntPtr smokeObject;
		protected KPReloadObject(Type dummy) {}
		protected void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(KPReloadObject), this);
		}
		public KPReloadObject(bool priority) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KPReloadObject$", "KPReloadObject(bool)", typeof(void), typeof(bool), priority);
		}
		public KPReloadObject() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KPReloadObject", "KPReloadObject()", typeof(void));
		}
		[SmokeMethod("reload()")]
		protected abstract void Reload();
		[SmokeMethod("aboutToReload()")]
		protected virtual void AboutToReload() {
			interceptor.Invoke("aboutToReload", "aboutToReload()", typeof(void));
		}
		[SmokeMethod("configChanged()")]
		protected virtual void ConfigChanged() {
			interceptor.Invoke("configChanged", "configChanged()", typeof(void));
		}
	}
}
