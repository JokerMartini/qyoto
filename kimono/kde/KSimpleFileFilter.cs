//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	using System;
	using Qyoto;
	using System.Collections.Generic;

	/// <remarks>
	///  A simple file filter that can filter hidden dot files, by name,
	///  by mime type and by mode.
	/// </remarks>		<short> A simple file filter.  </short>

	[SmokeClass("KSimpleFileFilter")]
	public class KSimpleFileFilter : KFileFilter, IDisposable {
 		protected KSimpleFileFilter(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(KSimpleFileFilter), this);
		}
		/// <remarks>
		///  Creates a new filter. By default, it filters only hidden dot files
		///  and "." and "..".
		///      </remarks>		<short>    Creates a new filter.</short>
		public KSimpleFileFilter() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KSimpleFileFilter", "KSimpleFileFilter()", typeof(void));
		}
		/// <remarks>
		///  Enable or disable filtering hidden dot files.
		///  This option is enabled by default.
		/// <param> name="filter" true to enable filtering dot files, false to
		///         disable
		/// </param></remarks>		<short>    Enable or disable filtering hidden dot files.</short>
		/// 		<see> filterDotFiles</see>
		[SmokeMethod("setFilterDotFiles(bool)")]
		public virtual void SetFilterDotFiles(bool filter) {
			interceptor.Invoke("setFilterDotFiles$", "setFilterDotFiles(bool)", typeof(void), typeof(bool), filter);
		}
		/// <remarks>
		///  Checks whether filtering dot files is enabled.
		///  This option is enabled by default.
		/// </remarks>		<return> true if filtering is enabled, false otherwise
		/// </return>
		/// 		<short>    Checks whether filtering dot files is enabled.</short>
		/// 		<see> setFilterDotFiles</see>
		public bool FilterDotFiles() {
			return (bool) interceptor.Invoke("filterDotFiles", "filterDotFiles() const", typeof(bool));
		}
		/// <remarks>
		///  Filters "." and "..", default is true.
		/// <param> name="filter" true to enable, false otherwise
		///      </param></remarks>		<short>    Filters ".</short>
		[SmokeMethod("setFilterSpecials(bool)")]
		public virtual void SetFilterSpecials(bool filter) {
			interceptor.Invoke("setFilterSpecials$", "setFilterSpecials(bool)", typeof(void), typeof(bool), filter);
		}
		/// <remarks>
		///  Checks whether it filters "." and "..", default is true.
		/// </remarks>		<return> true if enabled, false otherwise
		///      </return>
		/// 		<short>    Checks whether it filters ".</short>
		public bool FilterSpecials() {
			return (bool) interceptor.Invoke("filterSpecials", "filterSpecials() const", typeof(bool));
		}
		/// <remarks>
		///  Sets a list of regular expressions to filter by name.
		///  The file will only pass if its name matches one of the regular
		///  expressions. The regular expressions are using wildcard matching.
		/// <param> name="nameFilters" a list of regular expressions
		/// </param><param> name="caseSensitive" Qt.CaseSensitive or Qt.CaseInsensitive
		///      </param></remarks>		<short>    Sets a list of regular expressions to filter by name.</short>
		[SmokeMethod("setNameFilters(const QStringList&, Qt::CaseSensitivity)")]
		public virtual void SetNameFilters(List<string> nameFilters, Qt.CaseSensitivity caseSensitive) {
			interceptor.Invoke("setNameFilters?$", "setNameFilters(const QStringList&, Qt::CaseSensitivity)", typeof(void), typeof(List<string>), nameFilters, typeof(Qt.CaseSensitivity), caseSensitive);
		}
		[SmokeMethod("setNameFilters(const QStringList&)")]
		public virtual void SetNameFilters(List<string> nameFilters) {
			interceptor.Invoke("setNameFilters?", "setNameFilters(const QStringList&)", typeof(void), typeof(List<string>), nameFilters);
		}
		/// <remarks>
		///  Sets a list of mime filters. A file can only pass if its
		///  mime type is contained in this list.
		/// <param> name="mimeFilters" the list of mime types
		/// </param></remarks>		<short>    Sets a list of mime filters.</short>
		/// 		<see> setMimeFilter</see>
		[SmokeMethod("setMimeFilters(const QStringList&)")]
		public virtual void SetMimeFilters(List<string> mimeFilters) {
			interceptor.Invoke("setMimeFilters?", "setMimeFilters(const QStringList&)", typeof(void), typeof(List<string>), mimeFilters);
		}
		/// <remarks>
		///  Returns the list of mime types.
		/// </remarks>		<return> the list of mime types
		/// </return>
		/// 		<short>    Returns the list of mime types.</short>
		/// 		<see> mimeFilter</see>
		public List<string> MimeFilters() {
			return (List<string>) interceptor.Invoke("mimeFilters", "mimeFilters() const", typeof(List<string>));
		}
		/// <remarks>
		///  Sets the mode filter. If the <code>mode</code> is 0, the filter is
		///  disabled.
		///  When enabled, a file will only pass if the files mode
		///  ANDed with <code>mode</code> is not zero.
		/// <param> name="mode" the new mode. 0 to disable
		/// </param></remarks>		<short>    Sets the mode filter.</short>
		/// 		<see> modeFilter</see>
		[SmokeMethod("setModeFilter(mode_t)")]
		public virtual void SetModeFilter(long mode) {
			interceptor.Invoke("setModeFilter$", "setModeFilter(mode_t)", typeof(void), typeof(long), mode);
		}
		/// <remarks>
		///  Returns the mode filter, as set by setModeFilter().
		/// </remarks>		<return> the mode filter, 0 if disabled
		/// </return>
		/// 		<short>    Returns the mode filter, as set by setModeFilter().</short>
		/// 		<see> setModeFilter</see>
		public long ModeFilter() {
			return (long) interceptor.Invoke("modeFilter", "modeFilter() const", typeof(long));
		}
		/// <remarks>
		///  Checks the given <code>item.</code>
		/// <param> name="item" the item to filter
		/// </param></remarks>		<return> true if the <code>item</code> passes the filter, false otherwise
		///      </return>
		/// 		<short>    Checks the given <code>item.</code></short>
		[SmokeMethod("passesFilter(const KFileItem*) const")]
		public override bool PassesFilter(KFileItem item) {
			return (bool) interceptor.Invoke("passesFilter#", "passesFilter(const KFileItem*) const", typeof(bool), typeof(KFileItem), item);
		}
		~KSimpleFileFilter() {
			interceptor.Invoke("~KSimpleFileFilter", "~KSimpleFileFilter()", typeof(void));
		}
		public void Dispose() {
			interceptor.Invoke("~KSimpleFileFilter", "~KSimpleFileFilter()", typeof(void));
		}
	}
}
