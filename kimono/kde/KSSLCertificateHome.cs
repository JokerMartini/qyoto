//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	using System;
	using Qyoto;
	using System.Collections.Generic;


	[SmokeClass("KSSLCertificateHome")]
	public class KSSLCertificateHome : Object, IDisposable {
		protected SmokeInvocation interceptor = null;
		private IntPtr smokeObject;
		protected KSSLCertificateHome(Type dummy) {}
		protected void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(KSSLCertificateHome), this);
		}
		private static SmokeInvocation staticInterceptor = null;
		static KSSLCertificateHome() {
			staticInterceptor = new SmokeInvocation(typeof(KSSLCertificateHome), null);
		}
		public enum KSSLAuthAction {
			AuthNone = 0,
			AuthSend = 1,
			AuthPrompt = 2,
			AuthDont = 3,
		}
		public KSSLCertificateHome() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KSSLCertificateHome", "KSSLCertificateHome()", typeof(void));
		}
		~KSSLCertificateHome() {
			interceptor.Invoke("~KSSLCertificateHome", "~KSSLCertificateHome()", typeof(void));
		}
		public void Dispose() {
			interceptor.Invoke("~KSSLCertificateHome", "~KSSLCertificateHome()", typeof(void));
		}
		public static KSSLPKCS12 GetCertificateByHost(string host, string password, KSSLCertificateHome.KSSLAuthAction aa) {
			return (KSSLPKCS12) staticInterceptor.Invoke("getCertificateByHost$$$", "getCertificateByHost(const QString&, const QString&, KSSLCertificateHome::KSSLAuthAction*)", typeof(KSSLPKCS12), typeof(string), host, typeof(string), password, typeof(KSSLCertificateHome.KSSLAuthAction), aa);
		}
		public static KSSLPKCS12 GetCertificateByName(string name, string password) {
			return (KSSLPKCS12) staticInterceptor.Invoke("getCertificateByName$$", "getCertificateByName(const QString&, const QString&)", typeof(KSSLPKCS12), typeof(string), name, typeof(string), password);
		}
		public static KSSLPKCS12 GetCertificateByName(string name) {
			return (KSSLPKCS12) staticInterceptor.Invoke("getCertificateByName$", "getCertificateByName(const QString&)", typeof(KSSLPKCS12), typeof(string), name);
		}
		public static string GetDefaultCertificateName(string host, KSSLCertificateHome.KSSLAuthAction aa) {
			return (string) staticInterceptor.Invoke("getDefaultCertificateName$$", "getDefaultCertificateName(const QString&, KSSLCertificateHome::KSSLAuthAction*)", typeof(string), typeof(string), host, typeof(KSSLCertificateHome.KSSLAuthAction), aa);
		}
		public static string GetDefaultCertificateName(string host) {
			return (string) staticInterceptor.Invoke("getDefaultCertificateName$", "getDefaultCertificateName(const QString&)", typeof(string), typeof(string), host);
		}
		public static string GetDefaultCertificateName(KSSLCertificateHome.KSSLAuthAction aa) {
			return (string) staticInterceptor.Invoke("getDefaultCertificateName$", "getDefaultCertificateName(KSSLCertificateHome::KSSLAuthAction*)", typeof(string), typeof(KSSLCertificateHome.KSSLAuthAction), aa);
		}
		public static string GetDefaultCertificateName() {
			return (string) staticInterceptor.Invoke("getDefaultCertificateName", "getDefaultCertificateName()", typeof(string));
		}
		public static KSSLPKCS12 GetDefaultCertificate(string password, KSSLCertificateHome.KSSLAuthAction aa) {
			return (KSSLPKCS12) staticInterceptor.Invoke("getDefaultCertificate$$", "getDefaultCertificate(const QString&, KSSLCertificateHome::KSSLAuthAction*)", typeof(KSSLPKCS12), typeof(string), password, typeof(KSSLCertificateHome.KSSLAuthAction), aa);
		}
		public static KSSLPKCS12 GetDefaultCertificate(string password) {
			return (KSSLPKCS12) staticInterceptor.Invoke("getDefaultCertificate$", "getDefaultCertificate(const QString&)", typeof(KSSLPKCS12), typeof(string), password);
		}
		public static KSSLPKCS12 GetDefaultCertificate(KSSLCertificateHome.KSSLAuthAction aa) {
			return (KSSLPKCS12) staticInterceptor.Invoke("getDefaultCertificate$", "getDefaultCertificate(KSSLCertificateHome::KSSLAuthAction*)", typeof(KSSLPKCS12), typeof(KSSLCertificateHome.KSSLAuthAction), aa);
		}
		public static KSSLPKCS12 GetDefaultCertificate() {
			return (KSSLPKCS12) staticInterceptor.Invoke("getDefaultCertificate", "getDefaultCertificate()", typeof(KSSLPKCS12));
		}
		public static bool HasCertificateByName(string name) {
			return (bool) staticInterceptor.Invoke("hasCertificateByName$", "hasCertificateByName(const QString&)", typeof(bool), typeof(string), name);
		}
		public static void SetDefaultCertificate(string name, bool send, bool prompt) {
			staticInterceptor.Invoke("setDefaultCertificate$$$", "setDefaultCertificate(const QString&, bool, bool)", typeof(void), typeof(string), name, typeof(bool), send, typeof(bool), prompt);
		}
		public static void SetDefaultCertificate(string name, bool send) {
			staticInterceptor.Invoke("setDefaultCertificate$$", "setDefaultCertificate(const QString&, bool)", typeof(void), typeof(string), name, typeof(bool), send);
		}
		public static void SetDefaultCertificate(string name) {
			staticInterceptor.Invoke("setDefaultCertificate$", "setDefaultCertificate(const QString&)", typeof(void), typeof(string), name);
		}
		public static void SetDefaultCertificate(KSSLPKCS12 cert, bool send, bool prompt) {
			staticInterceptor.Invoke("setDefaultCertificate#$$", "setDefaultCertificate(KSSLPKCS12*, bool, bool)", typeof(void), typeof(KSSLPKCS12), cert, typeof(bool), send, typeof(bool), prompt);
		}
		public static void SetDefaultCertificate(KSSLPKCS12 cert, bool send) {
			staticInterceptor.Invoke("setDefaultCertificate#$", "setDefaultCertificate(KSSLPKCS12*, bool)", typeof(void), typeof(KSSLPKCS12), cert, typeof(bool), send);
		}
		public static void SetDefaultCertificate(KSSLPKCS12 cert) {
			staticInterceptor.Invoke("setDefaultCertificate#", "setDefaultCertificate(KSSLPKCS12*)", typeof(void), typeof(KSSLPKCS12), cert);
		}
		public static void SetDefaultCertificate(string name, string host, bool send, bool prompt) {
			staticInterceptor.Invoke("setDefaultCertificate$$$$", "setDefaultCertificate(const QString&, const QString&, bool, bool)", typeof(void), typeof(string), name, typeof(string), host, typeof(bool), send, typeof(bool), prompt);
		}
		public static void SetDefaultCertificate(string name, string host, bool send) {
			staticInterceptor.Invoke("setDefaultCertificate$$$", "setDefaultCertificate(const QString&, const QString&, bool)", typeof(void), typeof(string), name, typeof(string), host, typeof(bool), send);
		}
		public static void SetDefaultCertificate(string name, string host) {
			staticInterceptor.Invoke("setDefaultCertificate$$", "setDefaultCertificate(const QString&, const QString&)", typeof(void), typeof(string), name, typeof(string), host);
		}
		public static void SetDefaultCertificate(KSSLPKCS12 cert, string host, bool send, bool prompt) {
			staticInterceptor.Invoke("setDefaultCertificate#$$$", "setDefaultCertificate(KSSLPKCS12*, const QString&, bool, bool)", typeof(void), typeof(KSSLPKCS12), cert, typeof(string), host, typeof(bool), send, typeof(bool), prompt);
		}
		public static void SetDefaultCertificate(KSSLPKCS12 cert, string host, bool send) {
			staticInterceptor.Invoke("setDefaultCertificate#$$", "setDefaultCertificate(KSSLPKCS12*, const QString&, bool)", typeof(void), typeof(KSSLPKCS12), cert, typeof(string), host, typeof(bool), send);
		}
		public static void SetDefaultCertificate(KSSLPKCS12 cert, string host) {
			staticInterceptor.Invoke("setDefaultCertificate#$", "setDefaultCertificate(KSSLPKCS12*, const QString&)", typeof(void), typeof(KSSLPKCS12), cert, typeof(string), host);
		}
		public static bool AddCertificate(string filename, string password, bool storePass) {
			return (bool) staticInterceptor.Invoke("addCertificate$$$", "addCertificate(const QString&, const QString&, bool)", typeof(bool), typeof(string), filename, typeof(string), password, typeof(bool), storePass);
		}
		public static bool AddCertificate(string filename, string password) {
			return (bool) staticInterceptor.Invoke("addCertificate$$", "addCertificate(const QString&, const QString&)", typeof(bool), typeof(string), filename, typeof(string), password);
		}
		public static bool AddCertificate(KSSLPKCS12 cert, string passToStore) {
			return (bool) staticInterceptor.Invoke("addCertificate#$", "addCertificate(KSSLPKCS12*, const QString&)", typeof(bool), typeof(KSSLPKCS12), cert, typeof(string), passToStore);
		}
		public static bool AddCertificate(KSSLPKCS12 cert) {
			return (bool) staticInterceptor.Invoke("addCertificate#", "addCertificate(KSSLPKCS12*)", typeof(bool), typeof(KSSLPKCS12), cert);
		}
		public static bool DeleteCertificate(string filename, string password) {
			return (bool) staticInterceptor.Invoke("deleteCertificate$$", "deleteCertificate(const QString&, const QString&)", typeof(bool), typeof(string), filename, typeof(string), password);
		}
		public static bool DeleteCertificate(KSSLPKCS12 cert) {
			return (bool) staticInterceptor.Invoke("deleteCertificate#", "deleteCertificate(KSSLPKCS12*)", typeof(bool), typeof(KSSLPKCS12), cert);
		}
		public static bool DeleteCertificateByName(string name) {
			return (bool) staticInterceptor.Invoke("deleteCertificateByName$", "deleteCertificateByName(const QString&)", typeof(bool), typeof(string), name);
		}
		public static List<string> GetCertificateList() {
			return (List<string>) staticInterceptor.Invoke("getCertificateList", "getCertificateList()", typeof(List<string>));
		}
	}
}
