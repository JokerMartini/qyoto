//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	using System;
	using Qyoto;

	/// <remarks>
	///  It shows the list of available plugins
	///  Since the user needs a way to know what a specific plugin does every plugin
	///  sould install a desktop file containing a name, comment and category field.
	///  The category is useful for applications that can use different kinds of
	///  plugins like a playlist, skin or visualization
	///  The location of these desktop files is the
	///  share/apps/&lt;instancename&gt;/&lt;plugindir&gt; directory. But if you need
	///  you may use a different directory
	///  You can add plugins from different KConfig[group], by just calling all times
	///  you want addPlugins method with the correct parameters
	///  Additionally, calls to constructor with same <code>categoryName</code>, will add new
	///  items to the same category, even if plugins are from different categories
	/// </remarks>		<author> Rafael Fernández López <ereslibre@gmail.com>
	///   </author>
	/// 		<short> A widget to select what plugins to load and configure the plugins. </short>

	[SmokeClass("KPluginSelector")]
	public class KPluginSelector : QWidget, IDisposable {
 		protected KPluginSelector(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(KPluginSelector), this);
		}
		public KPluginSelector() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KPluginSelector", "KPluginSelector()", typeof(void));
		}
		~KPluginSelector() {
			interceptor.Invoke("~KPluginSelector", "~KPluginSelector()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~KPluginSelector", "~KPluginSelector()", typeof(void));
		}
		protected new IKPluginSelectorSignals Emit {
			get { return (IKPluginSelectorSignals) Q_EMIT; }
		}
	}

	public interface IKPluginSelectorSignals : IQWidgetSignals {
	}
}
