//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	using System;
	using Qyoto;

	/// <remarks>
	///  Container widget for buttons.
	///  An extension of QDialogButtonBox which allow the use of KGuiItem and
	///  conveniance slot connection.
	/// </remarks>		<author> Olivier Goffart <ogoffart@kde.org>
	/// </author>
	/// 		<short>    Container widget for buttons.</short>

	[SmokeClass("KDialogButtonBox")]
	public class KDialogButtonBox : QDialogButtonBox, IDisposable {
 		protected KDialogButtonBox(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(KDialogButtonBox), this);
		}
		/// <remarks>
		///  Create an empty container for buttons.
		///  If <code>_orientation</code> is <code>Vertical</code>, the buttons inserted with
		///  addButton() are laid out from top to bottom, otherwise they
		///  are laid out from left to right.
		///     </remarks>		<short>    Create an empty container for buttons.</short>
		public KDialogButtonBox(QWidget parent, Qt.Orientation _orientation) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KDialogButtonBox#$", "KDialogButtonBox(QWidget*, Qt::Orientation)", typeof(void), typeof(QWidget), parent, typeof(Qt.Orientation), _orientation);
		}
		public KDialogButtonBox(QWidget parent) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KDialogButtonBox#", "KDialogButtonBox(QWidget*)", typeof(void), typeof(QWidget), parent);
		}
		/// <remarks>
		///  Creates a push button with the given text, adds it to the button box for the specified role, and returns the corresponding push button. 
		///  If role is invalid, no button is created, and zero is returned.
		///  The clicked signal of the button is automatically connected to the slot
		/// <param> name="text" the text of the button to add.
		/// </param><param> name="role" the button role
		/// </param><param> name="receiver" An object to connect to.
		/// </param><param> name="slot" A Qt slot to connect the 'clicked()' signal to.
		/// </param></remarks>		<return> A pointer to the new button.
		///     </return>
		/// 		<short>    Creates a push button with the given text, adds it to the button box for the specified role, and returns the corresponding push button.</short>
		public QPushButton AddButton(string text, QDialogButtonBox.ButtonRole role, QObject receiver, string slot) {
			return (QPushButton) interceptor.Invoke("addButton$$#$", "addButton(const QString&, QDialogButtonBox::ButtonRole, QObject*, const char*)", typeof(QPushButton), typeof(string), text, typeof(QDialogButtonBox.ButtonRole), role, typeof(QObject), receiver, typeof(string), slot);
		}
		/// <remarks>
		///  Creates a push button with the given KUiItem, adds it to the button box for the specified role, and returns the corresponding push button. 
		///  If role is invalid, the button is created, but not added.
		///  The clicked signal of the button is automatically connected to the slot
		/// <param> name="guiitem" text and icon on the button
		/// </param><param> name="role" the button role
		/// </param><param> name="receiver" An object to connect to.
		/// </param><param> name="slot" A Qt slot to connect the 'clicked()' signal to.
		/// </param></remarks>		<return> A pointer to the new button.
		///     </return>
		/// 		<short>    Creates a push button with the given KUiItem, adds it to the button box for the specified role, and returns the corresponding push button.</short>
		public KPushButton AddButton(KGuiItem guiitem, QDialogButtonBox.ButtonRole role, QObject receiver, string slot) {
			return (KPushButton) interceptor.Invoke("addButton#$#$", "addButton(const KGuiItem&, QDialogButtonBox::ButtonRole, QObject*, const char*)", typeof(KPushButton), typeof(KGuiItem), guiitem, typeof(QDialogButtonBox.ButtonRole), role, typeof(QObject), receiver, typeof(string), slot);
		}
		public KPushButton AddButton(KGuiItem guiitem, QDialogButtonBox.ButtonRole role, QObject receiver) {
			return (KPushButton) interceptor.Invoke("addButton#$#", "addButton(const KGuiItem&, QDialogButtonBox::ButtonRole, QObject*)", typeof(KPushButton), typeof(KGuiItem), guiitem, typeof(QDialogButtonBox.ButtonRole), role, typeof(QObject), receiver);
		}
		public KPushButton AddButton(KGuiItem guiitem, QDialogButtonBox.ButtonRole role) {
			return (KPushButton) interceptor.Invoke("addButton#$", "addButton(const KGuiItem&, QDialogButtonBox::ButtonRole)", typeof(KPushButton), typeof(KGuiItem), guiitem, typeof(QDialogButtonBox.ButtonRole), role);
		}
		~KDialogButtonBox() {
			interceptor.Invoke("~KDialogButtonBox", "~KDialogButtonBox()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~KDialogButtonBox", "~KDialogButtonBox()", typeof(void));
		}
		protected new IKDialogButtonBoxSignals Emit {
			get { return (IKDialogButtonBoxSignals) Q_EMIT; }
		}
	}

	public interface IKDialogButtonBoxSignals : IQDialogButtonBoxSignals {
	}
}
