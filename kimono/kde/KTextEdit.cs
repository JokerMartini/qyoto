//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	using System;
	using Qyoto;

	/// <remarks>
	///  This is just a little subclass of QTextEdit, implementing
	///  some standard KDE features, like Cursor auto-hiding, configurable
	///  wheelscrolling (fast-scroll or zoom) and deleting of entire
	///  words with Ctrl-Backspace or Ctrl-Delete.
	///  Basic rule: whenever you want to use QTextEdit, use KTextEdit!
	/// </remarks>		<author> Carsten Pfeiffer <pfeiffer@kde.org>
	///  </author>
	/// 		<short> A KDE'ified QTextEdit.</short>
	/// 		<see> QTextEdit</see>

	[SmokeClass("KTextEdit")]
	public class KTextEdit : QTextEdit, IDisposable {
 		protected KTextEdit(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(KTextEdit), this);
		}
		/// <remarks>
		///  Constructs a KTextEdit object. See QTextEdit.QTextEdit
		///  for details.
		///      </remarks>		<short>    Constructs a KTextEdit object.</short>
		public KTextEdit(string text, QWidget parent) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KTextEdit$#", "KTextEdit(const QString&, QWidget*)", typeof(void), typeof(string), text, typeof(QWidget), parent);
		}
		public KTextEdit(string text) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KTextEdit$", "KTextEdit(const QString&)", typeof(void), typeof(string), text);
		}
		/// <remarks>
		///  Constructs a KTextEdit object. See QTextEdit.QTextEdit
		///  for details.
		///      </remarks>		<short>    Constructs a KTextEdit object.</short>
		public KTextEdit(QWidget parent) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KTextEdit#", "KTextEdit(QWidget*)", typeof(void), typeof(QWidget), parent);
		}
		public KTextEdit() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KTextEdit", "KTextEdit()", typeof(void));
		}
		/// <remarks>
		///  Reimplemented to set a proper "deactivated" background color.
		///      </remarks>		<short>    Reimplemented to set a proper "deactivated" background color.</short>
		[SmokeMethod("setReadOnly(bool)")]
		public virtual void SetReadOnly(bool readOnly) {
			interceptor.Invoke("setReadOnly$", "setReadOnly(bool)", typeof(void), typeof(bool), readOnly);
		}
		/// <remarks>
		///  Turns spell checking for this text edit on or off. Note that spell
		///  checking is only available in read-writable KTextEdits.
		/// </remarks>		<short>    Turns spell checking for this text edit on or off.</short>
		/// 		<see> checkSpellingEnabled</see>
		/// 		<see> isReadOnly</see>
		/// 		<see> setReadOnly</see>
		public void SetCheckSpellingEnabled(bool check) {
			interceptor.Invoke("setCheckSpellingEnabled$", "setCheckSpellingEnabled(bool)", typeof(void), typeof(bool), check);
		}
		/// <remarks>
		///  Returns true if spell checking is enabled for this text edit.
		///  Note that it even returns true if this is a read-only KTextEdit,
		///  where spell checking is actually disabled.  By default spell checking is disabled.
		///      @ see setCheckSpellingEnabled()
		///      </remarks>		<short>    Returns true if spell checking is enabled for this text edit.</short>
		public bool CheckSpellingEnabled() {
			return (bool) interceptor.Invoke("checkSpellingEnabled", "checkSpellingEnabled() const", typeof(bool));
		}
		public void HighlightWord(int length, int pos) {
			interceptor.Invoke("highlightWord$$", "highlightWord(int, int)", typeof(void), typeof(int), length, typeof(int), pos);
		}
		public void SetSpellCheckingConfigFileName(string arg1) {
			interceptor.Invoke("setSpellCheckingConfigFileName$", "setSpellCheckingConfigFileName(const QString&)", typeof(void), typeof(string), arg1);
		}
		/// <remarks>
		///  Allow to create specific Highlighter
		///      </remarks>		<short>    Allow to create specific Highlighter      </short>
		[SmokeMethod("createHighlighter()")]
		public virtual void CreateHighlighter() {
			interceptor.Invoke("createHighlighter", "createHighlighter()", typeof(void));
		}
		public Sonnet.Highlighter Hightighter() {
			return (Sonnet.Highlighter) interceptor.Invoke("hightighter", "hightighter() const", typeof(Sonnet.Highlighter));
		}
		public void SetHightighter(Sonnet.Highlighter _highLighter) {
			interceptor.Invoke("setHightighter#", "setHightighter(Sonnet::Highlighter*)", typeof(void), typeof(Sonnet.Highlighter), _highLighter);
		}
		/// <remarks>
		///  Create a modal dialog to check the spelling.  This slot will not return
		///  until spell checking has been completed.
		///      </remarks>		<short>    Create a modal dialog to check the spelling.</short>
		[Q_SLOT("void checkSpelling()")]
		public void CheckSpelling() {
			interceptor.Invoke("checkSpelling", "checkSpelling()", typeof(void));
		}
		/// <remarks>
		///  Reimplemented to catch "delete word" key events.
		///      </remarks>		<short>    Reimplemented to catch "delete word" key events.</short>
		[SmokeMethod("keyPressEvent(QKeyEvent*)")]
		protected override void KeyPressEvent(QKeyEvent arg1) {
			interceptor.Invoke("keyPressEvent#", "keyPressEvent(QKeyEvent*)", typeof(void), typeof(QKeyEvent), arg1);
		}
		/// <remarks>
		///  Reimplemented to instantiate a KDictSpellingHighlighter, if
		///  spellchecking is enabled.
		///      </remarks>		<short>    Reimplemented to instantiate a KDictSpellingHighlighter, if  spellchecking is enabled.</short>
		[SmokeMethod("focusInEvent(QFocusEvent*)")]
		protected override void FocusInEvent(QFocusEvent arg1) {
			interceptor.Invoke("focusInEvent#", "focusInEvent(QFocusEvent*)", typeof(void), typeof(QFocusEvent), arg1);
		}
		/// <remarks>
		///  Reimplemented to allow fast-wheelscrolling with Ctrl-Wheel
		///  or zoom.
		///      </remarks>		<short>    Reimplemented to allow fast-wheelscrolling with Ctrl-Wheel  or zoom.</short>
		[SmokeMethod("wheelEvent(QWheelEvent*)")]
		protected override void WheelEvent(QWheelEvent arg1) {
			interceptor.Invoke("wheelEvent#", "wheelEvent(QWheelEvent*)", typeof(void), typeof(QWheelEvent), arg1);
		}
		/// <remarks>
		///  Deletes a word backwards from the current cursor position,
		///  if available.
		///      </remarks>		<short>    Deletes a word backwards from the current cursor position,  if available.</short>
		[SmokeMethod("deleteWordBack()")]
		protected virtual void DeleteWordBack() {
			interceptor.Invoke("deleteWordBack", "deleteWordBack()", typeof(void));
		}
		/// <remarks>
		///  Deletes a word forwards from the current cursor position,
		///  if available.
		///      </remarks>		<short>    Deletes a word forwards from the current cursor position,  if available.</short>
		[SmokeMethod("deleteWordForward()")]
		protected virtual void DeleteWordForward() {
			interceptor.Invoke("deleteWordForward", "deleteWordForward()", typeof(void));
		}
		/// <remarks>
		///  Reimplemented from QTextEdit to add spelling related items
		///  when appropriate.
		///      </remarks>		<short>    Reimplemented from QTextEdit to add spelling related items  when appropriate.</short>
		[SmokeMethod("contextMenuEvent(QContextMenuEvent*)")]
		protected override void ContextMenuEvent(QContextMenuEvent arg1) {
			interceptor.Invoke("contextMenuEvent#", "contextMenuEvent(QContextMenuEvent*)", typeof(void), typeof(QContextMenuEvent), arg1);
		}
		~KTextEdit() {
			interceptor.Invoke("~KTextEdit", "~KTextEdit()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~KTextEdit", "~KTextEdit()", typeof(void));
		}
		protected new IKTextEditSignals Emit {
			get { return (IKTextEditSignals) Q_EMIT; }
		}
	}

	public interface IKTextEditSignals : IQTextEditSignals {
	}
}
