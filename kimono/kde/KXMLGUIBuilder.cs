//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	using System;
	using Qyoto;
	using System.Runtime.InteropServices;
	using System.Collections.Generic;

	public interface IKXMLGUIBuilder {
		KXMLGUIClient BuilderClient();
		void SetBuilderClient(KXMLGUIClient client);
		KComponentData BuilderComponentData();
		void SetBuilderComponentData(KComponentData componentData);
		QWidget Widget();
		List<string> ContainerTags();
		QWidget CreateContainer(QWidget parent, int index, QDomElement element, ref int id);
		void RemoveContainer(QWidget container, QWidget parent, QDomElement element, int id);
		List<string> CustomTags();
		QAction CreateCustomElement(QWidget parent, int index, QDomElement element);
		void RemoveCustomElement(QWidget parent, QAction action);
		void FinalizeGUI(KXMLGUIClient client);
	}

	/// <remarks>
	///  Abstract interface for a "GUI builder", used by the GUIFactory
	///  This interface is implemented by KMainWindow for the case where
	///  the toplevel widget is a KMainWindow. Other implementations may appear
	///  in the future (dialogs for instance)
	///  </remarks>		<short>    Abstract interface for a "GUI builder", used by the GUIFactory  This interface is implemented by KMainWindow for the case where  the toplevel widget is a KMainWindow.</short>

	[SmokeClass("KXMLGUIBuilder")]
	public class KXMLGUIBuilder : Object, IKXMLGUIBuilder, IDisposable {
		protected SmokeInvocation interceptor = null;
		private IntPtr smokeObject;
		protected KXMLGUIBuilder(Type dummy) {}
		protected void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(KXMLGUIBuilder), this);
		}
		public KXMLGUIBuilder(QWidget widget) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KXMLGUIBuilder#", "KXMLGUIBuilder(QWidget*)", typeof(void), typeof(QWidget), widget);
		}
		public KXMLGUIClient BuilderClient() {
			return (KXMLGUIClient) interceptor.Invoke("builderClient", "builderClient() const", typeof(KXMLGUIClient));
		}
		public void SetBuilderClient(KXMLGUIClient client) {
			interceptor.Invoke("setBuilderClient#", "setBuilderClient(KXMLGUIClient*)", typeof(void), typeof(KXMLGUIClient), client);
		}
		public KComponentData BuilderComponentData() {
			return (KComponentData) interceptor.Invoke("builderComponentData", "builderComponentData() const", typeof(KComponentData));
		}
		public void SetBuilderComponentData(KComponentData componentData) {
			interceptor.Invoke("setBuilderComponentData#", "setBuilderComponentData(const KComponentData&)", typeof(void), typeof(KComponentData), componentData);
		}
		public QWidget Widget() {
			return (QWidget) interceptor.Invoke("widget", "widget()", typeof(QWidget));
		}
		[SmokeMethod("containerTags() const")]
		public virtual List<string> ContainerTags() {
			return (List<string>) interceptor.Invoke("containerTags", "containerTags() const", typeof(List<string>));
		}
		/// <remarks>
		///  Creates a container (menubar/menu/toolbar/statusbar/separator/...)
		///  from an element in the XML file
		/// <param> name="parent" The parent for the container
		/// </param><param> name="index" The index where the container should be inserted
		///               into the parent container/widget
		/// </param><param> name="element" The element from the DOM tree describing the
		///                 container (use it to access container specified
		///                 attributes or child elements)
		/// </param><param> name="id" The id to be used for this container
		///    </param></remarks>		<short>    Creates a container (menubar/menu/toolbar/statusbar/separator/.</short>
		[SmokeMethod("createContainer(QWidget*, int, const QDomElement&, int&)")]
		public virtual QWidget CreateContainer(QWidget parent, int index, QDomElement element, ref int id) {
			StackItem[] stack = new StackItem[5];
#if DEBUG
			stack[1].s_class = (IntPtr) DebugGCHandle.Alloc(parent);
#else
			stack[1].s_class = (IntPtr) GCHandle.Alloc(parent);
#endif
			stack[2].s_int = index;
#if DEBUG
			stack[3].s_class = (IntPtr) DebugGCHandle.Alloc(element);
#else
			stack[3].s_class = (IntPtr) GCHandle.Alloc(element);
#endif
			stack[4].s_int = id;
			interceptor.Invoke("createContainer#$#$", "createContainer(QWidget*, int, const QDomElement&, int&)", stack);
#if DEBUG
			DebugGCHandle.Free((GCHandle) stack[1].s_class);
#else
			((GCHandle) stack[1].s_class).Free();
#endif
#if DEBUG
			DebugGCHandle.Free((GCHandle) stack[3].s_class);
#else
			((GCHandle) stack[3].s_class).Free();
#endif
			id = stack[4].s_int;
			object returnValue = ((GCHandle) stack[0].s_class).Target;
#if DEBUG
			DebugGCHandle.Free((GCHandle) stack[0].s_class);
#else
			((GCHandle) stack[0].s_class).Free();
#endif
			return (QWidget) returnValue;
		}
		/// <remarks>
		///  Removes the given (and previously via createContainer )
		///  created container.
		///    </remarks>		<short>    Removes the given (and previously via createContainer )  created container.</short>
		[SmokeMethod("removeContainer(QWidget*, QWidget*, QDomElement&, int)")]
		public virtual void RemoveContainer(QWidget container, QWidget parent, QDomElement element, int id) {
			interceptor.Invoke("removeContainer###$", "removeContainer(QWidget*, QWidget*, QDomElement&, int)", typeof(void), typeof(QWidget), container, typeof(QWidget), parent, typeof(QDomElement), element, typeof(int), id);
		}
		[SmokeMethod("customTags() const")]
		public virtual List<string> CustomTags() {
			return (List<string>) interceptor.Invoke("customTags", "customTags() const", typeof(List<string>));
		}
		[SmokeMethod("createCustomElement(QWidget*, int, const QDomElement&)")]
		public virtual QAction CreateCustomElement(QWidget parent, int index, QDomElement element) {
			return (QAction) interceptor.Invoke("createCustomElement#$#", "createCustomElement(QWidget*, int, const QDomElement&)", typeof(QAction), typeof(QWidget), parent, typeof(int), index, typeof(QDomElement), element);
		}
		[SmokeMethod("removeCustomElement(QWidget*, QAction*)")]
		public virtual void RemoveCustomElement(QWidget parent, QAction action) {
			interceptor.Invoke("removeCustomElement##", "removeCustomElement(QWidget*, QAction*)", typeof(void), typeof(QWidget), parent, typeof(QAction), action);
		}
		[SmokeMethod("finalizeGUI(KXMLGUIClient*)")]
		public virtual void FinalizeGUI(KXMLGUIClient client) {
			interceptor.Invoke("finalizeGUI#", "finalizeGUI(KXMLGUIClient*)", typeof(void), typeof(KXMLGUIClient), client);
		}
		~KXMLGUIBuilder() {
			interceptor.Invoke("~KXMLGUIBuilder", "~KXMLGUIBuilder()", typeof(void));
		}
		public void Dispose() {
			interceptor.Invoke("~KXMLGUIBuilder", "~KXMLGUIBuilder()", typeof(void));
		}
	}
}
