//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	namespace DOM {

	using System;
	using Qyoto;

	/// <remarks>
	///  The <code>CSSRule</code> interface is the abstract base interface
	///  for any type of CSS <a
	///  href="http://www.w3.org/TR/REC-CSS2/syndata.html#q5"> statement
	///  </a> . This includes both <a
	///  href="http://www.w3.org/TR/REC-CSS2/syndata.html#q8"> rule sets
	///  </a> and <a
	///  href="http://www.w3.org/TR/REC-CSS2/syndata.html#at-rules">
	///  at-rules </a> . An implementation is expected to preserve all rules
	///  specified in a CSS style sheet, even if it is not recognized.
	///  Unrecognized rules are represented using the <code>CSSUnknownRule</code>
	///  interface.
	///  </remarks>		<short>    The <code>CSSRule</code> interface is the abstract base interface  for any type of CSS <a  href="http://www.</short>

	[SmokeClass("DOM::CSSRule")]
	public class CSSRule : Object, IDisposable {
		protected SmokeInvocation interceptor = null;
		private IntPtr smokeObject;
		protected CSSRule(Type dummy) {}
		protected void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(CSSRule), this);
		}
		// DOM::CSSRule* CSSRule(DOM::CSSRuleImpl* arg1); >>>> NOT CONVERTED
		// void assignOther(const DOM::CSSRule& arg1,DOM::CSSRule::RuleType arg2); >>>> NOT CONVERTED
		public CSSRule() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("CSSRule", "CSSRule()", typeof(void));
		}
		public CSSRule(DOM.CSSRule other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("CSSRule#", "CSSRule(const DOM::CSSRule&)", typeof(void), typeof(DOM.CSSRule), other);
		}
		/// <remarks>
		///  The type of the rule, as defined above. The expectation is that
		///  binding-specific casting methods can be used to cast down from
		///  an instance of the <code>CSSRule</code> interface to the
		///  specific derived interface implied by the <code>type</code> .
		///      </remarks>		<short>    The type of the rule, as defined above.</short>
		public ushort type() {
			return (ushort) interceptor.Invoke("type", "type() const", typeof(ushort));
		}
		/// <remarks>
		///  The parsable textual representation of the rule. This reflects
		///  the current state of the rule and not its initial value.
		///      </remarks>		<short>    The parsable textual representation of the rule.</short>
		public string CssText() {
			return (string) interceptor.Invoke("cssText", "cssText() const", typeof(string));
		}
		/// <remarks>
		///  see cssText
		///   HIERARCHY_REQUEST_ERR: Raised if the rule cannot be inserted
		///  at this point in the style sheet.
		///   NO_MODIFICATION_ALLOWED_ERR: Raised if this style sheet is
		///  readonly.
		///  INVALID_MODIFICATION_ERR: Raised if the specified CSS string value
		///  represents a different type of rule than the current one.
		///      </remarks>		<short>    see cssText </short>
		public void SetCssText(string arg1) {
			interceptor.Invoke("setCssText#", "setCssText(const DOM::DOMString&)", typeof(void), typeof(string), arg1);
		}
		/// <remarks>
		///  The style sheet that contains this rule.
		///      </remarks>		<short>    The style sheet that contains this rule.</short>
		public DOM.CSSStyleSheet ParentStyleSheet() {
			return (DOM.CSSStyleSheet) interceptor.Invoke("parentStyleSheet", "parentStyleSheet() const", typeof(DOM.CSSStyleSheet));
		}
		/// <remarks>
		///  If this rule is contained inside another rule (e.g. a style
		///  rule inside an \@media block), this is the containing rule. If
		///  this rule is not nested inside any other rules, this returns
		///  <code>null</code> .
		///      </remarks>		<short>    If this rule is contained inside another rule (e.</short>
		public DOM.CSSRule ParentRule() {
			return (DOM.CSSRule) interceptor.Invoke("parentRule", "parentRule() const", typeof(DOM.CSSRule));
		}
		public bool IsNull() {
			return (bool) interceptor.Invoke("isNull", "isNull() const", typeof(bool));
		}
		~CSSRule() {
			interceptor.Invoke("~CSSRule", "~CSSRule()", typeof(void));
		}
		public void Dispose() {
			interceptor.Invoke("~CSSRule", "~CSSRule()", typeof(void));
		}
	}
	}
}
