//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	namespace DOM {

	using System;
	using Qyoto;

	/// <remarks>
	///  An embedded Java applet. See the <a
	///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#edef-APPLET">
	///  APPLET element definition </a> in HTML 4.0. This element is
	///  deprecated in HTML 4.0.
	///  </remarks>		<short>    An embedded Java applet.</short>

	[SmokeClass("DOM::HTMLAppletElement")]
	public class HTMLAppletElement : DOM.HTMLElement, IDisposable {
 		protected HTMLAppletElement(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(HTMLAppletElement), this);
		}
		// DOM::HTMLAppletElement* HTMLAppletElement(DOM::HTMLAppletElementImpl* arg1); >>>> NOT CONVERTED
		public HTMLAppletElement() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLAppletElement", "HTMLAppletElement()", typeof(void));
		}
		public HTMLAppletElement(DOM.HTMLAppletElement other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLAppletElement#", "HTMLAppletElement(const DOM::HTMLAppletElement&)", typeof(void), typeof(DOM.HTMLAppletElement), other);
		}
		public HTMLAppletElement(DOM.Node other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLAppletElement#", "HTMLAppletElement(const DOM::Node&)", typeof(void), typeof(DOM.Node), other);
		}
		/// <remarks>
		///  Aligns this object (vertically or horizontally) with respect to
		///  its surrounding text. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-align-IMG">
		///  align attribute definition </a> in HTML 4.0. This attribute is
		///  deprecated in HTML 4.0.
		///      </remarks>		<short>    Aligns this object (vertically or horizontally) with respect to  its surrounding text.</short>
		public string Align() {
			return (string) interceptor.Invoke("align", "align() const", typeof(string));
		}
		/// <remarks>
		///  see align
		///      </remarks>		<short>    see align      </short>
		public void SetAlign(string arg1) {
			interceptor.Invoke("setAlign#", "setAlign(const DOM::DOMString&)", typeof(void), typeof(string), arg1);
		}
		/// <remarks>
		///  Alternate text for user agents not rendering the normal content
		///  of this element. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-alt">
		///  alt attribute definition </a> in HTML 4.0. This attribute is
		///  deprecated in HTML 4.0.
		///      </remarks>		<short>    Alternate text for user agents not rendering the normal content  of this element.</short>
		public string Alt() {
			return (string) interceptor.Invoke("alt", "alt() const", typeof(string));
		}
		/// <remarks>
		///  see alt
		///      </remarks>		<short>    see alt      </short>
		public void SetAlt(string arg1) {
			interceptor.Invoke("setAlt#", "setAlt(const DOM::DOMString&)", typeof(void), typeof(string), arg1);
		}
		/// <remarks>
		///  Comma-separated archive list. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-archive-APPLET">
		///  archive attribute definition </a> in HTML 4.0. This attribute
		///  is deprecated in HTML 4.0.
		///      </remarks>		<short>    Comma-separated archive list.</short>
		public string Archive() {
			return (string) interceptor.Invoke("archive", "archive() const", typeof(string));
		}
		/// <remarks>
		///  see archive
		///      </remarks>		<short>    see archive      </short>
		public void SetArchive(string arg1) {
			interceptor.Invoke("setArchive#", "setArchive(const DOM::DOMString&)", typeof(void), typeof(string), arg1);
		}
		/// <remarks>
		///  Applet class file. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-code">
		///  code attribute definition </a> in HTML 4.0. This attribute is
		///  deprecated in HTML 4.0.
		///      </remarks>		<short>    Applet class file.</short>
		public string Code() {
			return (string) interceptor.Invoke("code", "code() const", typeof(string));
		}
		/// <remarks>
		///  see code
		///      </remarks>		<short>    see code      </short>
		public void SetCode(string arg1) {
			interceptor.Invoke("setCode#", "setCode(const DOM::DOMString&)", typeof(void), typeof(string), arg1);
		}
		/// <remarks>
		///  Optional base URI for applet. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-codebase-APPLET">
		///  codebase attribute definition </a> in HTML 4.0. This attribute
		///  is deprecated in HTML 4.0.
		///      </remarks>		<short>    Optional base URI for applet.</short>
		public string CodeBase() {
			return (string) interceptor.Invoke("codeBase", "codeBase() const", typeof(string));
		}
		/// <remarks>
		///  see codeBase
		///      </remarks>		<short>    see codeBase      </short>
		public void SetCodeBase(string value) {
			interceptor.Invoke("setCodeBase#", "setCodeBase(const DOM::DOMString&)", typeof(void), typeof(string), value);
		}
		/// <remarks>
		///  Override height. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-height-APPLET">
		///  height attribute definition </a> in HTML 4.0. This attribute is
		///  deprecated in HTML 4.0.
		///      </remarks>		<short>    Override height.</short>
		public string Height() {
			return (string) interceptor.Invoke("height", "height() const", typeof(string));
		}
		/// <remarks>
		///  see height
		///      </remarks>		<short>    see height      </short>
		public void SetHeight(string arg1) {
			interceptor.Invoke("setHeight#", "setHeight(const DOM::DOMString&)", typeof(void), typeof(string), arg1);
		}
		/// <remarks>
		///  Horizontal space, in pixels, to the left and right of this image, applet,
		///  or object. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-hspace">
		///  hspace attribute definition </a> in HTML 4.0. This attribute is
		///  deprecated in HTML 4.0.
		///      </remarks>		<short>    Horizontal space, in pixels, to the left and right of this image, applet,  or object.</short>
		public long GetHspace() {
			return (long) interceptor.Invoke("getHspace", "getHspace() const", typeof(long));
		}
		/// <remarks>
		///  see hspace
		///       </remarks>		<short>    see hspace       </short>
		public void SetHspace(long arg1) {
			interceptor.Invoke("setHspace$", "setHspace(long)", typeof(void), typeof(long), arg1);
		}
		/// <remarks>
		///  The name of the applet. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-name-APPLET">
		///  name attribute definition </a> in HTML 4.0. This attribute is
		///  deprecated in HTML 4.0.
		///      </remarks>		<short>    The name of the applet.</short>
		public string Name() {
			return (string) interceptor.Invoke("name", "name() const", typeof(string));
		}
		/// <remarks>
		///  see name
		///      </remarks>		<short>    see name      </short>
		public void SetName(string arg1) {
			interceptor.Invoke("setName#", "setName(const DOM::DOMString&)", typeof(void), typeof(string), arg1);
		}
		/// <remarks>
		///  Serialized applet file. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-object">
		///  object attribute definition </a> in HTML 4.0. This attribute is
		///  deprecated in HTML 4.0.
		///      </remarks>		<short>    Serialized applet file.</short>
		public string Object() {
			return (string) interceptor.Invoke("object", "object() const", typeof(string));
		}
		/// <remarks>
		///  see object
		///      </remarks>		<short>    see object      </short>
		public void SetObject(string arg1) {
			interceptor.Invoke("setObject#", "setObject(const DOM::DOMString&)", typeof(void), typeof(string), arg1);
		}
		/// <remarks>
		///  Vertical space, in pixels, above and below this image, applet, or object.
		///  See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-vspace">
		///  vspace attribute definition </a> in HTML 4.0. This attribute is
		///  deprecated in HTML 4.0.
		///      </remarks>		<short>    Vertical space, in pixels, above and below this image, applet, or object.</short>
		public long GetVspace() {
			return (long) interceptor.Invoke("getVspace", "getVspace() const", typeof(long));
		}
		/// <remarks>
		///  see vspace
		///       </remarks>		<short>    see vspace       </short>
		public void SetVspace(long arg1) {
			interceptor.Invoke("setVspace$", "setVspace(long)", typeof(void), typeof(long), arg1);
		}
		/// <remarks>
		///  Override width. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-width-APPLET">
		///  width attribute definition </a> in HTML 4.0. This attribute is
		///  deprecated in HTML 4.0.
		///      </remarks>		<short>    Override width.</short>
		public string Width() {
			return (string) interceptor.Invoke("width", "width() const", typeof(string));
		}
		/// <remarks>
		///  see width
		///      </remarks>		<short>    see width      </short>
		public void SetWidth(string arg1) {
			interceptor.Invoke("setWidth#", "setWidth(const DOM::DOMString&)", typeof(void), typeof(string), arg1);
		}
		~HTMLAppletElement() {
			interceptor.Invoke("~HTMLAppletElement", "~HTMLAppletElement()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~HTMLAppletElement", "~HTMLAppletElement()", typeof(void));
		}
	}
	}
}
