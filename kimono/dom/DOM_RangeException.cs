//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	namespace DOM {

	using System;
	using Qyoto;


	[SmokeClass("DOM::RangeException")]
	public class RangeException : Object, IDisposable {
		protected SmokeInvocation interceptor = null;
		private IntPtr smokeObject;
		protected RangeException(Type dummy) {}
		protected void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(RangeException), this);
		}
		public RangeException(ushort _code) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("RangeException$", "RangeException(unsigned short)", typeof(void), typeof(ushort), _code);
		}
		public RangeException(DOM.RangeException other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("RangeException#", "RangeException(const DOM::RangeException&)", typeof(void), typeof(DOM.RangeException), other);
		}
		~RangeException() {
			interceptor.Invoke("~RangeException", "~RangeException()", typeof(void));
		}
		public void Dispose() {
			interceptor.Invoke("~RangeException", "~RangeException()", typeof(void));
		}
	}
	}
}
