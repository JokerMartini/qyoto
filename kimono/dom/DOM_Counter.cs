//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	namespace DOM {

	using System;
	using Qyoto;

	/// <remarks>
	///  The <code>Counter</code> interface is used to represent any <a
	///  href="http://www.w3.org/TR/REC-CSS2/syndata.html#value-def-counter">
	///  counter or counters function </a> value. This interface reflects
	///  the values in the underlying style property. Hence, modifications
	///  made through this interface modify the style property.
	///  </remarks>		<short>    The <code>Counter</code> interface is used to represent any <a  href="http://www.</short>

	[SmokeClass("DOM::Counter")]
	public class Counter : Object, IDisposable {
		protected SmokeInvocation interceptor = null;
		private IntPtr smokeObject;
		protected Counter(Type dummy) {}
		protected void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(Counter), this);
		}
		// DOM::Counter* Counter(DOM::CounterImpl* arg1); >>>> NOT CONVERTED
		public Counter() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("Counter", "Counter()", typeof(void));
		}
		public Counter(DOM.Counter other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("Counter#", "Counter(const DOM::Counter&)", typeof(void), typeof(DOM.Counter), other);
		}
		/// <remarks>
		///  This attribute is used for the identifier of the counter.
		///      </remarks>		<short>    This attribute is used for the identifier of the counter.</short>
		public string Identifier() {
			return (string) interceptor.Invoke("identifier", "identifier() const", typeof(string));
		}
		/// <remarks>
		///  This attribute is used for the style of the list.
		///      </remarks>		<short>    This attribute is used for the style of the list.</short>
		public string ListStyle() {
			return (string) interceptor.Invoke("listStyle", "listStyle() const", typeof(string));
		}
		/// <remarks>
		///  This attribute is used for the separator of nested counters.
		///      </remarks>		<short>    This attribute is used for the separator of nested counters.</short>
		public string Separator() {
			return (string) interceptor.Invoke("separator", "separator() const", typeof(string));
		}
		public bool IsNull() {
			return (bool) interceptor.Invoke("isNull", "isNull() const", typeof(bool));
		}
		~Counter() {
			interceptor.Invoke("~Counter", "~Counter()", typeof(void));
		}
		public void Dispose() {
			interceptor.Invoke("~Counter", "~Counter()", typeof(void));
		}
	}
	}
}
