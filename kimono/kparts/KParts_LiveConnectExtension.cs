//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	namespace KParts {

	using System;
	using Qyoto;
	using System.Text;
	using System.Collections.Generic;

	/// <remarks>
	///  An extension class for LiveConnect, i.e. a call from JavaScript
	///  from a HTML page which embeds this part.
	///  A part can have an object hierarchie by using objid as a reference
	///  to an object.
	///  </remarks>		<short>    An extension class for LiveConnect, i.</short>

	[SmokeClass("KParts::LiveConnectExtension")]
	public class LiveConnectExtension : QObject, IDisposable {
 		protected LiveConnectExtension(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(LiveConnectExtension), this);
		}
		private static SmokeInvocation staticInterceptor = null;
		static LiveConnectExtension() {
			staticInterceptor = new SmokeInvocation(typeof(LiveConnectExtension), null);
		}
		// bool get(const unsigned long arg1,const QString& arg2,KParts::LiveConnectExtension::Type& arg3,unsigned long& arg4,QString& arg5); >>>> NOT CONVERTED
		// bool call(const unsigned long arg1,const QString& arg2,const QStringList& arg3,KParts::LiveConnectExtension::Type& arg4,unsigned long& arg5,QString& arg6); >>>> NOT CONVERTED
		// void partEvent(const unsigned long arg1,const QString& arg2,const KParts::LiveConnectExtension::ArgList& arg3); >>>> NOT CONVERTED
		public LiveConnectExtension(KParts.ReadOnlyPart parent) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("LiveConnectExtension#", "LiveConnectExtension(KParts::ReadOnlyPart*)", typeof(void), typeof(KParts.ReadOnlyPart), parent);
		}
		/// <remarks>
		///  get a field value from objid, return true on success
		///    </remarks>		<short>    get a field value from objid, return true on success    </short>
		/// <remarks>
		///  put a field value in objid, return true on success
		///    </remarks>		<short>    put a field value in objid, return true on success    </short>
		[SmokeMethod("put(const unsigned long, const QString&, const QString&)")]
		public virtual bool Put(ulong objid, string field, string value) {
			return (bool) interceptor.Invoke("put$$$", "put(const unsigned long, const QString&, const QString&)", typeof(bool), typeof(ulong), objid, typeof(string), field, typeof(string), value);
		}
		/// <remarks>
		///  calls a function of objid, return true on success
		///    </remarks>		<short>    calls a function of objid, return true on success    </short>
		/// <remarks>
		///  notifies the part that there is no reference anymore to objid
		///    </remarks>		<short>    notifies the part that there is no reference anymore to objid    </short>
		[SmokeMethod("unregister(const unsigned long)")]
		public virtual void Unregister(ulong objid) {
			interceptor.Invoke("unregister$", "unregister(const unsigned long)", typeof(void), typeof(ulong), objid);
		}
		/// <remarks>
		///  notify a event from the part of object objid
		///    </remarks>		<short>    notify a event from the part of object objid    </short>
		~LiveConnectExtension() {
			interceptor.Invoke("~LiveConnectExtension", "~LiveConnectExtension()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~LiveConnectExtension", "~LiveConnectExtension()", typeof(void));
		}
		public static KParts.LiveConnectExtension ChildObject(QObject arg1) {
			return (KParts.LiveConnectExtension) staticInterceptor.Invoke("childObject#", "childObject(QObject*)", typeof(KParts.LiveConnectExtension), typeof(QObject), arg1);
		}
		protected new ILiveConnectExtensionSignals Emit {
			get { return (ILiveConnectExtensionSignals) Q_EMIT; }
		}
	}

	public interface ILiveConnectExtensionSignals : IQObjectSignals {
	}
	}
}
