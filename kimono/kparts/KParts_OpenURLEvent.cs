//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	namespace KParts {

	using System;
	using Qyoto;

	/// <remarks>
	///  The KParts.OpenURLEvent event informs that a given part has opened a given URL.
	///  Applications can use this event to send this information to interested plugins.
	///  The event should be sent before opening the URL in the part, so that the plugins
	///  can use part().Url() to get the old URL.
	///  </remarks>		<short>    The KParts.OpenURLEvent event informs that a given part has opened a given URL.</short>

	[SmokeClass("KParts::OpenURLEvent")]
	public class OpenURLEvent : KParts.Event, IDisposable {
 		protected OpenURLEvent(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(OpenURLEvent), this);
		}
		private static SmokeInvocation staticInterceptor = null;
		static OpenURLEvent() {
			staticInterceptor = new SmokeInvocation(typeof(OpenURLEvent), null);
		}
		public OpenURLEvent(KParts.ReadOnlyPart part, KUrl url, KParts.URLArgs args) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("OpenURLEvent###", "OpenURLEvent(KParts::ReadOnlyPart*, const KUrl&, const KParts::URLArgs&)", typeof(void), typeof(KParts.ReadOnlyPart), part, typeof(KUrl), url, typeof(KParts.URLArgs), args);
		}
		public OpenURLEvent(KParts.ReadOnlyPart part, KUrl url) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("OpenURLEvent##", "OpenURLEvent(KParts::ReadOnlyPart*, const KUrl&)", typeof(void), typeof(KParts.ReadOnlyPart), part, typeof(KUrl), url);
		}
		public KParts.ReadOnlyPart Part() {
			return (KParts.ReadOnlyPart) interceptor.Invoke("part", "part() const", typeof(KParts.ReadOnlyPart));
		}
		public KUrl Url() {
			return (KUrl) interceptor.Invoke("url", "url() const", typeof(KUrl));
		}
		public KParts.URLArgs Args() {
			return (KParts.URLArgs) interceptor.Invoke("args", "args() const", typeof(KParts.URLArgs));
		}
		~OpenURLEvent() {
			interceptor.Invoke("~OpenURLEvent", "~OpenURLEvent()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~OpenURLEvent", "~OpenURLEvent()", typeof(void));
		}
		public static new bool Test(QEvent arg1) {
			return (bool) staticInterceptor.Invoke("test#", "test(const QEvent*)", typeof(bool), typeof(QEvent), arg1);
		}
	}
	}
}
