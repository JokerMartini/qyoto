//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	namespace KIO {

	using System;
	using Qyoto;

	/// <remarks>
	///  A MimetypeJob is a TransferJob that  allows you to get
	///  the mime type of an URL. Don't create directly,
	///  but use KIO.Mimetype() instead.
	/// </remarks>		<short>    A MimetypeJob is a TransferJob that  allows you to get  the mime type of an URL.</short>
	/// 		<see> mimetype</see>

	[SmokeClass("KIO::MimetypeJob")]
	public class MimetypeJob : KIO.TransferJob, IDisposable {
 		protected MimetypeJob(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(MimetypeJob), this);
		}
		/// <remarks>
		///  Do not create a MimetypeJob directly. Use KIO.Mimetype()
		///  instead.
		/// <param> name="url" the url to get
		/// </param><param> name="command" the command to issue
		/// </param><param> name="packedArgs" the arguments
		/// 	</param></remarks>		<short>    Do not create a MimetypeJob directly.</short>
		public MimetypeJob(KUrl url, int command, QByteArray packedArgs) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("MimetypeJob#$#", "MimetypeJob(const KUrl&, int, const QByteArray&)", typeof(void), typeof(KUrl), url, typeof(int), command, typeof(QByteArray), packedArgs);
		}
		/// <remarks>
		///  Called by the scheduler when a slave gets to
		///  work on this job.
		/// <param> name="slave" the slave that works on the job
		///          </param></remarks>		<short>   </short>
		[SmokeMethod("start(KIO::Slave*)")]
		public override void Start(KIO.Slave slave) {
			interceptor.Invoke("start#", "start(KIO::Slave*)", typeof(void), typeof(KIO.Slave), slave);
		}
		[Q_SLOT("void slotFinished()")]
		[SmokeMethod("slotFinished()")]
		protected override void SlotFinished() {
			interceptor.Invoke("slotFinished", "slotFinished()", typeof(void));
		}
		~MimetypeJob() {
			interceptor.Invoke("~MimetypeJob", "~MimetypeJob()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~MimetypeJob", "~MimetypeJob()", typeof(void));
		}
		protected new IMimetypeJobSignals Emit {
			get { return (IMimetypeJobSignals) Q_EMIT; }
		}
	}

	public interface IMimetypeJobSignals : KIO.ITransferJobSignals {
	}
	}
}
