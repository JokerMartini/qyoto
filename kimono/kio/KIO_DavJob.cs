//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	namespace KIO {

	using System;
	using Qyoto;

	/// <remarks>
	///  The transfer job pumps data into and/or out of a Slave.
	///  Data is sent to the slave on request of the slave ( dataReq).
	///  If data coming from the slave can not be handled, the
	///  reading of data from the slave should be suspended.
	/// </remarks>		<short>    The transfer job pumps data into and/or out of a Slave.</short>
	/// 		<see> davPropFind</see>
	/// 		<see> davPropPatch</see>
	/// 		<see> davSearch</see>

	[SmokeClass("KIO::DavJob")]
	public class DavJob : KIO.TransferJob, IDisposable {
 		protected DavJob(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(DavJob), this);
		}
		/// <remarks>
		///  Use KIO.DavPropFind(), KIO.DavPropPatch() and
		///  KIO.DavSearch() to create a new DavJob.
		/// 	 </remarks>		<short>    Use KIO.DavPropFind(), KIO.DavPropPatch() and  KIO.DavSearch() to create a new DavJob.</short>
		public DavJob(KUrl url, int method, string request) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("DavJob#$$", "DavJob(const KUrl&, int, const QString&)", typeof(void), typeof(KUrl), url, typeof(int), method, typeof(string), request);
		}
		/// <remarks>
		///  Returns the response as a QDomDocument.
		/// </remarks>		<return> the response document
		/// 	 </return>
		/// 		<short>    Returns the response as a QDomDocument.</short>
		public QDomDocument Response() {
			return (QDomDocument) interceptor.Invoke("response", "response()", typeof(QDomDocument));
		}
		[Q_SLOT("void slotFinished()")]
		[SmokeMethod("slotFinished()")]
		protected override void SlotFinished() {
			interceptor.Invoke("slotFinished", "slotFinished()", typeof(void));
		}
		[Q_SLOT("void slotData(const QByteArray&)")]
		[SmokeMethod("slotData(const QByteArray&)")]
		protected override void SlotData(QByteArray data) {
			interceptor.Invoke("slotData#", "slotData(const QByteArray&)", typeof(void), typeof(QByteArray), data);
		}
		~DavJob() {
			interceptor.Invoke("~DavJob", "~DavJob()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~DavJob", "~DavJob()", typeof(void));
		}
		protected new IDavJobSignals Emit {
			get { return (IDavJobSignals) Q_EMIT; }
		}
	}

	public interface IDavJobSignals : KIO.ITransferJobSignals {
	}
	}
}
