//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	namespace KIO {

	using System;
	using Qyoto;

	/// <remarks>
	///  A Singleton class that provides access to passwords
	///  stored in .netrc files for automatic login purposes.
	///  This is only meant to address backward compatability
	///  with old automated ftp client style logins...
	/// </remarks>		<author> Dawit Alemayehu <adawit@kde.org>
	///  </author>
	/// 		<short> An interface to the ftp .netrc files.</short>

	[SmokeClass("KIO::NetRC")]
	public class NetRC : Object {
		protected SmokeInvocation interceptor = null;
		private IntPtr smokeObject;
		protected NetRC(Type dummy) {}
		protected void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(NetRC), this);
		}
		private static SmokeInvocation staticInterceptor = null;
		static NetRC() {
			staticInterceptor = new SmokeInvocation(typeof(NetRC), null);
		}
		// bool lookup(const KUrl& arg1,KIO::NetRC::AutoLogin& arg2,bool arg3,const QString& arg4,LookUpMode mode | arg5); >>>> NOT CONVERTED
		// bool lookup(const KUrl& arg1,KIO::NetRC::AutoLogin& arg2,bool arg3,const QString& arg4); >>>> NOT CONVERTED
		// bool lookup(const KUrl& arg1,KIO::NetRC::AutoLogin& arg2,bool arg3); >>>> NOT CONVERTED
		// bool lookup(const KUrl& arg1,KIO::NetRC::AutoLogin& arg2); >>>> NOT CONVERTED
		/// <remarks>
		///  Looks up the <code>login</code> information for the given <code>url.</code>
		/// <param> name="url" the url whose login information will be checked
		/// </param><param> name="login" the login information will be writte here
		/// </param><param> name="userealnetrc" if true, use $HOME/.netrc fle
		/// </param><param> name="type" the type of the login. If null, the <code>url</code>'s protocol
		///         will be taken
		/// </param><param> name="mode" the LookUpMode flags (ORed) for the query
		///    </param></remarks>		<short>    Looks up the <code>login</code> information for the given <code>url.</code></short>
		/// <remarks>
		///  Reloads the auto login information.
		///    </remarks>		<short>    Reloads the auto login information.</short>
		public void Reload() {
			interceptor.Invoke("reload", "reload()", typeof(void));
		}
		/// <remarks>
		///  A reference to the instance of the class.
		/// </remarks>		<return> the class
		///    </return>
		/// 		<short>    A reference to the instance of the class.</short>
		public static KIO.NetRC Self() {
			return (KIO.NetRC) staticInterceptor.Invoke("self", "self()", typeof(KIO.NetRC));
		}
	}
	}
}
