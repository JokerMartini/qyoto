//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	namespace KIO {

	using System;
	using Qyoto;

	/// <remarks>
	///  Universal Directory Service
	///  UDS entry is the data structure representing all the fields about a given URL
	///  (file or directory).
	///  The KIO.ListDir() and KIO:stat() operations use this data structure.
	///  KIO defines a number of fields, see the UDS_XXX enums (see UDSFieldTypes).
	///  UDSEntry is a hashtable, so you can retrieve fields directly.
	///  For instance, to retrieve the name of the entry, use:
	///  <pre>
	///  string displayName = entry.stringValue( KIO.UDS_NAME );
	///  </pre>
	///  To know the modification time of the file/url:
	///  <pre>
	///   time_t mtime = entry.numberValue( KIO.UDS_MODIFICATION_TIME, -1 );
	///   if ( mtime != -1 )
	///       ...
	///  </pre>
	///  </remarks>		<short>    Universal Directory Service </short>

	[SmokeClass("KIO::UDSEntry")]
	public class UDSEntry : Object, IDisposable {
		protected SmokeInvocation interceptor = null;
		private IntPtr smokeObject;
		protected UDSEntry(Type dummy) {}
		protected void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(UDSEntry), this);
		}
		public string StringValue(uint field) {
			return (string) interceptor.Invoke("stringValue$", "stringValue(uint) const", typeof(string), typeof(uint), field);
		}
		public long NumberValue(uint field, long defaultValue) {
			return (long) interceptor.Invoke("numberValue$$", "numberValue(uint, long long) const", typeof(long), typeof(uint), field, typeof(long), defaultValue);
		}
		public long NumberValue(uint field) {
			return (long) interceptor.Invoke("numberValue$", "numberValue(uint) const", typeof(long), typeof(uint), field);
		}
		public bool IsDir() {
			return (bool) interceptor.Invoke("isDir", "isDir() const", typeof(bool));
		}
		public bool IsLink() {
			return (bool) interceptor.Invoke("isLink", "isLink() const", typeof(bool));
		}
		public UDSEntry() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("UDSEntry", "UDSEntry()", typeof(void));
		}
		~UDSEntry() {
			interceptor.Invoke("~UDSEntry", "~UDSEntry()", typeof(void));
		}
		public void Dispose() {
			interceptor.Invoke("~UDSEntry", "~UDSEntry()", typeof(void));
		}
	}
	}
}
