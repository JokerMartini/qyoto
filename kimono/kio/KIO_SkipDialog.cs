//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	namespace KIO {

	using System;
	using Qyoto;

	/// <remarks>
	///   See <see cref="ISkipDialogSignals"></see> for signals emitted by SkipDialog
	/// </remarks>		<short>   </short>

	[SmokeClass("KIO::SkipDialog")]
	public class SkipDialog : KDialog, IDisposable {
 		protected SkipDialog(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(SkipDialog), this);
		}
		private static SmokeInvocation staticInterceptor = null;
		static SkipDialog() {
			staticInterceptor = new SmokeInvocation(typeof(SkipDialog), null);
		}
		public SkipDialog(QWidget parent, bool _multi, string _error_text, bool _modal) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("SkipDialog#$$$", "SkipDialog(QWidget*, bool, const QString&, bool)", typeof(void), typeof(QWidget), parent, typeof(bool), _multi, typeof(string), _error_text, typeof(bool), _modal);
		}
		public SkipDialog(QWidget parent, bool _multi, string _error_text) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("SkipDialog#$$", "SkipDialog(QWidget*, bool, const QString&)", typeof(void), typeof(QWidget), parent, typeof(bool), _multi, typeof(string), _error_text);
		}
		[Q_SLOT("void b0Pressed()")]
		public void B0Pressed() {
			interceptor.Invoke("b0Pressed", "b0Pressed()", typeof(void));
		}
		[Q_SLOT("void b1Pressed()")]
		public void B1Pressed() {
			interceptor.Invoke("b1Pressed", "b1Pressed()", typeof(void));
		}
		[Q_SLOT("void b2Pressed()")]
		public void B2Pressed() {
			interceptor.Invoke("b2Pressed", "b2Pressed()", typeof(void));
		}
		~SkipDialog() {
			interceptor.Invoke("~SkipDialog", "~SkipDialog()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~SkipDialog", "~SkipDialog()", typeof(void));
		}
		public static KIO.SkipDialog_Result Open(bool _multi, string _error_text) {
			return (KIO.SkipDialog_Result) staticInterceptor.Invoke("open$$", "open(bool, const QString&)", typeof(KIO.SkipDialog_Result), typeof(bool), _multi, typeof(string), _error_text);
		}
		public static KIO.SkipDialog_Result Open(bool _multi) {
			return (KIO.SkipDialog_Result) staticInterceptor.Invoke("open$", "open(bool)", typeof(KIO.SkipDialog_Result), typeof(bool), _multi);
		}
		protected new ISkipDialogSignals Emit {
			get { return (ISkipDialogSignals) Q_EMIT; }
		}
	}

	public interface ISkipDialogSignals : IKDialogSignals {
		[Q_SIGNAL("void result(KIO::SkipDialog*, int)")]
		void Result(KIO.SkipDialog _this, int _button);
	}
	}
}
