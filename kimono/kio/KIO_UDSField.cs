//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {

	namespace KIO {

	using System;
	using Qyoto;

	/// <remarks>
	///  A field inside a UDSEntry, to store information about a file or URL.
	///  Each field is for instance the name, the size, the modification time of the file, etc.
	///  You never need to use this class directly, see UDSEntry for the public API.
	///  </remarks>		<short>    A field inside a UDSEntry, to store information about a file or URL.</short>

	[SmokeClass("KIO::UDSField")]
	public class UDSField : Object, IDisposable {
		protected SmokeInvocation interceptor = null;
		private IntPtr smokeObject;
		protected UDSField(Type dummy) {}
		protected void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(UDSField), this);
		}
		public UDSField() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("UDSField", "UDSField()", typeof(void));
		}
		/// <remarks>
		///  Create a field holding a string.
		///  This constructor is called implicitly when doing
		///  <pre>
		///  entry.insert( KIO.UDS_XXX, myString )
		///  </pre>
		///    </remarks>		<short>    Create a field holding a string.</short>
		public UDSField(string s) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("UDSField$", "UDSField(const QString&)", typeof(void), typeof(string), s);
		}
		/// <remarks>
		///  Create a field holding a long long.
		///  This constructor is called implicitly when doing
		///  <pre>
		///  entry.insert( KIO.UDS_XXX, myNumber )
		///  </pre>
		///    </remarks>		<short>    Create a field holding a long long.</short>
		public UDSField(long l) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("UDSField$", "UDSField(long long)", typeof(void), typeof(long), l);
		}
		/// <remarks>
		/// </remarks>		<return> the string value held by this UDSField
		///    </return>
		/// 		<short>   </short>
		public new string ToString() {
			return (string) interceptor.Invoke("toString", "toString() const", typeof(string));
		}
		/// <remarks>
		/// </remarks>		<return> the number value held by this UDSField
		///    </return>
		/// 		<short>   </short>
		public long ToNumber() {
			return (long) interceptor.Invoke("toNumber", "toNumber() const", typeof(long));
		}
		~UDSField() {
			interceptor.Invoke("~UDSField", "~UDSField()", typeof(void));
		}
		public void Dispose() {
			interceptor.Invoke("~UDSField", "~UDSField()", typeof(void));
		}
	}
	}
}
