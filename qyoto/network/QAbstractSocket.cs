//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	/// See <see cref="IQAbstractSocketSignals"></see> for signals emitted by QAbstractSocket
	[SmokeClass("QAbstractSocket")]
	public abstract class QAbstractSocket : QIODevice, IDisposable {
 		protected QAbstractSocket(Type dummy) : base((Type) null) {}
		[SmokeClass("QAbstractSocket")]
		interface IQAbstractSocketProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QAbstractSocket), this);
			interceptor = (QAbstractSocket) realProxy.GetTransparentProxy();
		}
		private static IQAbstractSocketProxy staticInterceptor = null;
		static QAbstractSocket() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQAbstractSocketProxy), null);
			staticInterceptor = (IQAbstractSocketProxy) realProxy.GetTransparentProxy();
		}
		public enum SocketType {
			TcpSocket = 0,
			UdpSocket = 1,
			UnknownSocketType = -1,
		}
		public enum NetworkLayerProtocol {
			IPv4Protocol = 0,
			IPv6Protocol = 1,
			UnknownNetworkLayerProtocol = -1,
		}
		public enum SocketError {
			ConnectionRefusedError = 0,
			RemoteHostClosedError = 1,
			HostNotFoundError = 2,
			SocketAccessError = 3,
			SocketResourceError = 4,
			SocketTimeoutError = 5,
			DatagramTooLargeError = 6,
			NetworkError = 7,
			AddressInUseError = 8,
			SocketAddressNotAvailableError = 9,
			UnsupportedSocketOperationError = 10,
			UnknownSocketError = -1,
		}
		public enum SocketState {
			UnconnectedState = 0,
			HostLookupState = 1,
			ConnectingState = 2,
			ConnectedState = 3,
			BoundState = 4,
			ListeningState = 5,
			ClosingState = 6,
		}
		// QAbstractSocket* QAbstractSocket(QAbstractSocket::SocketType arg1,QAbstractSocketPrivate& arg2,QObject* arg3); >>>> NOT CONVERTED
		// QAbstractSocket* QAbstractSocket(QAbstractSocket::SocketType arg1,QAbstractSocketPrivate& arg2); >>>> NOT CONVERTED
		public QAbstractSocket(QAbstractSocket.SocketType socketType, QObject parent) : this((Type) null) {
			CreateProxy();
			NewQAbstractSocket(socketType,parent);
		}
		[SmokeMethod("QAbstractSocket", "(QAbstractSocket::SocketType, QObject*)", "$#")]
		private void NewQAbstractSocket(QAbstractSocket.SocketType socketType, QObject parent) {
			((QAbstractSocket) interceptor).NewQAbstractSocket(socketType,parent);
		}
		[SmokeMethod("connectToHost", "(const QString&, quint16, OpenMode)", "$$$")]
		public void ConnectToHost(string hostName, ushort port, int mode) {
			((QAbstractSocket) interceptor).ConnectToHost(hostName,port,mode);
		}
		[SmokeMethod("connectToHost", "(const QString&, quint16)", "$$")]
		public void ConnectToHost(string hostName, ushort port) {
			((QAbstractSocket) interceptor).ConnectToHost(hostName,port);
		}
		[SmokeMethod("connectToHost", "(const QHostAddress&, quint16, OpenMode)", "#$$")]
		public void ConnectToHost(QHostAddress address, ushort port, int mode) {
			((QAbstractSocket) interceptor).ConnectToHost(address,port,mode);
		}
		[SmokeMethod("connectToHost", "(const QHostAddress&, quint16)", "#$")]
		public void ConnectToHost(QHostAddress address, ushort port) {
			((QAbstractSocket) interceptor).ConnectToHost(address,port);
		}
		[SmokeMethod("disconnectFromHost", "()", "")]
		public void DisconnectFromHost() {
			((QAbstractSocket) interceptor).DisconnectFromHost();
		}
		[SmokeMethod("isValid", "() const", "")]
		public bool IsValid() {
			return ((QAbstractSocket) interceptor).IsValid();
		}
		[SmokeMethod("bytesAvailable", "() const", "")]
		public override long BytesAvailable() {
			return ((QAbstractSocket) interceptor).BytesAvailable();
		}
		[SmokeMethod("bytesToWrite", "() const", "")]
		public override long BytesToWrite() {
			return ((QAbstractSocket) interceptor).BytesToWrite();
		}
		[SmokeMethod("canReadLine", "() const", "")]
		public override bool CanReadLine() {
			return ((QAbstractSocket) interceptor).CanReadLine();
		}
		[SmokeMethod("localPort", "() const", "")]
		public ushort LocalPort() {
			return ((QAbstractSocket) interceptor).LocalPort();
		}
		[SmokeMethod("localAddress", "() const", "")]
		public QHostAddress LocalAddress() {
			return ((QAbstractSocket) interceptor).LocalAddress();
		}
		[SmokeMethod("peerPort", "() const", "")]
		public ushort PeerPort() {
			return ((QAbstractSocket) interceptor).PeerPort();
		}
		[SmokeMethod("peerAddress", "() const", "")]
		public QHostAddress PeerAddress() {
			return ((QAbstractSocket) interceptor).PeerAddress();
		}
		[SmokeMethod("peerName", "() const", "")]
		public string PeerName() {
			return ((QAbstractSocket) interceptor).PeerName();
		}
		[SmokeMethod("readBufferSize", "() const", "")]
		public long ReadBufferSize() {
			return ((QAbstractSocket) interceptor).ReadBufferSize();
		}
		[SmokeMethod("setReadBufferSize", "(qint64)", "$")]
		public void SetReadBufferSize(long size) {
			((QAbstractSocket) interceptor).SetReadBufferSize(size);
		}
		[SmokeMethod("abort", "()", "")]
		public void Abort() {
			((QAbstractSocket) interceptor).Abort();
		}
		[SmokeMethod("socketDescriptor", "() const", "")]
		public int SocketDescriptor() {
			return ((QAbstractSocket) interceptor).SocketDescriptor();
		}
		[SmokeMethod("setSocketDescriptor", "(int, QAbstractSocket::SocketState, OpenMode)", "$$$")]
		public bool SetSocketDescriptor(int socketDescriptor, QAbstractSocket.SocketState state, int openMode) {
			return ((QAbstractSocket) interceptor).SetSocketDescriptor(socketDescriptor,state,openMode);
		}
		[SmokeMethod("setSocketDescriptor", "(int, QAbstractSocket::SocketState)", "$$")]
		public bool SetSocketDescriptor(int socketDescriptor, QAbstractSocket.SocketState state) {
			return ((QAbstractSocket) interceptor).SetSocketDescriptor(socketDescriptor,state);
		}
		[SmokeMethod("setSocketDescriptor", "(int)", "$")]
		public bool SetSocketDescriptor(int socketDescriptor) {
			return ((QAbstractSocket) interceptor).SetSocketDescriptor(socketDescriptor);
		}
		[SmokeMethod("socketType", "() const", "")]
		public QAbstractSocket.SocketType socketType() {
			return ((QAbstractSocket) interceptor).socketType();
		}
		[SmokeMethod("state", "() const", "")]
		public QAbstractSocket.SocketState State() {
			return ((QAbstractSocket) interceptor).State();
		}
		[SmokeMethod("error", "() const", "")]
		public QAbstractSocket.SocketError Error() {
			return ((QAbstractSocket) interceptor).Error();
		}
		[SmokeMethod("close", "()", "")]
		public override void Close() {
			((QAbstractSocket) interceptor).Close();
		}
		[SmokeMethod("isSequential", "() const", "")]
		public override bool IsSequential() {
			return ((QAbstractSocket) interceptor).IsSequential();
		}
		[SmokeMethod("atEnd", "() const", "")]
		public override bool AtEnd() {
			return ((QAbstractSocket) interceptor).AtEnd();
		}
		[SmokeMethod("flush", "()", "")]
		public bool Flush() {
			return ((QAbstractSocket) interceptor).Flush();
		}
		[SmokeMethod("waitForConnected", "(int)", "$")]
		public bool WaitForConnected(int msecs) {
			return ((QAbstractSocket) interceptor).WaitForConnected(msecs);
		}
		[SmokeMethod("waitForConnected", "()", "")]
		public bool WaitForConnected() {
			return ((QAbstractSocket) interceptor).WaitForConnected();
		}
		[SmokeMethod("waitForReadyRead", "(int)", "$")]
		public override bool WaitForReadyRead(int msecs) {
			return ((QAbstractSocket) interceptor).WaitForReadyRead(msecs);
		}
		[SmokeMethod("waitForReadyRead", "()", "")]
		public bool WaitForReadyRead() {
			return ((QAbstractSocket) interceptor).WaitForReadyRead();
		}
		[SmokeMethod("waitForBytesWritten", "(int)", "$")]
		public override bool WaitForBytesWritten(int msecs) {
			return ((QAbstractSocket) interceptor).WaitForBytesWritten(msecs);
		}
		[SmokeMethod("waitForBytesWritten", "()", "")]
		public bool WaitForBytesWritten() {
			return ((QAbstractSocket) interceptor).WaitForBytesWritten();
		}
		[SmokeMethod("waitForDisconnected", "(int)", "$")]
		public bool WaitForDisconnected(int msecs) {
			return ((QAbstractSocket) interceptor).WaitForDisconnected(msecs);
		}
		[SmokeMethod("waitForDisconnected", "()", "")]
		public bool WaitForDisconnected() {
			return ((QAbstractSocket) interceptor).WaitForDisconnected();
		}
		[SmokeMethod("setProxy", "(const QNetworkProxy&)", "#")]
		public void SetProxy(QNetworkProxy networkProxy) {
			((QAbstractSocket) interceptor).SetProxy(networkProxy);
		}
		[SmokeMethod("proxy", "() const", "")]
		public QNetworkProxy Proxy() {
			return ((QAbstractSocket) interceptor).Proxy();
		}
		[SmokeMethod("readData", "(char*, qint64)", "$$")]
		protected override long ReadData(string data, long maxlen) {
			return ((QAbstractSocket) interceptor).ReadData(data,maxlen);
		}
		[SmokeMethod("readLineData", "(char*, qint64)", "$$")]
		protected override long ReadLineData(string data, long maxlen) {
			return ((QAbstractSocket) interceptor).ReadLineData(data,maxlen);
		}
		[SmokeMethod("writeData", "(const char*, qint64)", "$$")]
		protected override long WriteData(string data, long len) {
			return ((QAbstractSocket) interceptor).WriteData(data,len);
		}
		[SmokeMethod("setSocketState", "(QAbstractSocket::SocketState)", "$")]
		protected void SetSocketState(QAbstractSocket.SocketState state) {
			((QAbstractSocket) interceptor).SetSocketState(state);
		}
		[SmokeMethod("setSocketError", "(QAbstractSocket::SocketError)", "$")]
		protected void SetSocketError(QAbstractSocket.SocketError socketError) {
			((QAbstractSocket) interceptor).SetSocketError(socketError);
		}
		[SmokeMethod("setLocalPort", "(quint16)", "$")]
		protected void SetLocalPort(ushort port) {
			((QAbstractSocket) interceptor).SetLocalPort(port);
		}
		[SmokeMethod("setLocalAddress", "(const QHostAddress&)", "#")]
		protected void SetLocalAddress(QHostAddress address) {
			((QAbstractSocket) interceptor).SetLocalAddress(address);
		}
		[SmokeMethod("setPeerPort", "(quint16)", "$")]
		protected void SetPeerPort(ushort port) {
			((QAbstractSocket) interceptor).SetPeerPort(port);
		}
		[SmokeMethod("setPeerAddress", "(const QHostAddress&)", "#")]
		protected void SetPeerAddress(QHostAddress address) {
			((QAbstractSocket) interceptor).SetPeerAddress(address);
		}
		[SmokeMethod("setPeerName", "(const QString&)", "$")]
		protected void SetPeerName(string name) {
			((QAbstractSocket) interceptor).SetPeerName(name);
		}
		[Q_SLOT("void connectToHostImplementation(const QString&, quint16, OpenMode)")]
		[SmokeMethod("connectToHostImplementation", "(const QString&, quint16, OpenMode)", "$$$")]
		protected void ConnectToHostImplementation(string hostName, ushort port, int mode) {
			((QAbstractSocket) interceptor).ConnectToHostImplementation(hostName,port,mode);
		}
		[Q_SLOT("void connectToHostImplementation(const QString&, quint16)")]
		[SmokeMethod("connectToHostImplementation", "(const QString&, quint16)", "$$")]
		protected void ConnectToHostImplementation(string hostName, ushort port) {
			((QAbstractSocket) interceptor).ConnectToHostImplementation(hostName,port);
		}
		[Q_SLOT("void disconnectFromHostImplementation()")]
		[SmokeMethod("disconnectFromHostImplementation", "()", "")]
		protected void DisconnectFromHostImplementation() {
			((QAbstractSocket) interceptor).DisconnectFromHostImplementation();
		}
		~QAbstractSocket() {
			DisposeQAbstractSocket();
		}
		public new void Dispose() {
			DisposeQAbstractSocket();
		}
		[SmokeMethod("~QAbstractSocket", "()", "")]
		private void DisposeQAbstractSocket() {
			((QAbstractSocket) interceptor).DisposeQAbstractSocket();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQAbstractSocketSignals Emit {
			get { return (IQAbstractSocketSignals) Q_EMIT; }
		}
	}

	public interface IQAbstractSocketSignals : IQIODeviceSignals {
		[Q_SIGNAL("void hostFound()")]
		void HostFound();
		[Q_SIGNAL("void connected()")]
		void Connected();
		[Q_SIGNAL("void disconnected()")]
		void Disconnected();
		[Q_SIGNAL("void stateChanged(QAbstractSocket::SocketState)")]
		void StateChanged(QAbstractSocket.SocketState arg1);
		[Q_SIGNAL("void error(QAbstractSocket::SocketError)")]
		void Error(QAbstractSocket.SocketError arg1);
	}
}
