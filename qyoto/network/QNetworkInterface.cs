//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	[SmokeClass("QNetworkInterface")]
	public class QNetworkInterface : MarshalByRefObject, IDisposable {
		protected QNetworkInterface interceptor = null;
		private IntPtr smokeObject;
		protected QNetworkInterface(Type dummy) {}
		[SmokeClass("QNetworkInterface")]
		interface IQNetworkInterfaceProxy {
			[SmokeMethod("interfaceFromName", "(const QString&)", "$")]
			QNetworkInterface InterfaceFromName(string name);
			[SmokeMethod("interfaceFromIndex", "(int)", "$")]
			QNetworkInterface InterfaceFromIndex(int index);
			[SmokeMethod("allInterfaces", "()", "")]
			List<QNetworkInterface> AllInterfaces();
			[SmokeMethod("allAddresses", "()", "")]
			List<QHostAddress> AllAddresses();
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QNetworkInterface), this);
			interceptor = (QNetworkInterface) realProxy.GetTransparentProxy();
		}
		private static IQNetworkInterfaceProxy staticInterceptor = null;
		static QNetworkInterface() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQNetworkInterfaceProxy), null);
			staticInterceptor = (IQNetworkInterfaceProxy) realProxy.GetTransparentProxy();
		}
		public enum InterfaceFlag {
			IsUp = 0x1,
			IsRunning = 0x2,
			CanBroadcast = 0x4,
			IsLoopBack = 0x8,
			IsPointToPoint = 0x10,
			CanMulticast = 0x20,
		}
		public QNetworkInterface() : this((Type) null) {
			CreateProxy();
			NewQNetworkInterface();
		}
		[SmokeMethod("QNetworkInterface", "()", "")]
		private void NewQNetworkInterface() {
			((QNetworkInterface) interceptor).NewQNetworkInterface();
		}
		public QNetworkInterface(QNetworkInterface other) : this((Type) null) {
			CreateProxy();
			NewQNetworkInterface(other);
		}
		[SmokeMethod("QNetworkInterface", "(const QNetworkInterface&)", "#")]
		private void NewQNetworkInterface(QNetworkInterface other) {
			((QNetworkInterface) interceptor).NewQNetworkInterface(other);
		}
		[SmokeMethod("isValid", "() const", "")]
		public bool IsValid() {
			return ((QNetworkInterface) interceptor).IsValid();
		}
		[SmokeMethod("name", "() const", "")]
		public string Name() {
			return ((QNetworkInterface) interceptor).Name();
		}
		[SmokeMethod("flags", "() const", "")]
		public int Flags() {
			return ((QNetworkInterface) interceptor).Flags();
		}
		[SmokeMethod("hardwareAddress", "() const", "")]
		public string HardwareAddress() {
			return ((QNetworkInterface) interceptor).HardwareAddress();
		}
		[SmokeMethod("addressEntries", "() const", "")]
		public List<QNetworkAddressEntry> AddressEntries() {
			return ((QNetworkInterface) interceptor).AddressEntries();
		}
		~QNetworkInterface() {
			DisposeQNetworkInterface();
		}
		public void Dispose() {
			DisposeQNetworkInterface();
		}
		[SmokeMethod("~QNetworkInterface", "()", "")]
		private void DisposeQNetworkInterface() {
			((QNetworkInterface) interceptor).DisposeQNetworkInterface();
		}
		public static QNetworkInterface InterfaceFromName(string name) {
			return staticInterceptor.InterfaceFromName(name);
		}
		public static QNetworkInterface InterfaceFromIndex(int index) {
			return staticInterceptor.InterfaceFromIndex(index);
		}
		public static List<QNetworkInterface> AllInterfaces() {
			return staticInterceptor.AllInterfaces();
		}
		public static List<QHostAddress> AllAddresses() {
			return staticInterceptor.AllAddresses();
		}
	}
}
