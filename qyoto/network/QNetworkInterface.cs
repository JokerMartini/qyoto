//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;
	using System.Collections.Generic;

	[SmokeClass("QNetworkInterface")]
	public class QNetworkInterface : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
		protected QNetworkInterface(Type dummy) {}
		interface IQNetworkInterfaceProxy {
			[SmokeMethod("interfaceFromName$", "(const QString&)")]
			QNetworkInterface InterfaceFromName(string name);
			[SmokeMethod("interfaceFromIndex$", "(int)")]
			QNetworkInterface InterfaceFromIndex(int index);
			[SmokeMethod("allInterfaces", "()")]
			List<QNetworkInterface> AllInterfaces();
			[SmokeMethod("allAddresses", "()")]
			List<QHostAddress> AllAddresses();
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QNetworkInterface), this);
			_interceptor = (QNetworkInterface) realProxy.GetTransparentProxy();
		}
		private QNetworkInterface ProxyQNetworkInterface() {
			return (QNetworkInterface) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QNetworkInterface() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQNetworkInterfaceProxy), null);
			_staticInterceptor = (IQNetworkInterfaceProxy) realProxy.GetTransparentProxy();
		}
		private static IQNetworkInterfaceProxy StaticQNetworkInterface() {
			return (IQNetworkInterfaceProxy) _staticInterceptor;
		}

		public enum InterfaceFlag {
			IsUp = 0x1,
			IsRunning = 0x2,
			CanBroadcast = 0x4,
			IsLoopBack = 0x8,
			IsPointToPoint = 0x10,
			CanMulticast = 0x20,
		}
		public QNetworkInterface() : this((Type) null) {
			CreateProxy();
			NewQNetworkInterface();
		}
		[SmokeMethod("QNetworkInterface", "()")]
		private void NewQNetworkInterface() {
			ProxyQNetworkInterface().NewQNetworkInterface();
		}
		public QNetworkInterface(QNetworkInterface other) : this((Type) null) {
			CreateProxy();
			NewQNetworkInterface(other);
		}
		[SmokeMethod("QNetworkInterface#", "(const QNetworkInterface&)")]
		private void NewQNetworkInterface(QNetworkInterface other) {
			ProxyQNetworkInterface().NewQNetworkInterface(other);
		}
		[SmokeMethod("isValid", "() const")]
		public bool IsValid() {
			return ProxyQNetworkInterface().IsValid();
		}
		[SmokeMethod("name", "() const")]
		public string Name() {
			return ProxyQNetworkInterface().Name();
		}
		[SmokeMethod("flags", "() const")]
		public int Flags() {
			return ProxyQNetworkInterface().Flags();
		}
		[SmokeMethod("hardwareAddress", "() const")]
		public string HardwareAddress() {
			return ProxyQNetworkInterface().HardwareAddress();
		}
		[SmokeMethod("addressEntries", "() const")]
		public List<QNetworkAddressEntry> AddressEntries() {
			return ProxyQNetworkInterface().AddressEntries();
		}
		public static QNetworkInterface InterfaceFromName(string name) {
			return StaticQNetworkInterface().InterfaceFromName(name);
		}
		public static QNetworkInterface InterfaceFromIndex(int index) {
			return StaticQNetworkInterface().InterfaceFromIndex(index);
		}
		public static List<QNetworkInterface> AllInterfaces() {
			return StaticQNetworkInterface().AllInterfaces();
		}
		public static List<QHostAddress> AllAddresses() {
			return StaticQNetworkInterface().AllAddresses();
		}
		~QNetworkInterface() {
			DisposeQNetworkInterface();
		}
		public void Dispose() {
			DisposeQNetworkInterface();
		}
		[SmokeMethod("~QNetworkInterface", "()")]
		private void DisposeQNetworkInterface() {
			ProxyQNetworkInterface().DisposeQNetworkInterface();
		}
	}
}
