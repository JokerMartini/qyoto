//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QUdpSocket")]
	public class QUdpSocket : QAbstractSocket, IDisposable {
 		protected QUdpSocket(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(QUdpSocket), this);
		}
		private static SmokeInvocation staticInterceptor = null;
		static QUdpSocket() {
			staticInterceptor = new SmokeInvocation(typeof(QUdpSocket), null);
		}
		public enum BindFlag {
			DefaultForPlatform = 0x0,
			ShareAddress = 0x1,
			DontShareAddress = 0x2,
			ReuseAddressHint = 0x4,
		}
		// qint64 readDatagram(char* arg1,qint64 arg2,QHostAddress* arg3,quint16* arg4); >>>> NOT CONVERTED
		public QUdpSocket(QObject parent) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QUdpSocket#", "QUdpSocket(QObject*)", typeof(void), typeof(QObject), parent);
		}
		public QUdpSocket() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QUdpSocket", "QUdpSocket()", typeof(void));
		}
		public bool Bind(QHostAddress address, ushort port) {
			return (bool) interceptor.Invoke("bind#$", "bind(const QHostAddress&, quint16)", typeof(bool), typeof(QHostAddress), address, typeof(ushort), port);
		}
		public bool Bind(ushort port) {
			return (bool) interceptor.Invoke("bind$", "bind(quint16)", typeof(bool), typeof(ushort), port);
		}
		public bool Bind() {
			return (bool) interceptor.Invoke("bind", "bind()", typeof(bool));
		}
		public bool Bind(QHostAddress address, ushort port, int mode) {
			return (bool) interceptor.Invoke("bind#$$", "bind(const QHostAddress&, quint16, BindMode)", typeof(bool), typeof(QHostAddress), address, typeof(ushort), port, typeof(int), mode);
		}
		public bool Bind(ushort port, int mode) {
			return (bool) interceptor.Invoke("bind$$", "bind(quint16, BindMode)", typeof(bool), typeof(ushort), port, typeof(int), mode);
		}
		public bool HasPendingDatagrams() {
			return (bool) interceptor.Invoke("hasPendingDatagrams", "hasPendingDatagrams() const", typeof(bool));
		}
		public long PendingDatagramSize() {
			return (long) interceptor.Invoke("pendingDatagramSize", "pendingDatagramSize() const", typeof(long));
		}
		public long ReadDatagram(string data, long maxlen, QHostAddress host) {
			return (long) interceptor.Invoke("readDatagram$$#", "readDatagram(char*, qint64, QHostAddress*)", typeof(long), typeof(string), data, typeof(long), maxlen, typeof(QHostAddress), host);
		}
		public long ReadDatagram(string data, long maxlen) {
			return (long) interceptor.Invoke("readDatagram$$", "readDatagram(char*, qint64)", typeof(long), typeof(string), data, typeof(long), maxlen);
		}
		public long WriteDatagram(string data, long len, QHostAddress host, ushort port) {
			return (long) interceptor.Invoke("writeDatagram$$#$", "writeDatagram(const char*, qint64, const QHostAddress&, quint16)", typeof(long), typeof(string), data, typeof(long), len, typeof(QHostAddress), host, typeof(ushort), port);
		}
		public long WriteDatagram(QByteArray datagram, QHostAddress host, ushort port) {
			return (long) interceptor.Invoke("writeDatagram##$", "writeDatagram(const QByteArray&, const QHostAddress&, quint16)", typeof(long), typeof(QByteArray), datagram, typeof(QHostAddress), host, typeof(ushort), port);
		}
		~QUdpSocket() {
			interceptor.Invoke("~QUdpSocket", "~QUdpSocket()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~QUdpSocket", "~QUdpSocket()", typeof(void));
		}
		public static string Tr(string s, string c) {
			return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
		}
		public static string Tr(string s) {
			return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
		}
		protected new IQUdpSocketSignals Emit {
			get { return (IQUdpSocketSignals) Q_EMIT; }
		}
	}

	public interface IQUdpSocketSignals : IQAbstractSocketSignals {
	}
}
