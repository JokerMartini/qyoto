//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QUdpSocket")]
	public class QUdpSocket : QAbstractSocket, IDisposable {
 		protected QUdpSocket(Type dummy) : base((Type) null) {}
		[SmokeClass("QUdpSocket")]
		interface IQUdpSocketProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QUdpSocket), this);
			interceptor = (QUdpSocket) realProxy.GetTransparentProxy();
		}
		private static IQUdpSocketProxy staticInterceptor = null;
		static QUdpSocket() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQUdpSocketProxy), null);
			staticInterceptor = (IQUdpSocketProxy) realProxy.GetTransparentProxy();
		}
		public enum BindFlag {
			DefaultForPlatform = 0x0,
			ShareAddress = 0x1,
			DontShareAddress = 0x2,
			ReuseAddressHint = 0x4,
		}
		// qint64 readDatagram(char* arg1,qint64 arg2,QHostAddress* arg3,quint16* arg4); >>>> NOT CONVERTED
		public QUdpSocket(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQUdpSocket(parent);
		}
		[SmokeMethod("QUdpSocket", "(QObject*)", "#")]
		private void NewQUdpSocket(QObject parent) {
			((QUdpSocket) interceptor).NewQUdpSocket(parent);
		}
		public QUdpSocket() : this((Type) null) {
			CreateProxy();
			NewQUdpSocket();
		}
		[SmokeMethod("QUdpSocket", "()", "")]
		private void NewQUdpSocket() {
			((QUdpSocket) interceptor).NewQUdpSocket();
		}
		[SmokeMethod("bind", "(const QHostAddress&, quint16)", "#$")]
		public bool Bind(QHostAddress address, ushort port) {
			return ((QUdpSocket) interceptor).Bind(address,port);
		}
		[SmokeMethod("bind", "(quint16)", "$")]
		public bool Bind(ushort port) {
			return ((QUdpSocket) interceptor).Bind(port);
		}
		[SmokeMethod("bind", "()", "")]
		public bool Bind() {
			return ((QUdpSocket) interceptor).Bind();
		}
		[SmokeMethod("bind", "(const QHostAddress&, quint16, BindMode)", "#$$")]
		public bool Bind(QHostAddress address, ushort port, int mode) {
			return ((QUdpSocket) interceptor).Bind(address,port,mode);
		}
		[SmokeMethod("bind", "(quint16, BindMode)", "$$")]
		public bool Bind(ushort port, int mode) {
			return ((QUdpSocket) interceptor).Bind(port,mode);
		}
		[SmokeMethod("hasPendingDatagrams", "() const", "")]
		public bool HasPendingDatagrams() {
			return ((QUdpSocket) interceptor).HasPendingDatagrams();
		}
		[SmokeMethod("pendingDatagramSize", "() const", "")]
		public long PendingDatagramSize() {
			return ((QUdpSocket) interceptor).PendingDatagramSize();
		}
		[SmokeMethod("readDatagram", "(char*, qint64, QHostAddress*)", "$$#")]
		public long ReadDatagram(string data, long maxlen, QHostAddress host) {
			return ((QUdpSocket) interceptor).ReadDatagram(data,maxlen,host);
		}
		[SmokeMethod("readDatagram", "(char*, qint64)", "$$")]
		public long ReadDatagram(string data, long maxlen) {
			return ((QUdpSocket) interceptor).ReadDatagram(data,maxlen);
		}
		[SmokeMethod("writeDatagram", "(const char*, qint64, const QHostAddress&, quint16)", "$$#$")]
		public long WriteDatagram(string data, long len, QHostAddress host, ushort port) {
			return ((QUdpSocket) interceptor).WriteDatagram(data,len,host,port);
		}
		[SmokeMethod("writeDatagram", "(const QByteArray&, const QHostAddress&, quint16)", "##$")]
		public long WriteDatagram(QByteArray datagram, QHostAddress host, ushort port) {
			return ((QUdpSocket) interceptor).WriteDatagram(datagram,host,port);
		}
		~QUdpSocket() {
			DisposeQUdpSocket();
		}
		public new void Dispose() {
			DisposeQUdpSocket();
		}
		[SmokeMethod("~QUdpSocket", "()", "")]
		private void DisposeQUdpSocket() {
			((QUdpSocket) interceptor).DisposeQUdpSocket();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQUdpSocketSignals Emit {
			get { return (IQUdpSocketSignals) Q_EMIT; }
		}
	}

	public interface IQUdpSocketSignals : IQAbstractSocketSignals {
	}
}
