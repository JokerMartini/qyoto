//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QHttpResponseHeader")]
	public class QHttpResponseHeader : QHttpHeader, IDisposable {
 		protected QHttpResponseHeader(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QHttpResponseHeader), this);
			interceptor = (QHttpResponseHeader) realProxy.GetTransparentProxy();
		}
		public QHttpResponseHeader() : this((Type) null) {
			CreateProxy();
			NewQHttpResponseHeader();
		}
		[SmokeMethod("QHttpResponseHeader", "()", "")]
		private void NewQHttpResponseHeader() {
			((QHttpResponseHeader) interceptor).NewQHttpResponseHeader();
		}
		public QHttpResponseHeader(QHttpResponseHeader header) : this((Type) null) {
			CreateProxy();
			NewQHttpResponseHeader(header);
		}
		[SmokeMethod("QHttpResponseHeader", "(const QHttpResponseHeader&)", "#")]
		private void NewQHttpResponseHeader(QHttpResponseHeader header) {
			((QHttpResponseHeader) interceptor).NewQHttpResponseHeader(header);
		}
		public QHttpResponseHeader(string str) : this((Type) null) {
			CreateProxy();
			NewQHttpResponseHeader(str);
		}
		[SmokeMethod("QHttpResponseHeader", "(const QString&)", "$")]
		private void NewQHttpResponseHeader(string str) {
			((QHttpResponseHeader) interceptor).NewQHttpResponseHeader(str);
		}
		public QHttpResponseHeader(int code, string text, int majorVer, int minorVer) : this((Type) null) {
			CreateProxy();
			NewQHttpResponseHeader(code,text,majorVer,minorVer);
		}
		[SmokeMethod("QHttpResponseHeader", "(int, const QString&, int, int)", "$$$$")]
		private void NewQHttpResponseHeader(int code, string text, int majorVer, int minorVer) {
			((QHttpResponseHeader) interceptor).NewQHttpResponseHeader(code,text,majorVer,minorVer);
		}
		public QHttpResponseHeader(int code, string text, int majorVer) : this((Type) null) {
			CreateProxy();
			NewQHttpResponseHeader(code,text,majorVer);
		}
		[SmokeMethod("QHttpResponseHeader", "(int, const QString&, int)", "$$$")]
		private void NewQHttpResponseHeader(int code, string text, int majorVer) {
			((QHttpResponseHeader) interceptor).NewQHttpResponseHeader(code,text,majorVer);
		}
		public QHttpResponseHeader(int code, string text) : this((Type) null) {
			CreateProxy();
			NewQHttpResponseHeader(code,text);
		}
		[SmokeMethod("QHttpResponseHeader", "(int, const QString&)", "$$")]
		private void NewQHttpResponseHeader(int code, string text) {
			((QHttpResponseHeader) interceptor).NewQHttpResponseHeader(code,text);
		}
		public QHttpResponseHeader(int code) : this((Type) null) {
			CreateProxy();
			NewQHttpResponseHeader(code);
		}
		[SmokeMethod("QHttpResponseHeader", "(int)", "$")]
		private void NewQHttpResponseHeader(int code) {
			((QHttpResponseHeader) interceptor).NewQHttpResponseHeader(code);
		}
		[SmokeMethod("setStatusLine", "(int, const QString&, int, int)", "$$$$")]
		public void SetStatusLine(int code, string text, int majorVer, int minorVer) {
			((QHttpResponseHeader) interceptor).SetStatusLine(code,text,majorVer,minorVer);
		}
		[SmokeMethod("setStatusLine", "(int, const QString&, int)", "$$$")]
		public void SetStatusLine(int code, string text, int majorVer) {
			((QHttpResponseHeader) interceptor).SetStatusLine(code,text,majorVer);
		}
		[SmokeMethod("setStatusLine", "(int, const QString&)", "$$")]
		public void SetStatusLine(int code, string text) {
			((QHttpResponseHeader) interceptor).SetStatusLine(code,text);
		}
		[SmokeMethod("setStatusLine", "(int)", "$")]
		public void SetStatusLine(int code) {
			((QHttpResponseHeader) interceptor).SetStatusLine(code);
		}
		[SmokeMethod("statusCode", "() const", "")]
		public int StatusCode() {
			return ((QHttpResponseHeader) interceptor).StatusCode();
		}
		[SmokeMethod("reasonPhrase", "() const", "")]
		public string ReasonPhrase() {
			return ((QHttpResponseHeader) interceptor).ReasonPhrase();
		}
		[SmokeMethod("majorVersion", "() const", "")]
		public override int MajorVersion() {
			return ((QHttpResponseHeader) interceptor).MajorVersion();
		}
		[SmokeMethod("minorVersion", "() const", "")]
		public override int MinorVersion() {
			return ((QHttpResponseHeader) interceptor).MinorVersion();
		}
		[SmokeMethod("toString", "() const", "")]
		public new string ToString() {
			return ((QHttpResponseHeader) interceptor).ToString();
		}
		[SmokeMethod("parseLine", "(const QString&, int)", "$$")]
		protected override bool ParseLine(string line, int number) {
			return ((QHttpResponseHeader) interceptor).ParseLine(line,number);
		}
		~QHttpResponseHeader() {
			DisposeQHttpResponseHeader();
		}
		public new void Dispose() {
			DisposeQHttpResponseHeader();
		}
		[SmokeMethod("~QHttpResponseHeader", "()", "")]
		private void DisposeQHttpResponseHeader() {
			((QHttpResponseHeader) interceptor).DisposeQHttpResponseHeader();
		}
	}
}
