//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	[SmokeClass("QHostInfo")]
	public class QHostInfo : MarshalByRefObject, IDisposable {
		protected QHostInfo interceptor = null;
		private IntPtr smokeObject;
		protected QHostInfo(Type dummy) {}
		[SmokeClass("QHostInfo")]
		interface IQHostInfoProxy {
			[SmokeMethod("lookupHost", "(const QString&, QObject*, const char*)", "$#$")]
			int LookupHost(string name, QObject receiver, string member);
			[SmokeMethod("abortHostLookup", "(int)", "$")]
			void AbortHostLookup(int lookupId);
			[SmokeMethod("fromName", "(const QString&)", "$")]
			QHostInfo FromName(string name);
			[SmokeMethod("localHostName", "()", "")]
			string LocalHostName();
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QHostInfo), this);
			interceptor = (QHostInfo) realProxy.GetTransparentProxy();
		}
		private static IQHostInfoProxy staticInterceptor = null;
		static QHostInfo() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQHostInfoProxy), null);
			staticInterceptor = (IQHostInfoProxy) realProxy.GetTransparentProxy();
		}
		public enum HostInfoError {
			NoError = 0,
			HostNotFound = 1,
			UnknownError = 2,
		}
		public QHostInfo(int lookupId) : this((Type) null) {
			CreateProxy();
			NewQHostInfo(lookupId);
		}
		[SmokeMethod("QHostInfo", "(int)", "$")]
		private void NewQHostInfo(int lookupId) {
			((QHostInfo) interceptor).NewQHostInfo(lookupId);
		}
		public QHostInfo() : this((Type) null) {
			CreateProxy();
			NewQHostInfo();
		}
		[SmokeMethod("QHostInfo", "()", "")]
		private void NewQHostInfo() {
			((QHostInfo) interceptor).NewQHostInfo();
		}
		public QHostInfo(QHostInfo d) : this((Type) null) {
			CreateProxy();
			NewQHostInfo(d);
		}
		[SmokeMethod("QHostInfo", "(const QHostInfo&)", "#")]
		private void NewQHostInfo(QHostInfo d) {
			((QHostInfo) interceptor).NewQHostInfo(d);
		}
		[SmokeMethod("hostName", "() const", "")]
		public string HostName() {
			return ((QHostInfo) interceptor).HostName();
		}
		[SmokeMethod("setHostName", "(const QString&)", "$")]
		public void SetHostName(string name) {
			((QHostInfo) interceptor).SetHostName(name);
		}
		[SmokeMethod("addresses", "() const", "")]
		public List<QHostAddress> Addresses() {
			return ((QHostInfo) interceptor).Addresses();
		}
		[SmokeMethod("setAddresses", "(const QList<QHostAddress>&)", "?")]
		public void SetAddresses(List<QHostAddress> addresses) {
			((QHostInfo) interceptor).SetAddresses(addresses);
		}
		[SmokeMethod("error", "() const", "")]
		public QHostInfo.HostInfoError Error() {
			return ((QHostInfo) interceptor).Error();
		}
		[SmokeMethod("setError", "(QHostInfo::HostInfoError)", "$")]
		public void SetError(QHostInfo.HostInfoError error) {
			((QHostInfo) interceptor).SetError(error);
		}
		[SmokeMethod("errorString", "() const", "")]
		public string ErrorString() {
			return ((QHostInfo) interceptor).ErrorString();
		}
		[SmokeMethod("setErrorString", "(const QString&)", "$")]
		public void SetErrorString(string errorString) {
			((QHostInfo) interceptor).SetErrorString(errorString);
		}
		[SmokeMethod("setLookupId", "(int)", "$")]
		public void SetLookupId(int id) {
			((QHostInfo) interceptor).SetLookupId(id);
		}
		[SmokeMethod("lookupId", "() const", "")]
		public int LookupId() {
			return ((QHostInfo) interceptor).LookupId();
		}
		~QHostInfo() {
			DisposeQHostInfo();
		}
		public void Dispose() {
			DisposeQHostInfo();
		}
		[SmokeMethod("~QHostInfo", "()", "")]
		private void DisposeQHostInfo() {
			((QHostInfo) interceptor).DisposeQHostInfo();
		}
		public static int LookupHost(string name, QObject receiver, string member) {
			return staticInterceptor.LookupHost(name,receiver,member);
		}
		public static void AbortHostLookup(int lookupId) {
			staticInterceptor.AbortHostLookup(lookupId);
		}
		public static QHostInfo FromName(string name) {
			return staticInterceptor.FromName(name);
		}
		public static string LocalHostName() {
			return staticInterceptor.LocalHostName();
		}
	}
}
