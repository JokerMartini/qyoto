//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	/// <remarks> See <see cref="IQNetworkAccessManagerSignals"></see> for signals emitted by QNetworkAccessManager
	/// </remarks>

	[SmokeClass("QNetworkAccessManager")]
	public class QNetworkAccessManager : QObject, IDisposable {
 		protected QNetworkAccessManager(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(QNetworkAccessManager), this);
		}
		private static SmokeInvocation staticInterceptor = null;
		static QNetworkAccessManager() {
			staticInterceptor = new SmokeInvocation(typeof(QNetworkAccessManager), null);
		}
		public enum Operation {
			HeadOperation = 1,
			GetOperation = 2,
			PutOperation = 3,
			PostOperation = 4,
			UnknownOperation = 0,
		}
		// QNetworkCookieJar* cookieJar(); >>>> NOT CONVERTED
		// void setCookieJar(QNetworkCookieJar* arg1); >>>> NOT CONVERTED
		// QNetworkReply* head(const QNetworkRequest& arg1); >>>> NOT CONVERTED
		// QNetworkReply* get(const QNetworkRequest& arg1); >>>> NOT CONVERTED
		// QNetworkReply* post(const QNetworkRequest& arg1,QIODevice* arg2); >>>> NOT CONVERTED
		// QNetworkReply* post(const QNetworkRequest& arg1,const QByteArray& arg2); >>>> NOT CONVERTED
		// QNetworkReply* put(const QNetworkRequest& arg1,QIODevice* arg2); >>>> NOT CONVERTED
		// QNetworkReply* put(const QNetworkRequest& arg1,const QByteArray& arg2); >>>> NOT CONVERTED
		// QNetworkReply* createRequest(QNetworkAccessManager::Operation arg1,const QNetworkRequest& arg2,QIODevice* arg3); >>>> NOT CONVERTED
		// QNetworkReply* createRequest(QNetworkAccessManager::Operation arg1,const QNetworkRequest& arg2); >>>> NOT CONVERTED
		public QNetworkAccessManager(QObject parent) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QNetworkAccessManager#", "QNetworkAccessManager(QObject*)", typeof(void), typeof(QObject), parent);
		}
		public QNetworkAccessManager() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QNetworkAccessManager", "QNetworkAccessManager()", typeof(void));
		}
		public QNetworkProxy Proxy() {
			return (QNetworkProxy) interceptor.Invoke("proxy", "proxy() const", typeof(QNetworkProxy));
		}
		public void SetProxy(QNetworkProxy proxy) {
			interceptor.Invoke("setProxy#", "setProxy(const QNetworkProxy&)", typeof(void), typeof(QNetworkProxy), proxy);
		}
		~QNetworkAccessManager() {
			interceptor.Invoke("~QNetworkAccessManager", "~QNetworkAccessManager()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~QNetworkAccessManager", "~QNetworkAccessManager()", typeof(void));
		}
		public static new string Tr(string s, string c) {
			return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
		}
		public static new string Tr(string s) {
			return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
		}
		protected new IQNetworkAccessManagerSignals Emit {
			get { return (IQNetworkAccessManagerSignals) Q_EMIT; }
		}
	}

	public interface IQNetworkAccessManagerSignals : IQObjectSignals {
		[Q_SIGNAL("void proxyAuthenticationRequired(const QNetworkProxy&, QAuthenticator*)")]
		void ProxyAuthenticationRequired(QNetworkProxy proxy, QAuthenticator authenticator);
		// void authenticationRequired(QNetworkReply* arg1,QAuthenticator* arg2); >>>> NOT CONVERTED
		// void finished(QNetworkReply* arg1); >>>> NOT CONVERTED
		// void sslErrors(QNetworkReply* arg1,const QList<QSslError>& arg2); >>>> NOT CONVERTED
	}
}
