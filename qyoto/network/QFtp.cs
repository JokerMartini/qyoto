//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	/// See <see cref="IQFtpSignals"></see> for signals emitted by QFtp
	[SmokeClass("QFtp")]
	public class QFtp : QObject, IDisposable {
 		protected QFtp(Type dummy) : base((Type) null) {}
		[SmokeClass("QFtp")]
		interface IQFtpProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QFtp), this);
			interceptor = (QFtp) realProxy.GetTransparentProxy();
		}
		private static IQFtpProxy staticInterceptor = null;
		static QFtp() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQFtpProxy), null);
			staticInterceptor = (IQFtpProxy) realProxy.GetTransparentProxy();
		}
		public enum State {
			Unconnected = 0,
			HostLookup = 1,
			Connecting = 2,
			Connected = 3,
			LoggedIn = 4,
			Closing = 5,
		}
		public enum Error {
			NoError = 0,
			UnknownError = 1,
			HostNotFound = 2,
			ConnectionRefused = 3,
			NotConnected = 4,
		}
		public enum Command {
			None = 0,
			SetTransferMode = 1,
			SetProxy = 2,
			ConnectToHost = 3,
			Login = 4,
			Close = 5,
			List = 6,
			Cd = 7,
			Get = 8,
			Put = 9,
			Remove = 10,
			Mkdir = 11,
			Rmdir = 12,
			Rename = 13,
			RawCommand = 14,
		}
		public enum TransferMode {
			Active = 0,
			Passive = 1,
		}
		public enum TransferType {
			Binary = 0,
			Ascii = 1,
		}
		public QFtp(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQFtp(parent);
		}
		[SmokeMethod("QFtp", "(QObject*)", "#")]
		private void NewQFtp(QObject parent) {
			((QFtp) interceptor).NewQFtp(parent);
		}
		public QFtp() : this((Type) null) {
			CreateProxy();
			NewQFtp();
		}
		[SmokeMethod("QFtp", "()", "")]
		private void NewQFtp() {
			((QFtp) interceptor).NewQFtp();
		}
		[SmokeMethod("setProxy", "(const QString&, quint16)", "$$")]
		public int SetProxy(string host, ushort port) {
			return ((QFtp) interceptor).SetProxy(host,port);
		}
		[SmokeMethod("connectToHost", "(const QString&, quint16)", "$$")]
		public int ConnectToHost(string host, ushort port) {
			return ((QFtp) interceptor).ConnectToHost(host,port);
		}
		[SmokeMethod("connectToHost", "(const QString&)", "$")]
		public int ConnectToHost(string host) {
			return ((QFtp) interceptor).ConnectToHost(host);
		}
		[SmokeMethod("login", "(const QString&, const QString&)", "$$")]
		public int Login(string user, string password) {
			return ((QFtp) interceptor).Login(user,password);
		}
		[SmokeMethod("login", "(const QString&)", "$")]
		public int Login(string user) {
			return ((QFtp) interceptor).Login(user);
		}
		[SmokeMethod("login", "()", "")]
		public int Login() {
			return ((QFtp) interceptor).Login();
		}
		[SmokeMethod("close", "()", "")]
		public int Close() {
			return ((QFtp) interceptor).Close();
		}
		[SmokeMethod("setTransferMode", "(QFtp::TransferMode)", "$")]
		public int SetTransferMode(QFtp.TransferMode mode) {
			return ((QFtp) interceptor).SetTransferMode(mode);
		}
		[SmokeMethod("list", "(const QString&)", "$")]
		public int List(string dir) {
			return ((QFtp) interceptor).List(dir);
		}
		[SmokeMethod("list", "()", "")]
		public int List() {
			return ((QFtp) interceptor).List();
		}
		[SmokeMethod("cd", "(const QString&)", "$")]
		public int Cd(string dir) {
			return ((QFtp) interceptor).Cd(dir);
		}
		[SmokeMethod("get", "(const QString&, QIODevice*, QFtp::TransferType)", "$#$")]
		public int Get(string file, QIODevice dev, QFtp.TransferType type) {
			return ((QFtp) interceptor).Get(file,dev,type);
		}
		[SmokeMethod("get", "(const QString&, QIODevice*)", "$#")]
		public int Get(string file, QIODevice dev) {
			return ((QFtp) interceptor).Get(file,dev);
		}
		[SmokeMethod("get", "(const QString&)", "$")]
		public int Get(string file) {
			return ((QFtp) interceptor).Get(file);
		}
		[SmokeMethod("put", "(const QByteArray&, const QString&, QFtp::TransferType)", "#$$")]
		public int Put(QByteArray data, string file, QFtp.TransferType type) {
			return ((QFtp) interceptor).Put(data,file,type);
		}
		[SmokeMethod("put", "(const QByteArray&, const QString&)", "#$")]
		public int Put(QByteArray data, string file) {
			return ((QFtp) interceptor).Put(data,file);
		}
		[SmokeMethod("put", "(QIODevice*, const QString&, QFtp::TransferType)", "#$$")]
		public int Put(QIODevice dev, string file, QFtp.TransferType type) {
			return ((QFtp) interceptor).Put(dev,file,type);
		}
		[SmokeMethod("put", "(QIODevice*, const QString&)", "#$")]
		public int Put(QIODevice dev, string file) {
			return ((QFtp) interceptor).Put(dev,file);
		}
		[SmokeMethod("remove", "(const QString&)", "$")]
		public int Remove(string file) {
			return ((QFtp) interceptor).Remove(file);
		}
		[SmokeMethod("mkdir", "(const QString&)", "$")]
		public int Mkdir(string dir) {
			return ((QFtp) interceptor).Mkdir(dir);
		}
		[SmokeMethod("rmdir", "(const QString&)", "$")]
		public int Rmdir(string dir) {
			return ((QFtp) interceptor).Rmdir(dir);
		}
		[SmokeMethod("rename", "(const QString&, const QString&)", "$$")]
		public int Rename(string oldname, string newname) {
			return ((QFtp) interceptor).Rename(oldname,newname);
		}
		[SmokeMethod("rawCommand", "(const QString&)", "$")]
		public int RawCommand(string command) {
			return ((QFtp) interceptor).RawCommand(command);
		}
		[SmokeMethod("bytesAvailable", "() const", "")]
		public long BytesAvailable() {
			return ((QFtp) interceptor).BytesAvailable();
		}
		[SmokeMethod("read", "(char*, qint64)", "$$")]
		public long Read(string data, long maxlen) {
			return ((QFtp) interceptor).Read(data,maxlen);
		}
		[SmokeMethod("readAll", "()", "")]
		public QByteArray ReadAll() {
			return ((QFtp) interceptor).ReadAll();
		}
		[SmokeMethod("currentId", "() const", "")]
		public int CurrentId() {
			return ((QFtp) interceptor).CurrentId();
		}
		[SmokeMethod("currentDevice", "() const", "")]
		public QIODevice CurrentDevice() {
			return ((QFtp) interceptor).CurrentDevice();
		}
		[SmokeMethod("currentCommand", "() const", "")]
		public QFtp.Command CurrentCommand() {
			return ((QFtp) interceptor).CurrentCommand();
		}
		[SmokeMethod("hasPendingCommands", "() const", "")]
		public bool HasPendingCommands() {
			return ((QFtp) interceptor).HasPendingCommands();
		}
		[SmokeMethod("clearPendingCommands", "()", "")]
		public void ClearPendingCommands() {
			((QFtp) interceptor).ClearPendingCommands();
		}
		[SmokeMethod("state", "() const", "")]
		public QFtp.State state() {
			return ((QFtp) interceptor).state();
		}
		[SmokeMethod("error", "() const", "")]
		public QFtp.Error error() {
			return ((QFtp) interceptor).error();
		}
		[SmokeMethod("errorString", "() const", "")]
		public string ErrorString() {
			return ((QFtp) interceptor).ErrorString();
		}
		[Q_SLOT("void abort()")]
		[SmokeMethod("abort", "()", "")]
		public void Abort() {
			((QFtp) interceptor).Abort();
		}
		~QFtp() {
			DisposeQFtp();
		}
		public new void Dispose() {
			DisposeQFtp();
		}
		[SmokeMethod("~QFtp", "()", "")]
		private void DisposeQFtp() {
			((QFtp) interceptor).DisposeQFtp();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQFtpSignals Emit {
			get { return (IQFtpSignals) Q_EMIT; }
		}
	}

	public interface IQFtpSignals : IQObjectSignals {
		[Q_SIGNAL("void stateChanged(int)")]
		void StateChanged(int arg1);
		[Q_SIGNAL("void listInfo(const QUrlInfo&)")]
		void ListInfo(QUrlInfo arg1);
		[Q_SIGNAL("void readyRead()")]
		void ReadyRead();
		[Q_SIGNAL("void dataTransferProgress(qint64, qint64)")]
		void DataTransferProgress(long arg1, long arg2);
		[Q_SIGNAL("void rawCommandReply(int, const QString&)")]
		void RawCommandReply(int arg1, string arg2);
		[Q_SIGNAL("void commandStarted(int)")]
		void CommandStarted(int arg1);
		[Q_SIGNAL("void commandFinished(int, bool)")]
		void CommandFinished(int arg1, bool arg2);
		[Q_SIGNAL("void done(bool)")]
		void Done(bool arg1);
	}
}
