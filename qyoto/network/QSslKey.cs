//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QSslKey")]
	public class QSslKey : Object, IDisposable {
		protected SmokeInvocation interceptor = null;
		private IntPtr smokeObject;
		protected QSslKey(Type dummy) {}
		protected void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(QSslKey), this);
		}
		private static SmokeInvocation staticInterceptor = null;
		static QSslKey() {
			staticInterceptor = new SmokeInvocation(typeof(QSslKey), null);
		}
		public enum TypeOf {
			PrivateKey = 0,
			PublicKey = 1,
		}
		public enum Algorithm {
			Rsa = 0,
			Dsa = 1,
		}
		public QSslKey(QByteArray encoded) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QSslKey#", "QSslKey(const QByteArray&)", typeof(void), typeof(QByteArray), encoded);
		}
		public QSslKey() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QSslKey", "QSslKey()", typeof(void));
		}
		public QSslKey(QSslKey other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QSslKey#", "QSslKey(const QSslKey&)", typeof(void), typeof(QSslKey), other);
		}
		public bool IsNull() {
			return (bool) interceptor.Invoke("isNull", "isNull() const", typeof(bool));
		}
		public void Clear() {
			interceptor.Invoke("clear", "clear()", typeof(void));
		}
		public int Length() {
			return (int) interceptor.Invoke("length", "length() const", typeof(int));
		}
		public char[] Data() {
			return (char[]) interceptor.Invoke("data", "data() const", typeof(char[]));
		}
		public QSslKey.TypeOf type() {
			return (QSslKey.TypeOf) interceptor.Invoke("type", "type() const", typeof(QSslKey.TypeOf));
		}
		public QSslKey.Algorithm algorithm() {
			return (QSslKey.Algorithm) interceptor.Invoke("algorithm", "algorithm() const", typeof(QSslKey.Algorithm));
		}
		public QByteArray ToPem(QByteArray passPhrase) {
			return (QByteArray) interceptor.Invoke("toPem#", "toPem(const QByteArray&) const", typeof(QByteArray), typeof(QByteArray), passPhrase);
		}
		public QByteArray ToPem() {
			return (QByteArray) interceptor.Invoke("toPem", "toPem() const", typeof(QByteArray));
		}
		public QByteArray ToDer(QByteArray passPhrase) {
			return (QByteArray) interceptor.Invoke("toDer#", "toDer(const QByteArray&) const", typeof(QByteArray), typeof(QByteArray), passPhrase);
		}
		public QByteArray ToDer() {
			return (QByteArray) interceptor.Invoke("toDer", "toDer() const", typeof(QByteArray));
		}
		~QSslKey() {
			interceptor.Invoke("~QSslKey", "~QSslKey()", typeof(void));
		}
		public void Dispose() {
			interceptor.Invoke("~QSslKey", "~QSslKey()", typeof(void));
		}
		public static QPair<QSslKey, QSslKey> GenerateKeyPair(QSslKey.Algorithm algorithm, int keyLength) {
			return (QPair<QSslKey, QSslKey>) staticInterceptor.Invoke("generateKeyPair$$", "generateKeyPair(QSslKey::Algorithm, int)", typeof(QPair<QSslKey, QSslKey>), typeof(QSslKey.Algorithm), algorithm, typeof(int), keyLength);
		}
	}
}
