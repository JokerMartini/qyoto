//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QHttpRequestHeader")]
	public class QHttpRequestHeader : QHttpHeader, IDisposable {
 		protected QHttpRequestHeader(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QHttpRequestHeader), this);
			interceptor = (QHttpRequestHeader) realProxy.GetTransparentProxy();
		}
		public QHttpRequestHeader() : this((Type) null) {
			CreateProxy();
			NewQHttpRequestHeader();
		}
		[SmokeMethod("QHttpRequestHeader", "()", "")]
		private void NewQHttpRequestHeader() {
			((QHttpRequestHeader) interceptor).NewQHttpRequestHeader();
		}
		public QHttpRequestHeader(string method, string path, int majorVer, int minorVer) : this((Type) null) {
			CreateProxy();
			NewQHttpRequestHeader(method,path,majorVer,minorVer);
		}
		[SmokeMethod("QHttpRequestHeader", "(const QString&, const QString&, int, int)", "$$$$")]
		private void NewQHttpRequestHeader(string method, string path, int majorVer, int minorVer) {
			((QHttpRequestHeader) interceptor).NewQHttpRequestHeader(method,path,majorVer,minorVer);
		}
		public QHttpRequestHeader(string method, string path, int majorVer) : this((Type) null) {
			CreateProxy();
			NewQHttpRequestHeader(method,path,majorVer);
		}
		[SmokeMethod("QHttpRequestHeader", "(const QString&, const QString&, int)", "$$$")]
		private void NewQHttpRequestHeader(string method, string path, int majorVer) {
			((QHttpRequestHeader) interceptor).NewQHttpRequestHeader(method,path,majorVer);
		}
		public QHttpRequestHeader(string method, string path) : this((Type) null) {
			CreateProxy();
			NewQHttpRequestHeader(method,path);
		}
		[SmokeMethod("QHttpRequestHeader", "(const QString&, const QString&)", "$$")]
		private void NewQHttpRequestHeader(string method, string path) {
			((QHttpRequestHeader) interceptor).NewQHttpRequestHeader(method,path);
		}
		public QHttpRequestHeader(QHttpRequestHeader header) : this((Type) null) {
			CreateProxy();
			NewQHttpRequestHeader(header);
		}
		[SmokeMethod("QHttpRequestHeader", "(const QHttpRequestHeader&)", "#")]
		private void NewQHttpRequestHeader(QHttpRequestHeader header) {
			((QHttpRequestHeader) interceptor).NewQHttpRequestHeader(header);
		}
		public QHttpRequestHeader(string str) : this((Type) null) {
			CreateProxy();
			NewQHttpRequestHeader(str);
		}
		[SmokeMethod("QHttpRequestHeader", "(const QString&)", "$")]
		private void NewQHttpRequestHeader(string str) {
			((QHttpRequestHeader) interceptor).NewQHttpRequestHeader(str);
		}
		[SmokeMethod("setRequest", "(const QString&, const QString&, int, int)", "$$$$")]
		public void SetRequest(string method, string path, int majorVer, int minorVer) {
			((QHttpRequestHeader) interceptor).SetRequest(method,path,majorVer,minorVer);
		}
		[SmokeMethod("setRequest", "(const QString&, const QString&, int)", "$$$")]
		public void SetRequest(string method, string path, int majorVer) {
			((QHttpRequestHeader) interceptor).SetRequest(method,path,majorVer);
		}
		[SmokeMethod("setRequest", "(const QString&, const QString&)", "$$")]
		public void SetRequest(string method, string path) {
			((QHttpRequestHeader) interceptor).SetRequest(method,path);
		}
		[SmokeMethod("method", "() const", "")]
		public string Method() {
			return ((QHttpRequestHeader) interceptor).Method();
		}
		[SmokeMethod("path", "() const", "")]
		public string Path() {
			return ((QHttpRequestHeader) interceptor).Path();
		}
		[SmokeMethod("majorVersion", "() const", "")]
		public override int MajorVersion() {
			return ((QHttpRequestHeader) interceptor).MajorVersion();
		}
		[SmokeMethod("minorVersion", "() const", "")]
		public override int MinorVersion() {
			return ((QHttpRequestHeader) interceptor).MinorVersion();
		}
		[SmokeMethod("toString", "() const", "")]
		public new string ToString() {
			return ((QHttpRequestHeader) interceptor).ToString();
		}
		[SmokeMethod("parseLine", "(const QString&, int)", "$$")]
		protected override bool ParseLine(string line, int number) {
			return ((QHttpRequestHeader) interceptor).ParseLine(line,number);
		}
		~QHttpRequestHeader() {
			DisposeQHttpRequestHeader();
		}
		public new void Dispose() {
			DisposeQHttpRequestHeader();
		}
		[SmokeMethod("~QHttpRequestHeader", "()", "")]
		private void DisposeQHttpRequestHeader() {
			((QHttpRequestHeader) interceptor).DisposeQHttpRequestHeader();
		}
	}
}
