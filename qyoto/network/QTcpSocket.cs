//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QTcpSocket")]
	public class QTcpSocket : QAbstractSocket, IDisposable {
 		protected QTcpSocket(Type dummy) : base((Type) null) {}
		[SmokeClass("QTcpSocket")]
		interface IQTcpSocketProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTcpSocket), this);
			interceptor = (QTcpSocket) realProxy.GetTransparentProxy();
		}
		private static IQTcpSocketProxy staticInterceptor = null;
		static QTcpSocket() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQTcpSocketProxy), null);
			staticInterceptor = (IQTcpSocketProxy) realProxy.GetTransparentProxy();
		}
		public QTcpSocket(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQTcpSocket(parent);
		}
		[SmokeMethod("QTcpSocket", "(QObject*)", "#")]
		private void NewQTcpSocket(QObject parent) {
			((QTcpSocket) interceptor).NewQTcpSocket(parent);
		}
		public QTcpSocket() : this((Type) null) {
			CreateProxy();
			NewQTcpSocket();
		}
		[SmokeMethod("QTcpSocket", "()", "")]
		private void NewQTcpSocket() {
			((QTcpSocket) interceptor).NewQTcpSocket();
		}
		~QTcpSocket() {
			DisposeQTcpSocket();
		}
		public new void Dispose() {
			DisposeQTcpSocket();
		}
		[SmokeMethod("~QTcpSocket", "()", "")]
		private void DisposeQTcpSocket() {
			((QTcpSocket) interceptor).DisposeQTcpSocket();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQTcpSocketSignals Emit {
			get { return (IQTcpSocketSignals) Q_EMIT; }
		}
	}

	public interface IQTcpSocketSignals : IQAbstractSocketSignals {
	}
}
