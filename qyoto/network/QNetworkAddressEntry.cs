//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QNetworkAddressEntry")]
	public class QNetworkAddressEntry : Object, IDisposable {
		protected SmokeInvocation interceptor = null;
		private IntPtr smokeObject;
		protected QNetworkAddressEntry(Type dummy) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(QNetworkAddressEntry), "QNetworkAddressEntry", this);
		}
		public QNetworkAddressEntry() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QNetworkAddressEntry", "QNetworkAddressEntry()", typeof(void));
		}
		public QNetworkAddressEntry(QNetworkAddressEntry other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QNetworkAddressEntry#", "QNetworkAddressEntry(const QNetworkAddressEntry&)", typeof(void), typeof(QNetworkAddressEntry), other);
		}
		public QHostAddress Ip() {
			return (QHostAddress) interceptor.Invoke("ip", "ip() const", typeof(QHostAddress));
		}
		public void SetIp(QHostAddress newIp) {
			interceptor.Invoke("setIp#", "setIp(const QHostAddress&)", typeof(void), typeof(QHostAddress), newIp);
		}
		public QHostAddress Netmask() {
			return (QHostAddress) interceptor.Invoke("netmask", "netmask() const", typeof(QHostAddress));
		}
		public void SetNetmask(QHostAddress newNetmask) {
			interceptor.Invoke("setNetmask#", "setNetmask(const QHostAddress&)", typeof(void), typeof(QHostAddress), newNetmask);
		}
		public QHostAddress Broadcast() {
			return (QHostAddress) interceptor.Invoke("broadcast", "broadcast() const", typeof(QHostAddress));
		}
		public void SetBroadcast(QHostAddress newBroadcast) {
			interceptor.Invoke("setBroadcast#", "setBroadcast(const QHostAddress&)", typeof(void), typeof(QHostAddress), newBroadcast);
		}
		~QNetworkAddressEntry() {
			interceptor.Invoke("~QNetworkAddressEntry", "~QNetworkAddressEntry()", typeof(void));
		}
		public void Dispose() {
			interceptor.Invoke("~QNetworkAddressEntry", "~QNetworkAddressEntry()", typeof(void));
		}
	}
}
