//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;

	[SmokeClass("QHostAddress")]
	public class QHostAddress : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
		private IntPtr _smokeObject;
		protected QHostAddress(Type dummy) {}
		[SmokeClass("QHostAddress")]
		interface IQHostAddressProxy {
			[SmokeMethod("operator==", "(const QHostAddress&) const", "#")]
			bool op_equals(QHostAddress lhs, QHostAddress address);
			[SmokeMethod("operator==", "(QHostAddress::SpecialAddress) const", "$")]
			bool op_equals(QHostAddress lhs, QHostAddress.SpecialAddress address);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QHostAddress), this);
			_interceptor = (QHostAddress) realProxy.GetTransparentProxy();
		}
		private QHostAddress ProxyQHostAddress() {
			return (QHostAddress) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QHostAddress() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQHostAddressProxy), null);
			_staticInterceptor = (IQHostAddressProxy) realProxy.GetTransparentProxy();
		}
		private static IQHostAddressProxy StaticQHostAddress() {
			return (IQHostAddressProxy) _staticInterceptor;
		}
		public enum SpecialAddress {
			Null = 0,
			Broadcast = 1,
			LocalHost = 2,
			LocalHostIPv6 = 3,
			Any = 4,
			AnyIPv6 = 5,
		}
		public QHostAddress() : this((Type) null) {
			CreateProxy();
			NewQHostAddress();
		}
		[SmokeMethod("QHostAddress", "()", "")]
		private void NewQHostAddress() {
			ProxyQHostAddress().NewQHostAddress();
		}
		public QHostAddress(uint ip4Addr) : this((Type) null) {
			CreateProxy();
			NewQHostAddress(ip4Addr);
		}
		[SmokeMethod("QHostAddress", "(quint32)", "$")]
		private void NewQHostAddress(uint ip4Addr) {
			ProxyQHostAddress().NewQHostAddress(ip4Addr);
		}
		// QHostAddress* QHostAddress(quint8* arg1); >>>> NOT CONVERTED
		// QHostAddress* QHostAddress(const Q_IPV6ADDR& arg1); >>>> NOT CONVERTED
		// QHostAddress* QHostAddress(const sockaddr* arg1); >>>> NOT CONVERTED
		public QHostAddress(string address) : this((Type) null) {
			CreateProxy();
			NewQHostAddress(address);
		}
		[SmokeMethod("QHostAddress", "(const QString&)", "$")]
		private void NewQHostAddress(string address) {
			ProxyQHostAddress().NewQHostAddress(address);
		}
		public QHostAddress(QHostAddress copy) : this((Type) null) {
			CreateProxy();
			NewQHostAddress(copy);
		}
		[SmokeMethod("QHostAddress", "(const QHostAddress&)", "#")]
		private void NewQHostAddress(QHostAddress copy) {
			ProxyQHostAddress().NewQHostAddress(copy);
		}
		public QHostAddress(QHostAddress.SpecialAddress address) : this((Type) null) {
			CreateProxy();
			NewQHostAddress(address);
		}
		[SmokeMethod("QHostAddress", "(QHostAddress::SpecialAddress)", "$")]
		private void NewQHostAddress(QHostAddress.SpecialAddress address) {
			ProxyQHostAddress().NewQHostAddress(address);
		}
		[SmokeMethod("setAddress", "(quint32)", "$")]
		public void SetAddress(uint ip4Addr) {
			ProxyQHostAddress().SetAddress(ip4Addr);
		}
		// void setAddress(quint8* arg1); >>>> NOT CONVERTED
		// void setAddress(const Q_IPV6ADDR& arg1); >>>> NOT CONVERTED
		// void setAddress(const sockaddr* arg1); >>>> NOT CONVERTED
		[SmokeMethod("setAddress", "(const QString&)", "$")]
		public bool SetAddress(string address) {
			return ProxyQHostAddress().SetAddress(address);
		}
		[SmokeMethod("protocol", "() const", "")]
		public QAbstractSocket.NetworkLayerProtocol Protocol() {
			return ProxyQHostAddress().Protocol();
		}
		[SmokeMethod("toIPv4Address", "() const", "")]
		public uint ToIPv4Address() {
			return ProxyQHostAddress().ToIPv4Address();
		}
		// Q_IPV6ADDR toIPv6Address(); >>>> NOT CONVERTED
		[SmokeMethod("toString", "() const", "")]
		public new string ToString() {
			return ProxyQHostAddress().ToString();
		}
		[SmokeMethod("scopeId", "() const", "")]
		public string ScopeId() {
			return ProxyQHostAddress().ScopeId();
		}
		[SmokeMethod("setScopeId", "(const QString&)", "$")]
		public void SetScopeId(string id) {
			ProxyQHostAddress().SetScopeId(id);
		}
		public static bool operator==(QHostAddress lhs, QHostAddress address) {
			return StaticQHostAddress().op_equals(lhs,address);
		}
		public static bool operator!=(QHostAddress lhs, QHostAddress address) {
			return !StaticQHostAddress().op_equals(lhs,address);
		}
		public override bool Equals(object o) {
			if (!(o is QHostAddress)) { return false; }
			return this == (QHostAddress) o;
		}
		public override int GetHashCode() {
			return ProxyQHostAddress().GetHashCode();
		}
		public static bool operator==(QHostAddress lhs, QHostAddress.SpecialAddress address) {
			return StaticQHostAddress().op_equals(lhs,address);
		}
		public static bool operator!=(QHostAddress lhs, QHostAddress.SpecialAddress address) {
			return !StaticQHostAddress().op_equals(lhs,address);
		}
		[SmokeMethod("isNull", "() const", "")]
		public bool IsNull() {
			return ProxyQHostAddress().IsNull();
		}
		[SmokeMethod("clear", "()", "")]
		public void Clear() {
			ProxyQHostAddress().Clear();
		}
		~QHostAddress() {
			DisposeQHostAddress();
		}
		public void Dispose() {
			DisposeQHostAddress();
		}
		[SmokeMethod("~QHostAddress", "()", "")]
		private void DisposeQHostAddress() {
			ProxyQHostAddress().DisposeQHostAddress();
		}
	}
}
