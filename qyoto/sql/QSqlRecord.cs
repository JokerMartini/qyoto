//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QSqlRecord")]
	public class QSqlRecord : MarshalByRefObject, IDisposable {
		protected QSqlRecord interceptor = null;
		private IntPtr smokeObject;
		protected QSqlRecord(Type dummy) {}
		[SmokeClass("QSqlRecord")]
		interface IQSqlRecordProxy {
			[SmokeMethod("operator==", "(const QSqlRecord&) const", "#")]
			bool op_equals(QSqlRecord lhs, QSqlRecord other);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSqlRecord), this);
			interceptor = (QSqlRecord) realProxy.GetTransparentProxy();
		}
		private static IQSqlRecordProxy staticInterceptor = null;
		static QSqlRecord() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSqlRecordProxy), null);
			staticInterceptor = (IQSqlRecordProxy) realProxy.GetTransparentProxy();
		}
		public QSqlRecord() : this((Type) null) {
			CreateProxy();
			NewQSqlRecord();
		}
		[SmokeMethod("QSqlRecord", "()", "")]
		private void NewQSqlRecord() {
			((QSqlRecord) interceptor).NewQSqlRecord();
		}
		public QSqlRecord(QSqlRecord other) : this((Type) null) {
			CreateProxy();
			NewQSqlRecord(other);
		}
		[SmokeMethod("QSqlRecord", "(const QSqlRecord&)", "#")]
		private void NewQSqlRecord(QSqlRecord other) {
			((QSqlRecord) interceptor).NewQSqlRecord(other);
		}
		public override bool Equals(object o) {
			if (!(o is QSqlRecord)) { return false; }
			return this == (QSqlRecord) o;
		}
		public override int GetHashCode() {
			return ((QSqlRecord) interceptor).GetHashCode();
		}
		[SmokeMethod("value", "(int) const", "$")]
		public QVariant Value(int i) {
			return ((QSqlRecord) interceptor).Value(i);
		}
		[SmokeMethod("value", "(const QString&) const", "$")]
		public QVariant Value(string name) {
			return ((QSqlRecord) interceptor).Value(name);
		}
		[SmokeMethod("setValue", "(int, const QVariant&)", "$#")]
		public void SetValue(int i, QVariant val) {
			((QSqlRecord) interceptor).SetValue(i,val);
		}
		[SmokeMethod("setValue", "(const QString&, const QVariant&)", "$#")]
		public void SetValue(string name, QVariant val) {
			((QSqlRecord) interceptor).SetValue(name,val);
		}
		[SmokeMethod("setNull", "(int)", "$")]
		public void SetNull(int i) {
			((QSqlRecord) interceptor).SetNull(i);
		}
		[SmokeMethod("setNull", "(const QString&)", "$")]
		public void SetNull(string name) {
			((QSqlRecord) interceptor).SetNull(name);
		}
		[SmokeMethod("isNull", "(int) const", "$")]
		public bool IsNull(int i) {
			return ((QSqlRecord) interceptor).IsNull(i);
		}
		[SmokeMethod("isNull", "(const QString&) const", "$")]
		public bool IsNull(string name) {
			return ((QSqlRecord) interceptor).IsNull(name);
		}
		[SmokeMethod("indexOf", "(const QString&) const", "$")]
		public int IndexOf(string name) {
			return ((QSqlRecord) interceptor).IndexOf(name);
		}
		[SmokeMethod("fieldName", "(int) const", "$")]
		public string FieldName(int i) {
			return ((QSqlRecord) interceptor).FieldName(i);
		}
		[SmokeMethod("field", "(int) const", "$")]
		public QSqlField Field(int i) {
			return ((QSqlRecord) interceptor).Field(i);
		}
		[SmokeMethod("field", "(const QString&) const", "$")]
		public QSqlField Field(string name) {
			return ((QSqlRecord) interceptor).Field(name);
		}
		[SmokeMethod("isGenerated", "(int) const", "$")]
		public bool IsGenerated(int i) {
			return ((QSqlRecord) interceptor).IsGenerated(i);
		}
		[SmokeMethod("isGenerated", "(const QString&) const", "$")]
		public bool IsGenerated(string name) {
			return ((QSqlRecord) interceptor).IsGenerated(name);
		}
		[SmokeMethod("setGenerated", "(const QString&, bool)", "$$")]
		public void SetGenerated(string name, bool generated) {
			((QSqlRecord) interceptor).SetGenerated(name,generated);
		}
		[SmokeMethod("setGenerated", "(int, bool)", "$$")]
		public void SetGenerated(int i, bool generated) {
			((QSqlRecord) interceptor).SetGenerated(i,generated);
		}
		[SmokeMethod("append", "(const QSqlField&)", "#")]
		public void Append(QSqlField field) {
			((QSqlRecord) interceptor).Append(field);
		}
		[SmokeMethod("replace", "(int, const QSqlField&)", "$#")]
		public void Replace(int pos, QSqlField field) {
			((QSqlRecord) interceptor).Replace(pos,field);
		}
		[SmokeMethod("insert", "(int, const QSqlField&)", "$#")]
		public void Insert(int pos, QSqlField field) {
			((QSqlRecord) interceptor).Insert(pos,field);
		}
		[SmokeMethod("remove", "(int)", "$")]
		public void Remove(int pos) {
			((QSqlRecord) interceptor).Remove(pos);
		}
		[SmokeMethod("isEmpty", "() const", "")]
		public bool IsEmpty() {
			return ((QSqlRecord) interceptor).IsEmpty();
		}
		[SmokeMethod("contains", "(const QString&) const", "$")]
		public bool Contains(string name) {
			return ((QSqlRecord) interceptor).Contains(name);
		}
		[SmokeMethod("clear", "()", "")]
		public void Clear() {
			((QSqlRecord) interceptor).Clear();
		}
		[SmokeMethod("clearValues", "()", "")]
		public void ClearValues() {
			((QSqlRecord) interceptor).ClearValues();
		}
		[SmokeMethod("count", "() const", "")]
		public int Count() {
			return ((QSqlRecord) interceptor).Count();
		}
		~QSqlRecord() {
			DisposeQSqlRecord();
		}
		public void Dispose() {
			DisposeQSqlRecord();
		}
		[SmokeMethod("~QSqlRecord", "()", "")]
		private void DisposeQSqlRecord() {
			((QSqlRecord) interceptor).DisposeQSqlRecord();
		}
		public static bool operator==(QSqlRecord lhs, QSqlRecord other) {
			return staticInterceptor.op_equals(lhs,other);
		}
		public static bool operator!=(QSqlRecord lhs, QSqlRecord other) {
			return !staticInterceptor.op_equals(lhs,other);
		}
	}
}
