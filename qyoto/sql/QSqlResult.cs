//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QSqlResult")]
	public class QSqlResult : MarshalByRefObject {
		protected Object _interceptor = null;
		private IntPtr _smokeObject;
		protected QSqlResult(Type dummy) {}
		[SmokeClass("QSqlResult")]
		interface IQSqlResultProxy {
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSqlResult), this);
			_interceptor = (QSqlResult) realProxy.GetTransparentProxy();
		}
		private QSqlResult ProxyQSqlResult() {
			return (QSqlResult) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QSqlResult() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSqlResultProxy), null);
			_staticInterceptor = (IQSqlResultProxy) realProxy.GetTransparentProxy();
		}
		private static IQSqlResultProxy StaticQSqlResult() {
			return (IQSqlResultProxy) _staticInterceptor;
		}
		public enum BindingSyntax {
			PositionalBinding = 0,
			NamedBinding = 1,
		}
		public enum VirtualHookOperation {
			BatchOperation = 0,
		}
		~QSqlResult() {
			DisposeQSqlResult();
		}
		public void Dispose() {
			DisposeQSqlResult();
		}
		[SmokeMethod("~QSqlResult", "()", "")]
		private void DisposeQSqlResult() {
			ProxyQSqlResult().DisposeQSqlResult();
		}
	}
}
