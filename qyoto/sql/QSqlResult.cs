//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	[SmokeClass("QSqlResult")]
	public abstract class QSqlResult : MarshalByRefObject {
		protected Object _interceptor = null;
		private IntPtr _smokeObject;
		protected QSqlResult(Type dummy) {}
		[SmokeClass("QSqlResult")]
		interface IQSqlResultProxy {
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSqlResult), this);
			_interceptor = (QSqlResult) realProxy.GetTransparentProxy();
		}
		private QSqlResult ProxyQSqlResult() {
			return (QSqlResult) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QSqlResult() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSqlResultProxy), null);
			_staticInterceptor = (IQSqlResultProxy) realProxy.GetTransparentProxy();
		}
		private static IQSqlResultProxy StaticQSqlResult() {
			return (IQSqlResultProxy) _staticInterceptor;
		}
		public enum BindingSyntax {
			PositionalBinding = 0,
			NamedBinding = 1,
		}
		public enum VirtualHookOperation {
			BatchOperation = 0,
		}
		public QSqlResult(QSqlDriver db) : this((Type) null) {
			CreateProxy();
			NewQSqlResult(db);
		}
		[SmokeMethod("QSqlResult", "(const QSqlDriver*)", "#")]
		private void NewQSqlResult(QSqlDriver db) {
			ProxyQSqlResult().NewQSqlResult(db);
		}
		[SmokeMethod("at", "() const", "")]
		protected int At() {
			return ProxyQSqlResult().At();
		}
		[SmokeMethod("lastQuery", "() const", "")]
		protected string LastQuery() {
			return ProxyQSqlResult().LastQuery();
		}
		[SmokeMethod("lastError", "() const", "")]
		protected QSqlError LastError() {
			return ProxyQSqlResult().LastError();
		}
		[SmokeMethod("isValid", "() const", "")]
		protected bool IsValid() {
			return ProxyQSqlResult().IsValid();
		}
		[SmokeMethod("isActive", "() const", "")]
		protected bool IsActive() {
			return ProxyQSqlResult().IsActive();
		}
		[SmokeMethod("isSelect", "() const", "")]
		protected bool IsSelect() {
			return ProxyQSqlResult().IsSelect();
		}
		[SmokeMethod("isForwardOnly", "() const", "")]
		protected bool IsForwardOnly() {
			return ProxyQSqlResult().IsForwardOnly();
		}
		[SmokeMethod("driver", "() const", "")]
		protected QSqlDriver Driver() {
			return ProxyQSqlResult().Driver();
		}
		[SmokeMethod("setAt", "(int)", "$")]
		protected virtual void SetAt(int at) {
			ProxyQSqlResult().SetAt(at);
		}
		[SmokeMethod("setActive", "(bool)", "$")]
		protected virtual void SetActive(bool a) {
			ProxyQSqlResult().SetActive(a);
		}
		[SmokeMethod("setLastError", "(const QSqlError&)", "#")]
		protected virtual void SetLastError(QSqlError e) {
			ProxyQSqlResult().SetLastError(e);
		}
		[SmokeMethod("setQuery", "(const QString&)", "$")]
		protected virtual void SetQuery(string query) {
			ProxyQSqlResult().SetQuery(query);
		}
		[SmokeMethod("setSelect", "(bool)", "$")]
		protected virtual void SetSelect(bool s) {
			ProxyQSqlResult().SetSelect(s);
		}
		[SmokeMethod("setForwardOnly", "(bool)", "$")]
		protected virtual void SetForwardOnly(bool forward) {
			ProxyQSqlResult().SetForwardOnly(forward);
		}
		[SmokeMethod("exec", "()", "")]
		protected virtual bool Exec() {
			return ProxyQSqlResult().Exec();
		}
		[SmokeMethod("prepare", "(const QString&)", "$")]
		protected virtual bool Prepare(string query) {
			return ProxyQSqlResult().Prepare(query);
		}
		[SmokeMethod("savePrepare", "(const QString&)", "$")]
		protected virtual bool SavePrepare(string sqlquery) {
			return ProxyQSqlResult().SavePrepare(sqlquery);
		}
		[SmokeMethod("bindValue", "(int, const QVariant&, QSql::ParamType)", "$#$")]
		protected virtual void BindValue(int pos, QVariant val, int type) {
			ProxyQSqlResult().BindValue(pos,val,type);
		}
		[SmokeMethod("bindValue", "(const QString&, const QVariant&, QSql::ParamType)", "$#$")]
		protected virtual void BindValue(string placeholder, QVariant val, int type) {
			ProxyQSqlResult().BindValue(placeholder,val,type);
		}
		[SmokeMethod("addBindValue", "(const QVariant&, QSql::ParamType)", "#$")]
		protected void AddBindValue(QVariant val, int type) {
			ProxyQSqlResult().AddBindValue(val,type);
		}
		[SmokeMethod("boundValue", "(const QString&) const", "$")]
		protected QVariant BoundValue(string placeholder) {
			return ProxyQSqlResult().BoundValue(placeholder);
		}
		[SmokeMethod("boundValue", "(int) const", "$")]
		protected QVariant BoundValue(int pos) {
			return ProxyQSqlResult().BoundValue(pos);
		}
		[SmokeMethod("bindValueType", "(const QString&) const", "$")]
		protected int BindValueType(string placeholder) {
			return ProxyQSqlResult().BindValueType(placeholder);
		}
		[SmokeMethod("bindValueType", "(int) const", "$")]
		protected int BindValueType(int pos) {
			return ProxyQSqlResult().BindValueType(pos);
		}
		[SmokeMethod("boundValueCount", "() const", "")]
		protected int BoundValueCount() {
			return ProxyQSqlResult().BoundValueCount();
		}
		[SmokeMethod("boundValues", "() const", "")]
		protected List<QVariant> BoundValues() {
			return ProxyQSqlResult().BoundValues();
		}
		[SmokeMethod("executedQuery", "() const", "")]
		protected string ExecutedQuery() {
			return ProxyQSqlResult().ExecutedQuery();
		}
		[SmokeMethod("boundValueName", "(int) const", "$")]
		protected string BoundValueName(int pos) {
			return ProxyQSqlResult().BoundValueName(pos);
		}
		[SmokeMethod("clear", "()", "")]
		protected void Clear() {
			ProxyQSqlResult().Clear();
		}
		[SmokeMethod("hasOutValues", "() const", "")]
		protected bool HasOutValues() {
			return ProxyQSqlResult().HasOutValues();
		}
		[SmokeMethod("bindingSyntax", "() const", "")]
		protected QSqlResult.BindingSyntax bindingSyntax() {
			return ProxyQSqlResult().bindingSyntax();
		}
		protected abstract QVariant Data(int i);
		protected abstract bool IsNull(int i);
		protected abstract bool Reset(string sqlquery);
		protected abstract bool Fetch(int i);
		[SmokeMethod("fetchNext", "()", "")]
		protected virtual bool FetchNext() {
			return ProxyQSqlResult().FetchNext();
		}
		[SmokeMethod("fetchPrevious", "()", "")]
		protected virtual bool FetchPrevious() {
			return ProxyQSqlResult().FetchPrevious();
		}
		protected abstract bool FetchFirst();
		protected abstract bool FetchLast();
		protected abstract int Size();
		protected abstract int NumRowsAffected();
		[SmokeMethod("record", "() const", "")]
		protected virtual QSqlRecord Record() {
			return ProxyQSqlResult().Record();
		}
		[SmokeMethod("lastInsertId", "() const", "")]
		protected virtual QVariant LastInsertId() {
			return ProxyQSqlResult().LastInsertId();
		}
		[SmokeMethod("execBatch", "(bool)", "$")]
		protected bool ExecBatch(bool arrayBind) {
			return ProxyQSqlResult().ExecBatch(arrayBind);
		}
		[SmokeMethod("execBatch", "()", "")]
		protected bool ExecBatch() {
			return ProxyQSqlResult().ExecBatch();
		}
		~QSqlResult() {
			DisposeQSqlResult();
		}
		public void Dispose() {
			DisposeQSqlResult();
		}
		[SmokeMethod("~QSqlResult", "()", "")]
		private void DisposeQSqlResult() {
			ProxyQSqlResult().DisposeQSqlResult();
		}
	}
}
