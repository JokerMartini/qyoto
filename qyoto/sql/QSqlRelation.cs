//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;

	[SmokeClass("QSqlRelation")]
	public class QSqlRelation : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
		protected QSqlRelation(Type dummy) {}
		interface IQSqlRelationProxy {
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSqlRelation), this);
			_interceptor = (QSqlRelation) realProxy.GetTransparentProxy();
		}
		private QSqlRelation ProxyQSqlRelation() {
			return (QSqlRelation) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QSqlRelation() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSqlRelationProxy), null);
			_staticInterceptor = (IQSqlRelationProxy) realProxy.GetTransparentProxy();
		}
		private static IQSqlRelationProxy StaticQSqlRelation() {
			return (IQSqlRelationProxy) _staticInterceptor;
		}

		public QSqlRelation() : this((Type) null) {
			CreateProxy();
			NewQSqlRelation();
		}
		[SmokeMethod("QSqlRelation", "()", "")]
		private void NewQSqlRelation() {
			ProxyQSqlRelation().NewQSqlRelation();
		}
		public QSqlRelation(string aTableName, string indexCol, string displayCol) : this((Type) null) {
			CreateProxy();
			NewQSqlRelation(aTableName,indexCol,displayCol);
		}
		[SmokeMethod("QSqlRelation", "(const QString&, const QString&, const QString&)", "$$$")]
		private void NewQSqlRelation(string aTableName, string indexCol, string displayCol) {
			ProxyQSqlRelation().NewQSqlRelation(aTableName,indexCol,displayCol);
		}
		[SmokeMethod("tableName", "() const", "")]
		public string TableName() {
			return ProxyQSqlRelation().TableName();
		}
		[SmokeMethod("indexColumn", "() const", "")]
		public string IndexColumn() {
			return ProxyQSqlRelation().IndexColumn();
		}
		[SmokeMethod("displayColumn", "() const", "")]
		public string DisplayColumn() {
			return ProxyQSqlRelation().DisplayColumn();
		}
		[SmokeMethod("isValid", "() const", "")]
		public bool IsValid() {
			return ProxyQSqlRelation().IsValid();
		}
		~QSqlRelation() {
			DisposeQSqlRelation();
		}
		public void Dispose() {
			DisposeQSqlRelation();
		}
		[SmokeMethod("~QSqlRelation", "()", "")]
		private void DisposeQSqlRelation() {
			ProxyQSqlRelation().DisposeQSqlRelation();
		}
	}
}
