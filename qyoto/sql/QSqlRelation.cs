//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QSqlRelation")]
	public class QSqlRelation : MarshalByRefObject, IDisposable {
		protected QSqlRelation interceptor = null;
		private IntPtr smokeObject;
		protected QSqlRelation(Type dummy) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSqlRelation), this);
			interceptor = (QSqlRelation) realProxy.GetTransparentProxy();
		}
		public QSqlRelation() : this((Type) null) {
			CreateProxy();
			NewQSqlRelation();
		}
		[SmokeMethod("QSqlRelation", "()", "")]
		private void NewQSqlRelation() {
			((QSqlRelation) interceptor).NewQSqlRelation();
		}
		public QSqlRelation(string aTableName, string indexCol, string displayCol) : this((Type) null) {
			CreateProxy();
			NewQSqlRelation(aTableName,indexCol,displayCol);
		}
		[SmokeMethod("QSqlRelation", "(const QString&, const QString&, const QString&)", "$$$")]
		private void NewQSqlRelation(string aTableName, string indexCol, string displayCol) {
			((QSqlRelation) interceptor).NewQSqlRelation(aTableName,indexCol,displayCol);
		}
		[SmokeMethod("tableName", "() const", "")]
		public string TableName() {
			return ((QSqlRelation) interceptor).TableName();
		}
		[SmokeMethod("indexColumn", "() const", "")]
		public string IndexColumn() {
			return ((QSqlRelation) interceptor).IndexColumn();
		}
		[SmokeMethod("displayColumn", "() const", "")]
		public string DisplayColumn() {
			return ((QSqlRelation) interceptor).DisplayColumn();
		}
		[SmokeMethod("isValid", "() const", "")]
		public bool IsValid() {
			return ((QSqlRelation) interceptor).IsValid();
		}
		~QSqlRelation() {
			DisposeQSqlRelation();
		}
		public void Dispose() {
			DisposeQSqlRelation();
		}
		[SmokeMethod("~QSqlRelation", "()", "")]
		private void DisposeQSqlRelation() {
			((QSqlRelation) interceptor).DisposeQSqlRelation();
		}
	}
}
