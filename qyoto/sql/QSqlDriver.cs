//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	[SmokeClass("QSqlDriver")]
	public abstract class QSqlDriver : QObject {
 		protected QSqlDriver(Type dummy) : base((Type) null) {}
		[SmokeClass("QSqlDriver")]
		interface IQSqlDriverProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSqlDriver), this);
			interceptor = (QSqlDriver) realProxy.GetTransparentProxy();
		}
		private static IQSqlDriverProxy staticInterceptor = null;
		static QSqlDriver() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSqlDriverProxy), null);
			staticInterceptor = (IQSqlDriverProxy) realProxy.GetTransparentProxy();
		}
		public enum DriverFeature {
			Transactions = 0,
			QuerySize = 1,
			BLOB = 2,
			Unicode = 3,
			PreparedQueries = 4,
			NamedPlaceholders = 5,
			PositionalPlaceholders = 6,
			LastInsertId = 7,
			BatchOperations = 8,
		}
		public enum StatementType {
			WhereStatement = 0,
			SelectStatement = 1,
			UpdateStatement = 2,
			InsertStatement = 3,
			DeleteStatement = 4,
		}
		public enum IdentifierType {
			FieldName = 0,
			TableName = 1,
		}
		public QSqlDriver(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQSqlDriver(parent);
		}
		[SmokeMethod("QSqlDriver", "(QObject*)", "#")]
		private void NewQSqlDriver(QObject parent) {
			((QSqlDriver) interceptor).NewQSqlDriver(parent);
		}
		public QSqlDriver() : this((Type) null) {
			CreateProxy();
			NewQSqlDriver();
		}
		[SmokeMethod("QSqlDriver", "()", "")]
		private void NewQSqlDriver() {
			((QSqlDriver) interceptor).NewQSqlDriver();
		}
		[SmokeMethod("isOpen", "() const", "")]
		public virtual bool IsOpen() {
			return ((QSqlDriver) interceptor).IsOpen();
		}
		[SmokeMethod("isOpenError", "() const", "")]
		public bool IsOpenError() {
			return ((QSqlDriver) interceptor).IsOpenError();
		}
		[SmokeMethod("beginTransaction", "()", "")]
		public virtual bool BeginTransaction() {
			return ((QSqlDriver) interceptor).BeginTransaction();
		}
		[SmokeMethod("commitTransaction", "()", "")]
		public virtual bool CommitTransaction() {
			return ((QSqlDriver) interceptor).CommitTransaction();
		}
		[SmokeMethod("rollbackTransaction", "()", "")]
		public virtual bool RollbackTransaction() {
			return ((QSqlDriver) interceptor).RollbackTransaction();
		}
		[SmokeMethod("tables", "(QSql::TableType) const", "$")]
		public virtual List<string> Tables(QSql.TableType tableType) {
			return ((QSqlDriver) interceptor).Tables(tableType);
		}
		[SmokeMethod("primaryIndex", "(const QString&) const", "$")]
		public virtual QSqlIndex PrimaryIndex(string tableName) {
			return ((QSqlDriver) interceptor).PrimaryIndex(tableName);
		}
		[SmokeMethod("record", "(const QString&) const", "$")]
		public virtual QSqlRecord Record(string tableName) {
			return ((QSqlDriver) interceptor).Record(tableName);
		}
		[SmokeMethod("formatValue", "(const QSqlField&, bool) const", "#$")]
		public virtual string FormatValue(QSqlField field, bool trimStrings) {
			return ((QSqlDriver) interceptor).FormatValue(field,trimStrings);
		}
		[SmokeMethod("formatValue", "(const QSqlField&) const", "#")]
		public virtual string FormatValue(QSqlField field) {
			return ((QSqlDriver) interceptor).FormatValue(field);
		}
		[SmokeMethod("escapeIdentifier", "(const QString&, QSqlDriver::IdentifierType) const", "$$")]
		public virtual string EscapeIdentifier(string identifier, QSqlDriver.IdentifierType type) {
			return ((QSqlDriver) interceptor).EscapeIdentifier(identifier,type);
		}
		[SmokeMethod("sqlStatement", "(QSqlDriver::StatementType, const QString&, const QSqlRecord&, bool) const", "$$#$")]
		public virtual string SqlStatement(QSqlDriver.StatementType type, string tableName, QSqlRecord rec, bool preparedStatement) {
			return ((QSqlDriver) interceptor).SqlStatement(type,tableName,rec,preparedStatement);
		}
		[SmokeMethod("lastError", "() const", "")]
		public QSqlError LastError() {
			return ((QSqlDriver) interceptor).LastError();
		}
		[SmokeMethod("hasFeature", "(QSqlDriver::DriverFeature) const", "$")]
		public abstract bool HasFeature(QSqlDriver.DriverFeature f);
		[SmokeMethod("close", "()", "")]
		public abstract void Close();
		[SmokeMethod("createResult", "() const", "")]
		public abstract QSqlResult CreateResult();
		[SmokeMethod("open", "(const QString&, const QString&, const QString&, const QString&, int, const QString&)", "$$$$$$")]
		public abstract bool Open(string db, string user, string password, string host, int port, string connOpts);
		[SmokeMethod("setOpen", "(bool)", "$")]
		protected virtual void SetOpen(bool o) {
			((QSqlDriver) interceptor).SetOpen(o);
		}
		[SmokeMethod("setOpenError", "(bool)", "$")]
		protected virtual void SetOpenError(bool e) {
			((QSqlDriver) interceptor).SetOpenError(e);
		}
		[SmokeMethod("setLastError", "(const QSqlError&)", "#")]
		protected virtual void SetLastError(QSqlError e) {
			((QSqlDriver) interceptor).SetLastError(e);
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQSqlDriverSignals Emit {
			get { return (IQSqlDriverSignals) Q_EMIT; }
		}
	}

	public interface IQSqlDriverSignals : IQObjectSignals {
	}
}
