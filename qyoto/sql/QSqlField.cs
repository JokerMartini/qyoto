//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QSqlField")]
	public class QSqlField : MarshalByRefObject, IDisposable {
		protected QSqlField interceptor = null;
		private IntPtr smokeObject;
		protected QSqlField(Type dummy) {}
		[SmokeClass("QSqlField")]
		interface IQSqlFieldProxy {
			[SmokeMethod("operator==", "(const QSqlField&) const", "#")]
			bool op_equals(QSqlField lhs, QSqlField other);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSqlField), this);
			interceptor = (QSqlField) realProxy.GetTransparentProxy();
		}
		private static IQSqlFieldProxy staticInterceptor = null;
		static QSqlField() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSqlFieldProxy), null);
			staticInterceptor = (IQSqlFieldProxy) realProxy.GetTransparentProxy();
		}
		public enum RequiredStatus {
			Unknown = -1,
			Optional = 0,
			Required = 1,
		}
		public QSqlField(string fieldName, QVariant.TypeOf type) : this((Type) null) {
			CreateProxy();
			NewQSqlField(fieldName,type);
		}
		[SmokeMethod("QSqlField", "(const QString&, QVariant::Type)", "$$")]
		private void NewQSqlField(string fieldName, QVariant.TypeOf type) {
			((QSqlField) interceptor).NewQSqlField(fieldName,type);
		}
		public QSqlField(string fieldName) : this((Type) null) {
			CreateProxy();
			NewQSqlField(fieldName);
		}
		[SmokeMethod("QSqlField", "(const QString&)", "$")]
		private void NewQSqlField(string fieldName) {
			((QSqlField) interceptor).NewQSqlField(fieldName);
		}
		public QSqlField() : this((Type) null) {
			CreateProxy();
			NewQSqlField();
		}
		[SmokeMethod("QSqlField", "()", "")]
		private void NewQSqlField() {
			((QSqlField) interceptor).NewQSqlField();
		}
		public QSqlField(QSqlField other) : this((Type) null) {
			CreateProxy();
			NewQSqlField(other);
		}
		[SmokeMethod("QSqlField", "(const QSqlField&)", "#")]
		private void NewQSqlField(QSqlField other) {
			((QSqlField) interceptor).NewQSqlField(other);
		}
		public override bool Equals(object o) {
			if (!(o is QSqlField)) { return false; }
			return this == (QSqlField) o;
		}
		public override int GetHashCode() {
			return ((QSqlField) interceptor).GetHashCode();
		}
		[SmokeMethod("setValue", "(const QVariant&)", "#")]
		public void SetValue(QVariant value) {
			((QSqlField) interceptor).SetValue(value);
		}
		[SmokeMethod("value", "() const", "")]
		public QVariant Value() {
			return ((QSqlField) interceptor).Value();
		}
		[SmokeMethod("setName", "(const QString&)", "$")]
		public void SetName(string name) {
			((QSqlField) interceptor).SetName(name);
		}
		[SmokeMethod("name", "() const", "")]
		public string Name() {
			return ((QSqlField) interceptor).Name();
		}
		[SmokeMethod("isNull", "() const", "")]
		public bool IsNull() {
			return ((QSqlField) interceptor).IsNull();
		}
		[SmokeMethod("setReadOnly", "(bool)", "$")]
		public void SetReadOnly(bool readOnly) {
			((QSqlField) interceptor).SetReadOnly(readOnly);
		}
		[SmokeMethod("isReadOnly", "() const", "")]
		public bool IsReadOnly() {
			return ((QSqlField) interceptor).IsReadOnly();
		}
		[SmokeMethod("clear", "()", "")]
		public void Clear() {
			((QSqlField) interceptor).Clear();
		}
		[SmokeMethod("type", "() const", "")]
		public QVariant.TypeOf type() {
			return ((QSqlField) interceptor).type();
		}
		[SmokeMethod("isAutoValue", "() const", "")]
		public bool IsAutoValue() {
			return ((QSqlField) interceptor).IsAutoValue();
		}
		[SmokeMethod("setType", "(QVariant::Type)", "$")]
		public void SetType(QVariant.TypeOf type) {
			((QSqlField) interceptor).SetType(type);
		}
		[SmokeMethod("setRequiredStatus", "(QSqlField::RequiredStatus)", "$")]
		public void SetRequiredStatus(QSqlField.RequiredStatus status) {
			((QSqlField) interceptor).SetRequiredStatus(status);
		}
		[SmokeMethod("setRequired", "(bool)", "$")]
		public void SetRequired(bool required) {
			((QSqlField) interceptor).SetRequired(required);
		}
		[SmokeMethod("setLength", "(int)", "$")]
		public void SetLength(int fieldLength) {
			((QSqlField) interceptor).SetLength(fieldLength);
		}
		[SmokeMethod("setPrecision", "(int)", "$")]
		public void SetPrecision(int precision) {
			((QSqlField) interceptor).SetPrecision(precision);
		}
		[SmokeMethod("setDefaultValue", "(const QVariant&)", "#")]
		public void SetDefaultValue(QVariant value) {
			((QSqlField) interceptor).SetDefaultValue(value);
		}
		[SmokeMethod("setSqlType", "(int)", "$")]
		public void SetSqlType(int type) {
			((QSqlField) interceptor).SetSqlType(type);
		}
		[SmokeMethod("setGenerated", "(bool)", "$")]
		public void SetGenerated(bool gen) {
			((QSqlField) interceptor).SetGenerated(gen);
		}
		[SmokeMethod("setAutoValue", "(bool)", "$")]
		public void SetAutoValue(bool autoVal) {
			((QSqlField) interceptor).SetAutoValue(autoVal);
		}
		[SmokeMethod("requiredStatus", "() const", "")]
		public QSqlField.RequiredStatus requiredStatus() {
			return ((QSqlField) interceptor).requiredStatus();
		}
		[SmokeMethod("length", "() const", "")]
		public int Length() {
			return ((QSqlField) interceptor).Length();
		}
		[SmokeMethod("precision", "() const", "")]
		public int Precision() {
			return ((QSqlField) interceptor).Precision();
		}
		[SmokeMethod("defaultValue", "() const", "")]
		public QVariant DefaultValue() {
			return ((QSqlField) interceptor).DefaultValue();
		}
		[SmokeMethod("typeID", "() const", "")]
		public int TypeID() {
			return ((QSqlField) interceptor).TypeID();
		}
		[SmokeMethod("isGenerated", "() const", "")]
		public bool IsGenerated() {
			return ((QSqlField) interceptor).IsGenerated();
		}
		[SmokeMethod("isValid", "() const", "")]
		public bool IsValid() {
			return ((QSqlField) interceptor).IsValid();
		}
		~QSqlField() {
			DisposeQSqlField();
		}
		public void Dispose() {
			DisposeQSqlField();
		}
		[SmokeMethod("~QSqlField", "()", "")]
		private void DisposeQSqlField() {
			((QSqlField) interceptor).DisposeQSqlField();
		}
		public static bool operator==(QSqlField lhs, QSqlField other) {
			return staticInterceptor.op_equals(lhs,other);
		}
		public static bool operator!=(QSqlField lhs, QSqlField other) {
			return !staticInterceptor.op_equals(lhs,other);
		}
	}
}
