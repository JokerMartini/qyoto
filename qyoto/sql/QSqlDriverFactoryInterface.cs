//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QSqlDriverFactoryInterface")]
	public abstract class QSqlDriverFactoryInterface : QFactoryInterface {
 		protected QSqlDriverFactoryInterface(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSqlDriverFactoryInterface), this);
			_interceptor = (QSqlDriverFactoryInterface) realProxy.GetTransparentProxy();
		}
		private QSqlDriverFactoryInterface ProxyQSqlDriverFactoryInterface() {
			return (QSqlDriverFactoryInterface) _interceptor;
		}
		[SmokeMethod("create", "(const QString&)", "$")]
		public abstract QSqlDriver Create(string name);
		public QSqlDriverFactoryInterface() : this((Type) null) {
			CreateProxy();
			NewQSqlDriverFactoryInterface();
		}
		[SmokeMethod("QSqlDriverFactoryInterface", "()", "")]
		private void NewQSqlDriverFactoryInterface() {
			ProxyQSqlDriverFactoryInterface().NewQSqlDriverFactoryInterface();
		}
	}
}
