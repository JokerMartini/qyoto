//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QSqlRelationalTableModel")]
	public class QSqlRelationalTableModel : QSqlTableModel, IDisposable {
 		protected QSqlRelationalTableModel(Type dummy) : base((Type) null) {}
		[SmokeClass("QSqlRelationalTableModel")]
		interface IQSqlRelationalTableModelProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSqlRelationalTableModel), this);
			interceptor = (QSqlRelationalTableModel) realProxy.GetTransparentProxy();
		}
		private static IQSqlRelationalTableModelProxy staticInterceptor = null;
		static QSqlRelationalTableModel() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSqlRelationalTableModelProxy), null);
			staticInterceptor = (IQSqlRelationalTableModelProxy) realProxy.GetTransparentProxy();
		}
		public QSqlRelationalTableModel(QObject parent, QSqlDatabase db) : this((Type) null) {
			CreateProxy();
			NewQSqlRelationalTableModel(parent,db);
		}
		[SmokeMethod("QSqlRelationalTableModel", "(QObject*, QSqlDatabase)", "##")]
		private void NewQSqlRelationalTableModel(QObject parent, QSqlDatabase db) {
			((QSqlRelationalTableModel) interceptor).NewQSqlRelationalTableModel(parent,db);
		}
		public QSqlRelationalTableModel(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQSqlRelationalTableModel(parent);
		}
		[SmokeMethod("QSqlRelationalTableModel", "(QObject*)", "#")]
		private void NewQSqlRelationalTableModel(QObject parent) {
			((QSqlRelationalTableModel) interceptor).NewQSqlRelationalTableModel(parent);
		}
		public QSqlRelationalTableModel() : this((Type) null) {
			CreateProxy();
			NewQSqlRelationalTableModel();
		}
		[SmokeMethod("QSqlRelationalTableModel", "()", "")]
		private void NewQSqlRelationalTableModel() {
			((QSqlRelationalTableModel) interceptor).NewQSqlRelationalTableModel();
		}
		[SmokeMethod("data", "(const QModelIndex&, int) const", "#$")]
		public override QVariant Data(QModelIndex item, int role) {
			return ((QSqlRelationalTableModel) interceptor).Data(item,role);
		}
		[SmokeMethod("data", "(const QModelIndex&) const", "#")]
		public override QVariant Data(QModelIndex item) {
			return ((QSqlRelationalTableModel) interceptor).Data(item);
		}
		[SmokeMethod("setData", "(const QModelIndex&, const QVariant&, int)", "##$")]
		public override bool SetData(QModelIndex item, QVariant value, int role) {
			return ((QSqlRelationalTableModel) interceptor).SetData(item,value,role);
		}
		[SmokeMethod("setData", "(const QModelIndex&, const QVariant&)", "##")]
		public override bool SetData(QModelIndex item, QVariant value) {
			return ((QSqlRelationalTableModel) interceptor).SetData(item,value);
		}
		[SmokeMethod("removeColumns", "(int, int, const QModelIndex&)", "$$#")]
		public override bool RemoveColumns(int column, int count, QModelIndex parent) {
			return ((QSqlRelationalTableModel) interceptor).RemoveColumns(column,count,parent);
		}
		[SmokeMethod("removeColumns", "(int, int)", "$$")]
		public override bool RemoveColumns(int column, int count) {
			return ((QSqlRelationalTableModel) interceptor).RemoveColumns(column,count);
		}
		[SmokeMethod("clear", "()", "")]
		public override void Clear() {
			((QSqlRelationalTableModel) interceptor).Clear();
		}
		[SmokeMethod("select", "()", "")]
		public override bool Select() {
			return ((QSqlRelationalTableModel) interceptor).Select();
		}
		[SmokeMethod("setTable", "(const QString&)", "$")]
		public override void SetTable(string tableName) {
			((QSqlRelationalTableModel) interceptor).SetTable(tableName);
		}
		[SmokeMethod("setRelation", "(int, const QSqlRelation&)", "$#")]
		public virtual void SetRelation(int column, QSqlRelation relation) {
			((QSqlRelationalTableModel) interceptor).SetRelation(column,relation);
		}
		[SmokeMethod("relation", "(int) const", "$")]
		public QSqlRelation Relation(int column) {
			return ((QSqlRelationalTableModel) interceptor).Relation(column);
		}
		[SmokeMethod("relationModel", "(int) const", "$")]
		public virtual QSqlTableModel RelationModel(int column) {
			return ((QSqlRelationalTableModel) interceptor).RelationModel(column);
		}
		[Q_SLOT("void revertRow(int)")]
		[SmokeMethod("revertRow", "(int)", "$")]
		public override void RevertRow(int row) {
			((QSqlRelationalTableModel) interceptor).RevertRow(row);
		}
		[SmokeMethod("selectStatement", "() const", "")]
		protected override string SelectStatement() {
			return ((QSqlRelationalTableModel) interceptor).SelectStatement();
		}
		[SmokeMethod("updateRowInTable", "(int, const QSqlRecord&)", "$#")]
		protected override bool UpdateRowInTable(int row, QSqlRecord values) {
			return ((QSqlRelationalTableModel) interceptor).UpdateRowInTable(row,values);
		}
		[SmokeMethod("insertRowIntoTable", "(const QSqlRecord&)", "#")]
		protected override bool InsertRowIntoTable(QSqlRecord values) {
			return ((QSqlRelationalTableModel) interceptor).InsertRowIntoTable(values);
		}
		[SmokeMethod("orderByClause", "() const", "")]
		protected override string OrderByClause() {
			return ((QSqlRelationalTableModel) interceptor).OrderByClause();
		}
		~QSqlRelationalTableModel() {
			DisposeQSqlRelationalTableModel();
		}
		public new void Dispose() {
			DisposeQSqlRelationalTableModel();
		}
		[SmokeMethod("~QSqlRelationalTableModel", "()", "")]
		private void DisposeQSqlRelationalTableModel() {
			((QSqlRelationalTableModel) interceptor).DisposeQSqlRelationalTableModel();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQSqlRelationalTableModelSignals Emit {
			get { return (IQSqlRelationalTableModelSignals) Q_EMIT; }
		}
	}

	public interface IQSqlRelationalTableModelSignals : IQSqlTableModelSignals {
	}
}
