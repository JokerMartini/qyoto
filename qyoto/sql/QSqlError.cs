//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QSqlError")]
	public class QSqlError : MarshalByRefObject, IDisposable {
		protected QSqlError interceptor = null;
		private IntPtr smokeObject;
		protected QSqlError(Type dummy) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSqlError), this);
			interceptor = (QSqlError) realProxy.GetTransparentProxy();
		}
		public enum ErrorType {
			NoError = 0,
			ConnectionError = 1,
			StatementError = 2,
			TransactionError = 3,
			UnknownError = 4,
		}
		public QSqlError(string driverText, string databaseText, QSqlError.ErrorType type, int number) : this((Type) null) {
			CreateProxy();
			NewQSqlError(driverText,databaseText,type,number);
		}
		[SmokeMethod("QSqlError", "(const QString&, const QString&, QSqlError::ErrorType, int)", "$$$$")]
		private void NewQSqlError(string driverText, string databaseText, QSqlError.ErrorType type, int number) {
			((QSqlError) interceptor).NewQSqlError(driverText,databaseText,type,number);
		}
		public QSqlError(string driverText, string databaseText, QSqlError.ErrorType type) : this((Type) null) {
			CreateProxy();
			NewQSqlError(driverText,databaseText,type);
		}
		[SmokeMethod("QSqlError", "(const QString&, const QString&, QSqlError::ErrorType)", "$$$")]
		private void NewQSqlError(string driverText, string databaseText, QSqlError.ErrorType type) {
			((QSqlError) interceptor).NewQSqlError(driverText,databaseText,type);
		}
		public QSqlError(string driverText, string databaseText) : this((Type) null) {
			CreateProxy();
			NewQSqlError(driverText,databaseText);
		}
		[SmokeMethod("QSqlError", "(const QString&, const QString&)", "$$")]
		private void NewQSqlError(string driverText, string databaseText) {
			((QSqlError) interceptor).NewQSqlError(driverText,databaseText);
		}
		public QSqlError(string driverText) : this((Type) null) {
			CreateProxy();
			NewQSqlError(driverText);
		}
		[SmokeMethod("QSqlError", "(const QString&)", "$")]
		private void NewQSqlError(string driverText) {
			((QSqlError) interceptor).NewQSqlError(driverText);
		}
		public QSqlError() : this((Type) null) {
			CreateProxy();
			NewQSqlError();
		}
		[SmokeMethod("QSqlError", "()", "")]
		private void NewQSqlError() {
			((QSqlError) interceptor).NewQSqlError();
		}
		public QSqlError(QSqlError other) : this((Type) null) {
			CreateProxy();
			NewQSqlError(other);
		}
		[SmokeMethod("QSqlError", "(const QSqlError&)", "#")]
		private void NewQSqlError(QSqlError other) {
			((QSqlError) interceptor).NewQSqlError(other);
		}
		[SmokeMethod("driverText", "() const", "")]
		public string DriverText() {
			return ((QSqlError) interceptor).DriverText();
		}
		[SmokeMethod("setDriverText", "(const QString&)", "$")]
		public void SetDriverText(string driverText) {
			((QSqlError) interceptor).SetDriverText(driverText);
		}
		[SmokeMethod("databaseText", "() const", "")]
		public string DatabaseText() {
			return ((QSqlError) interceptor).DatabaseText();
		}
		[SmokeMethod("setDatabaseText", "(const QString&)", "$")]
		public void SetDatabaseText(string databaseText) {
			((QSqlError) interceptor).SetDatabaseText(databaseText);
		}
		[SmokeMethod("type", "() const", "")]
		public QSqlError.ErrorType type() {
			return ((QSqlError) interceptor).type();
		}
		[SmokeMethod("setType", "(QSqlError::ErrorType)", "$")]
		public void SetType(QSqlError.ErrorType type) {
			((QSqlError) interceptor).SetType(type);
		}
		[SmokeMethod("number", "() const", "")]
		public int Number() {
			return ((QSqlError) interceptor).Number();
		}
		[SmokeMethod("setNumber", "(int)", "$")]
		public void SetNumber(int number) {
			((QSqlError) interceptor).SetNumber(number);
		}
		[SmokeMethod("text", "() const", "")]
		public string Text() {
			return ((QSqlError) interceptor).Text();
		}
		[SmokeMethod("isValid", "() const", "")]
		public bool IsValid() {
			return ((QSqlError) interceptor).IsValid();
		}
		~QSqlError() {
			DisposeQSqlError();
		}
		public void Dispose() {
			DisposeQSqlError();
		}
		[SmokeMethod("~QSqlError", "()", "")]
		private void DisposeQSqlError() {
			((QSqlError) interceptor).DisposeQSqlError();
		}
	}
}
