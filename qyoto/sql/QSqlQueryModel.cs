//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QSqlQueryModel")]
	public partial class QSqlQueryModel : QAbstractTableModel, IDisposable {
 		protected QSqlQueryModel(Type dummy) : base((Type) null) {}
		[SmokeClass("QSqlQueryModel")]
		interface IQSqlQueryModelProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSqlQueryModel), this);
			interceptor = (QSqlQueryModel) realProxy.GetTransparentProxy();
		}
		private static IQSqlQueryModelProxy staticInterceptor = null;
		static QSqlQueryModel() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSqlQueryModelProxy), null);
			staticInterceptor = (IQSqlQueryModelProxy) realProxy.GetTransparentProxy();
		}
		public QSqlQueryModel(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQSqlQueryModel(parent);
		}
		[SmokeMethod("QSqlQueryModel", "(QObject*)", "#")]
		private void NewQSqlQueryModel(QObject parent) {
			((QSqlQueryModel) interceptor).NewQSqlQueryModel(parent);
		}
		public QSqlQueryModel() : this((Type) null) {
			CreateProxy();
			NewQSqlQueryModel();
		}
		[SmokeMethod("QSqlQueryModel", "()", "")]
		private void NewQSqlQueryModel() {
			((QSqlQueryModel) interceptor).NewQSqlQueryModel();
		}
		[SmokeMethod("rowCount", "(const QModelIndex&) const", "#")]
		public override int RowCount(QModelIndex parent) {
			return ((QSqlQueryModel) interceptor).RowCount(parent);
		}
		[SmokeMethod("rowCount", "() const", "")]
		public virtual int RowCount() {
			return ((QSqlQueryModel) interceptor).RowCount();
		}
		[SmokeMethod("columnCount", "(const QModelIndex&) const", "#")]
		public override int ColumnCount(QModelIndex parent) {
			return ((QSqlQueryModel) interceptor).ColumnCount(parent);
		}
		[SmokeMethod("columnCount", "() const", "")]
		public virtual int ColumnCount() {
			return ((QSqlQueryModel) interceptor).ColumnCount();
		}
		[SmokeMethod("record", "(int) const", "$")]
		public QSqlRecord Record(int row) {
			return ((QSqlQueryModel) interceptor).Record(row);
		}
		[SmokeMethod("record", "() const", "")]
		public QSqlRecord Record() {
			return ((QSqlQueryModel) interceptor).Record();
		}
		[SmokeMethod("data", "(const QModelIndex&, int) const", "#$")]
		public override QVariant Data(QModelIndex item, int role) {
			return ((QSqlQueryModel) interceptor).Data(item,role);
		}
		[SmokeMethod("data", "(const QModelIndex&) const", "#")]
		public virtual QVariant Data(QModelIndex item) {
			return ((QSqlQueryModel) interceptor).Data(item);
		}
		[SmokeMethod("headerData", "(int, Qt::Orientation, int) const", "$$$")]
		public override QVariant HeaderData(int section, Qt.Orientation orientation, int role) {
			return ((QSqlQueryModel) interceptor).HeaderData(section,orientation,role);
		}
		[SmokeMethod("headerData", "(int, Qt::Orientation) const", "$$")]
		public override QVariant HeaderData(int section, Qt.Orientation orientation) {
			return ((QSqlQueryModel) interceptor).HeaderData(section,orientation);
		}
		[SmokeMethod("setHeaderData", "(int, Qt::Orientation, const QVariant&, int)", "$$#$")]
		public override bool SetHeaderData(int section, Qt.Orientation orientation, QVariant value, int role) {
			return ((QSqlQueryModel) interceptor).SetHeaderData(section,orientation,value,role);
		}
		[SmokeMethod("setHeaderData", "(int, Qt::Orientation, const QVariant&)", "$$#")]
		public override bool SetHeaderData(int section, Qt.Orientation orientation, QVariant value) {
			return ((QSqlQueryModel) interceptor).SetHeaderData(section,orientation,value);
		}
		[SmokeMethod("insertColumns", "(int, int, const QModelIndex&)", "$$#")]
		public override bool InsertColumns(int column, int count, QModelIndex parent) {
			return ((QSqlQueryModel) interceptor).InsertColumns(column,count,parent);
		}
		[SmokeMethod("insertColumns", "(int, int)", "$$")]
		public override bool InsertColumns(int column, int count) {
			return ((QSqlQueryModel) interceptor).InsertColumns(column,count);
		}
		[SmokeMethod("removeColumns", "(int, int, const QModelIndex&)", "$$#")]
		public override bool RemoveColumns(int column, int count, QModelIndex parent) {
			return ((QSqlQueryModel) interceptor).RemoveColumns(column,count,parent);
		}
		[SmokeMethod("removeColumns", "(int, int)", "$$")]
		public override bool RemoveColumns(int column, int count) {
			return ((QSqlQueryModel) interceptor).RemoveColumns(column,count);
		}
		[SmokeMethod("setQuery", "(const QSqlQuery&)", "#")]
		public void SetQuery(IQSqlQuery query) {
			((QSqlQueryModel) interceptor).SetQuery(query);
		}
		[SmokeMethod("setQuery", "(const QString&, const QSqlDatabase&)", "$#")]
		public void SetQuery(string query, QSqlDatabase db) {
			((QSqlQueryModel) interceptor).SetQuery(query,db);
		}
		[SmokeMethod("setQuery", "(const QString&)", "$")]
		public void SetQuery(string query) {
			((QSqlQueryModel) interceptor).SetQuery(query);
		}
		[SmokeMethod("query", "() const", "")]
		public IQSqlQuery Query() {
			return ((QSqlQueryModel) interceptor).Query();
		}
		[SmokeMethod("clear", "()", "")]
		public virtual void Clear() {
			((QSqlQueryModel) interceptor).Clear();
		}
		[SmokeMethod("lastError", "() const", "")]
		public QSqlError LastError() {
			return ((QSqlQueryModel) interceptor).LastError();
		}
		[SmokeMethod("fetchMore", "(const QModelIndex&)", "#")]
		public override void FetchMore(QModelIndex parent) {
			((QSqlQueryModel) interceptor).FetchMore(parent);
		}
		[SmokeMethod("fetchMore", "()", "")]
		public void FetchMore() {
			((QSqlQueryModel) interceptor).FetchMore();
		}
		[SmokeMethod("canFetchMore", "(const QModelIndex&) const", "#")]
		public override bool CanFetchMore(QModelIndex parent) {
			return ((QSqlQueryModel) interceptor).CanFetchMore(parent);
		}
		[SmokeMethod("canFetchMore", "() const", "")]
		public bool CanFetchMore() {
			return ((QSqlQueryModel) interceptor).CanFetchMore();
		}
		[SmokeMethod("queryChange", "()", "")]
		protected virtual void QueryChange() {
			((QSqlQueryModel) interceptor).QueryChange();
		}
		[SmokeMethod("indexInQuery", "(const QModelIndex&) const", "#")]
		protected QModelIndex IndexInQuery(QModelIndex item) {
			return ((QSqlQueryModel) interceptor).IndexInQuery(item);
		}
		[SmokeMethod("setLastError", "(const QSqlError&)", "#")]
		protected void SetLastError(QSqlError error) {
			((QSqlQueryModel) interceptor).SetLastError(error);
		}
		~QSqlQueryModel() {
			DisposeQSqlQueryModel();
		}
		public new void Dispose() {
			DisposeQSqlQueryModel();
		}
		[SmokeMethod("~QSqlQueryModel", "()", "")]
		private void DisposeQSqlQueryModel() {
			((QSqlQueryModel) interceptor).DisposeQSqlQueryModel();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQSqlQueryModelSignals Emit {
			get { return (IQSqlQueryModelSignals) Q_EMIT; }
		}
	}

	public interface IQSqlQueryModelSignals : IQAbstractTableModelSignals {
	}
}
