//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QGLFormat")]
	public class QGLFormat : MarshalByRefObject, IDisposable {
		protected QGLFormat interceptor = null;
		private IntPtr smokeObject;
		protected QGLFormat(Type dummy) {}
		[SmokeClass("QGLFormat")]
		interface IQGLFormatProxy {
			[SmokeMethod("defaultFormat", "()", "")]
			QGLFormat DefaultFormat();
			[SmokeMethod("setDefaultFormat", "(const QGLFormat&)", "#")]
			void SetDefaultFormat(QGLFormat f);
			[SmokeMethod("defaultOverlayFormat", "()", "")]
			QGLFormat DefaultOverlayFormat();
			[SmokeMethod("setDefaultOverlayFormat", "(const QGLFormat&)", "#")]
			void SetDefaultOverlayFormat(QGLFormat f);
			[SmokeMethod("hasOpenGL", "()", "")]
			bool HasOpenGL();
			[SmokeMethod("hasOpenGLOverlays", "()", "")]
			bool HasOpenGLOverlays();
			[SmokeMethod("operator==", "(const QGLFormat&, const QGLFormat&)", "##")]
			bool op_equals(QGLFormat arg1, QGLFormat arg2);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QGLFormat), this);
			interceptor = (QGLFormat) realProxy.GetTransparentProxy();
		}
		private static IQGLFormatProxy staticInterceptor = null;
		static QGLFormat() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQGLFormatProxy), null);
			staticInterceptor = (IQGLFormatProxy) realProxy.GetTransparentProxy();
		}
		public enum OpenGLVersionFlag {
			OpenGL_Version_None = 0x00000000,
			OpenGL_Version_1_1 = 0x00000001,
			OpenGL_Version_1_2 = 0x00000002,
			OpenGL_Version_1_3 = 0x00000004,
			OpenGL_Version_1_4 = 0x00000008,
			OpenGL_Version_1_5 = 0x00000010,
			OpenGL_Version_2_0 = 0x00000020,
			OpenGL_Version_2_1 = 0x00000040,
			OpenGL_ES_Common_Version_1_0 = 0x00000080,
			OpenGL_ES_CommonLite_Version_1_0 = 0x00000100,
			OpenGL_ES_Common_Version_1_1 = 0x00000200,
			OpenGL_ES_CommonLite_Version_1_1 = 0x00000400,
			OpenGL_ES_Version_2_0 = 0x00000800,
		}
		// OpenGLVersionFlags openGLVersionFlags(); >>>> NOT CONVERTED
		public QGLFormat() : this((Type) null) {
			CreateProxy();
			NewQGLFormat();
		}
		[SmokeMethod("QGLFormat", "()", "")]
		private void NewQGLFormat() {
			((QGLFormat) interceptor).NewQGLFormat();
		}
		public QGLFormat(int options, int plane) : this((Type) null) {
			CreateProxy();
			NewQGLFormat(options,plane);
		}
		[SmokeMethod("QGLFormat", "(QGL::FormatOptions, int)", "$$")]
		private void NewQGLFormat(int options, int plane) {
			((QGLFormat) interceptor).NewQGLFormat(options,plane);
		}
		public QGLFormat(int options) : this((Type) null) {
			CreateProxy();
			NewQGLFormat(options);
		}
		[SmokeMethod("QGLFormat", "(QGL::FormatOptions)", "$")]
		private void NewQGLFormat(int options) {
			((QGLFormat) interceptor).NewQGLFormat(options);
		}
		public QGLFormat(QGLFormat other) : this((Type) null) {
			CreateProxy();
			NewQGLFormat(other);
		}
		[SmokeMethod("QGLFormat", "(const QGLFormat&)", "#")]
		private void NewQGLFormat(QGLFormat other) {
			((QGLFormat) interceptor).NewQGLFormat(other);
		}
		[SmokeMethod("setDepthBufferSize", "(int)", "$")]
		public void SetDepthBufferSize(int size) {
			((QGLFormat) interceptor).SetDepthBufferSize(size);
		}
		[SmokeMethod("depthBufferSize", "() const", "")]
		public int DepthBufferSize() {
			return ((QGLFormat) interceptor).DepthBufferSize();
		}
		[SmokeMethod("setAccumBufferSize", "(int)", "$")]
		public void SetAccumBufferSize(int size) {
			((QGLFormat) interceptor).SetAccumBufferSize(size);
		}
		[SmokeMethod("accumBufferSize", "() const", "")]
		public int AccumBufferSize() {
			return ((QGLFormat) interceptor).AccumBufferSize();
		}
		[SmokeMethod("setRedBufferSize", "(int)", "$")]
		public void SetRedBufferSize(int size) {
			((QGLFormat) interceptor).SetRedBufferSize(size);
		}
		[SmokeMethod("redBufferSize", "() const", "")]
		public int RedBufferSize() {
			return ((QGLFormat) interceptor).RedBufferSize();
		}
		[SmokeMethod("setGreenBufferSize", "(int)", "$")]
		public void SetGreenBufferSize(int size) {
			((QGLFormat) interceptor).SetGreenBufferSize(size);
		}
		[SmokeMethod("greenBufferSize", "() const", "")]
		public int GreenBufferSize() {
			return ((QGLFormat) interceptor).GreenBufferSize();
		}
		[SmokeMethod("setBlueBufferSize", "(int)", "$")]
		public void SetBlueBufferSize(int size) {
			((QGLFormat) interceptor).SetBlueBufferSize(size);
		}
		[SmokeMethod("blueBufferSize", "() const", "")]
		public int BlueBufferSize() {
			return ((QGLFormat) interceptor).BlueBufferSize();
		}
		[SmokeMethod("setAlphaBufferSize", "(int)", "$")]
		public void SetAlphaBufferSize(int size) {
			((QGLFormat) interceptor).SetAlphaBufferSize(size);
		}
		[SmokeMethod("alphaBufferSize", "() const", "")]
		public int AlphaBufferSize() {
			return ((QGLFormat) interceptor).AlphaBufferSize();
		}
		[SmokeMethod("setStencilBufferSize", "(int)", "$")]
		public void SetStencilBufferSize(int size) {
			((QGLFormat) interceptor).SetStencilBufferSize(size);
		}
		[SmokeMethod("stencilBufferSize", "() const", "")]
		public int StencilBufferSize() {
			return ((QGLFormat) interceptor).StencilBufferSize();
		}
		[SmokeMethod("setSampleBuffers", "(bool)", "$")]
		public void SetSampleBuffers(bool enable) {
			((QGLFormat) interceptor).SetSampleBuffers(enable);
		}
		[SmokeMethod("sampleBuffers", "() const", "")]
		public bool SampleBuffers() {
			return ((QGLFormat) interceptor).SampleBuffers();
		}
		[SmokeMethod("setSamples", "(int)", "$")]
		public void SetSamples(int numSamples) {
			((QGLFormat) interceptor).SetSamples(numSamples);
		}
		[SmokeMethod("samples", "() const", "")]
		public int Samples() {
			return ((QGLFormat) interceptor).Samples();
		}
		[SmokeMethod("setSwapInterval", "(int)", "$")]
		public void SetSwapInterval(int interval) {
			((QGLFormat) interceptor).SetSwapInterval(interval);
		}
		[SmokeMethod("swapInterval", "() const", "")]
		public int SwapInterval() {
			return ((QGLFormat) interceptor).SwapInterval();
		}
		[SmokeMethod("doubleBuffer", "() const", "")]
		public bool DoubleBuffer() {
			return ((QGLFormat) interceptor).DoubleBuffer();
		}
		[SmokeMethod("setDoubleBuffer", "(bool)", "$")]
		public void SetDoubleBuffer(bool enable) {
			((QGLFormat) interceptor).SetDoubleBuffer(enable);
		}
		[SmokeMethod("depth", "() const", "")]
		public bool Depth() {
			return ((QGLFormat) interceptor).Depth();
		}
		[SmokeMethod("setDepth", "(bool)", "$")]
		public void SetDepth(bool enable) {
			((QGLFormat) interceptor).SetDepth(enable);
		}
		[SmokeMethod("rgba", "() const", "")]
		public bool Rgba() {
			return ((QGLFormat) interceptor).Rgba();
		}
		[SmokeMethod("setRgba", "(bool)", "$")]
		public void SetRgba(bool enable) {
			((QGLFormat) interceptor).SetRgba(enable);
		}
		[SmokeMethod("alpha", "() const", "")]
		public bool Alpha() {
			return ((QGLFormat) interceptor).Alpha();
		}
		[SmokeMethod("setAlpha", "(bool)", "$")]
		public void SetAlpha(bool enable) {
			((QGLFormat) interceptor).SetAlpha(enable);
		}
		[SmokeMethod("accum", "() const", "")]
		public bool Accum() {
			return ((QGLFormat) interceptor).Accum();
		}
		[SmokeMethod("setAccum", "(bool)", "$")]
		public void SetAccum(bool enable) {
			((QGLFormat) interceptor).SetAccum(enable);
		}
		[SmokeMethod("stencil", "() const", "")]
		public bool Stencil() {
			return ((QGLFormat) interceptor).Stencil();
		}
		[SmokeMethod("setStencil", "(bool)", "$")]
		public void SetStencil(bool enable) {
			((QGLFormat) interceptor).SetStencil(enable);
		}
		[SmokeMethod("stereo", "() const", "")]
		public bool Stereo() {
			return ((QGLFormat) interceptor).Stereo();
		}
		[SmokeMethod("setStereo", "(bool)", "$")]
		public void SetStereo(bool enable) {
			((QGLFormat) interceptor).SetStereo(enable);
		}
		[SmokeMethod("directRendering", "() const", "")]
		public bool DirectRendering() {
			return ((QGLFormat) interceptor).DirectRendering();
		}
		[SmokeMethod("setDirectRendering", "(bool)", "$")]
		public void SetDirectRendering(bool enable) {
			((QGLFormat) interceptor).SetDirectRendering(enable);
		}
		[SmokeMethod("hasOverlay", "() const", "")]
		public bool HasOverlay() {
			return ((QGLFormat) interceptor).HasOverlay();
		}
		[SmokeMethod("setOverlay", "(bool)", "$")]
		public void SetOverlay(bool enable) {
			((QGLFormat) interceptor).SetOverlay(enable);
		}
		[SmokeMethod("plane", "() const", "")]
		public int Plane() {
			return ((QGLFormat) interceptor).Plane();
		}
		[SmokeMethod("setPlane", "(int)", "$")]
		public void SetPlane(int plane) {
			((QGLFormat) interceptor).SetPlane(plane);
		}
		[SmokeMethod("setOption", "(QGL::FormatOptions)", "$")]
		public void SetOption(int opt) {
			((QGLFormat) interceptor).SetOption(opt);
		}
		[SmokeMethod("testOption", "(QGL::FormatOptions) const", "$")]
		public bool TestOption(int opt) {
			return ((QGLFormat) interceptor).TestOption(opt);
		}
		~QGLFormat() {
			DisposeQGLFormat();
		}
		public void Dispose() {
			DisposeQGLFormat();
		}
		[SmokeMethod("~QGLFormat", "()", "")]
		private void DisposeQGLFormat() {
			((QGLFormat) interceptor).DisposeQGLFormat();
		}
		public override bool Equals(object o) {
			if (!(o is QGLFormat)) { return false; }
			return this == (QGLFormat) o;
		}
		public override int GetHashCode() {
			return ((QGLFormat) interceptor).GetHashCode();
		}
		public static QGLFormat DefaultFormat() {
			return staticInterceptor.DefaultFormat();
		}
		public static void SetDefaultFormat(QGLFormat f) {
			staticInterceptor.SetDefaultFormat(f);
		}
		public static QGLFormat DefaultOverlayFormat() {
			return staticInterceptor.DefaultOverlayFormat();
		}
		public static void SetDefaultOverlayFormat(QGLFormat f) {
			staticInterceptor.SetDefaultOverlayFormat(f);
		}
		public static bool HasOpenGL() {
			return staticInterceptor.HasOpenGL();
		}
		public static bool HasOpenGLOverlays() {
			return staticInterceptor.HasOpenGLOverlays();
		}
		public static bool operator==(QGLFormat arg1, QGLFormat arg2) {
			return staticInterceptor.op_equals(arg1,arg2);
		}
		public static bool operator!=(QGLFormat arg1, QGLFormat arg2) {
			return !staticInterceptor.op_equals(arg1,arg2);
		}
	}
}
