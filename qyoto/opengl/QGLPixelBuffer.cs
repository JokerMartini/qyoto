//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QGLPixelBuffer")]
	public class QGLPixelBuffer : QPaintDevice, IDisposable {
 		protected QGLPixelBuffer(Type dummy) : base((Type) null) {}
		[SmokeClass("QGLPixelBuffer")]
		interface IQGLPixelBufferProxy {
			[SmokeMethod("hasOpenGLPbuffers", "()", "")]
			bool HasOpenGLPbuffers();
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QGLPixelBuffer), this);
			interceptor = (QGLPixelBuffer) realProxy.GetTransparentProxy();
		}
		private static IQGLPixelBufferProxy staticInterceptor = null;
		static QGLPixelBuffer() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQGLPixelBufferProxy), null);
			staticInterceptor = (IQGLPixelBufferProxy) realProxy.GetTransparentProxy();
		}
		public QGLPixelBuffer(QSize size, QGLFormat format, QGLWidget shareWidget) : this((Type) null) {
			CreateProxy();
			NewQGLPixelBuffer(size,format,shareWidget);
		}
		[SmokeMethod("QGLPixelBuffer", "(const QSize&, const QGLFormat&, QGLWidget*)", "###")]
		private void NewQGLPixelBuffer(QSize size, QGLFormat format, QGLWidget shareWidget) {
			((QGLPixelBuffer) interceptor).NewQGLPixelBuffer(size,format,shareWidget);
		}
		public QGLPixelBuffer(QSize size, QGLFormat format) : this((Type) null) {
			CreateProxy();
			NewQGLPixelBuffer(size,format);
		}
		[SmokeMethod("QGLPixelBuffer", "(const QSize&, const QGLFormat&)", "##")]
		private void NewQGLPixelBuffer(QSize size, QGLFormat format) {
			((QGLPixelBuffer) interceptor).NewQGLPixelBuffer(size,format);
		}
		public QGLPixelBuffer(QSize size) : this((Type) null) {
			CreateProxy();
			NewQGLPixelBuffer(size);
		}
		[SmokeMethod("QGLPixelBuffer", "(const QSize&)", "#")]
		private void NewQGLPixelBuffer(QSize size) {
			((QGLPixelBuffer) interceptor).NewQGLPixelBuffer(size);
		}
		public QGLPixelBuffer(int width, int height, QGLFormat format, QGLWidget shareWidget) : this((Type) null) {
			CreateProxy();
			NewQGLPixelBuffer(width,height,format,shareWidget);
		}
		[SmokeMethod("QGLPixelBuffer", "(int, int, const QGLFormat&, QGLWidget*)", "$$##")]
		private void NewQGLPixelBuffer(int width, int height, QGLFormat format, QGLWidget shareWidget) {
			((QGLPixelBuffer) interceptor).NewQGLPixelBuffer(width,height,format,shareWidget);
		}
		public QGLPixelBuffer(int width, int height, QGLFormat format) : this((Type) null) {
			CreateProxy();
			NewQGLPixelBuffer(width,height,format);
		}
		[SmokeMethod("QGLPixelBuffer", "(int, int, const QGLFormat&)", "$$#")]
		private void NewQGLPixelBuffer(int width, int height, QGLFormat format) {
			((QGLPixelBuffer) interceptor).NewQGLPixelBuffer(width,height,format);
		}
		public QGLPixelBuffer(int width, int height) : this((Type) null) {
			CreateProxy();
			NewQGLPixelBuffer(width,height);
		}
		[SmokeMethod("QGLPixelBuffer", "(int, int)", "$$")]
		private void NewQGLPixelBuffer(int width, int height) {
			((QGLPixelBuffer) interceptor).NewQGLPixelBuffer(width,height);
		}
		[SmokeMethod("isValid", "() const", "")]
		public bool IsValid() {
			return ((QGLPixelBuffer) interceptor).IsValid();
		}
		[SmokeMethod("makeCurrent", "()", "")]
		public bool MakeCurrent() {
			return ((QGLPixelBuffer) interceptor).MakeCurrent();
		}
		[SmokeMethod("doneCurrent", "()", "")]
		public bool DoneCurrent() {
			return ((QGLPixelBuffer) interceptor).DoneCurrent();
		}
		[SmokeMethod("generateDynamicTexture", "() const", "")]
		public uint GenerateDynamicTexture() {
			return ((QGLPixelBuffer) interceptor).GenerateDynamicTexture();
		}
		[SmokeMethod("bindToDynamicTexture", "(GLuint)", "$")]
		public bool BindToDynamicTexture(uint texture) {
			return ((QGLPixelBuffer) interceptor).BindToDynamicTexture(texture);
		}
		[SmokeMethod("releaseFromDynamicTexture", "()", "")]
		public void ReleaseFromDynamicTexture() {
			((QGLPixelBuffer) interceptor).ReleaseFromDynamicTexture();
		}
		[SmokeMethod("updateDynamicTexture", "(GLuint) const", "$")]
		public void UpdateDynamicTexture(uint texture_id) {
			((QGLPixelBuffer) interceptor).UpdateDynamicTexture(texture_id);
		}
		[SmokeMethod("bindTexture", "(const QImage&, GLenum)", "#$")]
		public uint BindTexture(QImage image, int target) {
			return ((QGLPixelBuffer) interceptor).BindTexture(image,target);
		}
		[SmokeMethod("bindTexture", "(const QImage&)", "#")]
		public uint BindTexture(QImage image) {
			return ((QGLPixelBuffer) interceptor).BindTexture(image);
		}
		[SmokeMethod("bindTexture", "(const QPixmap&, GLenum)", "#$")]
		public uint BindTexture(QPixmap pixmap, int target) {
			return ((QGLPixelBuffer) interceptor).BindTexture(pixmap,target);
		}
		[SmokeMethod("bindTexture", "(const QPixmap&)", "#")]
		public uint BindTexture(QPixmap pixmap) {
			return ((QGLPixelBuffer) interceptor).BindTexture(pixmap);
		}
		[SmokeMethod("bindTexture", "(const QString&)", "$")]
		public uint BindTexture(string fileName) {
			return ((QGLPixelBuffer) interceptor).BindTexture(fileName);
		}
		[SmokeMethod("deleteTexture", "(GLuint)", "$")]
		public void DeleteTexture(uint texture_id) {
			((QGLPixelBuffer) interceptor).DeleteTexture(texture_id);
		}
		[SmokeMethod("size", "() const", "")]
		public QSize Size() {
			return ((QGLPixelBuffer) interceptor).Size();
		}
		[SmokeMethod("toImage", "() const", "")]
		public QImage ToImage() {
			return ((QGLPixelBuffer) interceptor).ToImage();
		}
		[SmokeMethod("paintEngine", "() const", "")]
		public override QPaintEngine PaintEngine() {
			return ((QGLPixelBuffer) interceptor).PaintEngine();
		}
		[SmokeMethod("format", "() const", "")]
		public QGLFormat Format() {
			return ((QGLPixelBuffer) interceptor).Format();
		}
		[SmokeMethod("metric", "(QPaintDevice::PaintDeviceMetric) const", "$")]
		protected override int Metric(IQPaintDevice metric) {
			return ((QGLPixelBuffer) interceptor).Metric(metric);
		}
		[SmokeMethod("devType", "() const", "")]
		protected new virtual int DevType() {
			return ((QGLPixelBuffer) interceptor).DevType();
		}
		~QGLPixelBuffer() {
			DisposeQGLPixelBuffer();
		}
		public void Dispose() {
			DisposeQGLPixelBuffer();
		}
		[SmokeMethod("~QGLPixelBuffer", "()", "")]
		private void DisposeQGLPixelBuffer() {
			((QGLPixelBuffer) interceptor).DisposeQGLPixelBuffer();
		}
		public static bool HasOpenGLPbuffers() {
			return staticInterceptor.HasOpenGLPbuffers();
		}
	}
}
