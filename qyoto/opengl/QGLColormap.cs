//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QGLColormap")]
	public class QGLColormap : MarshalByRefObject, IDisposable {
		protected QGLColormap interceptor = null;
		private IntPtr smokeObject;
		protected QGLColormap(Type dummy) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QGLColormap), this);
			interceptor = (QGLColormap) realProxy.GetTransparentProxy();
		}
		public QGLColormap() : this((Type) null) {
			CreateProxy();
			NewQGLColormap();
		}
		[SmokeMethod("QGLColormap", "()", "")]
		private void NewQGLColormap() {
			((QGLColormap) interceptor).NewQGLColormap();
		}
		public QGLColormap(QGLColormap arg1) : this((Type) null) {
			CreateProxy();
			NewQGLColormap(arg1);
		}
		[SmokeMethod("QGLColormap", "(const QGLColormap&)", "#")]
		private void NewQGLColormap(QGLColormap arg1) {
			((QGLColormap) interceptor).NewQGLColormap(arg1);
		}
		[SmokeMethod("isEmpty", "() const", "")]
		public bool IsEmpty() {
			return ((QGLColormap) interceptor).IsEmpty();
		}
		[SmokeMethod("size", "() const", "")]
		public int Size() {
			return ((QGLColormap) interceptor).Size();
		}
		[SmokeMethod("detach", "()", "")]
		public void Detach() {
			((QGLColormap) interceptor).Detach();
		}
		[SmokeMethod("setEntries", "(int, const QRgb*, int)", "$?$")]
		public void SetEntries(int count, out int colors, int arg3) {
			((QGLColormap) interceptor).SetEntries(count,out colors,arg3);
		}
		[SmokeMethod("setEntries", "(int, const QRgb*)", "$?")]
		public void SetEntries(int count, out int colors) {
			((QGLColormap) interceptor).SetEntries(count,out colors);
		}
		[SmokeMethod("setEntry", "(int, QRgb)", "$$")]
		public void SetEntry(int idx, uint color) {
			((QGLColormap) interceptor).SetEntry(idx,color);
		}
		[SmokeMethod("setEntry", "(int, const QColor&)", "$#")]
		public void SetEntry(int idx, QColor color) {
			((QGLColormap) interceptor).SetEntry(idx,color);
		}
		[SmokeMethod("entryRgb", "(int) const", "$")]
		public uint EntryRgb(int idx) {
			return ((QGLColormap) interceptor).EntryRgb(idx);
		}
		[SmokeMethod("entryColor", "(int) const", "$")]
		public QColor EntryColor(int idx) {
			return ((QGLColormap) interceptor).EntryColor(idx);
		}
		[SmokeMethod("find", "(QRgb) const", "$")]
		public int Find(uint color) {
			return ((QGLColormap) interceptor).Find(color);
		}
		[SmokeMethod("findNearest", "(QRgb) const", "$")]
		public int FindNearest(uint color) {
			return ((QGLColormap) interceptor).FindNearest(color);
		}
		[SmokeMethod("setHandle", "(Qt::HANDLE)", "$")]
		protected void SetHandle(uint ahandle) {
			((QGLColormap) interceptor).SetHandle(ahandle);
		}
		~QGLColormap() {
			DisposeQGLColormap();
		}
		public void Dispose() {
			DisposeQGLColormap();
		}
		[SmokeMethod("~QGLColormap", "()", "")]
		private void DisposeQGLColormap() {
			((QGLColormap) interceptor).DisposeQGLColormap();
		}
	}
}
