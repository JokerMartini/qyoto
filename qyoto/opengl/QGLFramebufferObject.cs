//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QGLFramebufferObject")]
	public class QGLFramebufferObject : QPaintDevice, IDisposable {
 		protected QGLFramebufferObject(Type dummy) : base((Type) null) {}
		[SmokeClass("QGLFramebufferObject")]
		interface IQGLFramebufferObjectProxy {
			[SmokeMethod("hasOpenGLFramebufferObjects", "()", "")]
			bool HasOpenGLFramebufferObjects();
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QGLFramebufferObject), this);
			interceptor = (QGLFramebufferObject) realProxy.GetTransparentProxy();
		}
		private static IQGLFramebufferObjectProxy staticInterceptor = null;
		static QGLFramebufferObject() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQGLFramebufferObjectProxy), null);
			staticInterceptor = (IQGLFramebufferObjectProxy) realProxy.GetTransparentProxy();
		}
		public QGLFramebufferObject(QSize size, int target) : this((Type) null) {
			CreateProxy();
			NewQGLFramebufferObject(size,target);
		}
		[SmokeMethod("QGLFramebufferObject", "(const QSize&, GLenum)", "#$")]
		private void NewQGLFramebufferObject(QSize size, int target) {
			((QGLFramebufferObject) interceptor).NewQGLFramebufferObject(size,target);
		}
		public QGLFramebufferObject(QSize size) : this((Type) null) {
			CreateProxy();
			NewQGLFramebufferObject(size);
		}
		[SmokeMethod("QGLFramebufferObject", "(const QSize&)", "#")]
		private void NewQGLFramebufferObject(QSize size) {
			((QGLFramebufferObject) interceptor).NewQGLFramebufferObject(size);
		}
		public QGLFramebufferObject(int width, int height, int target) : this((Type) null) {
			CreateProxy();
			NewQGLFramebufferObject(width,height,target);
		}
		[SmokeMethod("QGLFramebufferObject", "(int, int, GLenum)", "$$$")]
		private void NewQGLFramebufferObject(int width, int height, int target) {
			((QGLFramebufferObject) interceptor).NewQGLFramebufferObject(width,height,target);
		}
		public QGLFramebufferObject(int width, int height) : this((Type) null) {
			CreateProxy();
			NewQGLFramebufferObject(width,height);
		}
		[SmokeMethod("QGLFramebufferObject", "(int, int)", "$$")]
		private void NewQGLFramebufferObject(int width, int height) {
			((QGLFramebufferObject) interceptor).NewQGLFramebufferObject(width,height);
		}
		[SmokeMethod("isValid", "() const", "")]
		public bool IsValid() {
			return ((QGLFramebufferObject) interceptor).IsValid();
		}
		[SmokeMethod("bind", "()", "")]
		public bool Bind() {
			return ((QGLFramebufferObject) interceptor).Bind();
		}
		[SmokeMethod("release", "()", "")]
		public bool Release() {
			return ((QGLFramebufferObject) interceptor).Release();
		}
		[SmokeMethod("texture", "() const", "")]
		public uint Texture() {
			return ((QGLFramebufferObject) interceptor).Texture();
		}
		[SmokeMethod("size", "() const", "")]
		public QSize Size() {
			return ((QGLFramebufferObject) interceptor).Size();
		}
		[SmokeMethod("toImage", "() const", "")]
		public QImage ToImage() {
			return ((QGLFramebufferObject) interceptor).ToImage();
		}
		[SmokeMethod("paintEngine", "() const", "")]
		public override QPaintEngine PaintEngine() {
			return ((QGLFramebufferObject) interceptor).PaintEngine();
		}
		[SmokeMethod("metric", "(QPaintDevice::PaintDeviceMetric) const", "$")]
		protected override int Metric(IQPaintDevice metric) {
			return ((QGLFramebufferObject) interceptor).Metric(metric);
		}
		[SmokeMethod("devType", "() const", "")]
		protected new virtual int DevType() {
			return ((QGLFramebufferObject) interceptor).DevType();
		}
		~QGLFramebufferObject() {
			DisposeQGLFramebufferObject();
		}
		public void Dispose() {
			DisposeQGLFramebufferObject();
		}
		[SmokeMethod("~QGLFramebufferObject", "()", "")]
		private void DisposeQGLFramebufferObject() {
			((QGLFramebufferObject) interceptor).DisposeQGLFramebufferObject();
		}
		public static bool HasOpenGLFramebufferObjects() {
			return staticInterceptor.HasOpenGLFramebufferObjects();
		}
	}
}
