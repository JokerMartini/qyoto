//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QGLContext")]
	public class QGLContext : MarshalByRefObject, IDisposable {
		protected QGLContext interceptor = null;
		private IntPtr smokeObject;
		protected QGLContext(Type dummy) {}
		[SmokeClass("QGLContext")]
		interface IQGLContextProxy {
			[SmokeMethod("currentCtx", "()", "")]
			QGLContext currentCtx();
			[SmokeMethod("setTextureCacheLimit", "(int)", "$")]
			void SetTextureCacheLimit(int size);
			[SmokeMethod("textureCacheLimit", "()", "")]
			int TextureCacheLimit();
			[SmokeMethod("currentContext", "()", "")]
			QGLContext CurrentContext();
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QGLContext), this);
			interceptor = (QGLContext) realProxy.GetTransparentProxy();
		}
		private static IQGLContextProxy staticInterceptor = null;
		static QGLContext() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQGLContextProxy), null);
			staticInterceptor = (IQGLContextProxy) realProxy.GetTransparentProxy();
		}
		public static QGLContext CurrentCtx() {
			return staticInterceptor.currentCtx();
		}
		// void* getProcAddress(const QString& arg1); >>>> NOT CONVERTED
		public QGLContext(QGLFormat format, IQPaintDevice device) : this((Type) null) {
			CreateProxy();
			NewQGLContext(format,device);
		}
		[SmokeMethod("QGLContext", "(const QGLFormat&, QPaintDevice*)", "##")]
		private void NewQGLContext(QGLFormat format, IQPaintDevice device) {
			((QGLContext) interceptor).NewQGLContext(format,device);
		}
		public QGLContext(QGLFormat format) : this((Type) null) {
			CreateProxy();
			NewQGLContext(format);
		}
		[SmokeMethod("QGLContext", "(const QGLFormat&)", "#")]
		private void NewQGLContext(QGLFormat format) {
			((QGLContext) interceptor).NewQGLContext(format);
		}
		[SmokeMethod("create", "(const QGLContext*)", "#")]
		public virtual bool Create(QGLContext shareContext) {
			return ((QGLContext) interceptor).Create(shareContext);
		}
		[SmokeMethod("create", "()", "")]
		public virtual bool Create() {
			return ((QGLContext) interceptor).Create();
		}
		[SmokeMethod("isValid", "() const", "")]
		public bool IsValid() {
			return ((QGLContext) interceptor).IsValid();
		}
		[SmokeMethod("isSharing", "() const", "")]
		public bool IsSharing() {
			return ((QGLContext) interceptor).IsSharing();
		}
		[SmokeMethod("reset", "()", "")]
		public void Reset() {
			((QGLContext) interceptor).Reset();
		}
		[SmokeMethod("format", "() const", "")]
		public QGLFormat Format() {
			return ((QGLContext) interceptor).Format();
		}
		[SmokeMethod("requestedFormat", "() const", "")]
		public QGLFormat RequestedFormat() {
			return ((QGLContext) interceptor).RequestedFormat();
		}
		[SmokeMethod("setFormat", "(const QGLFormat&)", "#")]
		public void SetFormat(QGLFormat format) {
			((QGLContext) interceptor).SetFormat(format);
		}
		[SmokeMethod("makeCurrent", "()", "")]
		public virtual void MakeCurrent() {
			((QGLContext) interceptor).MakeCurrent();
		}
		[SmokeMethod("doneCurrent", "()", "")]
		public virtual void DoneCurrent() {
			((QGLContext) interceptor).DoneCurrent();
		}
		[SmokeMethod("swapBuffers", "() const", "")]
		public virtual void SwapBuffers() {
			((QGLContext) interceptor).SwapBuffers();
		}
		[SmokeMethod("bindTexture", "(const QImage&, GLenum, GLint)", "#$$")]
		public uint BindTexture(QImage image, int target, int format) {
			return ((QGLContext) interceptor).BindTexture(image,target,format);
		}
		[SmokeMethod("bindTexture", "(const QImage&, GLenum)", "#$")]
		public uint BindTexture(QImage image, int target) {
			return ((QGLContext) interceptor).BindTexture(image,target);
		}
		[SmokeMethod("bindTexture", "(const QImage&)", "#")]
		public uint BindTexture(QImage image) {
			return ((QGLContext) interceptor).BindTexture(image);
		}
		[SmokeMethod("bindTexture", "(const QPixmap&, GLenum, GLint)", "#$$")]
		public uint BindTexture(QPixmap pixmap, int target, int format) {
			return ((QGLContext) interceptor).BindTexture(pixmap,target,format);
		}
		[SmokeMethod("bindTexture", "(const QPixmap&, GLenum)", "#$")]
		public uint BindTexture(QPixmap pixmap, int target) {
			return ((QGLContext) interceptor).BindTexture(pixmap,target);
		}
		[SmokeMethod("bindTexture", "(const QPixmap&)", "#")]
		public uint BindTexture(QPixmap pixmap) {
			return ((QGLContext) interceptor).BindTexture(pixmap);
		}
		[SmokeMethod("bindTexture", "(const QString&)", "$")]
		public uint BindTexture(string fileName) {
			return ((QGLContext) interceptor).BindTexture(fileName);
		}
		[SmokeMethod("deleteTexture", "(GLuint)", "$")]
		public void DeleteTexture(uint tx_id) {
			((QGLContext) interceptor).DeleteTexture(tx_id);
		}
		[SmokeMethod("device", "() const", "")]
		public IQPaintDevice Device() {
			return ((QGLContext) interceptor).Device();
		}
		[SmokeMethod("overlayTransparentColor", "() const", "")]
		public QColor OverlayTransparentColor() {
			return ((QGLContext) interceptor).OverlayTransparentColor();
		}
		[SmokeMethod("chooseContext", "(const QGLContext*)", "#")]
		protected virtual bool ChooseContext(QGLContext shareContext) {
			return ((QGLContext) interceptor).ChooseContext(shareContext);
		}
		[SmokeMethod("chooseContext", "()", "")]
		protected virtual bool ChooseContext() {
			return ((QGLContext) interceptor).ChooseContext();
		}
		[SmokeMethod("deviceIsPixmap", "() const", "")]
		protected bool DeviceIsPixmap() {
			return ((QGLContext) interceptor).DeviceIsPixmap();
		}
		[SmokeMethod("windowCreated", "() const", "")]
		protected bool WindowCreated() {
			return ((QGLContext) interceptor).WindowCreated();
		}
		[SmokeMethod("setWindowCreated", "(bool)", "$")]
		protected void SetWindowCreated(bool on) {
			((QGLContext) interceptor).SetWindowCreated(on);
		}
		[SmokeMethod("initialized", "() const", "")]
		protected bool Initialized() {
			return ((QGLContext) interceptor).Initialized();
		}
		[SmokeMethod("setInitialized", "(bool)", "$")]
		protected void SetInitialized(bool on) {
			((QGLContext) interceptor).SetInitialized(on);
		}
		[SmokeMethod("generateFontDisplayLists", "(const QFont&, int)", "#$")]
		protected void GenerateFontDisplayLists(QFont fnt, int listBase) {
			((QGLContext) interceptor).GenerateFontDisplayLists(fnt,listBase);
		}
		[SmokeMethod("colorIndex", "(const QColor&) const", "#")]
		protected uint ColorIndex(QColor c) {
			return ((QGLContext) interceptor).ColorIndex(c);
		}
		[SmokeMethod("setValid", "(bool)", "$")]
		protected void SetValid(bool valid) {
			((QGLContext) interceptor).SetValid(valid);
		}
		[SmokeMethod("setDevice", "(QPaintDevice*)", "#")]
		protected void SetDevice(IQPaintDevice pDev) {
			((QGLContext) interceptor).SetDevice(pDev);
		}
		~QGLContext() {
			DisposeQGLContext();
		}
		public void Dispose() {
			DisposeQGLContext();
		}
		[SmokeMethod("~QGLContext", "()", "")]
		private void DisposeQGLContext() {
			((QGLContext) interceptor).DisposeQGLContext();
		}
		public static void SetTextureCacheLimit(int size) {
			staticInterceptor.SetTextureCacheLimit(size);
		}
		public static int TextureCacheLimit() {
			return staticInterceptor.TextureCacheLimit();
		}
		public static QGLContext CurrentContext() {
			return staticInterceptor.CurrentContext();
		}
	}
}
