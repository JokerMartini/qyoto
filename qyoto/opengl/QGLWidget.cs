//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QGLWidget")]
	public class QGLWidget : QWidget, IDisposable {
 		protected QGLWidget(Type dummy) : base((Type) null) {}
		[SmokeClass("QGLWidget")]
		interface IQGLWidgetProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
			[SmokeMethod("convertToGLFormat", "(const QImage&)", "#")]
			QImage ConvertToGLFormat(QImage img);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QGLWidget), this);
			interceptor = (QGLWidget) realProxy.GetTransparentProxy();
		}
		private static IQGLWidgetProxy staticInterceptor = null;
		static QGLWidget() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQGLWidgetProxy), null);
			staticInterceptor = (IQGLWidgetProxy) realProxy.GetTransparentProxy();
		}
		public QGLWidget(QWidget parent, QGLWidget shareWidget, int f) : this((Type) null) {
			CreateProxy();
			NewQGLWidget(parent,shareWidget,f);
		}
		[SmokeMethod("QGLWidget", "(QWidget*, const QGLWidget*, Qt::WindowFlags)", "##$")]
		private void NewQGLWidget(QWidget parent, QGLWidget shareWidget, int f) {
			((QGLWidget) interceptor).NewQGLWidget(parent,shareWidget,f);
		}
		public QGLWidget(QWidget parent, QGLWidget shareWidget) : this((Type) null) {
			CreateProxy();
			NewQGLWidget(parent,shareWidget);
		}
		[SmokeMethod("QGLWidget", "(QWidget*, const QGLWidget*)", "##")]
		private void NewQGLWidget(QWidget parent, QGLWidget shareWidget) {
			((QGLWidget) interceptor).NewQGLWidget(parent,shareWidget);
		}
		public QGLWidget(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQGLWidget(parent);
		}
		[SmokeMethod("QGLWidget", "(QWidget*)", "#")]
		private void NewQGLWidget(QWidget parent) {
			((QGLWidget) interceptor).NewQGLWidget(parent);
		}
		public QGLWidget() : this((Type) null) {
			CreateProxy();
			NewQGLWidget();
		}
		[SmokeMethod("QGLWidget", "()", "")]
		private void NewQGLWidget() {
			((QGLWidget) interceptor).NewQGLWidget();
		}
		public QGLWidget(QGLContext context, QWidget parent, QGLWidget shareWidget, int f) : this((Type) null) {
			CreateProxy();
			NewQGLWidget(context,parent,shareWidget,f);
		}
		[SmokeMethod("QGLWidget", "(QGLContext*, QWidget*, const QGLWidget*, Qt::WindowFlags)", "###$")]
		private void NewQGLWidget(QGLContext context, QWidget parent, QGLWidget shareWidget, int f) {
			((QGLWidget) interceptor).NewQGLWidget(context,parent,shareWidget,f);
		}
		public QGLWidget(QGLContext context, QWidget parent, QGLWidget shareWidget) : this((Type) null) {
			CreateProxy();
			NewQGLWidget(context,parent,shareWidget);
		}
		[SmokeMethod("QGLWidget", "(QGLContext*, QWidget*, const QGLWidget*)", "###")]
		private void NewQGLWidget(QGLContext context, QWidget parent, QGLWidget shareWidget) {
			((QGLWidget) interceptor).NewQGLWidget(context,parent,shareWidget);
		}
		public QGLWidget(QGLContext context, QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQGLWidget(context,parent);
		}
		[SmokeMethod("QGLWidget", "(QGLContext*, QWidget*)", "##")]
		private void NewQGLWidget(QGLContext context, QWidget parent) {
			((QGLWidget) interceptor).NewQGLWidget(context,parent);
		}
		public QGLWidget(QGLContext context) : this((Type) null) {
			CreateProxy();
			NewQGLWidget(context);
		}
		[SmokeMethod("QGLWidget", "(QGLContext*)", "#")]
		private void NewQGLWidget(QGLContext context) {
			((QGLWidget) interceptor).NewQGLWidget(context);
		}
		public QGLWidget(QGLFormat format, QWidget parent, QGLWidget shareWidget, int f) : this((Type) null) {
			CreateProxy();
			NewQGLWidget(format,parent,shareWidget,f);
		}
		[SmokeMethod("QGLWidget", "(const QGLFormat&, QWidget*, const QGLWidget*, Qt::WindowFlags)", "###$")]
		private void NewQGLWidget(QGLFormat format, QWidget parent, QGLWidget shareWidget, int f) {
			((QGLWidget) interceptor).NewQGLWidget(format,parent,shareWidget,f);
		}
		public QGLWidget(QGLFormat format, QWidget parent, QGLWidget shareWidget) : this((Type) null) {
			CreateProxy();
			NewQGLWidget(format,parent,shareWidget);
		}
		[SmokeMethod("QGLWidget", "(const QGLFormat&, QWidget*, const QGLWidget*)", "###")]
		private void NewQGLWidget(QGLFormat format, QWidget parent, QGLWidget shareWidget) {
			((QGLWidget) interceptor).NewQGLWidget(format,parent,shareWidget);
		}
		public QGLWidget(QGLFormat format, QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQGLWidget(format,parent);
		}
		[SmokeMethod("QGLWidget", "(const QGLFormat&, QWidget*)", "##")]
		private void NewQGLWidget(QGLFormat format, QWidget parent) {
			((QGLWidget) interceptor).NewQGLWidget(format,parent);
		}
		public QGLWidget(QGLFormat format) : this((Type) null) {
			CreateProxy();
			NewQGLWidget(format);
		}
		[SmokeMethod("QGLWidget", "(const QGLFormat&)", "#")]
		private void NewQGLWidget(QGLFormat format) {
			((QGLWidget) interceptor).NewQGLWidget(format);
		}
		[SmokeMethod("qglColor", "(const QColor&) const", "#")]
		public void QglColor(QColor c) {
			((QGLWidget) interceptor).QglColor(c);
		}
		[SmokeMethod("qglClearColor", "(const QColor&) const", "#")]
		public void QglClearColor(QColor c) {
			((QGLWidget) interceptor).QglClearColor(c);
		}
		[SmokeMethod("isValid", "() const", "")]
		public bool IsValid() {
			return ((QGLWidget) interceptor).IsValid();
		}
		[SmokeMethod("isSharing", "() const", "")]
		public bool IsSharing() {
			return ((QGLWidget) interceptor).IsSharing();
		}
		[SmokeMethod("makeCurrent", "()", "")]
		public void MakeCurrent() {
			((QGLWidget) interceptor).MakeCurrent();
		}
		[SmokeMethod("doneCurrent", "()", "")]
		public void DoneCurrent() {
			((QGLWidget) interceptor).DoneCurrent();
		}
		[SmokeMethod("doubleBuffer", "() const", "")]
		public bool DoubleBuffer() {
			return ((QGLWidget) interceptor).DoubleBuffer();
		}
		[SmokeMethod("swapBuffers", "()", "")]
		public void SwapBuffers() {
			((QGLWidget) interceptor).SwapBuffers();
		}
		[SmokeMethod("format", "() const", "")]
		public QGLFormat Format() {
			return ((QGLWidget) interceptor).Format();
		}
		[SmokeMethod("setFormat", "(const QGLFormat&)", "#")]
		public void SetFormat(QGLFormat format) {
			((QGLWidget) interceptor).SetFormat(format);
		}
		[SmokeMethod("context", "() const", "")]
		public QGLContext Context() {
			return ((QGLWidget) interceptor).Context();
		}
		[SmokeMethod("setContext", "(QGLContext*, const QGLContext*, bool)", "##$")]
		public void SetContext(QGLContext context, QGLContext shareContext, bool deleteOldContext) {
			((QGLWidget) interceptor).SetContext(context,shareContext,deleteOldContext);
		}
		[SmokeMethod("setContext", "(QGLContext*, const QGLContext*)", "##")]
		public void SetContext(QGLContext context, QGLContext shareContext) {
			((QGLWidget) interceptor).SetContext(context,shareContext);
		}
		[SmokeMethod("setContext", "(QGLContext*)", "#")]
		public void SetContext(QGLContext context) {
			((QGLWidget) interceptor).SetContext(context);
		}
		[SmokeMethod("renderPixmap", "(int, int, bool)", "$$$")]
		public QPixmap RenderPixmap(int w, int h, bool useContext) {
			return ((QGLWidget) interceptor).RenderPixmap(w,h,useContext);
		}
		[SmokeMethod("renderPixmap", "(int, int)", "$$")]
		public QPixmap RenderPixmap(int w, int h) {
			return ((QGLWidget) interceptor).RenderPixmap(w,h);
		}
		[SmokeMethod("renderPixmap", "(int)", "$")]
		public QPixmap RenderPixmap(int w) {
			return ((QGLWidget) interceptor).RenderPixmap(w);
		}
		[SmokeMethod("renderPixmap", "()", "")]
		public QPixmap RenderPixmap() {
			return ((QGLWidget) interceptor).RenderPixmap();
		}
		[SmokeMethod("grabFrameBuffer", "(bool)", "$")]
		public QImage GrabFrameBuffer(bool withAlpha) {
			return ((QGLWidget) interceptor).GrabFrameBuffer(withAlpha);
		}
		[SmokeMethod("grabFrameBuffer", "()", "")]
		public QImage GrabFrameBuffer() {
			return ((QGLWidget) interceptor).GrabFrameBuffer();
		}
		[SmokeMethod("makeOverlayCurrent", "()", "")]
		public void MakeOverlayCurrent() {
			((QGLWidget) interceptor).MakeOverlayCurrent();
		}
		[SmokeMethod("overlayContext", "() const", "")]
		public QGLContext OverlayContext() {
			return ((QGLWidget) interceptor).OverlayContext();
		}
		[SmokeMethod("setMouseTracking", "(bool)", "$")]
		public void SetMouseTracking(bool enable) {
			((QGLWidget) interceptor).SetMouseTracking(enable);
		}
		[SmokeMethod("colormap", "() const", "")]
		public QGLColormap Colormap() {
			return ((QGLWidget) interceptor).Colormap();
		}
		[SmokeMethod("setColormap", "(const QGLColormap&)", "#")]
		public void SetColormap(QGLColormap map) {
			((QGLWidget) interceptor).SetColormap(map);
		}
		[SmokeMethod("renderText", "(int, int, const QString&, const QFont&, int)", "$$$#$")]
		public void RenderText(int x, int y, string str, QFont fnt, int listBase) {
			((QGLWidget) interceptor).RenderText(x,y,str,fnt,listBase);
		}
		[SmokeMethod("renderText", "(int, int, const QString&, const QFont&)", "$$$#")]
		public void RenderText(int x, int y, string str, QFont fnt) {
			((QGLWidget) interceptor).RenderText(x,y,str,fnt);
		}
		[SmokeMethod("renderText", "(int, int, const QString&)", "$$$")]
		public void RenderText(int x, int y, string str) {
			((QGLWidget) interceptor).RenderText(x,y,str);
		}
		[SmokeMethod("renderText", "(double, double, double, const QString&, const QFont&, int)", "$$$$#$")]
		public void RenderText(double x, double y, double z, string str, QFont fnt, int listBase) {
			((QGLWidget) interceptor).RenderText(x,y,z,str,fnt,listBase);
		}
		[SmokeMethod("renderText", "(double, double, double, const QString&, const QFont&)", "$$$$#")]
		public void RenderText(double x, double y, double z, string str, QFont fnt) {
			((QGLWidget) interceptor).RenderText(x,y,z,str,fnt);
		}
		[SmokeMethod("renderText", "(double, double, double, const QString&)", "$$$$")]
		public void RenderText(double x, double y, double z, string str) {
			((QGLWidget) interceptor).RenderText(x,y,z,str);
		}
		[SmokeMethod("paintEngine", "() const", "")]
		public override QPaintEngine PaintEngine() {
			return ((QGLWidget) interceptor).PaintEngine();
		}
		[SmokeMethod("bindTexture", "(const QImage&, GLenum, GLint)", "#$$")]
		public uint BindTexture(QImage image, int target, int format) {
			return ((QGLWidget) interceptor).BindTexture(image,target,format);
		}
		[SmokeMethod("bindTexture", "(const QImage&, GLenum)", "#$")]
		public uint BindTexture(QImage image, int target) {
			return ((QGLWidget) interceptor).BindTexture(image,target);
		}
		[SmokeMethod("bindTexture", "(const QImage&)", "#")]
		public uint BindTexture(QImage image) {
			return ((QGLWidget) interceptor).BindTexture(image);
		}
		[SmokeMethod("bindTexture", "(const QPixmap&, GLenum, GLint)", "#$$")]
		public uint BindTexture(QPixmap pixmap, int target, int format) {
			return ((QGLWidget) interceptor).BindTexture(pixmap,target,format);
		}
		[SmokeMethod("bindTexture", "(const QPixmap&, GLenum)", "#$")]
		public uint BindTexture(QPixmap pixmap, int target) {
			return ((QGLWidget) interceptor).BindTexture(pixmap,target);
		}
		[SmokeMethod("bindTexture", "(const QPixmap&)", "#")]
		public uint BindTexture(QPixmap pixmap) {
			return ((QGLWidget) interceptor).BindTexture(pixmap);
		}
		[SmokeMethod("bindTexture", "(const QString&)", "$")]
		public uint BindTexture(string fileName) {
			return ((QGLWidget) interceptor).BindTexture(fileName);
		}
		[SmokeMethod("deleteTexture", "(GLuint)", "$")]
		public void DeleteTexture(uint tx_id) {
			((QGLWidget) interceptor).DeleteTexture(tx_id);
		}
		[Q_SLOT("void updateGL()")]
		[SmokeMethod("updateGL", "()", "")]
		public virtual void UpdateGL() {
			((QGLWidget) interceptor).UpdateGL();
		}
		[Q_SLOT("void updateOverlayGL()")]
		[SmokeMethod("updateOverlayGL", "()", "")]
		public virtual void UpdateOverlayGL() {
			((QGLWidget) interceptor).UpdateOverlayGL();
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		protected override bool Event(QEvent arg1) {
			return ((QGLWidget) interceptor).Event(arg1);
		}
		[SmokeMethod("initializeGL", "()", "")]
		protected virtual void InitializeGL() {
			((QGLWidget) interceptor).InitializeGL();
		}
		[SmokeMethod("resizeGL", "(int, int)", "$$")]
		protected virtual void ResizeGL(int w, int h) {
			((QGLWidget) interceptor).ResizeGL(w,h);
		}
		[SmokeMethod("paintGL", "()", "")]
		protected virtual void PaintGL() {
			((QGLWidget) interceptor).PaintGL();
		}
		[SmokeMethod("initializeOverlayGL", "()", "")]
		protected virtual void InitializeOverlayGL() {
			((QGLWidget) interceptor).InitializeOverlayGL();
		}
		[SmokeMethod("resizeOverlayGL", "(int, int)", "$$")]
		protected virtual void ResizeOverlayGL(int w, int h) {
			((QGLWidget) interceptor).ResizeOverlayGL(w,h);
		}
		[SmokeMethod("paintOverlayGL", "()", "")]
		protected virtual void PaintOverlayGL() {
			((QGLWidget) interceptor).PaintOverlayGL();
		}
		[SmokeMethod("setAutoBufferSwap", "(bool)", "$")]
		protected void SetAutoBufferSwap(bool on) {
			((QGLWidget) interceptor).SetAutoBufferSwap(on);
		}
		[SmokeMethod("autoBufferSwap", "() const", "")]
		protected bool AutoBufferSwap() {
			return ((QGLWidget) interceptor).AutoBufferSwap();
		}
		[SmokeMethod("paintEvent", "(QPaintEvent*)", "#")]
		protected override void PaintEvent(QPaintEvent arg1) {
			((QGLWidget) interceptor).PaintEvent(arg1);
		}
		[SmokeMethod("resizeEvent", "(QResizeEvent*)", "#")]
		protected override void ResizeEvent(QResizeEvent arg1) {
			((QGLWidget) interceptor).ResizeEvent(arg1);
		}
		[SmokeMethod("glInit", "()", "")]
		protected virtual void GlInit() {
			((QGLWidget) interceptor).GlInit();
		}
		[SmokeMethod("glDraw", "()", "")]
		protected virtual void GlDraw() {
			((QGLWidget) interceptor).GlDraw();
		}
		[SmokeMethod("fontDisplayListBase", "(const QFont&, int)", "#$")]
		protected int FontDisplayListBase(QFont fnt, int listBase) {
			return ((QGLWidget) interceptor).FontDisplayListBase(fnt,listBase);
		}
		[SmokeMethod("fontDisplayListBase", "(const QFont&)", "#")]
		protected int FontDisplayListBase(QFont fnt) {
			return ((QGLWidget) interceptor).FontDisplayListBase(fnt);
		}
		~QGLWidget() {
			DisposeQGLWidget();
		}
		public new void Dispose() {
			DisposeQGLWidget();
		}
		[SmokeMethod("~QGLWidget", "()", "")]
		private void DisposeQGLWidget() {
			((QGLWidget) interceptor).DisposeQGLWidget();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		public static QImage ConvertToGLFormat(QImage img) {
			return staticInterceptor.ConvertToGLFormat(img);
		}
		protected new IQGLWidgetSignals Emit {
			get { return (IQGLWidgetSignals) Q_EMIT; }
		}
	}

	public interface IQGLWidgetSignals : IQWidgetSignals {
	}
}
