//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QDomNodeList")]
	public class QDomNodeList : MarshalByRefObject, IDisposable {
		protected QDomNodeList interceptor = null;
		private IntPtr smokeObject;
		protected QDomNodeList(Type dummy) {}
		[SmokeClass("QDomNodeList")]
		interface IQDomNodeListProxy {
			[SmokeMethod("operator==", "(const QDomNodeList&) const", "#")]
			bool op_equals(QDomNodeList lhs, QDomNodeList arg1);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDomNodeList), this);
			interceptor = (QDomNodeList) realProxy.GetTransparentProxy();
		}
		private static IQDomNodeListProxy staticInterceptor = null;
		static QDomNodeList() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDomNodeListProxy), null);
			staticInterceptor = (IQDomNodeListProxy) realProxy.GetTransparentProxy();
		}
		public QDomNodeList() : this((Type) null) {
			CreateProxy();
			NewQDomNodeList();
		}
		[SmokeMethod("QDomNodeList", "()", "")]
		private void NewQDomNodeList() {
			((QDomNodeList) interceptor).NewQDomNodeList();
		}
		public QDomNodeList(QDomNodeList arg1) : this((Type) null) {
			CreateProxy();
			NewQDomNodeList(arg1);
		}
		[SmokeMethod("QDomNodeList", "(const QDomNodeList&)", "#")]
		private void NewQDomNodeList(QDomNodeList arg1) {
			((QDomNodeList) interceptor).NewQDomNodeList(arg1);
		}
		public override bool Equals(object o) {
			if (!(o is QDomNodeList)) { return false; }
			return this == (QDomNodeList) o;
		}
		public override int GetHashCode() {
			return ((QDomNodeList) interceptor).GetHashCode();
		}
		[SmokeMethod("item", "(int) const", "$")]
		public QDomNode Item(int index) {
			return ((QDomNodeList) interceptor).Item(index);
		}
		[SmokeMethod("at", "(int) const", "$")]
		public QDomNode At(int index) {
			return ((QDomNodeList) interceptor).At(index);
		}
		[SmokeMethod("length", "() const", "")]
		public uint Length() {
			return ((QDomNodeList) interceptor).Length();
		}
		[SmokeMethod("count", "() const", "")]
		public int Count() {
			return ((QDomNodeList) interceptor).Count();
		}
		[SmokeMethod("size", "() const", "")]
		public int Size() {
			return ((QDomNodeList) interceptor).Size();
		}
		[SmokeMethod("isEmpty", "() const", "")]
		public bool IsEmpty() {
			return ((QDomNodeList) interceptor).IsEmpty();
		}
		~QDomNodeList() {
			DisposeQDomNodeList();
		}
		public void Dispose() {
			DisposeQDomNodeList();
		}
		[SmokeMethod("~QDomNodeList", "()", "")]
		private void DisposeQDomNodeList() {
			((QDomNodeList) interceptor).DisposeQDomNodeList();
		}
		public static bool operator==(QDomNodeList lhs, QDomNodeList arg1) {
			return staticInterceptor.op_equals(lhs,arg1);
		}
		public static bool operator!=(QDomNodeList lhs, QDomNodeList arg1) {
			return !staticInterceptor.op_equals(lhs,arg1);
		}
	}
}
