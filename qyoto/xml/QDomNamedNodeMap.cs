//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QDomNamedNodeMap")]
	public class QDomNamedNodeMap : MarshalByRefObject, IDisposable {
		protected QDomNamedNodeMap interceptor = null;
		private IntPtr smokeObject;
		protected QDomNamedNodeMap(Type dummy) {}
		[SmokeClass("QDomNamedNodeMap")]
		interface IQDomNamedNodeMapProxy {
			[SmokeMethod("operator==", "(const QDomNamedNodeMap&) const", "#")]
			bool op_equals(QDomNamedNodeMap lhs, QDomNamedNodeMap arg1);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDomNamedNodeMap), this);
			interceptor = (QDomNamedNodeMap) realProxy.GetTransparentProxy();
		}
		private static IQDomNamedNodeMapProxy staticInterceptor = null;
		static QDomNamedNodeMap() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDomNamedNodeMapProxy), null);
			staticInterceptor = (IQDomNamedNodeMapProxy) realProxy.GetTransparentProxy();
		}
		public QDomNamedNodeMap() : this((Type) null) {
			CreateProxy();
			NewQDomNamedNodeMap();
		}
		[SmokeMethod("QDomNamedNodeMap", "()", "")]
		private void NewQDomNamedNodeMap() {
			((QDomNamedNodeMap) interceptor).NewQDomNamedNodeMap();
		}
		public QDomNamedNodeMap(QDomNamedNodeMap arg1) : this((Type) null) {
			CreateProxy();
			NewQDomNamedNodeMap(arg1);
		}
		[SmokeMethod("QDomNamedNodeMap", "(const QDomNamedNodeMap&)", "#")]
		private void NewQDomNamedNodeMap(QDomNamedNodeMap arg1) {
			((QDomNamedNodeMap) interceptor).NewQDomNamedNodeMap(arg1);
		}
		public override bool Equals(object o) {
			if (!(o is QDomNamedNodeMap)) { return false; }
			return this == (QDomNamedNodeMap) o;
		}
		public override int GetHashCode() {
			return ((QDomNamedNodeMap) interceptor).GetHashCode();
		}
		[SmokeMethod("namedItem", "(const QString&) const", "$")]
		public QDomNode NamedItem(string name) {
			return ((QDomNamedNodeMap) interceptor).NamedItem(name);
		}
		[SmokeMethod("setNamedItem", "(const QDomNode&)", "#")]
		public QDomNode SetNamedItem(QDomNode newNode) {
			return ((QDomNamedNodeMap) interceptor).SetNamedItem(newNode);
		}
		[SmokeMethod("removeNamedItem", "(const QString&)", "$")]
		public QDomNode RemoveNamedItem(string name) {
			return ((QDomNamedNodeMap) interceptor).RemoveNamedItem(name);
		}
		[SmokeMethod("item", "(int) const", "$")]
		public QDomNode Item(int index) {
			return ((QDomNamedNodeMap) interceptor).Item(index);
		}
		[SmokeMethod("namedItemNS", "(const QString&, const QString&) const", "$$")]
		public QDomNode NamedItemNS(string nsURI, string localName) {
			return ((QDomNamedNodeMap) interceptor).NamedItemNS(nsURI,localName);
		}
		[SmokeMethod("setNamedItemNS", "(const QDomNode&)", "#")]
		public QDomNode SetNamedItemNS(QDomNode newNode) {
			return ((QDomNamedNodeMap) interceptor).SetNamedItemNS(newNode);
		}
		[SmokeMethod("removeNamedItemNS", "(const QString&, const QString&)", "$$")]
		public QDomNode RemoveNamedItemNS(string nsURI, string localName) {
			return ((QDomNamedNodeMap) interceptor).RemoveNamedItemNS(nsURI,localName);
		}
		[SmokeMethod("length", "() const", "")]
		public uint Length() {
			return ((QDomNamedNodeMap) interceptor).Length();
		}
		[SmokeMethod("count", "() const", "")]
		public int Count() {
			return ((QDomNamedNodeMap) interceptor).Count();
		}
		[SmokeMethod("size", "() const", "")]
		public int Size() {
			return ((QDomNamedNodeMap) interceptor).Size();
		}
		[SmokeMethod("isEmpty", "() const", "")]
		public bool IsEmpty() {
			return ((QDomNamedNodeMap) interceptor).IsEmpty();
		}
		[SmokeMethod("contains", "(const QString&) const", "$")]
		public bool Contains(string name) {
			return ((QDomNamedNodeMap) interceptor).Contains(name);
		}
		~QDomNamedNodeMap() {
			DisposeQDomNamedNodeMap();
		}
		public void Dispose() {
			DisposeQDomNamedNodeMap();
		}
		[SmokeMethod("~QDomNamedNodeMap", "()", "")]
		private void DisposeQDomNamedNodeMap() {
			((QDomNamedNodeMap) interceptor).DisposeQDomNamedNodeMap();
		}
		public static bool operator==(QDomNamedNodeMap lhs, QDomNamedNodeMap arg1) {
			return staticInterceptor.op_equals(lhs,arg1);
		}
		public static bool operator!=(QDomNamedNodeMap lhs, QDomNamedNodeMap arg1) {
			return !staticInterceptor.op_equals(lhs,arg1);
		}
	}
}
