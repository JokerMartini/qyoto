//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;
	using System.Collections.Generic;

	[SmokeClass("QXmlNamespaceSupport")]
	public class QXmlNamespaceSupport : MarshalByRefObject, IDisposable {
		protected QXmlNamespaceSupport interceptor = null;
		private IntPtr smokeObject;
		protected QXmlNamespaceSupport(Type dummy) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QXmlNamespaceSupport), this);
			interceptor = (QXmlNamespaceSupport) realProxy.GetTransparentProxy();
		}
		public QXmlNamespaceSupport() : this((Type) null) {
			CreateProxy();
			NewQXmlNamespaceSupport();
		}
		[SmokeMethod("QXmlNamespaceSupport", "()", "")]
		private void NewQXmlNamespaceSupport() {
			((QXmlNamespaceSupport) interceptor).NewQXmlNamespaceSupport();
		}
		[SmokeMethod("setPrefix", "(const QString&, const QString&)", "$$")]
		public void SetPrefix(string arg1, string arg2) {
			((QXmlNamespaceSupport) interceptor).SetPrefix(arg1,arg2);
		}
		[SmokeMethod("prefix", "(const QString&) const", "$")]
		public string Prefix(string arg1) {
			return ((QXmlNamespaceSupport) interceptor).Prefix(arg1);
		}
		[SmokeMethod("uri", "(const QString&) const", "$")]
		public string Uri(string arg1) {
			return ((QXmlNamespaceSupport) interceptor).Uri(arg1);
		}
		[SmokeMethod("splitName", "(const QString&, QString&, QString&) const", "$$$")]
		public void SplitName(string arg1, StringBuilder arg2, StringBuilder arg3) {
			((QXmlNamespaceSupport) interceptor).SplitName(arg1,arg2,arg3);
		}
		[SmokeMethod("processName", "(const QString&, bool, QString&, QString&) const", "$$$$")]
		public void ProcessName(string arg1, bool arg2, StringBuilder arg3, StringBuilder arg4) {
			((QXmlNamespaceSupport) interceptor).ProcessName(arg1,arg2,arg3,arg4);
		}
		[SmokeMethod("prefixes", "() const", "")]
		public List<string> Prefixes() {
			return ((QXmlNamespaceSupport) interceptor).Prefixes();
		}
		[SmokeMethod("prefixes", "(const QString&) const", "$")]
		public List<string> Prefixes(string arg1) {
			return ((QXmlNamespaceSupport) interceptor).Prefixes(arg1);
		}
		[SmokeMethod("pushContext", "()", "")]
		public void PushContext() {
			((QXmlNamespaceSupport) interceptor).PushContext();
		}
		[SmokeMethod("popContext", "()", "")]
		public void PopContext() {
			((QXmlNamespaceSupport) interceptor).PopContext();
		}
		[SmokeMethod("reset", "()", "")]
		public void Reset() {
			((QXmlNamespaceSupport) interceptor).Reset();
		}
		~QXmlNamespaceSupport() {
			DisposeQXmlNamespaceSupport();
		}
		public void Dispose() {
			DisposeQXmlNamespaceSupport();
		}
		[SmokeMethod("~QXmlNamespaceSupport", "()", "")]
		private void DisposeQXmlNamespaceSupport() {
			((QXmlNamespaceSupport) interceptor).DisposeQXmlNamespaceSupport();
		}
	}
}
