//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QDomNotation")]
	public class QDomNotation : QDomNode, IDisposable {
 		protected QDomNotation(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDomNotation), this);
			_interceptor = (QDomNotation) realProxy.GetTransparentProxy();
		}
		private QDomNotation ProxyQDomNotation() {
			return (QDomNotation) _interceptor;
		}
		public QDomNotation() : this((Type) null) {
			CreateProxy();
			NewQDomNotation();
		}
		[SmokeMethod("QDomNotation", "()", "")]
		private void NewQDomNotation() {
			ProxyQDomNotation().NewQDomNotation();
		}
		public QDomNotation(QDomNotation x) : this((Type) null) {
			CreateProxy();
			NewQDomNotation(x);
		}
		[SmokeMethod("QDomNotation", "(const QDomNotation&)", "#")]
		private void NewQDomNotation(QDomNotation x) {
			ProxyQDomNotation().NewQDomNotation(x);
		}
		[SmokeMethod("publicId", "() const", "")]
		public string PublicId() {
			return ProxyQDomNotation().PublicId();
		}
		[SmokeMethod("systemId", "() const", "")]
		public string SystemId() {
			return ProxyQDomNotation().SystemId();
		}
		[SmokeMethod("nodeType", "() const", "")]
		public QDomNode.NodeType NodeType() {
			return ProxyQDomNotation().NodeType();
		}
		~QDomNotation() {
			DisposeQDomNotation();
		}
		public void Dispose() {
			DisposeQDomNotation();
		}
		[SmokeMethod("~QDomNotation", "()", "")]
		private void DisposeQDomNotation() {
			ProxyQDomNotation().DisposeQDomNotation();
		}
	}
}
