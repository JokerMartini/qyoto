//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;

	[SmokeClass("QDomProcessingInstruction")]
	public class QDomProcessingInstruction : QDomNode, IDisposable {
 		protected QDomProcessingInstruction(Type dummy) : base((Type) null) {}
		interface IQDomProcessingInstructionProxy {
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDomProcessingInstruction), this);
			_interceptor = (QDomProcessingInstruction) realProxy.GetTransparentProxy();
		}
		private QDomProcessingInstruction ProxyQDomProcessingInstruction() {
			return (QDomProcessingInstruction) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QDomProcessingInstruction() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDomProcessingInstructionProxy), null);
			_staticInterceptor = (IQDomProcessingInstructionProxy) realProxy.GetTransparentProxy();
		}
		private static IQDomProcessingInstructionProxy StaticQDomProcessingInstruction() {
			return (IQDomProcessingInstructionProxy) _staticInterceptor;
		}

		public QDomProcessingInstruction() : this((Type) null) {
			CreateProxy();
			NewQDomProcessingInstruction();
		}
		[SmokeMethod("QDomProcessingInstruction", "()", "")]
		private void NewQDomProcessingInstruction() {
			ProxyQDomProcessingInstruction().NewQDomProcessingInstruction();
		}
		public QDomProcessingInstruction(QDomProcessingInstruction x) : this((Type) null) {
			CreateProxy();
			NewQDomProcessingInstruction(x);
		}
		[SmokeMethod("QDomProcessingInstruction", "(const QDomProcessingInstruction&)", "#")]
		private void NewQDomProcessingInstruction(QDomProcessingInstruction x) {
			ProxyQDomProcessingInstruction().NewQDomProcessingInstruction(x);
		}
		[SmokeMethod("target", "() const", "")]
		public string Target() {
			return ProxyQDomProcessingInstruction().Target();
		}
		[SmokeMethod("data", "() const", "")]
		public string Data() {
			return ProxyQDomProcessingInstruction().Data();
		}
		[SmokeMethod("setData", "(const QString&)", "$")]
		public void SetData(string d) {
			ProxyQDomProcessingInstruction().SetData(d);
		}
		[SmokeMethod("nodeType", "() const", "")]
		public new QDomNode.NodeType NodeType() {
			return ProxyQDomProcessingInstruction().NodeType();
		}
		~QDomProcessingInstruction() {
			DisposeQDomProcessingInstruction();
		}
		public void Dispose() {
			DisposeQDomProcessingInstruction();
		}
		[SmokeMethod("~QDomProcessingInstruction", "()", "")]
		private void DisposeQDomProcessingInstruction() {
			ProxyQDomProcessingInstruction().DisposeQDomProcessingInstruction();
		}
	}
}
