//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QXmlDefaultHandler")]
	public class QXmlDefaultHandler : QXmlLexicalHandler, IQXmlContentHandler, IQXmlDTDHandler, IQXmlDeclHandler, IQXmlEntityResolver, IQXmlErrorHandler, IDisposable {
 		protected QXmlDefaultHandler(Type dummy) : base((Type) null) {}
		[SmokeClass("QXmlDefaultHandler")]
		interface IQXmlDefaultHandlerProxy {
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QXmlDefaultHandler), this);
			_interceptor = (QXmlDefaultHandler) realProxy.GetTransparentProxy();
		}
		private QXmlDefaultHandler ProxyQXmlDefaultHandler() {
			return (QXmlDefaultHandler) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QXmlDefaultHandler() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQXmlDefaultHandlerProxy), null);
			_staticInterceptor = (IQXmlDefaultHandlerProxy) realProxy.GetTransparentProxy();
		}
		private static IQXmlDefaultHandlerProxy StaticQXmlDefaultHandler() {
			return (IQXmlDefaultHandlerProxy) _staticInterceptor;
		}
		public QXmlDefaultHandler() : this((Type) null) {
			CreateProxy();
			NewQXmlDefaultHandler();
		}
		[SmokeMethod("QXmlDefaultHandler", "()", "")]
		private void NewQXmlDefaultHandler() {
			ProxyQXmlDefaultHandler().NewQXmlDefaultHandler();
		}
		[SmokeMethod("setDocumentLocator", "(QXmlLocator*)", "#")]
		public virtual void SetDocumentLocator(QXmlLocator locator) {
			ProxyQXmlDefaultHandler().SetDocumentLocator(locator);
		}
		[SmokeMethod("startDocument", "()", "")]
		public virtual bool StartDocument() {
			return ProxyQXmlDefaultHandler().StartDocument();
		}
		[SmokeMethod("endDocument", "()", "")]
		public virtual bool EndDocument() {
			return ProxyQXmlDefaultHandler().EndDocument();
		}
		[SmokeMethod("startPrefixMapping", "(const QString&, const QString&)", "$$")]
		public virtual bool StartPrefixMapping(string prefix, string uri) {
			return ProxyQXmlDefaultHandler().StartPrefixMapping(prefix,uri);
		}
		[SmokeMethod("endPrefixMapping", "(const QString&)", "$")]
		public virtual bool EndPrefixMapping(string prefix) {
			return ProxyQXmlDefaultHandler().EndPrefixMapping(prefix);
		}
		[SmokeMethod("startElement", "(const QString&, const QString&, const QString&, const QXmlAttributes&)", "$$$#")]
		public virtual bool StartElement(string namespaceURI, string localName, string qName, QXmlAttributes atts) {
			return ProxyQXmlDefaultHandler().StartElement(namespaceURI,localName,qName,atts);
		}
		[SmokeMethod("endElement", "(const QString&, const QString&, const QString&)", "$$$")]
		public virtual bool EndElement(string namespaceURI, string localName, string qName) {
			return ProxyQXmlDefaultHandler().EndElement(namespaceURI,localName,qName);
		}
		[SmokeMethod("characters", "(const QString&)", "$")]
		public virtual bool Characters(string ch) {
			return ProxyQXmlDefaultHandler().Characters(ch);
		}
		[SmokeMethod("ignorableWhitespace", "(const QString&)", "$")]
		public virtual bool IgnorableWhitespace(string ch) {
			return ProxyQXmlDefaultHandler().IgnorableWhitespace(ch);
		}
		[SmokeMethod("processingInstruction", "(const QString&, const QString&)", "$$")]
		public virtual bool ProcessingInstruction(string target, string data) {
			return ProxyQXmlDefaultHandler().ProcessingInstruction(target,data);
		}
		[SmokeMethod("skippedEntity", "(const QString&)", "$")]
		public virtual bool SkippedEntity(string name) {
			return ProxyQXmlDefaultHandler().SkippedEntity(name);
		}
		[SmokeMethod("warning", "(const QXmlParseException&)", "#")]
		public virtual bool Warning(QXmlParseException exception) {
			return ProxyQXmlDefaultHandler().Warning(exception);
		}
		[SmokeMethod("error", "(const QXmlParseException&)", "#")]
		public virtual bool Error(QXmlParseException exception) {
			return ProxyQXmlDefaultHandler().Error(exception);
		}
		[SmokeMethod("fatalError", "(const QXmlParseException&)", "#")]
		public virtual bool FatalError(QXmlParseException exception) {
			return ProxyQXmlDefaultHandler().FatalError(exception);
		}
		[SmokeMethod("notationDecl", "(const QString&, const QString&, const QString&)", "$$$")]
		public virtual bool NotationDecl(string name, string publicId, string systemId) {
			return ProxyQXmlDefaultHandler().NotationDecl(name,publicId,systemId);
		}
		[SmokeMethod("unparsedEntityDecl", "(const QString&, const QString&, const QString&, const QString&)", "$$$$")]
		public virtual bool UnparsedEntityDecl(string name, string publicId, string systemId, string notationName) {
			return ProxyQXmlDefaultHandler().UnparsedEntityDecl(name,publicId,systemId,notationName);
		}
		[SmokeMethod("resolveEntity", "(const QString&, const QString&, QXmlInputSource*&)", "$$?")]
		public virtual bool ResolveEntity(string publicId, string systemId, QXmlInputSource ret) {
			return ProxyQXmlDefaultHandler().ResolveEntity(publicId,systemId,ret);
		}
		[SmokeMethod("startDTD", "(const QString&, const QString&, const QString&)", "$$$")]
		public override bool StartDTD(string name, string publicId, string systemId) {
			return ProxyQXmlDefaultHandler().StartDTD(name,publicId,systemId);
		}
		[SmokeMethod("endDTD", "()", "")]
		public override bool EndDTD() {
			return ProxyQXmlDefaultHandler().EndDTD();
		}
		[SmokeMethod("startEntity", "(const QString&)", "$")]
		public override bool StartEntity(string name) {
			return ProxyQXmlDefaultHandler().StartEntity(name);
		}
		[SmokeMethod("endEntity", "(const QString&)", "$")]
		public override bool EndEntity(string name) {
			return ProxyQXmlDefaultHandler().EndEntity(name);
		}
		[SmokeMethod("startCDATA", "()", "")]
		public override bool StartCDATA() {
			return ProxyQXmlDefaultHandler().StartCDATA();
		}
		[SmokeMethod("endCDATA", "()", "")]
		public override bool EndCDATA() {
			return ProxyQXmlDefaultHandler().EndCDATA();
		}
		[SmokeMethod("comment", "(const QString&)", "$")]
		public override bool Comment(string ch) {
			return ProxyQXmlDefaultHandler().Comment(ch);
		}
		[SmokeMethod("attributeDecl", "(const QString&, const QString&, const QString&, const QString&, const QString&)", "$$$$$")]
		public virtual bool AttributeDecl(string eName, string aName, string type, string valueDefault, string value) {
			return ProxyQXmlDefaultHandler().AttributeDecl(eName,aName,type,valueDefault,value);
		}
		[SmokeMethod("internalEntityDecl", "(const QString&, const QString&)", "$$")]
		public virtual bool InternalEntityDecl(string name, string value) {
			return ProxyQXmlDefaultHandler().InternalEntityDecl(name,value);
		}
		[SmokeMethod("externalEntityDecl", "(const QString&, const QString&, const QString&)", "$$$")]
		public virtual bool ExternalEntityDecl(string name, string publicId, string systemId) {
			return ProxyQXmlDefaultHandler().ExternalEntityDecl(name,publicId,systemId);
		}
		[SmokeMethod("errorString", "() const", "")]
		public override string ErrorString() {
			return ProxyQXmlDefaultHandler().ErrorString();
		}
		~QXmlDefaultHandler() {
			DisposeQXmlDefaultHandler();
		}
		public new void Dispose() {
			DisposeQXmlDefaultHandler();
		}
		[SmokeMethod("~QXmlDefaultHandler", "()", "")]
		private void DisposeQXmlDefaultHandler() {
			ProxyQXmlDefaultHandler().DisposeQXmlDefaultHandler();
		}
	}
}
