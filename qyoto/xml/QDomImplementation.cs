//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QDomImplementation")]
	public class QDomImplementation : MarshalByRefObject, IDisposable {
		protected QDomImplementation interceptor = null;
		private IntPtr smokeObject;
		protected QDomImplementation(Type dummy) {}
		[SmokeClass("QDomImplementation")]
		interface IQDomImplementationProxy {
			[SmokeMethod("operator==", "(const QDomImplementation&) const", "#")]
			bool op_equals(QDomImplementation lhs, QDomImplementation arg1);
			[SmokeMethod("invalidDataPolicy", "()", "")]
			QDomImplementation.InvalidDataPolicy invalidDataPolicy();
			[SmokeMethod("setInvalidDataPolicy", "(QDomImplementation::InvalidDataPolicy)", "$")]
			void SetInvalidDataPolicy(QDomImplementation.InvalidDataPolicy policy);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDomImplementation), this);
			interceptor = (QDomImplementation) realProxy.GetTransparentProxy();
		}
		private static IQDomImplementationProxy staticInterceptor = null;
		static QDomImplementation() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDomImplementationProxy), null);
			staticInterceptor = (IQDomImplementationProxy) realProxy.GetTransparentProxy();
		}
		public enum InvalidDataPolicy {
			AcceptInvalidChars = 0,
			DropInvalidChars = 1,
			ReturnNullNode = 2,
		}
		public QDomImplementation() : this((Type) null) {
			CreateProxy();
			NewQDomImplementation();
		}
		[SmokeMethod("QDomImplementation", "()", "")]
		private void NewQDomImplementation() {
			((QDomImplementation) interceptor).NewQDomImplementation();
		}
		public QDomImplementation(QDomImplementation arg1) : this((Type) null) {
			CreateProxy();
			NewQDomImplementation(arg1);
		}
		[SmokeMethod("QDomImplementation", "(const QDomImplementation&)", "#")]
		private void NewQDomImplementation(QDomImplementation arg1) {
			((QDomImplementation) interceptor).NewQDomImplementation(arg1);
		}
		public override bool Equals(object o) {
			if (!(o is QDomImplementation)) { return false; }
			return this == (QDomImplementation) o;
		}
		public override int GetHashCode() {
			return ((QDomImplementation) interceptor).GetHashCode();
		}
		[SmokeMethod("hasFeature", "(const QString&, const QString&) const", "$$")]
		public bool HasFeature(string feature, string version) {
			return ((QDomImplementation) interceptor).HasFeature(feature,version);
		}
		[SmokeMethod("createDocumentType", "(const QString&, const QString&, const QString&)", "$$$")]
		public QDomDocumentType CreateDocumentType(string qName, string publicId, string systemId) {
			return ((QDomImplementation) interceptor).CreateDocumentType(qName,publicId,systemId);
		}
		[SmokeMethod("createDocument", "(const QString&, const QString&, const QDomDocumentType&)", "$$#")]
		public QDomDocument CreateDocument(string nsURI, string qName, QDomDocumentType doctype) {
			return ((QDomImplementation) interceptor).CreateDocument(nsURI,qName,doctype);
		}
		[SmokeMethod("isNull", "()", "")]
		public bool IsNull() {
			return ((QDomImplementation) interceptor).IsNull();
		}
		~QDomImplementation() {
			DisposeQDomImplementation();
		}
		public void Dispose() {
			DisposeQDomImplementation();
		}
		[SmokeMethod("~QDomImplementation", "()", "")]
		private void DisposeQDomImplementation() {
			((QDomImplementation) interceptor).DisposeQDomImplementation();
		}
		public static bool operator==(QDomImplementation lhs, QDomImplementation arg1) {
			return staticInterceptor.op_equals(lhs,arg1);
		}
		public static bool operator!=(QDomImplementation lhs, QDomImplementation arg1) {
			return !staticInterceptor.op_equals(lhs,arg1);
		}
		public static QDomImplementation.InvalidDataPolicy invalidDataPolicy() {
			return staticInterceptor.invalidDataPolicy();
		}
		public static void SetInvalidDataPolicy(QDomImplementation.InvalidDataPolicy policy) {
			staticInterceptor.SetInvalidDataPolicy(policy);
		}
	}
}
