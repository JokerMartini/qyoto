//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	public interface IQXmlErrorHandler {
		bool Warning(QXmlParseException exception);
		bool Error(QXmlParseException exception);
		bool FatalError(QXmlParseException exception);
		string ErrorString();
	}

	[SmokeClass("QXmlErrorHandler")]
	public abstract class QXmlErrorHandler : MarshalByRefObject, IQXmlErrorHandler {
		protected QXmlErrorHandler interceptor = null;
		private IntPtr smokeObject;
		protected QXmlErrorHandler(Type dummy) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QXmlErrorHandler), this);
			interceptor = (QXmlErrorHandler) realProxy.GetTransparentProxy();
		}
		[SmokeMethod("warning", "(const QXmlParseException&)", "#")]
		public abstract bool Warning(QXmlParseException exception);
		[SmokeMethod("error", "(const QXmlParseException&)", "#")]
		public abstract bool Error(QXmlParseException exception);
		[SmokeMethod("fatalError", "(const QXmlParseException&)", "#")]
		public abstract bool FatalError(QXmlParseException exception);
		[SmokeMethod("errorString", "() const", "")]
		public abstract string ErrorString();
		public QXmlErrorHandler() : this((Type) null) {
			CreateProxy();
			NewQXmlErrorHandler();
		}
		[SmokeMethod("QXmlErrorHandler", "()", "")]
		private void NewQXmlErrorHandler() {
			((QXmlErrorHandler) interceptor).NewQXmlErrorHandler();
		}
	}
}
