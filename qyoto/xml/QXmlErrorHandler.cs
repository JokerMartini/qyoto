//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	public interface IQXmlErrorHandler {
			bool Warning(QXmlParseException exception);
			bool Error(QXmlParseException exception);
			bool FatalError(QXmlParseException exception);
			string ErrorString();
	}

	[SmokeClass("QXmlErrorHandler")]
	public abstract class QXmlErrorHandler : MarshalByRefObject, IQXmlErrorHandler {
		protected Object _interceptor = null;
		private IntPtr _smokeObject;
		protected QXmlErrorHandler(Type dummy) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QXmlErrorHandler), this);
			_interceptor = (QXmlErrorHandler) realProxy.GetTransparentProxy();
		}
		private QXmlErrorHandler ProxyQXmlErrorHandler() {
			return (QXmlErrorHandler) _interceptor;
		}
		public abstract bool Warning(QXmlParseException exception);
		public abstract bool Error(QXmlParseException exception);
		public abstract bool FatalError(QXmlParseException exception);
		public abstract string ErrorString();
		public QXmlErrorHandler() : this((Type) null) {
			CreateProxy();
			NewQXmlErrorHandler();
		}
		[SmokeMethod("QXmlErrorHandler", "()", "")]
		private void NewQXmlErrorHandler() {
			ProxyQXmlErrorHandler().NewQXmlErrorHandler();
		}
	}
}
