//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QDomAttr")]
	public class QDomAttr : QDomNode, IDisposable {
 		protected QDomAttr(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDomAttr), this);
			interceptor = (QDomAttr) realProxy.GetTransparentProxy();
		}
		public QDomAttr() : this((Type) null) {
			CreateProxy();
			NewQDomAttr();
		}
		[SmokeMethod("QDomAttr", "()", "")]
		private void NewQDomAttr() {
			((QDomAttr) interceptor).NewQDomAttr();
		}
		public QDomAttr(QDomAttr x) : this((Type) null) {
			CreateProxy();
			NewQDomAttr(x);
		}
		[SmokeMethod("QDomAttr", "(const QDomAttr&)", "#")]
		private void NewQDomAttr(QDomAttr x) {
			((QDomAttr) interceptor).NewQDomAttr(x);
		}
		[SmokeMethod("name", "() const", "")]
		public string Name() {
			return ((QDomAttr) interceptor).Name();
		}
		[SmokeMethod("specified", "() const", "")]
		public bool Specified() {
			return ((QDomAttr) interceptor).Specified();
		}
		[SmokeMethod("ownerElement", "() const", "")]
		public QDomElement OwnerElement() {
			return ((QDomAttr) interceptor).OwnerElement();
		}
		[SmokeMethod("value", "() const", "")]
		public string Value() {
			return ((QDomAttr) interceptor).Value();
		}
		[SmokeMethod("setValue", "(const QString&)", "$")]
		public void SetValue(string arg1) {
			((QDomAttr) interceptor).SetValue(arg1);
		}
		[SmokeMethod("nodeType", "() const", "")]
		public QDomNode.NodeType NodeType() {
			return ((QDomAttr) interceptor).NodeType();
		}
		~QDomAttr() {
			DisposeQDomAttr();
		}
		public void Dispose() {
			DisposeQDomAttr();
		}
		[SmokeMethod("~QDomAttr", "()", "")]
		private void DisposeQDomAttr() {
			((QDomAttr) interceptor).DisposeQDomAttr();
		}
	}
}
