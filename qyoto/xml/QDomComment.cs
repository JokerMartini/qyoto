//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QDomComment")]
	public class QDomComment : QDomCharacterData, IDisposable {
 		protected QDomComment(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDomComment), this);
			interceptor = (QDomComment) realProxy.GetTransparentProxy();
		}
		public QDomComment() : this((Type) null) {
			CreateProxy();
			NewQDomComment();
		}
		[SmokeMethod("QDomComment", "()", "")]
		private void NewQDomComment() {
			((QDomComment) interceptor).NewQDomComment();
		}
		public QDomComment(QDomComment x) : this((Type) null) {
			CreateProxy();
			NewQDomComment(x);
		}
		[SmokeMethod("QDomComment", "(const QDomComment&)", "#")]
		private void NewQDomComment(QDomComment x) {
			((QDomComment) interceptor).NewQDomComment(x);
		}
		[SmokeMethod("nodeType", "() const", "")]
		public QDomNode.NodeType NodeType() {
			return ((QDomComment) interceptor).NodeType();
		}
		~QDomComment() {
			DisposeQDomComment();
		}
		public void Dispose() {
			DisposeQDomComment();
		}
		[SmokeMethod("~QDomComment", "()", "")]
		private void DisposeQDomComment() {
			((QDomComment) interceptor).DisposeQDomComment();
		}
	}
}
