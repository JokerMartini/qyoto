//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QDomDocumentFragment")]
	public class QDomDocumentFragment : QDomNode, IDisposable {
 		protected QDomDocumentFragment(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDomDocumentFragment), this);
			interceptor = (QDomDocumentFragment) realProxy.GetTransparentProxy();
		}
		public QDomDocumentFragment() : this((Type) null) {
			CreateProxy();
			NewQDomDocumentFragment();
		}
		[SmokeMethod("QDomDocumentFragment", "()", "")]
		private void NewQDomDocumentFragment() {
			((QDomDocumentFragment) interceptor).NewQDomDocumentFragment();
		}
		public QDomDocumentFragment(QDomDocumentFragment x) : this((Type) null) {
			CreateProxy();
			NewQDomDocumentFragment(x);
		}
		[SmokeMethod("QDomDocumentFragment", "(const QDomDocumentFragment&)", "#")]
		private void NewQDomDocumentFragment(QDomDocumentFragment x) {
			((QDomDocumentFragment) interceptor).NewQDomDocumentFragment(x);
		}
		[SmokeMethod("nodeType", "() const", "")]
		public QDomNode.NodeType NodeType() {
			return ((QDomDocumentFragment) interceptor).NodeType();
		}
		~QDomDocumentFragment() {
			DisposeQDomDocumentFragment();
		}
		public void Dispose() {
			DisposeQDomDocumentFragment();
		}
		[SmokeMethod("~QDomDocumentFragment", "()", "")]
		private void DisposeQDomDocumentFragment() {
			((QDomDocumentFragment) interceptor).DisposeQDomDocumentFragment();
		}
	}
}
