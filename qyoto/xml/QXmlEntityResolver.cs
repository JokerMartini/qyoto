//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	public interface IQXmlEntityResolver {
			bool ResolveEntity(string publicId, string systemId, QXmlInputSource ret);
			string ErrorString();
	}

	[SmokeClass("QXmlEntityResolver")]
	public abstract class QXmlEntityResolver : MarshalByRefObject, IQXmlEntityResolver {
		protected Object _interceptor = null;
		private IntPtr _smokeObject;
		protected QXmlEntityResolver(Type dummy) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QXmlEntityResolver), this);
			_interceptor = (QXmlEntityResolver) realProxy.GetTransparentProxy();
		}
		private QXmlEntityResolver ProxyQXmlEntityResolver() {
			return (QXmlEntityResolver) _interceptor;
		}
		[SmokeMethod("resolveEntity", "(const QString&, const QString&, QXmlInputSource*&)", "$$?")]
		public abstract bool ResolveEntity(string publicId, string systemId, QXmlInputSource ret);
		[SmokeMethod("errorString", "() const", "")]
		public abstract string ErrorString();
		public QXmlEntityResolver() : this((Type) null) {
			CreateProxy();
			NewQXmlEntityResolver();
		}
		[SmokeMethod("QXmlEntityResolver", "()", "")]
		private void NewQXmlEntityResolver() {
			ProxyQXmlEntityResolver().NewQXmlEntityResolver();
		}
	}
}
