//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QDomEntityReference")]
	public class QDomEntityReference : QDomNode, IDisposable {
 		protected QDomEntityReference(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDomEntityReference), this);
			interceptor = (QDomEntityReference) realProxy.GetTransparentProxy();
		}
		public QDomEntityReference() : this((Type) null) {
			CreateProxy();
			NewQDomEntityReference();
		}
		[SmokeMethod("QDomEntityReference", "()", "")]
		private void NewQDomEntityReference() {
			((QDomEntityReference) interceptor).NewQDomEntityReference();
		}
		public QDomEntityReference(QDomEntityReference x) : this((Type) null) {
			CreateProxy();
			NewQDomEntityReference(x);
		}
		[SmokeMethod("QDomEntityReference", "(const QDomEntityReference&)", "#")]
		private void NewQDomEntityReference(QDomEntityReference x) {
			((QDomEntityReference) interceptor).NewQDomEntityReference(x);
		}
		[SmokeMethod("nodeType", "() const", "")]
		public QDomNode.NodeType NodeType() {
			return ((QDomEntityReference) interceptor).NodeType();
		}
		~QDomEntityReference() {
			DisposeQDomEntityReference();
		}
		public void Dispose() {
			DisposeQDomEntityReference();
		}
		[SmokeMethod("~QDomEntityReference", "()", "")]
		private void DisposeQDomEntityReference() {
			((QDomEntityReference) interceptor).DisposeQDomEntityReference();
		}
	}
}
