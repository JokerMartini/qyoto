//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	public interface IQXmlDTDHandler {
			bool NotationDecl(string name, string publicId, string systemId);
			bool UnparsedEntityDecl(string name, string publicId, string systemId, string notationName);
			string ErrorString();
	}

	[SmokeClass("QXmlDTDHandler")]
	public abstract class QXmlDTDHandler : MarshalByRefObject, IQXmlDTDHandler {
		protected Object _interceptor = null;
		private IntPtr _smokeObject;
		protected QXmlDTDHandler(Type dummy) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QXmlDTDHandler), this);
			_interceptor = (QXmlDTDHandler) realProxy.GetTransparentProxy();
		}
		private QXmlDTDHandler ProxyQXmlDTDHandler() {
			return (QXmlDTDHandler) _interceptor;
		}
		[SmokeMethod("notationDecl", "(const QString&, const QString&, const QString&)", "$$$")]
		public abstract bool NotationDecl(string name, string publicId, string systemId);
		[SmokeMethod("unparsedEntityDecl", "(const QString&, const QString&, const QString&, const QString&)", "$$$$")]
		public abstract bool UnparsedEntityDecl(string name, string publicId, string systemId, string notationName);
		[SmokeMethod("errorString", "() const", "")]
		public abstract string ErrorString();
		public QXmlDTDHandler() : this((Type) null) {
			CreateProxy();
			NewQXmlDTDHandler();
		}
		[SmokeMethod("QXmlDTDHandler", "()", "")]
		private void NewQXmlDTDHandler() {
			ProxyQXmlDTDHandler().NewQXmlDTDHandler();
		}
	}
}
