//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QDomEntity")]
	public class QDomEntity : QDomNode, IDisposable {
 		protected QDomEntity(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDomEntity), this);
			interceptor = (QDomEntity) realProxy.GetTransparentProxy();
		}
		public QDomEntity() : this((Type) null) {
			CreateProxy();
			NewQDomEntity();
		}
		[SmokeMethod("QDomEntity", "()", "")]
		private void NewQDomEntity() {
			((QDomEntity) interceptor).NewQDomEntity();
		}
		public QDomEntity(QDomEntity x) : this((Type) null) {
			CreateProxy();
			NewQDomEntity(x);
		}
		[SmokeMethod("QDomEntity", "(const QDomEntity&)", "#")]
		private void NewQDomEntity(QDomEntity x) {
			((QDomEntity) interceptor).NewQDomEntity(x);
		}
		[SmokeMethod("publicId", "() const", "")]
		public string PublicId() {
			return ((QDomEntity) interceptor).PublicId();
		}
		[SmokeMethod("systemId", "() const", "")]
		public string SystemId() {
			return ((QDomEntity) interceptor).SystemId();
		}
		[SmokeMethod("notationName", "() const", "")]
		public string NotationName() {
			return ((QDomEntity) interceptor).NotationName();
		}
		[SmokeMethod("nodeType", "() const", "")]
		public QDomNode.NodeType NodeType() {
			return ((QDomEntity) interceptor).NodeType();
		}
		~QDomEntity() {
			DisposeQDomEntity();
		}
		public void Dispose() {
			DisposeQDomEntity();
		}
		[SmokeMethod("~QDomEntity", "()", "")]
		private void DisposeQDomEntity() {
			((QDomEntity) interceptor).DisposeQDomEntity();
		}
	}
}
