//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QXmlInputSource")]
	public class QXmlInputSource : MarshalByRefObject, IDisposable {
		protected QXmlInputSource interceptor = null;
		private IntPtr smokeObject;
		protected QXmlInputSource(Type dummy) {}
		[SmokeClass("QXmlInputSource")]
		interface IQXmlInputSourceProxy {
			[SmokeMethod("EndOfData", "()", "")]
			ushort EndOfData();
			[SmokeMethod("EndOfDocument", "()", "")]
			ushort EndOfDocument();
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QXmlInputSource), this);
			interceptor = (QXmlInputSource) realProxy.GetTransparentProxy();
		}
		private static IQXmlInputSourceProxy staticInterceptor = null;
		static QXmlInputSource() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQXmlInputSourceProxy), null);
			staticInterceptor = (IQXmlInputSourceProxy) realProxy.GetTransparentProxy();
		}
		public static ushort EndOfData() {
			return staticInterceptor.EndOfData();
		}
		public static ushort EndOfDocument() {
			return staticInterceptor.EndOfDocument();
		}
		public QXmlInputSource() : this((Type) null) {
			CreateProxy();
			NewQXmlInputSource();
		}
		[SmokeMethod("QXmlInputSource", "()", "")]
		private void NewQXmlInputSource() {
			((QXmlInputSource) interceptor).NewQXmlInputSource();
		}
		public QXmlInputSource(QIODevice dev) : this((Type) null) {
			CreateProxy();
			NewQXmlInputSource(dev);
		}
		[SmokeMethod("QXmlInputSource", "(QIODevice*)", "#")]
		private void NewQXmlInputSource(QIODevice dev) {
			((QXmlInputSource) interceptor).NewQXmlInputSource(dev);
		}
		[SmokeMethod("setData", "(const QString&)", "$")]
		public virtual void SetData(string dat) {
			((QXmlInputSource) interceptor).SetData(dat);
		}
		[SmokeMethod("setData", "(const QByteArray&)", "#")]
		public virtual void SetData(QByteArray dat) {
			((QXmlInputSource) interceptor).SetData(dat);
		}
		[SmokeMethod("fetchData", "()", "")]
		public virtual void FetchData() {
			((QXmlInputSource) interceptor).FetchData();
		}
		[SmokeMethod("data", "() const", "")]
		public virtual string Data() {
			return ((QXmlInputSource) interceptor).Data();
		}
		[SmokeMethod("next", "()", "")]
		public virtual char Next() {
			return ((QXmlInputSource) interceptor).Next();
		}
		[SmokeMethod("reset", "()", "")]
		public virtual void Reset() {
			((QXmlInputSource) interceptor).Reset();
		}
		[SmokeMethod("fromRawData", "(const QByteArray&, bool)", "#$")]
		protected virtual string FromRawData(QByteArray data, bool beginning) {
			return ((QXmlInputSource) interceptor).FromRawData(data,beginning);
		}
		[SmokeMethod("fromRawData", "(const QByteArray&)", "#")]
		protected virtual string FromRawData(QByteArray data) {
			return ((QXmlInputSource) interceptor).FromRawData(data);
		}
		~QXmlInputSource() {
			DisposeQXmlInputSource();
		}
		public void Dispose() {
			DisposeQXmlInputSource();
		}
		[SmokeMethod("~QXmlInputSource", "()", "")]
		private void DisposeQXmlInputSource() {
			((QXmlInputSource) interceptor).DisposeQXmlInputSource();
		}
	}
}
