//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QDomText")]
	public class QDomText : QDomCharacterData, IDisposable {
 		protected QDomText(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDomText), this);
			interceptor = (QDomText) realProxy.GetTransparentProxy();
		}
		public QDomText() : this((Type) null) {
			CreateProxy();
			NewQDomText();
		}
		[SmokeMethod("QDomText", "()", "")]
		private void NewQDomText() {
			((QDomText) interceptor).NewQDomText();
		}
		public QDomText(QDomText x) : this((Type) null) {
			CreateProxy();
			NewQDomText(x);
		}
		[SmokeMethod("QDomText", "(const QDomText&)", "#")]
		private void NewQDomText(QDomText x) {
			((QDomText) interceptor).NewQDomText(x);
		}
		[SmokeMethod("splitText", "(int)", "$")]
		public QDomText SplitText(int offset) {
			return ((QDomText) interceptor).SplitText(offset);
		}
		[SmokeMethod("nodeType", "() const", "")]
		public QDomNode.NodeType NodeType() {
			return ((QDomText) interceptor).NodeType();
		}
		~QDomText() {
			DisposeQDomText();
		}
		public void Dispose() {
			DisposeQDomText();
		}
		[SmokeMethod("~QDomText", "()", "")]
		private void DisposeQDomText() {
			((QDomText) interceptor).DisposeQDomText();
		}
	}
}
