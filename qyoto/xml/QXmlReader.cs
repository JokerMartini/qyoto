//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;

	[SmokeClass("QXmlReader")]
	public class QXmlReader : MarshalByRefObject {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
		protected QXmlReader(Type dummy) {}
		interface IQXmlReaderProxy {
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QXmlReader), this);
			_interceptor = (QXmlReader) realProxy.GetTransparentProxy();
		}
		private QXmlReader ProxyQXmlReader() {
			return (QXmlReader) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QXmlReader() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQXmlReaderProxy), null);
			_staticInterceptor = (IQXmlReaderProxy) realProxy.GetTransparentProxy();
		}
		private static IQXmlReaderProxy StaticQXmlReader() {
			return (IQXmlReaderProxy) _staticInterceptor;
		}

		[SmokeMethod("feature$$", "(const QString&, bool*) const")]
		public virtual bool Feature(string name, out bool ok) {
			return ProxyQXmlReader().Feature(name,out ok);
		}
		[SmokeMethod("feature$", "(const QString&) const")]
		public virtual bool Feature(string name) {
			return ProxyQXmlReader().Feature(name);
		}
		[SmokeMethod("setFeature$$", "(const QString&, bool)")]
		public virtual void SetFeature(string name, bool value) {
			ProxyQXmlReader().SetFeature(name,value);
		}
		[SmokeMethod("hasFeature$", "(const QString&) const")]
		public virtual bool HasFeature(string name) {
			return ProxyQXmlReader().HasFeature(name);
		}
		// void* property(const QString& arg1,bool* arg2); >>>> NOT CONVERTED
		// void* property(const QString& arg1); >>>> NOT CONVERTED
		// void setProperty(const QString& arg1,void* arg2); >>>> NOT CONVERTED
		[SmokeMethod("hasProperty$", "(const QString&) const")]
		public virtual bool HasProperty(string name) {
			return ProxyQXmlReader().HasProperty(name);
		}
		[SmokeMethod("setEntityResolver#", "(QXmlEntityResolver*)")]
		public virtual void SetEntityResolver(IQXmlEntityResolver handler) {
			ProxyQXmlReader().SetEntityResolver(handler);
		}
		[SmokeMethod("entityResolver", "() const")]
		public virtual IQXmlEntityResolver EntityResolver() {
			return ProxyQXmlReader().EntityResolver();
		}
		[SmokeMethod("setDTDHandler#", "(QXmlDTDHandler*)")]
		public virtual void SetDTDHandler(IQXmlDTDHandler handler) {
			ProxyQXmlReader().SetDTDHandler(handler);
		}
		[SmokeMethod("DTDHandler", "() const")]
		public virtual IQXmlDTDHandler DTDHandler() {
			return ProxyQXmlReader().DTDHandler();
		}
		[SmokeMethod("setContentHandler#", "(QXmlContentHandler*)")]
		public virtual void SetContentHandler(IQXmlContentHandler handler) {
			ProxyQXmlReader().SetContentHandler(handler);
		}
		[SmokeMethod("contentHandler", "() const")]
		public virtual IQXmlContentHandler ContentHandler() {
			return ProxyQXmlReader().ContentHandler();
		}
		[SmokeMethod("setErrorHandler#", "(QXmlErrorHandler*)")]
		public virtual void SetErrorHandler(IQXmlErrorHandler handler) {
			ProxyQXmlReader().SetErrorHandler(handler);
		}
		[SmokeMethod("errorHandler", "() const")]
		public virtual IQXmlErrorHandler ErrorHandler() {
			return ProxyQXmlReader().ErrorHandler();
		}
		[SmokeMethod("setLexicalHandler#", "(QXmlLexicalHandler*)")]
		public virtual void SetLexicalHandler(IQXmlLexicalHandler handler) {
			ProxyQXmlReader().SetLexicalHandler(handler);
		}
		[SmokeMethod("lexicalHandler", "() const")]
		public virtual IQXmlLexicalHandler LexicalHandler() {
			return ProxyQXmlReader().LexicalHandler();
		}
		[SmokeMethod("setDeclHandler#", "(QXmlDeclHandler*)")]
		public virtual void SetDeclHandler(IQXmlDeclHandler handler) {
			ProxyQXmlReader().SetDeclHandler(handler);
		}
		[SmokeMethod("declHandler", "() const")]
		public virtual IQXmlDeclHandler DeclHandler() {
			return ProxyQXmlReader().DeclHandler();
		}
		[SmokeMethod("parse#", "(const QXmlInputSource&)")]
		public virtual bool Parse(QXmlInputSource input) {
			return ProxyQXmlReader().Parse(input);
		}
		public QXmlReader() : this((Type) null) {
			CreateProxy();
			NewQXmlReader();
		}
		[SmokeMethod("QXmlReader", "()")]
		private void NewQXmlReader() {
			ProxyQXmlReader().NewQXmlReader();
		}
		~QXmlReader() {
			DisposeQXmlReader();
		}
		public void Dispose() {
			DisposeQXmlReader();
		}
		[SmokeMethod("~QXmlReader", "()")]
		private void DisposeQXmlReader() {
			ProxyQXmlReader().DisposeQXmlReader();
		}
	}
}
