//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QXmlReader")]
	public abstract class QXmlReader : Object {
		protected SmokeInvocation interceptor = null;
		private IntPtr smokeObject;
		protected QXmlReader(Type dummy) {}
		protected void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(QXmlReader), this);
		}
		// void* property(const QString& arg1,bool* arg2); >>>> NOT CONVERTED
		// void* property(const QString& arg1); >>>> NOT CONVERTED
		// void setProperty(const QString& arg1,void* arg2); >>>> NOT CONVERTED
		[SmokeMethod("feature(const QString&, bool*) const")]
		public abstract bool Feature(string name, ref bool ok);
		[SmokeMethod("setFeature(const QString&, bool)")]
		public abstract void SetFeature(string name, bool value);
		[SmokeMethod("hasFeature(const QString&) const")]
		public abstract bool HasFeature(string name);
		[SmokeMethod("hasProperty(const QString&) const")]
		public abstract bool HasProperty(string name);
		[SmokeMethod("setEntityResolver(QXmlEntityResolver*)")]
		public abstract void SetEntityResolver(QXmlEntityResolver handler);
		[SmokeMethod("entityResolver() const")]
		public abstract QXmlEntityResolver EntityResolver();
		[SmokeMethod("setDTDHandler(QXmlDTDHandler*)")]
		public abstract void SetDTDHandler(QXmlDTDHandler handler);
		[SmokeMethod("DTDHandler() const")]
		public abstract QXmlDTDHandler DTDHandler();
		[SmokeMethod("setContentHandler(QXmlContentHandler*)")]
		public abstract void SetContentHandler(QXmlContentHandler handler);
		[SmokeMethod("contentHandler() const")]
		public abstract QXmlContentHandler ContentHandler();
		[SmokeMethod("setErrorHandler(QXmlErrorHandler*)")]
		public abstract void SetErrorHandler(QXmlErrorHandler handler);
		[SmokeMethod("errorHandler() const")]
		public abstract QXmlErrorHandler ErrorHandler();
		[SmokeMethod("setLexicalHandler(QXmlLexicalHandler*)")]
		public abstract void SetLexicalHandler(QXmlLexicalHandler handler);
		[SmokeMethod("lexicalHandler() const")]
		public abstract QXmlLexicalHandler LexicalHandler();
		[SmokeMethod("setDeclHandler(QXmlDeclHandler*)")]
		public abstract void SetDeclHandler(QXmlDeclHandler handler);
		[SmokeMethod("declHandler() const")]
		public abstract QXmlDeclHandler DeclHandler();
		[SmokeMethod("parse(const QXmlInputSource&)")]
		public abstract bool Parse(QXmlInputSource input);
		public QXmlReader() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QXmlReader", "QXmlReader()", typeof(void));
		}
	}
}
