//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QXmlReader")]
	public abstract class QXmlReader : MarshalByRefObject {
		protected Object _interceptor = null;
		private IntPtr _smokeObject;
		protected QXmlReader(Type dummy) {}
		[SmokeClass("QXmlReader")]
		interface IQXmlReaderProxy {
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QXmlReader), this);
			_interceptor = (QXmlReader) realProxy.GetTransparentProxy();
		}
		private QXmlReader ProxyQXmlReader() {
			return (QXmlReader) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QXmlReader() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQXmlReaderProxy), null);
			_staticInterceptor = (IQXmlReaderProxy) realProxy.GetTransparentProxy();
		}
		private static IQXmlReaderProxy StaticQXmlReader() {
			return (IQXmlReaderProxy) _staticInterceptor;
		}
		public abstract bool Feature(string name, out bool ok);
		public abstract bool Feature(string name);
		public abstract void SetFeature(string name, bool value);
		public abstract bool HasFeature(string name);
		// void* property(const QString& arg1,bool* arg2); >>>> NOT CONVERTED
		// void* property(const QString& arg1); >>>> NOT CONVERTED
		// void setProperty(const QString& arg1,void* arg2); >>>> NOT CONVERTED
		public abstract bool HasProperty(string name);
		public abstract void SetEntityResolver(IQXmlEntityResolver handler);
		public abstract IQXmlEntityResolver EntityResolver();
		public abstract void SetDTDHandler(IQXmlDTDHandler handler);
		public abstract IQXmlDTDHandler DTDHandler();
		public abstract void SetContentHandler(IQXmlContentHandler handler);
		public abstract IQXmlContentHandler ContentHandler();
		public abstract void SetErrorHandler(IQXmlErrorHandler handler);
		public abstract IQXmlErrorHandler ErrorHandler();
		public abstract void SetLexicalHandler(QXmlLexicalHandler handler);
		public abstract QXmlLexicalHandler LexicalHandler();
		public abstract void SetDeclHandler(IQXmlDeclHandler handler);
		public abstract IQXmlDeclHandler DeclHandler();
		public abstract bool Parse(QXmlInputSource input);
		public QXmlReader() : this((Type) null) {
			CreateProxy();
			NewQXmlReader();
		}
		[SmokeMethod("QXmlReader", "()", "")]
		private void NewQXmlReader() {
			ProxyQXmlReader().NewQXmlReader();
		}
		~QXmlReader() {
			DisposeQXmlReader();
		}
		public void Dispose() {
			DisposeQXmlReader();
		}
		[SmokeMethod("~QXmlReader", "()", "")]
		private void DisposeQXmlReader() {
			ProxyQXmlReader().DisposeQXmlReader();
		}
	}
}
