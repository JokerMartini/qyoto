//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	public interface IQXmlContentHandler {
			void SetDocumentLocator(QXmlLocator locator);
			bool StartDocument();
			bool EndDocument();
			bool StartPrefixMapping(string prefix, string uri);
			bool EndPrefixMapping(string prefix);
			bool StartElement(string namespaceURI, string localName, string qName, QXmlAttributes atts);
			bool EndElement(string namespaceURI, string localName, string qName);
			bool Characters(string ch);
			bool IgnorableWhitespace(string ch);
			bool ProcessingInstruction(string target, string data);
			bool SkippedEntity(string name);
			string ErrorString();
	}

	[SmokeClass("QXmlContentHandler")]
	public abstract class QXmlContentHandler : MarshalByRefObject, IQXmlContentHandler {
		protected Object _interceptor = null;
		private IntPtr _smokeObject;
		protected QXmlContentHandler(Type dummy) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QXmlContentHandler), this);
			_interceptor = (QXmlContentHandler) realProxy.GetTransparentProxy();
		}
		private QXmlContentHandler ProxyQXmlContentHandler() {
			return (QXmlContentHandler) _interceptor;
		}
		public abstract void SetDocumentLocator(QXmlLocator locator);
		public abstract bool StartDocument();
		public abstract bool EndDocument();
		public abstract bool StartPrefixMapping(string prefix, string uri);
		public abstract bool EndPrefixMapping(string prefix);
		public abstract bool StartElement(string namespaceURI, string localName, string qName, QXmlAttributes atts);
		public abstract bool EndElement(string namespaceURI, string localName, string qName);
		public abstract bool Characters(string ch);
		public abstract bool IgnorableWhitespace(string ch);
		public abstract bool ProcessingInstruction(string target, string data);
		public abstract bool SkippedEntity(string name);
		public abstract string ErrorString();
		public QXmlContentHandler() : this((Type) null) {
			CreateProxy();
			NewQXmlContentHandler();
		}
		[SmokeMethod("QXmlContentHandler", "()", "")]
		private void NewQXmlContentHandler() {
			ProxyQXmlContentHandler().NewQXmlContentHandler();
		}
	}
}
