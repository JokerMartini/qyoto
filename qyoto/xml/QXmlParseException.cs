//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QXmlParseException")]
	public class QXmlParseException : MarshalByRefObject, IDisposable {
		protected QXmlParseException interceptor = null;
		private IntPtr smokeObject;
		protected QXmlParseException(Type dummy) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QXmlParseException), this);
			interceptor = (QXmlParseException) realProxy.GetTransparentProxy();
		}
		public QXmlParseException(string name, int c, int l, string p, string s) : this((Type) null) {
			CreateProxy();
			NewQXmlParseException(name,c,l,p,s);
		}
		[SmokeMethod("QXmlParseException", "(const QString&, int, int, const QString&, const QString&)", "$$$$$")]
		private void NewQXmlParseException(string name, int c, int l, string p, string s) {
			((QXmlParseException) interceptor).NewQXmlParseException(name,c,l,p,s);
		}
		public QXmlParseException(string name, int c, int l, string p) : this((Type) null) {
			CreateProxy();
			NewQXmlParseException(name,c,l,p);
		}
		[SmokeMethod("QXmlParseException", "(const QString&, int, int, const QString&)", "$$$$")]
		private void NewQXmlParseException(string name, int c, int l, string p) {
			((QXmlParseException) interceptor).NewQXmlParseException(name,c,l,p);
		}
		public QXmlParseException(string name, int c, int l) : this((Type) null) {
			CreateProxy();
			NewQXmlParseException(name,c,l);
		}
		[SmokeMethod("QXmlParseException", "(const QString&, int, int)", "$$$")]
		private void NewQXmlParseException(string name, int c, int l) {
			((QXmlParseException) interceptor).NewQXmlParseException(name,c,l);
		}
		public QXmlParseException(string name, int c) : this((Type) null) {
			CreateProxy();
			NewQXmlParseException(name,c);
		}
		[SmokeMethod("QXmlParseException", "(const QString&, int)", "$$")]
		private void NewQXmlParseException(string name, int c) {
			((QXmlParseException) interceptor).NewQXmlParseException(name,c);
		}
		public QXmlParseException(string name) : this((Type) null) {
			CreateProxy();
			NewQXmlParseException(name);
		}
		[SmokeMethod("QXmlParseException", "(const QString&)", "$")]
		private void NewQXmlParseException(string name) {
			((QXmlParseException) interceptor).NewQXmlParseException(name);
		}
		public QXmlParseException() : this((Type) null) {
			CreateProxy();
			NewQXmlParseException();
		}
		[SmokeMethod("QXmlParseException", "()", "")]
		private void NewQXmlParseException() {
			((QXmlParseException) interceptor).NewQXmlParseException();
		}
		[SmokeMethod("columnNumber", "() const", "")]
		public int ColumnNumber() {
			return ((QXmlParseException) interceptor).ColumnNumber();
		}
		[SmokeMethod("lineNumber", "() const", "")]
		public int LineNumber() {
			return ((QXmlParseException) interceptor).LineNumber();
		}
		[SmokeMethod("publicId", "() const", "")]
		public string PublicId() {
			return ((QXmlParseException) interceptor).PublicId();
		}
		[SmokeMethod("systemId", "() const", "")]
		public string SystemId() {
			return ((QXmlParseException) interceptor).SystemId();
		}
		[SmokeMethod("message", "() const", "")]
		public string Message() {
			return ((QXmlParseException) interceptor).Message();
		}
		~QXmlParseException() {
			DisposeQXmlParseException();
		}
		public void Dispose() {
			DisposeQXmlParseException();
		}
		[SmokeMethod("~QXmlParseException", "()", "")]
		private void DisposeQXmlParseException() {
			((QXmlParseException) interceptor).DisposeQXmlParseException();
		}
	}
}
