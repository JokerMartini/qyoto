//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QXmlSimpleReader")]
	public class QXmlSimpleReader : QXmlReader, IDisposable {
 		protected QXmlSimpleReader(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(QXmlSimpleReader), this);
		}
		// void* property(const QString& arg1,bool* arg2); >>>> NOT CONVERTED
		// void* property(const QString& arg1); >>>> NOT CONVERTED
		// void setProperty(const QString& arg1,void* arg2); >>>> NOT CONVERTED
		public QXmlSimpleReader() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QXmlSimpleReader", "QXmlSimpleReader()", typeof(void));
		}
		[SmokeMethod("feature(const QString&, bool*) const")]
		public override bool Feature(string name, bool ok) {
			return (bool) interceptor.Invoke("feature$$", "feature(const QString&, bool*) const", typeof(bool), typeof(string), name, typeof(bool), ok);
		}
		[SmokeMethod("feature(const QString&) const")]
		public virtual bool Feature(string name) {
			return (bool) interceptor.Invoke("feature$", "feature(const QString&) const", typeof(bool), typeof(string), name);
		}
		[SmokeMethod("setFeature(const QString&, bool)")]
		public override void SetFeature(string name, bool value) {
			interceptor.Invoke("setFeature$$", "setFeature(const QString&, bool)", typeof(void), typeof(string), name, typeof(bool), value);
		}
		[SmokeMethod("hasFeature(const QString&) const")]
		public override bool HasFeature(string name) {
			return (bool) interceptor.Invoke("hasFeature$", "hasFeature(const QString&) const", typeof(bool), typeof(string), name);
		}
		[SmokeMethod("hasProperty(const QString&) const")]
		public override bool HasProperty(string name) {
			return (bool) interceptor.Invoke("hasProperty$", "hasProperty(const QString&) const", typeof(bool), typeof(string), name);
		}
		[SmokeMethod("setEntityResolver(QXmlEntityResolver*)")]
		public override void SetEntityResolver(QXmlEntityResolver handler) {
			interceptor.Invoke("setEntityResolver#", "setEntityResolver(QXmlEntityResolver*)", typeof(void), typeof(QXmlEntityResolver), handler);
		}
		[SmokeMethod("entityResolver() const")]
		public override QXmlEntityResolver EntityResolver() {
			return (QXmlEntityResolver) interceptor.Invoke("entityResolver", "entityResolver() const", typeof(QXmlEntityResolver));
		}
		[SmokeMethod("setDTDHandler(QXmlDTDHandler*)")]
		public override void SetDTDHandler(QXmlDTDHandler handler) {
			interceptor.Invoke("setDTDHandler#", "setDTDHandler(QXmlDTDHandler*)", typeof(void), typeof(QXmlDTDHandler), handler);
		}
		[SmokeMethod("DTDHandler() const")]
		public override QXmlDTDHandler DTDHandler() {
			return (QXmlDTDHandler) interceptor.Invoke("DTDHandler", "DTDHandler() const", typeof(QXmlDTDHandler));
		}
		[SmokeMethod("setContentHandler(QXmlContentHandler*)")]
		public override void SetContentHandler(QXmlContentHandler handler) {
			interceptor.Invoke("setContentHandler#", "setContentHandler(QXmlContentHandler*)", typeof(void), typeof(QXmlContentHandler), handler);
		}
		[SmokeMethod("contentHandler() const")]
		public override QXmlContentHandler ContentHandler() {
			return (QXmlContentHandler) interceptor.Invoke("contentHandler", "contentHandler() const", typeof(QXmlContentHandler));
		}
		[SmokeMethod("setErrorHandler(QXmlErrorHandler*)")]
		public override void SetErrorHandler(QXmlErrorHandler handler) {
			interceptor.Invoke("setErrorHandler#", "setErrorHandler(QXmlErrorHandler*)", typeof(void), typeof(QXmlErrorHandler), handler);
		}
		[SmokeMethod("errorHandler() const")]
		public override QXmlErrorHandler ErrorHandler() {
			return (QXmlErrorHandler) interceptor.Invoke("errorHandler", "errorHandler() const", typeof(QXmlErrorHandler));
		}
		[SmokeMethod("setLexicalHandler(QXmlLexicalHandler*)")]
		public override void SetLexicalHandler(QXmlLexicalHandler handler) {
			interceptor.Invoke("setLexicalHandler#", "setLexicalHandler(QXmlLexicalHandler*)", typeof(void), typeof(QXmlLexicalHandler), handler);
		}
		[SmokeMethod("lexicalHandler() const")]
		public override QXmlLexicalHandler LexicalHandler() {
			return (QXmlLexicalHandler) interceptor.Invoke("lexicalHandler", "lexicalHandler() const", typeof(QXmlLexicalHandler));
		}
		[SmokeMethod("setDeclHandler(QXmlDeclHandler*)")]
		public override void SetDeclHandler(QXmlDeclHandler handler) {
			interceptor.Invoke("setDeclHandler#", "setDeclHandler(QXmlDeclHandler*)", typeof(void), typeof(QXmlDeclHandler), handler);
		}
		[SmokeMethod("declHandler() const")]
		public override QXmlDeclHandler DeclHandler() {
			return (QXmlDeclHandler) interceptor.Invoke("declHandler", "declHandler() const", typeof(QXmlDeclHandler));
		}
		[SmokeMethod("parse(const QXmlInputSource&)")]
		public override bool Parse(QXmlInputSource input) {
			return (bool) interceptor.Invoke("parse#", "parse(const QXmlInputSource&)", typeof(bool), typeof(QXmlInputSource), input);
		}
		[SmokeMethod("parse(const QXmlInputSource*, bool)")]
		public virtual bool Parse(QXmlInputSource input, bool incremental) {
			return (bool) interceptor.Invoke("parse#$", "parse(const QXmlInputSource*, bool)", typeof(bool), typeof(QXmlInputSource), input, typeof(bool), incremental);
		}
		[SmokeMethod("parseContinue()")]
		public virtual bool ParseContinue() {
			return (bool) interceptor.Invoke("parseContinue", "parseContinue()", typeof(bool));
		}
		~QXmlSimpleReader() {
			interceptor.Invoke("~QXmlSimpleReader", "~QXmlSimpleReader()", typeof(void));
		}
		public void Dispose() {
			interceptor.Invoke("~QXmlSimpleReader", "~QXmlSimpleReader()", typeof(void));
		}
	}
}
