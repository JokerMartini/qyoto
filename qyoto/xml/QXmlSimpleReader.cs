//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QXmlSimpleReader")]
	public class QXmlSimpleReader : QXmlReader, IDisposable {
 		protected QXmlSimpleReader(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QXmlSimpleReader), this);
			interceptor = (QXmlSimpleReader) realProxy.GetTransparentProxy();
		}
		// void* property(const QString& arg1,bool* arg2); >>>> NOT CONVERTED
		// void* property(const QString& arg1); >>>> NOT CONVERTED
		// void setProperty(const QString& arg1,void* arg2); >>>> NOT CONVERTED
		public QXmlSimpleReader() : this((Type) null) {
			CreateProxy();
			NewQXmlSimpleReader();
		}
		[SmokeMethod("QXmlSimpleReader", "()", "")]
		private void NewQXmlSimpleReader() {
			((QXmlSimpleReader) interceptor).NewQXmlSimpleReader();
		}
		[SmokeMethod("feature", "(const QString&, bool*) const", "$$")]
		public override bool Feature(string name, out bool ok) {
			return ((QXmlSimpleReader) interceptor).Feature(name,out ok);
		}
		[SmokeMethod("feature", "(const QString&) const", "$")]
		public virtual bool Feature(string name) {
			return ((QXmlSimpleReader) interceptor).Feature(name);
		}
		[SmokeMethod("setFeature", "(const QString&, bool)", "$$")]
		public override void SetFeature(string name, bool value) {
			((QXmlSimpleReader) interceptor).SetFeature(name,value);
		}
		[SmokeMethod("hasFeature", "(const QString&) const", "$")]
		public override bool HasFeature(string name) {
			return ((QXmlSimpleReader) interceptor).HasFeature(name);
		}
		[SmokeMethod("hasProperty", "(const QString&) const", "$")]
		public override bool HasProperty(string name) {
			return ((QXmlSimpleReader) interceptor).HasProperty(name);
		}
		[SmokeMethod("setEntityResolver", "(QXmlEntityResolver*)", "#")]
		public override void SetEntityResolver(IQXmlEntityResolver handler) {
			((QXmlSimpleReader) interceptor).SetEntityResolver(handler);
		}
		[SmokeMethod("entityResolver", "() const", "")]
		public override IQXmlEntityResolver EntityResolver() {
			return ((QXmlSimpleReader) interceptor).EntityResolver();
		}
		[SmokeMethod("setDTDHandler", "(QXmlDTDHandler*)", "#")]
		public override void SetDTDHandler(IQXmlDTDHandler handler) {
			((QXmlSimpleReader) interceptor).SetDTDHandler(handler);
		}
		[SmokeMethod("DTDHandler", "() const", "")]
		public override IQXmlDTDHandler DTDHandler() {
			return ((QXmlSimpleReader) interceptor).DTDHandler();
		}
		[SmokeMethod("setContentHandler", "(QXmlContentHandler*)", "#")]
		public override void SetContentHandler(IQXmlContentHandler handler) {
			((QXmlSimpleReader) interceptor).SetContentHandler(handler);
		}
		[SmokeMethod("contentHandler", "() const", "")]
		public override IQXmlContentHandler ContentHandler() {
			return ((QXmlSimpleReader) interceptor).ContentHandler();
		}
		[SmokeMethod("setErrorHandler", "(QXmlErrorHandler*)", "#")]
		public override void SetErrorHandler(IQXmlErrorHandler handler) {
			((QXmlSimpleReader) interceptor).SetErrorHandler(handler);
		}
		[SmokeMethod("errorHandler", "() const", "")]
		public override IQXmlErrorHandler ErrorHandler() {
			return ((QXmlSimpleReader) interceptor).ErrorHandler();
		}
		[SmokeMethod("setLexicalHandler", "(QXmlLexicalHandler*)", "#")]
		public override void SetLexicalHandler(QXmlLexicalHandler handler) {
			((QXmlSimpleReader) interceptor).SetLexicalHandler(handler);
		}
		[SmokeMethod("lexicalHandler", "() const", "")]
		public override QXmlLexicalHandler LexicalHandler() {
			return ((QXmlSimpleReader) interceptor).LexicalHandler();
		}
		[SmokeMethod("setDeclHandler", "(QXmlDeclHandler*)", "#")]
		public override void SetDeclHandler(IQXmlDeclHandler handler) {
			((QXmlSimpleReader) interceptor).SetDeclHandler(handler);
		}
		[SmokeMethod("declHandler", "() const", "")]
		public override IQXmlDeclHandler DeclHandler() {
			return ((QXmlSimpleReader) interceptor).DeclHandler();
		}
		[SmokeMethod("parse", "(const QXmlInputSource&)", "#")]
		public override bool Parse(QXmlInputSource input) {
			return ((QXmlSimpleReader) interceptor).Parse(input);
		}
		[SmokeMethod("parse", "(const QXmlInputSource*, bool)", "#$")]
		public virtual bool Parse(QXmlInputSource input, bool incremental) {
			return ((QXmlSimpleReader) interceptor).Parse(input,incremental);
		}
		[SmokeMethod("parseContinue", "()", "")]
		public virtual bool ParseContinue() {
			return ((QXmlSimpleReader) interceptor).ParseContinue();
		}
		~QXmlSimpleReader() {
			DisposeQXmlSimpleReader();
		}
		public new void Dispose() {
			DisposeQXmlSimpleReader();
		}
		[SmokeMethod("~QXmlSimpleReader", "()", "")]
		private void DisposeQXmlSimpleReader() {
			((QXmlSimpleReader) interceptor).DisposeQXmlSimpleReader();
		}
	}
}
