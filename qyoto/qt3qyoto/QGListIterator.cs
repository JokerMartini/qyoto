//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	[SmokeClass("QGListIterator")]
	public class QGListIterator : MarshalByRefObject {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QGListIterator(Type dummy) {}
		interface IQGListIteratorProxy {
		}

		protected void CreateQGListIteratorProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QGListIterator), this);
			_interceptor = (QGListIterator) realProxy.GetTransparentProxy();
		}
		private QGListIterator ProxyQGListIterator() {
			return (QGListIterator) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QGListIterator() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQGListIteratorProxy), null);
			_staticInterceptor = (IQGListIteratorProxy) realProxy.GetTransparentProxy();
		}
		private static IQGListIteratorProxy StaticQGListIterator() {
			return (IQGListIteratorProxy) _staticInterceptor;
		}

		// QGListIterator* QGListIterator(const QGList& arg1); >>>> NOT CONVERTED
		public QGListIterator(QGListIterator arg1) : this((Type) null) {
			CreateQGListIteratorProxy();
			NewQGListIterator(arg1);
		}
		[SmokeMethod("QGListIterator(const QGListIterator&)")]
		private void NewQGListIterator(QGListIterator arg1) {
			ProxyQGListIterator().NewQGListIterator(arg1);
		}
		[SmokeMethod("atFirst() const")]
		protected bool AtFirst() {
			return ProxyQGListIterator().AtFirst();
		}
		[SmokeMethod("atLast() const")]
		protected bool AtLast() {
			return ProxyQGListIterator().AtLast();
		}
		// QPtrCollection::Item toFirst(); >>>> NOT CONVERTED
		// QPtrCollection::Item toLast(); >>>> NOT CONVERTED
		// QPtrCollection::Item get(); >>>> NOT CONVERTED
		// QPtrCollection::Item operator()(); >>>> NOT CONVERTED
		// QPtrCollection::Item operator++(); >>>> NOT CONVERTED
		// QPtrCollection::Item operator--(); >>>> NOT CONVERTED
	}
}
