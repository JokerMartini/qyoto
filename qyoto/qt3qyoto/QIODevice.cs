//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public interface IQIODevice {
			int Flags();
			int Mode();
			int State();
			bool IsDirectAccess();
			bool IsSequentialAccess();
			bool IsCombinedAccess();
			bool IsBuffered();
			bool IsRaw();
			bool IsSynchronous();
			bool IsAsynchronous();
			bool IsTranslated();
			bool IsReadable();
			bool IsWritable();
			bool IsReadWrite();
			bool IsInactive();
			bool IsOpen();
			int Status();
			void ResetStatus();
			bool Open(int mode);
			void Close();
			void Flush();
			ulong Size();
			ulong At();
			bool At(ulong arg1);
			bool AtEnd();
			bool Reset();
			long ReadBlock(string data, long maxlen);
			long WriteBlock(string data, long len);
			long ReadLine(string data, long maxlen);
			long WriteBlock(byte[] data);
			byte[] ReadAll();
			int Getch();
			int Putch(int arg1);
			int Ungetch(int arg1);
	}

	public class QIODevice : MarshalByRefObject, IQIODevice {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QIODevice(Type dummy) {}
		interface IQIODeviceProxy {
		}

		protected void CreateQIODeviceProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QIODevice), this);
			_interceptor = (QIODevice) realProxy.GetTransparentProxy();
		}
		private QIODevice ProxyQIODevice() {
			return (QIODevice) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QIODevice() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQIODeviceProxy), null);
			_staticInterceptor = (IQIODeviceProxy) realProxy.GetTransparentProxy();
		}
		private static IQIODeviceProxy StaticQIODevice() {
			return (IQIODeviceProxy) _staticInterceptor;
		}

		public int Flags() {
			return ProxyQIODevice().Flags();
		}
		public int Mode() {
			return ProxyQIODevice().Mode();
		}
		public int State() {
			return ProxyQIODevice().State();
		}
		public bool IsDirectAccess() {
			return ProxyQIODevice().IsDirectAccess();
		}
		public bool IsSequentialAccess() {
			return ProxyQIODevice().IsSequentialAccess();
		}
		public bool IsCombinedAccess() {
			return ProxyQIODevice().IsCombinedAccess();
		}
		public bool IsBuffered() {
			return ProxyQIODevice().IsBuffered();
		}
		public bool IsRaw() {
			return ProxyQIODevice().IsRaw();
		}
		public bool IsSynchronous() {
			return ProxyQIODevice().IsSynchronous();
		}
		public bool IsAsynchronous() {
			return ProxyQIODevice().IsAsynchronous();
		}
		public bool IsTranslated() {
			return ProxyQIODevice().IsTranslated();
		}
		public bool IsReadable() {
			return ProxyQIODevice().IsReadable();
		}
		public bool IsWritable() {
			return ProxyQIODevice().IsWritable();
		}
		public bool IsReadWrite() {
			return ProxyQIODevice().IsReadWrite();
		}
		public bool IsInactive() {
			return ProxyQIODevice().IsInactive();
		}
		public bool IsOpen() {
			return ProxyQIODevice().IsOpen();
		}
		public int Status() {
			return ProxyQIODevice().Status();
		}
		public void ResetStatus() {
			ProxyQIODevice().ResetStatus();
		}
		public virtual bool Open(int mode) {
			return ProxyQIODevice().Open(mode);
		}
		public virtual void Close() {
			ProxyQIODevice().Close();
		}
		public virtual void Flush() {
			ProxyQIODevice().Flush();
		}
		public virtual ulong Size() {
			return ProxyQIODevice().Size();
		}
		public virtual ulong At() {
			return ProxyQIODevice().At();
		}
		public virtual bool At(ulong arg1) {
			return ProxyQIODevice().At(arg1);
		}
		public virtual bool AtEnd() {
			return ProxyQIODevice().AtEnd();
		}
		public bool Reset() {
			return ProxyQIODevice().Reset();
		}
		public virtual long ReadBlock(string data, long maxlen) {
			return ProxyQIODevice().ReadBlock(data,maxlen);
		}
		public virtual long WriteBlock(string data, long len) {
			return ProxyQIODevice().WriteBlock(data,len);
		}
		public virtual long ReadLine(string data, long maxlen) {
			return ProxyQIODevice().ReadLine(data,maxlen);
		}
		public long WriteBlock(byte[] data) {
			return ProxyQIODevice().WriteBlock(data);
		}
		public virtual byte[] ReadAll() {
			return ProxyQIODevice().ReadAll();
		}
		public virtual int Getch() {
			return ProxyQIODevice().Getch();
		}
		public virtual int Putch(int arg1) {
			return ProxyQIODevice().Putch(arg1);
		}
		public virtual int Ungetch(int arg1) {
			return ProxyQIODevice().Ungetch(arg1);
		}


	}
}
