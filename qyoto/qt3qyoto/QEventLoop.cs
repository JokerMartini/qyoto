//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	/// See <see cref="IQEventLoopSignals"></see> for signals emitted by QEventLoop
	public class QEventLoop : QObject, IDisposable {
 		protected QEventLoop(Type dummy) : base((Type) null) {}
		interface IQEventLoopProxy {
			string Tr(string arg1, string arg2);
			string Tr(string arg1);
			string TrUtf8(string arg1, string arg2);
			string TrUtf8(string arg1);
		}

		protected void CreateQEventLoopProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QEventLoop), this);
			_interceptor = (QEventLoop) realProxy.GetTransparentProxy();
		}
		private QEventLoop ProxyQEventLoop() {
			return (QEventLoop) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QEventLoop() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQEventLoopProxy), null);
			_staticInterceptor = (IQEventLoopProxy) realProxy.GetTransparentProxy();
		}
		private static IQEventLoopProxy StaticQEventLoop() {
			return (IQEventLoopProxy) _staticInterceptor;
		}

		enum E_ProcessEvents {
			AllEvents = 0x00,
			ExcludeUserInput = 0x01,
			ExcludeSocketNotifiers = 0x02,
			WaitForMore = 0x04,
		}
		public new virtual QMetaObject MetaObject() {
			return ProxyQEventLoop().MetaObject();
		}
		public new virtual string ClassName() {
			return ProxyQEventLoop().ClassName();
		}
		public QEventLoop(QObject parent, string name) : this((Type) null) {
			CreateQEventLoopProxy();
			NewQEventLoop(parent,name);
		}
		private void NewQEventLoop(QObject parent, string name) {
			ProxyQEventLoop().NewQEventLoop(parent,name);
		}
		public QEventLoop(QObject parent) : this((Type) null) {
			CreateQEventLoopProxy();
			NewQEventLoop(parent);
		}
		private void NewQEventLoop(QObject parent) {
			ProxyQEventLoop().NewQEventLoop(parent);
		}
		public QEventLoop() : this((Type) null) {
			CreateQEventLoopProxy();
			NewQEventLoop();
		}
		private void NewQEventLoop() {
			ProxyQEventLoop().NewQEventLoop();
		}
		public void ProcessEvents(uint flags, int maxtime) {
			ProxyQEventLoop().ProcessEvents(flags,maxtime);
		}
		public virtual bool ProcessEvents(uint flags) {
			return ProxyQEventLoop().ProcessEvents(flags);
		}
		public virtual bool HasPendingEvents() {
			return ProxyQEventLoop().HasPendingEvents();
		}
		public virtual void RegisterSocketNotifier(QSocketNotifier arg1) {
			ProxyQEventLoop().RegisterSocketNotifier(arg1);
		}
		public virtual void UnregisterSocketNotifier(QSocketNotifier arg1) {
			ProxyQEventLoop().UnregisterSocketNotifier(arg1);
		}
		public void SetSocketNotifierPending(QSocketNotifier arg1) {
			ProxyQEventLoop().SetSocketNotifierPending(arg1);
		}
		public int ActivateSocketNotifiers() {
			return ProxyQEventLoop().ActivateSocketNotifiers();
		}
		public int ActivateTimers() {
			return ProxyQEventLoop().ActivateTimers();
		}
		public int TimeToWait() {
			return ProxyQEventLoop().TimeToWait();
		}
		public virtual int Exec() {
			return ProxyQEventLoop().Exec();
		}
		public virtual void Exit(int retcode) {
			ProxyQEventLoop().Exit(retcode);
		}
		public virtual void Exit() {
			ProxyQEventLoop().Exit();
		}
		public virtual int EnterLoop() {
			return ProxyQEventLoop().EnterLoop();
		}
		public virtual void ExitLoop() {
			ProxyQEventLoop().ExitLoop();
		}
		public virtual int LoopLevel() {
			return ProxyQEventLoop().LoopLevel();
		}
		public virtual void WakeUp() {
			ProxyQEventLoop().WakeUp();
		}
		public static new string Tr(string arg1, string arg2) {
			return StaticQEventLoop().Tr(arg1,arg2);
		}
		public static new string Tr(string arg1) {
			return StaticQEventLoop().Tr(arg1);
		}
		public static new string TrUtf8(string arg1, string arg2) {
			return StaticQEventLoop().TrUtf8(arg1,arg2);
		}
		public static new string TrUtf8(string arg1) {
			return StaticQEventLoop().TrUtf8(arg1);
		}
		~QEventLoop() {
			ProxyQEventLoop().Dispose();
		}
		public new void Dispose() {
			ProxyQEventLoop().Dispose();
		}
	}

	public interface IQEventLoopSignals {
		void Awake();
		void AboutToBlock();
	}
}
