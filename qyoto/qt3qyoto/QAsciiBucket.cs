//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	[SmokeClass("QAsciiBucket")]
	public class QAsciiBucket : QBaseBucket, IDisposable {
 		protected QAsciiBucket(Type dummy) : base((Type) null) {}
		interface IQAsciiBucketProxy {
		}

		protected void CreateQAsciiBucketProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QAsciiBucket), this);
			_interceptor = (QAsciiBucket) realProxy.GetTransparentProxy();
		}
		private QAsciiBucket ProxyQAsciiBucket() {
			return (QAsciiBucket) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QAsciiBucket() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQAsciiBucketProxy), null);
			_staticInterceptor = (IQAsciiBucketProxy) realProxy.GetTransparentProxy();
		}
		private static IQAsciiBucketProxy StaticQAsciiBucket() {
			return (IQAsciiBucketProxy) _staticInterceptor;
		}

		// QAsciiBucket* QAsciiBucket(const char* arg1,QPtrCollection::Item arg2,QBaseBucket* arg3); >>>> NOT CONVERTED
		[SmokeMethod("getKey() const")]
		public string GetKey() {
			return ProxyQAsciiBucket().GetKey();
		}
		~QAsciiBucket() {
			DisposeQAsciiBucket();
		}
		public void Dispose() {
			DisposeQAsciiBucket();
		}
		private void DisposeQAsciiBucket() {
			ProxyQAsciiBucket().DisposeQAsciiBucket();
		}
	}
}
