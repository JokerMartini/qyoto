//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public interface IQSqlQuery {
			bool IsValid();
			bool IsActive();
			bool IsNull(int field);
			int At();
			string LastQuery();
			int NumRowsAffected();
			QSqlError LastError();
			bool IsSelect();
			int Size();
			QSqlDriver Driver();
			QSqlResult Result();
			bool IsForwardOnly();
			void SetForwardOnly(bool forward);
			bool Exec(string query);
			QVariant Value(int i);
			bool Seek(int i, bool relative);
			bool Seek(int i);
			bool Next();
			bool Prev();
			bool First();
			bool Last();
			bool Exec();
			bool Prepare(string query);
			void BindValue(string placeholder, QVariant val);
			void BindValue(int pos, QVariant val);
			void AddBindValue(QVariant val);
			void BindValue(string placeholder, QVariant val, QSql.ParameterType type);
			void BindValue(int pos, QVariant val, QSql.ParameterType type);
			void AddBindValue(QVariant val, QSql.ParameterType type);
			QVariant BoundValue(string placeholder);
			QVariant BoundValue(int pos);
			string ExecutedQuery();
	}

	[SmokeClass("QSqlQuery")]
	public class QSqlQuery : MarshalByRefObject, IQSqlQuery, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QSqlQuery(Type dummy) {}
		interface IQSqlQueryProxy {
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSqlQuery), this);
			_interceptor = (QSqlQuery) realProxy.GetTransparentProxy();
		}
		private QSqlQuery ProxyQSqlQuery() {
			return (QSqlQuery) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QSqlQuery() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSqlQueryProxy), null);
			_staticInterceptor = (IQSqlQueryProxy) realProxy.GetTransparentProxy();
		}
		private static IQSqlQueryProxy StaticQSqlQuery() {
			return (IQSqlQueryProxy) _staticInterceptor;
		}

		public QSqlQuery(QSqlResult r) : this((Type) null) {
			CreateProxy();
			NewQSqlQuery(r);
		}
		[SmokeMethod("QSqlQuery(QSqlResult*)")]
		private void NewQSqlQuery(QSqlResult r) {
			ProxyQSqlQuery().NewQSqlQuery(r);
		}
		public QSqlQuery(string query, QSqlDatabase db) : this((Type) null) {
			CreateProxy();
			NewQSqlQuery(query,db);
		}
		[SmokeMethod("QSqlQuery(const QString&, QSqlDatabase*)")]
		private void NewQSqlQuery(string query, QSqlDatabase db) {
			ProxyQSqlQuery().NewQSqlQuery(query,db);
		}
		public QSqlQuery(string query) : this((Type) null) {
			CreateProxy();
			NewQSqlQuery(query);
		}
		[SmokeMethod("QSqlQuery(const QString&)")]
		private void NewQSqlQuery(string query) {
			ProxyQSqlQuery().NewQSqlQuery(query);
		}
		public QSqlQuery() : this((Type) null) {
			CreateProxy();
			NewQSqlQuery();
		}
		[SmokeMethod("QSqlQuery()")]
		private void NewQSqlQuery() {
			ProxyQSqlQuery().NewQSqlQuery();
		}
		public QSqlQuery(QSqlDatabase db) : this((Type) null) {
			CreateProxy();
			NewQSqlQuery(db);
		}
		[SmokeMethod("QSqlQuery(QSqlDatabase*)")]
		private void NewQSqlQuery(QSqlDatabase db) {
			ProxyQSqlQuery().NewQSqlQuery(db);
		}
		public QSqlQuery(IQSqlQuery other) : this((Type) null) {
			CreateProxy();
			NewQSqlQuery(other);
		}
		[SmokeMethod("QSqlQuery(const QSqlQuery&)")]
		private void NewQSqlQuery(IQSqlQuery other) {
			ProxyQSqlQuery().NewQSqlQuery(other);
		}
		[SmokeMethod("isValid() const")]
		public bool IsValid() {
			return ProxyQSqlQuery().IsValid();
		}
		[SmokeMethod("isActive() const")]
		public bool IsActive() {
			return ProxyQSqlQuery().IsActive();
		}
		[SmokeMethod("isNull(int) const")]
		public bool IsNull(int field) {
			return ProxyQSqlQuery().IsNull(field);
		}
		[SmokeMethod("at() const")]
		public int At() {
			return ProxyQSqlQuery().At();
		}
		[SmokeMethod("lastQuery() const")]
		public string LastQuery() {
			return ProxyQSqlQuery().LastQuery();
		}
		[SmokeMethod("numRowsAffected() const")]
		public int NumRowsAffected() {
			return ProxyQSqlQuery().NumRowsAffected();
		}
		[SmokeMethod("lastError() const")]
		public QSqlError LastError() {
			return ProxyQSqlQuery().LastError();
		}
		[SmokeMethod("isSelect() const")]
		public bool IsSelect() {
			return ProxyQSqlQuery().IsSelect();
		}
		[SmokeMethod("size() const")]
		public int Size() {
			return ProxyQSqlQuery().Size();
		}
		[SmokeMethod("driver() const")]
		public QSqlDriver Driver() {
			return ProxyQSqlQuery().Driver();
		}
		[SmokeMethod("result() const")]
		public QSqlResult Result() {
			return ProxyQSqlQuery().Result();
		}
		[SmokeMethod("isForwardOnly() const")]
		public bool IsForwardOnly() {
			return ProxyQSqlQuery().IsForwardOnly();
		}
		[SmokeMethod("setForwardOnly(bool)")]
		public void SetForwardOnly(bool forward) {
			ProxyQSqlQuery().SetForwardOnly(forward);
		}
		[SmokeMethod("exec(const QString&)")]
		public virtual bool Exec(string query) {
			return ProxyQSqlQuery().Exec(query);
		}
		[SmokeMethod("value(int) const")]
		public virtual QVariant Value(int i) {
			return ProxyQSqlQuery().Value(i);
		}
		[SmokeMethod("seek(int, bool)")]
		public virtual bool Seek(int i, bool relative) {
			return ProxyQSqlQuery().Seek(i,relative);
		}
		[SmokeMethod("seek(int)")]
		public virtual bool Seek(int i) {
			return ProxyQSqlQuery().Seek(i);
		}
		[SmokeMethod("next()")]
		public virtual bool Next() {
			return ProxyQSqlQuery().Next();
		}
		[SmokeMethod("prev()")]
		public virtual bool Prev() {
			return ProxyQSqlQuery().Prev();
		}
		[SmokeMethod("first()")]
		public virtual bool First() {
			return ProxyQSqlQuery().First();
		}
		[SmokeMethod("last()")]
		public virtual bool Last() {
			return ProxyQSqlQuery().Last();
		}
		[SmokeMethod("exec()")]
		public bool Exec() {
			return ProxyQSqlQuery().Exec();
		}
		[SmokeMethod("prepare(const QString&)")]
		public bool Prepare(string query) {
			return ProxyQSqlQuery().Prepare(query);
		}
		[SmokeMethod("bindValue(const QString&, const QVariant&)")]
		public void BindValue(string placeholder, QVariant val) {
			ProxyQSqlQuery().BindValue(placeholder,val);
		}
		[SmokeMethod("bindValue(int, const QVariant&)")]
		public void BindValue(int pos, QVariant val) {
			ProxyQSqlQuery().BindValue(pos,val);
		}
		[SmokeMethod("addBindValue(const QVariant&)")]
		public void AddBindValue(QVariant val) {
			ProxyQSqlQuery().AddBindValue(val);
		}
		[SmokeMethod("bindValue(const QString&, const QVariant&, QSql::ParameterType)")]
		public void BindValue(string placeholder, QVariant val, QSql.ParameterType type) {
			ProxyQSqlQuery().BindValue(placeholder,val,type);
		}
		[SmokeMethod("bindValue(int, const QVariant&, QSql::ParameterType)")]
		public void BindValue(int pos, QVariant val, QSql.ParameterType type) {
			ProxyQSqlQuery().BindValue(pos,val,type);
		}
		[SmokeMethod("addBindValue(const QVariant&, QSql::ParameterType)")]
		public void AddBindValue(QVariant val, QSql.ParameterType type) {
			ProxyQSqlQuery().AddBindValue(val,type);
		}
		[SmokeMethod("boundValue(const QString&) const")]
		public QVariant BoundValue(string placeholder) {
			return ProxyQSqlQuery().BoundValue(placeholder);
		}
		[SmokeMethod("boundValue(int) const")]
		public QVariant BoundValue(int pos) {
			return ProxyQSqlQuery().BoundValue(pos);
		}
		// QMap<QString, QVariant> boundValues(); >>>> NOT CONVERTED
		[SmokeMethod("executedQuery() const")]
		public string ExecutedQuery() {
			return ProxyQSqlQuery().ExecutedQuery();
		}
		[SmokeMethod("beforeSeek()")]
		protected virtual void BeforeSeek() {
			ProxyQSqlQuery().BeforeSeek();
		}
		[SmokeMethod("afterSeek()")]
		protected virtual void AfterSeek() {
			ProxyQSqlQuery().AfterSeek();
		}
		~QSqlQuery() {
			DisposeQSqlQuery();
		}
		public void Dispose() {
			DisposeQSqlQuery();
		}
		private void DisposeQSqlQuery() {
			ProxyQSqlQuery().DisposeQSqlQuery();
		}
	}
}
