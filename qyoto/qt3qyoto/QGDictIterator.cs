//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	[SmokeClass("QGDictIterator")]
	public class QGDictIterator : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QGDictIterator(Type dummy) {}
		interface IQGDictIteratorProxy {
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QGDictIterator), this);
			_interceptor = (QGDictIterator) realProxy.GetTransparentProxy();
		}
		private QGDictIterator ProxyQGDictIterator() {
			return (QGDictIterator) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QGDictIterator() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQGDictIteratorProxy), null);
			_staticInterceptor = (IQGDictIteratorProxy) realProxy.GetTransparentProxy();
		}
		private static IQGDictIteratorProxy StaticQGDictIterator() {
			return (IQGDictIteratorProxy) _staticInterceptor;
		}

		// QGDictIterator* QGDictIterator(const QGDict& arg1); >>>> NOT CONVERTED
		public QGDictIterator(QGDictIterator arg1) : this((Type) null) {
			CreateProxy();
			NewQGDictIterator(arg1);
		}
		[SmokeMethod("QGDictIterator(const QGDictIterator&)")]
		private void NewQGDictIterator(QGDictIterator arg1) {
			ProxyQGDictIterator().NewQGDictIterator(arg1);
		}
		// QPtrCollection::Item toFirst(); >>>> NOT CONVERTED
		// QPtrCollection::Item get(); >>>> NOT CONVERTED
		[SmokeMethod("getKeyString() const")]
		public string GetKeyString() {
			return ProxyQGDictIterator().GetKeyString();
		}
		[SmokeMethod("getKeyAscii() const")]
		public string GetKeyAscii() {
			return ProxyQGDictIterator().GetKeyAscii();
		}
		[SmokeMethod("getKeyInt() const")]
		public long GetKeyInt() {
			return ProxyQGDictIterator().GetKeyInt();
		}
		// void* getKeyPtr(); >>>> NOT CONVERTED
		// QPtrCollection::Item operator()(); >>>> NOT CONVERTED
		// QPtrCollection::Item operator++(); >>>> NOT CONVERTED
		~QGDictIterator() {
			DisposeQGDictIterator();
		}
		public void Dispose() {
			DisposeQGDictIterator();
		}
		private void DisposeQGDictIterator() {
			ProxyQGDictIterator().DisposeQGDictIterator();
		}
	}
}
