//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QHttpResponseHeader : QHttpHeader, IDisposable {
 		protected QHttpResponseHeader(Type dummy) : base((Type) null) {}
		interface IQHttpResponseHeaderProxy {
		}

		protected void CreateQHttpResponseHeaderProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QHttpResponseHeader), this);
			_interceptor = (QHttpResponseHeader) realProxy.GetTransparentProxy();
		}
		private QHttpResponseHeader ProxyQHttpResponseHeader() {
			return (QHttpResponseHeader) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QHttpResponseHeader() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQHttpResponseHeaderProxy), null);
			_staticInterceptor = (IQHttpResponseHeaderProxy) realProxy.GetTransparentProxy();
		}
		private static IQHttpResponseHeaderProxy StaticQHttpResponseHeader() {
			return (IQHttpResponseHeaderProxy) _staticInterceptor;
		}

		public QHttpResponseHeader() : this((Type) null) {
			CreateQHttpResponseHeaderProxy();
			NewQHttpResponseHeader();
		}
		private void NewQHttpResponseHeader() {
			ProxyQHttpResponseHeader().NewQHttpResponseHeader();
		}
		public QHttpResponseHeader(QHttpResponseHeader header) : this((Type) null) {
			CreateQHttpResponseHeaderProxy();
			NewQHttpResponseHeader(header);
		}
		private void NewQHttpResponseHeader(QHttpResponseHeader header) {
			ProxyQHttpResponseHeader().NewQHttpResponseHeader(header);
		}
		public int StatusCode() {
			return ProxyQHttpResponseHeader().StatusCode();
		}
		public string ReasonPhrase() {
			return ProxyQHttpResponseHeader().ReasonPhrase();
		}
		public new int MajorVersion() {
			return ProxyQHttpResponseHeader().MajorVersion();
		}
		public new int MinorVersion() {
			return ProxyQHttpResponseHeader().MinorVersion();
		}
		public new string ToString() {
			return ProxyQHttpResponseHeader().ToString();
		}
		protected new bool ParseLine(string line, int number) {
			return ProxyQHttpResponseHeader().ParseLine(line,number);
		}
		~QHttpResponseHeader() {
			ProxyQHttpResponseHeader().Dispose();
		}
		public new void Dispose() {
			ProxyQHttpResponseHeader().Dispose();
		}
	}
}
