//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QJisCodec : QTextCodec, IDisposable {
 		protected QJisCodec(Type dummy) : base((Type) null) {}
		interface IQJisCodecProxy {
		}

		protected void CreateQJisCodecProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QJisCodec), this);
			_interceptor = (QJisCodec) realProxy.GetTransparentProxy();
		}
		private QJisCodec ProxyQJisCodec() {
			return (QJisCodec) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QJisCodec() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQJisCodecProxy), null);
			_staticInterceptor = (IQJisCodecProxy) realProxy.GetTransparentProxy();
		}
		private static IQJisCodecProxy StaticQJisCodec() {
			return (IQJisCodecProxy) _staticInterceptor;
		}

		public new virtual int MibEnum() {
			return ProxyQJisCodec().MibEnum();
		}
		public new string Name() {
			return ProxyQJisCodec().Name();
		}
		public new string MimeName() {
			return ProxyQJisCodec().MimeName();
		}
		public new QTextDecoder MakeDecoder() {
			return ProxyQJisCodec().MakeDecoder();
		}
		public new string FromUnicode(string uc, out int lenInOut) {
			return ProxyQJisCodec().FromUnicode(uc,out lenInOut);
		}
		public new string ToUnicode(string chars, int len) {
			return ProxyQJisCodec().ToUnicode(chars,len);
		}
		public new int HeuristicContentMatch(string chars, int len) {
			return ProxyQJisCodec().HeuristicContentMatch(chars,len);
		}
		public new int HeuristicNameMatch(string hint) {
			return ProxyQJisCodec().HeuristicNameMatch(hint);
		}
		public QJisCodec() : this((Type) null) {
			CreateQJisCodecProxy();
			NewQJisCodec();
		}
		private void NewQJisCodec() {
			ProxyQJisCodec().NewQJisCodec();
		}
		~QJisCodec() {
			ProxyQJisCodec().Dispose();
		}
		public new void Dispose() {
			ProxyQJisCodec().Dispose();
		}
	}
}
