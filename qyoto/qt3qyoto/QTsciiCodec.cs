//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	[SmokeClass("QTsciiCodec")]
	public class QTsciiCodec : QTextCodec, IDisposable {
 		protected QTsciiCodec(Type dummy) : base((Type) null) {}
		interface IQTsciiCodecProxy {
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTsciiCodec), this);
			_interceptor = (QTsciiCodec) realProxy.GetTransparentProxy();
		}
		private QTsciiCodec ProxyQTsciiCodec() {
			return (QTsciiCodec) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QTsciiCodec() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQTsciiCodecProxy), null);
			_staticInterceptor = (IQTsciiCodecProxy) realProxy.GetTransparentProxy();
		}
		private static IQTsciiCodecProxy StaticQTsciiCodec() {
			return (IQTsciiCodecProxy) _staticInterceptor;
		}

		[SmokeMethod("mibEnum() const")]
		public new virtual int MibEnum() {
			return ProxyQTsciiCodec().MibEnum();
		}
		[SmokeMethod("name() const")]
		public new string Name() {
			return ProxyQTsciiCodec().Name();
		}
		[SmokeMethod("fromUnicode(const QString&, int&) const")]
		public new string FromUnicode(string uc, out int lenInOut) {
			return ProxyQTsciiCodec().FromUnicode(uc,out lenInOut);
		}
		[SmokeMethod("toUnicode(const char*, int) const")]
		public new string ToUnicode(string chars, int len) {
			return ProxyQTsciiCodec().ToUnicode(chars,len);
		}
		[SmokeMethod("heuristicContentMatch(const char*, int) const")]
		public new int HeuristicContentMatch(string chars, int len) {
			return ProxyQTsciiCodec().HeuristicContentMatch(chars,len);
		}
		[SmokeMethod("heuristicNameMatch(const char*) const")]
		public new int HeuristicNameMatch(string hint) {
			return ProxyQTsciiCodec().HeuristicNameMatch(hint);
		}
		public QTsciiCodec() : this((Type) null) {
			CreateProxy();
			NewQTsciiCodec();
		}
		[SmokeMethod("QTsciiCodec()")]
		private void NewQTsciiCodec() {
			ProxyQTsciiCodec().NewQTsciiCodec();
		}
		~QTsciiCodec() {
			DisposeQTsciiCodec();
		}
		public new void Dispose() {
			DisposeQTsciiCodec();
		}
		private void DisposeQTsciiCodec() {
			ProxyQTsciiCodec().DisposeQTsciiCodec();
		}
	}
}
