//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QDomEntity : QDomNode, IDisposable {
 		protected QDomEntity(Type dummy) : base((Type) null) {}
		interface IQDomEntityProxy {
		}

		protected void CreateQDomEntityProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDomEntity), this);
			_interceptor = (QDomEntity) realProxy.GetTransparentProxy();
		}
		private QDomEntity ProxyQDomEntity() {
			return (QDomEntity) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QDomEntity() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDomEntityProxy), null);
			_staticInterceptor = (IQDomEntityProxy) realProxy.GetTransparentProxy();
		}
		private static IQDomEntityProxy StaticQDomEntity() {
			return (IQDomEntityProxy) _staticInterceptor;
		}

		public QDomEntity() : this((Type) null) {
			CreateQDomEntityProxy();
			NewQDomEntity();
		}
		[SmokeMethod("QDomEntity()")]
		private void NewQDomEntity() {
			ProxyQDomEntity().NewQDomEntity();
		}
		public QDomEntity(QDomEntity x) : this((Type) null) {
			CreateQDomEntityProxy();
			NewQDomEntity(x);
		}
		[SmokeMethod("QDomEntity(const QDomEntity&)")]
		private void NewQDomEntity(QDomEntity x) {
			ProxyQDomEntity().NewQDomEntity(x);
		}
		[SmokeMethod("publicId() const")]
		public virtual string PublicId() {
			return ProxyQDomEntity().PublicId();
		}
		[SmokeMethod("systemId() const")]
		public virtual string SystemId() {
			return ProxyQDomEntity().SystemId();
		}
		[SmokeMethod("notationName() const")]
		public virtual string NotationName() {
			return ProxyQDomEntity().NotationName();
		}
		[SmokeMethod("nodeType() const")]
		public new int NodeType() {
			return ProxyQDomEntity().NodeType();
		}
		[SmokeMethod("isEntity() const")]
		public new bool IsEntity() {
			return ProxyQDomEntity().IsEntity();
		}
		~QDomEntity() {
			DisposeQDomEntity();
		}
		public new void Dispose() {
			DisposeQDomEntity();
		}
		private void DisposeQDomEntity() {
			ProxyQDomEntity().DisposeQDomEntity();
		}
	}
}
