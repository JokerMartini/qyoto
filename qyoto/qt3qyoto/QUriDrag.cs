//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
using System.Collections;
	using System.Text;

	public class QUriDrag : QStoredDrag, IDisposable {
 		protected QUriDrag(Type dummy) : base((Type) null) {}
		interface IQUriDragProxy {
			string Tr(string arg1, string arg2);
			string Tr(string arg1);
			string TrUtf8(string arg1, string arg2);
			string TrUtf8(string arg1);
			string UriToLocalFile(string arg1);
			string LocalFileToUri(string arg1);
			string UriToUnicodeUri(string arg1);
			string UnicodeUriToUri(string arg1);
			bool CanDecode(IQMimeSource e);
		}

		protected void CreateQUriDragProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QUriDrag), this);
			_interceptor = (QUriDrag) realProxy.GetTransparentProxy();
		}
		private QUriDrag ProxyQUriDrag() {
			return (QUriDrag) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QUriDrag() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQUriDragProxy), null);
			_staticInterceptor = (IQUriDragProxy) realProxy.GetTransparentProxy();
		}
		private static IQUriDragProxy StaticQUriDrag() {
			return (IQUriDragProxy) _staticInterceptor;
		}

		public new virtual QMetaObject MetaObject() {
			return ProxyQUriDrag().MetaObject();
		}
		public new virtual string ClassName() {
			return ProxyQUriDrag().ClassName();
		}
		public QUriDrag(string[] uris, QWidget dragSource, string name) : this((Type) null) {
			CreateQUriDragProxy();
			NewQUriDrag(uris,dragSource,name);
		}
		private void NewQUriDrag(string[] uris, QWidget dragSource, string name) {
			ProxyQUriDrag().NewQUriDrag(uris,dragSource,name);
		}
		public QUriDrag(string[] uris, QWidget dragSource) : this((Type) null) {
			CreateQUriDragProxy();
			NewQUriDrag(uris,dragSource);
		}
		private void NewQUriDrag(string[] uris, QWidget dragSource) {
			ProxyQUriDrag().NewQUriDrag(uris,dragSource);
		}
		public QUriDrag(string[] uris) : this((Type) null) {
			CreateQUriDragProxy();
			NewQUriDrag(uris);
		}
		private void NewQUriDrag(string[] uris) {
			ProxyQUriDrag().NewQUriDrag(uris);
		}
		public QUriDrag(QWidget dragSource, string name) : this((Type) null) {
			CreateQUriDragProxy();
			NewQUriDrag(dragSource,name);
		}
		private void NewQUriDrag(QWidget dragSource, string name) {
			ProxyQUriDrag().NewQUriDrag(dragSource,name);
		}
		public QUriDrag(QWidget dragSource) : this((Type) null) {
			CreateQUriDragProxy();
			NewQUriDrag(dragSource);
		}
		private void NewQUriDrag(QWidget dragSource) {
			ProxyQUriDrag().NewQUriDrag(dragSource);
		}
		public QUriDrag() : this((Type) null) {
			CreateQUriDragProxy();
			NewQUriDrag();
		}
		private void NewQUriDrag() {
			ProxyQUriDrag().NewQUriDrag();
		}
		public void SetFilenames(string[] fnames) {
			ProxyQUriDrag().SetFilenames(fnames);
		}
		public void SetFileNames(string[] fnames) {
			ProxyQUriDrag().SetFileNames(fnames);
		}
		public void SetUnicodeUris(string[] uuris) {
			ProxyQUriDrag().SetUnicodeUris(uuris);
		}
		public virtual void SetUris(string[] uris) {
			ProxyQUriDrag().SetUris(uris);
		}
		public static new string Tr(string arg1, string arg2) {
			return StaticQUriDrag().Tr(arg1,arg2);
		}
		public static new string Tr(string arg1) {
			return StaticQUriDrag().Tr(arg1);
		}
		public static new string TrUtf8(string arg1, string arg2) {
			return StaticQUriDrag().TrUtf8(arg1,arg2);
		}
		public static new string TrUtf8(string arg1) {
			return StaticQUriDrag().TrUtf8(arg1);
		}
		public static string UriToLocalFile(string arg1) {
			return StaticQUriDrag().UriToLocalFile(arg1);
		}
		public static string LocalFileToUri(string arg1) {
			return StaticQUriDrag().LocalFileToUri(arg1);
		}
		public static string UriToUnicodeUri(string arg1) {
			return StaticQUriDrag().UriToUnicodeUri(arg1);
		}
		public static string UnicodeUriToUri(string arg1) {
			return StaticQUriDrag().UnicodeUriToUri(arg1);
		}
		public static bool CanDecode(IQMimeSource e) {
			return StaticQUriDrag().CanDecode(e);
		}
		~QUriDrag() {
			ProxyQUriDrag().Dispose();
		}
		public new void Dispose() {
			ProxyQUriDrag().Dispose();
		}
//	public static native bool decode(QMimeSourceInterface e, ArrayList i);
//	public static native bool decodeToUnicodeUris(QMimeSourceInterface e, ArrayList i);
//	public static native bool decodeLocalFiles(QMimeSourceInterface e, ArrayList i);
	
	}
}
