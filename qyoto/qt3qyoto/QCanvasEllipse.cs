//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QCanvasEllipse : QCanvasPolygonalItem, IDisposable {
 		protected QCanvasEllipse(Type dummy) : base((Type) null) {}
		interface IQCanvasEllipseProxy {
		}

		protected void CreateQCanvasEllipseProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QCanvasEllipse), this);
			_interceptor = (QCanvasEllipse) realProxy.GetTransparentProxy();
		}
		private QCanvasEllipse ProxyQCanvasEllipse() {
			return (QCanvasEllipse) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QCanvasEllipse() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQCanvasEllipseProxy), null);
			_staticInterceptor = (IQCanvasEllipseProxy) realProxy.GetTransparentProxy();
		}
		private static IQCanvasEllipseProxy StaticQCanvasEllipse() {
			return (IQCanvasEllipseProxy) _staticInterceptor;
		}

		public QCanvasEllipse(QCanvas canvas) : this((Type) null) {
			CreateQCanvasEllipseProxy();
			NewQCanvasEllipse(canvas);
		}
		private void NewQCanvasEllipse(QCanvas canvas) {
			ProxyQCanvasEllipse().NewQCanvasEllipse(canvas);
		}
		public QCanvasEllipse(int width, int height, QCanvas canvas) : this((Type) null) {
			CreateQCanvasEllipseProxy();
			NewQCanvasEllipse(width,height,canvas);
		}
		private void NewQCanvasEllipse(int width, int height, QCanvas canvas) {
			ProxyQCanvasEllipse().NewQCanvasEllipse(width,height,canvas);
		}
		public QCanvasEllipse(int width, int height, int startangle, int angle, QCanvas canvas) : this((Type) null) {
			CreateQCanvasEllipseProxy();
			NewQCanvasEllipse(width,height,startangle,angle,canvas);
		}
		private void NewQCanvasEllipse(int width, int height, int startangle, int angle, QCanvas canvas) {
			ProxyQCanvasEllipse().NewQCanvasEllipse(width,height,startangle,angle,canvas);
		}
		public int Width() {
			return ProxyQCanvasEllipse().Width();
		}
		public int Height() {
			return ProxyQCanvasEllipse().Height();
		}
		public void SetSize(int w, int h) {
			ProxyQCanvasEllipse().SetSize(w,h);
		}
		public void SetAngles(int start, int length) {
			ProxyQCanvasEllipse().SetAngles(start,length);
		}
		public int AngleStart() {
			return ProxyQCanvasEllipse().AngleStart();
		}
		public int AngleLength() {
			return ProxyQCanvasEllipse().AngleLength();
		}
		public new QPointArray AreaPoints() {
			return ProxyQCanvasEllipse().AreaPoints();
		}
		public new bool CollidesWith(QCanvasItem arg1) {
			return ProxyQCanvasEllipse().CollidesWith(arg1);
		}
		public new int Rtti() {
			return ProxyQCanvasEllipse().Rtti();
		}
		protected new void DrawShape(QPainter arg1) {
			ProxyQCanvasEllipse().DrawShape(arg1);
		}
		~QCanvasEllipse() {
			ProxyQCanvasEllipse().Dispose();
		}
		public new void Dispose() {
			ProxyQCanvasEllipse().Dispose();
		}
	}
}
