//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Collections;

	public class QCanvasItem : Qt {
 		protected QCanvasItem(Type dummy) : base((Type) null) {}
		interface IQCanvasItemProxy {
		}

		protected void CreateQCanvasItemProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QCanvasItem), this);
			_interceptor = (QCanvasItem) realProxy.GetTransparentProxy();
		}
		private QCanvasItem ProxyQCanvasItem() {
			return (QCanvasItem) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QCanvasItem() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQCanvasItemProxy), null);
			_staticInterceptor = (IQCanvasItemProxy) realProxy.GetTransparentProxy();
		}
		private static IQCanvasItemProxy StaticQCanvasItem() {
			return (IQCanvasItemProxy) _staticInterceptor;
		}

		enum RttiValues {
			Rtti_Item = 0,
			Rtti_Sprite = 1,
			Rtti_PolygonalItem = 2,
			Rtti_Text = 3,
			Rtti_Polygon = 4,
			Rtti_Rectangle = 5,
			Rtti_Ellipse = 6,
			Rtti_Line = 7,
			Rtti_Spline = 8,
		}
		public double X() {
			return ProxyQCanvasItem().X();
		}
		public double Y() {
			return ProxyQCanvasItem().Y();
		}
		public double Z() {
			return ProxyQCanvasItem().Z();
		}
		public virtual void MoveBy(double dx, double dy) {
			ProxyQCanvasItem().MoveBy(dx,dy);
		}
		public void Move(double x, double y) {
			ProxyQCanvasItem().Move(x,y);
		}
		public void SetX(double a) {
			ProxyQCanvasItem().SetX(a);
		}
		public void SetY(double a) {
			ProxyQCanvasItem().SetY(a);
		}
		public void SetZ(double a) {
			ProxyQCanvasItem().SetZ(a);
		}
		public bool Animated() {
			return ProxyQCanvasItem().Animated();
		}
		public virtual void SetAnimated(bool y) {
			ProxyQCanvasItem().SetAnimated(y);
		}
		public virtual void SetVelocity(double vx, double vy) {
			ProxyQCanvasItem().SetVelocity(vx,vy);
		}
		public void SetXVelocity(double vx) {
			ProxyQCanvasItem().SetXVelocity(vx);
		}
		public void SetYVelocity(double vy) {
			ProxyQCanvasItem().SetYVelocity(vy);
		}
		public double XVelocity() {
			return ProxyQCanvasItem().XVelocity();
		}
		public double YVelocity() {
			return ProxyQCanvasItem().YVelocity();
		}
		public virtual void Advance(int stage) {
			ProxyQCanvasItem().Advance(stage);
		}
		public virtual bool CollidesWith(QCanvasItem arg1) {
			return ProxyQCanvasItem().CollidesWith(arg1);
		}
		public ArrayList Collisions(bool exact) {
			return ProxyQCanvasItem().Collisions(exact);
		}
		public virtual void SetCanvas(QCanvas arg1) {
			ProxyQCanvasItem().SetCanvas(arg1);
		}
		public virtual void Draw(QPainter arg1) {
			ProxyQCanvasItem().Draw(arg1);
		}
		public void Show() {
			ProxyQCanvasItem().Show();
		}
		public void Hide() {
			ProxyQCanvasItem().Hide();
		}
		public virtual void SetVisible(bool yes) {
			ProxyQCanvasItem().SetVisible(yes);
		}
		public bool IsVisible() {
			return ProxyQCanvasItem().IsVisible();
		}
		public virtual void SetSelected(bool yes) {
			ProxyQCanvasItem().SetSelected(yes);
		}
		public bool IsSelected() {
			return ProxyQCanvasItem().IsSelected();
		}
		public virtual void SetEnabled(bool yes) {
			ProxyQCanvasItem().SetEnabled(yes);
		}
		public bool IsEnabled() {
			return ProxyQCanvasItem().IsEnabled();
		}
		public virtual void SetActive(bool yes) {
			ProxyQCanvasItem().SetActive(yes);
		}
		public bool IsActive() {
			return ProxyQCanvasItem().IsActive();
		}
		public bool Visible() {
			return ProxyQCanvasItem().Visible();
		}
		public bool Selected() {
			return ProxyQCanvasItem().Selected();
		}
		public bool Enabled() {
			return ProxyQCanvasItem().Enabled();
		}
		public bool Active() {
			return ProxyQCanvasItem().Active();
		}
		public virtual int Rtti() {
			return ProxyQCanvasItem().Rtti();
		}
		public virtual QRect BoundingRect() {
			return ProxyQCanvasItem().BoundingRect();
		}
		public virtual QRect BoundingRectAdvanced() {
			return ProxyQCanvasItem().BoundingRectAdvanced();
		}
		public QCanvas Canvas() {
			return ProxyQCanvasItem().Canvas();
		}
	}
}
