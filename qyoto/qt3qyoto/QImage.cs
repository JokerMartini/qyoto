//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Collections;
	using System.Text;

	public class QImage : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QImage(Type dummy) {}
		interface IQImageProxy {
			bool op_equals(QImage lhs, QImage arg1);
			QImage FromMimeSource(string abs_name);
			int SystemBitOrder();
			int SystemByteOrder();
			string ImageFormat(string fileName);
			ArrayList InputFormats();
			ArrayList OutputFormats();
			ArrayList InputFormatList();
			ArrayList OutputFormatList();
			QSize MaxImageSize();
			void SetMaxImageSize(QSize size);
		}

		protected void CreateQImageProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QImage), this);
			_interceptor = (QImage) realProxy.GetTransparentProxy();
		}
		private QImage ProxyQImage() {
			return (QImage) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QImage() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQImageProxy), null);
			_staticInterceptor = (IQImageProxy) realProxy.GetTransparentProxy();
		}
		private static IQImageProxy StaticQImage() {
			return (IQImageProxy) _staticInterceptor;
		}

		enum Endian {
			IgnoreEndian = 0,
			BigEndian = 1,
			LittleEndian = 2,
		}
		enum ScaleMode {
			ScaleFree = 0,
			ScaleMin = 1,
			ScaleMax = 2,
		}
		public QImage() : this((Type) null) {
			CreateQImageProxy();
			NewQImage();
		}
		private void NewQImage() {
			ProxyQImage().NewQImage();
		}
		public QImage(int width, int height, int depth, int numColors, int bitOrder) : this((Type) null) {
			CreateQImageProxy();
			NewQImage(width,height,depth,numColors,bitOrder);
		}
		private void NewQImage(int width, int height, int depth, int numColors, int bitOrder) {
			ProxyQImage().NewQImage(width,height,depth,numColors,bitOrder);
		}
		public QImage(int width, int height, int depth, int numColors) : this((Type) null) {
			CreateQImageProxy();
			NewQImage(width,height,depth,numColors);
		}
		private void NewQImage(int width, int height, int depth, int numColors) {
			ProxyQImage().NewQImage(width,height,depth,numColors);
		}
		public QImage(int width, int height, int depth) : this((Type) null) {
			CreateQImageProxy();
			NewQImage(width,height,depth);
		}
		private void NewQImage(int width, int height, int depth) {
			ProxyQImage().NewQImage(width,height,depth);
		}
		public QImage(QSize arg1, int depth, int numColors, int bitOrder) : this((Type) null) {
			CreateQImageProxy();
			NewQImage(arg1,depth,numColors,bitOrder);
		}
		private void NewQImage(QSize arg1, int depth, int numColors, int bitOrder) {
			ProxyQImage().NewQImage(arg1,depth,numColors,bitOrder);
		}
		public QImage(QSize arg1, int depth, int numColors) : this((Type) null) {
			CreateQImageProxy();
			NewQImage(arg1,depth,numColors);
		}
		private void NewQImage(QSize arg1, int depth, int numColors) {
			ProxyQImage().NewQImage(arg1,depth,numColors);
		}
		public QImage(QSize arg1, int depth) : this((Type) null) {
			CreateQImageProxy();
			NewQImage(arg1,depth);
		}
		private void NewQImage(QSize arg1, int depth) {
			ProxyQImage().NewQImage(arg1,depth);
		}
		public QImage(string fileName, string format) : this((Type) null) {
			CreateQImageProxy();
			NewQImage(fileName,format);
		}
		private void NewQImage(string fileName, string format) {
			ProxyQImage().NewQImage(fileName,format);
		}
		public QImage(string fileName) : this((Type) null) {
			CreateQImageProxy();
			NewQImage(fileName);
		}
		private void NewQImage(string fileName) {
			ProxyQImage().NewQImage(fileName);
		}
		// QImage* QImage(const char** arg1); >>>> NOT CONVERTED
		public QImage(byte[] data) : this((Type) null) {
			CreateQImageProxy();
			NewQImage(data);
		}
		private void NewQImage(byte[] data) {
			ProxyQImage().NewQImage(data);
		}
		public QImage(char[] data, int w, int h, int depth, out int colortable, int numColors, int bitOrder) : this((Type) null) {
			CreateQImageProxy();
			NewQImage(data,w,h,depth,out colortable,numColors,bitOrder);
		}
		private void NewQImage(char[] data, int w, int h, int depth, out int colortable, int numColors, int bitOrder) {
			ProxyQImage().NewQImage(data,w,h,depth,out colortable,numColors,bitOrder);
		}
		public QImage(QImage arg1) : this((Type) null) {
			CreateQImageProxy();
			NewQImage(arg1);
		}
		private void NewQImage(QImage arg1) {
			ProxyQImage().NewQImage(arg1);
		}
		public static bool operator==(QImage lhs, QImage arg1) {
			return StaticQImage().op_equals(lhs,arg1);
		}
		public static bool operator!=(QImage lhs, QImage arg1) {
			return !StaticQImage().op_equals(lhs,arg1);
		}
		public override bool Equals(object o) {
			if (!(o is QImage)) { return false; }
			return this == (QImage) o;
		}
		public override int GetHashCode() {
			return ProxyQImage().GetHashCode();
		}
		public void Detach() {
			ProxyQImage().Detach();
		}
		public QImage Copy() {
			return ProxyQImage().Copy();
		}
		public QImage Copy(int x, int y, int w, int h, int conversion_flags) {
			return ProxyQImage().Copy(x,y,w,h,conversion_flags);
		}
		public QImage Copy(int x, int y, int w, int h) {
			return ProxyQImage().Copy(x,y,w,h);
		}
		public QImage Copy(QRect arg1) {
			return ProxyQImage().Copy(arg1);
		}
		public bool IsNull() {
			return ProxyQImage().IsNull();
		}
		public int Width() {
			return ProxyQImage().Width();
		}
		public int Height() {
			return ProxyQImage().Height();
		}
		public QSize Size() {
			return ProxyQImage().Size();
		}
		public QRect Rect() {
			return ProxyQImage().Rect();
		}
		public int Depth() {
			return ProxyQImage().Depth();
		}
		public int NumColors() {
			return ProxyQImage().NumColors();
		}
		public int BitOrder() {
			return ProxyQImage().BitOrder();
		}
		public uint Color(int i) {
			return ProxyQImage().Color(i);
		}
		public void SetColor(int i, uint c) {
			ProxyQImage().SetColor(i,c);
		}
		public void SetNumColors(int arg1) {
			ProxyQImage().SetNumColors(arg1);
		}
		public bool HasAlphaBuffer() {
			return ProxyQImage().HasAlphaBuffer();
		}
		public void SetAlphaBuffer(bool arg1) {
			ProxyQImage().SetAlphaBuffer(arg1);
		}
		public bool AllGray() {
			return ProxyQImage().AllGray();
		}
		public bool IsGrayscale() {
			return ProxyQImage().IsGrayscale();
		}
		public byte[] Bits() {
			return ProxyQImage().Bits();
		}
		public byte[] ScanLine(int arg1) {
			return ProxyQImage().ScanLine(arg1);
		}
		public ArrayList JumpTable() {
			return ProxyQImage().JumpTable();
		}
		public  int ColorTable() {
			return ProxyQImage().ColorTable();
		}
		public int NumBytes() {
			return ProxyQImage().NumBytes();
		}
		public int BytesPerLine() {
			return ProxyQImage().BytesPerLine();
		}
		public bool Create(int width, int height, int depth, int numColors, int bitOrder) {
			return ProxyQImage().Create(width,height,depth,numColors,bitOrder);
		}
		public bool Create(int width, int height, int depth, int numColors) {
			return ProxyQImage().Create(width,height,depth,numColors);
		}
		public bool Create(int width, int height, int depth) {
			return ProxyQImage().Create(width,height,depth);
		}
		public bool Create(QSize arg1, int depth, int numColors, int bitOrder) {
			return ProxyQImage().Create(arg1,depth,numColors,bitOrder);
		}
		public bool Create(QSize arg1, int depth, int numColors) {
			return ProxyQImage().Create(arg1,depth,numColors);
		}
		public bool Create(QSize arg1, int depth) {
			return ProxyQImage().Create(arg1,depth);
		}
		public void Reset() {
			ProxyQImage().Reset();
		}
		public void Fill(uint pixel) {
			ProxyQImage().Fill(pixel);
		}
		public void InvertPixels(bool invertAlpha) {
			ProxyQImage().InvertPixels(invertAlpha);
		}
		public void InvertPixels() {
			ProxyQImage().InvertPixels();
		}
		public QImage ConvertDepth(int arg1) {
			return ProxyQImage().ConvertDepth(arg1);
		}
		public QImage ConvertDepthWithPalette(int arg1, out int p, int pc, int cf) {
			return ProxyQImage().ConvertDepthWithPalette(arg1,out p,pc,cf);
		}
		public QImage ConvertDepthWithPalette(int arg1, out int p, int pc) {
			return ProxyQImage().ConvertDepthWithPalette(arg1,out p,pc);
		}
		public QImage ConvertDepth(int arg1, int conversion_flags) {
			return ProxyQImage().ConvertDepth(arg1,conversion_flags);
		}
		public QImage ConvertBitOrder(int arg1) {
			return ProxyQImage().ConvertBitOrder(arg1);
		}
		public QImage SmoothScale(int w, int h, int mode) {
			return ProxyQImage().SmoothScale(w,h,mode);
		}
		public QImage SmoothScale(int w, int h) {
			return ProxyQImage().SmoothScale(w,h);
		}
		public QImage SmoothScale(QSize s, int mode) {
			return ProxyQImage().SmoothScale(s,mode);
		}
		public QImage SmoothScale(QSize s) {
			return ProxyQImage().SmoothScale(s);
		}
		public QImage Scale(int w, int h, int mode) {
			return ProxyQImage().Scale(w,h,mode);
		}
		public QImage Scale(int w, int h) {
			return ProxyQImage().Scale(w,h);
		}
		public QImage Scale(QSize s, int mode) {
			return ProxyQImage().Scale(s,mode);
		}
		public QImage Scale(QSize s) {
			return ProxyQImage().Scale(s);
		}
		public QImage ScaleWidth(int w) {
			return ProxyQImage().ScaleWidth(w);
		}
		public QImage ScaleHeight(int h) {
			return ProxyQImage().ScaleHeight(h);
		}
		public Object XForm(QWMatrix matrix) {
			return ProxyQImage().XForm(matrix);
		}
		public QImage CreateAlphaMask(int conversion_flags) {
			return ProxyQImage().CreateAlphaMask(conversion_flags);
		}
		public QImage CreateAlphaMask() {
			return ProxyQImage().CreateAlphaMask();
		}
		public QImage CreateHeuristicMask(bool clipTight) {
			return ProxyQImage().CreateHeuristicMask(clipTight);
		}
		public QImage CreateHeuristicMask() {
			return ProxyQImage().CreateHeuristicMask();
		}
		public QImage Mirror() {
			return ProxyQImage().Mirror();
		}
		public QImage Mirror(bool horizontally, bool vertically) {
			return ProxyQImage().Mirror(horizontally,vertically);
		}
		public QImage SwapRGB() {
			return ProxyQImage().SwapRGB();
		}
		public bool Load(string fileName, string format) {
			return ProxyQImage().Load(fileName,format);
		}
		public bool Load(string fileName) {
			return ProxyQImage().Load(fileName);
		}
		public bool LoadFromData(char[] buf, uint len, string format) {
			return ProxyQImage().LoadFromData(buf,len,format);
		}
		public bool LoadFromData(char[] buf, uint len) {
			return ProxyQImage().LoadFromData(buf,len);
		}
		public bool LoadFromData(byte[] data, string format) {
			return ProxyQImage().LoadFromData(data,format);
		}
		public bool LoadFromData(byte[] data) {
			return ProxyQImage().LoadFromData(data);
		}
		public bool Save(string fileName, string format, int quality) {
			return ProxyQImage().Save(fileName,format,quality);
		}
		public bool Save(string fileName, string format) {
			return ProxyQImage().Save(fileName,format);
		}
		public bool Save(IQIODevice device, string format, int quality) {
			return ProxyQImage().Save(device,format,quality);
		}
		public bool Save(IQIODevice device, string format) {
			return ProxyQImage().Save(device,format);
		}
		public bool Valid(int x, int y) {
			return ProxyQImage().Valid(x,y);
		}
		public int PixelIndex(int x, int y) {
			return ProxyQImage().PixelIndex(x,y);
		}
		public uint Pixel(int x, int y) {
			return ProxyQImage().Pixel(x,y);
		}
		public void SetPixel(int x, int y, uint index_or_rgb) {
			ProxyQImage().SetPixel(x,y,index_or_rgb);
		}
		public int DotsPerMeterX() {
			return ProxyQImage().DotsPerMeterX();
		}
		public int DotsPerMeterY() {
			return ProxyQImage().DotsPerMeterY();
		}
		public void SetDotsPerMeterX(int arg1) {
			ProxyQImage().SetDotsPerMeterX(arg1);
		}
		public void SetDotsPerMeterY(int arg1) {
			ProxyQImage().SetDotsPerMeterY(arg1);
		}
		public QPoint Offset() {
			return ProxyQImage().Offset();
		}
		public void SetOffset(QPoint arg1) {
			ProxyQImage().SetOffset(arg1);
		}
		// QValueList<QImageTextKeyLang> textList(); >>>> NOT CONVERTED
		public ArrayList TextLanguages() {
			return ProxyQImage().TextLanguages();
		}
		public ArrayList TextKeys() {
			return ProxyQImage().TextKeys();
		}
		public string Text(string key, string lang) {
			return ProxyQImage().Text(key,lang);
		}
		public string Text(string key) {
			return ProxyQImage().Text(key);
		}
		public string Text(QImageTextKeyLang arg1) {
			return ProxyQImage().Text(arg1);
		}
		public void SetText(string key, string lang, string arg3) {
			ProxyQImage().SetText(key,lang,arg3);
		}
		public static QImage FromMimeSource(string abs_name) {
			return StaticQImage().FromMimeSource(abs_name);
		}
		public static int SystemBitOrder() {
			return StaticQImage().SystemBitOrder();
		}
		public static int SystemByteOrder() {
			return StaticQImage().SystemByteOrder();
		}
		public static string ImageFormat(string fileName) {
			return StaticQImage().ImageFormat(fileName);
		}
		public static ArrayList InputFormats() {
			return StaticQImage().InputFormats();
		}
		public static ArrayList OutputFormats() {
			return StaticQImage().OutputFormats();
		}
		public static ArrayList InputFormatList() {
			return StaticQImage().InputFormatList();
		}
		public static ArrayList OutputFormatList() {
			return StaticQImage().OutputFormatList();
		}
		public static QSize MaxImageSize() {
			return StaticQImage().MaxImageSize();
		}
		public static void SetMaxImageSize(QSize size) {
			StaticQImage().SetMaxImageSize(size);
		}
		~QImage() {
			ProxyQImage().Dispose();
		}
		public void Dispose() {
			ProxyQImage().Dispose();
		}
	}
}
