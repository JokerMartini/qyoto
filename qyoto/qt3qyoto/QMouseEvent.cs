//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	[SmokeClass("QMouseEvent")]
	public class QMouseEvent : QEvent, IDisposable {
 		protected QMouseEvent(Type dummy) : base((Type) null) {}
		interface IQMouseEventProxy {
		}

		protected void CreateQMouseEventProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QMouseEvent), this);
			_interceptor = (QMouseEvent) realProxy.GetTransparentProxy();
		}
		private QMouseEvent ProxyQMouseEvent() {
			return (QMouseEvent) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QMouseEvent() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQMouseEventProxy), null);
			_staticInterceptor = (IQMouseEventProxy) realProxy.GetTransparentProxy();
		}
		private static IQMouseEventProxy StaticQMouseEvent() {
			return (IQMouseEventProxy) _staticInterceptor;
		}

		public QMouseEvent(QEvent.E_Type type, QPoint pos, int button, int state) : this((Type) null) {
			CreateQMouseEventProxy();
			NewQMouseEvent(type,pos,button,state);
		}
		[SmokeMethod("QMouseEvent(QEvent::Type, const QPoint&, int, int)")]
		private void NewQMouseEvent(QEvent.E_Type type, QPoint pos, int button, int state) {
			ProxyQMouseEvent().NewQMouseEvent(type,pos,button,state);
		}
		public QMouseEvent(QEvent.E_Type type, QPoint pos, QPoint globalPos, int button, int state) : this((Type) null) {
			CreateQMouseEventProxy();
			NewQMouseEvent(type,pos,globalPos,button,state);
		}
		[SmokeMethod("QMouseEvent(QEvent::Type, const QPoint&, const QPoint&, int, int)")]
		private void NewQMouseEvent(QEvent.E_Type type, QPoint pos, QPoint globalPos, int button, int state) {
			ProxyQMouseEvent().NewQMouseEvent(type,pos,globalPos,button,state);
		}
		[SmokeMethod("pos() const")]
		public QPoint Pos() {
			return ProxyQMouseEvent().Pos();
		}
		[SmokeMethod("globalPos() const")]
		public QPoint GlobalPos() {
			return ProxyQMouseEvent().GlobalPos();
		}
		[SmokeMethod("x() const")]
		public int X() {
			return ProxyQMouseEvent().X();
		}
		[SmokeMethod("y() const")]
		public int Y() {
			return ProxyQMouseEvent().Y();
		}
		[SmokeMethod("globalX() const")]
		public int GlobalX() {
			return ProxyQMouseEvent().GlobalX();
		}
		[SmokeMethod("globalY() const")]
		public int GlobalY() {
			return ProxyQMouseEvent().GlobalY();
		}
		[SmokeMethod("button() const")]
		public Qt.ButtonState Button() {
			return ProxyQMouseEvent().Button();
		}
		[SmokeMethod("state() const")]
		public Qt.ButtonState State() {
			return ProxyQMouseEvent().State();
		}
		[SmokeMethod("stateAfter() const")]
		public Qt.ButtonState StateAfter() {
			return ProxyQMouseEvent().StateAfter();
		}
		[SmokeMethod("isAccepted() const")]
		public bool IsAccepted() {
			return ProxyQMouseEvent().IsAccepted();
		}
		[SmokeMethod("accept()")]
		public void Accept() {
			ProxyQMouseEvent().Accept();
		}
		[SmokeMethod("ignore()")]
		public void Ignore() {
			ProxyQMouseEvent().Ignore();
		}
		~QMouseEvent() {
			DisposeQMouseEvent();
		}
		public new void Dispose() {
			DisposeQMouseEvent();
		}
		private void DisposeQMouseEvent() {
			ProxyQMouseEvent().DisposeQMouseEvent();
		}
	}
}
