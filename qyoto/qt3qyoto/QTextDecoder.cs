//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	[SmokeClass("QTextDecoder")]
	public class QTextDecoder : MarshalByRefObject {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QTextDecoder(Type dummy) {}
		interface IQTextDecoderProxy {
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTextDecoder), this);
			_interceptor = (QTextDecoder) realProxy.GetTransparentProxy();
		}
		private QTextDecoder ProxyQTextDecoder() {
			return (QTextDecoder) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QTextDecoder() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQTextDecoderProxy), null);
			_staticInterceptor = (IQTextDecoderProxy) realProxy.GetTransparentProxy();
		}
		private static IQTextDecoderProxy StaticQTextDecoder() {
			return (IQTextDecoderProxy) _staticInterceptor;
		}

		[SmokeMethod("toUnicode(const char*, int)")]
		public virtual string ToUnicode(string chars, int len) {
			return ProxyQTextDecoder().ToUnicode(chars,len);
		}
		public QTextDecoder() : this((Type) null) {
			CreateProxy();
			NewQTextDecoder();
		}
		[SmokeMethod("QTextDecoder()")]
		private void NewQTextDecoder() {
			ProxyQTextDecoder().NewQTextDecoder();
		}
		~QTextDecoder() {
			DisposeQTextDecoder();
		}
		public void Dispose() {
			DisposeQTextDecoder();
		}
		private void DisposeQTextDecoder() {
			ProxyQTextDecoder().DisposeQTextDecoder();
		}
	}
}
