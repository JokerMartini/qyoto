//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Collections;
	using System.Text;

	/// See <see cref="IQDataTableSignals"></see> for signals emitted by QDataTable
	[SmokeClass("QDataTable")]
	public class QDataTable : QTable, IDisposable {
 		protected QDataTable(Type dummy) : base((Type) null) {}
		interface IQDataTableProxy {
			string Tr(string arg1, string arg2);
			string Tr(string arg1);
			string TrUtf8(string arg1, string arg2);
			string TrUtf8(string arg1);
		}

		protected void CreateQDataTableProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDataTable), this);
			_interceptor = (QDataTable) realProxy.GetTransparentProxy();
		}
		private QDataTable ProxyQDataTable() {
			return (QDataTable) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QDataTable() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDataTableProxy), null);
			_staticInterceptor = (IQDataTableProxy) realProxy.GetTransparentProxy();
		}
		private static IQDataTableProxy StaticQDataTable() {
			return (IQDataTableProxy) _staticInterceptor;
		}

		enum E_Refresh {
			RefreshData = 1,
			RefreshColumns = 2,
			RefreshAll = 3,
		}
		[SmokeMethod("metaObject() const")]
		public new virtual QMetaObject MetaObject() {
			return ProxyQDataTable().MetaObject();
		}
		[SmokeMethod("className() const")]
		public new virtual string ClassName() {
			return ProxyQDataTable().ClassName();
		}
		public QDataTable(QWidget parent, string name) : this((Type) null) {
			CreateQDataTableProxy();
			CreateQDataTableSignalProxy();
			NewQDataTable(parent,name);
		}
		[SmokeMethod("QDataTable(QWidget*, const char*)")]
		private void NewQDataTable(QWidget parent, string name) {
			ProxyQDataTable().NewQDataTable(parent,name);
		}
		public QDataTable(QWidget parent) : this((Type) null) {
			CreateQDataTableProxy();
			CreateQDataTableSignalProxy();
			NewQDataTable(parent);
		}
		[SmokeMethod("QDataTable(QWidget*)")]
		private void NewQDataTable(QWidget parent) {
			ProxyQDataTable().NewQDataTable(parent);
		}
		public QDataTable() : this((Type) null) {
			CreateQDataTableProxy();
			CreateQDataTableSignalProxy();
			NewQDataTable();
		}
		[SmokeMethod("QDataTable()")]
		private void NewQDataTable() {
			ProxyQDataTable().NewQDataTable();
		}
		public QDataTable(QSqlCursor cursor, bool autoPopulate, QWidget parent, string name) : this((Type) null) {
			CreateQDataTableProxy();
			CreateQDataTableSignalProxy();
			NewQDataTable(cursor,autoPopulate,parent,name);
		}
		[SmokeMethod("QDataTable(QSqlCursor*, bool, QWidget*, const char*)")]
		private void NewQDataTable(QSqlCursor cursor, bool autoPopulate, QWidget parent, string name) {
			ProxyQDataTable().NewQDataTable(cursor,autoPopulate,parent,name);
		}
		public QDataTable(QSqlCursor cursor, bool autoPopulate, QWidget parent) : this((Type) null) {
			CreateQDataTableProxy();
			CreateQDataTableSignalProxy();
			NewQDataTable(cursor,autoPopulate,parent);
		}
		[SmokeMethod("QDataTable(QSqlCursor*, bool, QWidget*)")]
		private void NewQDataTable(QSqlCursor cursor, bool autoPopulate, QWidget parent) {
			ProxyQDataTable().NewQDataTable(cursor,autoPopulate,parent);
		}
		public QDataTable(QSqlCursor cursor, bool autoPopulate) : this((Type) null) {
			CreateQDataTableProxy();
			CreateQDataTableSignalProxy();
			NewQDataTable(cursor,autoPopulate);
		}
		[SmokeMethod("QDataTable(QSqlCursor*, bool)")]
		private void NewQDataTable(QSqlCursor cursor, bool autoPopulate) {
			ProxyQDataTable().NewQDataTable(cursor,autoPopulate);
		}
		public QDataTable(QSqlCursor cursor) : this((Type) null) {
			CreateQDataTableProxy();
			CreateQDataTableSignalProxy();
			NewQDataTable(cursor);
		}
		[SmokeMethod("QDataTable(QSqlCursor*)")]
		private void NewQDataTable(QSqlCursor cursor) {
			ProxyQDataTable().NewQDataTable(cursor);
		}
		[SmokeMethod("addColumn(const QString&, const QString&, int, const QIconSet&)")]
		public virtual void AddColumn(string fieldName, string label, int width, QIconSet iconset) {
			ProxyQDataTable().AddColumn(fieldName,label,width,iconset);
		}
		[SmokeMethod("addColumn(const QString&, const QString&, int)")]
		public virtual void AddColumn(string fieldName, string label, int width) {
			ProxyQDataTable().AddColumn(fieldName,label,width);
		}
		[SmokeMethod("addColumn(const QString&, const QString&)")]
		public virtual void AddColumn(string fieldName, string label) {
			ProxyQDataTable().AddColumn(fieldName,label);
		}
		[SmokeMethod("addColumn(const QString&)")]
		public virtual void AddColumn(string fieldName) {
			ProxyQDataTable().AddColumn(fieldName);
		}
		[SmokeMethod("removeColumn(uint)")]
		public new virtual void RemoveColumn(uint col) {
			ProxyQDataTable().RemoveColumn(col);
		}
		[SmokeMethod("setColumn(uint, const QString&, const QString&, int, const QIconSet&)")]
		public virtual void SetColumn(uint col, string fieldName, string label, int width, QIconSet iconset) {
			ProxyQDataTable().SetColumn(col,fieldName,label,width,iconset);
		}
		[SmokeMethod("setColumn(uint, const QString&, const QString&, int)")]
		public virtual void SetColumn(uint col, string fieldName, string label, int width) {
			ProxyQDataTable().SetColumn(col,fieldName,label,width);
		}
		[SmokeMethod("setColumn(uint, const QString&, const QString&)")]
		public virtual void SetColumn(uint col, string fieldName, string label) {
			ProxyQDataTable().SetColumn(col,fieldName,label);
		}
		[SmokeMethod("setColumn(uint, const QString&)")]
		public virtual void SetColumn(uint col, string fieldName) {
			ProxyQDataTable().SetColumn(col,fieldName);
		}
		[SmokeMethod("nullText() const")]
		public string NullText() {
			return ProxyQDataTable().NullText();
		}
		[SmokeMethod("trueText() const")]
		public string TrueText() {
			return ProxyQDataTable().TrueText();
		}
		[SmokeMethod("falseText() const")]
		public string FalseText() {
			return ProxyQDataTable().FalseText();
		}
		[SmokeMethod("dateFormat() const")]
		public int DateFormat() {
			return ProxyQDataTable().DateFormat();
		}
		[SmokeMethod("confirmEdits() const")]
		public bool ConfirmEdits() {
			return ProxyQDataTable().ConfirmEdits();
		}
		[SmokeMethod("confirmInsert() const")]
		public bool ConfirmInsert() {
			return ProxyQDataTable().ConfirmInsert();
		}
		[SmokeMethod("confirmUpdate() const")]
		public bool ConfirmUpdate() {
			return ProxyQDataTable().ConfirmUpdate();
		}
		[SmokeMethod("confirmDelete() const")]
		public bool ConfirmDelete() {
			return ProxyQDataTable().ConfirmDelete();
		}
		[SmokeMethod("confirmCancels() const")]
		public bool ConfirmCancels() {
			return ProxyQDataTable().ConfirmCancels();
		}
		[SmokeMethod("autoDelete() const")]
		public bool AutoDelete() {
			return ProxyQDataTable().AutoDelete();
		}
		[SmokeMethod("autoEdit() const")]
		public bool AutoEdit() {
			return ProxyQDataTable().AutoEdit();
		}
		[SmokeMethod("filter() const")]
		public string Filter() {
			return ProxyQDataTable().Filter();
		}
		[SmokeMethod("sort() const")]
		public ArrayList Sort() {
			return ProxyQDataTable().Sort();
		}
		[SmokeMethod("setSqlCursor(QSqlCursor*, bool, bool)")]
		public virtual void SetSqlCursor(QSqlCursor cursor, bool autoPopulate, bool autoDelete) {
			ProxyQDataTable().SetSqlCursor(cursor,autoPopulate,autoDelete);
		}
		[SmokeMethod("setSqlCursor(QSqlCursor*, bool)")]
		public virtual void SetSqlCursor(QSqlCursor cursor, bool autoPopulate) {
			ProxyQDataTable().SetSqlCursor(cursor,autoPopulate);
		}
		[SmokeMethod("setSqlCursor(QSqlCursor*)")]
		public virtual void SetSqlCursor(QSqlCursor cursor) {
			ProxyQDataTable().SetSqlCursor(cursor);
		}
		[SmokeMethod("setSqlCursor()")]
		public virtual void SetSqlCursor() {
			ProxyQDataTable().SetSqlCursor();
		}
		[SmokeMethod("sqlCursor() const")]
		public QSqlCursor SqlCursor() {
			return ProxyQDataTable().SqlCursor();
		}
		[SmokeMethod("setNullText(const QString&)")]
		public virtual void SetNullText(string nullText) {
			ProxyQDataTable().SetNullText(nullText);
		}
		[SmokeMethod("setTrueText(const QString&)")]
		public virtual void SetTrueText(string trueText) {
			ProxyQDataTable().SetTrueText(trueText);
		}
		[SmokeMethod("setFalseText(const QString&)")]
		public virtual void SetFalseText(string falseText) {
			ProxyQDataTable().SetFalseText(falseText);
		}
		[SmokeMethod("setDateFormat(const Qt::DateFormat)")]
		public virtual void SetDateFormat(int f) {
			ProxyQDataTable().SetDateFormat(f);
		}
		[SmokeMethod("setConfirmEdits(bool)")]
		public virtual void SetConfirmEdits(bool confirm) {
			ProxyQDataTable().SetConfirmEdits(confirm);
		}
		[SmokeMethod("setConfirmInsert(bool)")]
		public virtual void SetConfirmInsert(bool confirm) {
			ProxyQDataTable().SetConfirmInsert(confirm);
		}
		[SmokeMethod("setConfirmUpdate(bool)")]
		public virtual void SetConfirmUpdate(bool confirm) {
			ProxyQDataTable().SetConfirmUpdate(confirm);
		}
		[SmokeMethod("setConfirmDelete(bool)")]
		public virtual void SetConfirmDelete(bool confirm) {
			ProxyQDataTable().SetConfirmDelete(confirm);
		}
		[SmokeMethod("setConfirmCancels(bool)")]
		public virtual void SetConfirmCancels(bool confirm) {
			ProxyQDataTable().SetConfirmCancels(confirm);
		}
		[SmokeMethod("setAutoDelete(bool)")]
		public virtual void SetAutoDelete(bool enable) {
			ProxyQDataTable().SetAutoDelete(enable);
		}
		[SmokeMethod("setAutoEdit(bool)")]
		public virtual void SetAutoEdit(bool autoEdit) {
			ProxyQDataTable().SetAutoEdit(autoEdit);
		}
		[SmokeMethod("setFilter(const QString&)")]
		public virtual void SetFilter(string filter) {
			ProxyQDataTable().SetFilter(filter);
		}
		[SmokeMethod("setSort(const QStringList&)")]
		public virtual void SetSort(string[] sort) {
			ProxyQDataTable().SetSort(sort);
		}
		[SmokeMethod("setSort(const QSqlIndex&)")]
		public virtual void SetSort(QSqlIndex sort) {
			ProxyQDataTable().SetSort(sort);
		}
		[SmokeMethod("refresh(QDataTable::Refresh)")]
		public void Refresh(int mode) {
			ProxyQDataTable().Refresh(mode);
		}
		[SmokeMethod("sortColumn(int, bool, bool)")]
		public new void SortColumn(int col, bool ascending, bool wholeRows) {
			ProxyQDataTable().SortColumn(col,ascending,wholeRows);
		}
		[SmokeMethod("sortColumn(int, bool)")]
		public new void SortColumn(int col, bool ascending) {
			ProxyQDataTable().SortColumn(col,ascending);
		}
		[SmokeMethod("sortColumn(int)")]
		public new void SortColumn(int col) {
			ProxyQDataTable().SortColumn(col);
		}
		[SmokeMethod("text(int, int) const")]
		public new string Text(int row, int col) {
			return ProxyQDataTable().Text(row,col);
		}
		[SmokeMethod("value(int, int) const")]
		public QVariant Value(int row, int col) {
			return ProxyQDataTable().Value(row,col);
		}
		[SmokeMethod("currentRecord() const")]
		public QSqlRecord CurrentRecord() {
			return ProxyQDataTable().CurrentRecord();
		}
		[SmokeMethod("installEditorFactory(QSqlEditorFactory*)")]
		public void InstallEditorFactory(QSqlEditorFactory f) {
			ProxyQDataTable().InstallEditorFactory(f);
		}
		[SmokeMethod("installPropertyMap(QSqlPropertyMap*)")]
		public void InstallPropertyMap(QSqlPropertyMap m) {
			ProxyQDataTable().InstallPropertyMap(m);
		}
		[SmokeMethod("numCols() const")]
		public new int NumCols() {
			return ProxyQDataTable().NumCols();
		}
		[SmokeMethod("numRows() const")]
		public new int NumRows() {
			return ProxyQDataTable().NumRows();
		}
		[SmokeMethod("setNumCols(int)")]
		public new void SetNumCols(int c) {
			ProxyQDataTable().SetNumCols(c);
		}
		[SmokeMethod("setNumRows(int)")]
		public new void SetNumRows(int r) {
			ProxyQDataTable().SetNumRows(r);
		}
		[SmokeMethod("findBuffer(const QSqlIndex&, int)")]
		public bool FindBuffer(QSqlIndex idx, int atHint) {
			return ProxyQDataTable().FindBuffer(idx,atHint);
		}
		[SmokeMethod("findBuffer(const QSqlIndex&)")]
		public bool FindBuffer(QSqlIndex idx) {
			return ProxyQDataTable().FindBuffer(idx);
		}
		[SmokeMethod("hideColumn(int)")]
		public new void HideColumn(int col) {
			ProxyQDataTable().HideColumn(col);
		}
		[SmokeMethod("showColumn(int)")]
		public new void ShowColumn(int col) {
			ProxyQDataTable().ShowColumn(col);
		}
		[Q_SLOT("void find(const QString&, bool, bool)")]
		[SmokeMethod("find(const QString&, bool, bool)")]
		public new virtual void Find(string str, bool caseSensitive, bool backwards) {
			ProxyQDataTable().Find(str,caseSensitive,backwards);
		}
		[Q_SLOT("void sortAscending(int)")]
		[SmokeMethod("sortAscending(int)")]
		public virtual void SortAscending(int col) {
			ProxyQDataTable().SortAscending(col);
		}
		[Q_SLOT("void sortDescending(int)")]
		[SmokeMethod("sortDescending(int)")]
		public virtual void SortDescending(int col) {
			ProxyQDataTable().SortDescending(col);
		}
		[Q_SLOT("void refresh()")]
		[SmokeMethod("refresh()")]
		public virtual void Refresh() {
			ProxyQDataTable().Refresh();
		}
		[Q_SLOT("void setColumnWidth(int, int)")]
		[SmokeMethod("setColumnWidth(int, int)")]
		public new void SetColumnWidth(int col, int w) {
			ProxyQDataTable().SetColumnWidth(col,w);
		}
		[Q_SLOT("void adjustColumn(int)")]
		[SmokeMethod("adjustColumn(int)")]
		public new void AdjustColumn(int col) {
			ProxyQDataTable().AdjustColumn(col);
		}
		[Q_SLOT("void setColumnStretchable(int, bool)")]
		[SmokeMethod("setColumnStretchable(int, bool)")]
		public new void SetColumnStretchable(int col, bool stretch) {
			ProxyQDataTable().SetColumnStretchable(col,stretch);
		}
		[Q_SLOT("void swapColumns(int, int, bool)")]
		[SmokeMethod("swapColumns(int, int, bool)")]
		public new void SwapColumns(int col1, int col2, bool swapHeaders) {
			ProxyQDataTable().SwapColumns(col1,col2,swapHeaders);
		}
		[Q_SLOT("void swapColumns(int, int)")]
		[SmokeMethod("swapColumns(int, int)")]
		public new void SwapColumns(int col1, int col2) {
			ProxyQDataTable().SwapColumns(col1,col2);
		}
		[SmokeMethod("tr(const char*, const char*)")]
		public static new string Tr(string arg1, string arg2) {
			return StaticQDataTable().Tr(arg1,arg2);
		}
		[SmokeMethod("tr(const char*)")]
		public static new string Tr(string arg1) {
			return StaticQDataTable().Tr(arg1);
		}
		[SmokeMethod("trUtf8(const char*, const char*)")]
		public static new string TrUtf8(string arg1, string arg2) {
			return StaticQDataTable().TrUtf8(arg1,arg2);
		}
		[SmokeMethod("trUtf8(const char*)")]
		public static new string TrUtf8(string arg1) {
			return StaticQDataTable().TrUtf8(arg1);
		}
		[SmokeMethod("insertCurrent()")]
		protected virtual bool InsertCurrent() {
			return ProxyQDataTable().InsertCurrent();
		}
		[SmokeMethod("updateCurrent()")]
		protected virtual bool UpdateCurrent() {
			return ProxyQDataTable().UpdateCurrent();
		}
		[SmokeMethod("deleteCurrent()")]
		protected virtual bool DeleteCurrent() {
			return ProxyQDataTable().DeleteCurrent();
		}
		[SmokeMethod("confirmEdit(QSql::Op)")]
		protected virtual int ConfirmEdit(int m) {
			return ProxyQDataTable().ConfirmEdit(m);
		}
		[SmokeMethod("confirmCancel(QSql::Op)")]
		protected virtual int ConfirmCancel(int m) {
			return ProxyQDataTable().ConfirmCancel(m);
		}
		[SmokeMethod("handleError(const QSqlError&)")]
		protected virtual void HandleError(QSqlError e) {
			ProxyQDataTable().HandleError(e);
		}
		[SmokeMethod("beginInsert()")]
		protected virtual bool BeginInsert() {
			return ProxyQDataTable().BeginInsert();
		}
		[SmokeMethod("beginUpdate(int, int, bool)")]
		protected virtual QWidget BeginUpdate(int row, int col, bool replace) {
			return ProxyQDataTable().BeginUpdate(row,col,replace);
		}
		[SmokeMethod("eventFilter(QObject*, QEvent*)")]
		public new bool EventFilter(QObject o, QEvent e) {
			return ProxyQDataTable().EventFilter(o,e);
		}
		[SmokeMethod("keyPressEvent(QKeyEvent*)")]
		protected new void KeyPressEvent(QKeyEvent arg1) {
			ProxyQDataTable().KeyPressEvent(arg1);
		}
		[SmokeMethod("resizeEvent(QResizeEvent*)")]
		protected new void ResizeEvent(QResizeEvent arg1) {
			ProxyQDataTable().ResizeEvent(arg1);
		}
		[SmokeMethod("contentsMousePressEvent(QMouseEvent*)")]
		protected new void ContentsMousePressEvent(QMouseEvent e) {
			ProxyQDataTable().ContentsMousePressEvent(e);
		}
		[SmokeMethod("contentsContextMenuEvent(QContextMenuEvent*)")]
		protected new void ContentsContextMenuEvent(QContextMenuEvent e) {
			ProxyQDataTable().ContentsContextMenuEvent(e);
		}
		[SmokeMethod("endEdit(int, int, bool, bool)")]
		protected new void EndEdit(int row, int col, bool accept, bool replace) {
			ProxyQDataTable().EndEdit(row,col,accept,replace);
		}
		[SmokeMethod("createEditor(int, int, bool) const")]
		protected new QWidget CreateEditor(int row, int col, bool initFromCell) {
			return ProxyQDataTable().CreateEditor(row,col,initFromCell);
		}
		[SmokeMethod("activateNextCell()")]
		protected new void ActivateNextCell() {
			ProxyQDataTable().ActivateNextCell();
		}
		[SmokeMethod("indexOf(uint) const")]
		protected new int IndexOf(uint i) {
			return ProxyQDataTable().IndexOf(i);
		}
		[SmokeMethod("reset()")]
		protected void Reset() {
			ProxyQDataTable().Reset();
		}
		[SmokeMethod("setSize(QSqlCursor*)")]
		protected void SetSize(QSqlCursor sql) {
			ProxyQDataTable().SetSize(sql);
		}
		[SmokeMethod("repaintCell(int, int)")]
		protected new void RepaintCell(int row, int col) {
			ProxyQDataTable().RepaintCell(row,col);
		}
		[SmokeMethod("paintCell(QPainter*, int, int, const QRect&, bool, const QColorGroup&)")]
		public new void PaintCell(QPainter p, int row, int col, QRect cr, bool selected, QColorGroup cg) {
			ProxyQDataTable().PaintCell(p,row,col,cr,selected,cg);
		}
		[SmokeMethod("paintField(QPainter*, const QSqlField*, const QRect&, bool)")]
		protected virtual void PaintField(QPainter p, QSqlField field, QRect cr, bool selected) {
			ProxyQDataTable().PaintField(p,field,cr,selected);
		}
		[SmokeMethod("drawContents(QPainter*, int, int, int, int)")]
		protected new void DrawContents(QPainter p, int cx, int cy, int cw, int ch) {
			ProxyQDataTable().DrawContents(p,cx,cy,cw,ch);
		}
		[SmokeMethod("fieldAlignment(const QSqlField*)")]
		protected virtual int FieldAlignment(QSqlField field) {
			return ProxyQDataTable().FieldAlignment(field);
		}
		[SmokeMethod("columnClicked(int)")]
		protected new void ColumnClicked(int col) {
			ProxyQDataTable().ColumnClicked(col);
		}
		[SmokeMethod("resizeData(int)")]
		protected new void ResizeData(int len) {
			ProxyQDataTable().ResizeData(len);
		}
		[SmokeMethod("item(int, int) const")]
		public new QTableItem Item(int row, int col) {
			return ProxyQDataTable().Item(row,col);
		}
		[SmokeMethod("setItem(int, int, QTableItem*)")]
		public new void SetItem(int row, int col, QTableItem item) {
			ProxyQDataTable().SetItem(row,col,item);
		}
		[SmokeMethod("clearCell(int, int)")]
		public new void ClearCell(int row, int col) {
			ProxyQDataTable().ClearCell(row,col);
		}
		[SmokeMethod("setPixmap(int, int, const QPixmap&)")]
		public new void SetPixmap(int row, int col, QPixmap pix) {
			ProxyQDataTable().SetPixmap(row,col,pix);
		}
		[SmokeMethod("takeItem(QTableItem*)")]
		public new void TakeItem(QTableItem i) {
			ProxyQDataTable().TakeItem(i);
		}
		~QDataTable() {
			DisposeQDataTable();
		}
		public new void Dispose() {
			DisposeQDataTable();
		}
		private void DisposeQDataTable() {
			ProxyQDataTable().DisposeQDataTable();
		}
		protected void CreateQDataTableSignalProxy() {
			SignalInvocation realProxy = new SignalInvocation(typeof(IQDataTableSignals), this);
			Q_EMIT = (IQDataTableSignals) realProxy.GetTransparentProxy();
		}
		protected new IQDataTableSignals Emit() {
			return (IQDataTableSignals) Q_EMIT;
		}
	}

	public interface IQDataTableSignals : IQTableSignals {
		[Q_SIGNAL("void currentChanged(QSqlRecord*)")]
		void CurrentChanged(QSqlRecord record);
		[Q_SIGNAL("void primeInsert(QSqlRecord*)")]
		void PrimeInsert(QSqlRecord buf);
		[Q_SIGNAL("void primeUpdate(QSqlRecord*)")]
		void PrimeUpdate(QSqlRecord buf);
		[Q_SIGNAL("void primeDelete(QSqlRecord*)")]
		void PrimeDelete(QSqlRecord buf);
		[Q_SIGNAL("void beforeInsert(QSqlRecord*)")]
		void BeforeInsert(QSqlRecord buf);
		[Q_SIGNAL("void beforeUpdate(QSqlRecord*)")]
		void BeforeUpdate(QSqlRecord buf);
		[Q_SIGNAL("void beforeDelete(QSqlRecord*)")]
		void BeforeDelete(QSqlRecord buf);
		[Q_SIGNAL("void cursorChanged(QSql::Op)")]
		void CursorChanged(int mode);
	}
}
