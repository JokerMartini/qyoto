//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QTextStream : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QTextStream(Type dummy) {}
		interface IQTextStreamProxy {
			QTextStream op_read(QTextStream lhs, char arg1);
			QTextStream op_read(QTextStream lhs, ushort arg1);
			QTextStream op_read(QTextStream lhs, uint arg1);
			QTextStream op_read(QTextStream lhs, ulong arg1);
			QTextStream op_read(QTextStream lhs, float arg1);
			QTextStream op_read(QTextStream lhs, double arg1);
			QTextStream op_read(QTextStream lhs, string arg1);
			QTextStream op_read(QTextStream lhs, StringBuilder arg1);
			QTextStream op_write(QTextStream lhs, char arg1);
			QTextStream op_write(QTextStream lhs, short arg1);
			QTextStream op_write(QTextStream lhs, uint arg1);
			QTextStream op_write(QTextStream lhs, long arg1);
			QTextStream op_write(QTextStream lhs, float arg1);
			QTextStream op_write(QTextStream lhs, double arg1);
			QTextStream op_write(QTextStream lhs, string arg1);
		}

		protected void CreateQTextStreamProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTextStream), this);
			_interceptor = (QTextStream) realProxy.GetTransparentProxy();
		}
		private QTextStream ProxyQTextStream() {
			return (QTextStream) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QTextStream() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQTextStreamProxy), null);
			_staticInterceptor = (IQTextStreamProxy) realProxy.GetTransparentProxy();
		}
		private static IQTextStreamProxy StaticQTextStream() {
			return (IQTextStreamProxy) _staticInterceptor;
		}

		public const int skipws = 0x0001;
		public const int left = 0x0002;
		public const int right = 0x0004;
		public const int _internal = 0x0008;
		public const int bin = 0x0010;
		public const int oct = 0x0020;
		public const int dec = 0x0040;
		public const int hex = 0x0080;
		public const int showbase = 0x0100;
		public const int showpoint = 0x0200;
		public const int uppercase = 0x0400;
		public const int showpos = 0x0800;
		public const int scientific = 0x1000;
		public const int _fixed = 0x2000;

		enum Encoding {
			Locale = 0,
			Latin1 = 1,
			Unicode = 2,
			UnicodeNetworkOrder = 3,
			UnicodeReverse = 4,
			RawUnicode = 5,
			UnicodeUTF8 = 6,
		}
		public void SetEncoding(int arg1) {
			ProxyQTextStream().SetEncoding(arg1);
		}
		public void SetCodec(QTextCodec arg1) {
			ProxyQTextStream().SetCodec(arg1);
		}
		public QTextCodec Codec() {
			return ProxyQTextStream().Codec();
		}
		public QTextStream() : this((Type) null) {
			CreateQTextStreamProxy();
			NewQTextStream();
		}
		private void NewQTextStream() {
			ProxyQTextStream().NewQTextStream();
		}
		public QTextStream(IQIODevice arg1) : this((Type) null) {
			CreateQTextStreamProxy();
			NewQTextStream(arg1);
		}
		private void NewQTextStream(IQIODevice arg1) {
			ProxyQTextStream().NewQTextStream(arg1);
		}
		public QTextStream(StringBuilder arg1, int mode) : this((Type) null) {
			CreateQTextStreamProxy();
			NewQTextStream(arg1,mode);
		}
		private void NewQTextStream(StringBuilder arg1, int mode) {
			ProxyQTextStream().NewQTextStream(arg1,mode);
		}
		public QTextStream(byte[] arg1, int mode) : this((Type) null) {
			CreateQTextStreamProxy();
			NewQTextStream(arg1,mode);
		}
		private void NewQTextStream(byte[] arg1, int mode) {
			ProxyQTextStream().NewQTextStream(arg1,mode);
		}
		public IQIODevice Device() {
			return ProxyQTextStream().Device();
		}
		public void SetDevice(IQIODevice arg1) {
			ProxyQTextStream().SetDevice(arg1);
		}
		public void UnsetDevice() {
			ProxyQTextStream().UnsetDevice();
		}
		public bool AtEnd() {
			return ProxyQTextStream().AtEnd();
		}
		public bool Eof() {
			return ProxyQTextStream().Eof();
		}
		/*public static QTextStream operator>>(QTextStream lhs, char arg1) {
			return StaticQTextStream().op_read(lhs,arg1);
		}
		// QTextStream& operator>>(signed short& arg1); >>>> NOT CONVERTED
		public static QTextStream operator>>(QTextStream lhs, ushort arg1) {
			return StaticQTextStream().op_read(lhs,arg1);
		}
		// QTextStream& operator>>(signed int& arg1); >>>> NOT CONVERTED
		public static QTextStream operator>>(QTextStream lhs, uint arg1) {
			return StaticQTextStream().op_read(lhs,arg1);
		}
		// QTextStream& operator>>(signed long& arg1); >>>> NOT CONVERTED
		public static QTextStream operator>>(QTextStream lhs, ulong arg1) {
			return StaticQTextStream().op_read(lhs,arg1);
		}
		public static QTextStream operator>>(QTextStream lhs, float arg1) {
			return StaticQTextStream().op_read(lhs,arg1);
		}
		public static QTextStream operator>>(QTextStream lhs, double arg1) {
			return StaticQTextStream().op_read(lhs,arg1);
		}
		public static QTextStream operator>>(QTextStream lhs, string arg1) {
			return StaticQTextStream().op_read(lhs,arg1);
		}
		public static QTextStream operator>>(QTextStream lhs, StringBuilder arg1) {
			return StaticQTextStream().op_read(lhs,arg1);
		}
		public static QTextStream operator<<(QTextStream lhs, char arg1) {
			return StaticQTextStream().op_write(lhs,arg1);
		}
		public static QTextStream operator<<(QTextStream lhs, short arg1) {
			return StaticQTextStream().op_write(lhs,arg1);
		}
		// QTextStream& operator<<(signed arg1); >>>> NOT CONVERTED
		public static QTextStream operator<<(QTextStream lhs, uint arg1) {
			return StaticQTextStream().op_write(lhs,arg1);
		}
		public static QTextStream operator<<(QTextStream lhs, long arg1) {
			return StaticQTextStream().op_write(lhs,arg1);
		}
		public static QTextStream operator<<(QTextStream lhs, float arg1) {
			return StaticQTextStream().op_write(lhs,arg1);
		}
		public static QTextStream operator<<(QTextStream lhs, double arg1) {
			return StaticQTextStream().op_write(lhs,arg1);
		}
		public static QTextStream operator<<(QTextStream lhs, string arg1) {
			return StaticQTextStream().op_write(lhs,arg1);
		}*/
		// QTextStream& operator<<(void* arg1); >>>> NOT CONVERTED
		public QTextStream ReadRawBytes(string arg1, uint len) {
			return ProxyQTextStream().ReadRawBytes(arg1,len);
		}
		public QTextStream WriteRawBytes(string arg1, uint len) {
			return ProxyQTextStream().WriteRawBytes(arg1,len);
		}
		public string ReadLine() {
			return ProxyQTextStream().ReadLine();
		}
		public string Read() {
			return ProxyQTextStream().Read();
		}
		public void SkipWhiteSpace() {
			ProxyQTextStream().SkipWhiteSpace();
		}
		public int Flags() {
			return ProxyQTextStream().Flags();
		}
		public int Flags(int f) {
			return ProxyQTextStream().Flags(f);
		}
		public int Setf(int bits) {
			return ProxyQTextStream().Setf(bits);
		}
		public int Setf(int bits, int mask) {
			return ProxyQTextStream().Setf(bits,mask);
		}
		public int Unsetf(int bits) {
			return ProxyQTextStream().Unsetf(bits);
		}
		public void Reset() {
			ProxyQTextStream().Reset();
		}
		public int Width() {
			return ProxyQTextStream().Width();
		}
		public int Width(int arg1) {
			return ProxyQTextStream().Width(arg1);
		}
		public int Fill() {
			return ProxyQTextStream().Fill();
		}
		public int Fill(int arg1) {
			return ProxyQTextStream().Fill(arg1);
		}
		public int Precision() {
			return ProxyQTextStream().Precision();
		}
		public int Precision(int arg1) {
			return ProxyQTextStream().Precision(arg1);
		}
		~QTextStream() {
			ProxyQTextStream().Dispose();
		}
		public void Dispose() {
			ProxyQTextStream().Dispose();
		}
	}
}
