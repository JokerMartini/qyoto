//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	[SmokeClass("QKeySequence")]
	public class QKeySequence : Qt, IDisposable {
 		protected QKeySequence(Type dummy) : base((Type) null) {}
		interface IQKeySequenceProxy {
			bool op_equals(QKeySequence lhs, QKeySequence arg1);
		}

		protected void CreateQKeySequenceProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QKeySequence), this);
			_interceptor = (QKeySequence) realProxy.GetTransparentProxy();
		}
		private QKeySequence ProxyQKeySequence() {
			return (QKeySequence) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QKeySequence() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQKeySequenceProxy), null);
			_staticInterceptor = (IQKeySequenceProxy) realProxy.GetTransparentProxy();
		}
		private static IQKeySequenceProxy StaticQKeySequence() {
			return (IQKeySequenceProxy) _staticInterceptor;
		}

		public QKeySequence() : this((Type) null) {
			CreateQKeySequenceProxy();
			NewQKeySequence();
		}
		[SmokeMethod("QKeySequence()")]
		private void NewQKeySequence() {
			ProxyQKeySequence().NewQKeySequence();
		}
		public QKeySequence(string key) : this((Type) null) {
			CreateQKeySequenceProxy();
			NewQKeySequence(key);
		}
		[SmokeMethod("QKeySequence(const QString&)")]
		private void NewQKeySequence(string key) {
			ProxyQKeySequence().NewQKeySequence(key);
		}
		public QKeySequence(int key) : this((Type) null) {
			CreateQKeySequenceProxy();
			NewQKeySequence(key);
		}
		[SmokeMethod("QKeySequence(int)")]
		private void NewQKeySequence(int key) {
			ProxyQKeySequence().NewQKeySequence(key);
		}
		public QKeySequence(int k1, int k2, int k3, int k4) : this((Type) null) {
			CreateQKeySequenceProxy();
			NewQKeySequence(k1,k2,k3,k4);
		}
		[SmokeMethod("QKeySequence(int, int, int, int)")]
		private void NewQKeySequence(int k1, int k2, int k3, int k4) {
			ProxyQKeySequence().NewQKeySequence(k1,k2,k3,k4);
		}
		public QKeySequence(int k1, int k2, int k3) : this((Type) null) {
			CreateQKeySequenceProxy();
			NewQKeySequence(k1,k2,k3);
		}
		[SmokeMethod("QKeySequence(int, int, int)")]
		private void NewQKeySequence(int k1, int k2, int k3) {
			ProxyQKeySequence().NewQKeySequence(k1,k2,k3);
		}
		public QKeySequence(int k1, int k2) : this((Type) null) {
			CreateQKeySequenceProxy();
			NewQKeySequence(k1,k2);
		}
		[SmokeMethod("QKeySequence(int, int)")]
		private void NewQKeySequence(int k1, int k2) {
			ProxyQKeySequence().NewQKeySequence(k1,k2);
		}
		public QKeySequence(QKeySequence arg1) : this((Type) null) {
			CreateQKeySequenceProxy();
			NewQKeySequence(arg1);
		}
		[SmokeMethod("QKeySequence(const QKeySequence&)")]
		private void NewQKeySequence(QKeySequence arg1) {
			ProxyQKeySequence().NewQKeySequence(arg1);
		}
		[SmokeMethod("count() const")]
		public uint Count() {
			return ProxyQKeySequence().Count();
		}
		[SmokeMethod("isEmpty() const")]
		public bool IsEmpty() {
			return ProxyQKeySequence().IsEmpty();
		}
		[SmokeMethod("matches(const QKeySequence&) const")]
		public Qt.SequenceMatch Matches(QKeySequence arg1) {
			return ProxyQKeySequence().Matches(arg1);
		}
		//  operator QString(); >>>> NOT CONVERTED
		//  operator int(); >>>> NOT CONVERTED
		[SmokeMethod("operator==(const QKeySequence&) const")]
		public static bool operator==(QKeySequence lhs, QKeySequence arg1) {
			return StaticQKeySequence().op_equals(lhs,arg1);
		}
		public static bool operator!=(QKeySequence lhs, QKeySequence arg1) {
			return !StaticQKeySequence().op_equals(lhs,arg1);
		}
		public override bool Equals(object o) {
			if (!(o is QKeySequence)) { return false; }
			return this == (QKeySequence) o;
		}
		public override int GetHashCode() {
			return ProxyQKeySequence().GetHashCode();
		}
		~QKeySequence() {
			DisposeQKeySequence();
		}
		public void Dispose() {
			DisposeQKeySequence();
		}
		private void DisposeQKeySequence() {
			ProxyQKeySequence().DisposeQKeySequence();
		}
	}
}
