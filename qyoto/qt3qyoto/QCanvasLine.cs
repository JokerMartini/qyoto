//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QCanvasLine : QCanvasPolygonalItem, IDisposable {
 		protected QCanvasLine(Type dummy) : base((Type) null) {}
		interface IQCanvasLineProxy {
		}

		protected void CreateQCanvasLineProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QCanvasLine), this);
			_interceptor = (QCanvasLine) realProxy.GetTransparentProxy();
		}
		private QCanvasLine ProxyQCanvasLine() {
			return (QCanvasLine) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QCanvasLine() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQCanvasLineProxy), null);
			_staticInterceptor = (IQCanvasLineProxy) realProxy.GetTransparentProxy();
		}
		private static IQCanvasLineProxy StaticQCanvasLine() {
			return (IQCanvasLineProxy) _staticInterceptor;
		}

		public QCanvasLine(QCanvas canvas) : this((Type) null) {
			CreateQCanvasLineProxy();
			NewQCanvasLine(canvas);
		}
		private void NewQCanvasLine(QCanvas canvas) {
			ProxyQCanvasLine().NewQCanvasLine(canvas);
		}
		public void SetPoints(int x1, int y1, int x2, int y2) {
			ProxyQCanvasLine().SetPoints(x1,y1,x2,y2);
		}
		public QPoint StartPoint() {
			return ProxyQCanvasLine().StartPoint();
		}
		public QPoint EndPoint() {
			return ProxyQCanvasLine().EndPoint();
		}
		public new int Rtti() {
			return ProxyQCanvasLine().Rtti();
		}
		public new void SetPen(QPen p) {
			ProxyQCanvasLine().SetPen(p);
		}
		public new void MoveBy(double dx, double dy) {
			ProxyQCanvasLine().MoveBy(dx,dy);
		}
		protected new void DrawShape(QPainter arg1) {
			ProxyQCanvasLine().DrawShape(arg1);
		}
		public new QPointArray AreaPoints() {
			return ProxyQCanvasLine().AreaPoints();
		}
		~QCanvasLine() {
			ProxyQCanvasLine().Dispose();
		}
		public new void Dispose() {
			ProxyQCanvasLine().Dispose();
		}
	}
}
