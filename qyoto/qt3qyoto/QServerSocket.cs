//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QServerSocket : QObject {
 		protected QServerSocket(Type dummy) : base((Type) null) {}
		interface IQServerSocketProxy {
			string Tr(string arg1, string arg2);
			string Tr(string arg1);
			string TrUtf8(string arg1, string arg2);
			string TrUtf8(string arg1);
		}

		protected void CreateQServerSocketProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QServerSocket), this);
			_interceptor = (QServerSocket) realProxy.GetTransparentProxy();
		}
		private QServerSocket ProxyQServerSocket() {
			return (QServerSocket) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QServerSocket() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQServerSocketProxy), null);
			_staticInterceptor = (IQServerSocketProxy) realProxy.GetTransparentProxy();
		}
		private static IQServerSocketProxy StaticQServerSocket() {
			return (IQServerSocketProxy) _staticInterceptor;
		}

		[SmokeMethod("metaObject() const")]
		public new virtual QMetaObject MetaObject() {
			return ProxyQServerSocket().MetaObject();
		}
		[SmokeMethod("className() const")]
		public new virtual string ClassName() {
			return ProxyQServerSocket().ClassName();
		}
		[SmokeMethod("ok() const")]
		public bool Ok() {
			return ProxyQServerSocket().Ok();
		}
		[SmokeMethod("port() const")]
		public ushort Port() {
			return ProxyQServerSocket().Port();
		}
		[SmokeMethod("socket() const")]
		public int Socket() {
			return ProxyQServerSocket().Socket();
		}
		[SmokeMethod("setSocket(int)")]
		public virtual void SetSocket(int socket) {
			ProxyQServerSocket().SetSocket(socket);
		}
		[SmokeMethod("address() const")]
		public QHostAddress Address() {
			return ProxyQServerSocket().Address();
		}
		[SmokeMethod("newConnection(int)")]
		public virtual void NewConnection(int socket) {
			ProxyQServerSocket().NewConnection(socket);
		}
		[SmokeMethod("tr(const char*, const char*)")]
		public static new string Tr(string arg1, string arg2) {
			return StaticQServerSocket().Tr(arg1,arg2);
		}
		[SmokeMethod("tr(const char*)")]
		public static new string Tr(string arg1) {
			return StaticQServerSocket().Tr(arg1);
		}
		[SmokeMethod("trUtf8(const char*, const char*)")]
		public static new string TrUtf8(string arg1, string arg2) {
			return StaticQServerSocket().TrUtf8(arg1,arg2);
		}
		[SmokeMethod("trUtf8(const char*)")]
		public static new string TrUtf8(string arg1) {
			return StaticQServerSocket().TrUtf8(arg1);
		}
		protected void CreateQServerSocketSignalProxy() {
			SignalInvocation realProxy = new SignalInvocation(typeof(IQServerSocketSignals), this);
			_signalInterceptor = (IQServerSocketSignals) realProxy.GetTransparentProxy();
		}
		protected new IQServerSocketSignals Emit() {
			return (IQServerSocketSignals) _signalInterceptor;
		}
	}

	public interface IQServerSocketSignals : IQObjectSignals {
	}
}
