//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public interface IQXmlErrorHandler {
			bool Warning(QXmlParseException exception);
			bool Error(QXmlParseException exception);
			bool FatalError(QXmlParseException exception);
			string ErrorString();
	}

	public class QXmlErrorHandler : MarshalByRefObject, IQXmlErrorHandler {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QXmlErrorHandler(Type dummy) {}
		interface IQXmlErrorHandlerProxy {
		}

		protected void CreateQXmlErrorHandlerProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QXmlErrorHandler), this);
			_interceptor = (QXmlErrorHandler) realProxy.GetTransparentProxy();
		}
		private QXmlErrorHandler ProxyQXmlErrorHandler() {
			return (QXmlErrorHandler) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QXmlErrorHandler() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQXmlErrorHandlerProxy), null);
			_staticInterceptor = (IQXmlErrorHandlerProxy) realProxy.GetTransparentProxy();
		}
		private static IQXmlErrorHandlerProxy StaticQXmlErrorHandler() {
			return (IQXmlErrorHandlerProxy) _staticInterceptor;
		}

		[SmokeMethod("warning(const QXmlParseException&)")]
		public virtual bool Warning(QXmlParseException exception) {
			return ProxyQXmlErrorHandler().Warning(exception);
		}
		[SmokeMethod("error(const QXmlParseException&)")]
		public virtual bool Error(QXmlParseException exception) {
			return ProxyQXmlErrorHandler().Error(exception);
		}
		[SmokeMethod("fatalError(const QXmlParseException&)")]
		public virtual bool FatalError(QXmlParseException exception) {
			return ProxyQXmlErrorHandler().FatalError(exception);
		}
		[SmokeMethod("errorString()")]
		public virtual string ErrorString() {
			return ProxyQXmlErrorHandler().ErrorString();
		}
	}
}
