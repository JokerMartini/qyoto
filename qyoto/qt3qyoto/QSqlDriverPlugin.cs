//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Collections;
	using System.Text;

	[SmokeClass("QSqlDriverPlugin")]
	public class QSqlDriverPlugin : QGPlugin {
 		protected QSqlDriverPlugin(Type dummy) : base((Type) null) {}
		interface IQSqlDriverPluginProxy {
			string Tr(string arg1, string arg2);
			string Tr(string arg1);
			string TrUtf8(string arg1, string arg2);
			string TrUtf8(string arg1);
		}

		protected void CreateQSqlDriverPluginProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSqlDriverPlugin), this);
			_interceptor = (QSqlDriverPlugin) realProxy.GetTransparentProxy();
		}
		private QSqlDriverPlugin ProxyQSqlDriverPlugin() {
			return (QSqlDriverPlugin) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QSqlDriverPlugin() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSqlDriverPluginProxy), null);
			_staticInterceptor = (IQSqlDriverPluginProxy) realProxy.GetTransparentProxy();
		}
		private static IQSqlDriverPluginProxy StaticQSqlDriverPlugin() {
			return (IQSqlDriverPluginProxy) _staticInterceptor;
		}

		[SmokeMethod("metaObject() const")]
		public new virtual QMetaObject MetaObject() {
			return ProxyQSqlDriverPlugin().MetaObject();
		}
		[SmokeMethod("className() const")]
		public new virtual string ClassName() {
			return ProxyQSqlDriverPlugin().ClassName();
		}
		public QSqlDriverPlugin() : this((Type) null) {
			CreateQSqlDriverPluginProxy();
			CreateQSqlDriverPluginSignalProxy();
			NewQSqlDriverPlugin();
		}
		[SmokeMethod("QSqlDriverPlugin()")]
		private void NewQSqlDriverPlugin() {
			ProxyQSqlDriverPlugin().NewQSqlDriverPlugin();
		}
		[SmokeMethod("keys() const")]
		public virtual ArrayList Keys() {
			return ProxyQSqlDriverPlugin().Keys();
		}
		[SmokeMethod("create(const QString&)")]
		public virtual QSqlDriver Create(string key) {
			return ProxyQSqlDriverPlugin().Create(key);
		}
		[SmokeMethod("tr(const char*, const char*)")]
		public static new string Tr(string arg1, string arg2) {
			return StaticQSqlDriverPlugin().Tr(arg1,arg2);
		}
		[SmokeMethod("tr(const char*)")]
		public static new string Tr(string arg1) {
			return StaticQSqlDriverPlugin().Tr(arg1);
		}
		[SmokeMethod("trUtf8(const char*, const char*)")]
		public static new string TrUtf8(string arg1, string arg2) {
			return StaticQSqlDriverPlugin().TrUtf8(arg1,arg2);
		}
		[SmokeMethod("trUtf8(const char*)")]
		public static new string TrUtf8(string arg1) {
			return StaticQSqlDriverPlugin().TrUtf8(arg1);
		}
		~QSqlDriverPlugin() {
			DisposeQSqlDriverPlugin();
		}
		public new void Dispose() {
			DisposeQSqlDriverPlugin();
		}
		private void DisposeQSqlDriverPlugin() {
			ProxyQSqlDriverPlugin().DisposeQSqlDriverPlugin();
		}
		protected void CreateQSqlDriverPluginSignalProxy() {
			SignalInvocation realProxy = new SignalInvocation(typeof(IQSqlDriverPluginSignals), this);
			Q_EMIT = (IQSqlDriverPluginSignals) realProxy.GetTransparentProxy();
		}
		protected new IQSqlDriverPluginSignals Emit() {
			return (IQSqlDriverPluginSignals) Q_EMIT;
		}
	}

	public interface IQSqlDriverPluginSignals : IQGPluginSignals {
	}
}
