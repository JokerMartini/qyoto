//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QCanvasSprite : QCanvasItem, IDisposable {
 		protected QCanvasSprite(Type dummy) : base((Type) null) {}
		interface IQCanvasSpriteProxy {
		}

		protected void CreateQCanvasSpriteProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QCanvasSprite), this);
			_interceptor = (QCanvasSprite) realProxy.GetTransparentProxy();
		}
		private QCanvasSprite ProxyQCanvasSprite() {
			return (QCanvasSprite) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QCanvasSprite() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQCanvasSpriteProxy), null);
			_staticInterceptor = (IQCanvasSpriteProxy) realProxy.GetTransparentProxy();
		}
		private static IQCanvasSpriteProxy StaticQCanvasSprite() {
			return (IQCanvasSpriteProxy) _staticInterceptor;
		}

		enum FrameAnimationType {
			Cycle = 0,
			Oscillate = 1,
		}
		public QCanvasSprite(QCanvasPixmapArray array, QCanvas canvas) : this((Type) null) {
			CreateQCanvasSpriteProxy();
			NewQCanvasSprite(array,canvas);
		}
		private void NewQCanvasSprite(QCanvasPixmapArray array, QCanvas canvas) {
			ProxyQCanvasSprite().NewQCanvasSprite(array,canvas);
		}
		public void SetSequence(QCanvasPixmapArray seq) {
			ProxyQCanvasSprite().SetSequence(seq);
		}
		public new void Move(double x, double y) {
			ProxyQCanvasSprite().Move(x,y);
		}
		public new virtual void Move(double x, double y, int frame) {
			ProxyQCanvasSprite().Move(x,y,frame);
		}
		public void SetFrame(int arg1) {
			ProxyQCanvasSprite().SetFrame(arg1);
		}
		public virtual void SetFrameAnimation(int arg1, int step, int state) {
			ProxyQCanvasSprite().SetFrameAnimation(arg1,step,state);
		}
		public virtual void SetFrameAnimation(int arg1, int step) {
			ProxyQCanvasSprite().SetFrameAnimation(arg1,step);
		}
		public virtual void SetFrameAnimation(int arg1) {
			ProxyQCanvasSprite().SetFrameAnimation(arg1);
		}
		public virtual void SetFrameAnimation() {
			ProxyQCanvasSprite().SetFrameAnimation();
		}
		public int Frame() {
			return ProxyQCanvasSprite().Frame();
		}
		public int FrameCount() {
			return ProxyQCanvasSprite().FrameCount();
		}
		public new int Rtti() {
			return ProxyQCanvasSprite().Rtti();
		}
		public new bool CollidesWith(QCanvasItem arg1) {
			return ProxyQCanvasSprite().CollidesWith(arg1);
		}
		public new QRect BoundingRect() {
			return ProxyQCanvasSprite().BoundingRect();
		}
		public int Width() {
			return ProxyQCanvasSprite().Width();
		}
		public int Height() {
			return ProxyQCanvasSprite().Height();
		}
		public int LeftEdge() {
			return ProxyQCanvasSprite().LeftEdge();
		}
		public int TopEdge() {
			return ProxyQCanvasSprite().TopEdge();
		}
		public int RightEdge() {
			return ProxyQCanvasSprite().RightEdge();
		}
		public int BottomEdge() {
			return ProxyQCanvasSprite().BottomEdge();
		}
		public int LeftEdge(int nx) {
			return ProxyQCanvasSprite().LeftEdge(nx);
		}
		public int TopEdge(int ny) {
			return ProxyQCanvasSprite().TopEdge(ny);
		}
		public int RightEdge(int nx) {
			return ProxyQCanvasSprite().RightEdge(nx);
		}
		public int BottomEdge(int ny) {
			return ProxyQCanvasSprite().BottomEdge(ny);
		}
		public QCanvasPixmap Image() {
			return ProxyQCanvasSprite().Image();
		}
		public virtual QCanvasPixmap ImageAdvanced() {
			return ProxyQCanvasSprite().ImageAdvanced();
		}
		public QCanvasPixmap Image(int f) {
			return ProxyQCanvasSprite().Image(f);
		}
		public new virtual void Advance(int stage) {
			ProxyQCanvasSprite().Advance(stage);
		}
		public new void Draw(QPainter painter) {
			ProxyQCanvasSprite().Draw(painter);
		}
		~QCanvasSprite() {
			ProxyQCanvasSprite().Dispose();
		}
		public new void Dispose() {
			ProxyQCanvasSprite().Dispose();
		}
	}
}
