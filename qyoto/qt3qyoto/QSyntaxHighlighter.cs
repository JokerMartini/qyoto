//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QSyntaxHighlighter : Qt {
 		protected QSyntaxHighlighter(Type dummy) : base((Type) null) {}
		interface IQSyntaxHighlighterProxy {
		}

		protected void CreateQSyntaxHighlighterProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSyntaxHighlighter), this);
			_interceptor = (QSyntaxHighlighter) realProxy.GetTransparentProxy();
		}
		private QSyntaxHighlighter ProxyQSyntaxHighlighter() {
			return (QSyntaxHighlighter) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QSyntaxHighlighter() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSyntaxHighlighterProxy), null);
			_staticInterceptor = (IQSyntaxHighlighterProxy) realProxy.GetTransparentProxy();
		}
		private static IQSyntaxHighlighterProxy StaticQSyntaxHighlighter() {
			return (IQSyntaxHighlighterProxy) _staticInterceptor;
		}

		public virtual int HighlightParagraph(string text, int endStateOfLastPara) {
			return ProxyQSyntaxHighlighter().HighlightParagraph(text,endStateOfLastPara);
		}
		public void SetFormat(int start, int count, QFont font, QColor color) {
			ProxyQSyntaxHighlighter().SetFormat(start,count,font,color);
		}
		public void SetFormat(int start, int count, QColor color) {
			ProxyQSyntaxHighlighter().SetFormat(start,count,color);
		}
		public void SetFormat(int start, int count, QFont font) {
			ProxyQSyntaxHighlighter().SetFormat(start,count,font);
		}
		public QTextEdit TextEdit() {
			return ProxyQSyntaxHighlighter().TextEdit();
		}
		public void Rehighlight() {
			ProxyQSyntaxHighlighter().Rehighlight();
		}
		public int CurrentParagraph() {
			return ProxyQSyntaxHighlighter().CurrentParagraph();
		}
	}
}
