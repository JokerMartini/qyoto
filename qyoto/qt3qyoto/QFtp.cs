//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	/// See <see cref="IQFtpSignals"></see> for signals emitted by QFtp
	public class QFtp : QNetworkProtocol, IDisposable {
 		protected QFtp(Type dummy) : base((Type) null) {}
		interface IQFtpProxy {
			string Tr(string arg1, string arg2);
			string Tr(string arg1);
			string TrUtf8(string arg1, string arg2);
			string TrUtf8(string arg1);
		}

		protected void CreateQFtpProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QFtp), this);
			_interceptor = (QFtp) realProxy.GetTransparentProxy();
		}
		private QFtp ProxyQFtp() {
			return (QFtp) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QFtp() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQFtpProxy), null);
			_staticInterceptor = (IQFtpProxy) realProxy.GetTransparentProxy();
		}
		private static IQFtpProxy StaticQFtp() {
			return (IQFtpProxy) _staticInterceptor;
		}

		enum E_State {
			Unconnected = 0,
			HostLookup = 1,
			Connecting = 2,
			Connected = 3,
			LoggedIn = 4,
			Closing = 5,
		}
		enum E_Error {
			NoError = 0,
			UnknownError = 1,
			HostNotFound = 2,
			ConnectionRefused = 3,
			NotConnected = 4,
		}
		enum Command {
			None = 0,
			ConnectToHost = 1,
			Login = 2,
			Close = 3,
			List = 4,
			Cd = 5,
			Get = 6,
			Put = 7,
			Remove = 8,
			Mkdir = 9,
			Rmdir = 10,
			Rename = 11,
			RawCommand = 12,
		}
		public new virtual QMetaObject MetaObject() {
			return ProxyQFtp().MetaObject();
		}
		public new virtual string ClassName() {
			return ProxyQFtp().ClassName();
		}
		public QFtp() : this((Type) null) {
			CreateQFtpProxy();
			NewQFtp();
		}
		private void NewQFtp() {
			ProxyQFtp().NewQFtp();
		}
		public QFtp(QObject parent, string name) : this((Type) null) {
			CreateQFtpProxy();
			NewQFtp(parent,name);
		}
		private void NewQFtp(QObject parent, string name) {
			ProxyQFtp().NewQFtp(parent,name);
		}
		public QFtp(QObject parent) : this((Type) null) {
			CreateQFtpProxy();
			NewQFtp(parent);
		}
		private void NewQFtp(QObject parent) {
			ProxyQFtp().NewQFtp(parent);
		}
		public new int SupportedOperations() {
			return ProxyQFtp().SupportedOperations();
		}
		public int ConnectToHost(string host, ushort port) {
			return ProxyQFtp().ConnectToHost(host,port);
		}
		public int ConnectToHost(string host) {
			return ProxyQFtp().ConnectToHost(host);
		}
		public int Login(string user, string password) {
			return ProxyQFtp().Login(user,password);
		}
		public int Login(string user) {
			return ProxyQFtp().Login(user);
		}
		public int Login() {
			return ProxyQFtp().Login();
		}
		public int Close() {
			return ProxyQFtp().Close();
		}
		public int List(string dir) {
			return ProxyQFtp().List(dir);
		}
		public int List() {
			return ProxyQFtp().List();
		}
		public int Cd(string dir) {
			return ProxyQFtp().Cd(dir);
		}
		public int Get(string file, IQIODevice dev) {
			return ProxyQFtp().Get(file,dev);
		}
		public int Get(string file) {
			return ProxyQFtp().Get(file);
		}
		public int Put(byte[] data, string file) {
			return ProxyQFtp().Put(data,file);
		}
		public int Put(IQIODevice dev, string file) {
			return ProxyQFtp().Put(dev,file);
		}
		public int Remove(string file) {
			return ProxyQFtp().Remove(file);
		}
		public int Mkdir(string dir) {
			return ProxyQFtp().Mkdir(dir);
		}
		public int Rmdir(string dir) {
			return ProxyQFtp().Rmdir(dir);
		}
		public int Rename(string oldname, string newname) {
			return ProxyQFtp().Rename(oldname,newname);
		}
		public int RawCommand(string command) {
			return ProxyQFtp().RawCommand(command);
		}
		public long BytesAvailable() {
			return ProxyQFtp().BytesAvailable();
		}
		public long ReadBlock(string data, long maxlen) {
			return ProxyQFtp().ReadBlock(data,maxlen);
		}
		public byte[] ReadAll() {
			return ProxyQFtp().ReadAll();
		}
		public int CurrentId() {
			return ProxyQFtp().CurrentId();
		}
		public IQIODevice CurrentDevice() {
			return ProxyQFtp().CurrentDevice();
		}
		public int CurrentCommand() {
			return ProxyQFtp().CurrentCommand();
		}
		public bool HasPendingCommands() {
			return ProxyQFtp().HasPendingCommands();
		}
		public void ClearPendingCommands() {
			ProxyQFtp().ClearPendingCommands();
		}
		public int State() {
			return ProxyQFtp().State();
		}
		public int Error() {
			return ProxyQFtp().Error();
		}
		public string ErrorString() {
			return ProxyQFtp().ErrorString();
		}
		public void Abort() {
			ProxyQFtp().Abort();
		}
		public static new string Tr(string arg1, string arg2) {
			return StaticQFtp().Tr(arg1,arg2);
		}
		public static new string Tr(string arg1) {
			return StaticQFtp().Tr(arg1);
		}
		public static new string TrUtf8(string arg1, string arg2) {
			return StaticQFtp().TrUtf8(arg1,arg2);
		}
		public static new string TrUtf8(string arg1) {
			return StaticQFtp().TrUtf8(arg1);
		}
		protected void ParseDir(string buffer, QUrlInfo info) {
			ProxyQFtp().ParseDir(buffer,info);
		}
		protected new void OperationListChildren(QNetworkOperation op) {
			ProxyQFtp().OperationListChildren(op);
		}
		protected new void OperationMkDir(QNetworkOperation op) {
			ProxyQFtp().OperationMkDir(op);
		}
		protected new void OperationRemove(QNetworkOperation op) {
			ProxyQFtp().OperationRemove(op);
		}
		protected new void OperationRename(QNetworkOperation op) {
			ProxyQFtp().OperationRename(op);
		}
		protected new void OperationGet(QNetworkOperation op) {
			ProxyQFtp().OperationGet(op);
		}
		protected new void OperationPut(QNetworkOperation op) {
			ProxyQFtp().OperationPut(op);
		}
		protected void HostFound() {
			ProxyQFtp().HostFound();
		}
		protected void Connected() {
			ProxyQFtp().Connected();
		}
		protected void Closed() {
			ProxyQFtp().Closed();
		}
		protected void DataHostFound() {
			ProxyQFtp().DataHostFound();
		}
		protected void DataConnected() {
			ProxyQFtp().DataConnected();
		}
		protected void DataClosed() {
			ProxyQFtp().DataClosed();
		}
		protected void DataReadyRead() {
			ProxyQFtp().DataReadyRead();
		}
		protected void DataBytesWritten(int nbytes) {
			ProxyQFtp().DataBytesWritten(nbytes);
		}
		protected void Error(int arg1) {
			ProxyQFtp().Error(arg1);
		}
		~QFtp() {
			ProxyQFtp().Dispose();
		}
		public new void Dispose() {
			ProxyQFtp().Dispose();
		}
	}

	public interface IQFtpSignals {
		void StateChanged(int arg1);
		void ListInfo(QUrlInfo arg1);
		void ReadyRead();
		void DataTransferProgress(int arg1, int arg2);
		void RawCommandReply(int arg1, string arg2);
		void CommandStarted(int arg1);
		void CommandFinished(int arg1, bool arg2);
		void Done(bool arg1);
	}
}
