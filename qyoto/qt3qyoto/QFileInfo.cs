//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QFileInfo : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QFileInfo(Type dummy) {}
		interface IQFileInfoProxy {
		}

		protected void CreateQFileInfoProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QFileInfo), this);
			_interceptor = (QFileInfo) realProxy.GetTransparentProxy();
		}
		private QFileInfo ProxyQFileInfo() {
			return (QFileInfo) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QFileInfo() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQFileInfoProxy), null);
			_staticInterceptor = (IQFileInfoProxy) realProxy.GetTransparentProxy();
		}
		private static IQFileInfoProxy StaticQFileInfo() {
			return (IQFileInfoProxy) _staticInterceptor;
		}

		enum PermissionSpec {
			ReadOwner = 04000,
			WriteOwner = 02000,
			ExeOwner = 01000,
			ReadUser = 00400,
			WriteUser = 00200,
			ExeUser = 00100,
			ReadGroup = 00040,
			WriteGroup = 00020,
			ExeGroup = 00010,
			ReadOther = 00004,
			WriteOther = 00002,
			ExeOther = 00001,
		}
		public QFileInfo() : this((Type) null) {
			CreateQFileInfoProxy();
			NewQFileInfo();
		}
		[SmokeMethod("QFileInfo()")]
		private void NewQFileInfo() {
			ProxyQFileInfo().NewQFileInfo();
		}
		public QFileInfo(string file) : this((Type) null) {
			CreateQFileInfoProxy();
			NewQFileInfo(file);
		}
		[SmokeMethod("QFileInfo(const QString&)")]
		private void NewQFileInfo(string file) {
			ProxyQFileInfo().NewQFileInfo(file);
		}
		public QFileInfo(QFile arg1) : this((Type) null) {
			CreateQFileInfoProxy();
			NewQFileInfo(arg1);
		}
		[SmokeMethod("QFileInfo(const QFile&)")]
		private void NewQFileInfo(QFile arg1) {
			ProxyQFileInfo().NewQFileInfo(arg1);
		}
		public QFileInfo(QDir arg1, string fileName) : this((Type) null) {
			CreateQFileInfoProxy();
			NewQFileInfo(arg1,fileName);
		}
		[SmokeMethod("QFileInfo(const QDir&, const QString&)")]
		private void NewQFileInfo(QDir arg1, string fileName) {
			ProxyQFileInfo().NewQFileInfo(arg1,fileName);
		}
		public QFileInfo(QFileInfo arg1) : this((Type) null) {
			CreateQFileInfoProxy();
			NewQFileInfo(arg1);
		}
		[SmokeMethod("QFileInfo(const QFileInfo&)")]
		private void NewQFileInfo(QFileInfo arg1) {
			ProxyQFileInfo().NewQFileInfo(arg1);
		}
		[SmokeMethod("setFile(const QString&)")]
		public void SetFile(string file) {
			ProxyQFileInfo().SetFile(file);
		}
		[SmokeMethod("setFile(const QFile&)")]
		public void SetFile(QFile arg1) {
			ProxyQFileInfo().SetFile(arg1);
		}
		[SmokeMethod("setFile(const QDir&, const QString&)")]
		public void SetFile(QDir arg1, string fileName) {
			ProxyQFileInfo().SetFile(arg1,fileName);
		}
		[SmokeMethod("exists() const")]
		public bool Exists() {
			return ProxyQFileInfo().Exists();
		}
		[SmokeMethod("refresh() const")]
		public void Refresh() {
			ProxyQFileInfo().Refresh();
		}
		[SmokeMethod("caching() const")]
		public bool Caching() {
			return ProxyQFileInfo().Caching();
		}
		[SmokeMethod("setCaching(bool)")]
		public void SetCaching(bool arg1) {
			ProxyQFileInfo().SetCaching(arg1);
		}
		[SmokeMethod("filePath() const")]
		public string FilePath() {
			return ProxyQFileInfo().FilePath();
		}
		[SmokeMethod("fileName() const")]
		public string FileName() {
			return ProxyQFileInfo().FileName();
		}
		[SmokeMethod("absFilePath() const")]
		public string AbsFilePath() {
			return ProxyQFileInfo().AbsFilePath();
		}
		[SmokeMethod("baseName(bool) const")]
		public string BaseName(bool complete) {
			return ProxyQFileInfo().BaseName(complete);
		}
		[SmokeMethod("baseName() const")]
		public string BaseName() {
			return ProxyQFileInfo().BaseName();
		}
		[SmokeMethod("extension(bool) const")]
		public string Extension(bool complete) {
			return ProxyQFileInfo().Extension(complete);
		}
		[SmokeMethod("extension() const")]
		public string Extension() {
			return ProxyQFileInfo().Extension();
		}
		[SmokeMethod("dirPath(bool) const")]
		public string DirPath(bool absPath) {
			return ProxyQFileInfo().DirPath(absPath);
		}
		[SmokeMethod("dirPath() const")]
		public string DirPath() {
			return ProxyQFileInfo().DirPath();
		}
		[SmokeMethod("dir(bool) const")]
		public QDir Dir(bool absPath) {
			return ProxyQFileInfo().Dir(absPath);
		}
		[SmokeMethod("dir() const")]
		public QDir Dir() {
			return ProxyQFileInfo().Dir();
		}
		[SmokeMethod("isReadable() const")]
		public bool IsReadable() {
			return ProxyQFileInfo().IsReadable();
		}
		[SmokeMethod("isWritable() const")]
		public bool IsWritable() {
			return ProxyQFileInfo().IsWritable();
		}
		[SmokeMethod("isExecutable() const")]
		public bool IsExecutable() {
			return ProxyQFileInfo().IsExecutable();
		}
		[SmokeMethod("isHidden() const")]
		public bool IsHidden() {
			return ProxyQFileInfo().IsHidden();
		}
		[SmokeMethod("isRelative() const")]
		public bool IsRelative() {
			return ProxyQFileInfo().IsRelative();
		}
		[SmokeMethod("convertToAbs()")]
		public bool ConvertToAbs() {
			return ProxyQFileInfo().ConvertToAbs();
		}
		[SmokeMethod("isFile() const")]
		public bool IsFile() {
			return ProxyQFileInfo().IsFile();
		}
		[SmokeMethod("isDir() const")]
		public bool IsDir() {
			return ProxyQFileInfo().IsDir();
		}
		[SmokeMethod("isSymLink() const")]
		public bool IsSymLink() {
			return ProxyQFileInfo().IsSymLink();
		}
		[SmokeMethod("readLink() const")]
		public string ReadLink() {
			return ProxyQFileInfo().ReadLink();
		}
		[SmokeMethod("owner() const")]
		public string Owner() {
			return ProxyQFileInfo().Owner();
		}
		[SmokeMethod("ownerId() const")]
		public uint OwnerId() {
			return ProxyQFileInfo().OwnerId();
		}
		[SmokeMethod("group() const")]
		public string Group() {
			return ProxyQFileInfo().Group();
		}
		[SmokeMethod("groupId() const")]
		public uint GroupId() {
			return ProxyQFileInfo().GroupId();
		}
		[SmokeMethod("permission(int) const")]
		public bool Permission(int permissionSpec) {
			return ProxyQFileInfo().Permission(permissionSpec);
		}
		[SmokeMethod("size() const")]
		public ulong Size() {
			return ProxyQFileInfo().Size();
		}
		[SmokeMethod("created() const")]
		public DateTime Created() {
			return ProxyQFileInfo().Created();
		}
		[SmokeMethod("lastModified() const")]
		public DateTime LastModified() {
			return ProxyQFileInfo().LastModified();
		}
		[SmokeMethod("lastRead() const")]
		public DateTime LastRead() {
			return ProxyQFileInfo().LastRead();
		}
		~QFileInfo() {
			DisposeQFileInfo();
		}
		public void Dispose() {
			DisposeQFileInfo();
		}
		private void DisposeQFileInfo() {
			ProxyQFileInfo().DisposeQFileInfo();
		}
	}
}
