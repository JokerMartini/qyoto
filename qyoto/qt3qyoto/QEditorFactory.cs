//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QEditorFactory : QObject, IDisposable {
 		protected QEditorFactory(Type dummy) : base((Type) null) {}
		interface IQEditorFactoryProxy {
			QEditorFactory DefaultFactory();
			void InstallDefaultFactory(QEditorFactory factory);
		}

		protected void CreateQEditorFactoryProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QEditorFactory), this);
			_interceptor = (QEditorFactory) realProxy.GetTransparentProxy();
		}
		private QEditorFactory ProxyQEditorFactory() {
			return (QEditorFactory) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QEditorFactory() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQEditorFactoryProxy), null);
			_staticInterceptor = (IQEditorFactoryProxy) realProxy.GetTransparentProxy();
		}
		private static IQEditorFactoryProxy StaticQEditorFactory() {
			return (IQEditorFactoryProxy) _staticInterceptor;
		}

		public QEditorFactory(QObject parent, string name) : this((Type) null) {
			CreateQEditorFactoryProxy();
			NewQEditorFactory(parent,name);
		}
		private void NewQEditorFactory(QObject parent, string name) {
			ProxyQEditorFactory().NewQEditorFactory(parent,name);
		}
		public QEditorFactory(QObject parent) : this((Type) null) {
			CreateQEditorFactoryProxy();
			NewQEditorFactory(parent);
		}
		private void NewQEditorFactory(QObject parent) {
			ProxyQEditorFactory().NewQEditorFactory(parent);
		}
		public QEditorFactory() : this((Type) null) {
			CreateQEditorFactoryProxy();
			NewQEditorFactory();
		}
		private void NewQEditorFactory() {
			ProxyQEditorFactory().NewQEditorFactory();
		}
		public virtual QWidget CreateEditor(QWidget parent, QVariant v) {
			return ProxyQEditorFactory().CreateEditor(parent,v);
		}
		public static QEditorFactory DefaultFactory() {
			return StaticQEditorFactory().DefaultFactory();
		}
		public static void InstallDefaultFactory(QEditorFactory factory) {
			StaticQEditorFactory().InstallDefaultFactory(factory);
		}
		~QEditorFactory() {
			ProxyQEditorFactory().Dispose();
		}
		public new void Dispose() {
			ProxyQEditorFactory().Dispose();
		}
	}
}
