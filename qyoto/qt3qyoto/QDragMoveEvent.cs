//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	[SmokeClass("QDragMoveEvent")]
	public class QDragMoveEvent : QDropEvent, IDisposable {
 		protected QDragMoveEvent(Type dummy) : base((Type) null) {}
		interface IQDragMoveEventProxy {
		}

		protected void CreateQDragMoveEventProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDragMoveEvent), this);
			_interceptor = (QDragMoveEvent) realProxy.GetTransparentProxy();
		}
		private QDragMoveEvent ProxyQDragMoveEvent() {
			return (QDragMoveEvent) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QDragMoveEvent() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDragMoveEventProxy), null);
			_staticInterceptor = (IQDragMoveEventProxy) realProxy.GetTransparentProxy();
		}
		private static IQDragMoveEventProxy StaticQDragMoveEvent() {
			return (IQDragMoveEventProxy) _staticInterceptor;
		}

		public QDragMoveEvent(QPoint pos, int typ) : this((Type) null) {
			CreateQDragMoveEventProxy();
			NewQDragMoveEvent(pos,typ);
		}
		[SmokeMethod("QDragMoveEvent(const QPoint&, QEvent::Type)")]
		private void NewQDragMoveEvent(QPoint pos, int typ) {
			ProxyQDragMoveEvent().NewQDragMoveEvent(pos,typ);
		}
		public QDragMoveEvent(QPoint pos) : this((Type) null) {
			CreateQDragMoveEventProxy();
			NewQDragMoveEvent(pos);
		}
		[SmokeMethod("QDragMoveEvent(const QPoint&)")]
		private void NewQDragMoveEvent(QPoint pos) {
			ProxyQDragMoveEvent().NewQDragMoveEvent(pos);
		}
		[SmokeMethod("answerRect() const")]
		public QRect AnswerRect() {
			return ProxyQDragMoveEvent().AnswerRect();
		}
		[SmokeMethod("accept(bool)")]
		public new void Accept(bool y) {
			ProxyQDragMoveEvent().Accept(y);
		}
		[SmokeMethod("accept()")]
		public new void Accept() {
			ProxyQDragMoveEvent().Accept();
		}
		[SmokeMethod("accept(const QRect&)")]
		public new void Accept(QRect r) {
			ProxyQDragMoveEvent().Accept(r);
		}
		[SmokeMethod("ignore(const QRect&)")]
		public new void Ignore(QRect r) {
			ProxyQDragMoveEvent().Ignore(r);
		}
		[SmokeMethod("ignore()")]
		public new void Ignore() {
			ProxyQDragMoveEvent().Ignore();
		}
		~QDragMoveEvent() {
			DisposeQDragMoveEvent();
		}
		public new void Dispose() {
			DisposeQDragMoveEvent();
		}
		private void DisposeQDragMoveEvent() {
			ProxyQDragMoveEvent().DisposeQDragMoveEvent();
		}
	}
}
