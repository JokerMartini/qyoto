//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QFile : QIODevice, IDisposable {
 		protected QFile(Type dummy) : base((Type) null) {}
		interface IQFileProxy {
			string EncodeName(string fileName);
			string DecodeName(string localFileName);
			bool Exists(string fileName);
			bool Remove(string fileName);
		}

		protected void CreateQFileProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QFile), this);
			_interceptor = (QFile) realProxy.GetTransparentProxy();
		}
		private QFile ProxyQFile() {
			return (QFile) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QFile() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQFileProxy), null);
			_staticInterceptor = (IQFileProxy) realProxy.GetTransparentProxy();
		}
		private static IQFileProxy StaticQFile() {
			return (IQFileProxy) _staticInterceptor;
		}

		public QFile() : this((Type) null) {
			CreateQFileProxy();
			NewQFile();
		}
		private void NewQFile() {
			ProxyQFile().NewQFile();
		}
		public QFile(string name) : this((Type) null) {
			CreateQFileProxy();
			NewQFile(name);
		}
		private void NewQFile(string name) {
			ProxyQFile().NewQFile(name);
		}
		public string Name() {
			return ProxyQFile().Name();
		}
		public void SetName(string name) {
			ProxyQFile().SetName(name);
		}
		public bool Exists() {
			return ProxyQFile().Exists();
		}
		public bool Remove() {
			return ProxyQFile().Remove();
		}
		public new bool Open(int arg1) {
			return ProxyQFile().Open(arg1);
		}
		public new bool Open(int arg1, int arg2) {
			return ProxyQFile().Open(arg1,arg2);
		}
		public new void Close() {
			ProxyQFile().Close();
		}
		public new void Flush() {
			ProxyQFile().Flush();
		}
		public new ulong Size() {
			return ProxyQFile().Size();
		}
		public new ulong At() {
			return ProxyQFile().At();
		}
		public new bool At(ulong arg1) {
			return ProxyQFile().At(arg1);
		}
		public new bool AtEnd() {
			return ProxyQFile().AtEnd();
		}
		public new long ReadBlock(string data, long len) {
			return ProxyQFile().ReadBlock(data,len);
		}
		public new long WriteBlock(string data, long len) {
			return ProxyQFile().WriteBlock(data,len);
		}
		public new long WriteBlock(byte[] data) {
			return ProxyQFile().WriteBlock(data);
		}
		public new long ReadLine(string data, long maxlen) {
			return ProxyQFile().ReadLine(data,maxlen);
		}
		public new long ReadLine(StringBuilder arg1, long maxlen) {
			return ProxyQFile().ReadLine(arg1,maxlen);
		}
		public new int Getch() {
			return ProxyQFile().Getch();
		}
		public new int Putch(int arg1) {
			return ProxyQFile().Putch(arg1);
		}
		public new int Ungetch(int arg1) {
			return ProxyQFile().Ungetch(arg1);
		}
		public int Handle() {
			return ProxyQFile().Handle();
		}
		public string ErrorString() {
			return ProxyQFile().ErrorString();
		}
		public static string EncodeName(string fileName) {
			return StaticQFile().EncodeName(fileName);
		}
		public static string DecodeName(string localFileName) {
			return StaticQFile().DecodeName(localFileName);
		}
		public static bool Exists(string fileName) {
			return StaticQFile().Exists(fileName);
		}
		public static bool Remove(string fileName) {
			return StaticQFile().Remove(fileName);
		}
		protected void SetErrorString(string arg1) {
			ProxyQFile().SetErrorString(arg1);
		}
		~QFile() {
			ProxyQFile().Dispose();
		}
		public void Dispose() {
			ProxyQFile().Dispose();
		}
	}
}
