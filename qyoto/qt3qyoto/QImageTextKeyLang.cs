//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QImageTextKeyLang : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QImageTextKeyLang(Type dummy) {}
		interface IQImageTextKeyLangProxy {
			bool op_lt(QImageTextKeyLang lhs, QImageTextKeyLang other);
			bool op_equals(QImageTextKeyLang lhs, QImageTextKeyLang other);
		}

		protected void CreateQImageTextKeyLangProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QImageTextKeyLang), this);
			_interceptor = (QImageTextKeyLang) realProxy.GetTransparentProxy();
		}
		private QImageTextKeyLang ProxyQImageTextKeyLang() {
			return (QImageTextKeyLang) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QImageTextKeyLang() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQImageTextKeyLangProxy), null);
			_staticInterceptor = (IQImageTextKeyLangProxy) realProxy.GetTransparentProxy();
		}
		private static IQImageTextKeyLangProxy StaticQImageTextKeyLang() {
			return (IQImageTextKeyLangProxy) _staticInterceptor;
		}

		public QImageTextKeyLang(string k, string l) : this((Type) null) {
			CreateQImageTextKeyLangProxy();
			NewQImageTextKeyLang(k,l);
		}
		private void NewQImageTextKeyLang(string k, string l) {
			ProxyQImageTextKeyLang().NewQImageTextKeyLang(k,l);
		}
		public QImageTextKeyLang() : this((Type) null) {
			CreateQImageTextKeyLangProxy();
			NewQImageTextKeyLang();
		}
		private void NewQImageTextKeyLang() {
			ProxyQImageTextKeyLang().NewQImageTextKeyLang();
		}
		public static bool operator<(QImageTextKeyLang lhs, QImageTextKeyLang other) {
			return StaticQImageTextKeyLang().op_lt(lhs,other);
		}
		public static bool operator==(QImageTextKeyLang lhs, QImageTextKeyLang other) {
			return StaticQImageTextKeyLang().op_equals(lhs,other);
		}
		public static bool operator!=(QImageTextKeyLang lhs, QImageTextKeyLang other) {
			return !StaticQImageTextKeyLang().op_equals(lhs,other);
		}
		public override bool Equals(object o) {
			if (!(o is QImageTextKeyLang)) { return false; }
			return this == (QImageTextKeyLang) o;
		}
		public override int GetHashCode() {
			return ProxyQImageTextKeyLang().GetHashCode();
		}
		~QImageTextKeyLang() {
			ProxyQImageTextKeyLang().Dispose();
		}
		public void Dispose() {
			ProxyQImageTextKeyLang().Dispose();
		}
	}
}
