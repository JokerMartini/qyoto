//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QMetaData : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QMetaData(Type dummy) {}
		interface IQMetaDataProxy {
		}

		protected void CreateQMetaDataProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QMetaData), this);
			_interceptor = (QMetaData) realProxy.GetTransparentProxy();
		}
		private QMetaData ProxyQMetaData() {
			return (QMetaData) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QMetaData() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQMetaDataProxy), null);
			_staticInterceptor = (IQMetaDataProxy) realProxy.GetTransparentProxy();
		}
		private static IQMetaDataProxy StaticQMetaData() {
			return (IQMetaDataProxy) _staticInterceptor;
		}

		enum Access {
			Private = 0,
			Protected = 1,
			Public = 2,
		}
		public QMetaData() : this((Type) null) {
			CreateQMetaDataProxy();
			NewQMetaData();
		}
		private void NewQMetaData() {
			ProxyQMetaData().NewQMetaData();
		}
		~QMetaData() {
			ProxyQMetaData().Dispose();
		}
		public void Dispose() {
			ProxyQMetaData().Dispose();
		}
	}
}
