//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QDataStream : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QDataStream(Type dummy) {}
		interface IQDataStreamProxy {
			QDataStream op_read(QDataStream lhs, char i);
			QDataStream op_read(QDataStream lhs, ushort i);
			QDataStream op_read(QDataStream lhs, short i);
			QDataStream op_read(QDataStream lhs, int i);
			QDataStream op_read(QDataStream lhs, uint i);
			QDataStream op_read(QDataStream lhs, long i);
			QDataStream op_read(QDataStream lhs, float f);
			QDataStream op_read(QDataStream lhs, double f);
			QDataStream op_read(QDataStream lhs, string str);
			QDataStream op_write(QDataStream lhs, char i);
			QDataStream op_write(QDataStream lhs, ushort i);
			QDataStream op_write(QDataStream lhs, short i);
			QDataStream op_write(QDataStream lhs, int i);
			QDataStream op_write(QDataStream lhs, uint i);
			QDataStream op_write(QDataStream lhs, long i);
			QDataStream op_write(QDataStream lhs, float f);
			QDataStream op_write(QDataStream lhs, double f);
			QDataStream op_write(QDataStream lhs, string str);
		}

		protected void CreateQDataStreamProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDataStream), this);
			_interceptor = (QDataStream) realProxy.GetTransparentProxy();
		}
		private QDataStream ProxyQDataStream() {
			return (QDataStream) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QDataStream() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDataStreamProxy), null);
			_staticInterceptor = (IQDataStreamProxy) realProxy.GetTransparentProxy();
		}
		private static IQDataStreamProxy StaticQDataStream() {
			return (IQDataStreamProxy) _staticInterceptor;
		}

		enum E_ByteOrder {
			BigEndian = 0,
			LittleEndian = 1,
		}
		public QDataStream() : this((Type) null) {
			CreateQDataStreamProxy();
			NewQDataStream();
		}
		private void NewQDataStream() {
			ProxyQDataStream().NewQDataStream();
		}
		public QDataStream(IQIODevice arg1) : this((Type) null) {
			CreateQDataStreamProxy();
			NewQDataStream(arg1);
		}
		private void NewQDataStream(IQIODevice arg1) {
			ProxyQDataStream().NewQDataStream(arg1);
		}
		public QDataStream(byte[] arg1, int mode) : this((Type) null) {
			CreateQDataStreamProxy();
			NewQDataStream(arg1,mode);
		}
		private void NewQDataStream(byte[] arg1, int mode) {
			ProxyQDataStream().NewQDataStream(arg1,mode);
		}
		public IQIODevice Device() {
			return ProxyQDataStream().Device();
		}
		public void SetDevice(IQIODevice arg1) {
			ProxyQDataStream().SetDevice(arg1);
		}
		public void UnsetDevice() {
			ProxyQDataStream().UnsetDevice();
		}
		public bool AtEnd() {
			return ProxyQDataStream().AtEnd();
		}
		public bool Eof() {
			return ProxyQDataStream().Eof();
		}
		public int ByteOrder() {
			return ProxyQDataStream().ByteOrder();
		}
		public void SetByteOrder(int arg1) {
			ProxyQDataStream().SetByteOrder(arg1);
		}
		public bool IsPrintableData() {
			return ProxyQDataStream().IsPrintableData();
		}
		public void SetPrintableData(bool arg1) {
			ProxyQDataStream().SetPrintableData(arg1);
		}
		public int Version() {
			return ProxyQDataStream().Version();
		}
		public void SetVersion(int arg1) {
			ProxyQDataStream().SetVersion(arg1);
		}
		/*public static QDataStream operator>>(QDataStream lhs, char i) {
			return StaticQDataStream().op_read(lhs,i);
		}
		public static QDataStream operator>>(QDataStream lhs, ushort i) {
			return StaticQDataStream().op_read(lhs,i);
		}
		public static QDataStream operator>>(QDataStream lhs, short i) {
			return StaticQDataStream().op_read(lhs,i);
		}
		public static QDataStream operator>>(QDataStream lhs, int i) {
			return StaticQDataStream().op_read(lhs,i);
		}
		public static QDataStream operator>>(QDataStream lhs, uint i) {
			return StaticQDataStream().op_read(lhs,i);
		}
		// QDataStream& operator>>(Q_INT64& arg1); >>>> NOT CONVERTED
		// QDataStream& operator>>(Q_UINT64& arg1); >>>> NOT CONVERTED
		public static QDataStream operator>>(QDataStream lhs, long i) {
			return StaticQDataStream().op_read(lhs,i);
		}
		public static QDataStream operator>>(QDataStream lhs, float f) {
			return StaticQDataStream().op_read(lhs,f);
		}
		public static QDataStream operator>>(QDataStream lhs, double f) {
			return StaticQDataStream().op_read(lhs,f);
		}
		public static QDataStream operator>>(QDataStream lhs, string str) {
			return StaticQDataStream().op_read(lhs,str);
		}
		public static QDataStream operator<<(QDataStream lhs, char i) {
			return StaticQDataStream().op_write(lhs,i);
		}
		public static QDataStream operator<<(QDataStream lhs, ushort i) {
			return StaticQDataStream().op_write(lhs,i);
		}
		public static QDataStream operator<<(QDataStream lhs, short i) {
			return StaticQDataStream().op_write(lhs,i);
		}
		public static QDataStream operator<<(QDataStream lhs, int i) {
			return StaticQDataStream().op_write(lhs,i);
		}
		public static QDataStream operator<<(QDataStream lhs, uint i) {
			return StaticQDataStream().op_write(lhs,i);
		}
		public static QDataStream operator<<(QDataStream lhs, long i) {
			return StaticQDataStream().op_write(lhs,i);
		}
		public static QDataStream operator<<(QDataStream lhs, float f) {
			return StaticQDataStream().op_write(lhs,f);
		}
		public static QDataStream operator<<(QDataStream lhs, double f) {
			return StaticQDataStream().op_write(lhs,f);
		}
		public static QDataStream operator<<(QDataStream lhs, string str) {
			return StaticQDataStream().op_write(lhs,str);
		}*/
		public QDataStream ReadBytes(string arg1, uint len) {
			return ProxyQDataStream().ReadBytes(arg1,len);
		}
		public QDataStream ReadRawBytes(string arg1, uint len) {
			return ProxyQDataStream().ReadRawBytes(arg1,len);
		}
		public QDataStream WriteBytes(string arg1, uint len) {
			return ProxyQDataStream().WriteBytes(arg1,len);
		}
		public QDataStream WriteRawBytes(string arg1, uint len) {
			return ProxyQDataStream().WriteRawBytes(arg1,len);
		}
		~QDataStream() {
			ProxyQDataStream().Dispose();
		}
		public void Dispose() {
			ProxyQDataStream().Dispose();
		}
	}
}
