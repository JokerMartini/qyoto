//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	[SmokeClass("QByteArray")]
	public class QByteArray : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QByteArray(Type dummy) {}
		interface IQByteArrayProxy {
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QByteArray), this);
			_interceptor = (QByteArray) realProxy.GetTransparentProxy();
		}
		private QByteArray ProxyQByteArray() {
			return (QByteArray) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QByteArray() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQByteArrayProxy), null);
			_staticInterceptor = (IQByteArrayProxy) realProxy.GetTransparentProxy();
		}
		private static IQByteArrayProxy StaticQByteArray() {
			return (IQByteArrayProxy) _staticInterceptor;
		}

		public QByteArray() : this((Type) null) {
			CreateProxy();
			NewQByteArray();
		}
		[SmokeMethod("QByteArray()")]
		private void NewQByteArray() {
			ProxyQByteArray().NewQByteArray();
		}
		public QByteArray(int size) : this((Type) null) {
			CreateProxy();
			NewQByteArray(size);
		}
		[SmokeMethod("QByteArray(int)")]
		private void NewQByteArray(int size) {
			ProxyQByteArray().NewQByteArray(size);
		}
		~QByteArray() {
			DisposeQByteArray();
		}
		public void Dispose() {
			DisposeQByteArray();
		}
		private void DisposeQByteArray() {
			ProxyQByteArray().DisposeQByteArray();
		}
	
	}
}
