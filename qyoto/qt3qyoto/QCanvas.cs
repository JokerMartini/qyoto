//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Collections;
	using System.Text;

	/// See <see cref="IQCanvasSignals"></see> for signals emitted by QCanvas
	[SmokeClass("QCanvas")]
	public class QCanvas : QObject, IDisposable {
 		protected QCanvas(Type dummy) : base((Type) null) {}
		interface IQCanvasProxy {
			string Tr(string arg1, string arg2);
			string Tr(string arg1);
			string TrUtf8(string arg1, string arg2);
			string TrUtf8(string arg1);
		}

		protected void CreateQCanvasProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QCanvas), this);
			_interceptor = (QCanvas) realProxy.GetTransparentProxy();
		}
		private QCanvas ProxyQCanvas() {
			return (QCanvas) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QCanvas() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQCanvasProxy), null);
			_staticInterceptor = (IQCanvasProxy) realProxy.GetTransparentProxy();
		}
		private static IQCanvasProxy StaticQCanvas() {
			return (IQCanvasProxy) _staticInterceptor;
		}

		[SmokeMethod("metaObject() const")]
		public new virtual QMetaObject MetaObject() {
			return ProxyQCanvas().MetaObject();
		}
		[SmokeMethod("className() const")]
		public new virtual string ClassName() {
			return ProxyQCanvas().ClassName();
		}
		public QCanvas(QObject parent, string name) : this((Type) null) {
			CreateQCanvasProxy();
			CreateQCanvasSignalProxy();
			NewQCanvas(parent,name);
		}
		[SmokeMethod("QCanvas(QObject*, const char*)")]
		private void NewQCanvas(QObject parent, string name) {
			ProxyQCanvas().NewQCanvas(parent,name);
		}
		public QCanvas(QObject parent) : this((Type) null) {
			CreateQCanvasProxy();
			CreateQCanvasSignalProxy();
			NewQCanvas(parent);
		}
		[SmokeMethod("QCanvas(QObject*)")]
		private void NewQCanvas(QObject parent) {
			ProxyQCanvas().NewQCanvas(parent);
		}
		public QCanvas() : this((Type) null) {
			CreateQCanvasProxy();
			CreateQCanvasSignalProxy();
			NewQCanvas();
		}
		[SmokeMethod("QCanvas()")]
		private void NewQCanvas() {
			ProxyQCanvas().NewQCanvas();
		}
		public QCanvas(int w, int h) : this((Type) null) {
			CreateQCanvasProxy();
			CreateQCanvasSignalProxy();
			NewQCanvas(w,h);
		}
		[SmokeMethod("QCanvas(int, int)")]
		private void NewQCanvas(int w, int h) {
			ProxyQCanvas().NewQCanvas(w,h);
		}
		public QCanvas(QPixmap p, int h, int v, int tilewidth, int tileheight) : this((Type) null) {
			CreateQCanvasProxy();
			CreateQCanvasSignalProxy();
			NewQCanvas(p,h,v,tilewidth,tileheight);
		}
		[SmokeMethod("QCanvas(QPixmap, int, int, int, int)")]
		private void NewQCanvas(QPixmap p, int h, int v, int tilewidth, int tileheight) {
			ProxyQCanvas().NewQCanvas(p,h,v,tilewidth,tileheight);
		}
		[SmokeMethod("setTiles(QPixmap, int, int, int, int)")]
		public virtual void SetTiles(QPixmap tiles, int h, int v, int tilewidth, int tileheight) {
			ProxyQCanvas().SetTiles(tiles,h,v,tilewidth,tileheight);
		}
		[SmokeMethod("setBackgroundPixmap(const QPixmap&)")]
		public virtual void SetBackgroundPixmap(QPixmap p) {
			ProxyQCanvas().SetBackgroundPixmap(p);
		}
		[SmokeMethod("backgroundPixmap() const")]
		public QPixmap BackgroundPixmap() {
			return ProxyQCanvas().BackgroundPixmap();
		}
		[SmokeMethod("setBackgroundColor(const QColor&)")]
		public virtual void SetBackgroundColor(QColor c) {
			ProxyQCanvas().SetBackgroundColor(c);
		}
		[SmokeMethod("backgroundColor() const")]
		public QColor BackgroundColor() {
			return ProxyQCanvas().BackgroundColor();
		}
		[SmokeMethod("setTile(int, int, int)")]
		public virtual void SetTile(int x, int y, int tilenum) {
			ProxyQCanvas().SetTile(x,y,tilenum);
		}
		[SmokeMethod("tile(int, int) const")]
		public int Tile(int x, int y) {
			return ProxyQCanvas().Tile(x,y);
		}
		[SmokeMethod("tilesHorizontally() const")]
		public int TilesHorizontally() {
			return ProxyQCanvas().TilesHorizontally();
		}
		[SmokeMethod("tilesVertically() const")]
		public int TilesVertically() {
			return ProxyQCanvas().TilesVertically();
		}
		[SmokeMethod("tileWidth() const")]
		public int TileWidth() {
			return ProxyQCanvas().TileWidth();
		}
		[SmokeMethod("tileHeight() const")]
		public int TileHeight() {
			return ProxyQCanvas().TileHeight();
		}
		[SmokeMethod("resize(int, int)")]
		public virtual void Resize(int width, int height) {
			ProxyQCanvas().Resize(width,height);
		}
		[SmokeMethod("width() const")]
		public int Width() {
			return ProxyQCanvas().Width();
		}
		[SmokeMethod("height() const")]
		public int Height() {
			return ProxyQCanvas().Height();
		}
		[SmokeMethod("size() const")]
		public QSize Size() {
			return ProxyQCanvas().Size();
		}
		[SmokeMethod("rect() const")]
		public QRect Rect() {
			return ProxyQCanvas().Rect();
		}
		[SmokeMethod("onCanvas(int, int) const")]
		public bool OnCanvas(int x, int y) {
			return ProxyQCanvas().OnCanvas(x,y);
		}
		[SmokeMethod("onCanvas(const QPoint&) const")]
		public bool OnCanvas(QPoint p) {
			return ProxyQCanvas().OnCanvas(p);
		}
		[SmokeMethod("validChunk(int, int) const")]
		public bool ValidChunk(int x, int y) {
			return ProxyQCanvas().ValidChunk(x,y);
		}
		[SmokeMethod("validChunk(const QPoint&) const")]
		public bool ValidChunk(QPoint p) {
			return ProxyQCanvas().ValidChunk(p);
		}
		[SmokeMethod("chunkSize() const")]
		public int ChunkSize() {
			return ProxyQCanvas().ChunkSize();
		}
		[SmokeMethod("retune(int, int)")]
		public virtual void Retune(int chunksize, int maxclusters) {
			ProxyQCanvas().Retune(chunksize,maxclusters);
		}
		[SmokeMethod("retune(int)")]
		public virtual void Retune(int chunksize) {
			ProxyQCanvas().Retune(chunksize);
		}
		[SmokeMethod("sameChunk(int, int, int, int) const")]
		public bool SameChunk(int x1, int y1, int x2, int y2) {
			return ProxyQCanvas().SameChunk(x1,y1,x2,y2);
		}
		[SmokeMethod("setChangedChunk(int, int)")]
		public virtual void SetChangedChunk(int i, int j) {
			ProxyQCanvas().SetChangedChunk(i,j);
		}
		[SmokeMethod("setChangedChunkContaining(int, int)")]
		public virtual void SetChangedChunkContaining(int x, int y) {
			ProxyQCanvas().SetChangedChunkContaining(x,y);
		}
		[SmokeMethod("setAllChanged()")]
		public virtual void SetAllChanged() {
			ProxyQCanvas().SetAllChanged();
		}
		[SmokeMethod("setChanged(const QRect&)")]
		public virtual void SetChanged(QRect area) {
			ProxyQCanvas().SetChanged(area);
		}
		[SmokeMethod("setUnchanged(const QRect&)")]
		public virtual void SetUnchanged(QRect area) {
			ProxyQCanvas().SetUnchanged(area);
		}
		[SmokeMethod("addItemToChunk(QCanvasItem*, int, int)")]
		public void AddItemToChunk(QCanvasItem arg1, int i, int j) {
			ProxyQCanvas().AddItemToChunk(arg1,i,j);
		}
		[SmokeMethod("removeItemFromChunk(QCanvasItem*, int, int)")]
		public void RemoveItemFromChunk(QCanvasItem arg1, int i, int j) {
			ProxyQCanvas().RemoveItemFromChunk(arg1,i,j);
		}
		[SmokeMethod("addItemToChunkContaining(QCanvasItem*, int, int)")]
		public void AddItemToChunkContaining(QCanvasItem arg1, int x, int y) {
			ProxyQCanvas().AddItemToChunkContaining(arg1,x,y);
		}
		[SmokeMethod("removeItemFromChunkContaining(QCanvasItem*, int, int)")]
		public void RemoveItemFromChunkContaining(QCanvasItem arg1, int x, int y) {
			ProxyQCanvas().RemoveItemFromChunkContaining(arg1,x,y);
		}
		[SmokeMethod("allItems()")]
		public ArrayList AllItems() {
			return ProxyQCanvas().AllItems();
		}
		[SmokeMethod("collisions(const QPoint&) const")]
		public ArrayList Collisions(QPoint arg1) {
			return ProxyQCanvas().Collisions(arg1);
		}
		[SmokeMethod("collisions(const QRect&) const")]
		public ArrayList Collisions(QRect arg1) {
			return ProxyQCanvas().Collisions(arg1);
		}
		[SmokeMethod("collisions(const QPointArray&, const QCanvasItem*, bool) const")]
		public ArrayList Collisions(QPointArray pa, QCanvasItem item, bool exact) {
			return ProxyQCanvas().Collisions(pa,item,exact);
		}
		[SmokeMethod("drawArea(const QRect&, QPainter*, bool)")]
		public void DrawArea(QRect arg1, QPainter p, bool double_buffer) {
			ProxyQCanvas().DrawArea(arg1,p,double_buffer);
		}
		[SmokeMethod("drawArea(const QRect&, QPainter*)")]
		public void DrawArea(QRect arg1, QPainter p) {
			ProxyQCanvas().DrawArea(arg1,p);
		}
		[SmokeMethod("addView(QCanvasView*)")]
		public virtual void AddView(QCanvasView arg1) {
			ProxyQCanvas().AddView(arg1);
		}
		[SmokeMethod("removeView(QCanvasView*)")]
		public virtual void RemoveView(QCanvasView arg1) {
			ProxyQCanvas().RemoveView(arg1);
		}
		[SmokeMethod("drawCanvasArea(const QRect&, QPainter*, bool)")]
		public void DrawCanvasArea(QRect arg1, QPainter p, bool double_buffer) {
			ProxyQCanvas().DrawCanvasArea(arg1,p,double_buffer);
		}
		[SmokeMethod("drawCanvasArea(const QRect&, QPainter*)")]
		public void DrawCanvasArea(QRect arg1, QPainter p) {
			ProxyQCanvas().DrawCanvasArea(arg1,p);
		}
		[SmokeMethod("drawCanvasArea(const QRect&)")]
		public void DrawCanvasArea(QRect arg1) {
			ProxyQCanvas().DrawCanvasArea(arg1);
		}
		[SmokeMethod("drawViewArea(QCanvasView*, QPainter*, const QRect&, bool)")]
		public void DrawViewArea(QCanvasView view, QPainter p, QRect r, bool dbuf) {
			ProxyQCanvas().DrawViewArea(view,p,r,dbuf);
		}
		[SmokeMethod("addItem(QCanvasItem*)")]
		public virtual void AddItem(QCanvasItem arg1) {
			ProxyQCanvas().AddItem(arg1);
		}
		[SmokeMethod("addAnimation(QCanvasItem*)")]
		public virtual void AddAnimation(QCanvasItem arg1) {
			ProxyQCanvas().AddAnimation(arg1);
		}
		[SmokeMethod("removeItem(QCanvasItem*)")]
		public virtual void RemoveItem(QCanvasItem arg1) {
			ProxyQCanvas().RemoveItem(arg1);
		}
		[SmokeMethod("removeAnimation(QCanvasItem*)")]
		public virtual void RemoveAnimation(QCanvasItem arg1) {
			ProxyQCanvas().RemoveAnimation(arg1);
		}
		[SmokeMethod("setAdvancePeriod(int)")]
		public virtual void SetAdvancePeriod(int ms) {
			ProxyQCanvas().SetAdvancePeriod(ms);
		}
		[SmokeMethod("setUpdatePeriod(int)")]
		public virtual void SetUpdatePeriod(int ms) {
			ProxyQCanvas().SetUpdatePeriod(ms);
		}
		[SmokeMethod("setDoubleBuffering(bool)")]
		public virtual void SetDoubleBuffering(bool y) {
			ProxyQCanvas().SetDoubleBuffering(y);
		}
		[Q_SLOT("void advance()")]
		[SmokeMethod("advance()")]
		public virtual void Advance() {
			ProxyQCanvas().Advance();
		}
		[Q_SLOT("void update()")]
		[SmokeMethod("update()")]
		public virtual void Update() {
			ProxyQCanvas().Update();
		}
		[SmokeMethod("tr(const char*, const char*)")]
		public static new string Tr(string arg1, string arg2) {
			return StaticQCanvas().Tr(arg1,arg2);
		}
		[SmokeMethod("tr(const char*)")]
		public static new string Tr(string arg1) {
			return StaticQCanvas().Tr(arg1);
		}
		[SmokeMethod("trUtf8(const char*, const char*)")]
		public static new string TrUtf8(string arg1, string arg2) {
			return StaticQCanvas().TrUtf8(arg1,arg2);
		}
		[SmokeMethod("trUtf8(const char*)")]
		public static new string TrUtf8(string arg1) {
			return StaticQCanvas().TrUtf8(arg1);
		}
		[SmokeMethod("drawBackground(QPainter&, const QRect&)")]
		protected virtual void DrawBackground(QPainter arg1, QRect area) {
			ProxyQCanvas().DrawBackground(arg1,area);
		}
		[SmokeMethod("drawForeground(QPainter&, const QRect&)")]
		protected virtual void DrawForeground(QPainter arg1, QRect area) {
			ProxyQCanvas().DrawForeground(arg1,area);
		}
		~QCanvas() {
			DisposeQCanvas();
		}
		public new void Dispose() {
			DisposeQCanvas();
		}
		private void DisposeQCanvas() {
			ProxyQCanvas().DisposeQCanvas();
		}
		protected void CreateQCanvasSignalProxy() {
			SignalInvocation realProxy = new SignalInvocation(typeof(IQCanvasSignals), this);
			Q_EMIT = (IQCanvasSignals) realProxy.GetTransparentProxy();
		}
		protected new IQCanvasSignals Emit() {
			return (IQCanvasSignals) Q_EMIT;
		}
	}

	public interface IQCanvasSignals : IQObjectSignals {
		[Q_SIGNAL("void resized()")]
		void Resized();
	}
}
