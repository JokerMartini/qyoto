//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QSqlResultShared : QObject, IDisposable {
 		protected QSqlResultShared(Type dummy) : base((Type) null) {}
		interface IQSqlResultSharedProxy {
			string Tr(string arg1, string arg2);
			string Tr(string arg1);
			string TrUtf8(string arg1, string arg2);
			string TrUtf8(string arg1);
		}

		protected void CreateQSqlResultSharedProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSqlResultShared), this);
			_interceptor = (QSqlResultShared) realProxy.GetTransparentProxy();
		}
		private QSqlResultShared ProxyQSqlResultShared() {
			return (QSqlResultShared) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QSqlResultShared() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSqlResultSharedProxy), null);
			_staticInterceptor = (IQSqlResultSharedProxy) realProxy.GetTransparentProxy();
		}
		private static IQSqlResultSharedProxy StaticQSqlResultShared() {
			return (IQSqlResultSharedProxy) _staticInterceptor;
		}

		public new virtual QMetaObject MetaObject() {
			return ProxyQSqlResultShared().MetaObject();
		}
		public new virtual string ClassName() {
			return ProxyQSqlResultShared().ClassName();
		}
		public QSqlResultShared(QSqlResult result) : this((Type) null) {
			CreateQSqlResultSharedProxy();
			NewQSqlResultShared(result);
		}
		private void NewQSqlResultShared(QSqlResult result) {
			ProxyQSqlResultShared().NewQSqlResultShared(result);
		}
		public static new string Tr(string arg1, string arg2) {
			return StaticQSqlResultShared().Tr(arg1,arg2);
		}
		public static new string Tr(string arg1) {
			return StaticQSqlResultShared().Tr(arg1);
		}
		public static new string TrUtf8(string arg1, string arg2) {
			return StaticQSqlResultShared().TrUtf8(arg1,arg2);
		}
		public static new string TrUtf8(string arg1) {
			return StaticQSqlResultShared().TrUtf8(arg1);
		}
		~QSqlResultShared() {
			ProxyQSqlResultShared().Dispose();
		}
		public new void Dispose() {
			ProxyQSqlResultShared().Dispose();
		}
	}
}
