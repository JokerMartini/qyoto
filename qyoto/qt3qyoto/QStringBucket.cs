//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QStringBucket : QBaseBucket, IDisposable {
 		protected QStringBucket(Type dummy) : base((Type) null) {}
		interface IQStringBucketProxy {
		}

		protected void CreateQStringBucketProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QStringBucket), this);
			_interceptor = (QStringBucket) realProxy.GetTransparentProxy();
		}
		private QStringBucket ProxyQStringBucket() {
			return (QStringBucket) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QStringBucket() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQStringBucketProxy), null);
			_staticInterceptor = (IQStringBucketProxy) realProxy.GetTransparentProxy();
		}
		private static IQStringBucketProxy StaticQStringBucket() {
			return (IQStringBucketProxy) _staticInterceptor;
		}

		// QStringBucket* QStringBucket(const QString& arg1,QPtrCollection::Item arg2,QBaseBucket* arg3); >>>> NOT CONVERTED
		[SmokeMethod("getKey() const")]
		public string GetKey() {
			return ProxyQStringBucket().GetKey();
		}
		~QStringBucket() {
			DisposeQStringBucket();
		}
		public void Dispose() {
			DisposeQStringBucket();
		}
		private void DisposeQStringBucket() {
			ProxyQStringBucket().DisposeQStringBucket();
		}
	}
}
