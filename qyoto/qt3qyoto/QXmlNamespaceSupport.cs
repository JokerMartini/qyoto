//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Collections;
	using System.Text;

	public class QXmlNamespaceSupport : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QXmlNamespaceSupport(Type dummy) {}
		interface IQXmlNamespaceSupportProxy {
		}

		protected void CreateQXmlNamespaceSupportProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QXmlNamespaceSupport), this);
			_interceptor = (QXmlNamespaceSupport) realProxy.GetTransparentProxy();
		}
		private QXmlNamespaceSupport ProxyQXmlNamespaceSupport() {
			return (QXmlNamespaceSupport) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QXmlNamespaceSupport() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQXmlNamespaceSupportProxy), null);
			_staticInterceptor = (IQXmlNamespaceSupportProxy) realProxy.GetTransparentProxy();
		}
		private static IQXmlNamespaceSupportProxy StaticQXmlNamespaceSupport() {
			return (IQXmlNamespaceSupportProxy) _staticInterceptor;
		}

		public QXmlNamespaceSupport() : this((Type) null) {
			CreateQXmlNamespaceSupportProxy();
			NewQXmlNamespaceSupport();
		}
		private void NewQXmlNamespaceSupport() {
			ProxyQXmlNamespaceSupport().NewQXmlNamespaceSupport();
		}
		public void SetPrefix(string arg1, string arg2) {
			ProxyQXmlNamespaceSupport().SetPrefix(arg1,arg2);
		}
		public string Prefix(string arg1) {
			return ProxyQXmlNamespaceSupport().Prefix(arg1);
		}
		public string Uri(string arg1) {
			return ProxyQXmlNamespaceSupport().Uri(arg1);
		}
		public void SplitName(string arg1, StringBuilder arg2, StringBuilder arg3) {
			ProxyQXmlNamespaceSupport().SplitName(arg1,arg2,arg3);
		}
		public void ProcessName(string arg1, bool arg2, StringBuilder arg3, StringBuilder arg4) {
			ProxyQXmlNamespaceSupport().ProcessName(arg1,arg2,arg3,arg4);
		}
		public ArrayList Prefixes() {
			return ProxyQXmlNamespaceSupport().Prefixes();
		}
		public ArrayList Prefixes(string arg1) {
			return ProxyQXmlNamespaceSupport().Prefixes(arg1);
		}
		public void PushContext() {
			ProxyQXmlNamespaceSupport().PushContext();
		}
		public void PopContext() {
			ProxyQXmlNamespaceSupport().PopContext();
		}
		public void Reset() {
			ProxyQXmlNamespaceSupport().Reset();
		}
		~QXmlNamespaceSupport() {
			ProxyQXmlNamespaceSupport().Dispose();
		}
		public void Dispose() {
			ProxyQXmlNamespaceSupport().Dispose();
		}
	}
}
