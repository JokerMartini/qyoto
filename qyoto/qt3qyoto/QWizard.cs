//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	/// See <see cref="IQWizardSignals"></see> for signals emitted by QWizard
	[SmokeClass("QWizard")]
	public class QWizard : QDialog, IDisposable {
 		protected QWizard(Type dummy) : base((Type) null) {}
		interface IQWizardProxy {
			string Tr(string arg1, string arg2);
			string Tr(string arg1);
			string TrUtf8(string arg1, string arg2);
			string TrUtf8(string arg1);
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QWizard), this);
			_interceptor = (QWizard) realProxy.GetTransparentProxy();
		}
		private QWizard ProxyQWizard() {
			return (QWizard) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QWizard() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQWizardProxy), null);
			_staticInterceptor = (IQWizardProxy) realProxy.GetTransparentProxy();
		}
		private static IQWizardProxy StaticQWizard() {
			return (IQWizardProxy) _staticInterceptor;
		}

		[SmokeMethod("metaObject() const")]
		public new virtual QMetaObject MetaObject() {
			return ProxyQWizard().MetaObject();
		}
		[SmokeMethod("className() const")]
		public new virtual string ClassName() {
			return ProxyQWizard().ClassName();
		}
		public QWizard(QWidget parent, string name, bool modal, int f) : this((Type) null) {
			CreateProxy();
			NewQWizard(parent,name,modal,f);
		}
		[SmokeMethod("QWizard(QWidget*, const char*, bool, Qt::WFlags)")]
		private void NewQWizard(QWidget parent, string name, bool modal, int f) {
			ProxyQWizard().NewQWizard(parent,name,modal,f);
		}
		public QWizard(QWidget parent, string name, bool modal) : this((Type) null) {
			CreateProxy();
			NewQWizard(parent,name,modal);
		}
		[SmokeMethod("QWizard(QWidget*, const char*, bool)")]
		private void NewQWizard(QWidget parent, string name, bool modal) {
			ProxyQWizard().NewQWizard(parent,name,modal);
		}
		public QWizard(QWidget parent, string name) : this((Type) null) {
			CreateProxy();
			NewQWizard(parent,name);
		}
		[SmokeMethod("QWizard(QWidget*, const char*)")]
		private void NewQWizard(QWidget parent, string name) {
			ProxyQWizard().NewQWizard(parent,name);
		}
		public QWizard(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQWizard(parent);
		}
		[SmokeMethod("QWizard(QWidget*)")]
		private void NewQWizard(QWidget parent) {
			ProxyQWizard().NewQWizard(parent);
		}
		public QWizard() : this((Type) null) {
			CreateProxy();
			NewQWizard();
		}
		[SmokeMethod("QWizard()")]
		private void NewQWizard() {
			ProxyQWizard().NewQWizard();
		}
		[SmokeMethod("show()")]
		public new void Show() {
			ProxyQWizard().Show();
		}
		[SmokeMethod("setFont(const QFont&)")]
		public new void SetFont(QFont font) {
			ProxyQWizard().SetFont(font);
		}
		[SmokeMethod("addPage(QWidget*, const QString&)")]
		public virtual void AddPage(QWidget arg1, string arg2) {
			ProxyQWizard().AddPage(arg1,arg2);
		}
		[SmokeMethod("insertPage(QWidget*, const QString&, int)")]
		public virtual void InsertPage(QWidget arg1, string arg2, int arg3) {
			ProxyQWizard().InsertPage(arg1,arg2,arg3);
		}
		[SmokeMethod("removePage(QWidget*)")]
		public virtual void RemovePage(QWidget arg1) {
			ProxyQWizard().RemovePage(arg1);
		}
		[SmokeMethod("title(QWidget*) const")]
		public string Title(QWidget arg1) {
			return ProxyQWizard().Title(arg1);
		}
		[SmokeMethod("setTitle(QWidget*, const QString&)")]
		public void SetTitle(QWidget arg1, string arg2) {
			ProxyQWizard().SetTitle(arg1,arg2);
		}
		[SmokeMethod("titleFont() const")]
		public QFont TitleFont() {
			return ProxyQWizard().TitleFont();
		}
		[SmokeMethod("setTitleFont(const QFont&)")]
		public void SetTitleFont(QFont arg1) {
			ProxyQWizard().SetTitleFont(arg1);
		}
		[SmokeMethod("showPage(QWidget*)")]
		public virtual void ShowPage(QWidget arg1) {
			ProxyQWizard().ShowPage(arg1);
		}
		[SmokeMethod("currentPage() const")]
		public QWidget CurrentPage() {
			return ProxyQWizard().CurrentPage();
		}
		[SmokeMethod("page(int) const")]
		public QWidget Page(int arg1) {
			return ProxyQWizard().Page(arg1);
		}
		[SmokeMethod("pageCount() const")]
		public int PageCount() {
			return ProxyQWizard().PageCount();
		}
		[SmokeMethod("indexOf(QWidget*) const")]
		public int IndexOf(QWidget arg1) {
			return ProxyQWizard().IndexOf(arg1);
		}
		[SmokeMethod("appropriate(QWidget*) const")]
		public virtual bool Appropriate(QWidget arg1) {
			return ProxyQWizard().Appropriate(arg1);
		}
		[SmokeMethod("setAppropriate(QWidget*, bool)")]
		public virtual void SetAppropriate(QWidget arg1, bool arg2) {
			ProxyQWizard().SetAppropriate(arg1,arg2);
		}
		[SmokeMethod("backButton() const")]
		public QPushButton BackButton() {
			return ProxyQWizard().BackButton();
		}
		[SmokeMethod("nextButton() const")]
		public QPushButton NextButton() {
			return ProxyQWizard().NextButton();
		}
		[SmokeMethod("finishButton() const")]
		public QPushButton FinishButton() {
			return ProxyQWizard().FinishButton();
		}
		[SmokeMethod("cancelButton() const")]
		public QPushButton CancelButton() {
			return ProxyQWizard().CancelButton();
		}
		[SmokeMethod("helpButton() const")]
		public QPushButton HelpButton() {
			return ProxyQWizard().HelpButton();
		}
		[SmokeMethod("eventFilter(QObject*, QEvent*)")]
		public new bool EventFilter(QObject arg1, QEvent arg2) {
			return ProxyQWizard().EventFilter(arg1,arg2);
		}
		[Q_SLOT("void setBackEnabled(QWidget*, bool)")]
		[SmokeMethod("setBackEnabled(QWidget*, bool)")]
		public virtual void SetBackEnabled(QWidget arg1, bool arg2) {
			ProxyQWizard().SetBackEnabled(arg1,arg2);
		}
		[Q_SLOT("void setNextEnabled(QWidget*, bool)")]
		[SmokeMethod("setNextEnabled(QWidget*, bool)")]
		public virtual void SetNextEnabled(QWidget arg1, bool arg2) {
			ProxyQWizard().SetNextEnabled(arg1,arg2);
		}
		[Q_SLOT("void setFinishEnabled(QWidget*, bool)")]
		[SmokeMethod("setFinishEnabled(QWidget*, bool)")]
		public virtual void SetFinishEnabled(QWidget arg1, bool arg2) {
			ProxyQWizard().SetFinishEnabled(arg1,arg2);
		}
		[Q_SLOT("void setHelpEnabled(QWidget*, bool)")]
		[SmokeMethod("setHelpEnabled(QWidget*, bool)")]
		public virtual void SetHelpEnabled(QWidget arg1, bool arg2) {
			ProxyQWizard().SetHelpEnabled(arg1,arg2);
		}
		[Q_SLOT("void setFinish(QWidget*, bool)")]
		[SmokeMethod("setFinish(QWidget*, bool)")]
		public virtual void SetFinish(QWidget arg1, bool arg2) {
			ProxyQWizard().SetFinish(arg1,arg2);
		}
		[SmokeMethod("tr(const char*, const char*)")]
		public static new string Tr(string arg1, string arg2) {
			return StaticQWizard().Tr(arg1,arg2);
		}
		[SmokeMethod("tr(const char*)")]
		public static new string Tr(string arg1) {
			return StaticQWizard().Tr(arg1);
		}
		[SmokeMethod("trUtf8(const char*, const char*)")]
		public static new string TrUtf8(string arg1, string arg2) {
			return StaticQWizard().TrUtf8(arg1,arg2);
		}
		[SmokeMethod("trUtf8(const char*)")]
		public static new string TrUtf8(string arg1) {
			return StaticQWizard().TrUtf8(arg1);
		}
		[SmokeMethod("layOutButtonRow(QHBoxLayout*)")]
		protected virtual void LayOutButtonRow(QHBoxLayout arg1) {
			ProxyQWizard().LayOutButtonRow(arg1);
		}
		[SmokeMethod("layOutTitleRow(QHBoxLayout*, const QString&)")]
		protected virtual void LayOutTitleRow(QHBoxLayout arg1, string arg2) {
			ProxyQWizard().LayOutTitleRow(arg1,arg2);
		}
		[Q_SLOT("void back()")]
		[SmokeMethod("back()")]
		protected virtual void Back() {
			ProxyQWizard().Back();
		}
		[Q_SLOT("void next()")]
		[SmokeMethod("next()")]
		protected virtual void Next() {
			ProxyQWizard().Next();
		}
		[Q_SLOT("void help()")]
		[SmokeMethod("help()")]
		protected virtual void Help() {
			ProxyQWizard().Help();
		}
		~QWizard() {
			DisposeQWizard();
		}
		public new void Dispose() {
			DisposeQWizard();
		}
		private void DisposeQWizard() {
			ProxyQWizard().DisposeQWizard();
		}
		protected new IQWizardSignals Emit() {
			return (IQWizardSignals) Q_EMIT;
		}
	}

	public interface IQWizardSignals : IQDialogSignals {
		[Q_SIGNAL("void helpClicked()")]
		void HelpClicked();
		[Q_SIGNAL("void selected(const QString&)")]
		void Selected(string arg1);
	}
}
