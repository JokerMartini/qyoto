//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QColorGroup : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QColorGroup(Type dummy) {}
		interface IQColorGroupProxy {
			bool op_equals(QColorGroup lhs, QColorGroup g);
		}

		protected void CreateQColorGroupProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QColorGroup), this);
			_interceptor = (QColorGroup) realProxy.GetTransparentProxy();
		}
		private QColorGroup ProxyQColorGroup() {
			return (QColorGroup) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QColorGroup() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQColorGroupProxy), null);
			_staticInterceptor = (IQColorGroupProxy) realProxy.GetTransparentProxy();
		}
		private static IQColorGroupProxy StaticQColorGroup() {
			return (IQColorGroupProxy) _staticInterceptor;
		}

		enum ColorRole {
			Foreground = 0,
			Button = 1,
			Light = 2,
			Midlight = 3,
			Dark = 4,
			Mid = 5,
			Text = 6,
			BrightText = 7,
			ButtonText = 8,
			Base = 9,
			Background = 10,
			Shadow = 11,
			Highlight = 12,
			HighlightedText = 13,
			Link = 14,
			LinkVisited = 15,
			NColorRoles = 16,
		}
		public QColorGroup() : this((Type) null) {
			CreateQColorGroupProxy();
			NewQColorGroup();
		}
		private void NewQColorGroup() {
			ProxyQColorGroup().NewQColorGroup();
		}
		public QColorGroup(QColor foreground, QColor button, QColor light, QColor dark, QColor mid, QColor text, QColor arg7) : this((Type) null) {
			CreateQColorGroupProxy();
			NewQColorGroup(foreground,button,light,dark,mid,text,arg7);
		}
		private void NewQColorGroup(QColor foreground, QColor button, QColor light, QColor dark, QColor mid, QColor text, QColor arg7) {
			ProxyQColorGroup().NewQColorGroup(foreground,button,light,dark,mid,text,arg7);
		}
		public QColorGroup(QBrush foreground, QBrush button, QBrush light, QBrush dark, QBrush mid, QBrush text, QBrush bright_text, QBrush arg8, QBrush background) : this((Type) null) {
			CreateQColorGroupProxy();
			NewQColorGroup(foreground,button,light,dark,mid,text,bright_text,arg8,background);
		}
		private void NewQColorGroup(QBrush foreground, QBrush button, QBrush light, QBrush dark, QBrush mid, QBrush text, QBrush bright_text, QBrush arg8, QBrush background) {
			ProxyQColorGroup().NewQColorGroup(foreground,button,light,dark,mid,text,bright_text,arg8,background);
		}
		public QColorGroup(QColorGroup arg1) : this((Type) null) {
			CreateQColorGroupProxy();
			NewQColorGroup(arg1);
		}
		private void NewQColorGroup(QColorGroup arg1) {
			ProxyQColorGroup().NewQColorGroup(arg1);
		}
		public QColor Color(int arg1) {
			return ProxyQColorGroup().Color(arg1);
		}
		public QBrush Brush(int arg1) {
			return ProxyQColorGroup().Brush(arg1);
		}
		public void SetColor(int arg1, QColor arg2) {
			ProxyQColorGroup().SetColor(arg1,arg2);
		}
		public void SetBrush(int arg1, QBrush arg2) {
			ProxyQColorGroup().SetBrush(arg1,arg2);
		}
		public QColor Foreground() {
			return ProxyQColorGroup().Foreground();
		}
		public QColor Button() {
			return ProxyQColorGroup().Button();
		}
		public QColor Light() {
			return ProxyQColorGroup().Light();
		}
		public QColor Dark() {
			return ProxyQColorGroup().Dark();
		}
		public QColor Mid() {
			return ProxyQColorGroup().Mid();
		}
		public QColor Text() {
			return ProxyQColorGroup().Text();
		}
		public QColor Base() {
			return ProxyQColorGroup().Base();
		}
		public QColor Background() {
			return ProxyQColorGroup().Background();
		}
		public QColor Midlight() {
			return ProxyQColorGroup().Midlight();
		}
		public QColor BrightText() {
			return ProxyQColorGroup().BrightText();
		}
		public QColor ButtonText() {
			return ProxyQColorGroup().ButtonText();
		}
		public QColor Shadow() {
			return ProxyQColorGroup().Shadow();
		}
		public QColor Highlight() {
			return ProxyQColorGroup().Highlight();
		}
		public QColor HighlightedText() {
			return ProxyQColorGroup().HighlightedText();
		}
		public QColor Link() {
			return ProxyQColorGroup().Link();
		}
		public QColor LinkVisited() {
			return ProxyQColorGroup().LinkVisited();
		}
		public static bool operator==(QColorGroup lhs, QColorGroup g) {
			return StaticQColorGroup().op_equals(lhs,g);
		}
		public static bool operator!=(QColorGroup lhs, QColorGroup g) {
			return !StaticQColorGroup().op_equals(lhs,g);
		}
		public override bool Equals(object o) {
			if (!(o is QColorGroup)) { return false; }
			return this == (QColorGroup) o;
		}
		public override int GetHashCode() {
			return ProxyQColorGroup().GetHashCode();
		}
		~QColorGroup() {
			ProxyQColorGroup().Dispose();
		}
		public void Dispose() {
			ProxyQColorGroup().Dispose();
		}
	}
}
