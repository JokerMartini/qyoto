//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	[SmokeClass("QObjectUserData")]
	public class QObjectUserData : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QObjectUserData(Type dummy) {}
		interface IQObjectUserDataProxy {
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QObjectUserData), this);
			_interceptor = (QObjectUserData) realProxy.GetTransparentProxy();
		}
		private QObjectUserData ProxyQObjectUserData() {
			return (QObjectUserData) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QObjectUserData() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQObjectUserDataProxy), null);
			_staticInterceptor = (IQObjectUserDataProxy) realProxy.GetTransparentProxy();
		}
		private static IQObjectUserDataProxy StaticQObjectUserData() {
			return (IQObjectUserDataProxy) _staticInterceptor;
		}

		// QObjectUserData* QObjectUserData(); >>>> NOT CONVERTED
		~QObjectUserData() {
			DisposeQObjectUserData();
		}
		public void Dispose() {
			DisposeQObjectUserData();
		}
		private void DisposeQObjectUserData() {
			ProxyQObjectUserData().DisposeQObjectUserData();
		}
	}
}
