//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QGListStdIterator : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QGListStdIterator(Type dummy) {}
		interface IQGListStdIteratorProxy {
		}

		protected void CreateQGListStdIteratorProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QGListStdIterator), this);
			_interceptor = (QGListStdIterator) realProxy.GetTransparentProxy();
		}
		private QGListStdIterator ProxyQGListStdIterator() {
			return (QGListStdIterator) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QGListStdIterator() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQGListStdIteratorProxy), null);
			_staticInterceptor = (IQGListStdIteratorProxy) realProxy.GetTransparentProxy();
		}
		private static IQGListStdIteratorProxy StaticQGListStdIterator() {
			return (IQGListStdIteratorProxy) _staticInterceptor;
		}

		public QGListStdIterator(QLNode n) : this((Type) null) {
			CreateQGListStdIteratorProxy();
			NewQGListStdIterator(n);
		}
		private void NewQGListStdIterator(QLNode n) {
			ProxyQGListStdIterator().NewQGListStdIterator(n);
		}
		//  operator QLNode*(); >>>> NOT CONVERTED
		protected QLNode Next() {
			return ProxyQGListStdIterator().Next();
		}
		~QGListStdIterator() {
			ProxyQGListStdIterator().Dispose();
		}
		public void Dispose() {
			ProxyQGListStdIterator().Dispose();
		}
	}
}
