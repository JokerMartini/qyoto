//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	[SmokeClass("QTabletEvent")]
	public class QTabletEvent : QEvent, IDisposable {
 		protected QTabletEvent(Type dummy) : base((Type) null) {}
		interface IQTabletEventProxy {
		}

		protected void CreateQTabletEventProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTabletEvent), this);
			_interceptor = (QTabletEvent) realProxy.GetTransparentProxy();
		}
		private QTabletEvent ProxyQTabletEvent() {
			return (QTabletEvent) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QTabletEvent() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQTabletEventProxy), null);
			_staticInterceptor = (IQTabletEventProxy) realProxy.GetTransparentProxy();
		}
		private static IQTabletEventProxy StaticQTabletEvent() {
			return (IQTabletEventProxy) _staticInterceptor;
		}

		public enum TabletDevice {
			NoDevice = -1,
			Puck = 0,
			Stylus = 1,
			Eraser = 2,
		}
		// QTabletEvent* QTabletEvent(QEvent::Type arg1,const QPoint& arg2,const QPoint& arg3,int arg4,int arg5,int arg6,int arg7,const QPair<int, int>& arg8); >>>> NOT CONVERTED
		// QTabletEvent* QTabletEvent(const QPoint& arg1,const QPoint& arg2,int arg3,int arg4,int arg5,int arg6,const QPair<int, int>& arg7); >>>> NOT CONVERTED
		[SmokeMethod("pressure() const")]
		public int Pressure() {
			return ProxyQTabletEvent().Pressure();
		}
		[SmokeMethod("xTilt() const")]
		public int XTilt() {
			return ProxyQTabletEvent().XTilt();
		}
		[SmokeMethod("yTilt() const")]
		public int YTilt() {
			return ProxyQTabletEvent().YTilt();
		}
		[SmokeMethod("pos() const")]
		public QPoint Pos() {
			return ProxyQTabletEvent().Pos();
		}
		[SmokeMethod("globalPos() const")]
		public QPoint GlobalPos() {
			return ProxyQTabletEvent().GlobalPos();
		}
		[SmokeMethod("x() const")]
		public int X() {
			return ProxyQTabletEvent().X();
		}
		[SmokeMethod("y() const")]
		public int Y() {
			return ProxyQTabletEvent().Y();
		}
		[SmokeMethod("globalX() const")]
		public int GlobalX() {
			return ProxyQTabletEvent().GlobalX();
		}
		[SmokeMethod("globalY() const")]
		public int GlobalY() {
			return ProxyQTabletEvent().GlobalY();
		}
		[SmokeMethod("device() const")]
		public QTabletEvent.TabletDevice Device() {
			return ProxyQTabletEvent().Device();
		}
		[SmokeMethod("isAccepted() const")]
		public int IsAccepted() {
			return ProxyQTabletEvent().IsAccepted();
		}
		[SmokeMethod("accept()")]
		public void Accept() {
			ProxyQTabletEvent().Accept();
		}
		[SmokeMethod("ignore()")]
		public void Ignore() {
			ProxyQTabletEvent().Ignore();
		}
		// QPair<int, int> uniqueId(); >>>> NOT CONVERTED
		~QTabletEvent() {
			DisposeQTabletEvent();
		}
		public new void Dispose() {
			DisposeQTabletEvent();
		}
		private void DisposeQTabletEvent() {
			ProxyQTabletEvent().DisposeQTabletEvent();
		}
	}
}
