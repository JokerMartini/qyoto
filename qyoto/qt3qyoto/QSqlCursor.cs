//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QSqlCursor : QSqlRecord, IQSqlQuery, IDisposable {
 		protected QSqlCursor(Type dummy) : base((Type) null) {}
		interface IQSqlCursorProxy {
		}

		protected void CreateQSqlCursorProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSqlCursor), this);
			_interceptor = (QSqlCursor) realProxy.GetTransparentProxy();
		}
		private QSqlCursor ProxyQSqlCursor() {
			return (QSqlCursor) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QSqlCursor() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSqlCursorProxy), null);
			_staticInterceptor = (IQSqlCursorProxy) realProxy.GetTransparentProxy();
		}
		private static IQSqlCursorProxy StaticQSqlCursor() {
			return (IQSqlCursorProxy) _staticInterceptor;
		}

		enum E_Mode {
			ReadOnly = 0,
			Insert = 1,
			Update = 2,
			Delete = 4,
			Writable = 7,
		}
		public QSqlCursor(string name, bool autopopulate, QSqlDatabase db) : this((Type) null) {
			CreateQSqlCursorProxy();
			NewQSqlCursor(name,autopopulate,db);
		}
		private void NewQSqlCursor(string name, bool autopopulate, QSqlDatabase db) {
			ProxyQSqlCursor().NewQSqlCursor(name,autopopulate,db);
		}
		public QSqlCursor(string name, bool autopopulate) : this((Type) null) {
			CreateQSqlCursorProxy();
			NewQSqlCursor(name,autopopulate);
		}
		private void NewQSqlCursor(string name, bool autopopulate) {
			ProxyQSqlCursor().NewQSqlCursor(name,autopopulate);
		}
		public QSqlCursor(string name) : this((Type) null) {
			CreateQSqlCursorProxy();
			NewQSqlCursor(name);
		}
		private void NewQSqlCursor(string name) {
			ProxyQSqlCursor().NewQSqlCursor(name);
		}
		public QSqlCursor() : this((Type) null) {
			CreateQSqlCursorProxy();
			NewQSqlCursor();
		}
		private void NewQSqlCursor() {
			ProxyQSqlCursor().NewQSqlCursor();
		}
		public QSqlCursor(QSqlCursor other) : this((Type) null) {
			CreateQSqlCursorProxy();
			NewQSqlCursor(other);
		}
		private void NewQSqlCursor(QSqlCursor other) {
			ProxyQSqlCursor().NewQSqlCursor(other);
		}
		public new QVariant Value(int i) {
			return ProxyQSqlCursor().Value(i);
		}
		public new QVariant Value(string name) {
			return ProxyQSqlCursor().Value(name);
		}
		public new void SetValue(int i, QVariant val) {
			ProxyQSqlCursor().SetValue(i,val);
		}
		public new void SetValue(string name, QVariant val) {
			ProxyQSqlCursor().SetValue(name,val);
		}
		public virtual QSqlIndex PrimaryIndex(bool prime) {
			return ProxyQSqlCursor().PrimaryIndex(prime);
		}
		public virtual QSqlIndex PrimaryIndex() {
			return ProxyQSqlCursor().PrimaryIndex();
		}
		public virtual QSqlIndex Index(string[] fieldNames) {
			return ProxyQSqlCursor().Index(fieldNames);
		}
		public QSqlIndex Index(string fieldName) {
			return ProxyQSqlCursor().Index(fieldName);
		}
		public virtual void SetPrimaryIndex(QSqlIndex idx) {
			ProxyQSqlCursor().SetPrimaryIndex(idx);
		}
		public new virtual void Append(QSqlFieldInfo fieldInfo) {
			ProxyQSqlCursor().Append(fieldInfo);
		}
		public new virtual void Insert(int pos, QSqlFieldInfo fieldInfo) {
			ProxyQSqlCursor().Insert(pos,fieldInfo);
		}
		public new void Remove(int pos) {
			ProxyQSqlCursor().Remove(pos);
		}
		public new void Clear() {
			ProxyQSqlCursor().Clear();
		}
		public new void SetGenerated(string name, bool generated) {
			ProxyQSqlCursor().SetGenerated(name,generated);
		}
		public new void SetGenerated(int i, bool generated) {
			ProxyQSqlCursor().SetGenerated(i,generated);
		}
		public virtual QSqlRecord EditBuffer(bool copy) {
			return ProxyQSqlCursor().EditBuffer(copy);
		}
		public virtual QSqlRecord EditBuffer() {
			return ProxyQSqlCursor().EditBuffer();
		}
		public virtual QSqlRecord PrimeInsert() {
			return ProxyQSqlCursor().PrimeInsert();
		}
		public virtual QSqlRecord PrimeUpdate() {
			return ProxyQSqlCursor().PrimeUpdate();
		}
		public virtual QSqlRecord PrimeDelete() {
			return ProxyQSqlCursor().PrimeDelete();
		}
		public new virtual int Insert(bool invalidate) {
			return ProxyQSqlCursor().Insert(invalidate);
		}
		public new virtual int Insert() {
			return ProxyQSqlCursor().Insert();
		}
		public virtual int Update(bool invalidate) {
			return ProxyQSqlCursor().Update(invalidate);
		}
		public virtual int Update() {
			return ProxyQSqlCursor().Update();
		}
		public virtual int Del(bool invalidate) {
			return ProxyQSqlCursor().Del(invalidate);
		}
		public virtual int Del() {
			return ProxyQSqlCursor().Del();
		}
		public virtual void SetMode(int flags) {
			ProxyQSqlCursor().SetMode(flags);
		}
		public int Mode() {
			return ProxyQSqlCursor().Mode();
		}
		public virtual void SetCalculated(string name, bool calculated) {
			ProxyQSqlCursor().SetCalculated(name,calculated);
		}
		public bool IsCalculated(string name) {
			return ProxyQSqlCursor().IsCalculated(name);
		}
		public virtual void SetTrimmed(string name, bool trim) {
			ProxyQSqlCursor().SetTrimmed(name,trim);
		}
		public bool IsTrimmed(string name) {
			return ProxyQSqlCursor().IsTrimmed(name);
		}
		public bool IsReadOnly() {
			return ProxyQSqlCursor().IsReadOnly();
		}
		public bool CanInsert() {
			return ProxyQSqlCursor().CanInsert();
		}
		public bool CanUpdate() {
			return ProxyQSqlCursor().CanUpdate();
		}
		public bool CanDelete() {
			return ProxyQSqlCursor().CanDelete();
		}
		public bool Select() {
			return ProxyQSqlCursor().Select();
		}
		public bool Select(QSqlIndex sort) {
			return ProxyQSqlCursor().Select(sort);
		}
		public bool Select(QSqlIndex filter, QSqlIndex sort) {
			return ProxyQSqlCursor().Select(filter,sort);
		}
		public virtual bool Select(string filter, QSqlIndex sort) {
			return ProxyQSqlCursor().Select(filter,sort);
		}
		public virtual bool Select(string filter) {
			return ProxyQSqlCursor().Select(filter);
		}
		public virtual void SetSort(QSqlIndex sort) {
			ProxyQSqlCursor().SetSort(sort);
		}
		public QSqlIndex Sort() {
			return ProxyQSqlCursor().Sort();
		}
		public virtual void SetFilter(string filter) {
			ProxyQSqlCursor().SetFilter(filter);
		}
		public string Filter() {
			return ProxyQSqlCursor().Filter();
		}
		public virtual void SetName(string name, bool autopopulate) {
			ProxyQSqlCursor().SetName(name,autopopulate);
		}
		public virtual void SetName(string name) {
			ProxyQSqlCursor().SetName(name);
		}
		public string Name() {
			return ProxyQSqlCursor().Name();
		}
		public new string ToString(string prefix, string sep) {
			return ProxyQSqlCursor().ToString(prefix,sep);
		}
		public new string ToString(string prefix) {
			return ProxyQSqlCursor().ToString(prefix);
		}
		public new string ToString() {
			return ProxyQSqlCursor().ToString();
		}
		public new bool IsNull(int i) {
			return ProxyQSqlCursor().IsNull(i);
		}
		public new bool IsNull(string name) {
			return ProxyQSqlCursor().IsNull(name);
		}
		protected void AfterSeek() {
			ProxyQSqlCursor().AfterSeek();
		}
		public bool Exec(string sql) {
			return ProxyQSqlCursor().Exec(sql);
		}
		protected virtual QVariant CalculateField(string name) {
			return ProxyQSqlCursor().CalculateField(name);
		}
		protected virtual int Update(string filter, bool invalidate) {
			return ProxyQSqlCursor().Update(filter,invalidate);
		}
		protected virtual int Update(string filter) {
			return ProxyQSqlCursor().Update(filter);
		}
		protected virtual int Del(string filter, bool invalidate) {
			return ProxyQSqlCursor().Del(filter,invalidate);
		}
		protected virtual int Del(string filter) {
			return ProxyQSqlCursor().Del(filter);
		}
		protected new virtual string ToString(string prefix, QSqlField field, string fieldSep) {
			return ProxyQSqlCursor().ToString(prefix,field,fieldSep);
		}
		protected new virtual string ToString(QSqlRecord rec, string prefix, string fieldSep, string sep) {
			return ProxyQSqlCursor().ToString(rec,prefix,fieldSep,sep);
		}
		protected new virtual string ToString(QSqlIndex i, QSqlRecord rec, string prefix, string fieldSep, string sep) {
			return ProxyQSqlCursor().ToString(i,rec,prefix,fieldSep,sep);
		}
		~QSqlCursor() {
			ProxyQSqlCursor().Dispose();
		}
		public new void Dispose() {
			ProxyQSqlCursor().Dispose();
		}
		public bool IsValid() {
			return ProxyQSqlCursor().IsValid();
		}
		public bool IsActive() {
			return ProxyQSqlCursor().IsActive();
		}
		public int At() {
			return ProxyQSqlCursor().At();
		}
		public string LastQuery() {
			return ProxyQSqlCursor().LastQuery();
		}
		public int NumRowsAffected() {
			return ProxyQSqlCursor().NumRowsAffected();
		}
		public QSqlError LastError() {
			return ProxyQSqlCursor().LastError();
		}
		public bool IsSelect() {
			return ProxyQSqlCursor().IsSelect();
		}
		public int Size() {
			return ProxyQSqlCursor().Size();
		}
		public QSqlDriver Driver() {
			return ProxyQSqlCursor().Driver();
		}
		public QSqlResult Result() {
			return ProxyQSqlCursor().Result();
		}
		public bool IsForwardOnly() {
			return ProxyQSqlCursor().IsForwardOnly();
		}
		public void SetForwardOnly(bool forward) {
			ProxyQSqlCursor().SetForwardOnly(forward);
		}
		public virtual bool Seek(int i, bool relative) {
			return ProxyQSqlCursor().Seek(i,relative);
		}
		public virtual bool Seek(int i) {
			return ProxyQSqlCursor().Seek(i);
		}
		public virtual bool Next() {
			return ProxyQSqlCursor().Next();
		}
		public virtual bool Prev() {
			return ProxyQSqlCursor().Prev();
		}
		public virtual bool First() {
			return ProxyQSqlCursor().First();
		}
		public virtual bool Last() {
			return ProxyQSqlCursor().Last();
		}
		public bool Exec() {
			return ProxyQSqlCursor().Exec();
		}
		public bool Prepare(string query) {
			return ProxyQSqlCursor().Prepare(query);
		}
		public void BindValue(string placeholder, QVariant val) {
			ProxyQSqlCursor().BindValue(placeholder,val);
		}
		public void BindValue(int pos, QVariant val) {
			ProxyQSqlCursor().BindValue(pos,val);
		}
		public void AddBindValue(QVariant val) {
			ProxyQSqlCursor().AddBindValue(val);
		}
		public void BindValue(string placeholder, QVariant val, int type) {
			ProxyQSqlCursor().BindValue(placeholder,val,type);
		}
		public void BindValue(int pos, QVariant val, int type) {
			ProxyQSqlCursor().BindValue(pos,val,type);
		}
		public void AddBindValue(QVariant val, int type) {
			ProxyQSqlCursor().AddBindValue(val,type);
		}
		public QVariant BoundValue(string placeholder) {
			return ProxyQSqlCursor().BoundValue(placeholder);
		}
		public QVariant BoundValue(int pos) {
			return ProxyQSqlCursor().BoundValue(pos);
		}
		// QMap<QString, QVariant> boundValues(); >>>> NOT CONVERTED
		public string ExecutedQuery() {
			return ProxyQSqlCursor().ExecutedQuery();
		}
		protected virtual void BeforeSeek() {
			ProxyQSqlCursor().BeforeSeek();
		}
	}
}
