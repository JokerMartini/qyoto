//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	[SmokeClass("QFocusEvent")]
	public class QFocusEvent : QEvent, IDisposable {
 		protected QFocusEvent(Type dummy) : base((Type) null) {}
		interface IQFocusEventProxy {
			QFocusEvent.Reason reason();
			void SetReason(QFocusEvent.Reason reason);
			void ResetReason();
		}

		protected void CreateQFocusEventProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QFocusEvent), this);
			_interceptor = (QFocusEvent) realProxy.GetTransparentProxy();
		}
		private QFocusEvent ProxyQFocusEvent() {
			return (QFocusEvent) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QFocusEvent() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQFocusEventProxy), null);
			_staticInterceptor = (IQFocusEventProxy) realProxy.GetTransparentProxy();
		}
		private static IQFocusEventProxy StaticQFocusEvent() {
			return (IQFocusEventProxy) _staticInterceptor;
		}

		public enum Reason {
			Mouse = 0,
			Tab = 1,
			Backtab = 2,
			ActiveWindow = 3,
			Popup = 4,
			Shortcut = 5,
			Other = 6,
		}
		public QFocusEvent(QEvent.E_Type type) : this((Type) null) {
			CreateQFocusEventProxy();
			NewQFocusEvent(type);
		}
		[SmokeMethod("QFocusEvent(QEvent::Type)")]
		private void NewQFocusEvent(QEvent.E_Type type) {
			ProxyQFocusEvent().NewQFocusEvent(type);
		}
		[SmokeMethod("gotFocus() const")]
		public bool GotFocus() {
			return ProxyQFocusEvent().GotFocus();
		}
		[SmokeMethod("lostFocus() const")]
		public bool LostFocus() {
			return ProxyQFocusEvent().LostFocus();
		}
		[SmokeMethod("reason()")]
		public static QFocusEvent.Reason reason() {
			return StaticQFocusEvent().reason();
		}
		[SmokeMethod("setReason(QFocusEvent::Reason)")]
		public static void SetReason(QFocusEvent.Reason reason) {
			StaticQFocusEvent().SetReason(reason);
		}
		[SmokeMethod("resetReason()")]
		public static void ResetReason() {
			StaticQFocusEvent().ResetReason();
		}
		~QFocusEvent() {
			DisposeQFocusEvent();
		}
		public new void Dispose() {
			DisposeQFocusEvent();
		}
		private void DisposeQFocusEvent() {
			ProxyQFocusEvent().DisposeQFocusEvent();
		}
	}
}
