//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Collections;
	using System.Text;

	public class QSqlDatabase : QObject, IDisposable {
 		protected QSqlDatabase(Type dummy) : base((Type) null) {}
		interface IQSqlDatabaseProxy {
			string Tr(string arg1, string arg2);
			string Tr(string arg1);
			string TrUtf8(string arg1, string arg2);
			string TrUtf8(string arg1);
			QSqlDatabase AddDatabase(string type, string connectionName);
			QSqlDatabase AddDatabase(string type);
			QSqlDatabase AddDatabase(QSqlDriver driver, string connectionName);
			QSqlDatabase AddDatabase(QSqlDriver driver);
			QSqlDatabase Database(string connectionName, bool open);
			QSqlDatabase Database(string connectionName);
			QSqlDatabase Database();
			void RemoveDatabase(string connectionName);
			void RemoveDatabase(QSqlDatabase db);
			bool Contains(string connectionName);
			bool Contains();
			ArrayList Drivers();
			bool IsDriverAvailable(string name);
		}

		protected void CreateQSqlDatabaseProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSqlDatabase), this);
			_interceptor = (QSqlDatabase) realProxy.GetTransparentProxy();
		}
		private QSqlDatabase ProxyQSqlDatabase() {
			return (QSqlDatabase) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QSqlDatabase() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSqlDatabaseProxy), null);
			_staticInterceptor = (IQSqlDatabaseProxy) realProxy.GetTransparentProxy();
		}
		private static IQSqlDatabaseProxy StaticQSqlDatabase() {
			return (IQSqlDatabaseProxy) _staticInterceptor;
		}

		public new virtual QMetaObject MetaObject() {
			return ProxyQSqlDatabase().MetaObject();
		}
		public new virtual string ClassName() {
			return ProxyQSqlDatabase().ClassName();
		}
		public bool Open() {
			return ProxyQSqlDatabase().Open();
		}
		public bool Open(string user, string password) {
			return ProxyQSqlDatabase().Open(user,password);
		}
		public void Close() {
			ProxyQSqlDatabase().Close();
		}
		public bool IsOpen() {
			return ProxyQSqlDatabase().IsOpen();
		}
		public bool IsOpenError() {
			return ProxyQSqlDatabase().IsOpenError();
		}
		public ArrayList Tables() {
			return ProxyQSqlDatabase().Tables();
		}
		public ArrayList Tables(int type) {
			return ProxyQSqlDatabase().Tables(type);
		}
		public QSqlIndex PrimaryIndex(string tablename) {
			return ProxyQSqlDatabase().PrimaryIndex(tablename);
		}
		public QSqlRecord Record(string tablename) {
			return ProxyQSqlDatabase().Record(tablename);
		}
		public QSqlRecord Record(IQSqlQuery query) {
			return ProxyQSqlDatabase().Record(query);
		}
		public QSqlRecordInfo RecordInfo(string tablename) {
			return ProxyQSqlDatabase().RecordInfo(tablename);
		}
		public QSqlRecordInfo RecordInfo(IQSqlQuery query) {
			return ProxyQSqlDatabase().RecordInfo(query);
		}
		public IQSqlQuery Exec(string query) {
			return ProxyQSqlDatabase().Exec(query);
		}
		public IQSqlQuery Exec() {
			return ProxyQSqlDatabase().Exec();
		}
		public QSqlError LastError() {
			return ProxyQSqlDatabase().LastError();
		}
		public bool Transaction() {
			return ProxyQSqlDatabase().Transaction();
		}
		public bool Commit() {
			return ProxyQSqlDatabase().Commit();
		}
		public bool Rollback() {
			return ProxyQSqlDatabase().Rollback();
		}
		public virtual void SetDatabaseName(string name) {
			ProxyQSqlDatabase().SetDatabaseName(name);
		}
		public virtual void SetUserName(string name) {
			ProxyQSqlDatabase().SetUserName(name);
		}
		public virtual void SetPassword(string password) {
			ProxyQSqlDatabase().SetPassword(password);
		}
		public virtual void SetHostName(string host) {
			ProxyQSqlDatabase().SetHostName(host);
		}
		public virtual void SetPort(int p) {
			ProxyQSqlDatabase().SetPort(p);
		}
		public void SetConnectOptions(string options) {
			ProxyQSqlDatabase().SetConnectOptions(options);
		}
		public void SetConnectOptions() {
			ProxyQSqlDatabase().SetConnectOptions();
		}
		public string DatabaseName() {
			return ProxyQSqlDatabase().DatabaseName();
		}
		public string UserName() {
			return ProxyQSqlDatabase().UserName();
		}
		public string Password() {
			return ProxyQSqlDatabase().Password();
		}
		public string HostName() {
			return ProxyQSqlDatabase().HostName();
		}
		public string DriverName() {
			return ProxyQSqlDatabase().DriverName();
		}
		public int Port() {
			return ProxyQSqlDatabase().Port();
		}
		public string ConnectOptions() {
			return ProxyQSqlDatabase().ConnectOptions();
		}
		public QSqlDriver Driver() {
			return ProxyQSqlDatabase().Driver();
		}
		public static new string Tr(string arg1, string arg2) {
			return StaticQSqlDatabase().Tr(arg1,arg2);
		}
		public static new string Tr(string arg1) {
			return StaticQSqlDatabase().Tr(arg1);
		}
		public static new string TrUtf8(string arg1, string arg2) {
			return StaticQSqlDatabase().TrUtf8(arg1,arg2);
		}
		public static new string TrUtf8(string arg1) {
			return StaticQSqlDatabase().TrUtf8(arg1);
		}
		public static QSqlDatabase AddDatabase(string type, string connectionName) {
			return StaticQSqlDatabase().AddDatabase(type,connectionName);
		}
		public static QSqlDatabase AddDatabase(string type) {
			return StaticQSqlDatabase().AddDatabase(type);
		}
		public static QSqlDatabase AddDatabase(QSqlDriver driver, string connectionName) {
			return StaticQSqlDatabase().AddDatabase(driver,connectionName);
		}
		public static QSqlDatabase AddDatabase(QSqlDriver driver) {
			return StaticQSqlDatabase().AddDatabase(driver);
		}
		public static QSqlDatabase Database(string connectionName, bool open) {
			return StaticQSqlDatabase().Database(connectionName,open);
		}
		public static QSqlDatabase Database(string connectionName) {
			return StaticQSqlDatabase().Database(connectionName);
		}
		public static QSqlDatabase Database() {
			return StaticQSqlDatabase().Database();
		}
		public static void RemoveDatabase(string connectionName) {
			StaticQSqlDatabase().RemoveDatabase(connectionName);
		}
		public static void RemoveDatabase(QSqlDatabase db) {
			StaticQSqlDatabase().RemoveDatabase(db);
		}
		public static bool Contains(string connectionName) {
			return StaticQSqlDatabase().Contains(connectionName);
		}
		public static bool Contains() {
			return StaticQSqlDatabase().Contains();
		}
		public static ArrayList Drivers() {
			return StaticQSqlDatabase().Drivers();
		}
		// void registerSqlDriver(const QString& arg1,const QSqlDriverCreatorBase* arg2); >>>> NOT CONVERTED
		public static bool IsDriverAvailable(string name) {
			return StaticQSqlDatabase().IsDriverAvailable(name);
		}
		public QSqlDatabase(string type, string name, QObject parent, string objname) : this((Type) null) {
			CreateQSqlDatabaseProxy();
			NewQSqlDatabase(type,name,parent,objname);
		}
		private void NewQSqlDatabase(string type, string name, QObject parent, string objname) {
			ProxyQSqlDatabase().NewQSqlDatabase(type,name,parent,objname);
		}
		public QSqlDatabase(string type, string name, QObject parent) : this((Type) null) {
			CreateQSqlDatabaseProxy();
			NewQSqlDatabase(type,name,parent);
		}
		private void NewQSqlDatabase(string type, string name, QObject parent) {
			ProxyQSqlDatabase().NewQSqlDatabase(type,name,parent);
		}
		public QSqlDatabase(string type, string name) : this((Type) null) {
			CreateQSqlDatabaseProxy();
			NewQSqlDatabase(type,name);
		}
		private void NewQSqlDatabase(string type, string name) {
			ProxyQSqlDatabase().NewQSqlDatabase(type,name);
		}
		public QSqlDatabase(QSqlDriver driver, QObject parent, string objname) : this((Type) null) {
			CreateQSqlDatabaseProxy();
			NewQSqlDatabase(driver,parent,objname);
		}
		private void NewQSqlDatabase(QSqlDriver driver, QObject parent, string objname) {
			ProxyQSqlDatabase().NewQSqlDatabase(driver,parent,objname);
		}
		public QSqlDatabase(QSqlDriver driver, QObject parent) : this((Type) null) {
			CreateQSqlDatabaseProxy();
			NewQSqlDatabase(driver,parent);
		}
		private void NewQSqlDatabase(QSqlDriver driver, QObject parent) {
			ProxyQSqlDatabase().NewQSqlDatabase(driver,parent);
		}
		public QSqlDatabase(QSqlDriver driver) : this((Type) null) {
			CreateQSqlDatabaseProxy();
			NewQSqlDatabase(driver);
		}
		private void NewQSqlDatabase(QSqlDriver driver) {
			ProxyQSqlDatabase().NewQSqlDatabase(driver);
		}
		~QSqlDatabase() {
			ProxyQSqlDatabase().Dispose();
		}
		public new void Dispose() {
			ProxyQSqlDatabase().Dispose();
		}
	}
}
