//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QAuServer : QObject {
 		protected QAuServer(Type dummy) : base((Type) null) {}
		interface IQAuServerProxy {
			string Tr(string arg1, string arg2);
			string Tr(string arg1);
			string TrUtf8(string arg1, string arg2);
			string TrUtf8(string arg1);
		}

		protected void CreateQAuServerProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QAuServer), this);
			_interceptor = (QAuServer) realProxy.GetTransparentProxy();
		}
		private QAuServer ProxyQAuServer() {
			return (QAuServer) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QAuServer() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQAuServerProxy), null);
			_staticInterceptor = (IQAuServerProxy) realProxy.GetTransparentProxy();
		}
		private static IQAuServerProxy StaticQAuServer() {
			return (IQAuServerProxy) _staticInterceptor;
		}

		public new virtual QMetaObject MetaObject() {
			return ProxyQAuServer().MetaObject();
		}
		public new virtual string ClassName() {
			return ProxyQAuServer().ClassName();
		}
		public virtual void Init(QSound arg1) {
			ProxyQAuServer().Init(arg1);
		}
		public virtual void Play(string filename) {
			ProxyQAuServer().Play(filename);
		}
		public virtual void Play(QSound arg1) {
			ProxyQAuServer().Play(arg1);
		}
		public virtual void Stop(QSound arg1) {
			ProxyQAuServer().Stop(arg1);
		}
		public virtual bool Okay() {
			return ProxyQAuServer().Okay();
		}
		public static new string Tr(string arg1, string arg2) {
			return StaticQAuServer().Tr(arg1,arg2);
		}
		public static new string Tr(string arg1) {
			return StaticQAuServer().Tr(arg1);
		}
		public static new string TrUtf8(string arg1, string arg2) {
			return StaticQAuServer().TrUtf8(arg1,arg2);
		}
		public static new string TrUtf8(string arg1) {
			return StaticQAuServer().TrUtf8(arg1);
		}
	}
}
