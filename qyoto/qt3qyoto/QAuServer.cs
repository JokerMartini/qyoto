//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	[SmokeClass("QAuServer")]
	public class QAuServer : QObject {
 		protected QAuServer(Type dummy) : base((Type) null) {}
		interface IQAuServerProxy {
			string Tr(string arg1, string arg2);
			string Tr(string arg1);
			string TrUtf8(string arg1, string arg2);
			string TrUtf8(string arg1);
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QAuServer), this);
			_interceptor = (QAuServer) realProxy.GetTransparentProxy();
		}
		private QAuServer ProxyQAuServer() {
			return (QAuServer) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QAuServer() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQAuServerProxy), null);
			_staticInterceptor = (IQAuServerProxy) realProxy.GetTransparentProxy();
		}
		private static IQAuServerProxy StaticQAuServer() {
			return (IQAuServerProxy) _staticInterceptor;
		}

		[SmokeMethod("metaObject() const")]
		public new virtual QMetaObject MetaObject() {
			return ProxyQAuServer().MetaObject();
		}
		[SmokeMethod("className() const")]
		public new virtual string ClassName() {
			return ProxyQAuServer().ClassName();
		}
		public QAuServer(QObject parent, string name) : this((Type) null) {
			CreateProxy();
			CreateSignalProxy();
			NewQAuServer(parent,name);
		}
		[SmokeMethod("QAuServer(QObject*, const char*)")]
		private void NewQAuServer(QObject parent, string name) {
			ProxyQAuServer().NewQAuServer(parent,name);
		}
		[SmokeMethod("init(QSound*)")]
		public virtual void Init(QSound arg1) {
			ProxyQAuServer().Init(arg1);
		}
		[SmokeMethod("play(const QString&)")]
		public virtual void Play(string filename) {
			ProxyQAuServer().Play(filename);
		}
		[SmokeMethod("play(QSound*)")]
		public virtual void Play(QSound arg1) {
			ProxyQAuServer().Play(arg1);
		}
		[SmokeMethod("stop(QSound*)")]
		public virtual void Stop(QSound arg1) {
			ProxyQAuServer().Stop(arg1);
		}
		[SmokeMethod("okay()")]
		public virtual bool Okay() {
			return ProxyQAuServer().Okay();
		}
		[SmokeMethod("tr(const char*, const char*)")]
		public static new string Tr(string arg1, string arg2) {
			return StaticQAuServer().Tr(arg1,arg2);
		}
		[SmokeMethod("tr(const char*)")]
		public static new string Tr(string arg1) {
			return StaticQAuServer().Tr(arg1);
		}
		[SmokeMethod("trUtf8(const char*, const char*)")]
		public static new string TrUtf8(string arg1, string arg2) {
			return StaticQAuServer().TrUtf8(arg1,arg2);
		}
		[SmokeMethod("trUtf8(const char*)")]
		public static new string TrUtf8(string arg1) {
			return StaticQAuServer().TrUtf8(arg1);
		}
		~QAuServer() {
			DisposeQAuServer();
		}
		public new void Dispose() {
			DisposeQAuServer();
		}
		private void DisposeQAuServer() {
			ProxyQAuServer().DisposeQAuServer();
		}
		protected new void CreateSignalProxy() {
			SignalInvocation realProxy = new SignalInvocation(typeof(IQAuServerSignals), this);
			Q_EMIT = (IQAuServerSignals) realProxy.GetTransparentProxy();
		}
		protected new IQAuServerSignals Emit() {
			return (IQAuServerSignals) Q_EMIT;
		}
	}

	public interface IQAuServerSignals : IQObjectSignals {
	}
}
