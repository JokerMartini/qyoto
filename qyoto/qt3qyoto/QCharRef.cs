//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QCharRef : MarshalByRefObject {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QCharRef(Type dummy) {}
		interface IQCharRefProxy {
		}

		protected void CreateQCharRefProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QCharRef), this);
			_interceptor = (QCharRef) realProxy.GetTransparentProxy();
		}
		private QCharRef ProxyQCharRef() {
			return (QCharRef) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QCharRef() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQCharRefProxy), null);
			_staticInterceptor = (IQCharRefProxy) realProxy.GetTransparentProxy();
		}
		private static IQCharRefProxy StaticQCharRef() {
			return (IQCharRefProxy) _staticInterceptor;
		}

		public ushort Unicode() {
			return ProxyQCharRef().Unicode();
		}
		public char Latin1() {
			return ProxyQCharRef().Latin1();
		}
		//  operator QChar(); >>>> NOT CONVERTED
		public bool IsNull() {
			return ProxyQCharRef().IsNull();
		}
		public bool IsPrint() {
			return ProxyQCharRef().IsPrint();
		}
		public bool IsPunct() {
			return ProxyQCharRef().IsPunct();
		}
		public bool IsSpace() {
			return ProxyQCharRef().IsSpace();
		}
		public bool IsMark() {
			return ProxyQCharRef().IsMark();
		}
		public bool IsLetter() {
			return ProxyQCharRef().IsLetter();
		}
		public bool IsNumber() {
			return ProxyQCharRef().IsNumber();
		}
		public bool IsLetterOrNumber() {
			return ProxyQCharRef().IsLetterOrNumber();
		}
		public bool IsDigit() {
			return ProxyQCharRef().IsDigit();
		}
		public int DigitValue() {
			return ProxyQCharRef().DigitValue();
		}
		public char Lower() {
			return ProxyQCharRef().Lower();
		}
		public char Upper() {
			return ProxyQCharRef().Upper();
		}
		public char Category() {
			return ProxyQCharRef().Category();
		}
		public char Direction() {
			return ProxyQCharRef().Direction();
		}
		public char Joining() {
			return ProxyQCharRef().Joining();
		}
		public bool Mirrored() {
			return ProxyQCharRef().Mirrored();
		}
		public char MirroredChar() {
			return ProxyQCharRef().MirroredChar();
		}
		public string Decomposition() {
			return ProxyQCharRef().Decomposition();
		}
		public char DecompositionTag() {
			return ProxyQCharRef().DecompositionTag();
		}
		public ushort CombiningClass() {
			return ProxyQCharRef().CombiningClass();
		}
		public ushort Cell() {
			return ProxyQCharRef().Cell();
		}
		public ushort Row() {
			return ProxyQCharRef().Row();
		}
	}
}
