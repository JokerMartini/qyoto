//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QToolTip : Qt {
 		protected QToolTip(Type dummy) : base((Type) null) {}
		interface IQToolTipProxy {
			void Add(QWidget arg1, string arg2);
			void Add(QWidget arg1, string arg2, QToolTipGroup arg3, string arg4);
			void Remove(QWidget arg1);
			void Add(QWidget arg1, QRect arg2, string arg3);
			void Add(QWidget arg1, QRect arg2, string arg3, QToolTipGroup arg4, string arg5);
			void Remove(QWidget arg1, QRect arg2);
			string TextFor(QWidget arg1, QPoint pos);
			string TextFor(QWidget arg1);
			void Hide();
			QFont Font();
			void SetFont(QFont arg1);
			QPalette Palette();
			void SetPalette(QPalette arg1);
			void SetEnabled(bool enable);
			bool Enabled();
			void SetGloballyEnabled(bool arg1);
			bool IsGloballyEnabled();
			void SetWakeUpDelay(int arg1);
		}

		protected void CreateQToolTipProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QToolTip), this);
			_interceptor = (QToolTip) realProxy.GetTransparentProxy();
		}
		private QToolTip ProxyQToolTip() {
			return (QToolTip) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QToolTip() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQToolTipProxy), null);
			_staticInterceptor = (IQToolTipProxy) realProxy.GetTransparentProxy();
		}
		private static IQToolTipProxy StaticQToolTip() {
			return (IQToolTipProxy) _staticInterceptor;
		}

		public QWidget ParentWidget() {
			return ProxyQToolTip().ParentWidget();
		}
		public QToolTipGroup Group() {
			return ProxyQToolTip().Group();
		}
		public static void Add(QWidget arg1, string arg2) {
			StaticQToolTip().Add(arg1,arg2);
		}
		public static void Add(QWidget arg1, string arg2, QToolTipGroup arg3, string arg4) {
			StaticQToolTip().Add(arg1,arg2,arg3,arg4);
		}
		public static void Remove(QWidget arg1) {
			StaticQToolTip().Remove(arg1);
		}
		public static void Add(QWidget arg1, QRect arg2, string arg3) {
			StaticQToolTip().Add(arg1,arg2,arg3);
		}
		public static void Add(QWidget arg1, QRect arg2, string arg3, QToolTipGroup arg4, string arg5) {
			StaticQToolTip().Add(arg1,arg2,arg3,arg4,arg5);
		}
		public static void Remove(QWidget arg1, QRect arg2) {
			StaticQToolTip().Remove(arg1,arg2);
		}
		public static string TextFor(QWidget arg1, QPoint pos) {
			return StaticQToolTip().TextFor(arg1,pos);
		}
		public static string TextFor(QWidget arg1) {
			return StaticQToolTip().TextFor(arg1);
		}
		public static void Hide() {
			StaticQToolTip().Hide();
		}
		public static QFont Font() {
			return StaticQToolTip().Font();
		}
		public static void SetFont(QFont arg1) {
			StaticQToolTip().SetFont(arg1);
		}
		public static QPalette Palette() {
			return StaticQToolTip().Palette();
		}
		public static void SetPalette(QPalette arg1) {
			StaticQToolTip().SetPalette(arg1);
		}
		public static void SetEnabled(bool enable) {
			StaticQToolTip().SetEnabled(enable);
		}
		public static bool Enabled() {
			return StaticQToolTip().Enabled();
		}
		public static void SetGloballyEnabled(bool arg1) {
			StaticQToolTip().SetGloballyEnabled(arg1);
		}
		public static bool IsGloballyEnabled() {
			return StaticQToolTip().IsGloballyEnabled();
		}
		public static void SetWakeUpDelay(int arg1) {
			StaticQToolTip().SetWakeUpDelay(arg1);
		}
	}
}
