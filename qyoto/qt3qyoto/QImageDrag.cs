//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	[SmokeClass("QImageDrag")]
	public class QImageDrag : QDragObject, IDisposable {
 		protected QImageDrag(Type dummy) : base((Type) null) {}
		interface IQImageDragProxy {
			string Tr(string arg1, string arg2);
			string Tr(string arg1);
			string TrUtf8(string arg1, string arg2);
			string TrUtf8(string arg1);
			bool CanDecode(IQMimeSource e);
			bool Decode(IQMimeSource e, QImage i);
			bool Decode(IQMimeSource e, QPixmap i);
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QImageDrag), this);
			_interceptor = (QImageDrag) realProxy.GetTransparentProxy();
		}
		private QImageDrag ProxyQImageDrag() {
			return (QImageDrag) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QImageDrag() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQImageDragProxy), null);
			_staticInterceptor = (IQImageDragProxy) realProxy.GetTransparentProxy();
		}
		private static IQImageDragProxy StaticQImageDrag() {
			return (IQImageDragProxy) _staticInterceptor;
		}

		[SmokeMethod("metaObject() const")]
		public new virtual QMetaObject MetaObject() {
			return ProxyQImageDrag().MetaObject();
		}
		[SmokeMethod("className() const")]
		public new virtual string ClassName() {
			return ProxyQImageDrag().ClassName();
		}
		public QImageDrag(QImage image, QWidget dragSource, string name) : this((Type) null) {
			CreateProxy();
			CreateSignalProxy();
			NewQImageDrag(image,dragSource,name);
		}
		[SmokeMethod("QImageDrag(QImage, QWidget*, const char*)")]
		private void NewQImageDrag(QImage image, QWidget dragSource, string name) {
			ProxyQImageDrag().NewQImageDrag(image,dragSource,name);
		}
		public QImageDrag(QImage image, QWidget dragSource) : this((Type) null) {
			CreateProxy();
			CreateSignalProxy();
			NewQImageDrag(image,dragSource);
		}
		[SmokeMethod("QImageDrag(QImage, QWidget*)")]
		private void NewQImageDrag(QImage image, QWidget dragSource) {
			ProxyQImageDrag().NewQImageDrag(image,dragSource);
		}
		public QImageDrag(QImage image) : this((Type) null) {
			CreateProxy();
			CreateSignalProxy();
			NewQImageDrag(image);
		}
		[SmokeMethod("QImageDrag(QImage)")]
		private void NewQImageDrag(QImage image) {
			ProxyQImageDrag().NewQImageDrag(image);
		}
		public QImageDrag(QWidget dragSource, string name) : this((Type) null) {
			CreateProxy();
			CreateSignalProxy();
			NewQImageDrag(dragSource,name);
		}
		[SmokeMethod("QImageDrag(QWidget*, const char*)")]
		private void NewQImageDrag(QWidget dragSource, string name) {
			ProxyQImageDrag().NewQImageDrag(dragSource,name);
		}
		public QImageDrag(QWidget dragSource) : this((Type) null) {
			CreateProxy();
			CreateSignalProxy();
			NewQImageDrag(dragSource);
		}
		[SmokeMethod("QImageDrag(QWidget*)")]
		private void NewQImageDrag(QWidget dragSource) {
			ProxyQImageDrag().NewQImageDrag(dragSource);
		}
		public QImageDrag() : this((Type) null) {
			CreateProxy();
			CreateSignalProxy();
			NewQImageDrag();
		}
		[SmokeMethod("QImageDrag()")]
		private void NewQImageDrag() {
			ProxyQImageDrag().NewQImageDrag();
		}
		[SmokeMethod("setImage(QImage)")]
		public virtual void SetImage(QImage image) {
			ProxyQImageDrag().SetImage(image);
		}
		[SmokeMethod("format(int) const")]
		public new string Format(int i) {
			return ProxyQImageDrag().Format(i);
		}
		[SmokeMethod("encodedData(const char*) const")]
		public new virtual QByteArray EncodedData(string arg1) {
			return ProxyQImageDrag().EncodedData(arg1);
		}
		[SmokeMethod("tr(const char*, const char*)")]
		public static new string Tr(string arg1, string arg2) {
			return StaticQImageDrag().Tr(arg1,arg2);
		}
		[SmokeMethod("tr(const char*)")]
		public static new string Tr(string arg1) {
			return StaticQImageDrag().Tr(arg1);
		}
		[SmokeMethod("trUtf8(const char*, const char*)")]
		public static new string TrUtf8(string arg1, string arg2) {
			return StaticQImageDrag().TrUtf8(arg1,arg2);
		}
		[SmokeMethod("trUtf8(const char*)")]
		public static new string TrUtf8(string arg1) {
			return StaticQImageDrag().TrUtf8(arg1);
		}
		[SmokeMethod("canDecode(const QMimeSource*)")]
		public static bool CanDecode(IQMimeSource e) {
			return StaticQImageDrag().CanDecode(e);
		}
		[SmokeMethod("decode(const QMimeSource*, QImage&)")]
		public static bool Decode(IQMimeSource e, QImage i) {
			return StaticQImageDrag().Decode(e,i);
		}
		[SmokeMethod("decode(const QMimeSource*, QPixmap&)")]
		public static bool Decode(IQMimeSource e, QPixmap i) {
			return StaticQImageDrag().Decode(e,i);
		}
		~QImageDrag() {
			DisposeQImageDrag();
		}
		public new void Dispose() {
			DisposeQImageDrag();
		}
		private void DisposeQImageDrag() {
			ProxyQImageDrag().DisposeQImageDrag();
		}
		protected new void CreateSignalProxy() {
			SignalInvocation realProxy = new SignalInvocation(typeof(IQImageDragSignals), this);
			Q_EMIT = (IQImageDragSignals) realProxy.GetTransparentProxy();
		}
		protected new IQImageDragSignals Emit() {
			return (IQImageDragSignals) Q_EMIT;
		}
	}

	public interface IQImageDragSignals : IQDragObjectSignals {
	}
}
