//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	[SmokeClass("QMovie")]
	public class QMovie : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QMovie(Type dummy) {}
		interface IQMovieProxy {
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QMovie), this);
			_interceptor = (QMovie) realProxy.GetTransparentProxy();
		}
		private QMovie ProxyQMovie() {
			return (QMovie) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QMovie() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQMovieProxy), null);
			_staticInterceptor = (IQMovieProxy) realProxy.GetTransparentProxy();
		}
		private static IQMovieProxy StaticQMovie() {
			return (IQMovieProxy) _staticInterceptor;
		}

		public enum Status {
			SourceEmpty = -2,
			UnrecognizedFormat = -1,
			Paused = 1,
			EndOfFrame = 2,
			EndOfLoop = 3,
			EndOfMovie = 4,
			SpeedChanged = 5,
		}
		public QMovie() : this((Type) null) {
			CreateProxy();
			NewQMovie();
		}
		[SmokeMethod("QMovie()")]
		private void NewQMovie() {
			ProxyQMovie().NewQMovie();
		}
		public QMovie(int bufsize) : this((Type) null) {
			CreateProxy();
			NewQMovie(bufsize);
		}
		[SmokeMethod("QMovie(int)")]
		private void NewQMovie(int bufsize) {
			ProxyQMovie().NewQMovie(bufsize);
		}
		public QMovie(QDataSource arg1, int bufsize) : this((Type) null) {
			CreateProxy();
			NewQMovie(arg1,bufsize);
		}
		[SmokeMethod("QMovie(QDataSource*, int)")]
		private void NewQMovie(QDataSource arg1, int bufsize) {
			ProxyQMovie().NewQMovie(arg1,bufsize);
		}
		public QMovie(QDataSource arg1) : this((Type) null) {
			CreateProxy();
			NewQMovie(arg1);
		}
		[SmokeMethod("QMovie(QDataSource*)")]
		private void NewQMovie(QDataSource arg1) {
			ProxyQMovie().NewQMovie(arg1);
		}
		public QMovie(string fileName, int bufsize) : this((Type) null) {
			CreateProxy();
			NewQMovie(fileName,bufsize);
		}
		[SmokeMethod("QMovie(const QString&, int)")]
		private void NewQMovie(string fileName, int bufsize) {
			ProxyQMovie().NewQMovie(fileName,bufsize);
		}
		public QMovie(string fileName) : this((Type) null) {
			CreateProxy();
			NewQMovie(fileName);
		}
		[SmokeMethod("QMovie(const QString&)")]
		private void NewQMovie(string fileName) {
			ProxyQMovie().NewQMovie(fileName);
		}
		public QMovie(QByteArray data, int bufsize) : this((Type) null) {
			CreateProxy();
			NewQMovie(data,bufsize);
		}
		[SmokeMethod("QMovie(QByteArray, int)")]
		private void NewQMovie(QByteArray data, int bufsize) {
			ProxyQMovie().NewQMovie(data,bufsize);
		}
		public QMovie(QByteArray data) : this((Type) null) {
			CreateProxy();
			NewQMovie(data);
		}
		[SmokeMethod("QMovie(QByteArray)")]
		private void NewQMovie(QByteArray data) {
			ProxyQMovie().NewQMovie(data);
		}
		public QMovie(QMovie arg1) : this((Type) null) {
			CreateProxy();
			NewQMovie(arg1);
		}
		[SmokeMethod("QMovie(const QMovie&)")]
		private void NewQMovie(QMovie arg1) {
			ProxyQMovie().NewQMovie(arg1);
		}
		[SmokeMethod("pushSpace() const")]
		public int PushSpace() {
			return ProxyQMovie().PushSpace();
		}
		[SmokeMethod("pushData(const uchar*, int)")]
		public void PushData(char[] data, int length) {
			ProxyQMovie().PushData(data,length);
		}
		[SmokeMethod("backgroundColor() const")]
		public QColor BackgroundColor() {
			return ProxyQMovie().BackgroundColor();
		}
		[SmokeMethod("setBackgroundColor(const QColor&)")]
		public void SetBackgroundColor(QColor arg1) {
			ProxyQMovie().SetBackgroundColor(arg1);
		}
		[SmokeMethod("getValidRect() const")]
		public QRect GetValidRect() {
			return ProxyQMovie().GetValidRect();
		}
		[SmokeMethod("framePixmap() const")]
		public QPixmap FramePixmap() {
			return ProxyQMovie().FramePixmap();
		}
		[SmokeMethod("frameImage() const")]
		public QImage FrameImage() {
			return ProxyQMovie().FrameImage();
		}
		[SmokeMethod("isNull() const")]
		public bool IsNull() {
			return ProxyQMovie().IsNull();
		}
		[SmokeMethod("frameNumber() const")]
		public int FrameNumber() {
			return ProxyQMovie().FrameNumber();
		}
		[SmokeMethod("steps() const")]
		public int Steps() {
			return ProxyQMovie().Steps();
		}
		[SmokeMethod("paused() const")]
		public bool Paused() {
			return ProxyQMovie().Paused();
		}
		[SmokeMethod("finished() const")]
		public bool Finished() {
			return ProxyQMovie().Finished();
		}
		[SmokeMethod("running() const")]
		public bool Running() {
			return ProxyQMovie().Running();
		}
		[SmokeMethod("unpause()")]
		public void Unpause() {
			ProxyQMovie().Unpause();
		}
		[SmokeMethod("pause()")]
		public void Pause() {
			ProxyQMovie().Pause();
		}
		[SmokeMethod("step()")]
		public void Step() {
			ProxyQMovie().Step();
		}
		[SmokeMethod("step(int)")]
		public void Step(int arg1) {
			ProxyQMovie().Step(arg1);
		}
		[SmokeMethod("restart()")]
		public void Restart() {
			ProxyQMovie().Restart();
		}
		[SmokeMethod("speed() const")]
		public int Speed() {
			return ProxyQMovie().Speed();
		}
		[SmokeMethod("setSpeed(int)")]
		public void SetSpeed(int arg1) {
			ProxyQMovie().SetSpeed(arg1);
		}
		[SmokeMethod("connectResize(QObject*, const char*)")]
		public void ConnectResize(QObject receiver, string member) {
			ProxyQMovie().ConnectResize(receiver,member);
		}
		[SmokeMethod("disconnectResize(QObject*, const char*)")]
		public void DisconnectResize(QObject receiver, string member) {
			ProxyQMovie().DisconnectResize(receiver,member);
		}
		[SmokeMethod("disconnectResize(QObject*)")]
		public void DisconnectResize(QObject receiver) {
			ProxyQMovie().DisconnectResize(receiver);
		}
		[SmokeMethod("connectUpdate(QObject*, const char*)")]
		public void ConnectUpdate(QObject receiver, string member) {
			ProxyQMovie().ConnectUpdate(receiver,member);
		}
		[SmokeMethod("disconnectUpdate(QObject*, const char*)")]
		public void DisconnectUpdate(QObject receiver, string member) {
			ProxyQMovie().DisconnectUpdate(receiver,member);
		}
		[SmokeMethod("disconnectUpdate(QObject*)")]
		public void DisconnectUpdate(QObject receiver) {
			ProxyQMovie().DisconnectUpdate(receiver);
		}
		[SmokeMethod("connectStatus(QObject*, const char*)")]
		public void ConnectStatus(QObject receiver, string member) {
			ProxyQMovie().ConnectStatus(receiver,member);
		}
		[SmokeMethod("disconnectStatus(QObject*, const char*)")]
		public void DisconnectStatus(QObject receiver, string member) {
			ProxyQMovie().DisconnectStatus(receiver,member);
		}
		[SmokeMethod("disconnectStatus(QObject*)")]
		public void DisconnectStatus(QObject receiver) {
			ProxyQMovie().DisconnectStatus(receiver);
		}
		~QMovie() {
			DisposeQMovie();
		}
		public void Dispose() {
			DisposeQMovie();
		}
		private void DisposeQMovie() {
			ProxyQMovie().DisposeQMovie();
		}
	}
}
