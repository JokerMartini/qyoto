//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QSizeGrip : QWidget, IDisposable {
 		protected QSizeGrip(Type dummy) : base((Type) null) {}
		interface IQSizeGripProxy {
			string Tr(string arg1, string arg2);
			string Tr(string arg1);
			string TrUtf8(string arg1, string arg2);
			string TrUtf8(string arg1);
		}

		protected void CreateQSizeGripProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSizeGrip), this);
			_interceptor = (QSizeGrip) realProxy.GetTransparentProxy();
		}
		private QSizeGrip ProxyQSizeGrip() {
			return (QSizeGrip) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QSizeGrip() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSizeGripProxy), null);
			_staticInterceptor = (IQSizeGripProxy) realProxy.GetTransparentProxy();
		}
		private static IQSizeGripProxy StaticQSizeGrip() {
			return (IQSizeGripProxy) _staticInterceptor;
		}

		public new virtual QMetaObject MetaObject() {
			return ProxyQSizeGrip().MetaObject();
		}
		public new virtual string ClassName() {
			return ProxyQSizeGrip().ClassName();
		}
		public QSizeGrip(QWidget parent, string name) : this((Type) null) {
			CreateQSizeGripProxy();
			NewQSizeGrip(parent,name);
		}
		private void NewQSizeGrip(QWidget parent, string name) {
			ProxyQSizeGrip().NewQSizeGrip(parent,name);
		}
		public QSizeGrip(QWidget parent) : this((Type) null) {
			CreateQSizeGripProxy();
			NewQSizeGrip(parent);
		}
		private void NewQSizeGrip(QWidget parent) {
			ProxyQSizeGrip().NewQSizeGrip(parent);
		}
		public new QSize SizeHint() {
			return ProxyQSizeGrip().SizeHint();
		}
		public static new string Tr(string arg1, string arg2) {
			return StaticQSizeGrip().Tr(arg1,arg2);
		}
		public static new string Tr(string arg1) {
			return StaticQSizeGrip().Tr(arg1);
		}
		public static new string TrUtf8(string arg1, string arg2) {
			return StaticQSizeGrip().TrUtf8(arg1,arg2);
		}
		public static new string TrUtf8(string arg1) {
			return StaticQSizeGrip().TrUtf8(arg1);
		}
		protected new void PaintEvent(QPaintEvent arg1) {
			ProxyQSizeGrip().PaintEvent(arg1);
		}
		protected new void MousePressEvent(QMouseEvent arg1) {
			ProxyQSizeGrip().MousePressEvent(arg1);
		}
		protected new void MouseMoveEvent(QMouseEvent arg1) {
			ProxyQSizeGrip().MouseMoveEvent(arg1);
		}
		public new bool EventFilter(QObject arg1, QEvent arg2) {
			return ProxyQSizeGrip().EventFilter(arg1,arg2);
		}
		~QSizeGrip() {
			ProxyQSizeGrip().Dispose();
		}
		public new void Dispose() {
			ProxyQSizeGrip().Dispose();
		}
	}
}
