//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Collections;
	using System.Text;

	public class QVariant : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QVariant(Type dummy) {}
		interface IQVariantProxy {
			bool op_equals(QVariant lhs, QVariant arg1);
			string TypeToName(int typ);
			int NameToType(string name);
		}

		protected void CreateQVariantProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QVariant), this);
			_interceptor = (QVariant) realProxy.GetTransparentProxy();
		}
		private QVariant ProxyQVariant() {
			return (QVariant) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QVariant() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQVariantProxy), null);
			_staticInterceptor = (IQVariantProxy) realProxy.GetTransparentProxy();
		}
		private static IQVariantProxy StaticQVariant() {
			return (IQVariantProxy) _staticInterceptor;
		}

		enum E_Type {
			Invalid = 0,
			Map = 1,
			List = 2,
			String = 3,
			StringList = 4,
			Font = 5,
			Pixmap = 6,
			Brush = 7,
			Rect = 8,
			Size = 9,
			Color = 10,
			Palette = 11,
			ColorGroup = 12,
			IconSet = 13,
			Point = 14,
			Image = 15,
			Int = 16,
			UInt = 17,
			Bool = 18,
			Double = 19,
			CString = 20,
			PointArray = 21,
			Region = 22,
			Bitmap = 23,
			Cursor = 24,
			SizePolicy = 25,
			Date = 26,
			Time = 27,
			DateTime = 28,
			ByteArray = 29,
			BitArray = 30,
			KeySequence = 31,
			Pen = 32,
			LongLong = 33,
			ULongLong = 34,
		}
		public QVariant() : this((Type) null) {
			CreateQVariantProxy();
			NewQVariant();
		}
		private void NewQVariant() {
			ProxyQVariant().NewQVariant();
		}
		public QVariant(QVariant arg1) : this((Type) null) {
			CreateQVariantProxy();
			NewQVariant(arg1);
		}
		private void NewQVariant(QVariant arg1) {
			ProxyQVariant().NewQVariant(arg1);
		}
		public QVariant(QDataStream s) : this((Type) null) {
			CreateQVariantProxy();
			NewQVariant(s);
		}
		private void NewQVariant(QDataStream s) {
			ProxyQVariant().NewQVariant(s);
		}
		public QVariant(string arg1) : this((Type) null) {
			CreateQVariantProxy();
			NewQVariant(arg1);
		}
		private void NewQVariant(string arg1) {
			ProxyQVariant().NewQVariant(arg1);
		}
		public QVariant(string[] arg1) : this((Type) null) {
			CreateQVariantProxy();
			NewQVariant(arg1);
		}
		private void NewQVariant(string[] arg1) {
			ProxyQVariant().NewQVariant(arg1);
		}
		public QVariant(QFont arg1) : this((Type) null) {
			CreateQVariantProxy();
			NewQVariant(arg1);
		}
		private void NewQVariant(QFont arg1) {
			ProxyQVariant().NewQVariant(arg1);
		}
		public QVariant(QPixmap arg1) : this((Type) null) {
			CreateQVariantProxy();
			NewQVariant(arg1);
		}
		private void NewQVariant(QPixmap arg1) {
			ProxyQVariant().NewQVariant(arg1);
		}
		public QVariant(QImage arg1) : this((Type) null) {
			CreateQVariantProxy();
			NewQVariant(arg1);
		}
		private void NewQVariant(QImage arg1) {
			ProxyQVariant().NewQVariant(arg1);
		}
		public QVariant(QBrush arg1) : this((Type) null) {
			CreateQVariantProxy();
			NewQVariant(arg1);
		}
		private void NewQVariant(QBrush arg1) {
			ProxyQVariant().NewQVariant(arg1);
		}
		public QVariant(QPoint arg1) : this((Type) null) {
			CreateQVariantProxy();
			NewQVariant(arg1);
		}
		private void NewQVariant(QPoint arg1) {
			ProxyQVariant().NewQVariant(arg1);
		}
		public QVariant(QRect arg1) : this((Type) null) {
			CreateQVariantProxy();
			NewQVariant(arg1);
		}
		private void NewQVariant(QRect arg1) {
			ProxyQVariant().NewQVariant(arg1);
		}
		public QVariant(QSize arg1) : this((Type) null) {
			CreateQVariantProxy();
			NewQVariant(arg1);
		}
		private void NewQVariant(QSize arg1) {
			ProxyQVariant().NewQVariant(arg1);
		}
		public QVariant(QColor arg1) : this((Type) null) {
			CreateQVariantProxy();
			NewQVariant(arg1);
		}
		private void NewQVariant(QColor arg1) {
			ProxyQVariant().NewQVariant(arg1);
		}
		public QVariant(QPalette arg1) : this((Type) null) {
			CreateQVariantProxy();
			NewQVariant(arg1);
		}
		private void NewQVariant(QPalette arg1) {
			ProxyQVariant().NewQVariant(arg1);
		}
		public QVariant(QColorGroup arg1) : this((Type) null) {
			CreateQVariantProxy();
			NewQVariant(arg1);
		}
		private void NewQVariant(QColorGroup arg1) {
			ProxyQVariant().NewQVariant(arg1);
		}
		public QVariant(QIconSet arg1) : this((Type) null) {
			CreateQVariantProxy();
			NewQVariant(arg1);
		}
		private void NewQVariant(QIconSet arg1) {
			ProxyQVariant().NewQVariant(arg1);
		}
		public QVariant(QPointArray arg1) : this((Type) null) {
			CreateQVariantProxy();
			NewQVariant(arg1);
		}
		private void NewQVariant(QPointArray arg1) {
			ProxyQVariant().NewQVariant(arg1);
		}
		public QVariant(QRegion arg1) : this((Type) null) {
			CreateQVariantProxy();
			NewQVariant(arg1);
		}
		private void NewQVariant(QRegion arg1) {
			ProxyQVariant().NewQVariant(arg1);
		}
		public QVariant(QBitmap arg1) : this((Type) null) {
			CreateQVariantProxy();
			NewQVariant(arg1);
		}
		private void NewQVariant(QBitmap arg1) {
			ProxyQVariant().NewQVariant(arg1);
		}
		public QVariant(QCursor arg1) : this((Type) null) {
			CreateQVariantProxy();
			NewQVariant(arg1);
		}
		private void NewQVariant(QCursor arg1) {
			ProxyQVariant().NewQVariant(arg1);
		}
		public QVariant(DateTime arg1) : this((Type) null) {
			CreateQVariantProxy();
			NewQVariant(arg1);
		}
		private void NewQVariant(DateTime arg1) {
			ProxyQVariant().NewQVariant(arg1);
		}
		public QVariant(byte[] arg1) : this((Type) null) {
			CreateQVariantProxy();
			NewQVariant(arg1);
		}
		private void NewQVariant(byte[] arg1) {
			ProxyQVariant().NewQVariant(arg1);
		}
		// QVariant* QVariant(const QBitArray& arg1); >>>> NOT CONVERTED
		public QVariant(QKeySequence arg1) : this((Type) null) {
			CreateQVariantProxy();
			NewQVariant(arg1);
		}
		private void NewQVariant(QKeySequence arg1) {
			ProxyQVariant().NewQVariant(arg1);
		}
		public QVariant(QPen arg1) : this((Type) null) {
			CreateQVariantProxy();
			NewQVariant(arg1);
		}
		private void NewQVariant(QPen arg1) {
			ProxyQVariant().NewQVariant(arg1);
		}
		// QVariant* QVariant(const QValueList<QVariant>& arg1); >>>> NOT CONVERTED
		// QVariant* QVariant(const QMap<QString, QVariant>& arg1); >>>> NOT CONVERTED
		public QVariant(int arg1) : this((Type) null) {
			CreateQVariantProxy();
			NewQVariant(arg1);
		}
		private void NewQVariant(int arg1) {
			ProxyQVariant().NewQVariant(arg1);
		}
		public QVariant(uint arg1) : this((Type) null) {
			CreateQVariantProxy();
			NewQVariant(arg1);
		}
		private void NewQVariant(uint arg1) {
			ProxyQVariant().NewQVariant(arg1);
		}
		public QVariant(long arg1) : this((Type) null) {
			CreateQVariantProxy();
			NewQVariant(arg1);
		}
		private void NewQVariant(long arg1) {
			ProxyQVariant().NewQVariant(arg1);
		}
		public QVariant(bool arg1, int arg2) : this((Type) null) {
			CreateQVariantProxy();
			NewQVariant(arg1,arg2);
		}
		private void NewQVariant(bool arg1, int arg2) {
			ProxyQVariant().NewQVariant(arg1,arg2);
		}
		public QVariant(double arg1) : this((Type) null) {
			CreateQVariantProxy();
			NewQVariant(arg1);
		}
		private void NewQVariant(double arg1) {
			ProxyQVariant().NewQVariant(arg1);
		}
		public QVariant(QSizePolicy arg1) : this((Type) null) {
			CreateQVariantProxy();
			NewQVariant(arg1);
		}
		private void NewQVariant(QSizePolicy arg1) {
			ProxyQVariant().NewQVariant(arg1);
		}
		public static bool operator==(QVariant lhs, QVariant arg1) {
			return StaticQVariant().op_equals(lhs,arg1);
		}
		public static bool operator!=(QVariant lhs, QVariant arg1) {
			return !StaticQVariant().op_equals(lhs,arg1);
		}
		public override bool Equals(object o) {
			if (!(o is QVariant)) { return false; }
			return this == (QVariant) o;
		}
		public override int GetHashCode() {
			return ProxyQVariant().GetHashCode();
		}
		public int Type() {
			return ProxyQVariant().Type();
		}
		public string TypeName() {
			return ProxyQVariant().TypeName();
		}
		public bool CanCast(int arg1) {
			return ProxyQVariant().CanCast(arg1);
		}
		public bool Cast(int arg1) {
			return ProxyQVariant().Cast(arg1);
		}
		public bool IsValid() {
			return ProxyQVariant().IsValid();
		}
		public bool IsNull() {
			return ProxyQVariant().IsNull();
		}
		public void Clear() {
			ProxyQVariant().Clear();
		}
		public new string ToString() {
			return ProxyQVariant().ToString();
		}
		public string ToCString() {
			return ProxyQVariant().ToCString();
		}
		public ArrayList ToStringList() {
			return ProxyQVariant().ToStringList();
		}
		public QFont ToFont() {
			return ProxyQVariant().ToFont();
		}
		public QPixmap ToPixmap() {
			return ProxyQVariant().ToPixmap();
		}
		public QImage ToImage() {
			return ProxyQVariant().ToImage();
		}
		public QBrush ToBrush() {
			return ProxyQVariant().ToBrush();
		}
		public QPoint ToPoint() {
			return ProxyQVariant().ToPoint();
		}
		public QRect ToRect() {
			return ProxyQVariant().ToRect();
		}
		public QSize ToSize() {
			return ProxyQVariant().ToSize();
		}
		public QColor ToColor() {
			return ProxyQVariant().ToColor();
		}
		public QPalette ToPalette() {
			return ProxyQVariant().ToPalette();
		}
		public QColorGroup ToColorGroup() {
			return ProxyQVariant().ToColorGroup();
		}
		public QIconSet ToIconSet() {
			return ProxyQVariant().ToIconSet();
		}
		public QPointArray ToPointArray() {
			return ProxyQVariant().ToPointArray();
		}
		public QBitmap ToBitmap() {
			return ProxyQVariant().ToBitmap();
		}
		public QRegion ToRegion() {
			return ProxyQVariant().ToRegion();
		}
		public QCursor ToCursor() {
			return ProxyQVariant().ToCursor();
		}
		public DateTime ToDate() {
			return ProxyQVariant().ToDate();
		}
		public DateTime ToTime() {
			return ProxyQVariant().ToTime();
		}
		public DateTime ToDateTime() {
			return ProxyQVariant().ToDateTime();
		}
		public byte[] ToByteArray() {
			return ProxyQVariant().ToByteArray();
		}
		// const QBitArray toBitArray(); >>>> NOT CONVERTED
		public QKeySequence ToKeySequence() {
			return ProxyQVariant().ToKeySequence();
		}
		public QPen ToPen() {
			return ProxyQVariant().ToPen();
		}
		public int ToInt(out bool ok) {
			return ProxyQVariant().ToInt(out ok);
		}
		public int ToInt() {
			return ProxyQVariant().ToInt();
		}
		public uint ToUInt(out bool ok) {
			return ProxyQVariant().ToUInt(out ok);
		}
		public uint ToUInt() {
			return ProxyQVariant().ToUInt();
		}
		public long ToLongLong(out bool ok) {
			return ProxyQVariant().ToLongLong(out ok);
		}
		public long ToLongLong() {
			return ProxyQVariant().ToLongLong();
		}
		public long ToULongLong(out bool ok) {
			return ProxyQVariant().ToULongLong(out ok);
		}
		public long ToULongLong() {
			return ProxyQVariant().ToULongLong();
		}
		public bool ToBool() {
			return ProxyQVariant().ToBool();
		}
		public double ToDouble(out bool ok) {
			return ProxyQVariant().ToDouble(out ok);
		}
		public double ToDouble() {
			return ProxyQVariant().ToDouble();
		}
		// const QValueList<QVariant> toList(); >>>> NOT CONVERTED
		// const QMap<QString, QVariant> toMap(); >>>> NOT CONVERTED
		public QSizePolicy ToSizePolicy() {
			return ProxyQVariant().ToSizePolicy();
		}
		// QValueListConstIterator<QString> stringListBegin(); >>>> NOT CONVERTED
		// QValueListConstIterator<QString> stringListEnd(); >>>> NOT CONVERTED
		// QValueListConstIterator<QVariant> listBegin(); >>>> NOT CONVERTED
		// QValueListConstIterator<QVariant> listEnd(); >>>> NOT CONVERTED
		// QMapConstIterator<QString, QVariant> mapBegin(); >>>> NOT CONVERTED
		// QMapConstIterator<QString, QVariant> mapEnd(); >>>> NOT CONVERTED
		// QMapConstIterator<QString, QVariant> mapFind(const QString& arg1); >>>> NOT CONVERTED
		public string AsString() {
			return ProxyQVariant().AsString();
		}
		public string AsCString() {
			return ProxyQVariant().AsCString();
		}
		public ArrayList AsStringList() {
			return ProxyQVariant().AsStringList();
		}
		public QFont AsFont() {
			return ProxyQVariant().AsFont();
		}
		public QPixmap AsPixmap() {
			return ProxyQVariant().AsPixmap();
		}
		public QImage AsImage() {
			return ProxyQVariant().AsImage();
		}
		public QBrush AsBrush() {
			return ProxyQVariant().AsBrush();
		}
		public QPoint AsPoint() {
			return ProxyQVariant().AsPoint();
		}
		public QRect AsRect() {
			return ProxyQVariant().AsRect();
		}
		public QSize AsSize() {
			return ProxyQVariant().AsSize();
		}
		public QColor AsColor() {
			return ProxyQVariant().AsColor();
		}
		public QPalette AsPalette() {
			return ProxyQVariant().AsPalette();
		}
		public QColorGroup AsColorGroup() {
			return ProxyQVariant().AsColorGroup();
		}
		public QIconSet AsIconSet() {
			return ProxyQVariant().AsIconSet();
		}
		public QPointArray AsPointArray() {
			return ProxyQVariant().AsPointArray();
		}
		public QBitmap AsBitmap() {
			return ProxyQVariant().AsBitmap();
		}
		public QRegion AsRegion() {
			return ProxyQVariant().AsRegion();
		}
		public QCursor AsCursor() {
			return ProxyQVariant().AsCursor();
		}
		public DateTime AsDate() {
			return ProxyQVariant().AsDate();
		}
		public DateTime AsTime() {
			return ProxyQVariant().AsTime();
		}
		public DateTime AsDateTime() {
			return ProxyQVariant().AsDateTime();
		}
		public byte[] AsByteArray() {
			return ProxyQVariant().AsByteArray();
		}
		// QBitArray& asBitArray(); >>>> NOT CONVERTED
		public QKeySequence AsKeySequence() {
			return ProxyQVariant().AsKeySequence();
		}
		public QPen AsPen() {
			return ProxyQVariant().AsPen();
		}
		public int AsInt() {
			return ProxyQVariant().AsInt();
		}
		public uint AsUInt() {
			return ProxyQVariant().AsUInt();
		}
		// Q_LLONG& asLongLong(); >>>> NOT CONVERTED
		// Q_ULLONG& asULongLong(); >>>> NOT CONVERTED
		public bool AsBool() {
			return ProxyQVariant().AsBool();
		}
		public double AsDouble() {
			return ProxyQVariant().AsDouble();
		}
		// QValueList<QVariant>& asList(); >>>> NOT CONVERTED
		// QMap<QString, QVariant>& asMap(); >>>> NOT CONVERTED
		public QSizePolicy AsSizePolicy() {
			return ProxyQVariant().AsSizePolicy();
		}
		public void Load(QDataStream arg1) {
			ProxyQVariant().Load(arg1);
		}
		public void Save(QDataStream arg1) {
			ProxyQVariant().Save(arg1);
		}
		// void* rawAccess(void* arg1,QVariant::Type arg2,bool arg3); >>>> NOT CONVERTED
		// void* rawAccess(void* arg1,QVariant::Type arg2); >>>> NOT CONVERTED
		// void* rawAccess(void* arg1); >>>> NOT CONVERTED
		// void* rawAccess(); >>>> NOT CONVERTED
		public static string TypeToName(int typ) {
			return StaticQVariant().TypeToName(typ);
		}
		public static int NameToType(string name) {
			return StaticQVariant().NameToType(name);
		}
		~QVariant() {
			ProxyQVariant().Dispose();
		}
		public void Dispose() {
			ProxyQVariant().Dispose();
		}
	}
}
