//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	/// See <see cref="IQActionSignals"></see> for signals emitted by QAction
	public class QAction : QObject, IDisposable {
 		protected QAction(Type dummy) : base((Type) null) {}
		interface IQActionProxy {
			string Tr(string arg1, string arg2);
			string Tr(string arg1);
			string TrUtf8(string arg1, string arg2);
			string TrUtf8(string arg1);
		}

		protected void CreateQActionProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QAction), this);
			_interceptor = (QAction) realProxy.GetTransparentProxy();
		}
		private QAction ProxyQAction() {
			return (QAction) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QAction() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQActionProxy), null);
			_staticInterceptor = (IQActionProxy) realProxy.GetTransparentProxy();
		}
		private static IQActionProxy StaticQAction() {
			return (IQActionProxy) _staticInterceptor;
		}

		[SmokeMethod("metaObject() const")]
		public new virtual QMetaObject MetaObject() {
			return ProxyQAction().MetaObject();
		}
		[SmokeMethod("className() const")]
		public new virtual string ClassName() {
			return ProxyQAction().ClassName();
		}
		public QAction(QObject parent, string name) : this((Type) null) {
			CreateQActionProxy();
			CreateQActionSignalProxy();
			NewQAction(parent,name);
		}
		[SmokeMethod("QAction(QObject*, const char*)")]
		private void NewQAction(QObject parent, string name) {
			ProxyQAction().NewQAction(parent,name);
		}
		public QAction(QObject parent) : this((Type) null) {
			CreateQActionProxy();
			CreateQActionSignalProxy();
			NewQAction(parent);
		}
		[SmokeMethod("QAction(QObject*)")]
		private void NewQAction(QObject parent) {
			ProxyQAction().NewQAction(parent);
		}
		public QAction(string menuText, QKeySequence accel, QObject parent, string name) : this((Type) null) {
			CreateQActionProxy();
			CreateQActionSignalProxy();
			NewQAction(menuText,accel,parent,name);
		}
		[SmokeMethod("QAction(const QString&, QKeySequence, QObject*, const char*)")]
		private void NewQAction(string menuText, QKeySequence accel, QObject parent, string name) {
			ProxyQAction().NewQAction(menuText,accel,parent,name);
		}
		public QAction(string menuText, QKeySequence accel, QObject parent) : this((Type) null) {
			CreateQActionProxy();
			CreateQActionSignalProxy();
			NewQAction(menuText,accel,parent);
		}
		[SmokeMethod("QAction(const QString&, QKeySequence, QObject*)")]
		private void NewQAction(string menuText, QKeySequence accel, QObject parent) {
			ProxyQAction().NewQAction(menuText,accel,parent);
		}
		public QAction(QIconSet icon, string menuText, QKeySequence accel, QObject parent, string name) : this((Type) null) {
			CreateQActionProxy();
			CreateQActionSignalProxy();
			NewQAction(icon,menuText,accel,parent,name);
		}
		[SmokeMethod("QAction(const QIconSet&, const QString&, QKeySequence, QObject*, const char*)")]
		private void NewQAction(QIconSet icon, string menuText, QKeySequence accel, QObject parent, string name) {
			ProxyQAction().NewQAction(icon,menuText,accel,parent,name);
		}
		public QAction(QIconSet icon, string menuText, QKeySequence accel, QObject parent) : this((Type) null) {
			CreateQActionProxy();
			CreateQActionSignalProxy();
			NewQAction(icon,menuText,accel,parent);
		}
		[SmokeMethod("QAction(const QIconSet&, const QString&, QKeySequence, QObject*)")]
		private void NewQAction(QIconSet icon, string menuText, QKeySequence accel, QObject parent) {
			ProxyQAction().NewQAction(icon,menuText,accel,parent);
		}
		public QAction(string text, QIconSet icon, string menuText, QKeySequence accel, QObject parent, string name, bool toggle) : this((Type) null) {
			CreateQActionProxy();
			CreateQActionSignalProxy();
			NewQAction(text,icon,menuText,accel,parent,name,toggle);
		}
		[SmokeMethod("QAction(const QString&, const QIconSet&, const QString&, QKeySequence, QObject*, const char*, bool)")]
		private void NewQAction(string text, QIconSet icon, string menuText, QKeySequence accel, QObject parent, string name, bool toggle) {
			ProxyQAction().NewQAction(text,icon,menuText,accel,parent,name,toggle);
		}
		public QAction(string text, QIconSet icon, string menuText, QKeySequence accel, QObject parent, string name) : this((Type) null) {
			CreateQActionProxy();
			CreateQActionSignalProxy();
			NewQAction(text,icon,menuText,accel,parent,name);
		}
		[SmokeMethod("QAction(const QString&, const QIconSet&, const QString&, QKeySequence, QObject*, const char*)")]
		private void NewQAction(string text, QIconSet icon, string menuText, QKeySequence accel, QObject parent, string name) {
			ProxyQAction().NewQAction(text,icon,menuText,accel,parent,name);
		}
		public QAction(string text, QIconSet icon, string menuText, QKeySequence accel, QObject parent) : this((Type) null) {
			CreateQActionProxy();
			CreateQActionSignalProxy();
			NewQAction(text,icon,menuText,accel,parent);
		}
		[SmokeMethod("QAction(const QString&, const QIconSet&, const QString&, QKeySequence, QObject*)")]
		private void NewQAction(string text, QIconSet icon, string menuText, QKeySequence accel, QObject parent) {
			ProxyQAction().NewQAction(text,icon,menuText,accel,parent);
		}
		public QAction(string text, string menuText, QKeySequence accel, QObject parent, string name, bool toggle) : this((Type) null) {
			CreateQActionProxy();
			CreateQActionSignalProxy();
			NewQAction(text,menuText,accel,parent,name,toggle);
		}
		[SmokeMethod("QAction(const QString&, const QString&, QKeySequence, QObject*, const char*, bool)")]
		private void NewQAction(string text, string menuText, QKeySequence accel, QObject parent, string name, bool toggle) {
			ProxyQAction().NewQAction(text,menuText,accel,parent,name,toggle);
		}
		public QAction(string text, string menuText, QKeySequence accel, QObject parent, string name) : this((Type) null) {
			CreateQActionProxy();
			CreateQActionSignalProxy();
			NewQAction(text,menuText,accel,parent,name);
		}
		[SmokeMethod("QAction(const QString&, const QString&, QKeySequence, QObject*, const char*)")]
		private void NewQAction(string text, string menuText, QKeySequence accel, QObject parent, string name) {
			ProxyQAction().NewQAction(text,menuText,accel,parent,name);
		}
		public QAction(string text, string menuText, QKeySequence accel, QObject parent) : this((Type) null) {
			CreateQActionProxy();
			CreateQActionSignalProxy();
			NewQAction(text,menuText,accel,parent);
		}
		[SmokeMethod("QAction(const QString&, const QString&, QKeySequence, QObject*)")]
		private void NewQAction(string text, string menuText, QKeySequence accel, QObject parent) {
			ProxyQAction().NewQAction(text,menuText,accel,parent);
		}
		public QAction(QObject parent, string name, bool toggle) : this((Type) null) {
			CreateQActionProxy();
			CreateQActionSignalProxy();
			NewQAction(parent,name,toggle);
		}
		[SmokeMethod("QAction(QObject*, const char*, bool)")]
		private void NewQAction(QObject parent, string name, bool toggle) {
			ProxyQAction().NewQAction(parent,name,toggle);
		}
		[SmokeMethod("setIconSet(const QIconSet&)")]
		public virtual void SetIconSet(QIconSet arg1) {
			ProxyQAction().SetIconSet(arg1);
		}
		[SmokeMethod("iconSet() const")]
		public QIconSet IconSet() {
			return ProxyQAction().IconSet();
		}
		[SmokeMethod("setText(const QString&)")]
		public virtual void SetText(string arg1) {
			ProxyQAction().SetText(arg1);
		}
		[SmokeMethod("text() const")]
		public string Text() {
			return ProxyQAction().Text();
		}
		[SmokeMethod("setMenuText(const QString&)")]
		public virtual void SetMenuText(string arg1) {
			ProxyQAction().SetMenuText(arg1);
		}
		[SmokeMethod("menuText() const")]
		public string MenuText() {
			return ProxyQAction().MenuText();
		}
		[SmokeMethod("setToolTip(const QString&)")]
		public virtual void SetToolTip(string arg1) {
			ProxyQAction().SetToolTip(arg1);
		}
		[SmokeMethod("toolTip() const")]
		public string ToolTip() {
			return ProxyQAction().ToolTip();
		}
		[SmokeMethod("setStatusTip(const QString&)")]
		public virtual void SetStatusTip(string arg1) {
			ProxyQAction().SetStatusTip(arg1);
		}
		[SmokeMethod("statusTip() const")]
		public string StatusTip() {
			return ProxyQAction().StatusTip();
		}
		[SmokeMethod("setWhatsThis(const QString&)")]
		public virtual void SetWhatsThis(string arg1) {
			ProxyQAction().SetWhatsThis(arg1);
		}
		[SmokeMethod("whatsThis() const")]
		public string WhatsThis() {
			return ProxyQAction().WhatsThis();
		}
		[SmokeMethod("setAccel(const QKeySequence&)")]
		public virtual void SetAccel(QKeySequence key) {
			ProxyQAction().SetAccel(key);
		}
		[SmokeMethod("accel() const")]
		public QKeySequence Accel() {
			return ProxyQAction().Accel();
		}
		[SmokeMethod("setToggleAction(bool)")]
		public virtual void SetToggleAction(bool arg1) {
			ProxyQAction().SetToggleAction(arg1);
		}
		[SmokeMethod("isToggleAction() const")]
		public bool IsToggleAction() {
			return ProxyQAction().IsToggleAction();
		}
		[SmokeMethod("isOn() const")]
		public bool IsOn() {
			return ProxyQAction().IsOn();
		}
		[SmokeMethod("isEnabled() const")]
		public bool IsEnabled() {
			return ProxyQAction().IsEnabled();
		}
		[SmokeMethod("isVisible() const")]
		public bool IsVisible() {
			return ProxyQAction().IsVisible();
		}
		[SmokeMethod("addTo(QWidget*)")]
		public virtual bool AddTo(QWidget arg1) {
			return ProxyQAction().AddTo(arg1);
		}
		[SmokeMethod("removeFrom(QWidget*)")]
		public virtual bool RemoveFrom(QWidget arg1) {
			return ProxyQAction().RemoveFrom(arg1);
		}
		[Q_SLOT("activate()")]
		[SmokeMethod("activate()")]
		public void Activate() {
			ProxyQAction().Activate();
		}
		[Q_SLOT("toggle()")]
		[SmokeMethod("toggle()")]
		public void Toggle() {
			ProxyQAction().Toggle();
		}
		[Q_SLOT("setOn(bool)")]
		[SmokeMethod("setOn(bool)")]
		public virtual void SetOn(bool arg1) {
			ProxyQAction().SetOn(arg1);
		}
		[Q_SLOT("setEnabled(bool)")]
		[SmokeMethod("setEnabled(bool)")]
		public virtual void SetEnabled(bool arg1) {
			ProxyQAction().SetEnabled(arg1);
		}
		[Q_SLOT("setDisabled(bool)")]
		[SmokeMethod("setDisabled(bool)")]
		public void SetDisabled(bool arg1) {
			ProxyQAction().SetDisabled(arg1);
		}
		[Q_SLOT("setVisible(bool)")]
		[SmokeMethod("setVisible(bool)")]
		public void SetVisible(bool arg1) {
			ProxyQAction().SetVisible(arg1);
		}
		[SmokeMethod("tr(const char*, const char*)")]
		public static new string Tr(string arg1, string arg2) {
			return StaticQAction().Tr(arg1,arg2);
		}
		[SmokeMethod("tr(const char*)")]
		public static new string Tr(string arg1) {
			return StaticQAction().Tr(arg1);
		}
		[SmokeMethod("trUtf8(const char*, const char*)")]
		public static new string TrUtf8(string arg1, string arg2) {
			return StaticQAction().TrUtf8(arg1,arg2);
		}
		[SmokeMethod("trUtf8(const char*)")]
		public static new string TrUtf8(string arg1) {
			return StaticQAction().TrUtf8(arg1);
		}
		[SmokeMethod("addedTo(QWidget*, QWidget*)")]
		protected virtual void AddedTo(QWidget actionWidget, QWidget container) {
			ProxyQAction().AddedTo(actionWidget,container);
		}
		[SmokeMethod("addedTo(int, QPopupMenu*)")]
		protected virtual void AddedTo(int index, QPopupMenu menu) {
			ProxyQAction().AddedTo(index,menu);
		}
		~QAction() {
			DisposeQAction();
		}
		public new void Dispose() {
			DisposeQAction();
		}
		private void DisposeQAction() {
			ProxyQAction().DisposeQAction();
		}
		protected void CreateQActionSignalProxy() {
			SignalInvocation realProxy = new SignalInvocation(typeof(IQActionSignals), this);
			_signalInterceptor = (IQActionSignals) realProxy.GetTransparentProxy();
		}
		protected new IQActionSignals Emit() {
			return (IQActionSignals) _signalInterceptor;
		}
	}

	public interface IQActionSignals : IQObjectSignals {
		[Q_SIGNAL("activated()")]
		void Activated();
		[Q_SIGNAL("toggled(bool)")]
		void Toggled(bool arg1);
	}
}
