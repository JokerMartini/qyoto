//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	[SmokeClass("QAsyncIO")]
	public class QAsyncIO : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QAsyncIO(Type dummy) {}
		interface IQAsyncIOProxy {
		}

		protected void CreateQAsyncIOProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QAsyncIO), this);
			_interceptor = (QAsyncIO) realProxy.GetTransparentProxy();
		}
		private QAsyncIO ProxyQAsyncIO() {
			return (QAsyncIO) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QAsyncIO() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQAsyncIOProxy), null);
			_staticInterceptor = (IQAsyncIOProxy) realProxy.GetTransparentProxy();
		}
		private static IQAsyncIOProxy StaticQAsyncIO() {
			return (IQAsyncIOProxy) _staticInterceptor;
		}

		[SmokeMethod("connect(QObject*, const char*)")]
		public void Connect(QObject arg1, string member) {
			ProxyQAsyncIO().Connect(arg1,member);
		}
		public QAsyncIO() : this((Type) null) {
			CreateQAsyncIOProxy();
			NewQAsyncIO();
		}
		[SmokeMethod("QAsyncIO()")]
		private void NewQAsyncIO() {
			ProxyQAsyncIO().NewQAsyncIO();
		}
		[SmokeMethod("ready()")]
		protected void Ready() {
			ProxyQAsyncIO().Ready();
		}
		~QAsyncIO() {
			DisposeQAsyncIO();
		}
		public void Dispose() {
			DisposeQAsyncIO();
		}
		private void DisposeQAsyncIO() {
			ProxyQAsyncIO().DisposeQAsyncIO();
		}
	}
}
