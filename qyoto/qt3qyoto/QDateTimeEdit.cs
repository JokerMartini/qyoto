//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	/// See <see cref="IQDateTimeEditSignals"></see> for signals emitted by QDateTimeEdit
	public class QDateTimeEdit : QWidget, IDisposable {
 		protected QDateTimeEdit(Type dummy) : base((Type) null) {}
		interface IQDateTimeEditProxy {
			string Tr(string arg1, string arg2);
			string Tr(string arg1);
			string TrUtf8(string arg1, string arg2);
			string TrUtf8(string arg1);
		}

		protected void CreateQDateTimeEditProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDateTimeEdit), this);
			_interceptor = (QDateTimeEdit) realProxy.GetTransparentProxy();
		}
		private QDateTimeEdit ProxyQDateTimeEdit() {
			return (QDateTimeEdit) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QDateTimeEdit() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDateTimeEditProxy), null);
			_staticInterceptor = (IQDateTimeEditProxy) realProxy.GetTransparentProxy();
		}
		private static IQDateTimeEditProxy StaticQDateTimeEdit() {
			return (IQDateTimeEditProxy) _staticInterceptor;
		}

		public new virtual QMetaObject MetaObject() {
			return ProxyQDateTimeEdit().MetaObject();
		}
		public new virtual string ClassName() {
			return ProxyQDateTimeEdit().ClassName();
		}
		public QDateTimeEdit(QWidget parent, string name) : this((Type) null) {
			CreateQDateTimeEditProxy();
			NewQDateTimeEdit(parent,name);
		}
		private void NewQDateTimeEdit(QWidget parent, string name) {
			ProxyQDateTimeEdit().NewQDateTimeEdit(parent,name);
		}
		public QDateTimeEdit(QWidget parent) : this((Type) null) {
			CreateQDateTimeEditProxy();
			NewQDateTimeEdit(parent);
		}
		private void NewQDateTimeEdit(QWidget parent) {
			ProxyQDateTimeEdit().NewQDateTimeEdit(parent);
		}
		public QDateTimeEdit() : this((Type) null) {
			CreateQDateTimeEditProxy();
			NewQDateTimeEdit();
		}
		private void NewQDateTimeEdit() {
			ProxyQDateTimeEdit().NewQDateTimeEdit();
		}
		public QDateTimeEdit(DateTime datetime, QWidget parent, string name) : this((Type) null) {
			CreateQDateTimeEditProxy();
			NewQDateTimeEdit(datetime,parent,name);
		}
		private void NewQDateTimeEdit(DateTime datetime, QWidget parent, string name) {
			ProxyQDateTimeEdit().NewQDateTimeEdit(datetime,parent,name);
		}
		public QDateTimeEdit(DateTime datetime, QWidget parent) : this((Type) null) {
			CreateQDateTimeEditProxy();
			NewQDateTimeEdit(datetime,parent);
		}
		private void NewQDateTimeEdit(DateTime datetime, QWidget parent) {
			ProxyQDateTimeEdit().NewQDateTimeEdit(datetime,parent);
		}
		public QDateTimeEdit(DateTime datetime) : this((Type) null) {
			CreateQDateTimeEditProxy();
			NewQDateTimeEdit(datetime);
		}
		private void NewQDateTimeEdit(DateTime datetime) {
			ProxyQDateTimeEdit().NewQDateTimeEdit(datetime);
		}
		public new QSize SizeHint() {
			return ProxyQDateTimeEdit().SizeHint();
		}
		public new QSize MinimumSizeHint() {
			return ProxyQDateTimeEdit().MinimumSizeHint();
		}
		public DateTime DateTime() {
			return ProxyQDateTimeEdit().DateTime();
		}
		public QDateEdit DateEdit() {
			return ProxyQDateTimeEdit().DateEdit();
		}
		public QTimeEdit TimeEdit() {
			return ProxyQDateTimeEdit().TimeEdit();
		}
		public virtual void SetAutoAdvance(bool advance) {
			ProxyQDateTimeEdit().SetAutoAdvance(advance);
		}
		public bool AutoAdvance() {
			return ProxyQDateTimeEdit().AutoAdvance();
		}
		public virtual void SetDateTime(DateTime dt) {
			ProxyQDateTimeEdit().SetDateTime(dt);
		}
		public static new string Tr(string arg1, string arg2) {
			return StaticQDateTimeEdit().Tr(arg1,arg2);
		}
		public static new string Tr(string arg1) {
			return StaticQDateTimeEdit().Tr(arg1);
		}
		public static new string TrUtf8(string arg1, string arg2) {
			return StaticQDateTimeEdit().TrUtf8(arg1,arg2);
		}
		public static new string TrUtf8(string arg1) {
			return StaticQDateTimeEdit().TrUtf8(arg1);
		}
		protected void Init() {
			ProxyQDateTimeEdit().Init();
		}
		protected new void ResizeEvent(QResizeEvent arg1) {
			ProxyQDateTimeEdit().ResizeEvent(arg1);
		}
		protected void NewValue(DateTime d) {
			ProxyQDateTimeEdit().NewValue(d);
		}
		~QDateTimeEdit() {
			ProxyQDateTimeEdit().Dispose();
		}
		public new void Dispose() {
			ProxyQDateTimeEdit().Dispose();
		}
	}

	public interface IQDateTimeEditSignals {
		void ValueChanged(DateTime datetime);
	}
}
