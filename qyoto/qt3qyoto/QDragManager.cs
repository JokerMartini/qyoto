//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	[SmokeClass("QDragManager")]
	public class QDragManager : QObject {
 		protected QDragManager(Type dummy) : base((Type) null) {}
		interface IQDragManagerProxy {
			string Tr(string arg1, string arg2);
			string Tr(string arg1);
			string TrUtf8(string arg1, string arg2);
			string TrUtf8(string arg1);
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDragManager), this);
			_interceptor = (QDragManager) realProxy.GetTransparentProxy();
		}
		private QDragManager ProxyQDragManager() {
			return (QDragManager) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QDragManager() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDragManagerProxy), null);
			_staticInterceptor = (IQDragManagerProxy) realProxy.GetTransparentProxy();
		}
		private static IQDragManagerProxy StaticQDragManager() {
			return (IQDragManagerProxy) _staticInterceptor;
		}

		[SmokeMethod("metaObject() const")]
		public new virtual QMetaObject MetaObject() {
			return ProxyQDragManager().MetaObject();
		}
		[SmokeMethod("className() const")]
		public new virtual string ClassName() {
			return ProxyQDragManager().ClassName();
		}
		[SmokeMethod("tr(const char*, const char*)")]
		public static new string Tr(string arg1, string arg2) {
			return StaticQDragManager().Tr(arg1,arg2);
		}
		[SmokeMethod("tr(const char*)")]
		public static new string Tr(string arg1) {
			return StaticQDragManager().Tr(arg1);
		}
		[SmokeMethod("trUtf8(const char*, const char*)")]
		public static new string TrUtf8(string arg1, string arg2) {
			return StaticQDragManager().TrUtf8(arg1,arg2);
		}
		[SmokeMethod("trUtf8(const char*)")]
		public static new string TrUtf8(string arg1) {
			return StaticQDragManager().TrUtf8(arg1);
		}
		protected new void CreateSignalProxy() {
			SignalInvocation realProxy = new SignalInvocation(typeof(IQDragManagerSignals), this);
			Q_EMIT = (IQDragManagerSignals) realProxy.GetTransparentProxy();
		}
		protected new IQDragManagerSignals Emit() {
			return (IQDragManagerSignals) Q_EMIT;
		}
	}

	public interface IQDragManagerSignals : IQObjectSignals {
	}
}
