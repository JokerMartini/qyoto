//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QConnectionListIt : IDisposable { //QPtrListIterator, 
		protected Object _interceptor = null;
 		protected QConnectionListIt(Type dummy) : base() {}
		interface IQConnectionListItProxy {
		}

		protected void CreateQConnectionListItProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QConnectionListIt), this);
			_interceptor = (QConnectionListIt) realProxy.GetTransparentProxy();
		}
		private QConnectionListIt ProxyQConnectionListIt() {
			return (QConnectionListIt) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QConnectionListIt() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQConnectionListItProxy), null);
			_staticInterceptor = (IQConnectionListItProxy) realProxy.GetTransparentProxy();
		}
		private static IQConnectionListItProxy StaticQConnectionListIt() {
			return (IQConnectionListItProxy) _staticInterceptor;
		}

		// QConnectionListIt* QConnectionListIt(const QConnectionList& arg1); >>>> NOT CONVERTED
		~QConnectionListIt() {
			ProxyQConnectionListIt().Dispose();
		}
		public void Dispose() {
			ProxyQConnectionListIt().Dispose();
		}
	}
}
