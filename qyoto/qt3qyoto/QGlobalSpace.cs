//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QGlobalSpace : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QGlobalSpace(Type dummy) {}
		interface IQGlobalSpaceProxy {
			QDataStream op_read(QDataStream s, QVariant p);
			QDataStream op_write(QDataStream s, QVariant p);
			QDataStream op_read(QDataStream s, int p);
			QDataStream op_write(QDataStream s, int p);
			QDataStream op_write(QDataStream arg1, QImage arg2);
			QDataStream op_read(QDataStream arg1, QImage arg2);
			void BitBlt(QImage dst, int dx, int dy, QImage src, int sx, int sy, int sw, int sh, int conversion_flags);
			void BitBlt(QImage dst, int dx, int dy, QImage src, int sx, int sy, int sw, int sh);
			void BitBlt(QImage dst, int dx, int dy, QImage src, int sx, int sy, int sw);
			void BitBlt(QImage dst, int dx, int dy, QImage src, int sx, int sy);
			void BitBlt(QImage dst, int dx, int dy, QImage src, int sx);
			void BitBlt(QImage dst, int dx, int dy, QImage src);
			QTextStream op_write(QTextStream arg1, QDockArea arg2);
			QTextStream op_read(QTextStream arg1, QDockArea arg2);
			QDataStream op_write(QDataStream arg1, QPoint arg2);
			QDataStream op_read(QDataStream arg1, QPoint arg2);
			bool op_equals(QPoint p1, QPoint p2);
			QPoint op_plus(QPoint p1, QPoint p2);
			QPoint op_minus(QPoint p1, QPoint p2);
			QPoint op_mult(QPoint p, int c);
			QPoint op_mult(int c, QPoint p);
			QPoint op_mult(QPoint p, double c);
			QPoint op_mult(double c, QPoint p);
			QPoint op_minus(QPoint p);
			QPoint op_div(QPoint p, int c);
			QPoint op_div(QPoint p, double c);
			bool op_equals(QRect arg1, QRect arg2);
			QDataStream op_write(QDataStream arg1, QRect arg2);
			QDataStream op_read(QDataStream arg1, QRect arg2);
			QDataStream op_write(QDataStream arg1, QBrush arg2);
			QDataStream op_read(QDataStream arg1, QBrush arg2);
			QDataStream op_write(QDataStream arg1, QSize arg2);
			QDataStream op_read(QDataStream arg1, QSize arg2);
			bool op_equals(QSize s1, QSize s2);
			QSize op_plus(QSize s1, QSize s2);
			QSize op_minus(QSize s1, QSize s2);
			QSize op_mult(QSize s, int c);
			QSize op_mult(int c, QSize s);
			QSize op_mult(QSize s, double c);
			QSize op_mult(double c, QSize s);
			QSize op_div(QSize s, int c);
			QSize op_div(QSize s, double c);
			string QGLVersion();
			bool op_equals(QGLFormat arg1, QGLFormat arg2);
			QDataStream op_read(QDataStream arg1, string[] arg2);
			QDataStream op_write(QDataStream arg1, string[] arg2);
			QDataStream op_write(QDataStream arg1, QUuid arg2);
			QDataStream op_read(QDataStream arg1, QUuid arg2);
			int QRed(uint rgb);
			int QGreen(uint rgb);
			int QBlue(uint rgb);
			int QAlpha(uint rgb);
			uint QRgb(int r, int g, int b);
			uint QRgba(int r, int g, int b, int a);
			int QGray(int r, int g, int b);
			int QGray(uint rgb);
			QDataStream op_write(QDataStream arg1, QColor arg2);
			QDataStream op_read(QDataStream arg1, QColor arg2);
			QTextStream Bin(QTextStream s);
			QTextStream Oct(QTextStream s);
			QTextStream Dec(QTextStream s);
			QTextStream Hex(QTextStream s);
			QTextStream Endl(QTextStream s);
			QTextStream Flush(QTextStream s);
			QTextStream Ws(QTextStream s);
			QTextStream Reset(QTextStream s);
			void QInitNetworkProtocols();
			QDataStream op_write(QDataStream arg1, QCursor arg2);
			QDataStream op_read(QDataStream arg1, QCursor arg2);
			int QRound(double d);
			string QVersion();
			bool QSysInfo(out int wordSize, out bool bigEndian);
			bool QSharedBuild();
			void QSystemWarning(string arg1, int code);
			void QSystemWarning(string arg1);
			void QSuppressObsoleteWarnings(bool arg1);
			void QSuppressObsoleteWarnings();
			void QObsolete(string arg1, string oldfunc, string newfunc);
			void QObsolete(string arg1, string oldfunc);
			void QObsolete(string message);
			string QInstallPath();
			string QInstallPathDocs();
			string QInstallPathHeaders();
			string QInstallPathLibs();
			string QInstallPathBins();
			string QInstallPathPlugins();
			string QInstallPathData();
			string QInstallPathTranslations();
			string QInstallPathSysconf();
			QDataStream op_write(QDataStream arg1, QPicture arg2);
			QDataStream op_read(QDataStream arg1, QPicture arg2);
			string Qstrdup(string arg1);
			uint Qstrlen(string str);
			string Qstrcpy(string dst, string src);
			string Qstrncpy(string dst, string src, uint len);
			int Qstrcmp(string str1, string str2);
			int Qstrncmp(string str1, string str2, uint len);
			int Qstricmp(string arg1, string arg2);
			int Qstrnicmp(string arg1, string arg2, uint len);
			uint Cstrlen(string str);
			string Cstrcpy(string dst, string src);
			int Cstrcmp(string str1, string str2);
			int Cstrncmp(string str1, string str2, uint len);
			ushort QChecksum(string s, uint len);
			byte[] QCompress(char[] data, int nbytes);
			byte[] QUncompress(char[] data, int nbytes);
			byte[] QCompress(byte[] data);
			byte[] QUncompress(byte[] data);
			QDataStream op_write(QDataStream arg1, byte[] arg2);
			QDataStream op_read(QDataStream arg1, byte[] arg2);
			QDataStream op_write(QDataStream arg1, string arg2);
			QDataStream op_read(QDataStream arg1, StringBuilder arg2);
			bool op_equals(string s1, string s2);
			bool op_lt(string s1, string s2);
			bool op_lte(string s1, string s2);
			bool op_gt(string s1, string s2);
			bool op_gte(string s1, string s2);
			string op_plus(string s1, string s2);
			string op_plus(string s1, char c2);
			string op_plus(char c1, string s2);
			QWMatrix op_mult(QWMatrix arg1, QWMatrix arg2);
			QDataStream op_write(QDataStream arg1, QWMatrix arg2);
			QDataStream op_read(QDataStream arg1, QWMatrix arg2);
			QTextStream op_write(QTextStream arg1, QMainWindow arg2);
			QTextStream op_read(QTextStream arg1, QMainWindow arg2);
			QDataStream op_write(QDataStream arg1, QPixmap arg2);
			QDataStream op_read(QDataStream arg1, QPixmap arg2);
			void CopyBlt(QPixmap dst, int dx, int dy, QPixmap src, int sx, int sy, int sw, int sh);
			void CopyBlt(QPixmap dst, int dx, int dy, QPixmap src, int sx, int sy, int sw);
			void CopyBlt(QPixmap dst, int dx, int dy, QPixmap src, int sx, int sy);
			void CopyBlt(QPixmap dst, int dx, int dy, QPixmap src, int sx);
			void CopyBlt(QPixmap dst, int dx, int dy, QPixmap src);
			string QAppName();
			QTextStream op_write(QTextStream arg1, QDomNode arg2);
			QDataStream op_write(QDataStream arg1, QKeySequence arg2);
			QDataStream op_read(QDataStream arg1, QKeySequence arg2);
			QDataStream op_write(QDataStream arg1, QPen arg2);
			QDataStream op_read(QDataStream arg1, QPen arg2);
			QDataStream op_write(QDataStream arg1, QPointArray arg2);
			QDataStream op_read(QDataStream arg1, QPointArray arg2);
			void QDrawShadeLine(QPainter p, int x1, int y1, int x2, int y2, QColorGroup g, bool sunken, int lineWidth, int midLineWidth);
			void QDrawShadeLine(QPainter p, int x1, int y1, int x2, int y2, QColorGroup g, bool sunken, int lineWidth);
			void QDrawShadeLine(QPainter p, int x1, int y1, int x2, int y2, QColorGroup g, bool sunken);
			void QDrawShadeLine(QPainter p, int x1, int y1, int x2, int y2, QColorGroup g);
			void QDrawShadeLine(QPainter p, QPoint p1, QPoint p2, QColorGroup g, bool sunken, int lineWidth, int midLineWidth);
			void QDrawShadeLine(QPainter p, QPoint p1, QPoint p2, QColorGroup g, bool sunken, int lineWidth);
			void QDrawShadeLine(QPainter p, QPoint p1, QPoint p2, QColorGroup g, bool sunken);
			void QDrawShadeLine(QPainter p, QPoint p1, QPoint p2, QColorGroup g);
			void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QColorGroup arg6, bool sunken, int lineWidth, int midLineWidth, QBrush fill);
			void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QColorGroup arg6, bool sunken, int lineWidth, int midLineWidth);
			void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QColorGroup arg6, bool sunken, int lineWidth);
			void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QColorGroup arg6, bool sunken);
			void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QColorGroup arg6);
			void QDrawShadeRect(QPainter p, QRect r, QColorGroup arg3, bool sunken, int lineWidth, int midLineWidth, QBrush fill);
			void QDrawShadeRect(QPainter p, QRect r, QColorGroup arg3, bool sunken, int lineWidth, int midLineWidth);
			void QDrawShadeRect(QPainter p, QRect r, QColorGroup arg3, bool sunken, int lineWidth);
			void QDrawShadeRect(QPainter p, QRect r, QColorGroup arg3, bool sunken);
			void QDrawShadeRect(QPainter p, QRect r, QColorGroup arg3);
			void QDrawShadePanel(QPainter p, int x, int y, int w, int h, QColorGroup arg6, bool sunken, int lineWidth, QBrush fill);
			void QDrawShadePanel(QPainter p, int x, int y, int w, int h, QColorGroup arg6, bool sunken, int lineWidth);
			void QDrawShadePanel(QPainter p, int x, int y, int w, int h, QColorGroup arg6, bool sunken);
			void QDrawShadePanel(QPainter p, int x, int y, int w, int h, QColorGroup arg6);
			void QDrawShadePanel(QPainter p, QRect r, QColorGroup arg3, bool sunken, int lineWidth, QBrush fill);
			void QDrawShadePanel(QPainter p, QRect r, QColorGroup arg3, bool sunken, int lineWidth);
			void QDrawShadePanel(QPainter p, QRect r, QColorGroup arg3, bool sunken);
			void QDrawShadePanel(QPainter p, QRect r, QColorGroup arg3);
			void QDrawWinButton(QPainter p, int x, int y, int w, int h, QColorGroup g, bool sunken, QBrush fill);
			void QDrawWinButton(QPainter p, int x, int y, int w, int h, QColorGroup g, bool sunken);
			void QDrawWinButton(QPainter p, int x, int y, int w, int h, QColorGroup g);
			void QDrawWinButton(QPainter p, QRect r, QColorGroup g, bool sunken, QBrush fill);
			void QDrawWinButton(QPainter p, QRect r, QColorGroup g, bool sunken);
			void QDrawWinButton(QPainter p, QRect r, QColorGroup g);
			void QDrawWinPanel(QPainter p, int x, int y, int w, int h, QColorGroup arg6, bool sunken, QBrush fill);
			void QDrawWinPanel(QPainter p, int x, int y, int w, int h, QColorGroup arg6, bool sunken);
			void QDrawWinPanel(QPainter p, int x, int y, int w, int h, QColorGroup arg6);
			void QDrawWinPanel(QPainter p, QRect r, QColorGroup arg3, bool sunken, QBrush fill);
			void QDrawWinPanel(QPainter p, QRect r, QColorGroup arg3, bool sunken);
			void QDrawWinPanel(QPainter p, QRect r, QColorGroup arg3);
			void QDrawPlainRect(QPainter p, int x, int y, int w, int h, QColor arg6, int lineWidth, QBrush fill);
			void QDrawPlainRect(QPainter p, int x, int y, int w, int h, QColor arg6, int lineWidth);
			void QDrawPlainRect(QPainter p, int x, int y, int w, int h, QColor arg6);
			void QDrawPlainRect(QPainter p, QRect r, QColor arg3, int lineWidth, QBrush fill);
			void QDrawPlainRect(QPainter p, QRect r, QColor arg3, int lineWidth);
			void QDrawPlainRect(QPainter p, QRect r, QColor arg3);
			QRect QItemRect(QPainter p, int gs, int x, int y, int w, int h, int flags, bool enabled, QPixmap pixmap, string text, int len);
			QRect QItemRect(QPainter p, int gs, int x, int y, int w, int h, int flags, bool enabled, QPixmap pixmap, string text);
			void QDrawItem(QPainter p, int gs, int x, int y, int w, int h, int flags, QColorGroup g, bool enabled, QPixmap pixmap, string text, int len, QColor penColor);
			void QDrawItem(QPainter p, int gs, int x, int y, int w, int h, int flags, QColorGroup g, bool enabled, QPixmap pixmap, string text, int len);
			void QDrawItem(QPainter p, int gs, int x, int y, int w, int h, int flags, QColorGroup g, bool enabled, QPixmap pixmap, string text);
			void QDrawArrow(QPainter p, int type, int style, bool down, int x, int y, int w, int h, QColorGroup g, bool enabled);
			QDataStream op_write(QDataStream arg1, QColorGroup arg2);
			QDataStream op_read(QDataStream arg1, QColorGroup arg2);
			QDataStream op_write(QDataStream arg1, QPalette arg2);
			QDataStream op_read(QDataStream arg1, QPalette arg2);
			QDataStream op_write(QDataStream arg1, DateTime arg2);
			QDataStream op_read(QDataStream arg1, DateTime arg2);
			bool op_equals(char ch, char c);
			bool op_lte(char c, char ch);
			bool op_gte(char c, char ch);
			bool op_lt(char c, char ch);
			bool op_gt(char c, char ch);
			QDataStream op_write(QDataStream arg1, QRegion arg2);
			QDataStream op_read(QDataStream arg1, QRegion arg2);
			QTextStream op_write(QTextStream arg1, QSplitter arg2);
			QTextStream op_read(QTextStream arg1, QSplitter arg2);
			QDataStream op_write(QDataStream arg1, QFont arg2);
			QDataStream op_read(QDataStream arg1, QFont arg2);
			void BitBlt(IQPaintDevice dst, int dx, int dy, IQPaintDevice src, int sx, int sy, int sw, int sh, int arg9, bool ignoreMask);
			void BitBlt(IQPaintDevice dst, int dx, int dy, IQPaintDevice src, int sx, int sy, int sw, int sh, int arg9);
			void BitBlt(IQPaintDevice dst, int dx, int dy, IQPaintDevice src, int sx, int sy, int sw, int sh);
			void BitBlt(IQPaintDevice dst, int dx, int dy, IQPaintDevice src, int sx, int sy, int sw);
			void BitBlt(IQPaintDevice dst, int dx, int dy, IQPaintDevice src, int sx, int sy);
			void BitBlt(IQPaintDevice dst, int dx, int dy, IQPaintDevice src, int sx);
			void BitBlt(IQPaintDevice dst, int dx, int dy, IQPaintDevice src);
			void BitBlt(IQPaintDevice dst, int dx, int dy, QImage src, int sx, int sy, int sw, int sh, int conversion_flags);
			void BitBlt(IQPaintDevice dst, int dx, int dy, QImage src, int sx, int sy, int sw, int sh);
			void BitBlt(IQPaintDevice dst, int dx, int dy, QImage src, int sx, int sy, int sw);
			void BitBlt(IQPaintDevice dst, int dx, int dy, QImage src, int sx, int sy);
			void BitBlt(IQPaintDevice dst, int dx, int dy, QImage src, int sx);
			void BitBlt(IQPaintDevice dst, int dx, int dy, QImage src);
			void BitBlt(IQPaintDevice dst, QPoint dp, IQPaintDevice src, QRect sr, int rop, bool ignoreMask);
			void BitBlt(IQPaintDevice dst, QPoint dp, IQPaintDevice src, QRect sr, int rop);
			void BitBlt(IQPaintDevice dst, QPoint dp, IQPaintDevice src, QRect sr);
			void BitBlt(IQPaintDevice dst, QPoint dp, IQPaintDevice src);
		}

		protected void CreateQGlobalSpaceProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QGlobalSpace), this);
			_interceptor = (QGlobalSpace) realProxy.GetTransparentProxy();
		}
		private QGlobalSpace ProxyQGlobalSpace() {
			return (QGlobalSpace) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QGlobalSpace() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQGlobalSpaceProxy), null);
			_staticInterceptor = (IQGlobalSpaceProxy) realProxy.GetTransparentProxy();
		}
		private static IQGlobalSpaceProxy StaticQGlobalSpace() {
			return (IQGlobalSpaceProxy) _staticInterceptor;
		}

		public static QDataStream op_read(QDataStream s, QVariant p) {
			return StaticQGlobalSpace().op_read(s,p);
		}
		public static QDataStream op_write(QDataStream s, QVariant p) {
			return StaticQGlobalSpace().op_write(s,p);
		}
		public static QDataStream op_read(QDataStream s, int p) {
			return StaticQGlobalSpace().op_read(s,p);
		}
		public static QDataStream op_write(QDataStream s, int p) {
			return StaticQGlobalSpace().op_write(s,p);
		}
		public static QDataStream op_write(QDataStream arg1, QImage arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QImage arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		public static void BitBlt(QImage dst, int dx, int dy, QImage src, int sx, int sy, int sw, int sh, int conversion_flags) {
			StaticQGlobalSpace().BitBlt(dst,dx,dy,src,sx,sy,sw,sh,conversion_flags);
		}
		public static void BitBlt(QImage dst, int dx, int dy, QImage src, int sx, int sy, int sw, int sh) {
			StaticQGlobalSpace().BitBlt(dst,dx,dy,src,sx,sy,sw,sh);
		}
		public static void BitBlt(QImage dst, int dx, int dy, QImage src, int sx, int sy, int sw) {
			StaticQGlobalSpace().BitBlt(dst,dx,dy,src,sx,sy,sw);
		}
		public static void BitBlt(QImage dst, int dx, int dy, QImage src, int sx, int sy) {
			StaticQGlobalSpace().BitBlt(dst,dx,dy,src,sx,sy);
		}
		public static void BitBlt(QImage dst, int dx, int dy, QImage src, int sx) {
			StaticQGlobalSpace().BitBlt(dst,dx,dy,src,sx);
		}
		public static void BitBlt(QImage dst, int dx, int dy, QImage src) {
			StaticQGlobalSpace().BitBlt(dst,dx,dy,src);
		}
		public static QTextStream op_write(QTextStream arg1, QDockArea arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QTextStream op_read(QTextStream arg1, QDockArea arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QPoint stream functions
		///**************************************************</remarks>		<short>                                                                                QPoint stream functions                                                                            </short>
		public static QDataStream op_write(QDataStream arg1, QPoint arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QPoint arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QPoint inline functions
		///**************************************************</remarks>		<short>                                                                                QPoint inline functions                                                                            </short>
		public static bool op_equals(QPoint p1, QPoint p2) {
			return StaticQGlobalSpace().op_equals(p1,p2);
		}
		public static QPoint op_plus(QPoint p1, QPoint p2) {
			return StaticQGlobalSpace().op_plus(p1,p2);
		}
		public static QPoint op_minus(QPoint p1, QPoint p2) {
			return StaticQGlobalSpace().op_minus(p1,p2);
		}
		public static QPoint op_mult(QPoint p, int c) {
			return StaticQGlobalSpace().op_mult(p,c);
		}
		public static QPoint op_mult(int c, QPoint p) {
			return StaticQGlobalSpace().op_mult(c,p);
		}
		public static QPoint op_mult(QPoint p, double c) {
			return StaticQGlobalSpace().op_mult(p,c);
		}
		public static QPoint op_mult(double c, QPoint p) {
			return StaticQGlobalSpace().op_mult(c,p);
		}
		public static QPoint op_minus(QPoint p) {
			return StaticQGlobalSpace().op_minus(p);
		}
		public static QPoint op_div(QPoint p, int c) {
			return StaticQGlobalSpace().op_div(p,c);
		}
		public static QPoint op_div(QPoint p, double c) {
			return StaticQGlobalSpace().op_div(p,c);
		}
		///<remarks>**************************************************
		///  QGVector stream functions
		///**************************************************</remarks>		<short>                                                                                QGVector stream functions                                                                            </short>
		// QDataStream& operator>>(QDataStream& arg1,QGVector& arg2); >>>> NOT CONVERTED
		// QDataStream& operator<<(QDataStream& arg1,const QGVector& arg2); >>>> NOT CONVERTED
		public static bool op_equals(QRect arg1, QRect arg2) {
			return StaticQGlobalSpace().op_equals(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QRect stream functions
		///**************************************************</remarks>		<short>                                                                                QRect stream functions                                                                            </short>
		public static QDataStream op_write(QDataStream arg1, QRect arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QRect arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QBrush stream functions
		///**************************************************</remarks>		<short>                                                                                QBrush stream functions                                                                            </short>
		public static QDataStream op_write(QDataStream arg1, QBrush arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QBrush arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QSize stream functions
		///**************************************************</remarks>		<short>                                                                                QSize stream functions                                                                            </short>
		public static QDataStream op_write(QDataStream arg1, QSize arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QSize arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QSize inline functions
		///**************************************************</remarks>		<short>                                                                                QSize inline functions                                                                            </short>
		public static bool op_equals(QSize s1, QSize s2) {
			return StaticQGlobalSpace().op_equals(s1,s2);
		}
		public static QSize op_plus(QSize s1, QSize s2) {
			return StaticQGlobalSpace().op_plus(s1,s2);
		}
		public static QSize op_minus(QSize s1, QSize s2) {
			return StaticQGlobalSpace().op_minus(s1,s2);
		}
		public static QSize op_mult(QSize s, int c) {
			return StaticQGlobalSpace().op_mult(s,c);
		}
		public static QSize op_mult(int c, QSize s) {
			return StaticQGlobalSpace().op_mult(c,s);
		}
		public static QSize op_mult(QSize s, double c) {
			return StaticQGlobalSpace().op_mult(s,c);
		}
		public static QSize op_mult(double c, QSize s) {
			return StaticQGlobalSpace().op_mult(c,s);
		}
		public static QSize op_div(QSize s, int c) {
			return StaticQGlobalSpace().op_div(s,c);
		}
		public static QSize op_div(QSize s, double c) {
			return StaticQGlobalSpace().op_div(s,c);
		}
		///<remarks>*************************************************
		/// $Id: qt/qgl.h   3.3.4   edited Jul 9 2003 $
		///
		///* Definition of OpenGL classes for Qt
		///
		///* Created : 970112
		///
		///* Copyright (C) 1992-2000 Trolltech AS.  All rights reserved.
		///
		///* This file is part of the opengl module of the Qt GUI Toolkit.
		///
		///* This file may be distributed under the terms of the Q Public License
		/// as defined by Trolltech AS of Norway and appearing in the file
		/// LICENSE.QPL included in the packaging of this file.
		///
		///* This file may be distributed and/or modified under the terms of the
		/// GNU General Public License version 2 as published by the Free Software
		/// Foundation and appearing in the file LICENSE.GPL included in the
		/// packaging of this file.
		///
		///* Licensees holding valid Qt Enterprise Edition licenses may use this
		/// file in accordance with the Qt Commercial License Agreement provided
		/// with the Software.
		///
		///* This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
		/// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
		///
		///* See http://www.trolltech.com/pricing.html or email sales@trolltech.com for
		///   information about Qt Commercial License Agreements.
		/// See http://www.trolltech.com/qpl/ for QPL licensing information.
		/// See http://www.trolltech.com/gpl/ for GPL licensing information.
		///
		///* Contact info@trolltech.com if any conditions of this licensing are
		/// not clear to you.
		///
		///**********************************************</remarks>		<short>                                                                               $Id: qt/qgl.</short>
		public static string QGLVersion() {
			return StaticQGlobalSpace().QGLVersion();
		}
		public static bool op_equals(QGLFormat arg1, QGLFormat arg2) {
			return StaticQGlobalSpace().op_equals(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, string[] arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		public static QDataStream op_write(QDataStream arg1, string[] arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_write(QDataStream arg1, QUuid arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QUuid arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		public static int QRed(uint rgb) {
			return StaticQGlobalSpace().QRed(rgb);
		}
		public static int QGreen(uint rgb) {
			return StaticQGlobalSpace().QGreen(rgb);
		}
		public static int QBlue(uint rgb) {
			return StaticQGlobalSpace().QBlue(rgb);
		}
		public static int QAlpha(uint rgb) {
			return StaticQGlobalSpace().QAlpha(rgb);
		}
		public static uint QRgb(int r, int g, int b) {
			return StaticQGlobalSpace().QRgb(r,g,b);
		}
		public static uint QRgba(int r, int g, int b, int a) {
			return StaticQGlobalSpace().QRgba(r,g,b,a);
		}
		public static int QGray(int r, int g, int b) {
			return StaticQGlobalSpace().QGray(r,g,b);
		}
		public static int QGray(uint rgb) {
			return StaticQGlobalSpace().QGray(rgb);
		}
		///<remarks>**************************************************
		///  QColor stream functions
		///**************************************************</remarks>		<short>                                                                                QColor stream functions                                                                            </short>
		public static QDataStream op_write(QDataStream arg1, QColor arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QColor arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		///<remarks>**************************************************
		///  Misc. QBitArray operator functions
		///**************************************************</remarks>		<short>                                                                                Misc.</short>
		// QBitArray operator&(const QBitArray& arg1,const QBitArray& arg2); >>>> NOT CONVERTED
		// QBitArray operator|(const QBitArray& arg1,const QBitArray& arg2); >>>> NOT CONVERTED
		// QBitArray operator^(const QBitArray& arg1,const QBitArray& arg2); >>>> NOT CONVERTED
		// QDataStream& operator<<(QDataStream& arg1,const QBitArray& arg2); >>>> NOT CONVERTED
		// QDataStream& operator>>(QDataStream& arg1,QBitArray& arg2); >>>> NOT CONVERTED
		// QTextStream& operator>>(QTextStream& arg1,QTSFUNC arg2); >>>> NOT CONVERTED
		// QTextStream& operator<<(QTextStream& arg1,QTSFUNC arg2); >>>> NOT CONVERTED
		// QTextStream& operator<<(QTextStream& arg1,QTSManip arg2); >>>> NOT CONVERTED
		public static QTextStream Bin(QTextStream s) {
			return StaticQGlobalSpace().Bin(s);
		}
		public static QTextStream Oct(QTextStream s) {
			return StaticQGlobalSpace().Oct(s);
		}
		public static QTextStream Dec(QTextStream s) {
			return StaticQGlobalSpace().Dec(s);
		}
		public static QTextStream Hex(QTextStream s) {
			return StaticQGlobalSpace().Hex(s);
		}
		public static QTextStream Endl(QTextStream s) {
			return StaticQGlobalSpace().Endl(s);
		}
		public static QTextStream Flush(QTextStream s) {
			return StaticQGlobalSpace().Flush(s);
		}
		public static QTextStream Ws(QTextStream s) {
			return StaticQGlobalSpace().Ws(s);
		}
		public static QTextStream Reset(QTextStream s) {
			return StaticQGlobalSpace().Reset(s);
		}
		// QTSManip qSetW(int arg1); >>>> NOT CONVERTED
		// QTSManip qSetFill(int arg1); >>>> NOT CONVERTED
		// QTSManip qSetPrecision(int arg1); >>>> NOT CONVERTED
		///<remarks>*************************************************
		/// $Id: qt/qnetwork.h   3.3.4   edited May 27 2003 $
		///
		///* Definition of qInitNetworkProtocols function.
		///
		///* Created : 970521
		///
		///* Copyright (C) 1992-2000 Trolltech AS.  All rights reserved.
		///
		///* This file is part of the network module of the Qt GUI Toolkit.
		///
		///* This file may be distributed under the terms of the Q Public License
		/// as defined by Trolltech AS of Norway and appearing in the file
		/// LICENSE.QPL included in the packaging of this file.
		///
		///* This file may be distributed and/or modified under the terms of the
		/// GNU General Public License version 2 as published by the Free Software
		/// Foundation and appearing in the file LICENSE.GPL included in the
		/// packaging of this file.
		///
		///* Licensees holding valid Qt Enterprise Edition licenses may use this
		/// file in accordance with the Qt Commercial License Agreement provided
		/// with the Software.
		///
		///* This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
		/// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
		///
		///* See http://www.trolltech.com/pricing.html or email sales@trolltech.com for
		///   information about Qt Commercial License Agreements.
		/// See http://www.trolltech.com/qpl/ for QPL licensing information.
		/// See http://www.trolltech.com/gpl/ for GPL licensing information.
		///
		///* Contact info@trolltech.com if any conditions of this licensing are
		/// not clear to you.
		///
		///**********************************************</remarks>		<short>                                                                               $Id: qt/qnetwork.</short>
		public static void QInitNetworkProtocols() {
			StaticQGlobalSpace().QInitNetworkProtocols();
		}
		///<remarks>**************************************************
		///  QCursor stream functions
		///**************************************************</remarks>		<short>                                                                                QCursor stream functions                                                                            </short>
		public static QDataStream op_write(QDataStream arg1, QCursor arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QCursor arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		public static int QRound(double d) {
			return StaticQGlobalSpace().QRound(d);
		}
		public static string QVersion() {
			return StaticQGlobalSpace().QVersion();
		}
		public static bool QSysInfo(out int wordSize, out bool bigEndian) {
			return StaticQGlobalSpace().QSysInfo(out wordSize,out bigEndian);
		}
		public static bool QSharedBuild() {
			return StaticQGlobalSpace().QSharedBuild();
		}
		public static void QSystemWarning(string arg1, int code) {
			StaticQGlobalSpace().QSystemWarning(arg1,code);
		}
		public static void QSystemWarning(string arg1) {
			StaticQGlobalSpace().QSystemWarning(arg1);
		}
		// QtMsgHandler qInstallMsgHandler(QtMsgHandler arg1); >>>> NOT CONVERTED
		public static void QSuppressObsoleteWarnings(bool arg1) {
			StaticQGlobalSpace().QSuppressObsoleteWarnings(arg1);
		}
		public static void QSuppressObsoleteWarnings() {
			StaticQGlobalSpace().QSuppressObsoleteWarnings();
		}
		public static void QObsolete(string arg1, string oldfunc, string newfunc) {
			StaticQGlobalSpace().QObsolete(arg1,oldfunc,newfunc);
		}
		public static void QObsolete(string arg1, string oldfunc) {
			StaticQGlobalSpace().QObsolete(arg1,oldfunc);
		}
		public static void QObsolete(string message) {
			StaticQGlobalSpace().QObsolete(message);
		}
		public static string QInstallPath() {
			return StaticQGlobalSpace().QInstallPath();
		}
		public static string QInstallPathDocs() {
			return StaticQGlobalSpace().QInstallPathDocs();
		}
		public static string QInstallPathHeaders() {
			return StaticQGlobalSpace().QInstallPathHeaders();
		}
		public static string QInstallPathLibs() {
			return StaticQGlobalSpace().QInstallPathLibs();
		}
		public static string QInstallPathBins() {
			return StaticQGlobalSpace().QInstallPathBins();
		}
		public static string QInstallPathPlugins() {
			return StaticQGlobalSpace().QInstallPathPlugins();
		}
		public static string QInstallPathData() {
			return StaticQGlobalSpace().QInstallPathData();
		}
		public static string QInstallPathTranslations() {
			return StaticQGlobalSpace().QInstallPathTranslations();
		}
		public static string QInstallPathSysconf() {
			return StaticQGlobalSpace().QInstallPathSysconf();
		}
		///<remarks>**************************************************
		///  QPicture stream functions
		///**************************************************</remarks>		<short>                                                                                QPicture stream functions                                                                            </short>
		public static QDataStream op_write(QDataStream arg1, QPicture arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QPicture arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		///<remarks>**************************************************
		///  Safe and portable C string functions; extensions to standard string.h
		///**************************************************</remarks>		<short>                                                                                Safe and portable C string functions; extensions to standard string.</short>
		// void* qmemmove(void* arg1,const void* arg2,uint arg3); >>>> NOT CONVERTED
		public static string Qstrdup(string arg1) {
			return StaticQGlobalSpace().Qstrdup(arg1);
		}
		public static uint Qstrlen(string str) {
			return StaticQGlobalSpace().Qstrlen(str);
		}
		public static string Qstrcpy(string dst, string src) {
			return StaticQGlobalSpace().Qstrcpy(dst,src);
		}
		public static string Qstrncpy(string dst, string src, uint len) {
			return StaticQGlobalSpace().Qstrncpy(dst,src,len);
		}
		public static int Qstrcmp(string str1, string str2) {
			return StaticQGlobalSpace().Qstrcmp(str1,str2);
		}
		public static int Qstrncmp(string str1, string str2, uint len) {
			return StaticQGlobalSpace().Qstrncmp(str1,str2,len);
		}
		public static int Qstricmp(string arg1, string arg2) {
			return StaticQGlobalSpace().Qstricmp(arg1,arg2);
		}
		public static int Qstrnicmp(string arg1, string arg2, uint len) {
			return StaticQGlobalSpace().Qstrnicmp(arg1,arg2,len);
		}
		public static uint Cstrlen(string str) {
			return StaticQGlobalSpace().Cstrlen(str);
		}
		public static string Cstrcpy(string dst, string src) {
			return StaticQGlobalSpace().Cstrcpy(dst,src);
		}
		public static int Cstrcmp(string str1, string str2) {
			return StaticQGlobalSpace().Cstrcmp(str1,str2);
		}
		public static int Cstrncmp(string str1, string str2, uint len) {
			return StaticQGlobalSpace().Cstrncmp(str1,str2,len);
		}
		public static ushort QChecksum(string s, uint len) {
			return StaticQGlobalSpace().QChecksum(s,len);
		}
		public static byte[] QCompress(char[] data, int nbytes) {
			return StaticQGlobalSpace().QCompress(data,nbytes);
		}
		public static byte[] QUncompress(char[] data, int nbytes) {
			return StaticQGlobalSpace().QUncompress(data,nbytes);
		}
		public static byte[] QCompress(byte[] data) {
			return StaticQGlobalSpace().QCompress(data);
		}
		public static byte[] QUncompress(byte[] data) {
			return StaticQGlobalSpace().QUncompress(data);
		}
		///<remarks>**************************************************
		///  byte[] stream functions
		///**************************************************</remarks>		<short>                                                                                QByteArray stream functions                                                                            </short>
		public static QDataStream op_write(QDataStream arg1, byte[] arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, byte[] arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		///<remarks>**************************************************
		///  string stream functions
		///**************************************************</remarks>		<short>                                                                                QCString stream functions                                                                            </short>
		public static QDataStream op_write(QDataStream arg1, string arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, StringBuilder arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		///<remarks>**************************************************
		///  string non-member operators
		///**************************************************</remarks>		<short>                                                                                QCString non-member operators                                                                            </short>
		public static bool op_equals(string s1, string s2) {
			return StaticQGlobalSpace().op_equals(s1,s2);
		}
		public static bool op_lt(string s1, string s2) {
			return StaticQGlobalSpace().op_lt(s1,s2);
		}
		public static bool op_lte(string s1, string s2) {
			return StaticQGlobalSpace().op_lte(s1,s2);
		}
		public static bool op_gt(string s1, string s2) {
			return StaticQGlobalSpace().op_gt(s1,s2);
		}
		public static bool op_gte(string s1, string s2) {
			return StaticQGlobalSpace().op_gte(s1,s2);
		}
		public static string op_plus(string s1, string s2) {
			return StaticQGlobalSpace().op_plus(s1,s2);
		}
		public static string op_plus(string s1, char c2) {
			return StaticQGlobalSpace().op_plus(s1,c2);
		}
		public static string op_plus(char c1, string s2) {
			return StaticQGlobalSpace().op_plus(c1,s2);
		}
		public static QWMatrix op_mult(QWMatrix arg1, QWMatrix arg2) {
			return StaticQGlobalSpace().op_mult(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QWMatrix stream functions
		///**************************************************</remarks>		<short>                                                                                QWMatrix stream functions                                                                            </short>
		public static QDataStream op_write(QDataStream arg1, QWMatrix arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QWMatrix arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		public static QTextStream op_write(QTextStream arg1, QMainWindow arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QTextStream op_read(QTextStream arg1, QMainWindow arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QPixmap stream functions
		///**************************************************</remarks>		<short>                                                                                QPixmap stream functions                                                                            </short>
		public static QDataStream op_write(QDataStream arg1, QPixmap arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QPixmap arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		public static void CopyBlt(QPixmap dst, int dx, int dy, QPixmap src, int sx, int sy, int sw, int sh) {
			StaticQGlobalSpace().CopyBlt(dst,dx,dy,src,sx,sy,sw,sh);
		}
		public static void CopyBlt(QPixmap dst, int dx, int dy, QPixmap src, int sx, int sy, int sw) {
			StaticQGlobalSpace().CopyBlt(dst,dx,dy,src,sx,sy,sw);
		}
		public static void CopyBlt(QPixmap dst, int dx, int dy, QPixmap src, int sx, int sy) {
			StaticQGlobalSpace().CopyBlt(dst,dx,dy,src,sx,sy);
		}
		public static void CopyBlt(QPixmap dst, int dx, int dy, QPixmap src, int sx) {
			StaticQGlobalSpace().CopyBlt(dst,dx,dy,src,sx);
		}
		public static void CopyBlt(QPixmap dst, int dx, int dy, QPixmap src) {
			StaticQGlobalSpace().CopyBlt(dst,dx,dy,src);
		}
		public static string QAppName() {
			return StaticQGlobalSpace().QAppName();
		}
		// void qAddPostRoutine(QtCleanUpFunction arg1); >>>> NOT CONVERTED
		// void qRemovePostRoutine(QtCleanUpFunction arg1); >>>> NOT CONVERTED
		public static QTextStream op_write(QTextStream arg1, QDomNode arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_write(QDataStream arg1, QKeySequence arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QKeySequence arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QPen stream functions
		///**************************************************</remarks>		<short>                                                                                QPen stream functions                                                                            </short>
		public static QDataStream op_write(QDataStream arg1, QPen arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QPen arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QPointArray stream functions
		///**************************************************</remarks>		<short>                                                                                QPointArray stream functions                                                                            </short>
		public static QDataStream op_write(QDataStream arg1, QPointArray arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QPointArray arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		public static void QDrawShadeLine(QPainter p, int x1, int y1, int x2, int y2, QColorGroup g, bool sunken, int lineWidth, int midLineWidth) {
			StaticQGlobalSpace().QDrawShadeLine(p,x1,y1,x2,y2,g,sunken,lineWidth,midLineWidth);
		}
		public static void QDrawShadeLine(QPainter p, int x1, int y1, int x2, int y2, QColorGroup g, bool sunken, int lineWidth) {
			StaticQGlobalSpace().QDrawShadeLine(p,x1,y1,x2,y2,g,sunken,lineWidth);
		}
		public static void QDrawShadeLine(QPainter p, int x1, int y1, int x2, int y2, QColorGroup g, bool sunken) {
			StaticQGlobalSpace().QDrawShadeLine(p,x1,y1,x2,y2,g,sunken);
		}
		public static void QDrawShadeLine(QPainter p, int x1, int y1, int x2, int y2, QColorGroup g) {
			StaticQGlobalSpace().QDrawShadeLine(p,x1,y1,x2,y2,g);
		}
		public static void QDrawShadeLine(QPainter p, QPoint p1, QPoint p2, QColorGroup g, bool sunken, int lineWidth, int midLineWidth) {
			StaticQGlobalSpace().QDrawShadeLine(p,p1,p2,g,sunken,lineWidth,midLineWidth);
		}
		public static void QDrawShadeLine(QPainter p, QPoint p1, QPoint p2, QColorGroup g, bool sunken, int lineWidth) {
			StaticQGlobalSpace().QDrawShadeLine(p,p1,p2,g,sunken,lineWidth);
		}
		public static void QDrawShadeLine(QPainter p, QPoint p1, QPoint p2, QColorGroup g, bool sunken) {
			StaticQGlobalSpace().QDrawShadeLine(p,p1,p2,g,sunken);
		}
		public static void QDrawShadeLine(QPainter p, QPoint p1, QPoint p2, QColorGroup g) {
			StaticQGlobalSpace().QDrawShadeLine(p,p1,p2,g);
		}
		public static void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QColorGroup arg6, bool sunken, int lineWidth, int midLineWidth, QBrush fill) {
			StaticQGlobalSpace().QDrawShadeRect(p,x,y,w,h,arg6,sunken,lineWidth,midLineWidth,fill);
		}
		public static void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QColorGroup arg6, bool sunken, int lineWidth, int midLineWidth) {
			StaticQGlobalSpace().QDrawShadeRect(p,x,y,w,h,arg6,sunken,lineWidth,midLineWidth);
		}
		public static void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QColorGroup arg6, bool sunken, int lineWidth) {
			StaticQGlobalSpace().QDrawShadeRect(p,x,y,w,h,arg6,sunken,lineWidth);
		}
		public static void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QColorGroup arg6, bool sunken) {
			StaticQGlobalSpace().QDrawShadeRect(p,x,y,w,h,arg6,sunken);
		}
		public static void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QColorGroup arg6) {
			StaticQGlobalSpace().QDrawShadeRect(p,x,y,w,h,arg6);
		}
		public static void QDrawShadeRect(QPainter p, QRect r, QColorGroup arg3, bool sunken, int lineWidth, int midLineWidth, QBrush fill) {
			StaticQGlobalSpace().QDrawShadeRect(p,r,arg3,sunken,lineWidth,midLineWidth,fill);
		}
		public static void QDrawShadeRect(QPainter p, QRect r, QColorGroup arg3, bool sunken, int lineWidth, int midLineWidth) {
			StaticQGlobalSpace().QDrawShadeRect(p,r,arg3,sunken,lineWidth,midLineWidth);
		}
		public static void QDrawShadeRect(QPainter p, QRect r, QColorGroup arg3, bool sunken, int lineWidth) {
			StaticQGlobalSpace().QDrawShadeRect(p,r,arg3,sunken,lineWidth);
		}
		public static void QDrawShadeRect(QPainter p, QRect r, QColorGroup arg3, bool sunken) {
			StaticQGlobalSpace().QDrawShadeRect(p,r,arg3,sunken);
		}
		public static void QDrawShadeRect(QPainter p, QRect r, QColorGroup arg3) {
			StaticQGlobalSpace().QDrawShadeRect(p,r,arg3);
		}
		public static void QDrawShadePanel(QPainter p, int x, int y, int w, int h, QColorGroup arg6, bool sunken, int lineWidth, QBrush fill) {
			StaticQGlobalSpace().QDrawShadePanel(p,x,y,w,h,arg6,sunken,lineWidth,fill);
		}
		public static void QDrawShadePanel(QPainter p, int x, int y, int w, int h, QColorGroup arg6, bool sunken, int lineWidth) {
			StaticQGlobalSpace().QDrawShadePanel(p,x,y,w,h,arg6,sunken,lineWidth);
		}
		public static void QDrawShadePanel(QPainter p, int x, int y, int w, int h, QColorGroup arg6, bool sunken) {
			StaticQGlobalSpace().QDrawShadePanel(p,x,y,w,h,arg6,sunken);
		}
		public static void QDrawShadePanel(QPainter p, int x, int y, int w, int h, QColorGroup arg6) {
			StaticQGlobalSpace().QDrawShadePanel(p,x,y,w,h,arg6);
		}
		public static void QDrawShadePanel(QPainter p, QRect r, QColorGroup arg3, bool sunken, int lineWidth, QBrush fill) {
			StaticQGlobalSpace().QDrawShadePanel(p,r,arg3,sunken,lineWidth,fill);
		}
		public static void QDrawShadePanel(QPainter p, QRect r, QColorGroup arg3, bool sunken, int lineWidth) {
			StaticQGlobalSpace().QDrawShadePanel(p,r,arg3,sunken,lineWidth);
		}
		public static void QDrawShadePanel(QPainter p, QRect r, QColorGroup arg3, bool sunken) {
			StaticQGlobalSpace().QDrawShadePanel(p,r,arg3,sunken);
		}
		public static void QDrawShadePanel(QPainter p, QRect r, QColorGroup arg3) {
			StaticQGlobalSpace().QDrawShadePanel(p,r,arg3);
		}
		public static void QDrawWinButton(QPainter p, int x, int y, int w, int h, QColorGroup g, bool sunken, QBrush fill) {
			StaticQGlobalSpace().QDrawWinButton(p,x,y,w,h,g,sunken,fill);
		}
		public static void QDrawWinButton(QPainter p, int x, int y, int w, int h, QColorGroup g, bool sunken) {
			StaticQGlobalSpace().QDrawWinButton(p,x,y,w,h,g,sunken);
		}
		public static void QDrawWinButton(QPainter p, int x, int y, int w, int h, QColorGroup g) {
			StaticQGlobalSpace().QDrawWinButton(p,x,y,w,h,g);
		}
		public static void QDrawWinButton(QPainter p, QRect r, QColorGroup g, bool sunken, QBrush fill) {
			StaticQGlobalSpace().QDrawWinButton(p,r,g,sunken,fill);
		}
		public static void QDrawWinButton(QPainter p, QRect r, QColorGroup g, bool sunken) {
			StaticQGlobalSpace().QDrawWinButton(p,r,g,sunken);
		}
		public static void QDrawWinButton(QPainter p, QRect r, QColorGroup g) {
			StaticQGlobalSpace().QDrawWinButton(p,r,g);
		}
		public static void QDrawWinPanel(QPainter p, int x, int y, int w, int h, QColorGroup arg6, bool sunken, QBrush fill) {
			StaticQGlobalSpace().QDrawWinPanel(p,x,y,w,h,arg6,sunken,fill);
		}
		public static void QDrawWinPanel(QPainter p, int x, int y, int w, int h, QColorGroup arg6, bool sunken) {
			StaticQGlobalSpace().QDrawWinPanel(p,x,y,w,h,arg6,sunken);
		}
		public static void QDrawWinPanel(QPainter p, int x, int y, int w, int h, QColorGroup arg6) {
			StaticQGlobalSpace().QDrawWinPanel(p,x,y,w,h,arg6);
		}
		public static void QDrawWinPanel(QPainter p, QRect r, QColorGroup arg3, bool sunken, QBrush fill) {
			StaticQGlobalSpace().QDrawWinPanel(p,r,arg3,sunken,fill);
		}
		public static void QDrawWinPanel(QPainter p, QRect r, QColorGroup arg3, bool sunken) {
			StaticQGlobalSpace().QDrawWinPanel(p,r,arg3,sunken);
		}
		public static void QDrawWinPanel(QPainter p, QRect r, QColorGroup arg3) {
			StaticQGlobalSpace().QDrawWinPanel(p,r,arg3);
		}
		public static void QDrawPlainRect(QPainter p, int x, int y, int w, int h, QColor arg6, int lineWidth, QBrush fill) {
			StaticQGlobalSpace().QDrawPlainRect(p,x,y,w,h,arg6,lineWidth,fill);
		}
		public static void QDrawPlainRect(QPainter p, int x, int y, int w, int h, QColor arg6, int lineWidth) {
			StaticQGlobalSpace().QDrawPlainRect(p,x,y,w,h,arg6,lineWidth);
		}
		public static void QDrawPlainRect(QPainter p, int x, int y, int w, int h, QColor arg6) {
			StaticQGlobalSpace().QDrawPlainRect(p,x,y,w,h,arg6);
		}
		public static void QDrawPlainRect(QPainter p, QRect r, QColor arg3, int lineWidth, QBrush fill) {
			StaticQGlobalSpace().QDrawPlainRect(p,r,arg3,lineWidth,fill);
		}
		public static void QDrawPlainRect(QPainter p, QRect r, QColor arg3, int lineWidth) {
			StaticQGlobalSpace().QDrawPlainRect(p,r,arg3,lineWidth);
		}
		public static void QDrawPlainRect(QPainter p, QRect r, QColor arg3) {
			StaticQGlobalSpace().QDrawPlainRect(p,r,arg3);
		}
		public static QRect QItemRect(QPainter p, int gs, int x, int y, int w, int h, int flags, bool enabled, QPixmap pixmap, string text, int len) {
			return StaticQGlobalSpace().QItemRect(p,gs,x,y,w,h,flags,enabled,pixmap,text,len);
		}
		public static QRect QItemRect(QPainter p, int gs, int x, int y, int w, int h, int flags, bool enabled, QPixmap pixmap, string text) {
			return StaticQGlobalSpace().QItemRect(p,gs,x,y,w,h,flags,enabled,pixmap,text);
		}
		public static void QDrawItem(QPainter p, int gs, int x, int y, int w, int h, int flags, QColorGroup g, bool enabled, QPixmap pixmap, string text, int len, QColor penColor) {
			StaticQGlobalSpace().QDrawItem(p,gs,x,y,w,h,flags,g,enabled,pixmap,text,len,penColor);
		}
		public static void QDrawItem(QPainter p, int gs, int x, int y, int w, int h, int flags, QColorGroup g, bool enabled, QPixmap pixmap, string text, int len) {
			StaticQGlobalSpace().QDrawItem(p,gs,x,y,w,h,flags,g,enabled,pixmap,text,len);
		}
		public static void QDrawItem(QPainter p, int gs, int x, int y, int w, int h, int flags, QColorGroup g, bool enabled, QPixmap pixmap, string text) {
			StaticQGlobalSpace().QDrawItem(p,gs,x,y,w,h,flags,g,enabled,pixmap,text);
		}
		public static void QDrawArrow(QPainter p, int type, int style, bool down, int x, int y, int w, int h, QColorGroup g, bool enabled) {
			StaticQGlobalSpace().QDrawArrow(p,type,style,down,x,y,w,h,g,enabled);
		}
		///<remarks>**************************************************
		///  QColorGroup/QPalette stream functions
		///**************************************************</remarks>		<short>                                                                                QColorGroup/QPalette stream functions                                                                            </short>
		public static QDataStream op_write(QDataStream arg1, QColorGroup arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QColorGroup arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		public static QDataStream op_write(QDataStream arg1, QPalette arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QPalette arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		// QDataStream& operator>>(QDataStream& arg1,QGList& arg2); >>>> NOT CONVERTED
		// QDataStream& operator<<(QDataStream& arg1,const QGList& arg2); >>>> NOT CONVERTED
		///<remarks>**************************************************
		///  Date and time stream functions
		///**************************************************</remarks>		<short>                                                                                Date and time stream functions                                                                            </short>
		public static QDataStream op_write(QDataStream arg1, DateTime arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, DateTime arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		public static bool op_equals(char ch, char c) {
			return StaticQGlobalSpace().op_equals(ch,c);
		}
		public static bool op_lte(char c, char ch) {
			return StaticQGlobalSpace().op_lte(c,ch);
		}
		public static bool op_gte(char c, char ch) {
			return StaticQGlobalSpace().op_gte(c,ch);
		}
		public static bool op_lt(char c, char ch) {
			return StaticQGlobalSpace().op_lt(c,ch);
		}
		public static bool op_gt(char c, char ch) {
			return StaticQGlobalSpace().op_gt(c,ch);
		}
		///<remarks>**************************************************
		///  QRegion stream functions
		///**************************************************</remarks>		<short>                                                                                QRegion stream functions                                                                            </short>
		public static QDataStream op_write(QDataStream arg1, QRegion arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QRegion arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		public static QTextStream op_write(QTextStream arg1, QSplitter arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QTextStream op_read(QTextStream arg1, QSplitter arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QFont stream functions
		///**************************************************</remarks>		<short>                                                                                QFont stream functions                                                                            </short>
		public static QDataStream op_write(QDataStream arg1, QFont arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QFont arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		public static void BitBlt(IQPaintDevice dst, int dx, int dy, IQPaintDevice src, int sx, int sy, int sw, int sh, int arg9, bool ignoreMask) {
			StaticQGlobalSpace().BitBlt(dst,dx,dy,src,sx,sy,sw,sh,arg9,ignoreMask);
		}
		public static void BitBlt(IQPaintDevice dst, int dx, int dy, IQPaintDevice src, int sx, int sy, int sw, int sh, int arg9) {
			StaticQGlobalSpace().BitBlt(dst,dx,dy,src,sx,sy,sw,sh,arg9);
		}
		public static void BitBlt(IQPaintDevice dst, int dx, int dy, IQPaintDevice src, int sx, int sy, int sw, int sh) {
			StaticQGlobalSpace().BitBlt(dst,dx,dy,src,sx,sy,sw,sh);
		}
		public static void BitBlt(IQPaintDevice dst, int dx, int dy, IQPaintDevice src, int sx, int sy, int sw) {
			StaticQGlobalSpace().BitBlt(dst,dx,dy,src,sx,sy,sw);
		}
		public static void BitBlt(IQPaintDevice dst, int dx, int dy, IQPaintDevice src, int sx, int sy) {
			StaticQGlobalSpace().BitBlt(dst,dx,dy,src,sx,sy);
		}
		public static void BitBlt(IQPaintDevice dst, int dx, int dy, IQPaintDevice src, int sx) {
			StaticQGlobalSpace().BitBlt(dst,dx,dy,src,sx);
		}
		public static void BitBlt(IQPaintDevice dst, int dx, int dy, IQPaintDevice src) {
			StaticQGlobalSpace().BitBlt(dst,dx,dy,src);
		}
		public static void BitBlt(IQPaintDevice dst, int dx, int dy, QImage src, int sx, int sy, int sw, int sh, int conversion_flags) {
			StaticQGlobalSpace().BitBlt(dst,dx,dy,src,sx,sy,sw,sh,conversion_flags);
		}
		public static void BitBlt(IQPaintDevice dst, int dx, int dy, QImage src, int sx, int sy, int sw, int sh) {
			StaticQGlobalSpace().BitBlt(dst,dx,dy,src,sx,sy,sw,sh);
		}
		public static void BitBlt(IQPaintDevice dst, int dx, int dy, QImage src, int sx, int sy, int sw) {
			StaticQGlobalSpace().BitBlt(dst,dx,dy,src,sx,sy,sw);
		}
		public static void BitBlt(IQPaintDevice dst, int dx, int dy, QImage src, int sx, int sy) {
			StaticQGlobalSpace().BitBlt(dst,dx,dy,src,sx,sy);
		}
		public static void BitBlt(IQPaintDevice dst, int dx, int dy, QImage src, int sx) {
			StaticQGlobalSpace().BitBlt(dst,dx,dy,src,sx);
		}
		public static void BitBlt(IQPaintDevice dst, int dx, int dy, QImage src) {
			StaticQGlobalSpace().BitBlt(dst,dx,dy,src);
		}
		///<remarks>**************************************************
		///  Inline functions
		///**************************************************</remarks>		<short>                                                                                Inline functions                                                                            </short>
		public static void BitBlt(IQPaintDevice dst, QPoint dp, IQPaintDevice src, QRect sr, int rop, bool ignoreMask) {
			StaticQGlobalSpace().BitBlt(dst,dp,src,sr,rop,ignoreMask);
		}
		public static void BitBlt(IQPaintDevice dst, QPoint dp, IQPaintDevice src, QRect sr, int rop) {
			StaticQGlobalSpace().BitBlt(dst,dp,src,sr,rop);
		}
		public static void BitBlt(IQPaintDevice dst, QPoint dp, IQPaintDevice src, QRect sr) {
			StaticQGlobalSpace().BitBlt(dst,dp,src,sr);
		}
		public static void BitBlt(IQPaintDevice dst, QPoint dp, IQPaintDevice src) {
			StaticQGlobalSpace().BitBlt(dst,dp,src);
		}
		~QGlobalSpace() {
			ProxyQGlobalSpace().Dispose();
		}
		public void Dispose() {
			ProxyQGlobalSpace().Dispose();
		}
	}
}
