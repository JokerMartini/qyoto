//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	[SmokeClass("QCustomEvent")]
	public class QCustomEvent : QEvent, IDisposable {
 		protected QCustomEvent(Type dummy) : base((Type) null) {}
		interface IQCustomEventProxy {
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QCustomEvent), this);
			_interceptor = (QCustomEvent) realProxy.GetTransparentProxy();
		}
		private QCustomEvent ProxyQCustomEvent() {
			return (QCustomEvent) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QCustomEvent() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQCustomEventProxy), null);
			_staticInterceptor = (IQCustomEventProxy) realProxy.GetTransparentProxy();
		}
		private static IQCustomEventProxy StaticQCustomEvent() {
			return (IQCustomEventProxy) _staticInterceptor;
		}

		public QCustomEvent(int type) : this((Type) null) {
			CreateProxy();
			NewQCustomEvent(type);
		}
		[SmokeMethod("QCustomEvent(int)")]
		private void NewQCustomEvent(int type) {
			ProxyQCustomEvent().NewQCustomEvent(type);
		}
		// QCustomEvent* QCustomEvent(QEvent::Type arg1,void* arg2); >>>> NOT CONVERTED
		// void* data(); >>>> NOT CONVERTED
		// void setData(void* arg1); >>>> NOT CONVERTED
		~QCustomEvent() {
			DisposeQCustomEvent();
		}
		public new void Dispose() {
			DisposeQCustomEvent();
		}
		private void DisposeQCustomEvent() {
			ProxyQCustomEvent().DisposeQCustomEvent();
		}
	}
}
