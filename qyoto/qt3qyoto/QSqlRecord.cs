//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Collections;
	using System.Text;

	public class QSqlRecord : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QSqlRecord(Type dummy) {}
		interface IQSqlRecordProxy {
		}

		protected void CreateQSqlRecordProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSqlRecord), this);
			_interceptor = (QSqlRecord) realProxy.GetTransparentProxy();
		}
		private QSqlRecord ProxyQSqlRecord() {
			return (QSqlRecord) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QSqlRecord() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSqlRecordProxy), null);
			_staticInterceptor = (IQSqlRecordProxy) realProxy.GetTransparentProxy();
		}
		private static IQSqlRecordProxy StaticQSqlRecord() {
			return (IQSqlRecordProxy) _staticInterceptor;
		}

		public QSqlRecord() : this((Type) null) {
			CreateQSqlRecordProxy();
			NewQSqlRecord();
		}
		private void NewQSqlRecord() {
			ProxyQSqlRecord().NewQSqlRecord();
		}
		public QSqlRecord(QSqlRecord other) : this((Type) null) {
			CreateQSqlRecordProxy();
			NewQSqlRecord(other);
		}
		private void NewQSqlRecord(QSqlRecord other) {
			ProxyQSqlRecord().NewQSqlRecord(other);
		}
		public virtual QVariant Value(int i) {
			return ProxyQSqlRecord().Value(i);
		}
		public virtual QVariant Value(string name) {
			return ProxyQSqlRecord().Value(name);
		}
		public virtual void SetValue(int i, QVariant val) {
			ProxyQSqlRecord().SetValue(i,val);
		}
		public virtual void SetValue(string name, QVariant val) {
			ProxyQSqlRecord().SetValue(name,val);
		}
		public bool IsGenerated(int i) {
			return ProxyQSqlRecord().IsGenerated(i);
		}
		public bool IsGenerated(string name) {
			return ProxyQSqlRecord().IsGenerated(name);
		}
		public virtual void SetGenerated(string name, bool generated) {
			ProxyQSqlRecord().SetGenerated(name,generated);
		}
		public virtual void SetGenerated(int i, bool generated) {
			ProxyQSqlRecord().SetGenerated(i,generated);
		}
		public virtual void SetNull(int i) {
			ProxyQSqlRecord().SetNull(i);
		}
		public virtual void SetNull(string name) {
			ProxyQSqlRecord().SetNull(name);
		}
		public bool IsNull(int i) {
			return ProxyQSqlRecord().IsNull(i);
		}
		public bool IsNull(string name) {
			return ProxyQSqlRecord().IsNull(name);
		}
		public int Position(string name) {
			return ProxyQSqlRecord().Position(name);
		}
		public string FieldName(int i) {
			return ProxyQSqlRecord().FieldName(i);
		}
		public QSqlField Field(int i) {
			return ProxyQSqlRecord().Field(i);
		}
		public QSqlField Field(string name) {
			return ProxyQSqlRecord().Field(name);
		}
		public virtual void Append(QSqlField field) {
			ProxyQSqlRecord().Append(field);
		}
		public virtual void Insert(int pos, QSqlField field) {
			ProxyQSqlRecord().Insert(pos,field);
		}
		public virtual void Remove(int pos) {
			ProxyQSqlRecord().Remove(pos);
		}
		public bool IsEmpty() {
			return ProxyQSqlRecord().IsEmpty();
		}
		public bool Contains(string name) {
			return ProxyQSqlRecord().Contains(name);
		}
		public virtual void Clear() {
			ProxyQSqlRecord().Clear();
		}
		public virtual void ClearValues(bool nullify) {
			ProxyQSqlRecord().ClearValues(nullify);
		}
		public virtual void ClearValues() {
			ProxyQSqlRecord().ClearValues();
		}
		public uint Count() {
			return ProxyQSqlRecord().Count();
		}
		public new virtual string ToString(string prefix, string sep) {
			return ProxyQSqlRecord().ToString(prefix,sep);
		}
		public new virtual string ToString(string prefix) {
			return ProxyQSqlRecord().ToString(prefix);
		}
		public new virtual string ToString() {
			return ProxyQSqlRecord().ToString();
		}
		public virtual ArrayList ToStringList(string prefix) {
			return ProxyQSqlRecord().ToStringList(prefix);
		}
		public virtual ArrayList ToStringList() {
			return ProxyQSqlRecord().ToStringList();
		}
		~QSqlRecord() {
			ProxyQSqlRecord().Dispose();
		}
		public void Dispose() {
			ProxyQSqlRecord().Dispose();
		}
	}
}
