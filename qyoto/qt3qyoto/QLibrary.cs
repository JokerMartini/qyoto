//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QLibrary : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QLibrary(Type dummy) {}
		interface IQLibraryProxy {
		}

		protected void CreateQLibraryProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QLibrary), this);
			_interceptor = (QLibrary) realProxy.GetTransparentProxy();
		}
		private QLibrary ProxyQLibrary() {
			return (QLibrary) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QLibrary() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQLibraryProxy), null);
			_staticInterceptor = (IQLibraryProxy) realProxy.GetTransparentProxy();
		}
		private static IQLibraryProxy StaticQLibrary() {
			return (IQLibraryProxy) _staticInterceptor;
		}

		public QLibrary(string filename) : this((Type) null) {
			CreateQLibraryProxy();
			NewQLibrary(filename);
		}
		private void NewQLibrary(string filename) {
			ProxyQLibrary().NewQLibrary(filename);
		}
		// void* resolve(const char* arg1); >>>> NOT CONVERTED
		public bool Load() {
			return ProxyQLibrary().Load();
		}
		public virtual bool Unload() {
			return ProxyQLibrary().Unload();
		}
		public bool IsLoaded() {
			return ProxyQLibrary().IsLoaded();
		}
		public bool AutoUnload() {
			return ProxyQLibrary().AutoUnload();
		}
		public void SetAutoUnload(bool enable) {
			ProxyQLibrary().SetAutoUnload(enable);
		}
		public string Library() {
			return ProxyQLibrary().Library();
		}
		// void* resolve(const QString& arg1,const char* arg2); >>>> NOT CONVERTED
		~QLibrary() {
			ProxyQLibrary().Dispose();
		}
		public void Dispose() {
			ProxyQLibrary().Dispose();
		}
	}
}
