//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QPixmapCache : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QPixmapCache(Type dummy) {}
		interface IQPixmapCacheProxy {
			int CacheLimit();
			void SetCacheLimit(int arg1);
			QPixmap Find(string key);
			bool Find(string key, QPixmap arg2);
			bool Insert(string key, QPixmap arg2);
			void Remove(string key);
			void Clear();
		}

		protected void CreateQPixmapCacheProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QPixmapCache), this);
			_interceptor = (QPixmapCache) realProxy.GetTransparentProxy();
		}
		private QPixmapCache ProxyQPixmapCache() {
			return (QPixmapCache) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QPixmapCache() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQPixmapCacheProxy), null);
			_staticInterceptor = (IQPixmapCacheProxy) realProxy.GetTransparentProxy();
		}
		private static IQPixmapCacheProxy StaticQPixmapCache() {
			return (IQPixmapCacheProxy) _staticInterceptor;
		}

		public QPixmapCache() : this((Type) null) {
			CreateQPixmapCacheProxy();
			NewQPixmapCache();
		}
		private void NewQPixmapCache() {
			ProxyQPixmapCache().NewQPixmapCache();
		}
		public static int CacheLimit() {
			return StaticQPixmapCache().CacheLimit();
		}
		public static void SetCacheLimit(int arg1) {
			StaticQPixmapCache().SetCacheLimit(arg1);
		}
		public static QPixmap Find(string key) {
			return StaticQPixmapCache().Find(key);
		}
		public static bool Find(string key, QPixmap arg2) {
			return StaticQPixmapCache().Find(key,arg2);
		}
		public static bool Insert(string key, QPixmap arg2) {
			return StaticQPixmapCache().Insert(key,arg2);
		}
		public static void Remove(string key) {
			StaticQPixmapCache().Remove(key);
		}
		public static void Clear() {
			StaticQPixmapCache().Clear();
		}
		~QPixmapCache() {
			ProxyQPixmapCache().Dispose();
		}
		public void Dispose() {
			ProxyQPixmapCache().Dispose();
		}
	}
}
