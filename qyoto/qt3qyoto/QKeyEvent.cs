//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	[SmokeClass("QKeyEvent")]
	public class QKeyEvent : QEvent, IDisposable {
 		protected QKeyEvent(Type dummy) : base((Type) null) {}
		interface IQKeyEventProxy {
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QKeyEvent), this);
			_interceptor = (QKeyEvent) realProxy.GetTransparentProxy();
		}
		private QKeyEvent ProxyQKeyEvent() {
			return (QKeyEvent) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QKeyEvent() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQKeyEventProxy), null);
			_staticInterceptor = (IQKeyEventProxy) realProxy.GetTransparentProxy();
		}
		private static IQKeyEventProxy StaticQKeyEvent() {
			return (IQKeyEventProxy) _staticInterceptor;
		}

		public QKeyEvent(QEvent.E_Type type, int key, int ascii, int state, string text, bool autorep, ushort count) : this((Type) null) {
			CreateProxy();
			NewQKeyEvent(type,key,ascii,state,text,autorep,count);
		}
		[SmokeMethod("QKeyEvent(QEvent::Type, int, int, int, const QString&, bool, ushort)")]
		private void NewQKeyEvent(QEvent.E_Type type, int key, int ascii, int state, string text, bool autorep, ushort count) {
			ProxyQKeyEvent().NewQKeyEvent(type,key,ascii,state,text,autorep,count);
		}
		public QKeyEvent(QEvent.E_Type type, int key, int ascii, int state, string text, bool autorep) : this((Type) null) {
			CreateProxy();
			NewQKeyEvent(type,key,ascii,state,text,autorep);
		}
		[SmokeMethod("QKeyEvent(QEvent::Type, int, int, int, const QString&, bool)")]
		private void NewQKeyEvent(QEvent.E_Type type, int key, int ascii, int state, string text, bool autorep) {
			ProxyQKeyEvent().NewQKeyEvent(type,key,ascii,state,text,autorep);
		}
		public QKeyEvent(QEvent.E_Type type, int key, int ascii, int state, string text) : this((Type) null) {
			CreateProxy();
			NewQKeyEvent(type,key,ascii,state,text);
		}
		[SmokeMethod("QKeyEvent(QEvent::Type, int, int, int, const QString&)")]
		private void NewQKeyEvent(QEvent.E_Type type, int key, int ascii, int state, string text) {
			ProxyQKeyEvent().NewQKeyEvent(type,key,ascii,state,text);
		}
		public QKeyEvent(QEvent.E_Type type, int key, int ascii, int state) : this((Type) null) {
			CreateProxy();
			NewQKeyEvent(type,key,ascii,state);
		}
		[SmokeMethod("QKeyEvent(QEvent::Type, int, int, int)")]
		private void NewQKeyEvent(QEvent.E_Type type, int key, int ascii, int state) {
			ProxyQKeyEvent().NewQKeyEvent(type,key,ascii,state);
		}
		[SmokeMethod("key() const")]
		public int Key() {
			return ProxyQKeyEvent().Key();
		}
		[SmokeMethod("ascii() const")]
		public int Ascii() {
			return ProxyQKeyEvent().Ascii();
		}
		[SmokeMethod("state() const")]
		public Qt.ButtonState State() {
			return ProxyQKeyEvent().State();
		}
		[SmokeMethod("stateAfter() const")]
		public Qt.ButtonState StateAfter() {
			return ProxyQKeyEvent().StateAfter();
		}
		[SmokeMethod("isAccepted() const")]
		public bool IsAccepted() {
			return ProxyQKeyEvent().IsAccepted();
		}
		[SmokeMethod("text() const")]
		public string Text() {
			return ProxyQKeyEvent().Text();
		}
		[SmokeMethod("isAutoRepeat() const")]
		public bool IsAutoRepeat() {
			return ProxyQKeyEvent().IsAutoRepeat();
		}
		[SmokeMethod("count() const")]
		public int Count() {
			return ProxyQKeyEvent().Count();
		}
		[SmokeMethod("accept()")]
		public void Accept() {
			ProxyQKeyEvent().Accept();
		}
		[SmokeMethod("ignore()")]
		public void Ignore() {
			ProxyQKeyEvent().Ignore();
		}
		~QKeyEvent() {
			DisposeQKeyEvent();
		}
		public new void Dispose() {
			DisposeQKeyEvent();
		}
		private void DisposeQKeyEvent() {
			ProxyQKeyEvent().DisposeQKeyEvent();
		}
	}
}
