//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QBitVal : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QBitVal(Type dummy) {}
		interface IQBitValProxy {
		}

		protected void CreateQBitValProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QBitVal), this);
			_interceptor = (QBitVal) realProxy.GetTransparentProxy();
		}
		private QBitVal ProxyQBitVal() {
			return (QBitVal) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QBitVal() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQBitValProxy), null);
			_staticInterceptor = (IQBitValProxy) realProxy.GetTransparentProxy();
		}
		private static IQBitValProxy StaticQBitVal() {
			return (IQBitValProxy) _staticInterceptor;
		}

		// QBitVal* QBitVal(QBitArray* arg1,uint arg2); >>>> NOT CONVERTED
		//  operator int(); >>>> NOT CONVERTED
		~QBitVal() {
			ProxyQBitVal().Dispose();
		}
		public void Dispose() {
			ProxyQBitVal().Dispose();
		}
	}
}
