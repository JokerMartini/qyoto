//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	/// See <see cref="IQSpinBoxSignals"></see> for signals emitted by QSpinBox
	public class QSpinBox : QWidget, IQRangeControl, IDisposable {
 		protected QSpinBox(Type dummy) : base((Type) null) {}
		interface IQSpinBoxProxy {
			string Tr(string arg1, string arg2);
			string Tr(string arg1);
			string TrUtf8(string arg1, string arg2);
			string TrUtf8(string arg1);
		}

		protected void CreateQSpinBoxProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSpinBox), this);
			_interceptor = (QSpinBox) realProxy.GetTransparentProxy();
		}
		private QSpinBox ProxyQSpinBox() {
			return (QSpinBox) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QSpinBox() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSpinBoxProxy), null);
			_staticInterceptor = (IQSpinBoxProxy) realProxy.GetTransparentProxy();
		}
		private static IQSpinBoxProxy StaticQSpinBox() {
			return (IQSpinBoxProxy) _staticInterceptor;
		}

		enum E_ButtonSymbols {
			UpDownArrows = 0,
			PlusMinus = 1,
		}
		public new virtual QMetaObject MetaObject() {
			return ProxyQSpinBox().MetaObject();
		}
		public new virtual string ClassName() {
			return ProxyQSpinBox().ClassName();
		}
		public QSpinBox(QWidget parent, string name) : this((Type) null) {
			CreateQSpinBoxProxy();
			NewQSpinBox(parent,name);
		}
		private void NewQSpinBox(QWidget parent, string name) {
			ProxyQSpinBox().NewQSpinBox(parent,name);
		}
		public QSpinBox(QWidget parent) : this((Type) null) {
			CreateQSpinBoxProxy();
			NewQSpinBox(parent);
		}
		private void NewQSpinBox(QWidget parent) {
			ProxyQSpinBox().NewQSpinBox(parent);
		}
		public QSpinBox() : this((Type) null) {
			CreateQSpinBoxProxy();
			NewQSpinBox();
		}
		private void NewQSpinBox() {
			ProxyQSpinBox().NewQSpinBox();
		}
		public QSpinBox(int minValue, int maxValue, int step, QWidget parent, string name) : this((Type) null) {
			CreateQSpinBoxProxy();
			NewQSpinBox(minValue,maxValue,step,parent,name);
		}
		private void NewQSpinBox(int minValue, int maxValue, int step, QWidget parent, string name) {
			ProxyQSpinBox().NewQSpinBox(minValue,maxValue,step,parent,name);
		}
		public QSpinBox(int minValue, int maxValue, int step, QWidget parent) : this((Type) null) {
			CreateQSpinBoxProxy();
			NewQSpinBox(minValue,maxValue,step,parent);
		}
		private void NewQSpinBox(int minValue, int maxValue, int step, QWidget parent) {
			ProxyQSpinBox().NewQSpinBox(minValue,maxValue,step,parent);
		}
		public QSpinBox(int minValue, int maxValue, int step) : this((Type) null) {
			CreateQSpinBoxProxy();
			NewQSpinBox(minValue,maxValue,step);
		}
		private void NewQSpinBox(int minValue, int maxValue, int step) {
			ProxyQSpinBox().NewQSpinBox(minValue,maxValue,step);
		}
		public QSpinBox(int minValue, int maxValue) : this((Type) null) {
			CreateQSpinBoxProxy();
			NewQSpinBox(minValue,maxValue);
		}
		private void NewQSpinBox(int minValue, int maxValue) {
			ProxyQSpinBox().NewQSpinBox(minValue,maxValue);
		}
		public string Text() {
			return ProxyQSpinBox().Text();
		}
		public virtual string Prefix() {
			return ProxyQSpinBox().Prefix();
		}
		public virtual string Suffix() {
			return ProxyQSpinBox().Suffix();
		}
		public virtual string CleanText() {
			return ProxyQSpinBox().CleanText();
		}
		public virtual void SetSpecialValueText(string text) {
			ProxyQSpinBox().SetSpecialValueText(text);
		}
		public string SpecialValueText() {
			return ProxyQSpinBox().SpecialValueText();
		}
		public virtual void SetWrapping(bool on) {
			ProxyQSpinBox().SetWrapping(on);
		}
		public bool Wrapping() {
			return ProxyQSpinBox().Wrapping();
		}
		public virtual void SetButtonSymbols(int arg1) {
			ProxyQSpinBox().SetButtonSymbols(arg1);
		}
		public int ButtonSymbols() {
			return ProxyQSpinBox().ButtonSymbols();
		}
		public virtual void SetValidator(QValidator v) {
			ProxyQSpinBox().SetValidator(v);
		}
		public QValidator Validator() {
			return ProxyQSpinBox().Validator();
		}
		public new QSize SizeHint() {
			return ProxyQSpinBox().SizeHint();
		}
		public new QSize MinimumSizeHint() {
			return ProxyQSpinBox().MinimumSizeHint();
		}
		public int MinValue() {
			return ProxyQSpinBox().MinValue();
		}
		public int MaxValue() {
			return ProxyQSpinBox().MaxValue();
		}
		public void SetMinValue(int arg1) {
			ProxyQSpinBox().SetMinValue(arg1);
		}
		public void SetMaxValue(int arg1) {
			ProxyQSpinBox().SetMaxValue(arg1);
		}
		public int LineStep() {
			return ProxyQSpinBox().LineStep();
		}
		public void SetLineStep(int arg1) {
			ProxyQSpinBox().SetLineStep(arg1);
		}
		public int Value() {
			return ProxyQSpinBox().Value();
		}
		public QRect UpRect() {
			return ProxyQSpinBox().UpRect();
		}
		public QRect DownRect() {
			return ProxyQSpinBox().DownRect();
		}
		public virtual void SetValue(int value) {
			ProxyQSpinBox().SetValue(value);
		}
		public virtual void SetPrefix(string text) {
			ProxyQSpinBox().SetPrefix(text);
		}
		public virtual void SetSuffix(string text) {
			ProxyQSpinBox().SetSuffix(text);
		}
		public virtual void StepUp() {
			ProxyQSpinBox().StepUp();
		}
		public virtual void StepDown() {
			ProxyQSpinBox().StepDown();
		}
		public new virtual void SetEnabled(bool enabled) {
			ProxyQSpinBox().SetEnabled(enabled);
		}
		public virtual void SelectAll() {
			ProxyQSpinBox().SelectAll();
		}
		public static new string Tr(string arg1, string arg2) {
			return StaticQSpinBox().Tr(arg1,arg2);
		}
		public static new string Tr(string arg1) {
			return StaticQSpinBox().Tr(arg1);
		}
		public static new string TrUtf8(string arg1, string arg2) {
			return StaticQSpinBox().TrUtf8(arg1,arg2);
		}
		public static new string TrUtf8(string arg1) {
			return StaticQSpinBox().TrUtf8(arg1);
		}
		protected virtual string MapValueToText(int value) {
			return ProxyQSpinBox().MapValueToText(value);
		}
		protected virtual int MapTextToValue(out bool ok) {
			return ProxyQSpinBox().MapTextToValue(out ok);
		}
		protected string CurrentValueText() {
			return ProxyQSpinBox().CurrentValueText();
		}
		protected virtual void UpdateDisplay() {
			ProxyQSpinBox().UpdateDisplay();
		}
		protected virtual void InterpretText() {
			ProxyQSpinBox().InterpretText();
		}
		protected QLineEdit Editor() {
			return ProxyQSpinBox().Editor();
		}
		protected virtual void ValueChange() {
			ProxyQSpinBox().ValueChange();
		}
		protected virtual void RangeChange() {
			ProxyQSpinBox().RangeChange();
		}
		public new bool EventFilter(QObject arg1, QEvent ev) {
			return ProxyQSpinBox().EventFilter(arg1,ev);
		}
		protected new void ResizeEvent(QResizeEvent ev) {
			ProxyQSpinBox().ResizeEvent(ev);
		}
		protected new void WheelEvent(QWheelEvent arg1) {
			ProxyQSpinBox().WheelEvent(arg1);
		}
		protected new void LeaveEvent(QEvent arg1) {
			ProxyQSpinBox().LeaveEvent(arg1);
		}
		public new void StyleChange(QStyle arg1) {
			ProxyQSpinBox().StyleChange(arg1);
		}
		protected void TextChanged() {
			ProxyQSpinBox().TextChanged();
		}
		~QSpinBox() {
			ProxyQSpinBox().Dispose();
		}
		public new void Dispose() {
			ProxyQSpinBox().Dispose();
		}
		public void AddPage() {
			ProxyQSpinBox().AddPage();
		}
		public void SubtractPage() {
			ProxyQSpinBox().SubtractPage();
		}
		public void AddLine() {
			ProxyQSpinBox().AddLine();
		}
		public void SubtractLine() {
			ProxyQSpinBox().SubtractLine();
		}
		public void SetRange(int minValue, int maxValue) {
			ProxyQSpinBox().SetRange(minValue,maxValue);
		}
		public int PageStep() {
			return ProxyQSpinBox().PageStep();
		}
		public void SetSteps(int line, int page) {
			ProxyQSpinBox().SetSteps(line,page);
		}
		public int Bound(int arg1) {
			return ProxyQSpinBox().Bound(arg1);
		}
		protected int PositionFromValue(int val, int space) {
			return ProxyQSpinBox().PositionFromValue(val,space);
		}
		protected int ValueFromPosition(int pos, int space) {
			return ProxyQSpinBox().ValueFromPosition(pos,space);
		}
		protected void DirectSetValue(int val) {
			ProxyQSpinBox().DirectSetValue(val);
		}
		protected int PrevValue() {
			return ProxyQSpinBox().PrevValue();
		}
		protected virtual void StepChange() {
			ProxyQSpinBox().StepChange();
		}
	}

	public interface IQSpinBoxSignals {
		void ValueChanged(int value);
		void ValueChanged(string valueText);
	}
}
