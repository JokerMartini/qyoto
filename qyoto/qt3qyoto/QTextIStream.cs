//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	[SmokeClass("QTextIStream")]
	public class QTextIStream : QTextStream, IDisposable {
 		protected QTextIStream(Type dummy) : base((Type) null) {}
		interface IQTextIStreamProxy {
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTextIStream), this);
			_interceptor = (QTextIStream) realProxy.GetTransparentProxy();
		}
		private QTextIStream ProxyQTextIStream() {
			return (QTextIStream) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QTextIStream() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQTextIStreamProxy), null);
			_staticInterceptor = (IQTextIStreamProxy) realProxy.GetTransparentProxy();
		}
		private static IQTextIStreamProxy StaticQTextIStream() {
			return (IQTextIStreamProxy) _staticInterceptor;
		}

		public QTextIStream(string s) : this((Type) null) {
			CreateProxy();
			NewQTextIStream(s);
		}
		[SmokeMethod("QTextIStream(const QString*)")]
		private void NewQTextIStream(string s) {
			ProxyQTextIStream().NewQTextIStream(s);
		}
		public QTextIStream(QByteArray ba) : this((Type) null) {
			CreateProxy();
			NewQTextIStream(ba);
		}
		[SmokeMethod("QTextIStream(QByteArray)")]
		private void NewQTextIStream(QByteArray ba) {
			ProxyQTextIStream().NewQTextIStream(ba);
		}
		~QTextIStream() {
			DisposeQTextIStream();
		}
		public new void Dispose() {
			DisposeQTextIStream();
		}
		private void DisposeQTextIStream() {
			ProxyQTextIStream().DisposeQTextIStream();
		}
	}
}
