//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QValidator : QObject, IDisposable {
 		protected QValidator(Type dummy) : base((Type) null) {}
		interface IQValidatorProxy {
			string Tr(string arg1, string arg2);
			string Tr(string arg1);
			string TrUtf8(string arg1, string arg2);
			string TrUtf8(string arg1);
		}

		protected void CreateQValidatorProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QValidator), this);
			_interceptor = (QValidator) realProxy.GetTransparentProxy();
		}
		private QValidator ProxyQValidator() {
			return (QValidator) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QValidator() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQValidatorProxy), null);
			_staticInterceptor = (IQValidatorProxy) realProxy.GetTransparentProxy();
		}
		private static IQValidatorProxy StaticQValidator() {
			return (IQValidatorProxy) _staticInterceptor;
		}

		enum State {
			Invalid = 0,
			Intermediate = 1,
			Valid = Intermediate,
			Acceptable = 2,
		}
		public new virtual QMetaObject MetaObject() {
			return ProxyQValidator().MetaObject();
		}
		public new virtual string ClassName() {
			return ProxyQValidator().ClassName();
		}
		public QValidator(QObject parent, string name) : this((Type) null) {
			CreateQValidatorProxy();
			NewQValidator(parent,name);
		}
		private void NewQValidator(QObject parent, string name) {
			ProxyQValidator().NewQValidator(parent,name);
		}
		public QValidator(QObject parent) : this((Type) null) {
			CreateQValidatorProxy();
			NewQValidator(parent);
		}
		private void NewQValidator(QObject parent) {
			ProxyQValidator().NewQValidator(parent);
		}
		public virtual int Validate(StringBuilder arg1, out int arg2) {
			return ProxyQValidator().Validate(arg1,out arg2);
		}
		public virtual void Fixup(StringBuilder arg1) {
			ProxyQValidator().Fixup(arg1);
		}
		public static new string Tr(string arg1, string arg2) {
			return StaticQValidator().Tr(arg1,arg2);
		}
		public static new string Tr(string arg1) {
			return StaticQValidator().Tr(arg1);
		}
		public static new string TrUtf8(string arg1, string arg2) {
			return StaticQValidator().TrUtf8(arg1,arg2);
		}
		public static new string TrUtf8(string arg1) {
			return StaticQValidator().TrUtf8(arg1);
		}
		~QValidator() {
			ProxyQValidator().Dispose();
		}
		public new void Dispose() {
			ProxyQValidator().Dispose();
		}
	}
}
