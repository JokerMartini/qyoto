//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QListBoxItem : MarshalByRefObject {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QListBoxItem(Type dummy) {}
		interface IQListBoxItemProxy {
		}

		protected void CreateQListBoxItemProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QListBoxItem), this);
			_interceptor = (QListBoxItem) realProxy.GetTransparentProxy();
		}
		private QListBoxItem ProxyQListBoxItem() {
			return (QListBoxItem) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QListBoxItem() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQListBoxItemProxy), null);
			_staticInterceptor = (IQListBoxItemProxy) realProxy.GetTransparentProxy();
		}
		private static IQListBoxItemProxy StaticQListBoxItem() {
			return (IQListBoxItemProxy) _staticInterceptor;
		}

		public virtual string Text() {
			return ProxyQListBoxItem().Text();
		}
		public virtual QPixmap Pixmap() {
			return ProxyQListBoxItem().Pixmap();
		}
		public virtual int Height(QListBox arg1) {
			return ProxyQListBoxItem().Height(arg1);
		}
		public virtual int Width(QListBox arg1) {
			return ProxyQListBoxItem().Width(arg1);
		}
		public bool IsSelected() {
			return ProxyQListBoxItem().IsSelected();
		}
		public bool IsCurrent() {
			return ProxyQListBoxItem().IsCurrent();
		}
		public bool Selected() {
			return ProxyQListBoxItem().Selected();
		}
		public bool Current() {
			return ProxyQListBoxItem().Current();
		}
		public QListBox ListBox() {
			return ProxyQListBoxItem().ListBox();
		}
		public void SetSelectable(bool b) {
			ProxyQListBoxItem().SetSelectable(b);
		}
		public bool IsSelectable() {
			return ProxyQListBoxItem().IsSelectable();
		}
		public QListBoxItem Next() {
			return ProxyQListBoxItem().Next();
		}
		public QListBoxItem Prev() {
			return ProxyQListBoxItem().Prev();
		}
		public virtual int Rtti() {
			return ProxyQListBoxItem().Rtti();
		}
	}
}
