//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	[SmokeClass("QGb2312Codec")]
	public class QGb2312Codec : QGb18030Codec, IDisposable {
 		protected QGb2312Codec(Type dummy) : base((Type) null) {}
		interface IQGb2312CodecProxy {
		}

		protected void CreateQGb2312CodecProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QGb2312Codec), this);
			_interceptor = (QGb2312Codec) realProxy.GetTransparentProxy();
		}
		private QGb2312Codec ProxyQGb2312Codec() {
			return (QGb2312Codec) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QGb2312Codec() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQGb2312CodecProxy), null);
			_staticInterceptor = (IQGb2312CodecProxy) realProxy.GetTransparentProxy();
		}
		private static IQGb2312CodecProxy StaticQGb2312Codec() {
			return (IQGb2312CodecProxy) _staticInterceptor;
		}

		public QGb2312Codec() : this((Type) null) {
			CreateQGb2312CodecProxy();
			NewQGb2312Codec();
		}
		[SmokeMethod("QGb2312Codec()")]
		private void NewQGb2312Codec() {
			ProxyQGb2312Codec().NewQGb2312Codec();
		}
		[SmokeMethod("mibEnum() const")]
		public new int MibEnum() {
			return ProxyQGb2312Codec().MibEnum();
		}
		[SmokeMethod("name() const")]
		public new string Name() {
			return ProxyQGb2312Codec().Name();
		}
		[SmokeMethod("makeDecoder() const")]
		public new QTextDecoder MakeDecoder() {
			return ProxyQGb2312Codec().MakeDecoder();
		}
		[SmokeMethod("fromUnicode(const QString&, int&) const")]
		public new string FromUnicode(string uc, out int lenInOut) {
			return ProxyQGb2312Codec().FromUnicode(uc,out lenInOut);
		}
		[SmokeMethod("toUnicode(const char*, int) const")]
		public new string ToUnicode(string chars, int len) {
			return ProxyQGb2312Codec().ToUnicode(chars,len);
		}
		[SmokeMethod("heuristicContentMatch(const char*, int) const")]
		public new int HeuristicContentMatch(string chars, int len) {
			return ProxyQGb2312Codec().HeuristicContentMatch(chars,len);
		}
		[SmokeMethod("heuristicNameMatch(const char*) const")]
		public new int HeuristicNameMatch(string hint) {
			return ProxyQGb2312Codec().HeuristicNameMatch(hint);
		}
		~QGb2312Codec() {
			DisposeQGb2312Codec();
		}
		public new void Dispose() {
			DisposeQGb2312Codec();
		}
		private void DisposeQGb2312Codec() {
			ProxyQGb2312Codec().DisposeQGb2312Codec();
		}
	}
}
