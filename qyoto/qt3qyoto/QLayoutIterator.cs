//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QLayoutIterator : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QLayoutIterator(Type dummy) {}
		interface IQLayoutIteratorProxy {
			IQLayoutItem op_incr(QLayoutIterator lhs);
		}

		protected void CreateQLayoutIteratorProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QLayoutIterator), this);
			_interceptor = (QLayoutIterator) realProxy.GetTransparentProxy();
		}
		private QLayoutIterator ProxyQLayoutIterator() {
			return (QLayoutIterator) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QLayoutIterator() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQLayoutIteratorProxy), null);
			_staticInterceptor = (IQLayoutIteratorProxy) realProxy.GetTransparentProxy();
		}
		private static IQLayoutIteratorProxy StaticQLayoutIterator() {
			return (IQLayoutIteratorProxy) _staticInterceptor;
		}

		// QLayoutIterator* QLayoutIterator(QGLayoutIterator* arg1); >>>> NOT CONVERTED
		// QLayoutIterator* QLayoutIterator(const QLayoutIterator& arg1); >>>> NOT CONVERTED
		/*public static IQLayoutItem operator++(QLayoutIterator lhs) {
			return StaticQLayoutIterator().op_incr(lhs);
		}*/
		public IQLayoutItem Current() {
			return ProxyQLayoutIterator().Current();
		}
		public IQLayoutItem TakeCurrent() {
			return ProxyQLayoutIterator().TakeCurrent();
		}
		public void DeleteCurrent() {
			ProxyQLayoutIterator().DeleteCurrent();
		}
		~QLayoutIterator() {
			ProxyQLayoutIterator().Dispose();
		}
		public void Dispose() {
			ProxyQLayoutIterator().Dispose();
		}
	}
}
