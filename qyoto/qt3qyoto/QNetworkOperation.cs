//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	[SmokeClass("QNetworkOperation")]
	public class QNetworkOperation : QObject, IDisposable {
 		protected QNetworkOperation(Type dummy) : base((Type) null) {}
		interface IQNetworkOperationProxy {
			string Tr(string arg1, string arg2);
			string Tr(string arg1);
			string TrUtf8(string arg1, string arg2);
			string TrUtf8(string arg1);
		}

		protected void CreateQNetworkOperationProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QNetworkOperation), this);
			_interceptor = (QNetworkOperation) realProxy.GetTransparentProxy();
		}
		private QNetworkOperation ProxyQNetworkOperation() {
			return (QNetworkOperation) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QNetworkOperation() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQNetworkOperationProxy), null);
			_staticInterceptor = (IQNetworkOperationProxy) realProxy.GetTransparentProxy();
		}
		private static IQNetworkOperationProxy StaticQNetworkOperation() {
			return (IQNetworkOperationProxy) _staticInterceptor;
		}

		[SmokeMethod("metaObject() const")]
		public new virtual QMetaObject MetaObject() {
			return ProxyQNetworkOperation().MetaObject();
		}
		[SmokeMethod("className() const")]
		public new virtual string ClassName() {
			return ProxyQNetworkOperation().ClassName();
		}
		public QNetworkOperation(int operation, string arg0, string arg1, string arg2) : this((Type) null) {
			CreateQNetworkOperationProxy();
			CreateQNetworkOperationSignalProxy();
			NewQNetworkOperation(operation,arg0,arg1,arg2);
		}
		[SmokeMethod("QNetworkOperation(QNetworkProtocol::Operation, const QString&, const QString&, const QString&)")]
		private void NewQNetworkOperation(int operation, string arg0, string arg1, string arg2) {
			ProxyQNetworkOperation().NewQNetworkOperation(operation,arg0,arg1,arg2);
		}
		public QNetworkOperation(int operation, QByteArray arg0, QByteArray arg1, QByteArray arg2) : this((Type) null) {
			CreateQNetworkOperationProxy();
			CreateQNetworkOperationSignalProxy();
			NewQNetworkOperation(operation,arg0,arg1,arg2);
		}
		[SmokeMethod("QNetworkOperation(QNetworkProtocol::Operation, const QByteArray&, const QByteArray&, const QByteArray&)")]
		private void NewQNetworkOperation(int operation, QByteArray arg0, QByteArray arg1, QByteArray arg2) {
			ProxyQNetworkOperation().NewQNetworkOperation(operation,arg0,arg1,arg2);
		}
		[SmokeMethod("setState(QNetworkProtocol::State)")]
		public void SetState(int state) {
			ProxyQNetworkOperation().SetState(state);
		}
		[SmokeMethod("setProtocolDetail(const QString&)")]
		public void SetProtocolDetail(string detail) {
			ProxyQNetworkOperation().SetProtocolDetail(detail);
		}
		[SmokeMethod("setErrorCode(int)")]
		public void SetErrorCode(int ec) {
			ProxyQNetworkOperation().SetErrorCode(ec);
		}
		[SmokeMethod("setArg(int, const QString&)")]
		public void SetArg(int num, string arg) {
			ProxyQNetworkOperation().SetArg(num,arg);
		}
		[SmokeMethod("setRawArg(int, const QByteArray&)")]
		public void SetRawArg(int num, QByteArray arg) {
			ProxyQNetworkOperation().SetRawArg(num,arg);
		}
		[SmokeMethod("operation() const")]
		public int Operation() {
			return ProxyQNetworkOperation().Operation();
		}
		[SmokeMethod("state() const")]
		public int State() {
			return ProxyQNetworkOperation().State();
		}
		[SmokeMethod("arg(int) const")]
		public string Arg(int num) {
			return ProxyQNetworkOperation().Arg(num);
		}
		[SmokeMethod("rawArg(int) const")]
		public QByteArray RawArg(int num) {
			return ProxyQNetworkOperation().RawArg(num);
		}
		[SmokeMethod("protocolDetail() const")]
		public string ProtocolDetail() {
			return ProxyQNetworkOperation().ProtocolDetail();
		}
		[SmokeMethod("errorCode() const")]
		public int ErrorCode() {
			return ProxyQNetworkOperation().ErrorCode();
		}
		[SmokeMethod("free()")]
		public void Free() {
			ProxyQNetworkOperation().Free();
		}
		[SmokeMethod("tr(const char*, const char*)")]
		public static new string Tr(string arg1, string arg2) {
			return StaticQNetworkOperation().Tr(arg1,arg2);
		}
		[SmokeMethod("tr(const char*)")]
		public static new string Tr(string arg1) {
			return StaticQNetworkOperation().Tr(arg1);
		}
		[SmokeMethod("trUtf8(const char*, const char*)")]
		public static new string TrUtf8(string arg1, string arg2) {
			return StaticQNetworkOperation().TrUtf8(arg1,arg2);
		}
		[SmokeMethod("trUtf8(const char*)")]
		public static new string TrUtf8(string arg1) {
			return StaticQNetworkOperation().TrUtf8(arg1);
		}
		~QNetworkOperation() {
			DisposeQNetworkOperation();
		}
		public new void Dispose() {
			DisposeQNetworkOperation();
		}
		private void DisposeQNetworkOperation() {
			ProxyQNetworkOperation().DisposeQNetworkOperation();
		}
		protected void CreateQNetworkOperationSignalProxy() {
			SignalInvocation realProxy = new SignalInvocation(typeof(IQNetworkOperationSignals), this);
			Q_EMIT = (IQNetworkOperationSignals) realProxy.GetTransparentProxy();
		}
		protected new IQNetworkOperationSignals Emit() {
			return (IQNetworkOperationSignals) Q_EMIT;
		}
	}

	public interface IQNetworkOperationSignals : IQObjectSignals {
	}
}
