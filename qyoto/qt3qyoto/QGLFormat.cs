//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QGLFormat : QGL, IDisposable {
 		protected QGLFormat(Type dummy) : base((Type) null) {}
		interface IQGLFormatProxy {
			QGLFormat DefaultFormat();
			void SetDefaultFormat(QGLFormat f);
			QGLFormat DefaultOverlayFormat();
			void SetDefaultOverlayFormat(QGLFormat f);
			bool HasOpenGL();
			bool HasOpenGLOverlays();
		}

		protected void CreateQGLFormatProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QGLFormat), this);
			_interceptor = (QGLFormat) realProxy.GetTransparentProxy();
		}
		private QGLFormat ProxyQGLFormat() {
			return (QGLFormat) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QGLFormat() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQGLFormatProxy), null);
			_staticInterceptor = (IQGLFormatProxy) realProxy.GetTransparentProxy();
		}
		private static IQGLFormatProxy StaticQGLFormat() {
			return (IQGLFormatProxy) _staticInterceptor;
		}

		public QGLFormat() : this((Type) null) {
			CreateQGLFormatProxy();
			NewQGLFormat();
		}
		private void NewQGLFormat() {
			ProxyQGLFormat().NewQGLFormat();
		}
		public QGLFormat(int options, int plane) : this((Type) null) {
			CreateQGLFormatProxy();
			NewQGLFormat(options,plane);
		}
		private void NewQGLFormat(int options, int plane) {
			ProxyQGLFormat().NewQGLFormat(options,plane);
		}
		public QGLFormat(int options) : this((Type) null) {
			CreateQGLFormatProxy();
			NewQGLFormat(options);
		}
		private void NewQGLFormat(int options) {
			ProxyQGLFormat().NewQGLFormat(options);
		}
		public bool DoubleBuffer() {
			return ProxyQGLFormat().DoubleBuffer();
		}
		public void SetDoubleBuffer(bool enable) {
			ProxyQGLFormat().SetDoubleBuffer(enable);
		}
		public bool Depth() {
			return ProxyQGLFormat().Depth();
		}
		public void SetDepth(bool enable) {
			ProxyQGLFormat().SetDepth(enable);
		}
		public bool Rgba() {
			return ProxyQGLFormat().Rgba();
		}
		public void SetRgba(bool enable) {
			ProxyQGLFormat().SetRgba(enable);
		}
		public bool Alpha() {
			return ProxyQGLFormat().Alpha();
		}
		public void SetAlpha(bool enable) {
			ProxyQGLFormat().SetAlpha(enable);
		}
		public bool Accum() {
			return ProxyQGLFormat().Accum();
		}
		public void SetAccum(bool enable) {
			ProxyQGLFormat().SetAccum(enable);
		}
		public bool Stencil() {
			return ProxyQGLFormat().Stencil();
		}
		public void SetStencil(bool enable) {
			ProxyQGLFormat().SetStencil(enable);
		}
		public bool Stereo() {
			return ProxyQGLFormat().Stereo();
		}
		public void SetStereo(bool enable) {
			ProxyQGLFormat().SetStereo(enable);
		}
		public bool DirectRendering() {
			return ProxyQGLFormat().DirectRendering();
		}
		public void SetDirectRendering(bool enable) {
			ProxyQGLFormat().SetDirectRendering(enable);
		}
		public bool HasOverlay() {
			return ProxyQGLFormat().HasOverlay();
		}
		public void SetOverlay(bool enable) {
			ProxyQGLFormat().SetOverlay(enable);
		}
		public int Plane() {
			return ProxyQGLFormat().Plane();
		}
		public void SetPlane(int plane) {
			ProxyQGLFormat().SetPlane(plane);
		}
		public void SetOption(int opt) {
			ProxyQGLFormat().SetOption(opt);
		}
		public bool TestOption(int opt) {
			return ProxyQGLFormat().TestOption(opt);
		}
		public static QGLFormat DefaultFormat() {
			return StaticQGLFormat().DefaultFormat();
		}
		public static void SetDefaultFormat(QGLFormat f) {
			StaticQGLFormat().SetDefaultFormat(f);
		}
		public static QGLFormat DefaultOverlayFormat() {
			return StaticQGLFormat().DefaultOverlayFormat();
		}
		public static void SetDefaultOverlayFormat(QGLFormat f) {
			StaticQGLFormat().SetDefaultOverlayFormat(f);
		}
		public static bool HasOpenGL() {
			return StaticQGLFormat().HasOpenGL();
		}
		public static bool HasOpenGLOverlays() {
			return StaticQGLFormat().HasOpenGLOverlays();
		}
		~QGLFormat() {
			ProxyQGLFormat().Dispose();
		}
		public void Dispose() {
			ProxyQGLFormat().Dispose();
		}
	}
}
