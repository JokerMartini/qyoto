//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QBaseBucket : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QBaseBucket(Type dummy) {}
		interface IQBaseBucketProxy {
		}

		protected void CreateQBaseBucketProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QBaseBucket), this);
			_interceptor = (QBaseBucket) realProxy.GetTransparentProxy();
		}
		private QBaseBucket ProxyQBaseBucket() {
			return (QBaseBucket) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QBaseBucket() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQBaseBucketProxy), null);
			_staticInterceptor = (IQBaseBucketProxy) realProxy.GetTransparentProxy();
		}
		private static IQBaseBucketProxy StaticQBaseBucket() {
			return (IQBaseBucketProxy) _staticInterceptor;
		}

		// QPtrCollection::Item getData(); >>>> NOT CONVERTED
		// QPtrCollection::Item setData(QPtrCollection::Item arg1); >>>> NOT CONVERTED
		public QBaseBucket GetNext() {
			return ProxyQBaseBucket().GetNext();
		}
		public void SetNext(QBaseBucket n) {
			ProxyQBaseBucket().SetNext(n);
		}
		// QBaseBucket* QBaseBucket(QPtrCollection::Item arg1,QBaseBucket* arg2); >>>> NOT CONVERTED
		~QBaseBucket() {
			ProxyQBaseBucket().Dispose();
		}
		public void Dispose() {
			ProxyQBaseBucket().Dispose();
		}
	}
}
