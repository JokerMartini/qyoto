//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	[SmokeClass("QIconDrag")]
	public class QIconDrag : QDragObject, IDisposable {
 		protected QIconDrag(Type dummy) : base((Type) null) {}
		interface IQIconDragProxy {
			string Tr(string arg1, string arg2);
			string Tr(string arg1);
			string TrUtf8(string arg1, string arg2);
			string TrUtf8(string arg1);
			bool CanDecode(IQMimeSource e);
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QIconDrag), this);
			_interceptor = (QIconDrag) realProxy.GetTransparentProxy();
		}
		private QIconDrag ProxyQIconDrag() {
			return (QIconDrag) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QIconDrag() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQIconDragProxy), null);
			_staticInterceptor = (IQIconDragProxy) realProxy.GetTransparentProxy();
		}
		private static IQIconDragProxy StaticQIconDrag() {
			return (IQIconDragProxy) _staticInterceptor;
		}

		[SmokeMethod("metaObject() const")]
		public new virtual QMetaObject MetaObject() {
			return ProxyQIconDrag().MetaObject();
		}
		[SmokeMethod("className() const")]
		public new virtual string ClassName() {
			return ProxyQIconDrag().ClassName();
		}
		public QIconDrag(QWidget dragSource, string name) : this((Type) null) {
			CreateProxy();
			CreateSignalProxy();
			NewQIconDrag(dragSource,name);
		}
		[SmokeMethod("QIconDrag(QWidget*, const char*)")]
		private void NewQIconDrag(QWidget dragSource, string name) {
			ProxyQIconDrag().NewQIconDrag(dragSource,name);
		}
		public QIconDrag(QWidget dragSource) : this((Type) null) {
			CreateProxy();
			CreateSignalProxy();
			NewQIconDrag(dragSource);
		}
		[SmokeMethod("QIconDrag(QWidget*)")]
		private void NewQIconDrag(QWidget dragSource) {
			ProxyQIconDrag().NewQIconDrag(dragSource);
		}
		[SmokeMethod("append(const QIconDragItem&, const QRect&, const QRect&)")]
		public void Append(QIconDragItem item, QRect pr, QRect tr) {
			ProxyQIconDrag().Append(item,pr,tr);
		}
		[SmokeMethod("format(int) const")]
		public new virtual string Format(int i) {
			return ProxyQIconDrag().Format(i);
		}
		[SmokeMethod("encodedData(const char*) const")]
		public new virtual QByteArray EncodedData(string mime) {
			return ProxyQIconDrag().EncodedData(mime);
		}
		[SmokeMethod("tr(const char*, const char*)")]
		public static new string Tr(string arg1, string arg2) {
			return StaticQIconDrag().Tr(arg1,arg2);
		}
		[SmokeMethod("tr(const char*)")]
		public static new string Tr(string arg1) {
			return StaticQIconDrag().Tr(arg1);
		}
		[SmokeMethod("trUtf8(const char*, const char*)")]
		public static new string TrUtf8(string arg1, string arg2) {
			return StaticQIconDrag().TrUtf8(arg1,arg2);
		}
		[SmokeMethod("trUtf8(const char*)")]
		public static new string TrUtf8(string arg1) {
			return StaticQIconDrag().TrUtf8(arg1);
		}
		[SmokeMethod("canDecode(QMimeSource*)")]
		public static bool CanDecode(IQMimeSource e) {
			return StaticQIconDrag().CanDecode(e);
		}
		~QIconDrag() {
			DisposeQIconDrag();
		}
		public new void Dispose() {
			DisposeQIconDrag();
		}
		private void DisposeQIconDrag() {
			ProxyQIconDrag().DisposeQIconDrag();
		}
		protected new void CreateSignalProxy() {
			SignalInvocation realProxy = new SignalInvocation(typeof(IQIconDragSignals), this);
			Q_EMIT = (IQIconDragSignals) realProxy.GetTransparentProxy();
		}
		protected new IQIconDragSignals Emit() {
			return (IQIconDragSignals) Q_EMIT;
		}
	}

	public interface IQIconDragSignals : IQDragObjectSignals {
	}
}
