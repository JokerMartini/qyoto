//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	/// See <see cref="IQNetworkProtocolSignals"></see> for signals emitted by QNetworkProtocol
	public class QNetworkProtocol : QObject, IDisposable {
 		protected QNetworkProtocol(Type dummy) : base((Type) null) {}
		interface IQNetworkProtocolProxy {
			string Tr(string arg1, string arg2);
			string Tr(string arg1);
			string TrUtf8(string arg1, string arg2);
			string TrUtf8(string arg1);
			QNetworkProtocol GetNetworkProtocol(string protocol);
			bool HasOnlyLocalFileSystem();
		}

		protected void CreateQNetworkProtocolProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QNetworkProtocol), this);
			_interceptor = (QNetworkProtocol) realProxy.GetTransparentProxy();
		}
		private QNetworkProtocol ProxyQNetworkProtocol() {
			return (QNetworkProtocol) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QNetworkProtocol() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQNetworkProtocolProxy), null);
			_staticInterceptor = (IQNetworkProtocolProxy) realProxy.GetTransparentProxy();
		}
		private static IQNetworkProtocolProxy StaticQNetworkProtocol() {
			return (IQNetworkProtocolProxy) _staticInterceptor;
		}

		enum State {
			StWaiting = 0,
			StInProgress = 1,
			StDone = 2,
			StFailed = 3,
			StStopped = 4,
		}
		enum Operation {
			OpListChildren = 1,
			OpMkDir = 2,
			OpMkdir = OpMkDir,
			OpRemove = 4,
			OpRename = 8,
			OpGet = 32,
			OpPut = 64,
		}
		enum ConnectionState {
			ConHostFound = 0,
			ConConnected = 1,
			ConClosed = 2,
		}
		enum Error {
			NoError = 0,
			ErrValid = 1,
			ErrUnknownProtocol = 2,
			ErrUnsupported = 3,
			ErrParse = 4,
			ErrLoginIncorrect = 5,
			ErrHostNotFound = 6,
			ErrListChildren = 7,
			ErrListChlidren = ErrListChildren,
			ErrMkDir = 8,
			ErrMkdir = ErrMkDir,
			ErrRemove = 9,
			ErrRename = 10,
			ErrGet = 11,
			ErrPut = 12,
			ErrFileNotExisting = 13,
			ErrPermissionDenied = 14,
		}
		public new virtual QMetaObject MetaObject() {
			return ProxyQNetworkProtocol().MetaObject();
		}
		public new virtual string ClassName() {
			return ProxyQNetworkProtocol().ClassName();
		}
		public QNetworkProtocol() : this((Type) null) {
			CreateQNetworkProtocolProxy();
			NewQNetworkProtocol();
		}
		private void NewQNetworkProtocol() {
			ProxyQNetworkProtocol().NewQNetworkProtocol();
		}
		public virtual void SetUrl(QUrlOperator u) {
			ProxyQNetworkProtocol().SetUrl(u);
		}
		public virtual void SetAutoDelete(bool b, int i) {
			ProxyQNetworkProtocol().SetAutoDelete(b,i);
		}
		public virtual void SetAutoDelete(bool b) {
			ProxyQNetworkProtocol().SetAutoDelete(b);
		}
		public bool AutoDelete() {
			return ProxyQNetworkProtocol().AutoDelete();
		}
		public virtual int SupportedOperations() {
			return ProxyQNetworkProtocol().SupportedOperations();
		}
		public virtual void AddOperation(QNetworkOperation op) {
			ProxyQNetworkProtocol().AddOperation(op);
		}
		public QUrlOperator Url() {
			return ProxyQNetworkProtocol().Url();
		}
		public QNetworkOperation OperationInProgress() {
			return ProxyQNetworkProtocol().OperationInProgress();
		}
		public virtual void ClearOperationQueue() {
			ProxyQNetworkProtocol().ClearOperationQueue();
		}
		public virtual void Stop() {
			ProxyQNetworkProtocol().Stop();
		}
		public static new string Tr(string arg1, string arg2) {
			return StaticQNetworkProtocol().Tr(arg1,arg2);
		}
		public static new string Tr(string arg1) {
			return StaticQNetworkProtocol().Tr(arg1);
		}
		public static new string TrUtf8(string arg1, string arg2) {
			return StaticQNetworkProtocol().TrUtf8(arg1,arg2);
		}
		public static new string TrUtf8(string arg1) {
			return StaticQNetworkProtocol().TrUtf8(arg1);
		}
		// void registerNetworkProtocol(const QString& arg1,QNetworkProtocolFactoryBase* arg2); >>>> NOT CONVERTED
		public static QNetworkProtocol GetNetworkProtocol(string protocol) {
			return StaticQNetworkProtocol().GetNetworkProtocol(protocol);
		}
		public static bool HasOnlyLocalFileSystem() {
			return StaticQNetworkProtocol().HasOnlyLocalFileSystem();
		}
		protected virtual void ProcessOperation(QNetworkOperation op) {
			ProxyQNetworkProtocol().ProcessOperation(op);
		}
		protected virtual void OperationListChildren(QNetworkOperation op) {
			ProxyQNetworkProtocol().OperationListChildren(op);
		}
		protected virtual void OperationMkDir(QNetworkOperation op) {
			ProxyQNetworkProtocol().OperationMkDir(op);
		}
		protected virtual void OperationRemove(QNetworkOperation op) {
			ProxyQNetworkProtocol().OperationRemove(op);
		}
		protected virtual void OperationRename(QNetworkOperation op) {
			ProxyQNetworkProtocol().OperationRename(op);
		}
		protected virtual void OperationGet(QNetworkOperation op) {
			ProxyQNetworkProtocol().OperationGet(op);
		}
		protected virtual void OperationPut(QNetworkOperation op) {
			ProxyQNetworkProtocol().OperationPut(op);
		}
		protected virtual void OperationPutChunk(QNetworkOperation op) {
			ProxyQNetworkProtocol().OperationPutChunk(op);
		}
		protected virtual bool CheckConnection(QNetworkOperation op) {
			return ProxyQNetworkProtocol().CheckConnection(op);
		}
		~QNetworkProtocol() {
			ProxyQNetworkProtocol().Dispose();
		}
		public new void Dispose() {
			ProxyQNetworkProtocol().Dispose();
		}
	}

	public interface IQNetworkProtocolSignals {
		void Data(byte[] arg1, QNetworkOperation res);
		void ConnectionStateChanged(int state, string data);
		void Finished(QNetworkOperation res);
		void Start(QNetworkOperation res);
		// void newChildren(const QValueList<QUrlInfo>& arg1,QNetworkOperation* arg2); >>>> NOT CONVERTED
		void NewChild(QUrlInfo arg1, QNetworkOperation res);
		void CreatedDirectory(QUrlInfo arg1, QNetworkOperation res);
		void Removed(QNetworkOperation res);
		void ItemChanged(QNetworkOperation res);
		void DataTransferProgress(int bytesDone, int bytesTotal, QNetworkOperation res);
	}
}
