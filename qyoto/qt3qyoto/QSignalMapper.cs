//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	/// See <see cref="IQSignalMapperSignals"></see> for signals emitted by QSignalMapper
	[SmokeClass("QSignalMapper")]
	public class QSignalMapper : QObject, IDisposable {
 		protected QSignalMapper(Type dummy) : base((Type) null) {}
		interface IQSignalMapperProxy {
			string Tr(string arg1, string arg2);
			string Tr(string arg1);
			string TrUtf8(string arg1, string arg2);
			string TrUtf8(string arg1);
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSignalMapper), this);
			_interceptor = (QSignalMapper) realProxy.GetTransparentProxy();
		}
		private QSignalMapper ProxyQSignalMapper() {
			return (QSignalMapper) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QSignalMapper() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSignalMapperProxy), null);
			_staticInterceptor = (IQSignalMapperProxy) realProxy.GetTransparentProxy();
		}
		private static IQSignalMapperProxy StaticQSignalMapper() {
			return (IQSignalMapperProxy) _staticInterceptor;
		}

		[SmokeMethod("metaObject() const")]
		public new virtual QMetaObject MetaObject() {
			return ProxyQSignalMapper().MetaObject();
		}
		[SmokeMethod("className() const")]
		public new virtual string ClassName() {
			return ProxyQSignalMapper().ClassName();
		}
		public QSignalMapper(QObject parent, string name) : this((Type) null) {
			CreateProxy();
			CreateSignalProxy();
			NewQSignalMapper(parent,name);
		}
		[SmokeMethod("QSignalMapper(QObject*, const char*)")]
		private void NewQSignalMapper(QObject parent, string name) {
			ProxyQSignalMapper().NewQSignalMapper(parent,name);
		}
		public QSignalMapper(QObject parent) : this((Type) null) {
			CreateProxy();
			CreateSignalProxy();
			NewQSignalMapper(parent);
		}
		[SmokeMethod("QSignalMapper(QObject*)")]
		private void NewQSignalMapper(QObject parent) {
			ProxyQSignalMapper().NewQSignalMapper(parent);
		}
		[SmokeMethod("setMapping(const QObject*, int)")]
		public virtual void SetMapping(QObject sender, int identifier) {
			ProxyQSignalMapper().SetMapping(sender,identifier);
		}
		[SmokeMethod("setMapping(const QObject*, const QString&)")]
		public virtual void SetMapping(QObject sender, string identifier) {
			ProxyQSignalMapper().SetMapping(sender,identifier);
		}
		[SmokeMethod("removeMappings(const QObject*)")]
		public void RemoveMappings(QObject sender) {
			ProxyQSignalMapper().RemoveMappings(sender);
		}
		[Q_SLOT("void map()")]
		[SmokeMethod("map()")]
		public void Map() {
			ProxyQSignalMapper().Map();
		}
		[SmokeMethod("tr(const char*, const char*)")]
		public static new string Tr(string arg1, string arg2) {
			return StaticQSignalMapper().Tr(arg1,arg2);
		}
		[SmokeMethod("tr(const char*)")]
		public static new string Tr(string arg1) {
			return StaticQSignalMapper().Tr(arg1);
		}
		[SmokeMethod("trUtf8(const char*, const char*)")]
		public static new string TrUtf8(string arg1, string arg2) {
			return StaticQSignalMapper().TrUtf8(arg1,arg2);
		}
		[SmokeMethod("trUtf8(const char*)")]
		public static new string TrUtf8(string arg1) {
			return StaticQSignalMapper().TrUtf8(arg1);
		}
		~QSignalMapper() {
			DisposeQSignalMapper();
		}
		public new void Dispose() {
			DisposeQSignalMapper();
		}
		private void DisposeQSignalMapper() {
			ProxyQSignalMapper().DisposeQSignalMapper();
		}
		protected new void CreateSignalProxy() {
			SignalInvocation realProxy = new SignalInvocation(typeof(IQSignalMapperSignals), this);
			Q_EMIT = (IQSignalMapperSignals) realProxy.GetTransparentProxy();
		}
		protected new IQSignalMapperSignals Emit() {
			return (IQSignalMapperSignals) Q_EMIT;
		}
	}

	public interface IQSignalMapperSignals : IQObjectSignals {
		[Q_SIGNAL("void mapped(int)")]
		void Mapped(int arg1);
		[Q_SIGNAL("void mapped(const QString&)")]
		void Mapped(string arg1);
	}
}
