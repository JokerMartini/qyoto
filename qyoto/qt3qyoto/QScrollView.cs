//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	/// See <see cref="IQScrollViewSignals"></see> for signals emitted by QScrollView
	[SmokeClass("QScrollView")]
	public class QScrollView : QFrame, IDisposable {
 		protected QScrollView(Type dummy) : base((Type) null) {}
		interface IQScrollViewProxy {
			string Tr(string arg1, string arg2);
			string Tr(string arg1);
			string TrUtf8(string arg1, string arg2);
			string TrUtf8(string arg1);
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QScrollView), this);
			_interceptor = (QScrollView) realProxy.GetTransparentProxy();
		}
		private QScrollView ProxyQScrollView() {
			return (QScrollView) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QScrollView() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQScrollViewProxy), null);
			_staticInterceptor = (IQScrollViewProxy) realProxy.GetTransparentProxy();
		}
		private static IQScrollViewProxy StaticQScrollView() {
			return (IQScrollViewProxy) _staticInterceptor;
		}

		public enum ResizePolicy {
			Default = 0,
			Manual = 1,
			AutoOne = 2,
			AutoOneFit = 3,
		}
		public enum ScrollBarMode {
			Auto = 0,
			AlwaysOff = 1,
			AlwaysOn = 2,
		}
		[SmokeMethod("metaObject() const")]
		public new virtual QMetaObject MetaObject() {
			return ProxyQScrollView().MetaObject();
		}
		[SmokeMethod("className() const")]
		public new virtual string ClassName() {
			return ProxyQScrollView().ClassName();
		}
		public QScrollView(QWidget parent, string name, int f) : this((Type) null) {
			CreateProxy();
			NewQScrollView(parent,name,f);
		}
		[SmokeMethod("QScrollView(QWidget*, const char*, Qt::WFlags)")]
		private void NewQScrollView(QWidget parent, string name, int f) {
			ProxyQScrollView().NewQScrollView(parent,name,f);
		}
		public QScrollView(QWidget parent, string name) : this((Type) null) {
			CreateProxy();
			NewQScrollView(parent,name);
		}
		[SmokeMethod("QScrollView(QWidget*, const char*)")]
		private void NewQScrollView(QWidget parent, string name) {
			ProxyQScrollView().NewQScrollView(parent,name);
		}
		public QScrollView(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQScrollView(parent);
		}
		[SmokeMethod("QScrollView(QWidget*)")]
		private void NewQScrollView(QWidget parent) {
			ProxyQScrollView().NewQScrollView(parent);
		}
		public QScrollView() : this((Type) null) {
			CreateProxy();
			NewQScrollView();
		}
		[SmokeMethod("QScrollView()")]
		private void NewQScrollView() {
			ProxyQScrollView().NewQScrollView();
		}
		[SmokeMethod("setResizePolicy(QScrollView::ResizePolicy)")]
		public virtual void SetResizePolicy(QScrollView.ResizePolicy arg1) {
			ProxyQScrollView().SetResizePolicy(arg1);
		}
		[SmokeMethod("resizePolicy() const")]
		public QScrollView.ResizePolicy resizePolicy() {
			return ProxyQScrollView().resizePolicy();
		}
		[SmokeMethod("styleChange(QStyle&)")]
		public new void StyleChange(QStyle arg1) {
			ProxyQScrollView().StyleChange(arg1);
		}
		[SmokeMethod("removeChild(QWidget*)")]
		public new void RemoveChild(QWidget child) {
			ProxyQScrollView().RemoveChild(child);
		}
		[SmokeMethod("addChild(QWidget*, int, int)")]
		public virtual void AddChild(QWidget child, int x, int y) {
			ProxyQScrollView().AddChild(child,x,y);
		}
		[SmokeMethod("addChild(QWidget*, int)")]
		public virtual void AddChild(QWidget child, int x) {
			ProxyQScrollView().AddChild(child,x);
		}
		[SmokeMethod("addChild(QWidget*)")]
		public virtual void AddChild(QWidget child) {
			ProxyQScrollView().AddChild(child);
		}
		[SmokeMethod("moveChild(QWidget*, int, int)")]
		public virtual void MoveChild(QWidget child, int x, int y) {
			ProxyQScrollView().MoveChild(child,x,y);
		}
		[SmokeMethod("childX(QWidget*)")]
		public int ChildX(QWidget child) {
			return ProxyQScrollView().ChildX(child);
		}
		[SmokeMethod("childY(QWidget*)")]
		public int ChildY(QWidget child) {
			return ProxyQScrollView().ChildY(child);
		}
		[SmokeMethod("childIsVisible(QWidget*)")]
		public bool ChildIsVisible(QWidget child) {
			return ProxyQScrollView().ChildIsVisible(child);
		}
		[SmokeMethod("showChild(QWidget*, bool)")]
		public void ShowChild(QWidget child, bool yes) {
			ProxyQScrollView().ShowChild(child,yes);
		}
		[SmokeMethod("showChild(QWidget*)")]
		public void ShowChild(QWidget child) {
			ProxyQScrollView().ShowChild(child);
		}
		[SmokeMethod("vScrollBarMode() const")]
		public QScrollView.ScrollBarMode VScrollBarMode() {
			return ProxyQScrollView().VScrollBarMode();
		}
		[SmokeMethod("setVScrollBarMode(QScrollView::ScrollBarMode)")]
		public virtual void SetVScrollBarMode(QScrollView.ScrollBarMode arg1) {
			ProxyQScrollView().SetVScrollBarMode(arg1);
		}
		[SmokeMethod("hScrollBarMode() const")]
		public QScrollView.ScrollBarMode HScrollBarMode() {
			return ProxyQScrollView().HScrollBarMode();
		}
		[SmokeMethod("setHScrollBarMode(QScrollView::ScrollBarMode)")]
		public virtual void SetHScrollBarMode(QScrollView.ScrollBarMode arg1) {
			ProxyQScrollView().SetHScrollBarMode(arg1);
		}
		[SmokeMethod("cornerWidget() const")]
		public QWidget CornerWidget() {
			return ProxyQScrollView().CornerWidget();
		}
		[SmokeMethod("setCornerWidget(QWidget*)")]
		public virtual void SetCornerWidget(QWidget arg1) {
			ProxyQScrollView().SetCornerWidget(arg1);
		}
		[SmokeMethod("horizontalScrollBar() const")]
		public QScrollBar HorizontalScrollBar() {
			return ProxyQScrollView().HorizontalScrollBar();
		}
		[SmokeMethod("verticalScrollBar() const")]
		public QScrollBar VerticalScrollBar() {
			return ProxyQScrollView().VerticalScrollBar();
		}
		[SmokeMethod("viewport() const")]
		public QWidget Viewport() {
			return ProxyQScrollView().Viewport();
		}
		[SmokeMethod("clipper() const")]
		public QWidget Clipper() {
			return ProxyQScrollView().Clipper();
		}
		[SmokeMethod("visibleWidth() const")]
		public int VisibleWidth() {
			return ProxyQScrollView().VisibleWidth();
		}
		[SmokeMethod("visibleHeight() const")]
		public int VisibleHeight() {
			return ProxyQScrollView().VisibleHeight();
		}
		[SmokeMethod("contentsWidth() const")]
		public int ContentsWidth() {
			return ProxyQScrollView().ContentsWidth();
		}
		[SmokeMethod("contentsHeight() const")]
		public int ContentsHeight() {
			return ProxyQScrollView().ContentsHeight();
		}
		[SmokeMethod("contentsX() const")]
		public int ContentsX() {
			return ProxyQScrollView().ContentsX();
		}
		[SmokeMethod("contentsY() const")]
		public int ContentsY() {
			return ProxyQScrollView().ContentsY();
		}
		[SmokeMethod("resize(int, int)")]
		public new void Resize(int w, int h) {
			ProxyQScrollView().Resize(w,h);
		}
		[SmokeMethod("resize(const QSize&)")]
		public new void Resize(QSize arg1) {
			ProxyQScrollView().Resize(arg1);
		}
		[SmokeMethod("show()")]
		public new void Show() {
			ProxyQScrollView().Show();
		}
		[SmokeMethod("updateContents(int, int, int, int)")]
		public void UpdateContents(int x, int y, int w, int h) {
			ProxyQScrollView().UpdateContents(x,y,w,h);
		}
		[SmokeMethod("updateContents(const QRect&)")]
		public void UpdateContents(QRect r) {
			ProxyQScrollView().UpdateContents(r);
		}
		[SmokeMethod("updateContents()")]
		public void UpdateContents() {
			ProxyQScrollView().UpdateContents();
		}
		[SmokeMethod("repaintContents(int, int, int, int, bool)")]
		public void RepaintContents(int x, int y, int w, int h, bool erase) {
			ProxyQScrollView().RepaintContents(x,y,w,h,erase);
		}
		[SmokeMethod("repaintContents(int, int, int, int)")]
		public void RepaintContents(int x, int y, int w, int h) {
			ProxyQScrollView().RepaintContents(x,y,w,h);
		}
		[SmokeMethod("repaintContents(const QRect&, bool)")]
		public void RepaintContents(QRect r, bool erase) {
			ProxyQScrollView().RepaintContents(r,erase);
		}
		[SmokeMethod("repaintContents(const QRect&)")]
		public void RepaintContents(QRect r) {
			ProxyQScrollView().RepaintContents(r);
		}
		[SmokeMethod("repaintContents(bool)")]
		public void RepaintContents(bool erase) {
			ProxyQScrollView().RepaintContents(erase);
		}
		[SmokeMethod("repaintContents()")]
		public void RepaintContents() {
			ProxyQScrollView().RepaintContents();
		}
		[SmokeMethod("contentsToViewport(int, int, int&, int&) const")]
		public void ContentsToViewport(int x, int y, out int vx, out int vy) {
			ProxyQScrollView().ContentsToViewport(x,y,out vx,out vy);
		}
		[SmokeMethod("viewportToContents(int, int, int&, int&) const")]
		public void ViewportToContents(int vx, int vy, out int x, out int y) {
			ProxyQScrollView().ViewportToContents(vx,vy,out x,out y);
		}
		[SmokeMethod("contentsToViewport(const QPoint&) const")]
		public QPoint ContentsToViewport(QPoint arg1) {
			return ProxyQScrollView().ContentsToViewport(arg1);
		}
		[SmokeMethod("viewportToContents(const QPoint&) const")]
		public QPoint ViewportToContents(QPoint arg1) {
			return ProxyQScrollView().ViewportToContents(arg1);
		}
		[SmokeMethod("enableClipper(bool)")]
		public void EnableClipper(bool y) {
			ProxyQScrollView().EnableClipper(y);
		}
		[SmokeMethod("setStaticBackground(bool)")]
		public void SetStaticBackground(bool y) {
			ProxyQScrollView().SetStaticBackground(y);
		}
		[SmokeMethod("hasStaticBackground() const")]
		public bool HasStaticBackground() {
			return ProxyQScrollView().HasStaticBackground();
		}
		[SmokeMethod("viewportSize(int, int) const")]
		public QSize ViewportSize(int arg1, int arg2) {
			return ProxyQScrollView().ViewportSize(arg1,arg2);
		}
		[SmokeMethod("sizeHint() const")]
		public new QSize SizeHint() {
			return ProxyQScrollView().SizeHint();
		}
		[SmokeMethod("minimumSizeHint() const")]
		public new QSize MinimumSizeHint() {
			return ProxyQScrollView().MinimumSizeHint();
		}
		[SmokeMethod("removeChild(QObject*)")]
		public new void RemoveChild(QObject child) {
			ProxyQScrollView().RemoveChild(child);
		}
		[SmokeMethod("isHorizontalSliderPressed()")]
		public bool IsHorizontalSliderPressed() {
			return ProxyQScrollView().IsHorizontalSliderPressed();
		}
		[SmokeMethod("isVerticalSliderPressed()")]
		public bool IsVerticalSliderPressed() {
			return ProxyQScrollView().IsVerticalSliderPressed();
		}
		[SmokeMethod("setDragAutoScroll(bool)")]
		public virtual void SetDragAutoScroll(bool b) {
			ProxyQScrollView().SetDragAutoScroll(b);
		}
		[SmokeMethod("dragAutoScroll() const")]
		public bool DragAutoScroll() {
			return ProxyQScrollView().DragAutoScroll();
		}
		[SmokeMethod("disableSizeHintCaching()")]
		public void DisableSizeHintCaching() {
			ProxyQScrollView().DisableSizeHintCaching();
		}
		[Q_SLOT("void resizeContents(int, int)")]
		[SmokeMethod("resizeContents(int, int)")]
		public virtual void ResizeContents(int w, int h) {
			ProxyQScrollView().ResizeContents(w,h);
		}
		[Q_SLOT("void scrollBy(int, int)")]
		[SmokeMethod("scrollBy(int, int)")]
		public void ScrollBy(int dx, int dy) {
			ProxyQScrollView().ScrollBy(dx,dy);
		}
		[Q_SLOT("void setContentsPos(int, int)")]
		[SmokeMethod("setContentsPos(int, int)")]
		public virtual void SetContentsPos(int x, int y) {
			ProxyQScrollView().SetContentsPos(x,y);
		}
		[Q_SLOT("void ensureVisible(int, int)")]
		[SmokeMethod("ensureVisible(int, int)")]
		public void EnsureVisible(int x, int y) {
			ProxyQScrollView().EnsureVisible(x,y);
		}
		[Q_SLOT("void ensureVisible(int, int, int, int)")]
		[SmokeMethod("ensureVisible(int, int, int, int)")]
		public void EnsureVisible(int x, int y, int xmargin, int ymargin) {
			ProxyQScrollView().EnsureVisible(x,y,xmargin,ymargin);
		}
		[Q_SLOT("void center(int, int)")]
		[SmokeMethod("center(int, int)")]
		public void Center(int x, int y) {
			ProxyQScrollView().Center(x,y);
		}
		[Q_SLOT("void center(int, int, float, float)")]
		[SmokeMethod("center(int, int, float, float)")]
		public void Center(int x, int y, float xmargin, float ymargin) {
			ProxyQScrollView().Center(x,y,xmargin,ymargin);
		}
		[Q_SLOT("void updateScrollBars()")]
		[SmokeMethod("updateScrollBars()")]
		public void UpdateScrollBars() {
			ProxyQScrollView().UpdateScrollBars();
		}
		[Q_SLOT("void setEnabled(bool)")]
		[SmokeMethod("setEnabled(bool)")]
		public new void SetEnabled(bool enable) {
			ProxyQScrollView().SetEnabled(enable);
		}
		[SmokeMethod("tr(const char*, const char*)")]
		public static new string Tr(string arg1, string arg2) {
			return StaticQScrollView().Tr(arg1,arg2);
		}
		[SmokeMethod("tr(const char*)")]
		public static new string Tr(string arg1) {
			return StaticQScrollView().Tr(arg1);
		}
		[SmokeMethod("trUtf8(const char*, const char*)")]
		public static new string TrUtf8(string arg1, string arg2) {
			return StaticQScrollView().TrUtf8(arg1,arg2);
		}
		[SmokeMethod("trUtf8(const char*)")]
		public static new string TrUtf8(string arg1) {
			return StaticQScrollView().TrUtf8(arg1);
		}
		[SmokeMethod("drawContents(QPainter*, int, int, int, int)")]
		protected new virtual void DrawContents(QPainter arg1, int cx, int cy, int cw, int ch) {
			ProxyQScrollView().DrawContents(arg1,cx,cy,cw,ch);
		}
		[SmokeMethod("drawContentsOffset(QPainter*, int, int, int, int, int, int)")]
		protected virtual void DrawContentsOffset(QPainter arg1, int ox, int oy, int cx, int cy, int cw, int ch) {
			ProxyQScrollView().DrawContentsOffset(arg1,ox,oy,cx,cy,cw,ch);
		}
		[SmokeMethod("contentsMousePressEvent(QMouseEvent*)")]
		protected virtual void ContentsMousePressEvent(QMouseEvent arg1) {
			ProxyQScrollView().ContentsMousePressEvent(arg1);
		}
		[SmokeMethod("contentsMouseReleaseEvent(QMouseEvent*)")]
		protected virtual void ContentsMouseReleaseEvent(QMouseEvent arg1) {
			ProxyQScrollView().ContentsMouseReleaseEvent(arg1);
		}
		[SmokeMethod("contentsMouseDoubleClickEvent(QMouseEvent*)")]
		protected virtual void ContentsMouseDoubleClickEvent(QMouseEvent arg1) {
			ProxyQScrollView().ContentsMouseDoubleClickEvent(arg1);
		}
		[SmokeMethod("contentsMouseMoveEvent(QMouseEvent*)")]
		protected virtual void ContentsMouseMoveEvent(QMouseEvent arg1) {
			ProxyQScrollView().ContentsMouseMoveEvent(arg1);
		}
		[SmokeMethod("contentsDragEnterEvent(QDragEnterEvent*)")]
		protected virtual void ContentsDragEnterEvent(QDragEnterEvent arg1) {
			ProxyQScrollView().ContentsDragEnterEvent(arg1);
		}
		[SmokeMethod("contentsDragMoveEvent(QDragMoveEvent*)")]
		protected virtual void ContentsDragMoveEvent(QDragMoveEvent arg1) {
			ProxyQScrollView().ContentsDragMoveEvent(arg1);
		}
		[SmokeMethod("contentsDragLeaveEvent(QDragLeaveEvent*)")]
		protected virtual void ContentsDragLeaveEvent(QDragLeaveEvent arg1) {
			ProxyQScrollView().ContentsDragLeaveEvent(arg1);
		}
		[SmokeMethod("contentsDropEvent(QDropEvent*)")]
		protected virtual void ContentsDropEvent(QDropEvent arg1) {
			ProxyQScrollView().ContentsDropEvent(arg1);
		}
		[SmokeMethod("contentsWheelEvent(QWheelEvent*)")]
		protected virtual void ContentsWheelEvent(QWheelEvent arg1) {
			ProxyQScrollView().ContentsWheelEvent(arg1);
		}
		[SmokeMethod("contentsContextMenuEvent(QContextMenuEvent*)")]
		protected virtual void ContentsContextMenuEvent(QContextMenuEvent arg1) {
			ProxyQScrollView().ContentsContextMenuEvent(arg1);
		}
		[SmokeMethod("viewportPaintEvent(QPaintEvent*)")]
		protected virtual void ViewportPaintEvent(QPaintEvent arg1) {
			ProxyQScrollView().ViewportPaintEvent(arg1);
		}
		[SmokeMethod("viewportResizeEvent(QResizeEvent*)")]
		protected virtual void ViewportResizeEvent(QResizeEvent arg1) {
			ProxyQScrollView().ViewportResizeEvent(arg1);
		}
		[SmokeMethod("viewportMousePressEvent(QMouseEvent*)")]
		protected virtual void ViewportMousePressEvent(QMouseEvent arg1) {
			ProxyQScrollView().ViewportMousePressEvent(arg1);
		}
		[SmokeMethod("viewportMouseReleaseEvent(QMouseEvent*)")]
		protected virtual void ViewportMouseReleaseEvent(QMouseEvent arg1) {
			ProxyQScrollView().ViewportMouseReleaseEvent(arg1);
		}
		[SmokeMethod("viewportMouseDoubleClickEvent(QMouseEvent*)")]
		protected virtual void ViewportMouseDoubleClickEvent(QMouseEvent arg1) {
			ProxyQScrollView().ViewportMouseDoubleClickEvent(arg1);
		}
		[SmokeMethod("viewportMouseMoveEvent(QMouseEvent*)")]
		protected virtual void ViewportMouseMoveEvent(QMouseEvent arg1) {
			ProxyQScrollView().ViewportMouseMoveEvent(arg1);
		}
		[SmokeMethod("viewportDragEnterEvent(QDragEnterEvent*)")]
		protected virtual void ViewportDragEnterEvent(QDragEnterEvent arg1) {
			ProxyQScrollView().ViewportDragEnterEvent(arg1);
		}
		[SmokeMethod("viewportDragMoveEvent(QDragMoveEvent*)")]
		protected virtual void ViewportDragMoveEvent(QDragMoveEvent arg1) {
			ProxyQScrollView().ViewportDragMoveEvent(arg1);
		}
		[SmokeMethod("viewportDragLeaveEvent(QDragLeaveEvent*)")]
		protected virtual void ViewportDragLeaveEvent(QDragLeaveEvent arg1) {
			ProxyQScrollView().ViewportDragLeaveEvent(arg1);
		}
		[SmokeMethod("viewportDropEvent(QDropEvent*)")]
		protected virtual void ViewportDropEvent(QDropEvent arg1) {
			ProxyQScrollView().ViewportDropEvent(arg1);
		}
		[SmokeMethod("viewportWheelEvent(QWheelEvent*)")]
		protected virtual void ViewportWheelEvent(QWheelEvent arg1) {
			ProxyQScrollView().ViewportWheelEvent(arg1);
		}
		[SmokeMethod("viewportContextMenuEvent(QContextMenuEvent*)")]
		protected virtual void ViewportContextMenuEvent(QContextMenuEvent arg1) {
			ProxyQScrollView().ViewportContextMenuEvent(arg1);
		}
		[SmokeMethod("frameChanged()")]
		protected new void FrameChanged() {
			ProxyQScrollView().FrameChanged();
		}
		[SmokeMethod("setMargins(int, int, int, int)")]
		protected virtual void SetMargins(int left, int top, int right, int bottom) {
			ProxyQScrollView().SetMargins(left,top,right,bottom);
		}
		[SmokeMethod("leftMargin() const")]
		protected int LeftMargin() {
			return ProxyQScrollView().LeftMargin();
		}
		[SmokeMethod("topMargin() const")]
		protected int TopMargin() {
			return ProxyQScrollView().TopMargin();
		}
		[SmokeMethod("rightMargin() const")]
		protected int RightMargin() {
			return ProxyQScrollView().RightMargin();
		}
		[SmokeMethod("bottomMargin() const")]
		protected int BottomMargin() {
			return ProxyQScrollView().BottomMargin();
		}
		[SmokeMethod("focusNextPrevChild(bool)")]
		protected new bool FocusNextPrevChild(bool next) {
			return ProxyQScrollView().FocusNextPrevChild(next);
		}
		[SmokeMethod("setHBarGeometry(QScrollBar&, int, int, int, int)")]
		protected virtual void SetHBarGeometry(QScrollBar hbar, int x, int y, int w, int h) {
			ProxyQScrollView().SetHBarGeometry(hbar,x,y,w,h);
		}
		[SmokeMethod("setVBarGeometry(QScrollBar&, int, int, int, int)")]
		protected virtual void SetVBarGeometry(QScrollBar vbar, int x, int y, int w, int h) {
			ProxyQScrollView().SetVBarGeometry(vbar,x,y,w,h);
		}
		[SmokeMethod("resizeEvent(QResizeEvent*)")]
		protected new void ResizeEvent(QResizeEvent arg1) {
			ProxyQScrollView().ResizeEvent(arg1);
		}
		[SmokeMethod("mousePressEvent(QMouseEvent*)")]
		protected new void MousePressEvent(QMouseEvent arg1) {
			ProxyQScrollView().MousePressEvent(arg1);
		}
		[SmokeMethod("mouseReleaseEvent(QMouseEvent*)")]
		protected new void MouseReleaseEvent(QMouseEvent arg1) {
			ProxyQScrollView().MouseReleaseEvent(arg1);
		}
		[SmokeMethod("mouseDoubleClickEvent(QMouseEvent*)")]
		protected new void MouseDoubleClickEvent(QMouseEvent arg1) {
			ProxyQScrollView().MouseDoubleClickEvent(arg1);
		}
		[SmokeMethod("mouseMoveEvent(QMouseEvent*)")]
		protected new void MouseMoveEvent(QMouseEvent arg1) {
			ProxyQScrollView().MouseMoveEvent(arg1);
		}
		[SmokeMethod("wheelEvent(QWheelEvent*)")]
		protected new void WheelEvent(QWheelEvent arg1) {
			ProxyQScrollView().WheelEvent(arg1);
		}
		[SmokeMethod("contextMenuEvent(QContextMenuEvent*)")]
		protected new void ContextMenuEvent(QContextMenuEvent arg1) {
			ProxyQScrollView().ContextMenuEvent(arg1);
		}
		[SmokeMethod("eventFilter(QObject*, QEvent*)")]
		public new bool EventFilter(QObject arg1, QEvent e) {
			return ProxyQScrollView().EventFilter(arg1,e);
		}
		[SmokeMethod("setCachedSizeHint(const QSize&) const")]
		protected void SetCachedSizeHint(QSize sh) {
			ProxyQScrollView().SetCachedSizeHint(sh);
		}
		[SmokeMethod("cachedSizeHint() const")]
		protected QSize CachedSizeHint() {
			return ProxyQScrollView().CachedSizeHint();
		}
		[SmokeMethod("fontChange(const QFont&)")]
		protected new void FontChange(QFont arg1) {
			ProxyQScrollView().FontChange(arg1);
		}
		~QScrollView() {
			DisposeQScrollView();
		}
		public new void Dispose() {
			DisposeQScrollView();
		}
		private void DisposeQScrollView() {
			ProxyQScrollView().DisposeQScrollView();
		}
		protected new IQScrollViewSignals Emit() {
			return (IQScrollViewSignals) Q_EMIT;
		}
	}

	public interface IQScrollViewSignals : IQFrameSignals {
		[Q_SIGNAL("void contentsMoving(int, int)")]
		void ContentsMoving(int x, int y);
		[Q_SIGNAL("void horizontalSliderPressed()")]
		void HorizontalSliderPressed();
		[Q_SIGNAL("void horizontalSliderReleased()")]
		void HorizontalSliderReleased();
		[Q_SIGNAL("void verticalSliderPressed()")]
		void VerticalSliderPressed();
		[Q_SIGNAL("void verticalSliderReleased()")]
		void VerticalSliderReleased();
	}
}
