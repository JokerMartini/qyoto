//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QSizePolicy : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QSizePolicy(Type dummy) {}
		interface IQSizePolicyProxy {
			bool op_equals(QSizePolicy lhs, QSizePolicy s);
		}

		protected void CreateQSizePolicyProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSizePolicy), this);
			_interceptor = (QSizePolicy) realProxy.GetTransparentProxy();
		}
		private QSizePolicy ProxyQSizePolicy() {
			return (QSizePolicy) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QSizePolicy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSizePolicyProxy), null);
			_staticInterceptor = (IQSizePolicyProxy) realProxy.GetTransparentProxy();
		}
		private static IQSizePolicyProxy StaticQSizePolicy() {
			return (IQSizePolicyProxy) _staticInterceptor;
		}

		public const int HSize = 6;
		public const int HMask = 0x3f;
		public const int VMask = HMask<<HSize;
		public const int MayGrow = 1;
		public const int ExpMask = 2;
		public const int MayShrink = 4;

		enum SizeType {
			Fixed = 0,
			Minimum = MayGrow,
			Maximum = MayShrink,
			Preferred = MayGrow|MayShrink,
			MinimumExpanding = MayGrow|ExpMask,
			Expanding = MayGrow|MayShrink|ExpMask,
			Ignored = ExpMask,
		}
		enum ExpandData {
			NoDirection = 0,
			Horizontally = 1,
			Vertically = 2,
			Horizontal = Horizontally,
			Vertical = Vertically,
			BothDirections = Horizontally|Vertically,
		}
		public QSizePolicy() : this((Type) null) {
			CreateQSizePolicyProxy();
			NewQSizePolicy();
		}
		private void NewQSizePolicy() {
			ProxyQSizePolicy().NewQSizePolicy();
		}
		public QSizePolicy(int hor, int ver, bool hfw) : this((Type) null) {
			CreateQSizePolicyProxy();
			NewQSizePolicy(hor,ver,hfw);
		}
		private void NewQSizePolicy(int hor, int ver, bool hfw) {
			ProxyQSizePolicy().NewQSizePolicy(hor,ver,hfw);
		}
		public QSizePolicy(int hor, int ver) : this((Type) null) {
			CreateQSizePolicyProxy();
			NewQSizePolicy(hor,ver);
		}
		private void NewQSizePolicy(int hor, int ver) {
			ProxyQSizePolicy().NewQSizePolicy(hor,ver);
		}
		public QSizePolicy(int hor, int ver, ushort hors, ushort vers, bool hfw) : this((Type) null) {
			CreateQSizePolicyProxy();
			NewQSizePolicy(hor,ver,hors,vers,hfw);
		}
		private void NewQSizePolicy(int hor, int ver, ushort hors, ushort vers, bool hfw) {
			ProxyQSizePolicy().NewQSizePolicy(hor,ver,hors,vers,hfw);
		}
		public QSizePolicy(int hor, int ver, ushort hors, ushort vers) : this((Type) null) {
			CreateQSizePolicyProxy();
			NewQSizePolicy(hor,ver,hors,vers);
		}
		private void NewQSizePolicy(int hor, int ver, ushort hors, ushort vers) {
			ProxyQSizePolicy().NewQSizePolicy(hor,ver,hors,vers);
		}
		public int HorData() {
			return ProxyQSizePolicy().HorData();
		}
		public int VerData() {
			return ProxyQSizePolicy().VerData();
		}
		public bool MayShrinkHorizontally() {
			return ProxyQSizePolicy().MayShrinkHorizontally();
		}
		public bool MayShrinkVertically() {
			return ProxyQSizePolicy().MayShrinkVertically();
		}
		public bool MayGrowHorizontally() {
			return ProxyQSizePolicy().MayGrowHorizontally();
		}
		public bool MayGrowVertically() {
			return ProxyQSizePolicy().MayGrowVertically();
		}
		public int Expanding() {
			return ProxyQSizePolicy().Expanding();
		}
		public void SetHorData(int d) {
			ProxyQSizePolicy().SetHorData(d);
		}
		public void SetVerData(int d) {
			ProxyQSizePolicy().SetVerData(d);
		}
		public void SetHeightForWidth(bool b) {
			ProxyQSizePolicy().SetHeightForWidth(b);
		}
		public bool HasHeightForWidth() {
			return ProxyQSizePolicy().HasHeightForWidth();
		}
		public static bool operator==(QSizePolicy lhs, QSizePolicy s) {
			return StaticQSizePolicy().op_equals(lhs,s);
		}
		public static bool operator!=(QSizePolicy lhs, QSizePolicy s) {
			return !StaticQSizePolicy().op_equals(lhs,s);
		}
		public override bool Equals(object o) {
			if (!(o is QSizePolicy)) { return false; }
			return this == (QSizePolicy) o;
		}
		public override int GetHashCode() {
			return ProxyQSizePolicy().GetHashCode();
		}
		public uint HorStretch() {
			return ProxyQSizePolicy().HorStretch();
		}
		public uint VerStretch() {
			return ProxyQSizePolicy().VerStretch();
		}
		public void SetHorStretch(ushort sf) {
			ProxyQSizePolicy().SetHorStretch(sf);
		}
		public void SetVerStretch(ushort sf) {
			ProxyQSizePolicy().SetVerStretch(sf);
		}
		public void Transpose() {
			ProxyQSizePolicy().Transpose();
		}
		~QSizePolicy() {
			ProxyQSizePolicy().Dispose();
		}
		public void Dispose() {
			ProxyQSizePolicy().Dispose();
		}
	}
}
