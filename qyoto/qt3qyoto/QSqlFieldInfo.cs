//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	[SmokeClass("QSqlFieldInfo")]
	public class QSqlFieldInfo : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QSqlFieldInfo(Type dummy) {}
		interface IQSqlFieldInfoProxy {
			bool op_equals(QSqlFieldInfo lhs, QSqlFieldInfo f);
		}

		protected void CreateQSqlFieldInfoProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSqlFieldInfo), this);
			_interceptor = (QSqlFieldInfo) realProxy.GetTransparentProxy();
		}
		private QSqlFieldInfo ProxyQSqlFieldInfo() {
			return (QSqlFieldInfo) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QSqlFieldInfo() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSqlFieldInfoProxy), null);
			_staticInterceptor = (IQSqlFieldInfoProxy) realProxy.GetTransparentProxy();
		}
		private static IQSqlFieldInfoProxy StaticQSqlFieldInfo() {
			return (IQSqlFieldInfoProxy) _staticInterceptor;
		}

		public QSqlFieldInfo(string name, int typ, int required, int len, int prec, QVariant defValue, int sqlType, bool generated, bool trim, bool calculated) : this((Type) null) {
			CreateQSqlFieldInfoProxy();
			NewQSqlFieldInfo(name,typ,required,len,prec,defValue,sqlType,generated,trim,calculated);
		}
		[SmokeMethod("QSqlFieldInfo(const QString&, QVariant::Type, int, int, int, const QVariant&, int, bool, bool, bool)")]
		private void NewQSqlFieldInfo(string name, int typ, int required, int len, int prec, QVariant defValue, int sqlType, bool generated, bool trim, bool calculated) {
			ProxyQSqlFieldInfo().NewQSqlFieldInfo(name,typ,required,len,prec,defValue,sqlType,generated,trim,calculated);
		}
		public QSqlFieldInfo(string name, int typ, int required, int len, int prec, QVariant defValue, int sqlType, bool generated, bool trim) : this((Type) null) {
			CreateQSqlFieldInfoProxy();
			NewQSqlFieldInfo(name,typ,required,len,prec,defValue,sqlType,generated,trim);
		}
		[SmokeMethod("QSqlFieldInfo(const QString&, QVariant::Type, int, int, int, const QVariant&, int, bool, bool)")]
		private void NewQSqlFieldInfo(string name, int typ, int required, int len, int prec, QVariant defValue, int sqlType, bool generated, bool trim) {
			ProxyQSqlFieldInfo().NewQSqlFieldInfo(name,typ,required,len,prec,defValue,sqlType,generated,trim);
		}
		public QSqlFieldInfo(string name, int typ, int required, int len, int prec, QVariant defValue, int sqlType, bool generated) : this((Type) null) {
			CreateQSqlFieldInfoProxy();
			NewQSqlFieldInfo(name,typ,required,len,prec,defValue,sqlType,generated);
		}
		[SmokeMethod("QSqlFieldInfo(const QString&, QVariant::Type, int, int, int, const QVariant&, int, bool)")]
		private void NewQSqlFieldInfo(string name, int typ, int required, int len, int prec, QVariant defValue, int sqlType, bool generated) {
			ProxyQSqlFieldInfo().NewQSqlFieldInfo(name,typ,required,len,prec,defValue,sqlType,generated);
		}
		public QSqlFieldInfo(string name, int typ, int required, int len, int prec, QVariant defValue, int sqlType) : this((Type) null) {
			CreateQSqlFieldInfoProxy();
			NewQSqlFieldInfo(name,typ,required,len,prec,defValue,sqlType);
		}
		[SmokeMethod("QSqlFieldInfo(const QString&, QVariant::Type, int, int, int, const QVariant&, int)")]
		private void NewQSqlFieldInfo(string name, int typ, int required, int len, int prec, QVariant defValue, int sqlType) {
			ProxyQSqlFieldInfo().NewQSqlFieldInfo(name,typ,required,len,prec,defValue,sqlType);
		}
		public QSqlFieldInfo(string name, int typ, int required, int len, int prec, QVariant defValue) : this((Type) null) {
			CreateQSqlFieldInfoProxy();
			NewQSqlFieldInfo(name,typ,required,len,prec,defValue);
		}
		[SmokeMethod("QSqlFieldInfo(const QString&, QVariant::Type, int, int, int, const QVariant&)")]
		private void NewQSqlFieldInfo(string name, int typ, int required, int len, int prec, QVariant defValue) {
			ProxyQSqlFieldInfo().NewQSqlFieldInfo(name,typ,required,len,prec,defValue);
		}
		public QSqlFieldInfo(string name, int typ, int required, int len, int prec) : this((Type) null) {
			CreateQSqlFieldInfoProxy();
			NewQSqlFieldInfo(name,typ,required,len,prec);
		}
		[SmokeMethod("QSqlFieldInfo(const QString&, QVariant::Type, int, int, int)")]
		private void NewQSqlFieldInfo(string name, int typ, int required, int len, int prec) {
			ProxyQSqlFieldInfo().NewQSqlFieldInfo(name,typ,required,len,prec);
		}
		public QSqlFieldInfo(string name, int typ, int required, int len) : this((Type) null) {
			CreateQSqlFieldInfoProxy();
			NewQSqlFieldInfo(name,typ,required,len);
		}
		[SmokeMethod("QSqlFieldInfo(const QString&, QVariant::Type, int, int)")]
		private void NewQSqlFieldInfo(string name, int typ, int required, int len) {
			ProxyQSqlFieldInfo().NewQSqlFieldInfo(name,typ,required,len);
		}
		public QSqlFieldInfo(string name, int typ, int required) : this((Type) null) {
			CreateQSqlFieldInfoProxy();
			NewQSqlFieldInfo(name,typ,required);
		}
		[SmokeMethod("QSqlFieldInfo(const QString&, QVariant::Type, int)")]
		private void NewQSqlFieldInfo(string name, int typ, int required) {
			ProxyQSqlFieldInfo().NewQSqlFieldInfo(name,typ,required);
		}
		public QSqlFieldInfo(string name, int typ) : this((Type) null) {
			CreateQSqlFieldInfoProxy();
			NewQSqlFieldInfo(name,typ);
		}
		[SmokeMethod("QSqlFieldInfo(const QString&, QVariant::Type)")]
		private void NewQSqlFieldInfo(string name, int typ) {
			ProxyQSqlFieldInfo().NewQSqlFieldInfo(name,typ);
		}
		public QSqlFieldInfo(string name) : this((Type) null) {
			CreateQSqlFieldInfoProxy();
			NewQSqlFieldInfo(name);
		}
		[SmokeMethod("QSqlFieldInfo(const QString&)")]
		private void NewQSqlFieldInfo(string name) {
			ProxyQSqlFieldInfo().NewQSqlFieldInfo(name);
		}
		public QSqlFieldInfo() : this((Type) null) {
			CreateQSqlFieldInfoProxy();
			NewQSqlFieldInfo();
		}
		[SmokeMethod("QSqlFieldInfo()")]
		private void NewQSqlFieldInfo() {
			ProxyQSqlFieldInfo().NewQSqlFieldInfo();
		}
		public QSqlFieldInfo(QSqlFieldInfo other) : this((Type) null) {
			CreateQSqlFieldInfoProxy();
			NewQSqlFieldInfo(other);
		}
		[SmokeMethod("QSqlFieldInfo(const QSqlFieldInfo&)")]
		private void NewQSqlFieldInfo(QSqlFieldInfo other) {
			ProxyQSqlFieldInfo().NewQSqlFieldInfo(other);
		}
		public QSqlFieldInfo(QSqlField other, bool generated) : this((Type) null) {
			CreateQSqlFieldInfoProxy();
			NewQSqlFieldInfo(other,generated);
		}
		[SmokeMethod("QSqlFieldInfo(const QSqlField&, bool)")]
		private void NewQSqlFieldInfo(QSqlField other, bool generated) {
			ProxyQSqlFieldInfo().NewQSqlFieldInfo(other,generated);
		}
		public QSqlFieldInfo(QSqlField other) : this((Type) null) {
			CreateQSqlFieldInfoProxy();
			NewQSqlFieldInfo(other);
		}
		[SmokeMethod("QSqlFieldInfo(const QSqlField&)")]
		private void NewQSqlFieldInfo(QSqlField other) {
			ProxyQSqlFieldInfo().NewQSqlFieldInfo(other);
		}
		[SmokeMethod("operator==(const QSqlFieldInfo&) const")]
		public static bool operator==(QSqlFieldInfo lhs, QSqlFieldInfo f) {
			return StaticQSqlFieldInfo().op_equals(lhs,f);
		}
		public static bool operator!=(QSqlFieldInfo lhs, QSqlFieldInfo f) {
			return !StaticQSqlFieldInfo().op_equals(lhs,f);
		}
		public override bool Equals(object o) {
			if (!(o is QSqlFieldInfo)) { return false; }
			return this == (QSqlFieldInfo) o;
		}
		public override int GetHashCode() {
			return ProxyQSqlFieldInfo().GetHashCode();
		}
		[SmokeMethod("toField() const")]
		public QSqlField ToField() {
			return ProxyQSqlFieldInfo().ToField();
		}
		[SmokeMethod("isRequired() const")]
		public int IsRequired() {
			return ProxyQSqlFieldInfo().IsRequired();
		}
		[SmokeMethod("length() const")]
		public int Length() {
			return ProxyQSqlFieldInfo().Length();
		}
		[SmokeMethod("precision() const")]
		public int Precision() {
			return ProxyQSqlFieldInfo().Precision();
		}
		[SmokeMethod("defaultValue() const")]
		public QVariant DefaultValue() {
			return ProxyQSqlFieldInfo().DefaultValue();
		}
		[SmokeMethod("name() const")]
		public string Name() {
			return ProxyQSqlFieldInfo().Name();
		}
		[SmokeMethod("typeID() const")]
		public int TypeID() {
			return ProxyQSqlFieldInfo().TypeID();
		}
		[SmokeMethod("isGenerated() const")]
		public bool IsGenerated() {
			return ProxyQSqlFieldInfo().IsGenerated();
		}
		[SmokeMethod("isTrim() const")]
		public bool IsTrim() {
			return ProxyQSqlFieldInfo().IsTrim();
		}
		[SmokeMethod("isCalculated() const")]
		public bool IsCalculated() {
			return ProxyQSqlFieldInfo().IsCalculated();
		}
		[SmokeMethod("setTrim(bool)")]
		public virtual void SetTrim(bool trim) {
			ProxyQSqlFieldInfo().SetTrim(trim);
		}
		[SmokeMethod("setGenerated(bool)")]
		public virtual void SetGenerated(bool gen) {
			ProxyQSqlFieldInfo().SetGenerated(gen);
		}
		[SmokeMethod("setCalculated(bool)")]
		public virtual void SetCalculated(bool calc) {
			ProxyQSqlFieldInfo().SetCalculated(calc);
		}
		~QSqlFieldInfo() {
			DisposeQSqlFieldInfo();
		}
		public void Dispose() {
			DisposeQSqlFieldInfo();
		}
		private void DisposeQSqlFieldInfo() {
			ProxyQSqlFieldInfo().DisposeQSqlFieldInfo();
		}
	}
}
