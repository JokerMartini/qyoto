//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QCanvasSpline : QCanvasPolygon, IDisposable {
 		protected QCanvasSpline(Type dummy) : base((Type) null) {}
		interface IQCanvasSplineProxy {
		}

		protected void CreateQCanvasSplineProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QCanvasSpline), this);
			_interceptor = (QCanvasSpline) realProxy.GetTransparentProxy();
		}
		private QCanvasSpline ProxyQCanvasSpline() {
			return (QCanvasSpline) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QCanvasSpline() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQCanvasSplineProxy), null);
			_staticInterceptor = (IQCanvasSplineProxy) realProxy.GetTransparentProxy();
		}
		private static IQCanvasSplineProxy StaticQCanvasSpline() {
			return (IQCanvasSplineProxy) _staticInterceptor;
		}

		public QCanvasSpline(QCanvas canvas) : this((Type) null) {
			CreateQCanvasSplineProxy();
			NewQCanvasSpline(canvas);
		}
		private void NewQCanvasSpline(QCanvas canvas) {
			ProxyQCanvasSpline().NewQCanvasSpline(canvas);
		}
		public void SetControlPoints(QPointArray arg1, bool closed) {
			ProxyQCanvasSpline().SetControlPoints(arg1,closed);
		}
		public void SetControlPoints(QPointArray arg1) {
			ProxyQCanvasSpline().SetControlPoints(arg1);
		}
		public QPointArray ControlPoints() {
			return ProxyQCanvasSpline().ControlPoints();
		}
		public bool Closed() {
			return ProxyQCanvasSpline().Closed();
		}
		public new int Rtti() {
			return ProxyQCanvasSpline().Rtti();
		}
		~QCanvasSpline() {
			ProxyQCanvasSpline().Dispose();
		}
		public new void Dispose() {
			ProxyQCanvasSpline().Dispose();
		}
	}
}
