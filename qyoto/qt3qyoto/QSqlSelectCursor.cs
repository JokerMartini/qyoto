//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	[SmokeClass("QSqlSelectCursor")]
	public class QSqlSelectCursor : QSqlCursor, IDisposable {
 		protected QSqlSelectCursor(Type dummy) : base((Type) null) {}
		interface IQSqlSelectCursorProxy {
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSqlSelectCursor), this);
			_interceptor = (QSqlSelectCursor) realProxy.GetTransparentProxy();
		}
		private QSqlSelectCursor ProxyQSqlSelectCursor() {
			return (QSqlSelectCursor) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QSqlSelectCursor() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSqlSelectCursorProxy), null);
			_staticInterceptor = (IQSqlSelectCursorProxy) realProxy.GetTransparentProxy();
		}
		private static IQSqlSelectCursorProxy StaticQSqlSelectCursor() {
			return (IQSqlSelectCursorProxy) _staticInterceptor;
		}

		public QSqlSelectCursor(string query, QSqlDatabase db) : this((Type) null) {
			CreateProxy();
			NewQSqlSelectCursor(query,db);
		}
		[SmokeMethod("QSqlSelectCursor(const QString&, QSqlDatabase*)")]
		private void NewQSqlSelectCursor(string query, QSqlDatabase db) {
			ProxyQSqlSelectCursor().NewQSqlSelectCursor(query,db);
		}
		public QSqlSelectCursor(string query) : this((Type) null) {
			CreateProxy();
			NewQSqlSelectCursor(query);
		}
		[SmokeMethod("QSqlSelectCursor(const QString&)")]
		private void NewQSqlSelectCursor(string query) {
			ProxyQSqlSelectCursor().NewQSqlSelectCursor(query);
		}
		public QSqlSelectCursor() : this((Type) null) {
			CreateProxy();
			NewQSqlSelectCursor();
		}
		[SmokeMethod("QSqlSelectCursor()")]
		private void NewQSqlSelectCursor() {
			ProxyQSqlSelectCursor().NewQSqlSelectCursor();
		}
		public QSqlSelectCursor(QSqlSelectCursor other) : this((Type) null) {
			CreateProxy();
			NewQSqlSelectCursor(other);
		}
		[SmokeMethod("QSqlSelectCursor(const QSqlSelectCursor&)")]
		private void NewQSqlSelectCursor(QSqlSelectCursor other) {
			ProxyQSqlSelectCursor().NewQSqlSelectCursor(other);
		}
		[SmokeMethod("exec(const QString&)")]
		public new bool Exec(string query) {
			return ProxyQSqlSelectCursor().Exec(query);
		}
		[SmokeMethod("select()")]
		public new bool Select() {
			return ProxyQSqlSelectCursor().Select();
		}
		[SmokeMethod("primaryIndex(bool) const")]
		protected new QSqlIndex PrimaryIndex(bool arg1) {
			return ProxyQSqlSelectCursor().PrimaryIndex(arg1);
		}
		[SmokeMethod("primaryIndex() const")]
		protected new QSqlIndex PrimaryIndex() {
			return ProxyQSqlSelectCursor().PrimaryIndex();
		}
		[SmokeMethod("index(const QStringList&) const")]
		protected new QSqlIndex Index(string[] arg1) {
			return ProxyQSqlSelectCursor().Index(arg1);
		}
		[SmokeMethod("index(const QString&) const")]
		protected new QSqlIndex Index(string arg1) {
			return ProxyQSqlSelectCursor().Index(arg1);
		}
		[SmokeMethod("setPrimaryIndex(const QSqlIndex&)")]
		protected new void SetPrimaryIndex(QSqlIndex arg1) {
			ProxyQSqlSelectCursor().SetPrimaryIndex(arg1);
		}
		[SmokeMethod("append(const QSqlFieldInfo&)")]
		protected new void Append(QSqlFieldInfo arg1) {
			ProxyQSqlSelectCursor().Append(arg1);
		}
		[SmokeMethod("insert(int, const QSqlFieldInfo&)")]
		protected new void Insert(int arg1, QSqlFieldInfo arg2) {
			ProxyQSqlSelectCursor().Insert(arg1,arg2);
		}
		[SmokeMethod("remove(int)")]
		protected new void Remove(int arg1) {
			ProxyQSqlSelectCursor().Remove(arg1);
		}
		[SmokeMethod("clear()")]
		protected new void Clear() {
			ProxyQSqlSelectCursor().Clear();
		}
		[SmokeMethod("setGenerated(const QString&, bool)")]
		protected new void SetGenerated(string arg1, bool arg2) {
			ProxyQSqlSelectCursor().SetGenerated(arg1,arg2);
		}
		[SmokeMethod("setGenerated(int, bool)")]
		protected new void SetGenerated(int arg1, bool arg2) {
			ProxyQSqlSelectCursor().SetGenerated(arg1,arg2);
		}
		[SmokeMethod("editBuffer(bool)")]
		protected new QSqlRecord EditBuffer(bool arg1) {
			return ProxyQSqlSelectCursor().EditBuffer(arg1);
		}
		[SmokeMethod("editBuffer()")]
		protected new QSqlRecord EditBuffer() {
			return ProxyQSqlSelectCursor().EditBuffer();
		}
		[SmokeMethod("primeInsert()")]
		protected new QSqlRecord PrimeInsert() {
			return ProxyQSqlSelectCursor().PrimeInsert();
		}
		[SmokeMethod("primeUpdate()")]
		protected new QSqlRecord PrimeUpdate() {
			return ProxyQSqlSelectCursor().PrimeUpdate();
		}
		[SmokeMethod("primeDelete()")]
		protected new QSqlRecord PrimeDelete() {
			return ProxyQSqlSelectCursor().PrimeDelete();
		}
		[SmokeMethod("insert(bool)")]
		protected new int Insert(bool arg1) {
			return ProxyQSqlSelectCursor().Insert(arg1);
		}
		[SmokeMethod("insert()")]
		protected new int Insert() {
			return ProxyQSqlSelectCursor().Insert();
		}
		[SmokeMethod("update(bool)")]
		protected new int Update(bool arg1) {
			return ProxyQSqlSelectCursor().Update(arg1);
		}
		[SmokeMethod("update()")]
		protected new int Update() {
			return ProxyQSqlSelectCursor().Update();
		}
		[SmokeMethod("del(bool)")]
		protected new int Del(bool arg1) {
			return ProxyQSqlSelectCursor().Del(arg1);
		}
		[SmokeMethod("del()")]
		protected new int Del() {
			return ProxyQSqlSelectCursor().Del();
		}
		[SmokeMethod("setMode(int)")]
		protected new void SetMode(int arg1) {
			ProxyQSqlSelectCursor().SetMode(arg1);
		}
		[SmokeMethod("setSort(const QSqlIndex&)")]
		protected new void SetSort(QSqlIndex arg1) {
			ProxyQSqlSelectCursor().SetSort(arg1);
		}
		[SmokeMethod("sort() const")]
		protected new QSqlIndex Sort() {
			return ProxyQSqlSelectCursor().Sort();
		}
		[SmokeMethod("setFilter(const QString&)")]
		protected new void SetFilter(string arg1) {
			ProxyQSqlSelectCursor().SetFilter(arg1);
		}
		[SmokeMethod("filter() const")]
		protected new string Filter() {
			return ProxyQSqlSelectCursor().Filter();
		}
		[SmokeMethod("setName(const QString&, bool)")]
		protected new void SetName(string arg1, bool arg2) {
			ProxyQSqlSelectCursor().SetName(arg1,arg2);
		}
		[SmokeMethod("setName(const QString&)")]
		protected new void SetName(string arg1) {
			ProxyQSqlSelectCursor().SetName(arg1);
		}
		[SmokeMethod("name() const")]
		protected new string Name() {
			return ProxyQSqlSelectCursor().Name();
		}
		[SmokeMethod("toString(const QString&, const QString&) const")]
		protected new string ToString(string arg1, string arg2) {
			return ProxyQSqlSelectCursor().ToString(arg1,arg2);
		}
		[SmokeMethod("toString(const QString&) const")]
		protected new string ToString(string arg1) {
			return ProxyQSqlSelectCursor().ToString(arg1);
		}
		[SmokeMethod("toString() const")]
		protected new string ToString() {
			return ProxyQSqlSelectCursor().ToString();
		}
		[SmokeMethod("select(const QString&, const QSqlIndex&)")]
		protected new bool Select(string arg1, QSqlIndex arg2) {
			return ProxyQSqlSelectCursor().Select(arg1,arg2);
		}
		[SmokeMethod("select(const QString&)")]
		protected new bool Select(string arg1) {
			return ProxyQSqlSelectCursor().Select(arg1);
		}
		~QSqlSelectCursor() {
			DisposeQSqlSelectCursor();
		}
		public new void Dispose() {
			DisposeQSqlSelectCursor();
		}
		private void DisposeQSqlSelectCursor() {
			ProxyQSqlSelectCursor().DisposeQSqlSelectCursor();
		}
	}
}
