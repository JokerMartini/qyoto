//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QPolygonScanner : MarshalByRefObject {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QPolygonScanner(Type dummy) {}
		interface IQPolygonScannerProxy {
		}

		protected void CreateQPolygonScannerProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QPolygonScanner), this);
			_interceptor = (QPolygonScanner) realProxy.GetTransparentProxy();
		}
		private QPolygonScanner ProxyQPolygonScanner() {
			return (QPolygonScanner) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QPolygonScanner() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQPolygonScannerProxy), null);
			_staticInterceptor = (IQPolygonScannerProxy) realProxy.GetTransparentProxy();
		}
		private static IQPolygonScannerProxy StaticQPolygonScanner() {
			return (IQPolygonScannerProxy) _staticInterceptor;
		}

		enum Edge {
			Left = 1,
			Right = 2,
			Top = 4,
			Bottom = 8,
		}
		[SmokeMethod("scan(const QPointArray&, bool, int, int)")]
		public void Scan(QPointArray pa, bool winding, int index, int npoints) {
			ProxyQPolygonScanner().Scan(pa,winding,index,npoints);
		}
		[SmokeMethod("scan(const QPointArray&, bool, int)")]
		public void Scan(QPointArray pa, bool winding, int index) {
			ProxyQPolygonScanner().Scan(pa,winding,index);
		}
		[SmokeMethod("scan(const QPointArray&, bool)")]
		public void Scan(QPointArray pa, bool winding) {
			ProxyQPolygonScanner().Scan(pa,winding);
		}
		[SmokeMethod("scan(const QPointArray&, bool, int, int, bool)")]
		public void Scan(QPointArray pa, bool winding, int index, int npoints, bool stitchable) {
			ProxyQPolygonScanner().Scan(pa,winding,index,npoints,stitchable);
		}
		[SmokeMethod("scan(const QPointArray&, bool, int, int, QPolygonScanner::Edge)")]
		public void Scan(QPointArray pa, bool winding, int index, int npoints, int edges) {
			ProxyQPolygonScanner().Scan(pa,winding,index,npoints,edges);
		}
		[SmokeMethod("processSpans(int, QPoint*, int*)")]
		public virtual void ProcessSpans(int n, QPoint point, out int width) {
			ProxyQPolygonScanner().ProcessSpans(n,point,out width);
		}
	}
}
