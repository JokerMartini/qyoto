//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QEucJpCodec : QTextCodec, IDisposable {
 		protected QEucJpCodec(Type dummy) : base((Type) null) {}
		interface IQEucJpCodecProxy {
		}

		protected void CreateQEucJpCodecProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QEucJpCodec), this);
			_interceptor = (QEucJpCodec) realProxy.GetTransparentProxy();
		}
		private QEucJpCodec ProxyQEucJpCodec() {
			return (QEucJpCodec) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QEucJpCodec() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQEucJpCodecProxy), null);
			_staticInterceptor = (IQEucJpCodecProxy) realProxy.GetTransparentProxy();
		}
		private static IQEucJpCodecProxy StaticQEucJpCodec() {
			return (IQEucJpCodecProxy) _staticInterceptor;
		}

		public new virtual int MibEnum() {
			return ProxyQEucJpCodec().MibEnum();
		}
		public new string Name() {
			return ProxyQEucJpCodec().Name();
		}
		public new string MimeName() {
			return ProxyQEucJpCodec().MimeName();
		}
		public new QTextDecoder MakeDecoder() {
			return ProxyQEucJpCodec().MakeDecoder();
		}
		public new string FromUnicode(string uc, out int lenInOut) {
			return ProxyQEucJpCodec().FromUnicode(uc,out lenInOut);
		}
		public new string ToUnicode(string chars, int len) {
			return ProxyQEucJpCodec().ToUnicode(chars,len);
		}
		public new int HeuristicContentMatch(string chars, int len) {
			return ProxyQEucJpCodec().HeuristicContentMatch(chars,len);
		}
		public new int HeuristicNameMatch(string hint) {
			return ProxyQEucJpCodec().HeuristicNameMatch(hint);
		}
		public QEucJpCodec() : this((Type) null) {
			CreateQEucJpCodecProxy();
			NewQEucJpCodec();
		}
		private void NewQEucJpCodec() {
			ProxyQEucJpCodec().NewQEucJpCodec();
		}
		~QEucJpCodec() {
			ProxyQEucJpCodec().Dispose();
		}
		public new void Dispose() {
			ProxyQEucJpCodec().Dispose();
		}
	}
}
