//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QTableSelection : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QTableSelection(Type dummy) {}
		interface IQTableSelectionProxy {
			bool op_equals(QTableSelection lhs, QTableSelection s);
		}

		protected void CreateQTableSelectionProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTableSelection), this);
			_interceptor = (QTableSelection) realProxy.GetTransparentProxy();
		}
		private QTableSelection ProxyQTableSelection() {
			return (QTableSelection) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QTableSelection() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQTableSelectionProxy), null);
			_staticInterceptor = (IQTableSelectionProxy) realProxy.GetTransparentProxy();
		}
		private static IQTableSelectionProxy StaticQTableSelection() {
			return (IQTableSelectionProxy) _staticInterceptor;
		}

		public QTableSelection() : this((Type) null) {
			CreateQTableSelectionProxy();
			NewQTableSelection();
		}
		[SmokeMethod("QTableSelection()")]
		private void NewQTableSelection() {
			ProxyQTableSelection().NewQTableSelection();
		}
		public QTableSelection(int start_row, int start_col, int end_row, int end_col) : this((Type) null) {
			CreateQTableSelectionProxy();
			NewQTableSelection(start_row,start_col,end_row,end_col);
		}
		[SmokeMethod("QTableSelection(int, int, int, int)")]
		private void NewQTableSelection(int start_row, int start_col, int end_row, int end_col) {
			ProxyQTableSelection().NewQTableSelection(start_row,start_col,end_row,end_col);
		}
		[SmokeMethod("init(int, int)")]
		public void Init(int row, int col) {
			ProxyQTableSelection().Init(row,col);
		}
		[SmokeMethod("expandTo(int, int)")]
		public void ExpandTo(int row, int col) {
			ProxyQTableSelection().ExpandTo(row,col);
		}
		[SmokeMethod("operator==(const QTableSelection&) const")]
		public static bool operator==(QTableSelection lhs, QTableSelection s) {
			return StaticQTableSelection().op_equals(lhs,s);
		}
		public static bool operator!=(QTableSelection lhs, QTableSelection s) {
			return !StaticQTableSelection().op_equals(lhs,s);
		}
		public override bool Equals(object o) {
			if (!(o is QTableSelection)) { return false; }
			return this == (QTableSelection) o;
		}
		public override int GetHashCode() {
			return ProxyQTableSelection().GetHashCode();
		}
		[SmokeMethod("topRow() const")]
		public int TopRow() {
			return ProxyQTableSelection().TopRow();
		}
		[SmokeMethod("bottomRow() const")]
		public int BottomRow() {
			return ProxyQTableSelection().BottomRow();
		}
		[SmokeMethod("leftCol() const")]
		public int LeftCol() {
			return ProxyQTableSelection().LeftCol();
		}
		[SmokeMethod("rightCol() const")]
		public int RightCol() {
			return ProxyQTableSelection().RightCol();
		}
		[SmokeMethod("anchorRow() const")]
		public int AnchorRow() {
			return ProxyQTableSelection().AnchorRow();
		}
		[SmokeMethod("anchorCol() const")]
		public int AnchorCol() {
			return ProxyQTableSelection().AnchorCol();
		}
		[SmokeMethod("numRows() const")]
		public int NumRows() {
			return ProxyQTableSelection().NumRows();
		}
		[SmokeMethod("numCols() const")]
		public int NumCols() {
			return ProxyQTableSelection().NumCols();
		}
		[SmokeMethod("isActive() const")]
		public bool IsActive() {
			return ProxyQTableSelection().IsActive();
		}
		[SmokeMethod("isEmpty() const")]
		public bool IsEmpty() {
			return ProxyQTableSelection().IsEmpty();
		}
		~QTableSelection() {
			DisposeQTableSelection();
		}
		public void Dispose() {
			DisposeQTableSelection();
		}
		private void DisposeQTableSelection() {
			ProxyQTableSelection().DisposeQTableSelection();
		}
	}
}
