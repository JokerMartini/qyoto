//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	[SmokeClass("QStoredDrag")]
	public class QStoredDrag : QDragObject, IDisposable {
 		protected QStoredDrag(Type dummy) : base((Type) null) {}
		interface IQStoredDragProxy {
			string Tr(string arg1, string arg2);
			string Tr(string arg1);
			string TrUtf8(string arg1, string arg2);
			string TrUtf8(string arg1);
		}

		protected void CreateQStoredDragProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QStoredDrag), this);
			_interceptor = (QStoredDrag) realProxy.GetTransparentProxy();
		}
		private QStoredDrag ProxyQStoredDrag() {
			return (QStoredDrag) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QStoredDrag() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQStoredDragProxy), null);
			_staticInterceptor = (IQStoredDragProxy) realProxy.GetTransparentProxy();
		}
		private static IQStoredDragProxy StaticQStoredDrag() {
			return (IQStoredDragProxy) _staticInterceptor;
		}

		[SmokeMethod("metaObject() const")]
		public new virtual QMetaObject MetaObject() {
			return ProxyQStoredDrag().MetaObject();
		}
		[SmokeMethod("className() const")]
		public new virtual string ClassName() {
			return ProxyQStoredDrag().ClassName();
		}
		public QStoredDrag(string mimeType, QWidget dragSource, string name) : this((Type) null) {
			CreateQStoredDragProxy();
			CreateQStoredDragSignalProxy();
			NewQStoredDrag(mimeType,dragSource,name);
		}
		[SmokeMethod("QStoredDrag(const char*, QWidget*, const char*)")]
		private void NewQStoredDrag(string mimeType, QWidget dragSource, string name) {
			ProxyQStoredDrag().NewQStoredDrag(mimeType,dragSource,name);
		}
		public QStoredDrag(string mimeType, QWidget dragSource) : this((Type) null) {
			CreateQStoredDragProxy();
			CreateQStoredDragSignalProxy();
			NewQStoredDrag(mimeType,dragSource);
		}
		[SmokeMethod("QStoredDrag(const char*, QWidget*)")]
		private void NewQStoredDrag(string mimeType, QWidget dragSource) {
			ProxyQStoredDrag().NewQStoredDrag(mimeType,dragSource);
		}
		public QStoredDrag(string mimeType) : this((Type) null) {
			CreateQStoredDragProxy();
			CreateQStoredDragSignalProxy();
			NewQStoredDrag(mimeType);
		}
		[SmokeMethod("QStoredDrag(const char*)")]
		private void NewQStoredDrag(string mimeType) {
			ProxyQStoredDrag().NewQStoredDrag(mimeType);
		}
		[SmokeMethod("setEncodedData(const QByteArray&)")]
		public virtual void SetEncodedData(QByteArray arg1) {
			ProxyQStoredDrag().SetEncodedData(arg1);
		}
		[SmokeMethod("format(int) const")]
		public new string Format(int i) {
			return ProxyQStoredDrag().Format(i);
		}
		[SmokeMethod("encodedData(const char*) const")]
		public new virtual QByteArray EncodedData(string arg1) {
			return ProxyQStoredDrag().EncodedData(arg1);
		}
		[SmokeMethod("tr(const char*, const char*)")]
		public static new string Tr(string arg1, string arg2) {
			return StaticQStoredDrag().Tr(arg1,arg2);
		}
		[SmokeMethod("tr(const char*)")]
		public static new string Tr(string arg1) {
			return StaticQStoredDrag().Tr(arg1);
		}
		[SmokeMethod("trUtf8(const char*, const char*)")]
		public static new string TrUtf8(string arg1, string arg2) {
			return StaticQStoredDrag().TrUtf8(arg1,arg2);
		}
		[SmokeMethod("trUtf8(const char*)")]
		public static new string TrUtf8(string arg1) {
			return StaticQStoredDrag().TrUtf8(arg1);
		}
		~QStoredDrag() {
			DisposeQStoredDrag();
		}
		public new void Dispose() {
			DisposeQStoredDrag();
		}
		private void DisposeQStoredDrag() {
			ProxyQStoredDrag().DisposeQStoredDrag();
		}
		protected void CreateQStoredDragSignalProxy() {
			SignalInvocation realProxy = new SignalInvocation(typeof(IQStoredDragSignals), this);
			Q_EMIT = (IQStoredDragSignals) realProxy.GetTransparentProxy();
		}
		protected new IQStoredDragSignals Emit() {
			return (IQStoredDragSignals) Q_EMIT;
		}
	}

	public interface IQStoredDragSignals : IQDragObjectSignals {
	}
}
