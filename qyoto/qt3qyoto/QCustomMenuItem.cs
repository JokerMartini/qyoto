//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	[SmokeClass("QCustomMenuItem")]
	public class QCustomMenuItem : Qt {
 		protected QCustomMenuItem(Type dummy) : base((Type) null) {}
		interface IQCustomMenuItemProxy {
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QCustomMenuItem), this);
			_interceptor = (QCustomMenuItem) realProxy.GetTransparentProxy();
		}
		private QCustomMenuItem ProxyQCustomMenuItem() {
			return (QCustomMenuItem) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QCustomMenuItem() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQCustomMenuItemProxy), null);
			_staticInterceptor = (IQCustomMenuItemProxy) realProxy.GetTransparentProxy();
		}
		private static IQCustomMenuItemProxy StaticQCustomMenuItem() {
			return (IQCustomMenuItemProxy) _staticInterceptor;
		}

		public QCustomMenuItem() : this((Type) null) {
			CreateProxy();
			NewQCustomMenuItem();
		}
		[SmokeMethod("QCustomMenuItem()")]
		private void NewQCustomMenuItem() {
			ProxyQCustomMenuItem().NewQCustomMenuItem();
		}
		[SmokeMethod("fullSpan() const")]
		public virtual bool FullSpan() {
			return ProxyQCustomMenuItem().FullSpan();
		}
		[SmokeMethod("isSeparator() const")]
		public virtual bool IsSeparator() {
			return ProxyQCustomMenuItem().IsSeparator();
		}
		[SmokeMethod("setFont(const QFont&)")]
		public virtual void SetFont(QFont font) {
			ProxyQCustomMenuItem().SetFont(font);
		}
		[SmokeMethod("paint(QPainter*, const QColorGroup&, bool, bool, int, int, int, int)")]
		public virtual void Paint(QPainter p, QColorGroup cg, bool act, bool enabled, int x, int y, int w, int h) {
			ProxyQCustomMenuItem().Paint(p,cg,act,enabled,x,y,w,h);
		}
		[SmokeMethod("sizeHint()")]
		public virtual QSize SizeHint() {
			return ProxyQCustomMenuItem().SizeHint();
		}
		~QCustomMenuItem() {
			DisposeQCustomMenuItem();
		}
		public void Dispose() {
			DisposeQCustomMenuItem();
		}
		private void DisposeQCustomMenuItem() {
			ProxyQCustomMenuItem().DisposeQCustomMenuItem();
		}
	}
}
