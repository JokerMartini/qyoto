//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QCloseEvent : QEvent, IDisposable {
 		protected QCloseEvent(Type dummy) : base((Type) null) {}
		interface IQCloseEventProxy {
		}

		protected void CreateQCloseEventProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QCloseEvent), this);
			_interceptor = (QCloseEvent) realProxy.GetTransparentProxy();
		}
		private QCloseEvent ProxyQCloseEvent() {
			return (QCloseEvent) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QCloseEvent() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQCloseEventProxy), null);
			_staticInterceptor = (IQCloseEventProxy) realProxy.GetTransparentProxy();
		}
		private static IQCloseEventProxy StaticQCloseEvent() {
			return (IQCloseEventProxy) _staticInterceptor;
		}

		public QCloseEvent() : this((Type) null) {
			CreateQCloseEventProxy();
			NewQCloseEvent();
		}
		[SmokeMethod("QCloseEvent()")]
		private void NewQCloseEvent() {
			ProxyQCloseEvent().NewQCloseEvent();
		}
		[SmokeMethod("isAccepted() const")]
		public bool IsAccepted() {
			return ProxyQCloseEvent().IsAccepted();
		}
		[SmokeMethod("accept()")]
		public void Accept() {
			ProxyQCloseEvent().Accept();
		}
		[SmokeMethod("ignore()")]
		public void Ignore() {
			ProxyQCloseEvent().Ignore();
		}
		~QCloseEvent() {
			DisposeQCloseEvent();
		}
		public new void Dispose() {
			DisposeQCloseEvent();
		}
		private void DisposeQCloseEvent() {
			ProxyQCloseEvent().DisposeQCloseEvent();
		}
	}
}
