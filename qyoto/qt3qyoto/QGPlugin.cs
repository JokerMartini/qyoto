//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QGPlugin : QObject, IDisposable {
 		protected QGPlugin(Type dummy) : base((Type) null) {}
		interface IQGPluginProxy {
			string Tr(string arg1, string arg2);
			string Tr(string arg1);
			string TrUtf8(string arg1, string arg2);
			string TrUtf8(string arg1);
		}

		protected void CreateQGPluginProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QGPlugin), this);
			_interceptor = (QGPlugin) realProxy.GetTransparentProxy();
		}
		private QGPlugin ProxyQGPlugin() {
			return (QGPlugin) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QGPlugin() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQGPluginProxy), null);
			_staticInterceptor = (IQGPluginProxy) realProxy.GetTransparentProxy();
		}
		private static IQGPluginProxy StaticQGPlugin() {
			return (IQGPluginProxy) _staticInterceptor;
		}

		public new virtual QMetaObject MetaObject() {
			return ProxyQGPlugin().MetaObject();
		}
		public new virtual string ClassName() {
			return ProxyQGPlugin().ClassName();
		}
		// QGPlugin* QGPlugin(QUnknownInterface* arg1); >>>> NOT CONVERTED
		// QUnknownInterface* iface(); >>>> NOT CONVERTED
		// void setIface(QUnknownInterface* arg1); >>>> NOT CONVERTED
		public static new string Tr(string arg1, string arg2) {
			return StaticQGPlugin().Tr(arg1,arg2);
		}
		public static new string Tr(string arg1) {
			return StaticQGPlugin().Tr(arg1);
		}
		public static new string TrUtf8(string arg1, string arg2) {
			return StaticQGPlugin().TrUtf8(arg1,arg2);
		}
		public static new string TrUtf8(string arg1) {
			return StaticQGPlugin().TrUtf8(arg1);
		}
		~QGPlugin() {
			ProxyQGPlugin().Dispose();
		}
		public new void Dispose() {
			ProxyQGPlugin().Dispose();
		}
	}
}
