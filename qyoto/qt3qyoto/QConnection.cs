//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	[SmokeClass("QConnection")]
	public class QConnection : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QConnection(Type dummy) {}
		interface IQConnectionProxy {
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QConnection), this);
			_interceptor = (QConnection) realProxy.GetTransparentProxy();
		}
		private QConnection ProxyQConnection() {
			return (QConnection) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QConnection() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQConnectionProxy), null);
			_staticInterceptor = (IQConnectionProxy) realProxy.GetTransparentProxy();
		}
		private static IQConnectionProxy StaticQConnection() {
			return (IQConnectionProxy) _staticInterceptor;
		}

		public QConnection(QObject arg1, int arg2, string memberName, int memberType) : this((Type) null) {
			CreateProxy();
			NewQConnection(arg1,arg2,memberName,memberType);
		}
		[SmokeMethod("QConnection(const QObject*, int, const char*, int)")]
		private void NewQConnection(QObject arg1, int arg2, string memberName, int memberType) {
			ProxyQConnection().NewQConnection(arg1,arg2,memberName,memberType);
		}
		[SmokeMethod("isConnected() const")]
		public bool IsConnected() {
			return ProxyQConnection().IsConnected();
		}
		[SmokeMethod("object() const")]
		public QObject Object() {
			return ProxyQConnection().Object();
		}
		[SmokeMethod("member() const")]
		public int Member() {
			return ProxyQConnection().Member();
		}
		[SmokeMethod("memberName() const")]
		public string MemberName() {
			return ProxyQConnection().MemberName();
		}
		[SmokeMethod("memberType() const")]
		public int MemberType() {
			return ProxyQConnection().MemberType();
		}
		[SmokeMethod("numArgs() const")]
		public int NumArgs() {
			return ProxyQConnection().NumArgs();
		}
		~QConnection() {
			DisposeQConnection();
		}
		public void Dispose() {
			DisposeQConnection();
		}
		private void DisposeQConnection() {
			ProxyQConnection().DisposeQConnection();
		}
	}
}
