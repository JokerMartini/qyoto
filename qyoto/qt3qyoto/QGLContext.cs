//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QGLContext : QGL, IDisposable {
 		protected QGLContext(Type dummy) : base((Type) null) {}
		interface IQGLContextProxy {
			QGLContext CurrentContext();
		}

		protected void CreateQGLContextProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QGLContext), this);
			_interceptor = (QGLContext) realProxy.GetTransparentProxy();
		}
		private QGLContext ProxyQGLContext() {
			return (QGLContext) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QGLContext() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQGLContextProxy), null);
			_staticInterceptor = (IQGLContextProxy) realProxy.GetTransparentProxy();
		}
		private static IQGLContextProxy StaticQGLContext() {
			return (IQGLContextProxy) _staticInterceptor;
		}

		public QGLContext(QGLFormat format, IQPaintDevice device) : this((Type) null) {
			CreateQGLContextProxy();
			NewQGLContext(format,device);
		}
		private void NewQGLContext(QGLFormat format, IQPaintDevice device) {
			ProxyQGLContext().NewQGLContext(format,device);
		}
		public QGLContext(QGLFormat format) : this((Type) null) {
			CreateQGLContextProxy();
			NewQGLContext(format);
		}
		private void NewQGLContext(QGLFormat format) {
			ProxyQGLContext().NewQGLContext(format);
		}
		public virtual bool Create(QGLContext shareContext) {
			return ProxyQGLContext().Create(shareContext);
		}
		public virtual bool Create() {
			return ProxyQGLContext().Create();
		}
		public bool IsValid() {
			return ProxyQGLContext().IsValid();
		}
		public bool IsSharing() {
			return ProxyQGLContext().IsSharing();
		}
		public virtual void Reset() {
			ProxyQGLContext().Reset();
		}
		public QGLFormat Format() {
			return ProxyQGLContext().Format();
		}
		public QGLFormat RequestedFormat() {
			return ProxyQGLContext().RequestedFormat();
		}
		public virtual void SetFormat(QGLFormat format) {
			ProxyQGLContext().SetFormat(format);
		}
		public virtual void MakeCurrent() {
			ProxyQGLContext().MakeCurrent();
		}
		public virtual void SwapBuffers() {
			ProxyQGLContext().SwapBuffers();
		}
		public IQPaintDevice Device() {
			return ProxyQGLContext().Device();
		}
		public QColor OverlayTransparentColor() {
			return ProxyQGLContext().OverlayTransparentColor();
		}
		public static QGLContext CurrentContext() {
			return StaticQGLContext().CurrentContext();
		}
		protected virtual bool ChooseContext(QGLContext shareContext) {
			return ProxyQGLContext().ChooseContext(shareContext);
		}
		protected virtual bool ChooseContext() {
			return ProxyQGLContext().ChooseContext();
		}
		protected virtual void DoneCurrent() {
			ProxyQGLContext().DoneCurrent();
		}
		protected bool DeviceIsPixmap() {
			return ProxyQGLContext().DeviceIsPixmap();
		}
		protected bool WindowCreated() {
			return ProxyQGLContext().WindowCreated();
		}
		protected void SetWindowCreated(bool on) {
			ProxyQGLContext().SetWindowCreated(on);
		}
		protected bool Initialized() {
			return ProxyQGLContext().Initialized();
		}
		protected void SetInitialized(bool on) {
			ProxyQGLContext().SetInitialized(on);
		}
		protected void GenerateFontDisplayLists(QFont fnt, int listBase) {
			ProxyQGLContext().GenerateFontDisplayLists(fnt,listBase);
		}
		protected uint ColorIndex(QColor c) {
			return ProxyQGLContext().ColorIndex(c);
		}
		protected void SetValid(bool valid) {
			ProxyQGLContext().SetValid(valid);
		}
		protected void SetDevice(IQPaintDevice pDev) {
			ProxyQGLContext().SetDevice(pDev);
		}
		~QGLContext() {
			ProxyQGLContext().Dispose();
		}
		public void Dispose() {
			ProxyQGLContext().Dispose();
		}
	}
}
