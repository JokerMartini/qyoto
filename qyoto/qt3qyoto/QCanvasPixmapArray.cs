//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	[SmokeClass("QCanvasPixmapArray")]
	public class QCanvasPixmapArray : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QCanvasPixmapArray(Type dummy) {}
		interface IQCanvasPixmapArrayProxy {
			bool op_not(QCanvasPixmapArray lhs);
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QCanvasPixmapArray), this);
			_interceptor = (QCanvasPixmapArray) realProxy.GetTransparentProxy();
		}
		private QCanvasPixmapArray ProxyQCanvasPixmapArray() {
			return (QCanvasPixmapArray) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QCanvasPixmapArray() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQCanvasPixmapArrayProxy), null);
			_staticInterceptor = (IQCanvasPixmapArrayProxy) realProxy.GetTransparentProxy();
		}
		private static IQCanvasPixmapArrayProxy StaticQCanvasPixmapArray() {
			return (IQCanvasPixmapArrayProxy) _staticInterceptor;
		}

		public QCanvasPixmapArray() : this((Type) null) {
			CreateProxy();
			NewQCanvasPixmapArray();
		}
		[SmokeMethod("QCanvasPixmapArray()")]
		private void NewQCanvasPixmapArray() {
			ProxyQCanvasPixmapArray().NewQCanvasPixmapArray();
		}
		public QCanvasPixmapArray(string datafilenamepattern, int framecount) : this((Type) null) {
			CreateProxy();
			NewQCanvasPixmapArray(datafilenamepattern,framecount);
		}
		[SmokeMethod("QCanvasPixmapArray(const QString&, int)")]
		private void NewQCanvasPixmapArray(string datafilenamepattern, int framecount) {
			ProxyQCanvasPixmapArray().NewQCanvasPixmapArray(datafilenamepattern,framecount);
		}
		public QCanvasPixmapArray(string datafilenamepattern) : this((Type) null) {
			CreateProxy();
			NewQCanvasPixmapArray(datafilenamepattern);
		}
		[SmokeMethod("QCanvasPixmapArray(const QString&)")]
		private void NewQCanvasPixmapArray(string datafilenamepattern) {
			ProxyQCanvasPixmapArray().NewQCanvasPixmapArray(datafilenamepattern);
		}
		// QCanvasPixmapArray* QCanvasPixmapArray(QPtrList<QPixmap> arg1,QPtrList<QPoint> arg2); >>>> NOT CONVERTED
		// QCanvasPixmapArray* QCanvasPixmapArray(QValueList<QPixmap> arg1,QPointArray arg2); >>>> NOT CONVERTED
		// QCanvasPixmapArray* QCanvasPixmapArray(QValueList<QPixmap> arg1); >>>> NOT CONVERTED
		[SmokeMethod("readPixmaps(const QString&, int)")]
		public bool ReadPixmaps(string datafilenamepattern, int framecount) {
			return ProxyQCanvasPixmapArray().ReadPixmaps(datafilenamepattern,framecount);
		}
		[SmokeMethod("readPixmaps(const QString&)")]
		public bool ReadPixmaps(string datafilenamepattern) {
			return ProxyQCanvasPixmapArray().ReadPixmaps(datafilenamepattern);
		}
		[SmokeMethod("readCollisionMasks(const QString&)")]
		public bool ReadCollisionMasks(string filenamepattern) {
			return ProxyQCanvasPixmapArray().ReadCollisionMasks(filenamepattern);
		}
		[SmokeMethod("operator!()")]
		public static bool operator!(QCanvasPixmapArray lhs) {
			return StaticQCanvasPixmapArray().op_not(lhs);
		}
		[SmokeMethod("isValid() const")]
		public bool IsValid() {
			return ProxyQCanvasPixmapArray().IsValid();
		}
		[SmokeMethod("image(int) const")]
		public QCanvasPixmap Image(int i) {
			return ProxyQCanvasPixmapArray().Image(i);
		}
		[SmokeMethod("setImage(int, QCanvasPixmap*)")]
		public void SetImage(int i, QCanvasPixmap p) {
			ProxyQCanvasPixmapArray().SetImage(i,p);
		}
		[SmokeMethod("count() const")]
		public uint Count() {
			return ProxyQCanvasPixmapArray().Count();
		}
		~QCanvasPixmapArray() {
			DisposeQCanvasPixmapArray();
		}
		public void Dispose() {
			DisposeQCanvasPixmapArray();
		}
		private void DisposeQCanvasPixmapArray() {
			ProxyQCanvasPixmapArray().DisposeQCanvasPixmapArray();
		}
	}
}
