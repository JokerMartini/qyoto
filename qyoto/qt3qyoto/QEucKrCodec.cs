//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	[SmokeClass("QEucKrCodec")]
	public class QEucKrCodec : QTextCodec, IDisposable {
 		protected QEucKrCodec(Type dummy) : base((Type) null) {}
		interface IQEucKrCodecProxy {
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QEucKrCodec), this);
			_interceptor = (QEucKrCodec) realProxy.GetTransparentProxy();
		}
		private QEucKrCodec ProxyQEucKrCodec() {
			return (QEucKrCodec) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QEucKrCodec() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQEucKrCodecProxy), null);
			_staticInterceptor = (IQEucKrCodecProxy) realProxy.GetTransparentProxy();
		}
		private static IQEucKrCodecProxy StaticQEucKrCodec() {
			return (IQEucKrCodecProxy) _staticInterceptor;
		}

		[SmokeMethod("mibEnum() const")]
		public new virtual int MibEnum() {
			return ProxyQEucKrCodec().MibEnum();
		}
		[SmokeMethod("name() const")]
		public new string Name() {
			return ProxyQEucKrCodec().Name();
		}
		[SmokeMethod("mimeName() const")]
		public new string MimeName() {
			return ProxyQEucKrCodec().MimeName();
		}
		[SmokeMethod("makeDecoder() const")]
		public new QTextDecoder MakeDecoder() {
			return ProxyQEucKrCodec().MakeDecoder();
		}
		[SmokeMethod("fromUnicode(const QString&, int&) const")]
		public new string FromUnicode(string uc, out int lenInOut) {
			return ProxyQEucKrCodec().FromUnicode(uc,out lenInOut);
		}
		[SmokeMethod("toUnicode(const char*, int) const")]
		public new string ToUnicode(string chars, int len) {
			return ProxyQEucKrCodec().ToUnicode(chars,len);
		}
		[SmokeMethod("heuristicContentMatch(const char*, int) const")]
		public new int HeuristicContentMatch(string chars, int len) {
			return ProxyQEucKrCodec().HeuristicContentMatch(chars,len);
		}
		[SmokeMethod("heuristicNameMatch(const char*) const")]
		public new int HeuristicNameMatch(string hint) {
			return ProxyQEucKrCodec().HeuristicNameMatch(hint);
		}
		public QEucKrCodec() : this((Type) null) {
			CreateProxy();
			NewQEucKrCodec();
		}
		[SmokeMethod("QEucKrCodec()")]
		private void NewQEucKrCodec() {
			ProxyQEucKrCodec().NewQEucKrCodec();
		}
		~QEucKrCodec() {
			DisposeQEucKrCodec();
		}
		public new void Dispose() {
			DisposeQEucKrCodec();
		}
		private void DisposeQEucKrCodec() {
			ProxyQEucKrCodec().DisposeQEucKrCodec();
		}
	}
}
