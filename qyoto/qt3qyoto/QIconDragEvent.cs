//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QIconDragEvent : QEvent, IDisposable {
 		protected QIconDragEvent(Type dummy) : base((Type) null) {}
		interface IQIconDragEventProxy {
		}

		protected void CreateQIconDragEventProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QIconDragEvent), this);
			_interceptor = (QIconDragEvent) realProxy.GetTransparentProxy();
		}
		private QIconDragEvent ProxyQIconDragEvent() {
			return (QIconDragEvent) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QIconDragEvent() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQIconDragEventProxy), null);
			_staticInterceptor = (IQIconDragEventProxy) realProxy.GetTransparentProxy();
		}
		private static IQIconDragEventProxy StaticQIconDragEvent() {
			return (IQIconDragEventProxy) _staticInterceptor;
		}

		public QIconDragEvent() : this((Type) null) {
			CreateQIconDragEventProxy();
			NewQIconDragEvent();
		}
		private void NewQIconDragEvent() {
			ProxyQIconDragEvent().NewQIconDragEvent();
		}
		public bool IsAccepted() {
			return ProxyQIconDragEvent().IsAccepted();
		}
		public void Accept() {
			ProxyQIconDragEvent().Accept();
		}
		public void Ignore() {
			ProxyQIconDragEvent().Ignore();
		}
		~QIconDragEvent() {
			ProxyQIconDragEvent().Dispose();
		}
		public new void Dispose() {
			ProxyQIconDragEvent().Dispose();
		}
	}
}
