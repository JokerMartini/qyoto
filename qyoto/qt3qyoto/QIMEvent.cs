//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QIMEvent : QEvent, IDisposable {
 		protected QIMEvent(Type dummy) : base((Type) null) {}
		interface IQIMEventProxy {
		}

		protected void CreateQIMEventProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QIMEvent), this);
			_interceptor = (QIMEvent) realProxy.GetTransparentProxy();
		}
		private QIMEvent ProxyQIMEvent() {
			return (QIMEvent) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QIMEvent() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQIMEventProxy), null);
			_staticInterceptor = (IQIMEventProxy) realProxy.GetTransparentProxy();
		}
		private static IQIMEventProxy StaticQIMEvent() {
			return (IQIMEventProxy) _staticInterceptor;
		}

		public QIMEvent(int type, string text, int cursorPosition) : this((Type) null) {
			CreateQIMEventProxy();
			NewQIMEvent(type,text,cursorPosition);
		}
		private void NewQIMEvent(int type, string text, int cursorPosition) {
			ProxyQIMEvent().NewQIMEvent(type,text,cursorPosition);
		}
		public string Text() {
			return ProxyQIMEvent().Text();
		}
		public int CursorPos() {
			return ProxyQIMEvent().CursorPos();
		}
		public bool IsAccepted() {
			return ProxyQIMEvent().IsAccepted();
		}
		public void Accept() {
			ProxyQIMEvent().Accept();
		}
		public void Ignore() {
			ProxyQIMEvent().Ignore();
		}
		public int SelectionLength() {
			return ProxyQIMEvent().SelectionLength();
		}
		~QIMEvent() {
			ProxyQIMEvent().Dispose();
		}
		public new void Dispose() {
			ProxyQIMEvent().Dispose();
		}
	}
}
