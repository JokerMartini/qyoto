//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Collections;
	using System.Text;

	/// See <see cref="IQProcessSignals"></see> for signals emitted by QProcess
	public class QProcess : QObject, IDisposable {
 		protected QProcess(Type dummy) : base((Type) null) {}
		interface IQProcessProxy {
			string Tr(string arg1, string arg2);
			string Tr(string arg1);
			string TrUtf8(string arg1, string arg2);
			string TrUtf8(string arg1);
		}

		protected void CreateQProcessProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QProcess), this);
			_interceptor = (QProcess) realProxy.GetTransparentProxy();
		}
		private QProcess ProxyQProcess() {
			return (QProcess) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QProcess() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQProcessProxy), null);
			_staticInterceptor = (IQProcessProxy) realProxy.GetTransparentProxy();
		}
		private static IQProcessProxy StaticQProcess() {
			return (IQProcessProxy) _staticInterceptor;
		}

		enum E_Communication {
			Stdin = 0x01,
			Stdout = 0x02,
			Stderr = 0x04,
			DupStderr = 0x08,
		}
		public new virtual QMetaObject MetaObject() {
			return ProxyQProcess().MetaObject();
		}
		public new virtual string ClassName() {
			return ProxyQProcess().ClassName();
		}
		public QProcess(QObject parent, string name) : this((Type) null) {
			CreateQProcessProxy();
			NewQProcess(parent,name);
		}
		private void NewQProcess(QObject parent, string name) {
			ProxyQProcess().NewQProcess(parent,name);
		}
		public QProcess(QObject parent) : this((Type) null) {
			CreateQProcessProxy();
			NewQProcess(parent);
		}
		private void NewQProcess(QObject parent) {
			ProxyQProcess().NewQProcess(parent);
		}
		public QProcess() : this((Type) null) {
			CreateQProcessProxy();
			NewQProcess();
		}
		private void NewQProcess() {
			ProxyQProcess().NewQProcess();
		}
		public QProcess(string arg0, QObject parent, string name) : this((Type) null) {
			CreateQProcessProxy();
			NewQProcess(arg0,parent,name);
		}
		private void NewQProcess(string arg0, QObject parent, string name) {
			ProxyQProcess().NewQProcess(arg0,parent,name);
		}
		public QProcess(string arg0, QObject parent) : this((Type) null) {
			CreateQProcessProxy();
			NewQProcess(arg0,parent);
		}
		private void NewQProcess(string arg0, QObject parent) {
			ProxyQProcess().NewQProcess(arg0,parent);
		}
		public QProcess(string arg0) : this((Type) null) {
			CreateQProcessProxy();
			NewQProcess(arg0);
		}
		private void NewQProcess(string arg0) {
			ProxyQProcess().NewQProcess(arg0);
		}
		public QProcess(string[] args, QObject parent, string name) : this((Type) null) {
			CreateQProcessProxy();
			NewQProcess(args,parent,name);
		}
		private void NewQProcess(string[] args, QObject parent, string name) {
			ProxyQProcess().NewQProcess(args,parent,name);
		}
		public QProcess(string[] args, QObject parent) : this((Type) null) {
			CreateQProcessProxy();
			NewQProcess(args,parent);
		}
		private void NewQProcess(string[] args, QObject parent) {
			ProxyQProcess().NewQProcess(args,parent);
		}
		public QProcess(string[] args) : this((Type) null) {
			CreateQProcessProxy();
			NewQProcess(args);
		}
		private void NewQProcess(string[] args) {
			ProxyQProcess().NewQProcess(args);
		}
		public ArrayList Arguments() {
			return ProxyQProcess().Arguments();
		}
		public void ClearArguments() {
			ProxyQProcess().ClearArguments();
		}
		public virtual void SetArguments(string[] args) {
			ProxyQProcess().SetArguments(args);
		}
		public virtual void AddArgument(string arg) {
			ProxyQProcess().AddArgument(arg);
		}
		public QDir WorkingDirectory() {
			return ProxyQProcess().WorkingDirectory();
		}
		public virtual void SetWorkingDirectory(QDir dir) {
			ProxyQProcess().SetWorkingDirectory(dir);
		}
		public void SetCommunication(int c) {
			ProxyQProcess().SetCommunication(c);
		}
		public int Communication() {
			return ProxyQProcess().Communication();
		}
		public virtual bool Start(string[] arg1) {
			return ProxyQProcess().Start(arg1);
		}
		public virtual bool Start() {
			return ProxyQProcess().Start();
		}
		public virtual bool Launch(string buf, string[] arg2) {
			return ProxyQProcess().Launch(buf,arg2);
		}
		public virtual bool Launch(string buf) {
			return ProxyQProcess().Launch(buf);
		}
		public virtual bool Launch(byte[] buf, string[] arg2) {
			return ProxyQProcess().Launch(buf,arg2);
		}
		public virtual bool Launch(byte[] buf) {
			return ProxyQProcess().Launch(buf);
		}
		public bool IsRunning() {
			return ProxyQProcess().IsRunning();
		}
		public bool NormalExit() {
			return ProxyQProcess().NormalExit();
		}
		public int ExitStatus() {
			return ProxyQProcess().ExitStatus();
		}
		public virtual byte[] ReadStdout() {
			return ProxyQProcess().ReadStdout();
		}
		public virtual byte[] ReadStderr() {
			return ProxyQProcess().ReadStderr();
		}
		public bool CanReadLineStdout() {
			return ProxyQProcess().CanReadLineStdout();
		}
		public bool CanReadLineStderr() {
			return ProxyQProcess().CanReadLineStderr();
		}
		public virtual string ReadLineStdout() {
			return ProxyQProcess().ReadLineStdout();
		}
		public virtual string ReadLineStderr() {
			return ProxyQProcess().ReadLineStderr();
		}
		public long ProcessIdentifier() {
			return ProxyQProcess().ProcessIdentifier();
		}
		public void FlushStdin() {
			ProxyQProcess().FlushStdin();
		}
		public void TryTerminate() {
			ProxyQProcess().TryTerminate();
		}
		public void Kill() {
			ProxyQProcess().Kill();
		}
		public virtual void WriteToStdin(byte[] buf) {
			ProxyQProcess().WriteToStdin(buf);
		}
		public virtual void WriteToStdin(string buf) {
			ProxyQProcess().WriteToStdin(buf);
		}
		public virtual void CloseStdin() {
			ProxyQProcess().CloseStdin();
		}
		public static new string Tr(string arg1, string arg2) {
			return StaticQProcess().Tr(arg1,arg2);
		}
		public static new string Tr(string arg1) {
			return StaticQProcess().Tr(arg1);
		}
		public static new string TrUtf8(string arg1, string arg2) {
			return StaticQProcess().TrUtf8(arg1,arg2);
		}
		public static new string TrUtf8(string arg1) {
			return StaticQProcess().TrUtf8(arg1);
		}
		protected new void ConnectNotify(string signal) {
			ProxyQProcess().ConnectNotify(signal);
		}
		protected new void DisconnectNotify(string signal) {
			ProxyQProcess().DisconnectNotify(signal);
		}
		~QProcess() {
			ProxyQProcess().Dispose();
		}
		public new void Dispose() {
			ProxyQProcess().Dispose();
		}
	}

	public interface IQProcessSignals {
		void ReadyReadStdout();
		void ReadyReadStderr();
		void ProcessExited();
		void WroteToStdin();
		void LaunchFinished();
	}
}
