//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QIntBucket : QBaseBucket, IDisposable {
 		protected QIntBucket(Type dummy) : base((Type) null) {}
		interface IQIntBucketProxy {
		}

		protected void CreateQIntBucketProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QIntBucket), this);
			_interceptor = (QIntBucket) realProxy.GetTransparentProxy();
		}
		private QIntBucket ProxyQIntBucket() {
			return (QIntBucket) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QIntBucket() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQIntBucketProxy), null);
			_staticInterceptor = (IQIntBucketProxy) realProxy.GetTransparentProxy();
		}
		private static IQIntBucketProxy StaticQIntBucket() {
			return (IQIntBucketProxy) _staticInterceptor;
		}

		// QIntBucket* QIntBucket(long arg1,QPtrCollection::Item arg2,QBaseBucket* arg3); >>>> NOT CONVERTED
		[SmokeMethod("getKey() const")]
		public long GetKey() {
			return ProxyQIntBucket().GetKey();
		}
		~QIntBucket() {
			DisposeQIntBucket();
		}
		public void Dispose() {
			DisposeQIntBucket();
		}
		private void DisposeQIntBucket() {
			ProxyQIntBucket().DisposeQIntBucket();
		}
	}
}
