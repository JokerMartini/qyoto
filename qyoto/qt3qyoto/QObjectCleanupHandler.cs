//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	[SmokeClass("QObjectCleanupHandler")]
	public class QObjectCleanupHandler : QObject, IDisposable {
 		protected QObjectCleanupHandler(Type dummy) : base((Type) null) {}
		interface IQObjectCleanupHandlerProxy {
			string Tr(string arg1, string arg2);
			string Tr(string arg1);
			string TrUtf8(string arg1, string arg2);
			string TrUtf8(string arg1);
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QObjectCleanupHandler), this);
			_interceptor = (QObjectCleanupHandler) realProxy.GetTransparentProxy();
		}
		private QObjectCleanupHandler ProxyQObjectCleanupHandler() {
			return (QObjectCleanupHandler) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QObjectCleanupHandler() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQObjectCleanupHandlerProxy), null);
			_staticInterceptor = (IQObjectCleanupHandlerProxy) realProxy.GetTransparentProxy();
		}
		private static IQObjectCleanupHandlerProxy StaticQObjectCleanupHandler() {
			return (IQObjectCleanupHandlerProxy) _staticInterceptor;
		}

		[SmokeMethod("metaObject() const")]
		public new virtual QMetaObject MetaObject() {
			return ProxyQObjectCleanupHandler().MetaObject();
		}
		[SmokeMethod("className() const")]
		public new virtual string ClassName() {
			return ProxyQObjectCleanupHandler().ClassName();
		}
		public QObjectCleanupHandler() : this((Type) null) {
			CreateProxy();
			CreateSignalProxy();
			NewQObjectCleanupHandler();
		}
		[SmokeMethod("QObjectCleanupHandler()")]
		private void NewQObjectCleanupHandler() {
			ProxyQObjectCleanupHandler().NewQObjectCleanupHandler();
		}
		[SmokeMethod("add(QObject*)")]
		public QObject Add(QObject arg1) {
			return ProxyQObjectCleanupHandler().Add(arg1);
		}
		[SmokeMethod("remove(QObject*)")]
		public void Remove(QObject arg1) {
			ProxyQObjectCleanupHandler().Remove(arg1);
		}
		[SmokeMethod("isEmpty() const")]
		public bool IsEmpty() {
			return ProxyQObjectCleanupHandler().IsEmpty();
		}
		[SmokeMethod("clear()")]
		public void Clear() {
			ProxyQObjectCleanupHandler().Clear();
		}
		[SmokeMethod("tr(const char*, const char*)")]
		public static new string Tr(string arg1, string arg2) {
			return StaticQObjectCleanupHandler().Tr(arg1,arg2);
		}
		[SmokeMethod("tr(const char*)")]
		public static new string Tr(string arg1) {
			return StaticQObjectCleanupHandler().Tr(arg1);
		}
		[SmokeMethod("trUtf8(const char*, const char*)")]
		public static new string TrUtf8(string arg1, string arg2) {
			return StaticQObjectCleanupHandler().TrUtf8(arg1,arg2);
		}
		[SmokeMethod("trUtf8(const char*)")]
		public static new string TrUtf8(string arg1) {
			return StaticQObjectCleanupHandler().TrUtf8(arg1);
		}
		~QObjectCleanupHandler() {
			DisposeQObjectCleanupHandler();
		}
		public new void Dispose() {
			DisposeQObjectCleanupHandler();
		}
		private void DisposeQObjectCleanupHandler() {
			ProxyQObjectCleanupHandler().DisposeQObjectCleanupHandler();
		}
		protected new void CreateSignalProxy() {
			SignalInvocation realProxy = new SignalInvocation(typeof(IQObjectCleanupHandlerSignals), this);
			Q_EMIT = (IQObjectCleanupHandlerSignals) realProxy.GetTransparentProxy();
		}
		protected new IQObjectCleanupHandlerSignals Emit() {
			return (IQObjectCleanupHandlerSignals) Q_EMIT;
		}
	}

	public interface IQObjectCleanupHandlerSignals : IQObjectSignals {
	}
}
