//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QHebrewCodec : QTextCodec, IDisposable {
 		protected QHebrewCodec(Type dummy) : base((Type) null) {}
		interface IQHebrewCodecProxy {
		}

		protected void CreateQHebrewCodecProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QHebrewCodec), this);
			_interceptor = (QHebrewCodec) realProxy.GetTransparentProxy();
		}
		private QHebrewCodec ProxyQHebrewCodec() {
			return (QHebrewCodec) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QHebrewCodec() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQHebrewCodecProxy), null);
			_staticInterceptor = (IQHebrewCodecProxy) realProxy.GetTransparentProxy();
		}
		private static IQHebrewCodecProxy StaticQHebrewCodec() {
			return (IQHebrewCodecProxy) _staticInterceptor;
		}

		public new virtual int MibEnum() {
			return ProxyQHebrewCodec().MibEnum();
		}
		public new string Name() {
			return ProxyQHebrewCodec().Name();
		}
		public new string MimeName() {
			return ProxyQHebrewCodec().MimeName();
		}
		public new string FromUnicode(string uc, out int lenInOut) {
			return ProxyQHebrewCodec().FromUnicode(uc,out lenInOut);
		}
		public new string ToUnicode(string chars, int len) {
			return ProxyQHebrewCodec().ToUnicode(chars,len);
		}
		public new int HeuristicContentMatch(string chars, int len) {
			return ProxyQHebrewCodec().HeuristicContentMatch(chars,len);
		}
		public QHebrewCodec() : this((Type) null) {
			CreateQHebrewCodecProxy();
			NewQHebrewCodec();
		}
		private void NewQHebrewCodec() {
			ProxyQHebrewCodec().NewQHebrewCodec();
		}
		~QHebrewCodec() {
			ProxyQHebrewCodec().Dispose();
		}
		public new void Dispose() {
			ProxyQHebrewCodec().Dispose();
		}
	}
}
