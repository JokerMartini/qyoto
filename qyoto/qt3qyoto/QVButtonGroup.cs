//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	[SmokeClass("QVButtonGroup")]
	public class QVButtonGroup : QButtonGroup, IDisposable {
 		protected QVButtonGroup(Type dummy) : base((Type) null) {}
		interface IQVButtonGroupProxy {
			string Tr(string arg1, string arg2);
			string Tr(string arg1);
			string TrUtf8(string arg1, string arg2);
			string TrUtf8(string arg1);
		}

		protected void CreateQVButtonGroupProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QVButtonGroup), this);
			_interceptor = (QVButtonGroup) realProxy.GetTransparentProxy();
		}
		private QVButtonGroup ProxyQVButtonGroup() {
			return (QVButtonGroup) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QVButtonGroup() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQVButtonGroupProxy), null);
			_staticInterceptor = (IQVButtonGroupProxy) realProxy.GetTransparentProxy();
		}
		private static IQVButtonGroupProxy StaticQVButtonGroup() {
			return (IQVButtonGroupProxy) _staticInterceptor;
		}

		[SmokeMethod("metaObject() const")]
		public new virtual QMetaObject MetaObject() {
			return ProxyQVButtonGroup().MetaObject();
		}
		[SmokeMethod("className() const")]
		public new virtual string ClassName() {
			return ProxyQVButtonGroup().ClassName();
		}
		public QVButtonGroup(QWidget parent, string name) : this((Type) null) {
			CreateQVButtonGroupProxy();
			CreateQVButtonGroupSignalProxy();
			NewQVButtonGroup(parent,name);
		}
		[SmokeMethod("QVButtonGroup(QWidget*, const char*)")]
		private void NewQVButtonGroup(QWidget parent, string name) {
			ProxyQVButtonGroup().NewQVButtonGroup(parent,name);
		}
		public QVButtonGroup(QWidget parent) : this((Type) null) {
			CreateQVButtonGroupProxy();
			CreateQVButtonGroupSignalProxy();
			NewQVButtonGroup(parent);
		}
		[SmokeMethod("QVButtonGroup(QWidget*)")]
		private void NewQVButtonGroup(QWidget parent) {
			ProxyQVButtonGroup().NewQVButtonGroup(parent);
		}
		public QVButtonGroup() : this((Type) null) {
			CreateQVButtonGroupProxy();
			CreateQVButtonGroupSignalProxy();
			NewQVButtonGroup();
		}
		[SmokeMethod("QVButtonGroup()")]
		private void NewQVButtonGroup() {
			ProxyQVButtonGroup().NewQVButtonGroup();
		}
		public QVButtonGroup(string title, QWidget parent, string name) : this((Type) null) {
			CreateQVButtonGroupProxy();
			CreateQVButtonGroupSignalProxy();
			NewQVButtonGroup(title,parent,name);
		}
		[SmokeMethod("QVButtonGroup(const QString&, QWidget*, const char*)")]
		private void NewQVButtonGroup(string title, QWidget parent, string name) {
			ProxyQVButtonGroup().NewQVButtonGroup(title,parent,name);
		}
		public QVButtonGroup(string title, QWidget parent) : this((Type) null) {
			CreateQVButtonGroupProxy();
			CreateQVButtonGroupSignalProxy();
			NewQVButtonGroup(title,parent);
		}
		[SmokeMethod("QVButtonGroup(const QString&, QWidget*)")]
		private void NewQVButtonGroup(string title, QWidget parent) {
			ProxyQVButtonGroup().NewQVButtonGroup(title,parent);
		}
		public QVButtonGroup(string title) : this((Type) null) {
			CreateQVButtonGroupProxy();
			CreateQVButtonGroupSignalProxy();
			NewQVButtonGroup(title);
		}
		[SmokeMethod("QVButtonGroup(const QString&)")]
		private void NewQVButtonGroup(string title) {
			ProxyQVButtonGroup().NewQVButtonGroup(title);
		}
		[SmokeMethod("tr(const char*, const char*)")]
		public static new string Tr(string arg1, string arg2) {
			return StaticQVButtonGroup().Tr(arg1,arg2);
		}
		[SmokeMethod("tr(const char*)")]
		public static new string Tr(string arg1) {
			return StaticQVButtonGroup().Tr(arg1);
		}
		[SmokeMethod("trUtf8(const char*, const char*)")]
		public static new string TrUtf8(string arg1, string arg2) {
			return StaticQVButtonGroup().TrUtf8(arg1,arg2);
		}
		[SmokeMethod("trUtf8(const char*)")]
		public static new string TrUtf8(string arg1) {
			return StaticQVButtonGroup().TrUtf8(arg1);
		}
		~QVButtonGroup() {
			DisposeQVButtonGroup();
		}
		public new void Dispose() {
			DisposeQVButtonGroup();
		}
		private void DisposeQVButtonGroup() {
			ProxyQVButtonGroup().DisposeQVButtonGroup();
		}
		protected void CreateQVButtonGroupSignalProxy() {
			SignalInvocation realProxy = new SignalInvocation(typeof(IQVButtonGroupSignals), this);
			Q_EMIT = (IQVButtonGroupSignals) realProxy.GetTransparentProxy();
		}
		protected new IQVButtonGroupSignals Emit() {
			return (IQVButtonGroupSignals) Q_EMIT;
		}
	}

	public interface IQVButtonGroupSignals : IQButtonGroupSignals {
	}
}
