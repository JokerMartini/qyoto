//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	/// See <see cref="IQMainWindowSignals"></see> for signals emitted by QMainWindow
	public class QMainWindow : QWidget, IDisposable {
 		protected QMainWindow(Type dummy) : base((Type) null) {}
		interface IQMainWindowProxy {
			string Tr(string arg1, string arg2);
			string Tr(string arg1);
			string TrUtf8(string arg1, string arg2);
			string TrUtf8(string arg1);
		}

		protected void CreateQMainWindowProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QMainWindow), this);
			_interceptor = (QMainWindow) realProxy.GetTransparentProxy();
		}
		private QMainWindow ProxyQMainWindow() {
			return (QMainWindow) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QMainWindow() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQMainWindowProxy), null);
			_staticInterceptor = (IQMainWindowProxy) realProxy.GetTransparentProxy();
		}
		private static IQMainWindowProxy StaticQMainWindow() {
			return (IQMainWindowProxy) _staticInterceptor;
		}

		enum E_DockWindows {
			OnlyToolBars = 0,
			NoToolBars = 1,
			AllDockWindows = 2,
		}
		public new virtual QMetaObject MetaObject() {
			return ProxyQMainWindow().MetaObject();
		}
		public new virtual string ClassName() {
			return ProxyQMainWindow().ClassName();
		}
		public QMainWindow(QWidget parent, string name, int f) : this((Type) null) {
			CreateQMainWindowProxy();
			NewQMainWindow(parent,name,f);
		}
		private void NewQMainWindow(QWidget parent, string name, int f) {
			ProxyQMainWindow().NewQMainWindow(parent,name,f);
		}
		public QMainWindow(QWidget parent, string name) : this((Type) null) {
			CreateQMainWindowProxy();
			NewQMainWindow(parent,name);
		}
		private void NewQMainWindow(QWidget parent, string name) {
			ProxyQMainWindow().NewQMainWindow(parent,name);
		}
		public QMainWindow(QWidget parent) : this((Type) null) {
			CreateQMainWindowProxy();
			NewQMainWindow(parent);
		}
		private void NewQMainWindow(QWidget parent) {
			ProxyQMainWindow().NewQMainWindow(parent);
		}
		public QMainWindow() : this((Type) null) {
			CreateQMainWindowProxy();
			NewQMainWindow();
		}
		private void NewQMainWindow() {
			ProxyQMainWindow().NewQMainWindow();
		}
		public QMenuBar MenuBar() {
			return ProxyQMainWindow().MenuBar();
		}
		public QStatusBar StatusBar() {
			return ProxyQMainWindow().StatusBar();
		}
		public QToolTipGroup ToolTipGroup() {
			return ProxyQMainWindow().ToolTipGroup();
		}
		public virtual void SetCentralWidget(QWidget arg1) {
			ProxyQMainWindow().SetCentralWidget(arg1);
		}
		public QWidget CentralWidget() {
			return ProxyQMainWindow().CentralWidget();
		}
		public virtual void SetDockEnabled(int dock, bool enable) {
			ProxyQMainWindow().SetDockEnabled(dock,enable);
		}
		public bool IsDockEnabled(int dock) {
			return ProxyQMainWindow().IsDockEnabled(dock);
		}
		public bool IsDockEnabled(QDockArea area) {
			return ProxyQMainWindow().IsDockEnabled(area);
		}
		public virtual void SetDockEnabled(QDockWindow tb, int dock, bool enable) {
			ProxyQMainWindow().SetDockEnabled(tb,dock,enable);
		}
		public bool IsDockEnabled(QDockWindow tb, int dock) {
			return ProxyQMainWindow().IsDockEnabled(tb,dock);
		}
		public bool IsDockEnabled(QDockWindow tb, QDockArea area) {
			return ProxyQMainWindow().IsDockEnabled(tb,area);
		}
		public virtual void AddDockWindow(QDockWindow arg1, int arg2, bool newLine) {
			ProxyQMainWindow().AddDockWindow(arg1,arg2,newLine);
		}
		public virtual void AddDockWindow(QDockWindow arg1, int arg2) {
			ProxyQMainWindow().AddDockWindow(arg1,arg2);
		}
		public virtual void AddDockWindow(QDockWindow arg1) {
			ProxyQMainWindow().AddDockWindow(arg1);
		}
		public virtual void AddDockWindow(QDockWindow arg1, string label, int arg3, bool newLine) {
			ProxyQMainWindow().AddDockWindow(arg1,label,arg3,newLine);
		}
		public virtual void AddDockWindow(QDockWindow arg1, string label, int arg3) {
			ProxyQMainWindow().AddDockWindow(arg1,label,arg3);
		}
		public virtual void AddDockWindow(QDockWindow arg1, string label) {
			ProxyQMainWindow().AddDockWindow(arg1,label);
		}
		public virtual void MoveDockWindow(QDockWindow arg1, int arg2) {
			ProxyQMainWindow().MoveDockWindow(arg1,arg2);
		}
		public virtual void MoveDockWindow(QDockWindow arg1) {
			ProxyQMainWindow().MoveDockWindow(arg1);
		}
		public virtual void MoveDockWindow(QDockWindow arg1, int arg2, bool nl, int index, int extraOffset) {
			ProxyQMainWindow().MoveDockWindow(arg1,arg2,nl,index,extraOffset);
		}
		public virtual void MoveDockWindow(QDockWindow arg1, int arg2, bool nl, int index) {
			ProxyQMainWindow().MoveDockWindow(arg1,arg2,nl,index);
		}
		public virtual void RemoveDockWindow(QDockWindow arg1) {
			ProxyQMainWindow().RemoveDockWindow(arg1);
		}
		public new void Show() {
			ProxyQMainWindow().Show();
		}
		public new void Hide() {
			ProxyQMainWindow().Hide();
		}
		public new QSize SizeHint() {
			return ProxyQMainWindow().SizeHint();
		}
		public new QSize MinimumSizeHint() {
			return ProxyQMainWindow().MinimumSizeHint();
		}
		public bool RightJustification() {
			return ProxyQMainWindow().RightJustification();
		}
		public bool UsesBigPixmaps() {
			return ProxyQMainWindow().UsesBigPixmaps();
		}
		public bool UsesTextLabel() {
			return ProxyQMainWindow().UsesTextLabel();
		}
		public bool DockWindowsMovable() {
			return ProxyQMainWindow().DockWindowsMovable();
		}
		public bool OpaqueMoving() {
			return ProxyQMainWindow().OpaqueMoving();
		}
		public new bool EventFilter(QObject arg1, QEvent arg2) {
			return ProxyQMainWindow().EventFilter(arg1,arg2);
		}
		public bool GetLocation(QDockWindow tb, int dock, out int index, bool nl, out int extraOffset) {
			return ProxyQMainWindow().GetLocation(tb,dock,out index,nl,out extraOffset);
		}
		// QPtrList<QDockWindow> dockWindows(Qt::Dock arg1); >>>> NOT CONVERTED
		// QPtrList<QDockWindow> dockWindows(); >>>> NOT CONVERTED
		public void LineUpDockWindows(bool keepNewLines) {
			ProxyQMainWindow().LineUpDockWindows(keepNewLines);
		}
		public void LineUpDockWindows() {
			ProxyQMainWindow().LineUpDockWindows();
		}
		public bool IsDockMenuEnabled() {
			return ProxyQMainWindow().IsDockMenuEnabled();
		}
		public bool HasDockWindow(QDockWindow dw) {
			return ProxyQMainWindow().HasDockWindow(dw);
		}
		public void AddToolBar(QDockWindow arg1, int arg2, bool newLine) {
			ProxyQMainWindow().AddToolBar(arg1,arg2,newLine);
		}
		public void AddToolBar(QDockWindow arg1, int arg2) {
			ProxyQMainWindow().AddToolBar(arg1,arg2);
		}
		public void AddToolBar(QDockWindow arg1) {
			ProxyQMainWindow().AddToolBar(arg1);
		}
		public void AddToolBar(QDockWindow arg1, string label, int arg3, bool newLine) {
			ProxyQMainWindow().AddToolBar(arg1,label,arg3,newLine);
		}
		public void AddToolBar(QDockWindow arg1, string label, int arg3) {
			ProxyQMainWindow().AddToolBar(arg1,label,arg3);
		}
		public void AddToolBar(QDockWindow arg1, string label) {
			ProxyQMainWindow().AddToolBar(arg1,label);
		}
		public void MoveToolBar(QDockWindow arg1, int arg2) {
			ProxyQMainWindow().MoveToolBar(arg1,arg2);
		}
		public void MoveToolBar(QDockWindow arg1) {
			ProxyQMainWindow().MoveToolBar(arg1);
		}
		public void MoveToolBar(QDockWindow arg1, int arg2, bool nl, int index, int extraOffset) {
			ProxyQMainWindow().MoveToolBar(arg1,arg2,nl,index,extraOffset);
		}
		public void MoveToolBar(QDockWindow arg1, int arg2, bool nl, int index) {
			ProxyQMainWindow().MoveToolBar(arg1,arg2,nl,index);
		}
		public void RemoveToolBar(QDockWindow arg1) {
			ProxyQMainWindow().RemoveToolBar(arg1);
		}
		public bool ToolBarsMovable() {
			return ProxyQMainWindow().ToolBarsMovable();
		}
		// QPtrList<QToolBar> toolBars(Qt::Dock arg1); >>>> NOT CONVERTED
		public void LineUpToolBars(bool keepNewLines) {
			ProxyQMainWindow().LineUpToolBars(keepNewLines);
		}
		public void LineUpToolBars() {
			ProxyQMainWindow().LineUpToolBars();
		}
		public virtual QDockArea DockingArea(QPoint p) {
			return ProxyQMainWindow().DockingArea(p);
		}
		public QDockArea LeftDock() {
			return ProxyQMainWindow().LeftDock();
		}
		public QDockArea RightDock() {
			return ProxyQMainWindow().RightDock();
		}
		public QDockArea TopDock() {
			return ProxyQMainWindow().TopDock();
		}
		public QDockArea BottomDock() {
			return ProxyQMainWindow().BottomDock();
		}
		public virtual bool IsCustomizable() {
			return ProxyQMainWindow().IsCustomizable();
		}
		public bool Appropriate(QDockWindow dw) {
			return ProxyQMainWindow().Appropriate(dw);
		}
		public QPopupMenu CreateDockWindowMenu(int dockWindows) {
			return ProxyQMainWindow().CreateDockWindowMenu(dockWindows);
		}
		public QPopupMenu CreateDockWindowMenu() {
			return ProxyQMainWindow().CreateDockWindowMenu();
		}
		public virtual void SetRightJustification(bool arg1) {
			ProxyQMainWindow().SetRightJustification(arg1);
		}
		public virtual void SetUsesBigPixmaps(bool arg1) {
			ProxyQMainWindow().SetUsesBigPixmaps(arg1);
		}
		public virtual void SetUsesTextLabel(bool arg1) {
			ProxyQMainWindow().SetUsesTextLabel(arg1);
		}
		public virtual void SetDockWindowsMovable(bool arg1) {
			ProxyQMainWindow().SetDockWindowsMovable(arg1);
		}
		public virtual void SetOpaqueMoving(bool arg1) {
			ProxyQMainWindow().SetOpaqueMoving(arg1);
		}
		public virtual void SetDockMenuEnabled(bool arg1) {
			ProxyQMainWindow().SetDockMenuEnabled(arg1);
		}
		public virtual void WhatsThis() {
			ProxyQMainWindow().WhatsThis();
		}
		public virtual void SetAppropriate(QDockWindow dw, bool a) {
			ProxyQMainWindow().SetAppropriate(dw,a);
		}
		public virtual void Customize() {
			ProxyQMainWindow().Customize();
		}
		public void SetToolBarsMovable(bool arg1) {
			ProxyQMainWindow().SetToolBarsMovable(arg1);
		}
		public static new string Tr(string arg1, string arg2) {
			return StaticQMainWindow().Tr(arg1,arg2);
		}
		public static new string Tr(string arg1) {
			return StaticQMainWindow().Tr(arg1);
		}
		public static new string TrUtf8(string arg1, string arg2) {
			return StaticQMainWindow().TrUtf8(arg1,arg2);
		}
		public static new string TrUtf8(string arg1) {
			return StaticQMainWindow().TrUtf8(arg1);
		}
		protected new void PaintEvent(QPaintEvent arg1) {
			ProxyQMainWindow().PaintEvent(arg1);
		}
		protected new void ChildEvent(QChildEvent arg1) {
			ProxyQMainWindow().ChildEvent(arg1);
		}
		public new bool Event(QEvent arg1) {
			return ProxyQMainWindow().Event(arg1);
		}
		public new void StyleChange(QStyle arg1) {
			ProxyQMainWindow().StyleChange(arg1);
		}
		protected virtual void SetUpLayout() {
			ProxyQMainWindow().SetUpLayout();
		}
		protected virtual bool ShowDockMenu(QPoint globalPos) {
			return ProxyQMainWindow().ShowDockMenu(globalPos);
		}
		protected void MenuAboutToShow() {
			ProxyQMainWindow().MenuAboutToShow();
		}
		~QMainWindow() {
			ProxyQMainWindow().Dispose();
		}
		public new void Dispose() {
			ProxyQMainWindow().Dispose();
		}
	}

	public interface IQMainWindowSignals {
		void PixmapSizeChanged(bool arg1);
		void UsesTextLabelChanged(bool arg1);
		void DockWindowPositionChanged(QDockWindow arg1);
		void ToolBarPositionChanged(QToolBar arg1);
	}
}
