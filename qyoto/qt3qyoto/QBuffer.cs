//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QBuffer : QIODevice, IDisposable {
 		protected QBuffer(Type dummy) : base((Type) null) {}
		interface IQBufferProxy {
		}

		protected void CreateQBufferProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QBuffer), this);
			_interceptor = (QBuffer) realProxy.GetTransparentProxy();
		}
		private QBuffer ProxyQBuffer() {
			return (QBuffer) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QBuffer() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQBufferProxy), null);
			_staticInterceptor = (IQBufferProxy) realProxy.GetTransparentProxy();
		}
		private static IQBufferProxy StaticQBuffer() {
			return (IQBufferProxy) _staticInterceptor;
		}

		public QBuffer() : this((Type) null) {
			CreateQBufferProxy();
			NewQBuffer();
		}
		private void NewQBuffer() {
			ProxyQBuffer().NewQBuffer();
		}
		public QBuffer(byte[] arg1) : this((Type) null) {
			CreateQBufferProxy();
			NewQBuffer(arg1);
		}
		private void NewQBuffer(byte[] arg1) {
			ProxyQBuffer().NewQBuffer(arg1);
		}
		public byte[] Buffer() {
			return ProxyQBuffer().Buffer();
		}
		public bool SetBuffer(byte[] arg1) {
			return ProxyQBuffer().SetBuffer(arg1);
		}
		public new bool Open(int arg1) {
			return ProxyQBuffer().Open(arg1);
		}
		public new void Close() {
			ProxyQBuffer().Close();
		}
		public new void Flush() {
			ProxyQBuffer().Flush();
		}
		public new ulong Size() {
			return ProxyQBuffer().Size();
		}
		public new ulong At() {
			return ProxyQBuffer().At();
		}
		public new bool At(ulong arg1) {
			return ProxyQBuffer().At(arg1);
		}
		public new long ReadBlock(string p, long arg2) {
			return ProxyQBuffer().ReadBlock(p,arg2);
		}
		public new long WriteBlock(string p, long arg2) {
			return ProxyQBuffer().WriteBlock(p,arg2);
		}
		public new long WriteBlock(byte[] data) {
			return ProxyQBuffer().WriteBlock(data);
		}
		public new long ReadLine(string p, long arg2) {
			return ProxyQBuffer().ReadLine(p,arg2);
		}
		public new int Getch() {
			return ProxyQBuffer().Getch();
		}
		public new int Putch(int arg1) {
			return ProxyQBuffer().Putch(arg1);
		}
		public new int Ungetch(int arg1) {
			return ProxyQBuffer().Ungetch(arg1);
		}
		~QBuffer() {
			ProxyQBuffer().Dispose();
		}
		public void Dispose() {
			ProxyQBuffer().Dispose();
		}
	}
}
