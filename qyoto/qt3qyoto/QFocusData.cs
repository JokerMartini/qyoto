//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QFocusData : MarshalByRefObject {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QFocusData(Type dummy) {}
		interface IQFocusDataProxy {
		}

		protected void CreateQFocusDataProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QFocusData), this);
			_interceptor = (QFocusData) realProxy.GetTransparentProxy();
		}
		private QFocusData ProxyQFocusData() {
			return (QFocusData) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QFocusData() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQFocusDataProxy), null);
			_staticInterceptor = (IQFocusDataProxy) realProxy.GetTransparentProxy();
		}
		private static IQFocusDataProxy StaticQFocusData() {
			return (IQFocusDataProxy) _staticInterceptor;
		}

		public QWidget FocusWidget() {
			return ProxyQFocusData().FocusWidget();
		}
		public QWidget Home() {
			return ProxyQFocusData().Home();
		}
		public QWidget Next() {
			return ProxyQFocusData().Next();
		}
		public QWidget Prev() {
			return ProxyQFocusData().Prev();
		}
		public QWidget First() {
			return ProxyQFocusData().First();
		}
		public QWidget Last() {
			return ProxyQFocusData().Last();
		}
		public int Count() {
			return ProxyQFocusData().Count();
		}
	}
}
