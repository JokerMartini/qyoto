//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QCanvasText : QCanvasItem, IDisposable {
 		protected QCanvasText(Type dummy) : base((Type) null) {}
		interface IQCanvasTextProxy {
		}

		protected void CreateQCanvasTextProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QCanvasText), this);
			_interceptor = (QCanvasText) realProxy.GetTransparentProxy();
		}
		private QCanvasText ProxyQCanvasText() {
			return (QCanvasText) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QCanvasText() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQCanvasTextProxy), null);
			_staticInterceptor = (IQCanvasTextProxy) realProxy.GetTransparentProxy();
		}
		private static IQCanvasTextProxy StaticQCanvasText() {
			return (IQCanvasTextProxy) _staticInterceptor;
		}

		public QCanvasText(QCanvas canvas) : this((Type) null) {
			CreateQCanvasTextProxy();
			NewQCanvasText(canvas);
		}
		private void NewQCanvasText(QCanvas canvas) {
			ProxyQCanvasText().NewQCanvasText(canvas);
		}
		public QCanvasText(string arg1, QCanvas canvas) : this((Type) null) {
			CreateQCanvasTextProxy();
			NewQCanvasText(arg1,canvas);
		}
		private void NewQCanvasText(string arg1, QCanvas canvas) {
			ProxyQCanvasText().NewQCanvasText(arg1,canvas);
		}
		public QCanvasText(string arg1, QFont arg2, QCanvas canvas) : this((Type) null) {
			CreateQCanvasTextProxy();
			NewQCanvasText(arg1,arg2,canvas);
		}
		private void NewQCanvasText(string arg1, QFont arg2, QCanvas canvas) {
			ProxyQCanvasText().NewQCanvasText(arg1,arg2,canvas);
		}
		public void SetText(string arg1) {
			ProxyQCanvasText().SetText(arg1);
		}
		public void SetFont(QFont arg1) {
			ProxyQCanvasText().SetFont(arg1);
		}
		public void SetColor(QColor arg1) {
			ProxyQCanvasText().SetColor(arg1);
		}
		public string Text() {
			return ProxyQCanvasText().Text();
		}
		public QFont Font() {
			return ProxyQCanvasText().Font();
		}
		public QColor Color() {
			return ProxyQCanvasText().Color();
		}
		public new void MoveBy(double dx, double dy) {
			ProxyQCanvasText().MoveBy(dx,dy);
		}
		public int TextFlags() {
			return ProxyQCanvasText().TextFlags();
		}
		public void SetTextFlags(int arg1) {
			ProxyQCanvasText().SetTextFlags(arg1);
		}
		public new QRect BoundingRect() {
			return ProxyQCanvasText().BoundingRect();
		}
		public new bool CollidesWith(QCanvasItem arg1) {
			return ProxyQCanvasText().CollidesWith(arg1);
		}
		public new int Rtti() {
			return ProxyQCanvasText().Rtti();
		}
		public new virtual void Draw(QPainter arg1) {
			ProxyQCanvasText().Draw(arg1);
		}
		~QCanvasText() {
			ProxyQCanvasText().Dispose();
		}
		public new void Dispose() {
			ProxyQCanvasText().Dispose();
		}
	}
}
