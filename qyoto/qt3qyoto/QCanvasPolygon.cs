//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QCanvasPolygon : QCanvasPolygonalItem, IDisposable {
 		protected QCanvasPolygon(Type dummy) : base((Type) null) {}
		interface IQCanvasPolygonProxy {
		}

		protected void CreateQCanvasPolygonProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QCanvasPolygon), this);
			_interceptor = (QCanvasPolygon) realProxy.GetTransparentProxy();
		}
		private QCanvasPolygon ProxyQCanvasPolygon() {
			return (QCanvasPolygon) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QCanvasPolygon() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQCanvasPolygonProxy), null);
			_staticInterceptor = (IQCanvasPolygonProxy) realProxy.GetTransparentProxy();
		}
		private static IQCanvasPolygonProxy StaticQCanvasPolygon() {
			return (IQCanvasPolygonProxy) _staticInterceptor;
		}

		public QCanvasPolygon(QCanvas canvas) : this((Type) null) {
			CreateQCanvasPolygonProxy();
			NewQCanvasPolygon(canvas);
		}
		private void NewQCanvasPolygon(QCanvas canvas) {
			ProxyQCanvasPolygon().NewQCanvasPolygon(canvas);
		}
		public void SetPoints(QPointArray arg1) {
			ProxyQCanvasPolygon().SetPoints(arg1);
		}
		public QPointArray Points() {
			return ProxyQCanvasPolygon().Points();
		}
		public new void MoveBy(double dx, double dy) {
			ProxyQCanvasPolygon().MoveBy(dx,dy);
		}
		public new QPointArray AreaPoints() {
			return ProxyQCanvasPolygon().AreaPoints();
		}
		public new int Rtti() {
			return ProxyQCanvasPolygon().Rtti();
		}
		protected new void DrawShape(QPainter arg1) {
			ProxyQCanvasPolygon().DrawShape(arg1);
		}
		~QCanvasPolygon() {
			ProxyQCanvasPolygon().Dispose();
		}
		public new void Dispose() {
			ProxyQCanvasPolygon().Dispose();
		}
	}
}
