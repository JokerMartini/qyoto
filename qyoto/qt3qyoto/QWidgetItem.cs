//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	[SmokeClass("QWidgetItem")]
	public class QWidgetItem : QLayoutItem, IDisposable {
 		protected QWidgetItem(Type dummy) : base((Type) null) {}
		interface IQWidgetItemProxy {
		}

		protected void CreateQWidgetItemProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QWidgetItem), this);
			_interceptor = (QWidgetItem) realProxy.GetTransparentProxy();
		}
		private QWidgetItem ProxyQWidgetItem() {
			return (QWidgetItem) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QWidgetItem() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQWidgetItemProxy), null);
			_staticInterceptor = (IQWidgetItemProxy) realProxy.GetTransparentProxy();
		}
		private static IQWidgetItemProxy StaticQWidgetItem() {
			return (IQWidgetItemProxy) _staticInterceptor;
		}

		public QWidgetItem(QWidget w) : this((Type) null) {
			CreateQWidgetItemProxy();
			NewQWidgetItem(w);
		}
		[SmokeMethod("QWidgetItem(QWidget*)")]
		private void NewQWidgetItem(QWidget w) {
			ProxyQWidgetItem().NewQWidgetItem(w);
		}
		[SmokeMethod("sizeHint() const")]
		public new QSize SizeHint() {
			return ProxyQWidgetItem().SizeHint();
		}
		[SmokeMethod("minimumSize() const")]
		public new QSize MinimumSize() {
			return ProxyQWidgetItem().MinimumSize();
		}
		[SmokeMethod("maximumSize() const")]
		public new QSize MaximumSize() {
			return ProxyQWidgetItem().MaximumSize();
		}
		[SmokeMethod("expanding() const")]
		public new int Expanding() {
			return ProxyQWidgetItem().Expanding();
		}
		[SmokeMethod("isEmpty() const")]
		public new bool IsEmpty() {
			return ProxyQWidgetItem().IsEmpty();
		}
		[SmokeMethod("setGeometry(const QRect&)")]
		public new void SetGeometry(QRect arg1) {
			ProxyQWidgetItem().SetGeometry(arg1);
		}
		[SmokeMethod("geometry() const")]
		public new QRect Geometry() {
			return ProxyQWidgetItem().Geometry();
		}
		[SmokeMethod("widget()")]
		public new virtual QWidget Widget() {
			return ProxyQWidgetItem().Widget();
		}
		[SmokeMethod("hasHeightForWidth() const")]
		public new bool HasHeightForWidth() {
			return ProxyQWidgetItem().HasHeightForWidth();
		}
		[SmokeMethod("heightForWidth(int) const")]
		public new int HeightForWidth(int arg1) {
			return ProxyQWidgetItem().HeightForWidth(arg1);
		}
		~QWidgetItem() {
			DisposeQWidgetItem();
		}
		public void Dispose() {
			DisposeQWidgetItem();
		}
		private void DisposeQWidgetItem() {
			ProxyQWidgetItem().DisposeQWidgetItem();
		}
	}
}
