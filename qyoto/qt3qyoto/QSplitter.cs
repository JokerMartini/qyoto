//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QSplitter : QFrame, IDisposable {
 		protected QSplitter(Type dummy) : base((Type) null) {}
		interface IQSplitterProxy {
			string Tr(string arg1, string arg2);
			string Tr(string arg1);
			string TrUtf8(string arg1, string arg2);
			string TrUtf8(string arg1);
		}

		protected void CreateQSplitterProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSplitter), this);
			_interceptor = (QSplitter) realProxy.GetTransparentProxy();
		}
		private QSplitter ProxyQSplitter() {
			return (QSplitter) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QSplitter() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSplitterProxy), null);
			_staticInterceptor = (IQSplitterProxy) realProxy.GetTransparentProxy();
		}
		private static IQSplitterProxy StaticQSplitter() {
			return (IQSplitterProxy) _staticInterceptor;
		}

		public const int DefaultResizeMode = 3;

		enum ResizeMode {
			Stretch = 0,
			KeepSize = 1,
			FollowSizeHint = 2,
			Auto = 3,
		}
		public new virtual QMetaObject MetaObject() {
			return ProxyQSplitter().MetaObject();
		}
		public new virtual string ClassName() {
			return ProxyQSplitter().ClassName();
		}
		public QSplitter(QWidget parent, string name) : this((Type) null) {
			CreateQSplitterProxy();
			NewQSplitter(parent,name);
		}
		private void NewQSplitter(QWidget parent, string name) {
			ProxyQSplitter().NewQSplitter(parent,name);
		}
		public QSplitter(QWidget parent) : this((Type) null) {
			CreateQSplitterProxy();
			NewQSplitter(parent);
		}
		private void NewQSplitter(QWidget parent) {
			ProxyQSplitter().NewQSplitter(parent);
		}
		public QSplitter() : this((Type) null) {
			CreateQSplitterProxy();
			NewQSplitter();
		}
		private void NewQSplitter() {
			ProxyQSplitter().NewQSplitter();
		}
		public QSplitter(int arg1, QWidget parent, string name) : this((Type) null) {
			CreateQSplitterProxy();
			NewQSplitter(arg1,parent,name);
		}
		private void NewQSplitter(int arg1, QWidget parent, string name) {
			ProxyQSplitter().NewQSplitter(arg1,parent,name);
		}
		public QSplitter(int arg1, QWidget parent) : this((Type) null) {
			CreateQSplitterProxy();
			NewQSplitter(arg1,parent);
		}
		private void NewQSplitter(int arg1, QWidget parent) {
			ProxyQSplitter().NewQSplitter(arg1,parent);
		}
		public QSplitter(int arg1) : this((Type) null) {
			CreateQSplitterProxy();
			NewQSplitter(arg1);
		}
		private void NewQSplitter(int arg1) {
			ProxyQSplitter().NewQSplitter(arg1);
		}
		public virtual void SetOrientation(int arg1) {
			ProxyQSplitter().SetOrientation(arg1);
		}
		public int Orientation() {
			return ProxyQSplitter().Orientation();
		}
		public void SetChildrenCollapsible(bool arg1) {
			ProxyQSplitter().SetChildrenCollapsible(arg1);
		}
		public bool ChildrenCollapsible() {
			return ProxyQSplitter().ChildrenCollapsible();
		}
		public void SetCollapsible(QWidget w, bool arg2) {
			ProxyQSplitter().SetCollapsible(w,arg2);
		}
		public virtual void SetResizeMode(QWidget w, int arg2) {
			ProxyQSplitter().SetResizeMode(w,arg2);
		}
		public virtual void SetOpaqueResize(bool arg1) {
			ProxyQSplitter().SetOpaqueResize(arg1);
		}
		public virtual void SetOpaqueResize() {
			ProxyQSplitter().SetOpaqueResize();
		}
		public bool OpaqueResize() {
			return ProxyQSplitter().OpaqueResize();
		}
		public void MoveToFirst(QWidget arg1) {
			ProxyQSplitter().MoveToFirst(arg1);
		}
		public void MoveToLast(QWidget arg1) {
			ProxyQSplitter().MoveToLast(arg1);
		}
		public void Refresh() {
			ProxyQSplitter().Refresh();
		}
		public new QSize SizeHint() {
			return ProxyQSplitter().SizeHint();
		}
		public new QSize MinimumSizeHint() {
			return ProxyQSplitter().MinimumSizeHint();
		}
		public int[] Sizes() {
			return ProxyQSplitter().Sizes();
		}
		public void SetSizes(int[] arg1) {
			ProxyQSplitter().SetSizes(arg1);
		}
		public int HandleWidth() {
			return ProxyQSplitter().HandleWidth();
		}
		public void SetHandleWidth(int arg1) {
			ProxyQSplitter().SetHandleWidth(arg1);
		}
		public static new string Tr(string arg1, string arg2) {
			return StaticQSplitter().Tr(arg1,arg2);
		}
		public static new string Tr(string arg1) {
			return StaticQSplitter().Tr(arg1);
		}
		public static new string TrUtf8(string arg1, string arg2) {
			return StaticQSplitter().TrUtf8(arg1,arg2);
		}
		public static new string TrUtf8(string arg1) {
			return StaticQSplitter().TrUtf8(arg1);
		}
		protected new void ChildEvent(QChildEvent arg1) {
			ProxyQSplitter().ChildEvent(arg1);
		}
		public new bool Event(QEvent arg1) {
			return ProxyQSplitter().Event(arg1);
		}
		protected new void ResizeEvent(QResizeEvent arg1) {
			ProxyQSplitter().ResizeEvent(arg1);
		}
		protected int IdAfter(QWidget arg1) {
			return ProxyQSplitter().IdAfter(arg1);
		}
		protected void MoveSplitter(int pos, int id) {
			ProxyQSplitter().MoveSplitter(pos,id);
		}
		protected virtual void DrawSplitter(QPainter arg1, int x, int y, int w, int h) {
			ProxyQSplitter().DrawSplitter(arg1,x,y,w,h);
		}
		public new void StyleChange(QStyle arg1) {
			ProxyQSplitter().StyleChange(arg1);
		}
		protected int AdjustPos(int arg1, int arg2) {
			return ProxyQSplitter().AdjustPos(arg1,arg2);
		}
		protected virtual void SetRubberband(int arg1) {
			ProxyQSplitter().SetRubberband(arg1);
		}
		protected void GetRange(int id, out int arg2, out int arg3) {
			ProxyQSplitter().GetRange(id,out arg2,out arg3);
		}
		~QSplitter() {
			ProxyQSplitter().Dispose();
		}
		public new void Dispose() {
			ProxyQSplitter().Dispose();
		}
	}
}
