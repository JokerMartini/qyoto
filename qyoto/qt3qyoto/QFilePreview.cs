//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	[SmokeClass("QFilePreview")]
	public class QFilePreview : MarshalByRefObject {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QFilePreview(Type dummy) {}
		interface IQFilePreviewProxy {
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QFilePreview), this);
			_interceptor = (QFilePreview) realProxy.GetTransparentProxy();
		}
		private QFilePreview ProxyQFilePreview() {
			return (QFilePreview) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QFilePreview() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQFilePreviewProxy), null);
			_staticInterceptor = (IQFilePreviewProxy) realProxy.GetTransparentProxy();
		}
		private static IQFilePreviewProxy StaticQFilePreview() {
			return (IQFilePreviewProxy) _staticInterceptor;
		}

		public QFilePreview() : this((Type) null) {
			CreateProxy();
			NewQFilePreview();
		}
		[SmokeMethod("QFilePreview()")]
		private void NewQFilePreview() {
			ProxyQFilePreview().NewQFilePreview();
		}
		[SmokeMethod("previewUrl(const QUrl&)")]
		public virtual void PreviewUrl(IQUrl url) {
			ProxyQFilePreview().PreviewUrl(url);
		}
		~QFilePreview() {
			DisposeQFilePreview();
		}
		public void Dispose() {
			DisposeQFilePreview();
		}
		private void DisposeQFilePreview() {
			ProxyQFilePreview().DisposeQFilePreview();
		}
	}
}
