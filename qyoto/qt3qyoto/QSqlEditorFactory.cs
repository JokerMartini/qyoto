//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QSqlEditorFactory : QEditorFactory, IDisposable {
 		protected QSqlEditorFactory(Type dummy) : base((Type) null) {}
		interface IQSqlEditorFactoryProxy {
			QEditorFactory DefaultFactory();
			void InstallDefaultFactory(QSqlEditorFactory factory);
		}

		protected void CreateQSqlEditorFactoryProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSqlEditorFactory), this);
			_interceptor = (QSqlEditorFactory) realProxy.GetTransparentProxy();
		}
		private QSqlEditorFactory ProxyQSqlEditorFactory() {
			return (QSqlEditorFactory) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QSqlEditorFactory() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSqlEditorFactoryProxy), null);
			_staticInterceptor = (IQSqlEditorFactoryProxy) realProxy.GetTransparentProxy();
		}
		private static IQSqlEditorFactoryProxy StaticQSqlEditorFactory() {
			return (IQSqlEditorFactoryProxy) _staticInterceptor;
		}

		public QSqlEditorFactory(QObject parent, string name) : this((Type) null) {
			CreateQSqlEditorFactoryProxy();
			CreateQSqlEditorFactorySignalProxy();
			NewQSqlEditorFactory(parent,name);
		}
		[SmokeMethod("QSqlEditorFactory(QObject*, const char*)")]
		private void NewQSqlEditorFactory(QObject parent, string name) {
			ProxyQSqlEditorFactory().NewQSqlEditorFactory(parent,name);
		}
		public QSqlEditorFactory(QObject parent) : this((Type) null) {
			CreateQSqlEditorFactoryProxy();
			CreateQSqlEditorFactorySignalProxy();
			NewQSqlEditorFactory(parent);
		}
		[SmokeMethod("QSqlEditorFactory(QObject*)")]
		private void NewQSqlEditorFactory(QObject parent) {
			ProxyQSqlEditorFactory().NewQSqlEditorFactory(parent);
		}
		public QSqlEditorFactory() : this((Type) null) {
			CreateQSqlEditorFactoryProxy();
			CreateQSqlEditorFactorySignalProxy();
			NewQSqlEditorFactory();
		}
		[SmokeMethod("QSqlEditorFactory()")]
		private void NewQSqlEditorFactory() {
			ProxyQSqlEditorFactory().NewQSqlEditorFactory();
		}
		[SmokeMethod("createEditor(QWidget*, const QVariant&)")]
		public new virtual QWidget CreateEditor(QWidget parent, QVariant variant) {
			return ProxyQSqlEditorFactory().CreateEditor(parent,variant);
		}
		[SmokeMethod("createEditor(QWidget*, const QSqlField*)")]
		public new virtual QWidget CreateEditor(QWidget parent, QSqlField field) {
			return ProxyQSqlEditorFactory().CreateEditor(parent,field);
		}
		[SmokeMethod("defaultFactory()")]
		public static new QEditorFactory DefaultFactory() {
			return StaticQSqlEditorFactory().DefaultFactory();
		}
		[SmokeMethod("installDefaultFactory(QSqlEditorFactory*)")]
		public static new void InstallDefaultFactory(QSqlEditorFactory factory) {
			StaticQSqlEditorFactory().InstallDefaultFactory(factory);
		}
		~QSqlEditorFactory() {
			DisposeQSqlEditorFactory();
		}
		public new void Dispose() {
			DisposeQSqlEditorFactory();
		}
		private void DisposeQSqlEditorFactory() {
			ProxyQSqlEditorFactory().DisposeQSqlEditorFactory();
		}
		protected void CreateQSqlEditorFactorySignalProxy() {
			SignalInvocation realProxy = new SignalInvocation(typeof(IQSqlEditorFactorySignals), this);
			_signalInterceptor = (IQSqlEditorFactorySignals) realProxy.GetTransparentProxy();
		}
		protected new IQSqlEditorFactorySignals Emit() {
			return (IQSqlEditorFactorySignals) _signalInterceptor;
		}
	}

	public interface IQSqlEditorFactorySignals : IQEditorFactorySignals {
	}
}
