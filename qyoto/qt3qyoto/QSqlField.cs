//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QSqlField : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QSqlField(Type dummy) {}
		interface IQSqlFieldProxy {
			bool op_equals(QSqlField lhs, QSqlField other);
		}

		protected void CreateQSqlFieldProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSqlField), this);
			_interceptor = (QSqlField) realProxy.GetTransparentProxy();
		}
		private QSqlField ProxyQSqlField() {
			return (QSqlField) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QSqlField() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSqlFieldProxy), null);
			_staticInterceptor = (IQSqlFieldProxy) realProxy.GetTransparentProxy();
		}
		private static IQSqlFieldProxy StaticQSqlField() {
			return (IQSqlFieldProxy) _staticInterceptor;
		}

		public QSqlField(string fieldName, int type) : this((Type) null) {
			CreateQSqlFieldProxy();
			NewQSqlField(fieldName,type);
		}
		private void NewQSqlField(string fieldName, int type) {
			ProxyQSqlField().NewQSqlField(fieldName,type);
		}
		public QSqlField(string fieldName) : this((Type) null) {
			CreateQSqlFieldProxy();
			NewQSqlField(fieldName);
		}
		private void NewQSqlField(string fieldName) {
			ProxyQSqlField().NewQSqlField(fieldName);
		}
		public QSqlField() : this((Type) null) {
			CreateQSqlFieldProxy();
			NewQSqlField();
		}
		private void NewQSqlField() {
			ProxyQSqlField().NewQSqlField();
		}
		public QSqlField(QSqlField other) : this((Type) null) {
			CreateQSqlFieldProxy();
			NewQSqlField(other);
		}
		private void NewQSqlField(QSqlField other) {
			ProxyQSqlField().NewQSqlField(other);
		}
		public static bool operator==(QSqlField lhs, QSqlField other) {
			return StaticQSqlField().op_equals(lhs,other);
		}
		public static bool operator!=(QSqlField lhs, QSqlField other) {
			return !StaticQSqlField().op_equals(lhs,other);
		}
		public override bool Equals(object o) {
			if (!(o is QSqlField)) { return false; }
			return this == (QSqlField) o;
		}
		public override int GetHashCode() {
			return ProxyQSqlField().GetHashCode();
		}
		public virtual void SetValue(QVariant value) {
			ProxyQSqlField().SetValue(value);
		}
		public virtual QVariant Value() {
			return ProxyQSqlField().Value();
		}
		public virtual void SetName(string name) {
			ProxyQSqlField().SetName(name);
		}
		public string Name() {
			return ProxyQSqlField().Name();
		}
		public virtual void SetNull() {
			ProxyQSqlField().SetNull();
		}
		public bool IsNull() {
			return ProxyQSqlField().IsNull();
		}
		public virtual void SetReadOnly(bool readOnly) {
			ProxyQSqlField().SetReadOnly(readOnly);
		}
		public bool IsReadOnly() {
			return ProxyQSqlField().IsReadOnly();
		}
		public void Clear(bool nullify) {
			ProxyQSqlField().Clear(nullify);
		}
		public void Clear() {
			ProxyQSqlField().Clear();
		}
		public int Type() {
			return ProxyQSqlField().Type();
		}
		~QSqlField() {
			ProxyQSqlField().Dispose();
		}
		public void Dispose() {
			ProxyQSqlField().Dispose();
		}
	}
}
