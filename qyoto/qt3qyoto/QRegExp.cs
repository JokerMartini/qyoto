//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Collections;
	using System.Text;

	public class QRegExp : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QRegExp(Type dummy) {}
		interface IQRegExpProxy {
			bool op_equals(QRegExp lhs, QRegExp rx);
			string Escape(string str);
		}

		protected void CreateQRegExpProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QRegExp), this);
			_interceptor = (QRegExp) realProxy.GetTransparentProxy();
		}
		private QRegExp ProxyQRegExp() {
			return (QRegExp) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QRegExp() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQRegExpProxy), null);
			_staticInterceptor = (IQRegExpProxy) realProxy.GetTransparentProxy();
		}
		private static IQRegExpProxy StaticQRegExp() {
			return (IQRegExpProxy) _staticInterceptor;
		}

		enum CaretMode {
			CaretAtZero = 0,
			CaretAtOffset = 1,
			CaretWontMatch = 2,
		}
		public QRegExp() : this((Type) null) {
			CreateQRegExpProxy();
			NewQRegExp();
		}
		private void NewQRegExp() {
			ProxyQRegExp().NewQRegExp();
		}
		public QRegExp(string pattern, bool caseSensitive, bool wildcard) : this((Type) null) {
			CreateQRegExpProxy();
			NewQRegExp(pattern,caseSensitive,wildcard);
		}
		private void NewQRegExp(string pattern, bool caseSensitive, bool wildcard) {
			ProxyQRegExp().NewQRegExp(pattern,caseSensitive,wildcard);
		}
		public QRegExp(string pattern, bool caseSensitive) : this((Type) null) {
			CreateQRegExpProxy();
			NewQRegExp(pattern,caseSensitive);
		}
		private void NewQRegExp(string pattern, bool caseSensitive) {
			ProxyQRegExp().NewQRegExp(pattern,caseSensitive);
		}
		public QRegExp(string pattern) : this((Type) null) {
			CreateQRegExpProxy();
			NewQRegExp(pattern);
		}
		private void NewQRegExp(string pattern) {
			ProxyQRegExp().NewQRegExp(pattern);
		}
		public QRegExp(QRegExp rx) : this((Type) null) {
			CreateQRegExpProxy();
			NewQRegExp(rx);
		}
		private void NewQRegExp(QRegExp rx) {
			ProxyQRegExp().NewQRegExp(rx);
		}
		public static bool operator==(QRegExp lhs, QRegExp rx) {
			return StaticQRegExp().op_equals(lhs,rx);
		}
		public static bool operator!=(QRegExp lhs, QRegExp rx) {
			return !StaticQRegExp().op_equals(lhs,rx);
		}
		public override bool Equals(object o) {
			if (!(o is QRegExp)) { return false; }
			return this == (QRegExp) o;
		}
		public override int GetHashCode() {
			return ProxyQRegExp().GetHashCode();
		}
		public bool IsEmpty() {
			return ProxyQRegExp().IsEmpty();
		}
		public bool IsValid() {
			return ProxyQRegExp().IsValid();
		}
		public string Pattern() {
			return ProxyQRegExp().Pattern();
		}
		public void SetPattern(string pattern) {
			ProxyQRegExp().SetPattern(pattern);
		}
		public bool CaseSensitive() {
			return ProxyQRegExp().CaseSensitive();
		}
		public void SetCaseSensitive(bool sensitive) {
			ProxyQRegExp().SetCaseSensitive(sensitive);
		}
		public bool Wildcard() {
			return ProxyQRegExp().Wildcard();
		}
		public void SetWildcard(bool wildcard) {
			ProxyQRegExp().SetWildcard(wildcard);
		}
		public bool Minimal() {
			return ProxyQRegExp().Minimal();
		}
		public void SetMinimal(bool minimal) {
			ProxyQRegExp().SetMinimal(minimal);
		}
		public bool ExactMatch(string str) {
			return ProxyQRegExp().ExactMatch(str);
		}
		public int Match(string str, int index, out int len, bool indexIsStart) {
			return ProxyQRegExp().Match(str,index,out len,indexIsStart);
		}
		public int Match(string str, int index, out int len) {
			return ProxyQRegExp().Match(str,index,out len);
		}
		public int Match(string str, int index) {
			return ProxyQRegExp().Match(str,index);
		}
		public int Match(string str) {
			return ProxyQRegExp().Match(str);
		}
		public int Search(string str, int offset, int caretMode) {
			return ProxyQRegExp().Search(str,offset,caretMode);
		}
		public int Search(string str, int offset) {
			return ProxyQRegExp().Search(str,offset);
		}
		public int Search(string str) {
			return ProxyQRegExp().Search(str);
		}
		public int SearchRev(string str, int offset, int caretMode) {
			return ProxyQRegExp().SearchRev(str,offset,caretMode);
		}
		public int SearchRev(string str, int offset) {
			return ProxyQRegExp().SearchRev(str,offset);
		}
		public int SearchRev(string str) {
			return ProxyQRegExp().SearchRev(str);
		}
		public int MatchedLength() {
			return ProxyQRegExp().MatchedLength();
		}
		public int NumCaptures() {
			return ProxyQRegExp().NumCaptures();
		}
		public ArrayList CapturedTexts() {
			return ProxyQRegExp().CapturedTexts();
		}
		public string Cap(int nth) {
			return ProxyQRegExp().Cap(nth);
		}
		public string Cap() {
			return ProxyQRegExp().Cap();
		}
		public int Pos(int nth) {
			return ProxyQRegExp().Pos(nth);
		}
		public int Pos() {
			return ProxyQRegExp().Pos();
		}
		public string ErrorString() {
			return ProxyQRegExp().ErrorString();
		}
		public static string Escape(string str) {
			return StaticQRegExp().Escape(str);
		}
		~QRegExp() {
			ProxyQRegExp().Dispose();
		}
		public void Dispose() {
			ProxyQRegExp().Dispose();
		}
	}
}
