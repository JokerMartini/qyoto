//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QWMatrix : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QWMatrix(Type dummy) {}
		interface IQWMatrixProxy {
			bool op_equals(QWMatrix lhs, QWMatrix arg1);
			QWMatrix op_mult(QWMatrix lhs, QWMatrix arg1);
			QPoint op_mult(QWMatrix lhs, QPoint arg1);
			QRegion op_mult(QWMatrix lhs, QRect arg1);
			QRegion op_mult(QWMatrix lhs, QRegion arg1);
			QPointArray op_mult(QWMatrix lhs, QPointArray a);
			void SetTransformationMode(int m);
			int TransformationMode();
		}

		protected void CreateQWMatrixProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QWMatrix), this);
			_interceptor = (QWMatrix) realProxy.GetTransparentProxy();
		}
		private QWMatrix ProxyQWMatrix() {
			return (QWMatrix) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QWMatrix() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQWMatrixProxy), null);
			_staticInterceptor = (IQWMatrixProxy) realProxy.GetTransparentProxy();
		}
		private static IQWMatrixProxy StaticQWMatrix() {
			return (IQWMatrixProxy) _staticInterceptor;
		}

		enum E_TransformationMode {
			Points = 0,
			Areas = 1,
		}
		public QWMatrix() : this((Type) null) {
			CreateQWMatrixProxy();
			NewQWMatrix();
		}
		private void NewQWMatrix() {
			ProxyQWMatrix().NewQWMatrix();
		}
		public QWMatrix(double m11, double m12, double m21, double m22, double dx, double dy) : this((Type) null) {
			CreateQWMatrixProxy();
			NewQWMatrix(m11,m12,m21,m22,dx,dy);
		}
		private void NewQWMatrix(double m11, double m12, double m21, double m22, double dx, double dy) {
			ProxyQWMatrix().NewQWMatrix(m11,m12,m21,m22,dx,dy);
		}
		public void SetMatrix(double m11, double m12, double m21, double m22, double dx, double dy) {
			ProxyQWMatrix().SetMatrix(m11,m12,m21,m22,dx,dy);
		}
		public double M11() {
			return ProxyQWMatrix().M11();
		}
		public double M12() {
			return ProxyQWMatrix().M12();
		}
		public double M21() {
			return ProxyQWMatrix().M21();
		}
		public double M22() {
			return ProxyQWMatrix().M22();
		}
		public double Dx() {
			return ProxyQWMatrix().Dx();
		}
		public double Dy() {
			return ProxyQWMatrix().Dy();
		}
		public void Map(int x, int y, out int tx, out int ty) {
			ProxyQWMatrix().Map(x,y,out tx,out ty);
		}
		public void Map(double x, double y, out double tx, out double ty) {
			ProxyQWMatrix().Map(x,y,out tx,out ty);
		}
		public QRect MapRect(QRect arg1) {
			return ProxyQWMatrix().MapRect(arg1);
		}
		public QPoint Map(QPoint p) {
			return ProxyQWMatrix().Map(p);
		}
		public QRect Map(QRect r) {
			return ProxyQWMatrix().Map(r);
		}
		public QPointArray Map(QPointArray a) {
			return ProxyQWMatrix().Map(a);
		}
		public QRegion Map(QRegion r) {
			return ProxyQWMatrix().Map(r);
		}
		public QRegion MapToRegion(QRect r) {
			return ProxyQWMatrix().MapToRegion(r);
		}
		public QPointArray MapToPolygon(QRect r) {
			return ProxyQWMatrix().MapToPolygon(r);
		}
		public void Reset() {
			ProxyQWMatrix().Reset();
		}
		public bool IsIdentity() {
			return ProxyQWMatrix().IsIdentity();
		}
		public QWMatrix Translate(double dx, double dy) {
			return ProxyQWMatrix().Translate(dx,dy);
		}
		public QWMatrix Scale(double sx, double sy) {
			return ProxyQWMatrix().Scale(sx,sy);
		}
		public QWMatrix Shear(double sh, double sv) {
			return ProxyQWMatrix().Shear(sh,sv);
		}
		public QWMatrix Rotate(double a) {
			return ProxyQWMatrix().Rotate(a);
		}
		public bool IsInvertible() {
			return ProxyQWMatrix().IsInvertible();
		}
		public double Det() {
			return ProxyQWMatrix().Det();
		}
		public QWMatrix Invert(out bool arg1) {
			return ProxyQWMatrix().Invert(out arg1);
		}
		public QWMatrix Invert() {
			return ProxyQWMatrix().Invert();
		}
		public static bool operator==(QWMatrix lhs, QWMatrix arg1) {
			return StaticQWMatrix().op_equals(lhs,arg1);
		}
		public static bool operator!=(QWMatrix lhs, QWMatrix arg1) {
			return !StaticQWMatrix().op_equals(lhs,arg1);
		}
		public override bool Equals(object o) {
			if (!(o is QWMatrix)) { return false; }
			return this == (QWMatrix) o;
		}
		public override int GetHashCode() {
			return ProxyQWMatrix().GetHashCode();
		}
		public static QWMatrix operator*(QWMatrix lhs, QWMatrix arg1) {
			return StaticQWMatrix().op_mult(lhs,arg1);
		}
		public static QPoint operator*(QWMatrix lhs, QPoint arg1) {
			return StaticQWMatrix().op_mult(lhs,arg1);
		}
		public static QRegion operator*(QWMatrix lhs, QRect arg1) {
			return StaticQWMatrix().op_mult(lhs,arg1);
		}
		public static QRegion operator*(QWMatrix lhs, QRegion arg1) {
			return StaticQWMatrix().op_mult(lhs,arg1);
		}
		public static QPointArray operator*(QWMatrix lhs, QPointArray a) {
			return StaticQWMatrix().op_mult(lhs,a);
		}
		public static void SetTransformationMode(int m) {
			StaticQWMatrix().SetTransformationMode(m);
		}
		public static int TransformationMode() {
			return StaticQWMatrix().TransformationMode();
		}
		~QWMatrix() {
			ProxyQWMatrix().Dispose();
		}
		public void Dispose() {
			ProxyQWMatrix().Dispose();
		}
	}
}
