//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	[SmokeClass("Qt")]
	public class Qt : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected Qt(Type dummy) {}
		interface IQtProxy {
			QDataStream op_write(QDataStream arg1, QPoint arg2);
			QDataStream op_read(QDataStream arg1, QPoint arg2);
			bool op_equals(QPoint p1, QPoint p2);
			QPoint op_plus(QPoint p1, QPoint p2);
			QPoint op_minus(QPoint p1, QPoint p2);
			QPoint op_mult(QPoint p, int c);
			QPoint op_mult(int c, QPoint p);
			QPoint op_mult(QPoint p, double c);
			QPoint op_mult(double c, QPoint p);
			QPoint op_minus(QPoint p);
			QPoint op_div(QPoint p, int c);
			QPoint op_div(QPoint p, double c);
			QDataStream op_write(QDataStream arg1, QRegion arg2);
			QDataStream op_read(QDataStream arg1, QRegion arg2);
			QDataStream op_write(QDataStream arg1, QColorGroup arg2);
			QDataStream op_read(QDataStream arg1, QColorGroup arg2);
			QDataStream op_write(QDataStream arg1, QPalette arg2);
			QDataStream op_read(QDataStream arg1, QPalette arg2);
			QTextStream Bin(QTextStream s);
			QTextStream Oct(QTextStream s);
			QTextStream Dec(QTextStream s);
			QTextStream Hex(QTextStream s);
			QTextStream Endl(QTextStream s);
			QTextStream Flush(QTextStream s);
			QTextStream Ws(QTextStream s);
			QTextStream Reset(QTextStream s);
			void QDrawShadeLine(QPainter p, int x1, int y1, int x2, int y2, QColorGroup g, bool sunken, int lineWidth, int midLineWidth);
			void QDrawShadeLine(QPainter p, int x1, int y1, int x2, int y2, QColorGroup g, bool sunken, int lineWidth);
			void QDrawShadeLine(QPainter p, int x1, int y1, int x2, int y2, QColorGroup g, bool sunken);
			void QDrawShadeLine(QPainter p, int x1, int y1, int x2, int y2, QColorGroup g);
			void QDrawShadeLine(QPainter p, QPoint p1, QPoint p2, QColorGroup g, bool sunken, int lineWidth, int midLineWidth);
			void QDrawShadeLine(QPainter p, QPoint p1, QPoint p2, QColorGroup g, bool sunken, int lineWidth);
			void QDrawShadeLine(QPainter p, QPoint p1, QPoint p2, QColorGroup g, bool sunken);
			void QDrawShadeLine(QPainter p, QPoint p1, QPoint p2, QColorGroup g);
			void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QColorGroup arg6, bool sunken, int lineWidth, int midLineWidth, QBrush fill);
			void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QColorGroup arg6, bool sunken, int lineWidth, int midLineWidth);
			void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QColorGroup arg6, bool sunken, int lineWidth);
			void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QColorGroup arg6, bool sunken);
			void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QColorGroup arg6);
			void QDrawShadeRect(QPainter p, QRect r, QColorGroup arg3, bool sunken, int lineWidth, int midLineWidth, QBrush fill);
			void QDrawShadeRect(QPainter p, QRect r, QColorGroup arg3, bool sunken, int lineWidth, int midLineWidth);
			void QDrawShadeRect(QPainter p, QRect r, QColorGroup arg3, bool sunken, int lineWidth);
			void QDrawShadeRect(QPainter p, QRect r, QColorGroup arg3, bool sunken);
			void QDrawShadeRect(QPainter p, QRect r, QColorGroup arg3);
			void QDrawShadePanel(QPainter p, int x, int y, int w, int h, QColorGroup arg6, bool sunken, int lineWidth, QBrush fill);
			void QDrawShadePanel(QPainter p, int x, int y, int w, int h, QColorGroup arg6, bool sunken, int lineWidth);
			void QDrawShadePanel(QPainter p, int x, int y, int w, int h, QColorGroup arg6, bool sunken);
			void QDrawShadePanel(QPainter p, int x, int y, int w, int h, QColorGroup arg6);
			void QDrawShadePanel(QPainter p, QRect r, QColorGroup arg3, bool sunken, int lineWidth, QBrush fill);
			void QDrawShadePanel(QPainter p, QRect r, QColorGroup arg3, bool sunken, int lineWidth);
			void QDrawShadePanel(QPainter p, QRect r, QColorGroup arg3, bool sunken);
			void QDrawShadePanel(QPainter p, QRect r, QColorGroup arg3);
			void QDrawWinButton(QPainter p, int x, int y, int w, int h, QColorGroup g, bool sunken, QBrush fill);
			void QDrawWinButton(QPainter p, int x, int y, int w, int h, QColorGroup g, bool sunken);
			void QDrawWinButton(QPainter p, int x, int y, int w, int h, QColorGroup g);
			void QDrawWinButton(QPainter p, QRect r, QColorGroup g, bool sunken, QBrush fill);
			void QDrawWinButton(QPainter p, QRect r, QColorGroup g, bool sunken);
			void QDrawWinButton(QPainter p, QRect r, QColorGroup g);
			void QDrawWinPanel(QPainter p, int x, int y, int w, int h, QColorGroup arg6, bool sunken, QBrush fill);
			void QDrawWinPanel(QPainter p, int x, int y, int w, int h, QColorGroup arg6, bool sunken);
			void QDrawWinPanel(QPainter p, int x, int y, int w, int h, QColorGroup arg6);
			void QDrawWinPanel(QPainter p, QRect r, QColorGroup arg3, bool sunken, QBrush fill);
			void QDrawWinPanel(QPainter p, QRect r, QColorGroup arg3, bool sunken);
			void QDrawWinPanel(QPainter p, QRect r, QColorGroup arg3);
			void QDrawPlainRect(QPainter p, int x, int y, int w, int h, QColor arg6, int lineWidth, QBrush fill);
			void QDrawPlainRect(QPainter p, int x, int y, int w, int h, QColor arg6, int lineWidth);
			void QDrawPlainRect(QPainter p, int x, int y, int w, int h, QColor arg6);
			void QDrawPlainRect(QPainter p, QRect r, QColor arg3, int lineWidth, QBrush fill);
			void QDrawPlainRect(QPainter p, QRect r, QColor arg3, int lineWidth);
			void QDrawPlainRect(QPainter p, QRect r, QColor arg3);
			QRect QItemRect(QPainter p, int gs, int x, int y, int w, int h, int flags, bool enabled, QPixmap pixmap, string text, int len);
			QRect QItemRect(QPainter p, int gs, int x, int y, int w, int h, int flags, bool enabled, QPixmap pixmap, string text);
			void QDrawItem(QPainter p, int gs, int x, int y, int w, int h, int flags, QColorGroup g, bool enabled, QPixmap pixmap, string text, int len, QColor penColor);
			void QDrawItem(QPainter p, int gs, int x, int y, int w, int h, int flags, QColorGroup g, bool enabled, QPixmap pixmap, string text, int len);
			void QDrawItem(QPainter p, int gs, int x, int y, int w, int h, int flags, QColorGroup g, bool enabled, QPixmap pixmap, string text);
			void QDrawArrow(QPainter p, int type, int style, bool down, int x, int y, int w, int h, QColorGroup g, bool enabled);
			QDataStream op_write(QDataStream arg1, QCursor arg2);
			QDataStream op_read(QDataStream arg1, QCursor arg2);
			string QAppName();
			QTextStream op_write(QTextStream arg1, QDomNode arg2);
			QWMatrix op_mult(QWMatrix arg1, QWMatrix arg2);
			QDataStream op_write(QDataStream arg1, QWMatrix arg2);
			QDataStream op_read(QDataStream arg1, QWMatrix arg2);
			QDataStream op_write(QDataStream arg1, QBrush arg2);
			QDataStream op_read(QDataStream arg1, QBrush arg2);
			QDataStream op_write(QDataStream arg1, QImage arg2);
			QDataStream op_read(QDataStream arg1, QImage arg2);
			void BitBlt(QImage dst, int dx, int dy, QImage src, int sx, int sy, int sw, int sh, int conversion_flags);
			void BitBlt(QImage dst, int dx, int dy, QImage src, int sx, int sy, int sw, int sh);
			void BitBlt(QImage dst, int dx, int dy, QImage src, int sx, int sy, int sw);
			void BitBlt(QImage dst, int dx, int dy, QImage src, int sx, int sy);
			void BitBlt(QImage dst, int dx, int dy, QImage src, int sx);
			void BitBlt(QImage dst, int dx, int dy, QImage src);
			QDataStream op_read(QDataStream s, QVariant p);
			QDataStream op_write(QDataStream s, QVariant p);
			QDataStream op_read(QDataStream s, int p);
			QDataStream op_write(QDataStream s, int p);
			string QGLVersion();
			bool op_equals(QGLFormat arg1, QGLFormat arg2);
			QDataStream op_write(QDataStream arg1, QFont arg2);
			QDataStream op_read(QDataStream arg1, QFont arg2);
			QDataStream op_write(QDataStream arg1, QSize arg2);
			QDataStream op_read(QDataStream arg1, QSize arg2);
			bool op_equals(QSize s1, QSize s2);
			QSize op_plus(QSize s1, QSize s2);
			QSize op_minus(QSize s1, QSize s2);
			QSize op_mult(QSize s, int c);
			QSize op_mult(int c, QSize s);
			QSize op_mult(QSize s, double c);
			QSize op_mult(double c, QSize s);
			QSize op_div(QSize s, int c);
			QSize op_div(QSize s, double c);
			QDataStream op_read(QDataStream arg1, string[] arg2);
			QDataStream op_write(QDataStream arg1, string[] arg2);
			QDataStream op_write(QDataStream arg1, QPixmap arg2);
			QDataStream op_read(QDataStream arg1, QPixmap arg2);
			void CopyBlt(QPixmap dst, int dx, int dy, QPixmap src, int sx, int sy, int sw, int sh);
			void CopyBlt(QPixmap dst, int dx, int dy, QPixmap src, int sx, int sy, int sw);
			void CopyBlt(QPixmap dst, int dx, int dy, QPixmap src, int sx, int sy);
			void CopyBlt(QPixmap dst, int dx, int dy, QPixmap src, int sx);
			void CopyBlt(QPixmap dst, int dx, int dy, QPixmap src);
			void QInitNetworkProtocols();
			QDataStream op_write(QDataStream arg1, QPointArray arg2);
			QDataStream op_read(QDataStream arg1, QPointArray arg2);
			QDataStream op_write(QDataStream arg1, QPen arg2);
			QDataStream op_read(QDataStream arg1, QPen arg2);
			int QRed(uint rgb);
			int QGreen(uint rgb);
			int QBlue(uint rgb);
			int QAlpha(uint rgb);
			uint QRgb(int r, int g, int b);
			uint QRgba(int r, int g, int b, int a);
			int QGray(int r, int g, int b);
			int QGray(uint rgb);
			QDataStream op_write(QDataStream arg1, QColor arg2);
			QDataStream op_read(QDataStream arg1, QColor arg2);
			QTextStream op_write(QTextStream arg1, QSplitter arg2);
			QTextStream op_read(QTextStream arg1, QSplitter arg2);
			QDataStream op_write(QDataStream arg1, QUuid arg2);
			QDataStream op_read(QDataStream arg1, QUuid arg2);
			QDataStream op_write(QDataStream arg1, DateTime arg2);
			QDataStream op_read(QDataStream arg1, DateTime arg2);
			QDataStream op_write(QDataStream arg1, QKeySequence arg2);
			QDataStream op_read(QDataStream arg1, QKeySequence arg2);
			QDataStream op_write(QDataStream arg1, QPicture arg2);
			QDataStream op_read(QDataStream arg1, QPicture arg2);
			QTextStream op_write(QTextStream arg1, QMainWindow arg2);
			QTextStream op_read(QTextStream arg1, QMainWindow arg2);
			int QRound(double d);
			string QVersion();
			bool QSysInfo(out int wordSize, out bool bigEndian);
			bool QSharedBuild();
			void QSystemWarning(string arg1, int code);
			void QSystemWarning(string arg1);
			void QSuppressObsoleteWarnings(bool arg1);
			void QSuppressObsoleteWarnings();
			void QObsolete(string arg1, string oldfunc, string newfunc);
			void QObsolete(string arg1, string oldfunc);
			void QObsolete(string message);
			string QInstallPath();
			string QInstallPathDocs();
			string QInstallPathHeaders();
			string QInstallPathLibs();
			string QInstallPathBins();
			string QInstallPathPlugins();
			string QInstallPathData();
			string QInstallPathTranslations();
			string QInstallPathSysconf();
			QTextStream op_write(QTextStream arg1, QDockArea arg2);
			QTextStream op_read(QTextStream arg1, QDockArea arg2);
			void BitBlt(IQPaintDevice dst, int dx, int dy, IQPaintDevice src, int sx, int sy, int sw, int sh, int arg9, bool ignoreMask);
			void BitBlt(IQPaintDevice dst, int dx, int dy, IQPaintDevice src, int sx, int sy, int sw, int sh, int arg9);
			void BitBlt(IQPaintDevice dst, int dx, int dy, IQPaintDevice src, int sx, int sy, int sw, int sh);
			void BitBlt(IQPaintDevice dst, int dx, int dy, IQPaintDevice src, int sx, int sy, int sw);
			void BitBlt(IQPaintDevice dst, int dx, int dy, IQPaintDevice src, int sx, int sy);
			void BitBlt(IQPaintDevice dst, int dx, int dy, IQPaintDevice src, int sx);
			void BitBlt(IQPaintDevice dst, int dx, int dy, IQPaintDevice src);
			void BitBlt(IQPaintDevice dst, int dx, int dy, QImage src, int sx, int sy, int sw, int sh, int conversion_flags);
			void BitBlt(IQPaintDevice dst, int dx, int dy, QImage src, int sx, int sy, int sw, int sh);
			void BitBlt(IQPaintDevice dst, int dx, int dy, QImage src, int sx, int sy, int sw);
			void BitBlt(IQPaintDevice dst, int dx, int dy, QImage src, int sx, int sy);
			void BitBlt(IQPaintDevice dst, int dx, int dy, QImage src, int sx);
			void BitBlt(IQPaintDevice dst, int dx, int dy, QImage src);
			void BitBlt(IQPaintDevice dst, QPoint dp, IQPaintDevice src, QRect sr, int rop, bool ignoreMask);
			void BitBlt(IQPaintDevice dst, QPoint dp, IQPaintDevice src, QRect sr, int rop);
			void BitBlt(IQPaintDevice dst, QPoint dp, IQPaintDevice src, QRect sr);
			void BitBlt(IQPaintDevice dst, QPoint dp, IQPaintDevice src);
			bool op_equals(QRect arg1, QRect arg2);
			QDataStream op_write(QDataStream arg1, QRect arg2);
			QDataStream op_read(QDataStream arg1, QRect arg2);
		}

		protected void CreateQtProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(Qt), this);
			_interceptor = (Qt) realProxy.GetTransparentProxy();
		}
		private Qt ProxyQt() {
			return (Qt) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static Qt() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQtProxy), null);
			_staticInterceptor = (IQtProxy) realProxy.GetTransparentProxy();
		}
		private static IQtProxy StaticQt() {
			return (IQtProxy) _staticInterceptor;
		}

		enum ButtonState {
			NoButton = 0x0000,
			LeftButton = 0x0001,
			RightButton = 0x0002,
			MidButton = 0x0004,
			MouseButtonMask = 0x0007,
			ShiftButton = 0x0100,
			ControlButton = 0x0200,
			AltButton = 0x0400,
			MetaButton = 0x0800,
			KeyButtonMask = 0x0f00,
			Keypad = 0x4000,
		}
		enum Orientation {
			Horizontal = 0,
			Vertical = 1,
		}
		enum SortOrder {
			Ascending = 0,
			Descending = 1,
		}
		enum AlignmentFlags {
			AlignAuto = 0x0000,
			AlignLeft = 0x0001,
			AlignRight = 0x0002,
			AlignHCenter = 0x0004,
			AlignJustify = 0x0008,
			AlignHorizontal_Mask = AlignLeft|AlignRight|AlignHCenter|AlignJustify,
			AlignTop = 0x0010,
			AlignBottom = 0x0020,
			AlignVCenter = 0x0040,
			AlignVertical_Mask = AlignTop|AlignBottom|AlignVCenter,
			AlignCenter = AlignVCenter|AlignHCenter,
		}
		enum TextFlags {
			SingleLine = 0x0080,
			DontClip = 0x0100,
			ExpandTabs = 0x0200,
			ShowPrefix = 0x0400,
			WordBreak = 0x0800,
			BreakAnywhere = 0x1000,
			DontPrint = 0x2000,
			Underline = 0x01000000,
			Overline = 0x02000000,
			StrikeOut = 0x04000000,
			IncludeTrailingSpaces = 0x08000000,
			NoAccel = 0x4000,
		}
		enum WidgetState {
			WState_Created = 0x00000001,
			WState_Disabled = 0x00000002,
			WState_Visible = 0x00000004,
			WState_ForceHide = 0x00000008,
			WState_OwnCursor = 0x00000010,
			WState_MouseTracking = 0x00000020,
			WState_CompressKeys = 0x00000040,
			WState_BlockUpdates = 0x00000080,
			WState_InPaintEvent = 0x00000100,
			WState_Reparented = 0x00000200,
			WState_ConfigPending = 0x00000400,
			WState_Resized = 0x00000800,
			WState_AutoMask = 0x00001000,
			WState_Polished = 0x00002000,
			WState_DND = 0x00004000,
			WState_Reserved0 = 0x00008000,
			WState_FullScreen = 0x00010000,
			WState_OwnSizePolicy = 0x00020000,
			WState_CreatedHidden = 0x00040000,
			WState_Maximized = 0x00080000,
			WState_Minimized = 0x00100000,
			WState_ForceDisabled = 0x00200000,
			WState_Exposed = 0x00400000,
			WState_HasMouse = 0x00800000,
		}
		enum WidgetFlags {
			WType_TopLevel = 0x00000001,
			WType_Dialog = 0x00000002,
			WType_Popup = 0x00000004,
			WType_Desktop = 0x00000008,
			WType_Mask = 0x0000000f,
			WStyle_Customize = 0x00000010,
			WStyle_NormalBorder = 0x00000020,
			WStyle_DialogBorder = 0x00000040,
			WStyle_NoBorder = 0x00002000,
			WStyle_Title = 0x00000080,
			WStyle_SysMenu = 0x00000100,
			WStyle_Minimize = 0x00000200,
			WStyle_Maximize = 0x00000400,
			WStyle_MinMax = WStyle_Minimize|WStyle_Maximize,
			WStyle_Tool = 0x00000800,
			WStyle_StaysOnTop = 0x00001000,
			WStyle_ContextHelp = 0x00004000,
			WStyle_Reserved = 0x00008000,
			WStyle_Mask = 0x0000fff0,
			WDestructiveClose = 0x00010000,
			WPaintDesktop = 0x00020000,
			WPaintUnclipped = 0x00040000,
			WPaintClever = 0x00080000,
			WResizeNoErase = 0x00100000,
			WMouseNoMask = 0x00200000,
			WStaticContents = 0x00400000,
			WRepaintNoErase = 0x00800000,
			WX11BypassWM = 0x00000000,
			WWinOwnDC = 0x01000000,
			WMacNoSheet = 0x00000000,
			WMacDrawer = 0x00000000,
			WGroupLeader = 0x02000000,
			WShowModal = 0x04000000,
			WNoMousePropagation = 0x08000000,
			WSubWindow = 0x10000000,
			WStyle_Splash = WStyle_NoBorder|WMacNoSheet|WStyle_Tool|WWinOwnDC,
			WNoAutoErase = WRepaintNoErase|WResizeNoErase,
			WNorthWestGravity = WStaticContents,
			WType_Modal = WType_Dialog|WShowModal,
			WStyle_Dialog = WType_Dialog,
			WStyle_NoBorderEx = WStyle_NoBorder,
		}
		enum WindowState {
			WindowNoState = 0x00000000,
			WindowMinimized = 0x00000001,
			WindowMaximized = 0x00000002,
			WindowFullScreen = 0x00000004,
			WindowActive = 0x00000008,
		}
		enum ImageConversionFlags {
			ColorMode_Mask = 0x00000003,
			AutoColor = 0x00000000,
			ColorOnly = 0x00000003,
			MonoOnly = 0x00000002,
			AlphaDither_Mask = 0x0000000c,
			ThresholdAlphaDither = 0x00000000,
			OrderedAlphaDither = 0x00000004,
			DiffuseAlphaDither = 0x00000008,
			NoAlpha = 0x0000000c,
			Dither_Mask = 0x00000030,
			DiffuseDither = 0x00000000,
			OrderedDither = 0x00000010,
			ThresholdDither = 0x00000020,
			DitherMode_Mask = 0x000000c0,
			AutoDither = 0x00000000,
			PreferDither = 0x00000040,
			AvoidDither = 0x00000080,
		}
		enum BGMode {
			TransparentMode = 0,
			OpaqueMode = 1,
		}
		enum PaintUnit {
			PixelUnit = 0,
			LoMetricUnit = 1,
			HiMetricUnit = 2,
			LoEnglishUnit = 3,
			HiEnglishUnit = 4,
			TwipsUnit = 5,
		}
		enum GUIStyle {
			MacStyle = 0,
			WindowsStyle = 1,
			Win3Style = 2,
			PMStyle = 3,
			MotifStyle = 4,
		}
		enum SequenceMatch {
			NoMatch = 0,
			PartialMatch = 1,
			Identical = 2,
		}
		enum Modifier {
			META = 0x00100000,
			SHIFT = 0x00200000,
			CTRL = 0x00400000,
			ALT = 0x00800000,
			MODIFIER_MASK = 0x00f00000,
			UNICODE_ACCEL = 0x10000000,
			ASCII_ACCEL = UNICODE_ACCEL,
		}
		enum Key {
			Key_Escape = 0x1000,
			Key_Tab = 0x1001,
			Key_Backtab = 0x1002,
			Key_BackTab = Key_Backtab,
			Key_Backspace = 0x1003,
			Key_BackSpace = Key_Backspace,
			Key_Return = 0x1004,
			Key_Enter = 0x1005,
			Key_Insert = 0x1006,
			Key_Delete = 0x1007,
			Key_Pause = 0x1008,
			Key_Print = 0x1009,
			Key_SysReq = 0x100a,
			Key_Clear = 0x100b,
			Key_Home = 0x1010,
			Key_End = 0x1011,
			Key_Left = 0x1012,
			Key_Up = 0x1013,
			Key_Right = 0x1014,
			Key_Down = 0x1015,
			Key_Prior = 0x1016,
			Key_PageUp = Key_Prior,
			Key_Next = 0x1017,
			Key_PageDown = Key_Next,
			Key_Shift = 0x1020,
			Key_Control = 0x1021,
			Key_Meta = 0x1022,
			Key_Alt = 0x1023,
			Key_CapsLock = 0x1024,
			Key_NumLock = 0x1025,
			Key_ScrollLock = 0x1026,
			Key_F1 = 0x1030,
			Key_F2 = 0x1031,
			Key_F3 = 0x1032,
			Key_F4 = 0x1033,
			Key_F5 = 0x1034,
			Key_F6 = 0x1035,
			Key_F7 = 0x1036,
			Key_F8 = 0x1037,
			Key_F9 = 0x1038,
			Key_F10 = 0x1039,
			Key_F11 = 0x103a,
			Key_F12 = 0x103b,
			Key_F13 = 0x103c,
			Key_F14 = 0x103d,
			Key_F15 = 0x103e,
			Key_F16 = 0x103f,
			Key_F17 = 0x1040,
			Key_F18 = 0x1041,
			Key_F19 = 0x1042,
			Key_F20 = 0x1043,
			Key_F21 = 0x1044,
			Key_F22 = 0x1045,
			Key_F23 = 0x1046,
			Key_F24 = 0x1047,
			Key_F25 = 0x1048,
			Key_F26 = 0x1049,
			Key_F27 = 0x104a,
			Key_F28 = 0x104b,
			Key_F29 = 0x104c,
			Key_F30 = 0x104d,
			Key_F31 = 0x104e,
			Key_F32 = 0x104f,
			Key_F33 = 0x1050,
			Key_F34 = 0x1051,
			Key_F35 = 0x1052,
			Key_Super_L = 0x1053,
			Key_Super_R = 0x1054,
			Key_Menu = 0x1055,
			Key_Hyper_L = 0x1056,
			Key_Hyper_R = 0x1057,
			Key_Help = 0x1058,
			Key_Direction_L = 0x1059,
			Key_Direction_R = 0x1060,
			Key_Space = 0x20,
			Key_Any = Key_Space,
			Key_Exclam = 0x21,
			Key_QuoteDbl = 0x22,
			Key_NumberSign = 0x23,
			Key_Dollar = 0x24,
			Key_Percent = 0x25,
			Key_Ampersand = 0x26,
			Key_Apostrophe = 0x27,
			Key_ParenLeft = 0x28,
			Key_ParenRight = 0x29,
			Key_Asterisk = 0x2a,
			Key_Plus = 0x2b,
			Key_Comma = 0x2c,
			Key_Minus = 0x2d,
			Key_Period = 0x2e,
			Key_Slash = 0x2f,
			Key_0 = 0x30,
			Key_1 = 0x31,
			Key_2 = 0x32,
			Key_3 = 0x33,
			Key_4 = 0x34,
			Key_5 = 0x35,
			Key_6 = 0x36,
			Key_7 = 0x37,
			Key_8 = 0x38,
			Key_9 = 0x39,
			Key_Colon = 0x3a,
			Key_Semicolon = 0x3b,
			Key_Less = 0x3c,
			Key_Equal = 0x3d,
			Key_Greater = 0x3e,
			Key_Question = 0x3f,
			Key_At = 0x40,
			Key_A = 0x41,
			Key_B = 0x42,
			Key_C = 0x43,
			Key_D = 0x44,
			Key_E = 0x45,
			Key_F = 0x46,
			Key_G = 0x47,
			Key_H = 0x48,
			Key_I = 0x49,
			Key_J = 0x4a,
			Key_K = 0x4b,
			Key_L = 0x4c,
			Key_M = 0x4d,
			Key_N = 0x4e,
			Key_O = 0x4f,
			Key_P = 0x50,
			Key_Q = 0x51,
			Key_R = 0x52,
			Key_S = 0x53,
			Key_T = 0x54,
			Key_U = 0x55,
			Key_V = 0x56,
			Key_W = 0x57,
			Key_X = 0x58,
			Key_Y = 0x59,
			Key_Z = 0x5a,
			Key_BracketLeft = 0x5b,
			Key_Backslash = 0x5c,
			Key_BracketRight = 0x5d,
			Key_AsciiCircum = 0x5e,
			Key_Underscore = 0x5f,
			Key_QuoteLeft = 0x60,
			Key_BraceLeft = 0x7b,
			Key_Bar = 0x7c,
			Key_BraceRight = 0x7d,
			Key_AsciiTilde = 0x7e,
			Key_nobreakspace = 0x0a0,
			Key_exclamdown = 0x0a1,
			Key_cent = 0x0a2,
			Key_sterling = 0x0a3,
			Key_currency = 0x0a4,
			Key_yen = 0x0a5,
			Key_brokenbar = 0x0a6,
			Key_section = 0x0a7,
			Key_diaeresis = 0x0a8,
			Key_copyright = 0x0a9,
			Key_ordfeminine = 0x0aa,
			Key_guillemotleft = 0x0ab,
			Key_notsign = 0x0ac,
			Key_hyphen = 0x0ad,
			Key_registered = 0x0ae,
			Key_macron = 0x0af,
			Key_degree = 0x0b0,
			Key_plusminus = 0x0b1,
			Key_twosuperior = 0x0b2,
			Key_threesuperior = 0x0b3,
			Key_acute = 0x0b4,
			Key_mu = 0x0b5,
			Key_paragraph = 0x0b6,
			Key_periodcentered = 0x0b7,
			Key_cedilla = 0x0b8,
			Key_onesuperior = 0x0b9,
			Key_masculine = 0x0ba,
			Key_guillemotright = 0x0bb,
			Key_onequarter = 0x0bc,
			Key_onehalf = 0x0bd,
			Key_threequarters = 0x0be,
			Key_questiondown = 0x0bf,
			Key_Agrave = 0x0c0,
			Key_Aacute = 0x0c1,
			Key_Acircumflex = 0x0c2,
			Key_Atilde = 0x0c3,
			Key_Adiaeresis = 0x0c4,
			Key_Aring = 0x0c5,
			Key_AE = 0x0c6,
			Key_Ccedilla = 0x0c7,
			Key_Egrave = 0x0c8,
			Key_Eacute = 0x0c9,
			Key_Ecircumflex = 0x0ca,
			Key_Ediaeresis = 0x0cb,
			Key_Igrave = 0x0cc,
			Key_Iacute = 0x0cd,
			Key_Icircumflex = 0x0ce,
			Key_Idiaeresis = 0x0cf,
			Key_ETH = 0x0d0,
			Key_Ntilde = 0x0d1,
			Key_Ograve = 0x0d2,
			Key_Oacute = 0x0d3,
			Key_Ocircumflex = 0x0d4,
			Key_Otilde = 0x0d5,
			Key_Odiaeresis = 0x0d6,
			Key_multiply = 0x0d7,
			Key_Ooblique = 0x0d8,
			Key_Ugrave = 0x0d9,
			Key_Uacute = 0x0da,
			Key_Ucircumflex = 0x0db,
			Key_Udiaeresis = 0x0dc,
			Key_Yacute = 0x0dd,
			Key_THORN = 0x0de,
			Key_ssharp = 0x0df,
			Key_agrave = 0x0e0,
			Key_aacute = 0x0e1,
			Key_acircumflex = 0x0e2,
			Key_atilde = 0x0e3,
			Key_adiaeresis = 0x0e4,
			Key_aring = 0x0e5,
			Key_ae = 0x0e6,
			Key_ccedilla = 0x0e7,
			Key_egrave = 0x0e8,
			Key_eacute = 0x0e9,
			Key_ecircumflex = 0x0ea,
			Key_ediaeresis = 0x0eb,
			Key_igrave = 0x0ec,
			Key_iacute = 0x0ed,
			Key_icircumflex = 0x0ee,
			Key_idiaeresis = 0x0ef,
			Key_eth = 0x0f0,
			Key_ntilde = 0x0f1,
			Key_ograve = 0x0f2,
			Key_oacute = 0x0f3,
			Key_ocircumflex = 0x0f4,
			Key_otilde = 0x0f5,
			Key_odiaeresis = 0x0f6,
			Key_division = 0x0f7,
			Key_oslash = 0x0f8,
			Key_ugrave = 0x0f9,
			Key_uacute = 0x0fa,
			Key_ucircumflex = 0x0fb,
			Key_udiaeresis = 0x0fc,
			Key_yacute = 0x0fd,
			Key_thorn = 0x0fe,
			Key_ydiaeresis = 0x0ff,
			Key_Back = 0x1061,
			Key_Forward = 0x1062,
			Key_Stop = 0x1063,
			Key_Refresh = 0x1064,
			Key_VolumeDown = 0x1070,
			Key_VolumeMute = 0x1071,
			Key_VolumeUp = 0x1072,
			Key_BassBoost = 0x1073,
			Key_BassUp = 0x1074,
			Key_BassDown = 0x1075,
			Key_TrebleUp = 0x1076,
			Key_TrebleDown = 0x1077,
			Key_MediaPlay = 0x1080,
			Key_MediaStop = 0x1081,
			Key_MediaPrev = 0x1082,
			Key_MediaNext = 0x1083,
			Key_MediaRecord = 0x1084,
			Key_HomePage = 0x1090,
			Key_Favorites = 0x1091,
			Key_Search = 0x1092,
			Key_Standby = 0x1093,
			Key_OpenUrl = 0x1094,
			Key_LaunchMail = 0x10a0,
			Key_LaunchMedia = 0x10a1,
			Key_Launch0 = 0x10a2,
			Key_Launch1 = 0x10a3,
			Key_Launch2 = 0x10a4,
			Key_Launch3 = 0x10a5,
			Key_Launch4 = 0x10a6,
			Key_Launch5 = 0x10a7,
			Key_Launch6 = 0x10a8,
			Key_Launch7 = 0x10a9,
			Key_Launch8 = 0x10aa,
			Key_Launch9 = 0x10ab,
			Key_LaunchA = 0x10ac,
			Key_LaunchB = 0x10ad,
			Key_LaunchC = 0x10ae,
			Key_LaunchD = 0x10af,
			Key_LaunchE = 0x10b0,
			Key_LaunchF = 0x10b1,
			Key_MediaLast = 0x1fff,
			Key_unknown = 0xffff,
		}
		enum ArrowType {
			UpArrow = 0,
			DownArrow = 1,
			LeftArrow = 2,
			RightArrow = 3,
		}
		enum RasterOp {
			CopyROP = 0,
			OrROP = 1,
			XorROP = 2,
			NotAndROP = 3,
			EraseROP = NotAndROP,
			NotCopyROP = 4,
			NotOrROP = 5,
			NotXorROP = 6,
			AndROP = 7,
			NotEraseROP = AndROP,
			NotROP = 8,
			ClearROP = 9,
			SetROP = 10,
			NopROP = 11,
			AndNotROP = 12,
			OrNotROP = 13,
			NandROP = 14,
			NorROP = 15,
			LastROP = NorROP,
		}
		enum PenStyle {
			NoPen = 0,
			SolidLine = 1,
			DashLine = 2,
			DotLine = 3,
			DashDotLine = 4,
			DashDotDotLine = 5,
			MPenStyle = 0x0f,
		}
		enum PenCapStyle {
			FlatCap = 0x00,
			SquareCap = 0x10,
			RoundCap = 0x20,
			MPenCapStyle = 0x30,
		}
		enum PenJoinStyle {
			MiterJoin = 0x00,
			BevelJoin = 0x40,
			RoundJoin = 0x80,
			MPenJoinStyle = 0xc0,
		}
		enum BrushStyle {
			NoBrush = 0,
			SolidPattern = 1,
			Dense1Pattern = 2,
			Dense2Pattern = 3,
			Dense3Pattern = 4,
			Dense4Pattern = 5,
			Dense5Pattern = 6,
			Dense6Pattern = 7,
			Dense7Pattern = 8,
			HorPattern = 9,
			VerPattern = 10,
			CrossPattern = 11,
			BDiagPattern = 12,
			FDiagPattern = 13,
			DiagCrossPattern = 14,
			CustomPattern = 24,
		}
		enum MacintoshVersion {
			MV_Unknown = 0x0000,
			MV_9 = 0x0001,
			MV_10_DOT_0 = 0x0002,
			MV_10_DOT_1 = 0x0003,
			MV_10_DOT_2 = 0x0004,
			MV_10_DOT_3 = 0x0005,
			MV_10_DOT_4 = 0x0006,
			MV_CHEETAH = MV_10_DOT_0,
			MV_PUMA = MV_10_DOT_1,
			MV_JAGUAR = MV_10_DOT_2,
			MV_PANTHER = MV_10_DOT_3,
			MV_TIGER = MV_10_DOT_4,
		}
		enum WindowsVersion {
			WV_32s = 0x0001,
			WV_95 = 0x0002,
			WV_98 = 0x0003,
			WV_Me = 0x0004,
			WV_DOS_based = 0x000f,
			WV_NT = 0x0010,
			WV_2000 = 0x0020,
			WV_XP = 0x0030,
			WV_2003 = 0x0040,
			WV_NT_based = 0x00f0,
			WV_CE = 0x0100,
			WV_CENET = 0x0200,
			WV_CE_based = 0x0f00,
		}
		enum UIEffect {
			UI_General = 0,
			UI_AnimateMenu = 1,
			UI_FadeMenu = 2,
			UI_AnimateCombo = 3,
			UI_AnimateTooltip = 4,
			UI_FadeTooltip = 5,
			UI_AnimateToolBox = 6,
		}
		enum CursorShape {
			ArrowCursor = 0,
			UpArrowCursor = 1,
			CrossCursor = 2,
			WaitCursor = 3,
			IbeamCursor = 4,
			SizeVerCursor = 5,
			SizeHorCursor = 6,
			SizeBDiagCursor = 7,
			SizeFDiagCursor = 8,
			SizeAllCursor = 9,
			BlankCursor = 10,
			SplitVCursor = 11,
			SplitHCursor = 12,
			PointingHandCursor = 13,
			ForbiddenCursor = 14,
			WhatsThisCursor = 15,
			BusyCursor = 16,
			LastCursor = BusyCursor,
			BitmapCursor = 24,
		}
		enum TextFormat {
			PlainText = 0,
			RichText = 1,
			AutoText = 2,
			LogText = 3,
		}
		enum AnchorAttribute {
			AnchorName = 0,
			AnchorHref = 1,
		}
		enum Dock {
			DockUnmanaged = 0,
			DockTornOff = 1,
			DockTop = 2,
			DockBottom = 3,
			DockRight = 4,
			DockLeft = 5,
			DockMinimized = 6,
			Unmanaged = DockUnmanaged,
			TornOff = DockTornOff,
			Top = DockTop,
			Bottom = DockBottom,
			Right = DockRight,
			Left = DockLeft,
			Minimized = DockMinimized,
		}
		enum DateFormat {
			TextDate = 0,
			ISODate = 1,
			LocalDate = 2,
		}
		enum TimeSpec {
			LocalTime = 0,
			UTC = 1,
		}
		enum BackgroundMode {
			FixedColor = 0,
			FixedPixmap = 1,
			NoBackground = 2,
			PaletteForeground = 3,
			PaletteButton = 4,
			PaletteLight = 5,
			PaletteMidlight = 6,
			PaletteDark = 7,
			PaletteMid = 8,
			PaletteText = 9,
			PaletteBrightText = 10,
			PaletteBase = 11,
			PaletteBackground = 12,
			PaletteShadow = 13,
			PaletteHighlight = 14,
			PaletteHighlightedText = 15,
			PaletteButtonText = 16,
			PaletteLink = 17,
			PaletteLinkVisited = 18,
			X11ParentRelative = 19,
		}
		enum StringComparisonMode {
			CaseSensitive = 0x00001,
			BeginsWith = 0x00002,
			EndsWith = 0x00004,
			Contains = 0x00008,
			ExactMatch = 0x00010,
		}
		enum Corner {
			TopLeft = 0x00000,
			TopRight = 0x00001,
			BottomLeft = 0x00002,
			BottomRight = 0x00003,
		}
		public Qt() : this((Type) null) {
			CreateQtProxy();
			NewQt();
		}
		[SmokeMethod("Qt()")]
		private void NewQt() {
			ProxyQt().NewQt();
		}
		~Qt() {
			DisposeQt();
		}
		public void Dispose() {
			DisposeQt();
		}
		private void DisposeQt() {
			ProxyQt().DisposeQt();
		}
		///<remarks>**************************************************
		///  QPoint stream functions
		///**************************************************</remarks>		<short>                                                                                QPoint stream functions                                                                            </short>
		[SmokeMethod("operator<<(QDataStream&, const QPoint&)")]
		public static QDataStream op_write(QDataStream arg1, QPoint arg2) {
			return StaticQt().op_write(arg1,arg2);
		}
		[SmokeMethod("operator>>(QDataStream&, QPoint&)")]
		public static QDataStream op_read(QDataStream arg1, QPoint arg2) {
			return StaticQt().op_read(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QPoint inline functions
		///**************************************************</remarks>		<short>                                                                                QPoint inline functions                                                                            </short>
		[SmokeMethod("operator==(const QPoint&, const QPoint&)")]
		public static bool op_equals(QPoint p1, QPoint p2) {
			return StaticQt().op_equals(p1,p2);
		}
		[SmokeMethod("operator+(const QPoint&, const QPoint&)")]
		public static QPoint op_plus(QPoint p1, QPoint p2) {
			return StaticQt().op_plus(p1,p2);
		}
		[SmokeMethod("operator-(const QPoint&, const QPoint&)")]
		public static QPoint op_minus(QPoint p1, QPoint p2) {
			return StaticQt().op_minus(p1,p2);
		}
		[SmokeMethod("operator*(const QPoint&, int)")]
		public static QPoint op_mult(QPoint p, int c) {
			return StaticQt().op_mult(p,c);
		}
		[SmokeMethod("operator*(int, const QPoint&)")]
		public static QPoint op_mult(int c, QPoint p) {
			return StaticQt().op_mult(c,p);
		}
		[SmokeMethod("operator*(const QPoint&, double)")]
		public static QPoint op_mult(QPoint p, double c) {
			return StaticQt().op_mult(p,c);
		}
		[SmokeMethod("operator*(double, const QPoint&)")]
		public static QPoint op_mult(double c, QPoint p) {
			return StaticQt().op_mult(c,p);
		}
		[SmokeMethod("operator-(const QPoint&)")]
		public static QPoint op_minus(QPoint p) {
			return StaticQt().op_minus(p);
		}
		[SmokeMethod("operator/(const QPoint&, int)")]
		public static QPoint op_div(QPoint p, int c) {
			return StaticQt().op_div(p,c);
		}
		[SmokeMethod("operator/(const QPoint&, double)")]
		public static QPoint op_div(QPoint p, double c) {
			return StaticQt().op_div(p,c);
		}
		///<remarks>**************************************************
		///  QRegion stream functions
		///**************************************************</remarks>		<short>                                                                                QRegion stream functions                                                                            </short>
		[SmokeMethod("operator<<(QDataStream&, const QRegion&)")]
		public static QDataStream op_write(QDataStream arg1, QRegion arg2) {
			return StaticQt().op_write(arg1,arg2);
		}
		[SmokeMethod("operator>>(QDataStream&, QRegion&)")]
		public static QDataStream op_read(QDataStream arg1, QRegion arg2) {
			return StaticQt().op_read(arg1,arg2);
		}
		///<remarks>**************************************************
		///  Misc. QBitArray operator functions
		///**************************************************</remarks>		<short>                                                                                Misc.</short>
		// QBitArray operator&(const QBitArray& arg1,const QBitArray& arg2); >>>> NOT CONVERTED
		// QBitArray operator|(const QBitArray& arg1,const QBitArray& arg2); >>>> NOT CONVERTED
		// QBitArray operator^(const QBitArray& arg1,const QBitArray& arg2); >>>> NOT CONVERTED
		///<remarks>**************************************************
		///  QBitArray stream functions
		///**************************************************</remarks>		<short>                                                                                QBitArray stream functions                                                                            </short>
		// QDataStream& operator<<(QDataStream& arg1,const QBitArray& arg2); >>>> NOT CONVERTED
		// QDataStream& operator>>(QDataStream& arg1,QBitArray& arg2); >>>> NOT CONVERTED
		///<remarks>**************************************************
		///  QColorGroup/QPalette stream functions
		///**************************************************</remarks>		<short>                                                                                QColorGroup/QPalette stream functions                                                                            </short>
		[SmokeMethod("operator<<(QDataStream&, const QColorGroup&)")]
		public static QDataStream op_write(QDataStream arg1, QColorGroup arg2) {
			return StaticQt().op_write(arg1,arg2);
		}
		[SmokeMethod("operator>>(QDataStream&, QColorGroup&)")]
		public static QDataStream op_read(QDataStream arg1, QColorGroup arg2) {
			return StaticQt().op_read(arg1,arg2);
		}
		[SmokeMethod("operator<<(QDataStream&, const QPalette&)")]
		public static QDataStream op_write(QDataStream arg1, QPalette arg2) {
			return StaticQt().op_write(arg1,arg2);
		}
		[SmokeMethod("operator>>(QDataStream&, QPalette&)")]
		public static QDataStream op_read(QDataStream arg1, QPalette arg2) {
			return StaticQt().op_read(arg1,arg2);
		}
		// QTextStream& operator>>(QTextStream& arg1,QTSFUNC arg2); >>>> NOT CONVERTED
		// QTextStream& operator<<(QTextStream& arg1,QTSFUNC arg2); >>>> NOT CONVERTED
		// QTextStream& operator<<(QTextStream& arg1,QTSManip arg2); >>>> NOT CONVERTED
		[SmokeMethod("bin(QTextStream&)")]
		public static QTextStream Bin(QTextStream s) {
			return StaticQt().Bin(s);
		}
		[SmokeMethod("oct(QTextStream&)")]
		public static QTextStream Oct(QTextStream s) {
			return StaticQt().Oct(s);
		}
		[SmokeMethod("dec(QTextStream&)")]
		public static QTextStream Dec(QTextStream s) {
			return StaticQt().Dec(s);
		}
		[SmokeMethod("hex(QTextStream&)")]
		public static QTextStream Hex(QTextStream s) {
			return StaticQt().Hex(s);
		}
		[SmokeMethod("endl(QTextStream&)")]
		public static QTextStream Endl(QTextStream s) {
			return StaticQt().Endl(s);
		}
		[SmokeMethod("flush(QTextStream&)")]
		public static QTextStream Flush(QTextStream s) {
			return StaticQt().Flush(s);
		}
		[SmokeMethod("ws(QTextStream&)")]
		public static QTextStream Ws(QTextStream s) {
			return StaticQt().Ws(s);
		}
		[SmokeMethod("reset(QTextStream&)")]
		public static QTextStream Reset(QTextStream s) {
			return StaticQt().Reset(s);
		}
		// QTSManip qSetW(int arg1); >>>> NOT CONVERTED
		// QTSManip qSetFill(int arg1); >>>> NOT CONVERTED
		// QTSManip qSetPrecision(int arg1); >>>> NOT CONVERTED
		// QDataStream& operator>>(QDataStream& arg1,QGList& arg2); >>>> NOT CONVERTED
		// QDataStream& operator<<(QDataStream& arg1,const QGList& arg2); >>>> NOT CONVERTED
		[SmokeMethod("qDrawShadeLine(QPainter*, int, int, int, int, const QColorGroup&, bool, int, int)")]
		public static void QDrawShadeLine(QPainter p, int x1, int y1, int x2, int y2, QColorGroup g, bool sunken, int lineWidth, int midLineWidth) {
			StaticQt().QDrawShadeLine(p,x1,y1,x2,y2,g,sunken,lineWidth,midLineWidth);
		}
		[SmokeMethod("qDrawShadeLine(QPainter*, int, int, int, int, const QColorGroup&, bool, int)")]
		public static void QDrawShadeLine(QPainter p, int x1, int y1, int x2, int y2, QColorGroup g, bool sunken, int lineWidth) {
			StaticQt().QDrawShadeLine(p,x1,y1,x2,y2,g,sunken,lineWidth);
		}
		[SmokeMethod("qDrawShadeLine(QPainter*, int, int, int, int, const QColorGroup&, bool)")]
		public static void QDrawShadeLine(QPainter p, int x1, int y1, int x2, int y2, QColorGroup g, bool sunken) {
			StaticQt().QDrawShadeLine(p,x1,y1,x2,y2,g,sunken);
		}
		[SmokeMethod("qDrawShadeLine(QPainter*, int, int, int, int, const QColorGroup&)")]
		public static void QDrawShadeLine(QPainter p, int x1, int y1, int x2, int y2, QColorGroup g) {
			StaticQt().QDrawShadeLine(p,x1,y1,x2,y2,g);
		}
		[SmokeMethod("qDrawShadeLine(QPainter*, const QPoint&, const QPoint&, const QColorGroup&, bool, int, int)")]
		public static void QDrawShadeLine(QPainter p, QPoint p1, QPoint p2, QColorGroup g, bool sunken, int lineWidth, int midLineWidth) {
			StaticQt().QDrawShadeLine(p,p1,p2,g,sunken,lineWidth,midLineWidth);
		}
		[SmokeMethod("qDrawShadeLine(QPainter*, const QPoint&, const QPoint&, const QColorGroup&, bool, int)")]
		public static void QDrawShadeLine(QPainter p, QPoint p1, QPoint p2, QColorGroup g, bool sunken, int lineWidth) {
			StaticQt().QDrawShadeLine(p,p1,p2,g,sunken,lineWidth);
		}
		[SmokeMethod("qDrawShadeLine(QPainter*, const QPoint&, const QPoint&, const QColorGroup&, bool)")]
		public static void QDrawShadeLine(QPainter p, QPoint p1, QPoint p2, QColorGroup g, bool sunken) {
			StaticQt().QDrawShadeLine(p,p1,p2,g,sunken);
		}
		[SmokeMethod("qDrawShadeLine(QPainter*, const QPoint&, const QPoint&, const QColorGroup&)")]
		public static void QDrawShadeLine(QPainter p, QPoint p1, QPoint p2, QColorGroup g) {
			StaticQt().QDrawShadeLine(p,p1,p2,g);
		}
		[SmokeMethod("qDrawShadeRect(QPainter*, int, int, int, int, const QColorGroup&, bool, int, int, const QBrush*)")]
		public static void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QColorGroup arg6, bool sunken, int lineWidth, int midLineWidth, QBrush fill) {
			StaticQt().QDrawShadeRect(p,x,y,w,h,arg6,sunken,lineWidth,midLineWidth,fill);
		}
		[SmokeMethod("qDrawShadeRect(QPainter*, int, int, int, int, const QColorGroup&, bool, int, int)")]
		public static void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QColorGroup arg6, bool sunken, int lineWidth, int midLineWidth) {
			StaticQt().QDrawShadeRect(p,x,y,w,h,arg6,sunken,lineWidth,midLineWidth);
		}
		[SmokeMethod("qDrawShadeRect(QPainter*, int, int, int, int, const QColorGroup&, bool, int)")]
		public static void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QColorGroup arg6, bool sunken, int lineWidth) {
			StaticQt().QDrawShadeRect(p,x,y,w,h,arg6,sunken,lineWidth);
		}
		[SmokeMethod("qDrawShadeRect(QPainter*, int, int, int, int, const QColorGroup&, bool)")]
		public static void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QColorGroup arg6, bool sunken) {
			StaticQt().QDrawShadeRect(p,x,y,w,h,arg6,sunken);
		}
		[SmokeMethod("qDrawShadeRect(QPainter*, int, int, int, int, const QColorGroup&)")]
		public static void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QColorGroup arg6) {
			StaticQt().QDrawShadeRect(p,x,y,w,h,arg6);
		}
		[SmokeMethod("qDrawShadeRect(QPainter*, const QRect&, const QColorGroup&, bool, int, int, const QBrush*)")]
		public static void QDrawShadeRect(QPainter p, QRect r, QColorGroup arg3, bool sunken, int lineWidth, int midLineWidth, QBrush fill) {
			StaticQt().QDrawShadeRect(p,r,arg3,sunken,lineWidth,midLineWidth,fill);
		}
		[SmokeMethod("qDrawShadeRect(QPainter*, const QRect&, const QColorGroup&, bool, int, int)")]
		public static void QDrawShadeRect(QPainter p, QRect r, QColorGroup arg3, bool sunken, int lineWidth, int midLineWidth) {
			StaticQt().QDrawShadeRect(p,r,arg3,sunken,lineWidth,midLineWidth);
		}
		[SmokeMethod("qDrawShadeRect(QPainter*, const QRect&, const QColorGroup&, bool, int)")]
		public static void QDrawShadeRect(QPainter p, QRect r, QColorGroup arg3, bool sunken, int lineWidth) {
			StaticQt().QDrawShadeRect(p,r,arg3,sunken,lineWidth);
		}
		[SmokeMethod("qDrawShadeRect(QPainter*, const QRect&, const QColorGroup&, bool)")]
		public static void QDrawShadeRect(QPainter p, QRect r, QColorGroup arg3, bool sunken) {
			StaticQt().QDrawShadeRect(p,r,arg3,sunken);
		}
		[SmokeMethod("qDrawShadeRect(QPainter*, const QRect&, const QColorGroup&)")]
		public static void QDrawShadeRect(QPainter p, QRect r, QColorGroup arg3) {
			StaticQt().QDrawShadeRect(p,r,arg3);
		}
		[SmokeMethod("qDrawShadePanel(QPainter*, int, int, int, int, const QColorGroup&, bool, int, const QBrush*)")]
		public static void QDrawShadePanel(QPainter p, int x, int y, int w, int h, QColorGroup arg6, bool sunken, int lineWidth, QBrush fill) {
			StaticQt().QDrawShadePanel(p,x,y,w,h,arg6,sunken,lineWidth,fill);
		}
		[SmokeMethod("qDrawShadePanel(QPainter*, int, int, int, int, const QColorGroup&, bool, int)")]
		public static void QDrawShadePanel(QPainter p, int x, int y, int w, int h, QColorGroup arg6, bool sunken, int lineWidth) {
			StaticQt().QDrawShadePanel(p,x,y,w,h,arg6,sunken,lineWidth);
		}
		[SmokeMethod("qDrawShadePanel(QPainter*, int, int, int, int, const QColorGroup&, bool)")]
		public static void QDrawShadePanel(QPainter p, int x, int y, int w, int h, QColorGroup arg6, bool sunken) {
			StaticQt().QDrawShadePanel(p,x,y,w,h,arg6,sunken);
		}
		[SmokeMethod("qDrawShadePanel(QPainter*, int, int, int, int, const QColorGroup&)")]
		public static void QDrawShadePanel(QPainter p, int x, int y, int w, int h, QColorGroup arg6) {
			StaticQt().QDrawShadePanel(p,x,y,w,h,arg6);
		}
		[SmokeMethod("qDrawShadePanel(QPainter*, const QRect&, const QColorGroup&, bool, int, const QBrush*)")]
		public static void QDrawShadePanel(QPainter p, QRect r, QColorGroup arg3, bool sunken, int lineWidth, QBrush fill) {
			StaticQt().QDrawShadePanel(p,r,arg3,sunken,lineWidth,fill);
		}
		[SmokeMethod("qDrawShadePanel(QPainter*, const QRect&, const QColorGroup&, bool, int)")]
		public static void QDrawShadePanel(QPainter p, QRect r, QColorGroup arg3, bool sunken, int lineWidth) {
			StaticQt().QDrawShadePanel(p,r,arg3,sunken,lineWidth);
		}
		[SmokeMethod("qDrawShadePanel(QPainter*, const QRect&, const QColorGroup&, bool)")]
		public static void QDrawShadePanel(QPainter p, QRect r, QColorGroup arg3, bool sunken) {
			StaticQt().QDrawShadePanel(p,r,arg3,sunken);
		}
		[SmokeMethod("qDrawShadePanel(QPainter*, const QRect&, const QColorGroup&)")]
		public static void QDrawShadePanel(QPainter p, QRect r, QColorGroup arg3) {
			StaticQt().QDrawShadePanel(p,r,arg3);
		}
		[SmokeMethod("qDrawWinButton(QPainter*, int, int, int, int, const QColorGroup&, bool, const QBrush*)")]
		public static void QDrawWinButton(QPainter p, int x, int y, int w, int h, QColorGroup g, bool sunken, QBrush fill) {
			StaticQt().QDrawWinButton(p,x,y,w,h,g,sunken,fill);
		}
		[SmokeMethod("qDrawWinButton(QPainter*, int, int, int, int, const QColorGroup&, bool)")]
		public static void QDrawWinButton(QPainter p, int x, int y, int w, int h, QColorGroup g, bool sunken) {
			StaticQt().QDrawWinButton(p,x,y,w,h,g,sunken);
		}
		[SmokeMethod("qDrawWinButton(QPainter*, int, int, int, int, const QColorGroup&)")]
		public static void QDrawWinButton(QPainter p, int x, int y, int w, int h, QColorGroup g) {
			StaticQt().QDrawWinButton(p,x,y,w,h,g);
		}
		[SmokeMethod("qDrawWinButton(QPainter*, const QRect&, const QColorGroup&, bool, const QBrush*)")]
		public static void QDrawWinButton(QPainter p, QRect r, QColorGroup g, bool sunken, QBrush fill) {
			StaticQt().QDrawWinButton(p,r,g,sunken,fill);
		}
		[SmokeMethod("qDrawWinButton(QPainter*, const QRect&, const QColorGroup&, bool)")]
		public static void QDrawWinButton(QPainter p, QRect r, QColorGroup g, bool sunken) {
			StaticQt().QDrawWinButton(p,r,g,sunken);
		}
		[SmokeMethod("qDrawWinButton(QPainter*, const QRect&, const QColorGroup&)")]
		public static void QDrawWinButton(QPainter p, QRect r, QColorGroup g) {
			StaticQt().QDrawWinButton(p,r,g);
		}
		[SmokeMethod("qDrawWinPanel(QPainter*, int, int, int, int, const QColorGroup&, bool, const QBrush*)")]
		public static void QDrawWinPanel(QPainter p, int x, int y, int w, int h, QColorGroup arg6, bool sunken, QBrush fill) {
			StaticQt().QDrawWinPanel(p,x,y,w,h,arg6,sunken,fill);
		}
		[SmokeMethod("qDrawWinPanel(QPainter*, int, int, int, int, const QColorGroup&, bool)")]
		public static void QDrawWinPanel(QPainter p, int x, int y, int w, int h, QColorGroup arg6, bool sunken) {
			StaticQt().QDrawWinPanel(p,x,y,w,h,arg6,sunken);
		}
		[SmokeMethod("qDrawWinPanel(QPainter*, int, int, int, int, const QColorGroup&)")]
		public static void QDrawWinPanel(QPainter p, int x, int y, int w, int h, QColorGroup arg6) {
			StaticQt().QDrawWinPanel(p,x,y,w,h,arg6);
		}
		[SmokeMethod("qDrawWinPanel(QPainter*, const QRect&, const QColorGroup&, bool, const QBrush*)")]
		public static void QDrawWinPanel(QPainter p, QRect r, QColorGroup arg3, bool sunken, QBrush fill) {
			StaticQt().QDrawWinPanel(p,r,arg3,sunken,fill);
		}
		[SmokeMethod("qDrawWinPanel(QPainter*, const QRect&, const QColorGroup&, bool)")]
		public static void QDrawWinPanel(QPainter p, QRect r, QColorGroup arg3, bool sunken) {
			StaticQt().QDrawWinPanel(p,r,arg3,sunken);
		}
		[SmokeMethod("qDrawWinPanel(QPainter*, const QRect&, const QColorGroup&)")]
		public static void QDrawWinPanel(QPainter p, QRect r, QColorGroup arg3) {
			StaticQt().QDrawWinPanel(p,r,arg3);
		}
		[SmokeMethod("qDrawPlainRect(QPainter*, int, int, int, int, const QColor&, int, const QBrush*)")]
		public static void QDrawPlainRect(QPainter p, int x, int y, int w, int h, QColor arg6, int lineWidth, QBrush fill) {
			StaticQt().QDrawPlainRect(p,x,y,w,h,arg6,lineWidth,fill);
		}
		[SmokeMethod("qDrawPlainRect(QPainter*, int, int, int, int, const QColor&, int)")]
		public static void QDrawPlainRect(QPainter p, int x, int y, int w, int h, QColor arg6, int lineWidth) {
			StaticQt().QDrawPlainRect(p,x,y,w,h,arg6,lineWidth);
		}
		[SmokeMethod("qDrawPlainRect(QPainter*, int, int, int, int, const QColor&)")]
		public static void QDrawPlainRect(QPainter p, int x, int y, int w, int h, QColor arg6) {
			StaticQt().QDrawPlainRect(p,x,y,w,h,arg6);
		}
		[SmokeMethod("qDrawPlainRect(QPainter*, const QRect&, const QColor&, int, const QBrush*)")]
		public static void QDrawPlainRect(QPainter p, QRect r, QColor arg3, int lineWidth, QBrush fill) {
			StaticQt().QDrawPlainRect(p,r,arg3,lineWidth,fill);
		}
		[SmokeMethod("qDrawPlainRect(QPainter*, const QRect&, const QColor&, int)")]
		public static void QDrawPlainRect(QPainter p, QRect r, QColor arg3, int lineWidth) {
			StaticQt().QDrawPlainRect(p,r,arg3,lineWidth);
		}
		[SmokeMethod("qDrawPlainRect(QPainter*, const QRect&, const QColor&)")]
		public static void QDrawPlainRect(QPainter p, QRect r, QColor arg3) {
			StaticQt().QDrawPlainRect(p,r,arg3);
		}
		[SmokeMethod("qItemRect(QPainter*, Qt::GUIStyle, int, int, int, int, int, bool, const QPixmap*, const QString&, int)")]
		public static QRect QItemRect(QPainter p, int gs, int x, int y, int w, int h, int flags, bool enabled, QPixmap pixmap, string text, int len) {
			return StaticQt().QItemRect(p,gs,x,y,w,h,flags,enabled,pixmap,text,len);
		}
		[SmokeMethod("qItemRect(QPainter*, Qt::GUIStyle, int, int, int, int, int, bool, const QPixmap*, const QString&)")]
		public static QRect QItemRect(QPainter p, int gs, int x, int y, int w, int h, int flags, bool enabled, QPixmap pixmap, string text) {
			return StaticQt().QItemRect(p,gs,x,y,w,h,flags,enabled,pixmap,text);
		}
		[SmokeMethod("qDrawItem(QPainter*, Qt::GUIStyle, int, int, int, int, int, const QColorGroup&, bool, const QPixmap*, const QString&, int, const QColor*)")]
		public static void QDrawItem(QPainter p, int gs, int x, int y, int w, int h, int flags, QColorGroup g, bool enabled, QPixmap pixmap, string text, int len, QColor penColor) {
			StaticQt().QDrawItem(p,gs,x,y,w,h,flags,g,enabled,pixmap,text,len,penColor);
		}
		[SmokeMethod("qDrawItem(QPainter*, Qt::GUIStyle, int, int, int, int, int, const QColorGroup&, bool, const QPixmap*, const QString&, int)")]
		public static void QDrawItem(QPainter p, int gs, int x, int y, int w, int h, int flags, QColorGroup g, bool enabled, QPixmap pixmap, string text, int len) {
			StaticQt().QDrawItem(p,gs,x,y,w,h,flags,g,enabled,pixmap,text,len);
		}
		[SmokeMethod("qDrawItem(QPainter*, Qt::GUIStyle, int, int, int, int, int, const QColorGroup&, bool, const QPixmap*, const QString&)")]
		public static void QDrawItem(QPainter p, int gs, int x, int y, int w, int h, int flags, QColorGroup g, bool enabled, QPixmap pixmap, string text) {
			StaticQt().QDrawItem(p,gs,x,y,w,h,flags,g,enabled,pixmap,text);
		}
		[SmokeMethod("qDrawArrow(QPainter*, Qt::ArrowType, Qt::GUIStyle, bool, int, int, int, int, const QColorGroup&, bool)")]
		public static void QDrawArrow(QPainter p, int type, int style, bool down, int x, int y, int w, int h, QColorGroup g, bool enabled) {
			StaticQt().QDrawArrow(p,type,style,down,x,y,w,h,g,enabled);
		}
		///<remarks>**************************************************
		///  QCursor stream functions
		///**************************************************</remarks>		<short>                                                                                QCursor stream functions                                                                            </short>
		[SmokeMethod("operator<<(QDataStream&, const QCursor&)")]
		public static QDataStream op_write(QDataStream arg1, QCursor arg2) {
			return StaticQt().op_write(arg1,arg2);
		}
		[SmokeMethod("operator>>(QDataStream&, QCursor&)")]
		public static QDataStream op_read(QDataStream arg1, QCursor arg2) {
			return StaticQt().op_read(arg1,arg2);
		}
		[SmokeMethod("qAppName()")]
		public static string QAppName() {
			return StaticQt().QAppName();
		}
		// void qAddPostRoutine(QtCleanUpFunction arg1); >>>> NOT CONVERTED
		// void qRemovePostRoutine(QtCleanUpFunction arg1); >>>> NOT CONVERTED
		[SmokeMethod("operator<<(QTextStream&, const QDomNode&)")]
		public static QTextStream op_write(QTextStream arg1, QDomNode arg2) {
			return StaticQt().op_write(arg1,arg2);
		}
		[SmokeMethod("operator*(const QWMatrix&, const QWMatrix&)")]
		public static QWMatrix op_mult(QWMatrix arg1, QWMatrix arg2) {
			return StaticQt().op_mult(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QWMatrix stream functions
		///**************************************************</remarks>		<short>                                                                                QWMatrix stream functions                                                                            </short>
		[SmokeMethod("operator<<(QDataStream&, const QWMatrix&)")]
		public static QDataStream op_write(QDataStream arg1, QWMatrix arg2) {
			return StaticQt().op_write(arg1,arg2);
		}
		[SmokeMethod("operator>>(QDataStream&, QWMatrix&)")]
		public static QDataStream op_read(QDataStream arg1, QWMatrix arg2) {
			return StaticQt().op_read(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QBrush stream functions
		///**************************************************</remarks>		<short>                                                                                QBrush stream functions                                                                            </short>
		[SmokeMethod("operator<<(QDataStream&, const QBrush&)")]
		public static QDataStream op_write(QDataStream arg1, QBrush arg2) {
			return StaticQt().op_write(arg1,arg2);
		}
		[SmokeMethod("operator>>(QDataStream&, QBrush&)")]
		public static QDataStream op_read(QDataStream arg1, QBrush arg2) {
			return StaticQt().op_read(arg1,arg2);
		}
		[SmokeMethod("operator<<(QDataStream&, const QImage&)")]
		public static QDataStream op_write(QDataStream arg1, QImage arg2) {
			return StaticQt().op_write(arg1,arg2);
		}
		[SmokeMethod("operator>>(QDataStream&, QImage&)")]
		public static QDataStream op_read(QDataStream arg1, QImage arg2) {
			return StaticQt().op_read(arg1,arg2);
		}
		[SmokeMethod("bitBlt(QImage*, int, int, const QImage*, int, int, int, int, int)")]
		public static void BitBlt(QImage dst, int dx, int dy, QImage src, int sx, int sy, int sw, int sh, int conversion_flags) {
			StaticQt().BitBlt(dst,dx,dy,src,sx,sy,sw,sh,conversion_flags);
		}
		[SmokeMethod("bitBlt(QImage*, int, int, const QImage*, int, int, int, int)")]
		public static void BitBlt(QImage dst, int dx, int dy, QImage src, int sx, int sy, int sw, int sh) {
			StaticQt().BitBlt(dst,dx,dy,src,sx,sy,sw,sh);
		}
		[SmokeMethod("bitBlt(QImage*, int, int, const QImage*, int, int, int)")]
		public static void BitBlt(QImage dst, int dx, int dy, QImage src, int sx, int sy, int sw) {
			StaticQt().BitBlt(dst,dx,dy,src,sx,sy,sw);
		}
		[SmokeMethod("bitBlt(QImage*, int, int, const QImage*, int, int)")]
		public static void BitBlt(QImage dst, int dx, int dy, QImage src, int sx, int sy) {
			StaticQt().BitBlt(dst,dx,dy,src,sx,sy);
		}
		[SmokeMethod("bitBlt(QImage*, int, int, const QImage*, int)")]
		public static void BitBlt(QImage dst, int dx, int dy, QImage src, int sx) {
			StaticQt().BitBlt(dst,dx,dy,src,sx);
		}
		[SmokeMethod("bitBlt(QImage*, int, int, const QImage*)")]
		public static void BitBlt(QImage dst, int dx, int dy, QImage src) {
			StaticQt().BitBlt(dst,dx,dy,src);
		}
		[SmokeMethod("operator>>(QDataStream&, QVariant&)")]
		public static QDataStream op_read(QDataStream s, QVariant p) {
			return StaticQt().op_read(s,p);
		}
		[SmokeMethod("operator<<(QDataStream&, const QVariant&)")]
		public static QDataStream op_write(QDataStream s, QVariant p) {
			return StaticQt().op_write(s,p);
		}
		[SmokeMethod("operator>>(QDataStream&, QVariant::Type&)")]
		public static QDataStream op_read(QDataStream s, int p) {
			return StaticQt().op_read(s,p);
		}
		[SmokeMethod("operator<<(QDataStream&, const QVariant::Type)")]
		public static QDataStream op_write(QDataStream s, int p) {
			return StaticQt().op_write(s,p);
		}
		///<remarks>*************************************************
		/// $Id: qt/qgl.h   3.3.5   edited Aug 31 12:17 $
		///
		///* Definition of OpenGL classes for Qt
		///
		///* Created : 970112
		///
		///* Copyright (C) 1992-2005 Trolltech AS.  All rights reserved.
		///
		///* This file is part of the opengl module of the Qt GUI Toolkit.
		///
		///* This file may be distributed under the terms of the Q Public License
		/// as defined by Trolltech AS of Norway and appearing in the file
		/// LICENSE.QPL included in the packaging of this file.
		///
		///* This file may be distributed and/or modified under the terms of the
		/// GNU General Public License version 2 as published by the Free Software
		/// Foundation and appearing in the file LICENSE.GPL included in the
		/// packaging of this file.
		///
		///* Licensees holding valid Qt Enterprise Edition licenses may use this
		/// file in accordance with the Qt Commercial License Agreement provided
		/// with the Software.
		///
		///* This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
		/// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
		///
		///* See http://www.trolltech.com/pricing.html or email sales@trolltech.com for
		///   information about Qt Commercial License Agreements.
		/// See http://www.trolltech.com/qpl/ for QPL licensing information.
		/// See http://www.trolltech.com/gpl/ for GPL licensing information.
		///
		///* Contact info@trolltech.com if any conditions of this licensing are
		/// not clear to you.
		///
		///**********************************************</remarks>		<short>                                                                               $Id: qt/qgl.</short>
		[SmokeMethod("qGLVersion()")]
		public static string QGLVersion() {
			return StaticQt().QGLVersion();
		}
		[SmokeMethod("operator==(const QGLFormat&, const QGLFormat&)")]
		public static bool op_equals(QGLFormat arg1, QGLFormat arg2) {
			return StaticQt().op_equals(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QFont stream functions
		///**************************************************</remarks>		<short>                                                                                QFont stream functions                                                                            </short>
		[SmokeMethod("operator<<(QDataStream&, const QFont&)")]
		public static QDataStream op_write(QDataStream arg1, QFont arg2) {
			return StaticQt().op_write(arg1,arg2);
		}
		[SmokeMethod("operator>>(QDataStream&, QFont&)")]
		public static QDataStream op_read(QDataStream arg1, QFont arg2) {
			return StaticQt().op_read(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QSize stream functions
		///**************************************************</remarks>		<short>                                                                                QSize stream functions                                                                            </short>
		[SmokeMethod("operator<<(QDataStream&, const QSize&)")]
		public static QDataStream op_write(QDataStream arg1, QSize arg2) {
			return StaticQt().op_write(arg1,arg2);
		}
		[SmokeMethod("operator>>(QDataStream&, QSize&)")]
		public static QDataStream op_read(QDataStream arg1, QSize arg2) {
			return StaticQt().op_read(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QSize inline functions
		///**************************************************</remarks>		<short>                                                                                QSize inline functions                                                                            </short>
		[SmokeMethod("operator==(const QSize&, const QSize&)")]
		public static bool op_equals(QSize s1, QSize s2) {
			return StaticQt().op_equals(s1,s2);
		}
		[SmokeMethod("operator+(const QSize&, const QSize&)")]
		public static QSize op_plus(QSize s1, QSize s2) {
			return StaticQt().op_plus(s1,s2);
		}
		[SmokeMethod("operator-(const QSize&, const QSize&)")]
		public static QSize op_minus(QSize s1, QSize s2) {
			return StaticQt().op_minus(s1,s2);
		}
		[SmokeMethod("operator*(const QSize&, int)")]
		public static QSize op_mult(QSize s, int c) {
			return StaticQt().op_mult(s,c);
		}
		[SmokeMethod("operator*(int, const QSize&)")]
		public static QSize op_mult(int c, QSize s) {
			return StaticQt().op_mult(c,s);
		}
		[SmokeMethod("operator*(const QSize&, double)")]
		public static QSize op_mult(QSize s, double c) {
			return StaticQt().op_mult(s,c);
		}
		[SmokeMethod("operator*(double, const QSize&)")]
		public static QSize op_mult(double c, QSize s) {
			return StaticQt().op_mult(c,s);
		}
		[SmokeMethod("operator/(const QSize&, int)")]
		public static QSize op_div(QSize s, int c) {
			return StaticQt().op_div(s,c);
		}
		[SmokeMethod("operator/(const QSize&, double)")]
		public static QSize op_div(QSize s, double c) {
			return StaticQt().op_div(s,c);
		}
		[SmokeMethod("operator>>(QDataStream&, QStringList&)")]
		public static QDataStream op_read(QDataStream arg1, string[] arg2) {
			return StaticQt().op_read(arg1,arg2);
		}
		[SmokeMethod("operator<<(QDataStream&, const QStringList&)")]
		public static QDataStream op_write(QDataStream arg1, string[] arg2) {
			return StaticQt().op_write(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QPixmap stream functions
		///**************************************************</remarks>		<short>                                                                                QPixmap stream functions                                                                            </short>
		[SmokeMethod("operator<<(QDataStream&, const QPixmap&)")]
		public static QDataStream op_write(QDataStream arg1, QPixmap arg2) {
			return StaticQt().op_write(arg1,arg2);
		}
		[SmokeMethod("operator>>(QDataStream&, QPixmap&)")]
		public static QDataStream op_read(QDataStream arg1, QPixmap arg2) {
			return StaticQt().op_read(arg1,arg2);
		}
		[SmokeMethod("copyBlt(QPixmap*, int, int, const QPixmap*, int, int, int, int)")]
		public static void CopyBlt(QPixmap dst, int dx, int dy, QPixmap src, int sx, int sy, int sw, int sh) {
			StaticQt().CopyBlt(dst,dx,dy,src,sx,sy,sw,sh);
		}
		[SmokeMethod("copyBlt(QPixmap*, int, int, const QPixmap*, int, int, int)")]
		public static void CopyBlt(QPixmap dst, int dx, int dy, QPixmap src, int sx, int sy, int sw) {
			StaticQt().CopyBlt(dst,dx,dy,src,sx,sy,sw);
		}
		[SmokeMethod("copyBlt(QPixmap*, int, int, const QPixmap*, int, int)")]
		public static void CopyBlt(QPixmap dst, int dx, int dy, QPixmap src, int sx, int sy) {
			StaticQt().CopyBlt(dst,dx,dy,src,sx,sy);
		}
		[SmokeMethod("copyBlt(QPixmap*, int, int, const QPixmap*, int)")]
		public static void CopyBlt(QPixmap dst, int dx, int dy, QPixmap src, int sx) {
			StaticQt().CopyBlt(dst,dx,dy,src,sx);
		}
		[SmokeMethod("copyBlt(QPixmap*, int, int, const QPixmap*)")]
		public static void CopyBlt(QPixmap dst, int dx, int dy, QPixmap src) {
			StaticQt().CopyBlt(dst,dx,dy,src);
		}
		///<remarks>*************************************************
		/// $Id: qt/qnetwork.h   3.3.5   edited Aug 31 12:17 $
		///
		///* Definition of qInitNetworkProtocols function.
		///
		///* Created : 970521
		///
		///* Copyright (C) 1992-2005 Trolltech AS.  All rights reserved.
		///
		///* This file is part of the network module of the Qt GUI Toolkit.
		///
		///* This file may be distributed under the terms of the Q Public License
		/// as defined by Trolltech AS of Norway and appearing in the file
		/// LICENSE.QPL included in the packaging of this file.
		///
		///* This file may be distributed and/or modified under the terms of the
		/// GNU General Public License version 2 as published by the Free Software
		/// Foundation and appearing in the file LICENSE.GPL included in the
		/// packaging of this file.
		///
		///* Licensees holding valid Qt Enterprise Edition licenses may use this
		/// file in accordance with the Qt Commercial License Agreement provided
		/// with the Software.
		///
		///* This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
		/// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
		///
		///* See http://www.trolltech.com/pricing.html or email sales@trolltech.com for
		///   information about Qt Commercial License Agreements.
		/// See http://www.trolltech.com/qpl/ for QPL licensing information.
		/// See http://www.trolltech.com/gpl/ for GPL licensing information.
		///
		///* Contact info@trolltech.com if any conditions of this licensing are
		/// not clear to you.
		///
		///**********************************************</remarks>		<short>                                                                               $Id: qt/qnetwork.</short>
		[SmokeMethod("qInitNetworkProtocols()")]
		public static void QInitNetworkProtocols() {
			StaticQt().QInitNetworkProtocols();
		}
		///<remarks>**************************************************
		///  QPointArray stream functions
		///**************************************************</remarks>		<short>                                                                                QPointArray stream functions                                                                            </short>
		[SmokeMethod("operator<<(QDataStream&, const QPointArray&)")]
		public static QDataStream op_write(QDataStream arg1, QPointArray arg2) {
			return StaticQt().op_write(arg1,arg2);
		}
		[SmokeMethod("operator>>(QDataStream&, QPointArray&)")]
		public static QDataStream op_read(QDataStream arg1, QPointArray arg2) {
			return StaticQt().op_read(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QPen stream functions
		///**************************************************</remarks>		<short>                                                                                QPen stream functions                                                                            </short>
		[SmokeMethod("operator<<(QDataStream&, const QPen&)")]
		public static QDataStream op_write(QDataStream arg1, QPen arg2) {
			return StaticQt().op_write(arg1,arg2);
		}
		[SmokeMethod("operator>>(QDataStream&, QPen&)")]
		public static QDataStream op_read(QDataStream arg1, QPen arg2) {
			return StaticQt().op_read(arg1,arg2);
		}
		[SmokeMethod("qRed(QRgb)")]
		public static int QRed(uint rgb) {
			return StaticQt().QRed(rgb);
		}
		[SmokeMethod("qGreen(QRgb)")]
		public static int QGreen(uint rgb) {
			return StaticQt().QGreen(rgb);
		}
		[SmokeMethod("qBlue(QRgb)")]
		public static int QBlue(uint rgb) {
			return StaticQt().QBlue(rgb);
		}
		[SmokeMethod("qAlpha(QRgb)")]
		public static int QAlpha(uint rgb) {
			return StaticQt().QAlpha(rgb);
		}
		[SmokeMethod("qRgb(int, int, int)")]
		public static uint QRgb(int r, int g, int b) {
			return StaticQt().QRgb(r,g,b);
		}
		[SmokeMethod("qRgba(int, int, int, int)")]
		public static uint QRgba(int r, int g, int b, int a) {
			return StaticQt().QRgba(r,g,b,a);
		}
		[SmokeMethod("qGray(int, int, int)")]
		public static int QGray(int r, int g, int b) {
			return StaticQt().QGray(r,g,b);
		}
		[SmokeMethod("qGray(QRgb)")]
		public static int QGray(uint rgb) {
			return StaticQt().QGray(rgb);
		}
		///<remarks>**************************************************
		///  QColor stream functions
		///**************************************************</remarks>		<short>                                                                                QColor stream functions                                                                            </short>
		[SmokeMethod("operator<<(QDataStream&, const QColor&)")]
		public static QDataStream op_write(QDataStream arg1, QColor arg2) {
			return StaticQt().op_write(arg1,arg2);
		}
		[SmokeMethod("operator>>(QDataStream&, QColor&)")]
		public static QDataStream op_read(QDataStream arg1, QColor arg2) {
			return StaticQt().op_read(arg1,arg2);
		}
		[SmokeMethod("operator<<(QTextStream&, const QSplitter&)")]
		public static QTextStream op_write(QTextStream arg1, QSplitter arg2) {
			return StaticQt().op_write(arg1,arg2);
		}
		[SmokeMethod("operator>>(QTextStream&, QSplitter&)")]
		public static QTextStream op_read(QTextStream arg1, QSplitter arg2) {
			return StaticQt().op_read(arg1,arg2);
		}
		[SmokeMethod("operator<<(QDataStream&, const QUuid&)")]
		public static QDataStream op_write(QDataStream arg1, QUuid arg2) {
			return StaticQt().op_write(arg1,arg2);
		}
		[SmokeMethod("operator>>(QDataStream&, QUuid&)")]
		public static QDataStream op_read(QDataStream arg1, QUuid arg2) {
			return StaticQt().op_read(arg1,arg2);
		}
		///<remarks>**************************************************
		///  Date and time stream functions
		///**************************************************</remarks>		<short>                                                                                Date and time stream functions                                                                            </short>
		[SmokeMethod("operator<<(QDataStream&, const QDate&)")]
		public static QDataStream op_write(QDataStream arg1, DateTime arg2) {
			return StaticQt().op_write(arg1,arg2);
		}
		[SmokeMethod("operator>>(QDataStream&, QDate&)")]
		public static QDataStream op_read(QDataStream arg1, DateTime arg2) {
			return StaticQt().op_read(arg1,arg2);
		}
		[SmokeMethod("operator<<(QDataStream&, const QKeySequence&)")]
		public static QDataStream op_write(QDataStream arg1, QKeySequence arg2) {
			return StaticQt().op_write(arg1,arg2);
		}
		[SmokeMethod("operator>>(QDataStream&, QKeySequence&)")]
		public static QDataStream op_read(QDataStream arg1, QKeySequence arg2) {
			return StaticQt().op_read(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QPicture stream functions
		///**************************************************</remarks>		<short>                                                                                QPicture stream functions                                                                            </short>
		[SmokeMethod("operator<<(QDataStream&, const QPicture&)")]
		public static QDataStream op_write(QDataStream arg1, QPicture arg2) {
			return StaticQt().op_write(arg1,arg2);
		}
		[SmokeMethod("operator>>(QDataStream&, QPicture&)")]
		public static QDataStream op_read(QDataStream arg1, QPicture arg2) {
			return StaticQt().op_read(arg1,arg2);
		}
		[SmokeMethod("operator<<(QTextStream&, const QMainWindow&)")]
		public static QTextStream op_write(QTextStream arg1, QMainWindow arg2) {
			return StaticQt().op_write(arg1,arg2);
		}
		[SmokeMethod("operator>>(QTextStream&, QMainWindow&)")]
		public static QTextStream op_read(QTextStream arg1, QMainWindow arg2) {
			return StaticQt().op_read(arg1,arg2);
		}
		// QDataStream& operator>>(QDataStream& arg1,QGVector& arg2); >>>> NOT CONVERTED
		// QDataStream& operator<<(QDataStream& arg1,const QGVector& arg2); >>>> NOT CONVERTED
		[SmokeMethod("qRound(double)")]
		public static int QRound(double d) {
			return StaticQt().QRound(d);
		}
		[SmokeMethod("qVersion()")]
		public static string QVersion() {
			return StaticQt().QVersion();
		}
		[SmokeMethod("qSysInfo(int*, bool*)")]
		public static bool QSysInfo(out int wordSize, out bool bigEndian) {
			return StaticQt().QSysInfo(out wordSize,out bigEndian);
		}
		[SmokeMethod("qSharedBuild()")]
		public static bool QSharedBuild() {
			return StaticQt().QSharedBuild();
		}
		[SmokeMethod("qSystemWarning(const char*, int)")]
		public static void QSystemWarning(string arg1, int code) {
			StaticQt().QSystemWarning(arg1,code);
		}
		[SmokeMethod("qSystemWarning(const char*)")]
		public static void QSystemWarning(string arg1) {
			StaticQt().QSystemWarning(arg1);
		}
		// QtMsgHandler qInstallMsgHandler(QtMsgHandler arg1); >>>> NOT CONVERTED
		[SmokeMethod("qSuppressObsoleteWarnings(bool)")]
		public static void QSuppressObsoleteWarnings(bool arg1) {
			StaticQt().QSuppressObsoleteWarnings(arg1);
		}
		[SmokeMethod("qSuppressObsoleteWarnings()")]
		public static void QSuppressObsoleteWarnings() {
			StaticQt().QSuppressObsoleteWarnings();
		}
		[SmokeMethod("qObsolete(const char*, const char*, const char*)")]
		public static void QObsolete(string arg1, string oldfunc, string newfunc) {
			StaticQt().QObsolete(arg1,oldfunc,newfunc);
		}
		[SmokeMethod("qObsolete(const char*, const char*)")]
		public static void QObsolete(string arg1, string oldfunc) {
			StaticQt().QObsolete(arg1,oldfunc);
		}
		[SmokeMethod("qObsolete(const char*)")]
		public static void QObsolete(string message) {
			StaticQt().QObsolete(message);
		}
		[SmokeMethod("qInstallPath()")]
		public static string QInstallPath() {
			return StaticQt().QInstallPath();
		}
		[SmokeMethod("qInstallPathDocs()")]
		public static string QInstallPathDocs() {
			return StaticQt().QInstallPathDocs();
		}
		[SmokeMethod("qInstallPathHeaders()")]
		public static string QInstallPathHeaders() {
			return StaticQt().QInstallPathHeaders();
		}
		[SmokeMethod("qInstallPathLibs()")]
		public static string QInstallPathLibs() {
			return StaticQt().QInstallPathLibs();
		}
		[SmokeMethod("qInstallPathBins()")]
		public static string QInstallPathBins() {
			return StaticQt().QInstallPathBins();
		}
		[SmokeMethod("qInstallPathPlugins()")]
		public static string QInstallPathPlugins() {
			return StaticQt().QInstallPathPlugins();
		}
		[SmokeMethod("qInstallPathData()")]
		public static string QInstallPathData() {
			return StaticQt().QInstallPathData();
		}
		[SmokeMethod("qInstallPathTranslations()")]
		public static string QInstallPathTranslations() {
			return StaticQt().QInstallPathTranslations();
		}
		[SmokeMethod("qInstallPathSysconf()")]
		public static string QInstallPathSysconf() {
			return StaticQt().QInstallPathSysconf();
		}
		[SmokeMethod("operator<<(QTextStream&, const QDockArea&)")]
		public static QTextStream op_write(QTextStream arg1, QDockArea arg2) {
			return StaticQt().op_write(arg1,arg2);
		}
		[SmokeMethod("operator>>(QTextStream&, QDockArea&)")]
		public static QTextStream op_read(QTextStream arg1, QDockArea arg2) {
			return StaticQt().op_read(arg1,arg2);
		}
		[SmokeMethod("bitBlt(QPaintDevice*, int, int, const QPaintDevice*, int, int, int, int, Qt::RasterOp, bool)")]
		public static void BitBlt(IQPaintDevice dst, int dx, int dy, IQPaintDevice src, int sx, int sy, int sw, int sh, int arg9, bool ignoreMask) {
			StaticQt().BitBlt(dst,dx,dy,src,sx,sy,sw,sh,arg9,ignoreMask);
		}
		[SmokeMethod("bitBlt(QPaintDevice*, int, int, const QPaintDevice*, int, int, int, int, Qt::RasterOp)")]
		public static void BitBlt(IQPaintDevice dst, int dx, int dy, IQPaintDevice src, int sx, int sy, int sw, int sh, int arg9) {
			StaticQt().BitBlt(dst,dx,dy,src,sx,sy,sw,sh,arg9);
		}
		[SmokeMethod("bitBlt(QPaintDevice*, int, int, const QPaintDevice*, int, int, int, int)")]
		public static void BitBlt(IQPaintDevice dst, int dx, int dy, IQPaintDevice src, int sx, int sy, int sw, int sh) {
			StaticQt().BitBlt(dst,dx,dy,src,sx,sy,sw,sh);
		}
		[SmokeMethod("bitBlt(QPaintDevice*, int, int, const QPaintDevice*, int, int, int)")]
		public static void BitBlt(IQPaintDevice dst, int dx, int dy, IQPaintDevice src, int sx, int sy, int sw) {
			StaticQt().BitBlt(dst,dx,dy,src,sx,sy,sw);
		}
		[SmokeMethod("bitBlt(QPaintDevice*, int, int, const QPaintDevice*, int, int)")]
		public static void BitBlt(IQPaintDevice dst, int dx, int dy, IQPaintDevice src, int sx, int sy) {
			StaticQt().BitBlt(dst,dx,dy,src,sx,sy);
		}
		[SmokeMethod("bitBlt(QPaintDevice*, int, int, const QPaintDevice*, int)")]
		public static void BitBlt(IQPaintDevice dst, int dx, int dy, IQPaintDevice src, int sx) {
			StaticQt().BitBlt(dst,dx,dy,src,sx);
		}
		[SmokeMethod("bitBlt(QPaintDevice*, int, int, const QPaintDevice*)")]
		public static void BitBlt(IQPaintDevice dst, int dx, int dy, IQPaintDevice src) {
			StaticQt().BitBlt(dst,dx,dy,src);
		}
		[SmokeMethod("bitBlt(QPaintDevice*, int, int, const QImage*, int, int, int, int, int)")]
		public static void BitBlt(IQPaintDevice dst, int dx, int dy, QImage src, int sx, int sy, int sw, int sh, int conversion_flags) {
			StaticQt().BitBlt(dst,dx,dy,src,sx,sy,sw,sh,conversion_flags);
		}
		[SmokeMethod("bitBlt(QPaintDevice*, int, int, const QImage*, int, int, int, int)")]
		public static void BitBlt(IQPaintDevice dst, int dx, int dy, QImage src, int sx, int sy, int sw, int sh) {
			StaticQt().BitBlt(dst,dx,dy,src,sx,sy,sw,sh);
		}
		[SmokeMethod("bitBlt(QPaintDevice*, int, int, const QImage*, int, int, int)")]
		public static void BitBlt(IQPaintDevice dst, int dx, int dy, QImage src, int sx, int sy, int sw) {
			StaticQt().BitBlt(dst,dx,dy,src,sx,sy,sw);
		}
		[SmokeMethod("bitBlt(QPaintDevice*, int, int, const QImage*, int, int)")]
		public static void BitBlt(IQPaintDevice dst, int dx, int dy, QImage src, int sx, int sy) {
			StaticQt().BitBlt(dst,dx,dy,src,sx,sy);
		}
		[SmokeMethod("bitBlt(QPaintDevice*, int, int, const QImage*, int)")]
		public static void BitBlt(IQPaintDevice dst, int dx, int dy, QImage src, int sx) {
			StaticQt().BitBlt(dst,dx,dy,src,sx);
		}
		[SmokeMethod("bitBlt(QPaintDevice*, int, int, const QImage*)")]
		public static void BitBlt(IQPaintDevice dst, int dx, int dy, QImage src) {
			StaticQt().BitBlt(dst,dx,dy,src);
		}
		///<remarks>**************************************************
		///  Inline functions
		///**************************************************</remarks>		<short>                                                                                Inline functions                                                                            </short>
		[SmokeMethod("bitBlt(QPaintDevice*, const QPoint&, const QPaintDevice*, const QRect&, Qt::RasterOp, bool)")]
		public static void BitBlt(IQPaintDevice dst, QPoint dp, IQPaintDevice src, QRect sr, int rop, bool ignoreMask) {
			StaticQt().BitBlt(dst,dp,src,sr,rop,ignoreMask);
		}
		[SmokeMethod("bitBlt(QPaintDevice*, const QPoint&, const QPaintDevice*, const QRect&, Qt::RasterOp)")]
		public static void BitBlt(IQPaintDevice dst, QPoint dp, IQPaintDevice src, QRect sr, int rop) {
			StaticQt().BitBlt(dst,dp,src,sr,rop);
		}
		[SmokeMethod("bitBlt(QPaintDevice*, const QPoint&, const QPaintDevice*, const QRect&)")]
		public static void BitBlt(IQPaintDevice dst, QPoint dp, IQPaintDevice src, QRect sr) {
			StaticQt().BitBlt(dst,dp,src,sr);
		}
		[SmokeMethod("bitBlt(QPaintDevice*, const QPoint&, const QPaintDevice*)")]
		public static void BitBlt(IQPaintDevice dst, QPoint dp, IQPaintDevice src) {
			StaticQt().BitBlt(dst,dp,src);
		}
		[SmokeMethod("operator==(const QRect&, const QRect&)")]
		public static bool op_equals(QRect arg1, QRect arg2) {
			return StaticQt().op_equals(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QRect stream functions
		///**************************************************</remarks>		<short>                                                                                QRect stream functions                                                                            </short>
		[SmokeMethod("operator<<(QDataStream&, const QRect&)")]
		public static QDataStream op_write(QDataStream arg1, QRect arg2) {
			return StaticQt().op_write(arg1,arg2);
		}
		[SmokeMethod("operator>>(QDataStream&, QRect&)")]
		public static QDataStream op_read(QDataStream arg1, QRect arg2) {
			return StaticQt().op_read(arg1,arg2);
		}
		public const int IO_Direct     = 0x0100;
		public const int IO_Sequential = 0x0200;
		public const int IO_Combined   = 0x0300;
		public const int IO_TypeMask   = 0x0f00;
		public const int IO_Raw        = 0x0040;
		public const int IO_Async      = 0x0080;
		public const int IO_ReadOnly   = 0x0001;
		public const int IO_WriteOnly  = 0x0002;
		public const int IO_ReadWrite  = 0x0003;
		public const int IO_Append     = 0x0004;
		public const int IO_Truncate   = 0x0008;
		public const int IO_Translate  = 0x0010;
		public const int IO_ModeMask   = 0x00ff;
		public const int IO_Open       = 0x1000;
		public const int IO_StateMask  = 0xf000;
		public const int IO_Ok              = 0;
		public const int IO_ReadError       = 1;
		public const int IO_WriteError      = 2;
		public const int IO_FatalError      = 3;
		public const int IO_ResourceError   = 4;
		public const int IO_OpenError       = 5;
		public const int IO_ConnectError    = 5;
		public const int IO_AbortError      = 6;
		public const int IO_TimeOutError    = 7;
		public const int IO_UnspecifiedError= 8;

		public static QApplication qApp = null;

		public static string SIGNAL(string signal) {
			return "2"+ signal;
		}

		public static string SLOT(string slot) {
			return "1" + slot;
		}	
	}
}
