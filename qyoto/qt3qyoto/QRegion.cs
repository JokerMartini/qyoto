//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Collections;

	public class QRegion : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QRegion(Type dummy) {}
		interface IQRegionProxy {
			QRegion op_or(QRegion lhs, QRegion arg1);
			QRegion op_plus(QRegion lhs, QRegion arg1);
			QRegion op_and(QRegion lhs, QRegion arg1);
			QRegion op_minus(QRegion lhs, QRegion arg1);
			QRegion op_xor(QRegion lhs, QRegion arg1);
			bool op_equals(QRegion lhs, QRegion arg1);
		}

		protected void CreateQRegionProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QRegion), this);
			_interceptor = (QRegion) realProxy.GetTransparentProxy();
		}
		private QRegion ProxyQRegion() {
			return (QRegion) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QRegion() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQRegionProxy), null);
			_staticInterceptor = (IQRegionProxy) realProxy.GetTransparentProxy();
		}
		private static IQRegionProxy StaticQRegion() {
			return (IQRegionProxy) _staticInterceptor;
		}

		enum RegionType {
			Rectangle = 0,
			Ellipse = 1,
		}
		public QRegion() : this((Type) null) {
			CreateQRegionProxy();
			NewQRegion();
		}
		private void NewQRegion() {
			ProxyQRegion().NewQRegion();
		}
		public QRegion(int x, int y, int w, int h, int arg5) : this((Type) null) {
			CreateQRegionProxy();
			NewQRegion(x,y,w,h,arg5);
		}
		private void NewQRegion(int x, int y, int w, int h, int arg5) {
			ProxyQRegion().NewQRegion(x,y,w,h,arg5);
		}
		public QRegion(int x, int y, int w, int h) : this((Type) null) {
			CreateQRegionProxy();
			NewQRegion(x,y,w,h);
		}
		private void NewQRegion(int x, int y, int w, int h) {
			ProxyQRegion().NewQRegion(x,y,w,h);
		}
		public QRegion(QRect arg1, int arg2) : this((Type) null) {
			CreateQRegionProxy();
			NewQRegion(arg1,arg2);
		}
		private void NewQRegion(QRect arg1, int arg2) {
			ProxyQRegion().NewQRegion(arg1,arg2);
		}
		public QRegion(QRect arg1) : this((Type) null) {
			CreateQRegionProxy();
			NewQRegion(arg1);
		}
		private void NewQRegion(QRect arg1) {
			ProxyQRegion().NewQRegion(arg1);
		}
		public QRegion(QPointArray arg1, bool winding) : this((Type) null) {
			CreateQRegionProxy();
			NewQRegion(arg1,winding);
		}
		private void NewQRegion(QPointArray arg1, bool winding) {
			ProxyQRegion().NewQRegion(arg1,winding);
		}
		public QRegion(QPointArray arg1) : this((Type) null) {
			CreateQRegionProxy();
			NewQRegion(arg1);
		}
		private void NewQRegion(QPointArray arg1) {
			ProxyQRegion().NewQRegion(arg1);
		}
		public QRegion(QRegion arg1) : this((Type) null) {
			CreateQRegionProxy();
			NewQRegion(arg1);
		}
		private void NewQRegion(QRegion arg1) {
			ProxyQRegion().NewQRegion(arg1);
		}
		public QRegion(QBitmap arg1) : this((Type) null) {
			CreateQRegionProxy();
			NewQRegion(arg1);
		}
		private void NewQRegion(QBitmap arg1) {
			ProxyQRegion().NewQRegion(arg1);
		}
		public bool IsNull() {
			return ProxyQRegion().IsNull();
		}
		public bool IsEmpty() {
			return ProxyQRegion().IsEmpty();
		}
		public bool Contains(QPoint p) {
			return ProxyQRegion().Contains(p);
		}
		public bool Contains(QRect r) {
			return ProxyQRegion().Contains(r);
		}
		public void Translate(int dx, int dy) {
			ProxyQRegion().Translate(dx,dy);
		}
		public QRegion Unite(QRegion arg1) {
			return ProxyQRegion().Unite(arg1);
		}
		public QRegion Intersect(QRegion arg1) {
			return ProxyQRegion().Intersect(arg1);
		}
		public QRegion Subtract(QRegion arg1) {
			return ProxyQRegion().Subtract(arg1);
		}
		public QRegion Eor(QRegion arg1) {
			return ProxyQRegion().Eor(arg1);
		}
		public QRect BoundingRect() {
			return ProxyQRegion().BoundingRect();
		}
		public ArrayList Rects() {
			return ProxyQRegion().Rects();
		}
		public void SetRects(QRect arg1, int arg2) {
			ProxyQRegion().SetRects(arg1,arg2);
		}
		public static QRegion operator|(QRegion lhs, QRegion arg1) {
			return StaticQRegion().op_or(lhs,arg1);
		}
		public static QRegion operator+(QRegion lhs, QRegion arg1) {
			return StaticQRegion().op_plus(lhs,arg1);
		}
		public static QRegion operator&(QRegion lhs, QRegion arg1) {
			return StaticQRegion().op_and(lhs,arg1);
		}
		public static QRegion operator-(QRegion lhs, QRegion arg1) {
			return StaticQRegion().op_minus(lhs,arg1);
		}
		public static QRegion operator^(QRegion lhs, QRegion arg1) {
			return StaticQRegion().op_xor(lhs,arg1);
		}
		public static bool operator==(QRegion lhs, QRegion arg1) {
			return StaticQRegion().op_equals(lhs,arg1);
		}
		public static bool operator!=(QRegion lhs, QRegion arg1) {
			return !StaticQRegion().op_equals(lhs,arg1);
		}
		public override bool Equals(object o) {
			if (!(o is QRegion)) { return false; }
			return this == (QRegion) o;
		}
		public override int GetHashCode() {
			return ProxyQRegion().GetHashCode();
		}
		~QRegion() {
			ProxyQRegion().Dispose();
		}
		public void Dispose() {
			ProxyQRegion().Dispose();
		}
	}
}
