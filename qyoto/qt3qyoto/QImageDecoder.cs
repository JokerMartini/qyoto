//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Collections;

	public class QImageDecoder : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QImageDecoder(Type dummy) {}
		interface IQImageDecoderProxy {
			string FormatName(char[] buffer, int length);
			QImageFormatType Format(string name);
			ArrayList InputFormats();
			void RegisterDecoderFactory(QImageFormatType arg1);
			void UnregisterDecoderFactory(QImageFormatType arg1);
		}

		protected void CreateQImageDecoderProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QImageDecoder), this);
			_interceptor = (QImageDecoder) realProxy.GetTransparentProxy();
		}
		private QImageDecoder ProxyQImageDecoder() {
			return (QImageDecoder) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QImageDecoder() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQImageDecoderProxy), null);
			_staticInterceptor = (IQImageDecoderProxy) realProxy.GetTransparentProxy();
		}
		private static IQImageDecoderProxy StaticQImageDecoder() {
			return (IQImageDecoderProxy) _staticInterceptor;
		}

		public QImageDecoder(QImageConsumer c) : this((Type) null) {
			CreateQImageDecoderProxy();
			NewQImageDecoder(c);
		}
		private void NewQImageDecoder(QImageConsumer c) {
			ProxyQImageDecoder().NewQImageDecoder(c);
		}
		public QImage Image() {
			return ProxyQImageDecoder().Image();
		}
		public int Decode(char[] buffer, int length) {
			return ProxyQImageDecoder().Decode(buffer,length);
		}
		public static string FormatName(char[] buffer, int length) {
			return StaticQImageDecoder().FormatName(buffer,length);
		}
		public static QImageFormatType Format(string name) {
			return StaticQImageDecoder().Format(name);
		}
		public static ArrayList InputFormats() {
			return StaticQImageDecoder().InputFormats();
		}
		public static void RegisterDecoderFactory(QImageFormatType arg1) {
			StaticQImageDecoder().RegisterDecoderFactory(arg1);
		}
		public static void UnregisterDecoderFactory(QImageFormatType arg1) {
			StaticQImageDecoder().UnregisterDecoderFactory(arg1);
		}
		~QImageDecoder() {
			ProxyQImageDecoder().Dispose();
		}
		public void Dispose() {
			ProxyQImageDecoder().Dispose();
		}
	}
}
