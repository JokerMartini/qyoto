//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	[SmokeClass("QVBox")]
	public class QVBox : QHBox, IDisposable {
 		protected QVBox(Type dummy) : base((Type) null) {}
		interface IQVBoxProxy {
			string Tr(string arg1, string arg2);
			string Tr(string arg1);
			string TrUtf8(string arg1, string arg2);
			string TrUtf8(string arg1);
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QVBox), this);
			_interceptor = (QVBox) realProxy.GetTransparentProxy();
		}
		private QVBox ProxyQVBox() {
			return (QVBox) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QVBox() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQVBoxProxy), null);
			_staticInterceptor = (IQVBoxProxy) realProxy.GetTransparentProxy();
		}
		private static IQVBoxProxy StaticQVBox() {
			return (IQVBoxProxy) _staticInterceptor;
		}

		[SmokeMethod("metaObject() const")]
		public new virtual QMetaObject MetaObject() {
			return ProxyQVBox().MetaObject();
		}
		[SmokeMethod("className() const")]
		public new virtual string ClassName() {
			return ProxyQVBox().ClassName();
		}
		public QVBox(QWidget parent, string name, int f) : this((Type) null) {
			CreateProxy();
			CreateSignalProxy();
			NewQVBox(parent,name,f);
		}
		[SmokeMethod("QVBox(QWidget*, const char*, Qt::WFlags)")]
		private void NewQVBox(QWidget parent, string name, int f) {
			ProxyQVBox().NewQVBox(parent,name,f);
		}
		public QVBox(QWidget parent, string name) : this((Type) null) {
			CreateProxy();
			CreateSignalProxy();
			NewQVBox(parent,name);
		}
		[SmokeMethod("QVBox(QWidget*, const char*)")]
		private void NewQVBox(QWidget parent, string name) {
			ProxyQVBox().NewQVBox(parent,name);
		}
		public QVBox(QWidget parent) : this((Type) null) {
			CreateProxy();
			CreateSignalProxy();
			NewQVBox(parent);
		}
		[SmokeMethod("QVBox(QWidget*)")]
		private void NewQVBox(QWidget parent) {
			ProxyQVBox().NewQVBox(parent);
		}
		public QVBox() : this((Type) null) {
			CreateProxy();
			CreateSignalProxy();
			NewQVBox();
		}
		[SmokeMethod("QVBox()")]
		private void NewQVBox() {
			ProxyQVBox().NewQVBox();
		}
		[SmokeMethod("tr(const char*, const char*)")]
		public static new string Tr(string arg1, string arg2) {
			return StaticQVBox().Tr(arg1,arg2);
		}
		[SmokeMethod("tr(const char*)")]
		public static new string Tr(string arg1) {
			return StaticQVBox().Tr(arg1);
		}
		[SmokeMethod("trUtf8(const char*, const char*)")]
		public static new string TrUtf8(string arg1, string arg2) {
			return StaticQVBox().TrUtf8(arg1,arg2);
		}
		[SmokeMethod("trUtf8(const char*)")]
		public static new string TrUtf8(string arg1) {
			return StaticQVBox().TrUtf8(arg1);
		}
		~QVBox() {
			DisposeQVBox();
		}
		public new void Dispose() {
			DisposeQVBox();
		}
		private void DisposeQVBox() {
			ProxyQVBox().DisposeQVBox();
		}
		protected new void CreateSignalProxy() {
			SignalInvocation realProxy = new SignalInvocation(typeof(IQVBoxSignals), this);
			Q_EMIT = (IQVBoxSignals) realProxy.GetTransparentProxy();
		}
		protected new IQVBoxSignals Emit() {
			return (IQVBoxSignals) Q_EMIT;
		}
	}

	public interface IQVBoxSignals : IQHBoxSignals {
	}
}
