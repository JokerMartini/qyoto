//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	[SmokeClass("QListBoxText")]
	public class QListBoxText : QListBoxItem, IDisposable {
 		protected QListBoxText(Type dummy) : base((Type) null) {}
		interface IQListBoxTextProxy {
		}

		protected void CreateQListBoxTextProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QListBoxText), this);
			_interceptor = (QListBoxText) realProxy.GetTransparentProxy();
		}
		private QListBoxText ProxyQListBoxText() {
			return (QListBoxText) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QListBoxText() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQListBoxTextProxy), null);
			_staticInterceptor = (IQListBoxTextProxy) realProxy.GetTransparentProxy();
		}
		private static IQListBoxTextProxy StaticQListBoxText() {
			return (IQListBoxTextProxy) _staticInterceptor;
		}

		public QListBoxText(QListBox listbox, string text) : this((Type) null) {
			CreateQListBoxTextProxy();
			NewQListBoxText(listbox,text);
		}
		[SmokeMethod("QListBoxText(QListBox*, const QString&)")]
		private void NewQListBoxText(QListBox listbox, string text) {
			ProxyQListBoxText().NewQListBoxText(listbox,text);
		}
		public QListBoxText(QListBox listbox) : this((Type) null) {
			CreateQListBoxTextProxy();
			NewQListBoxText(listbox);
		}
		[SmokeMethod("QListBoxText(QListBox*)")]
		private void NewQListBoxText(QListBox listbox) {
			ProxyQListBoxText().NewQListBoxText(listbox);
		}
		public QListBoxText(string text) : this((Type) null) {
			CreateQListBoxTextProxy();
			NewQListBoxText(text);
		}
		[SmokeMethod("QListBoxText(const QString&)")]
		private void NewQListBoxText(string text) {
			ProxyQListBoxText().NewQListBoxText(text);
		}
		public QListBoxText() : this((Type) null) {
			CreateQListBoxTextProxy();
			NewQListBoxText();
		}
		[SmokeMethod("QListBoxText()")]
		private void NewQListBoxText() {
			ProxyQListBoxText().NewQListBoxText();
		}
		public QListBoxText(QListBox listbox, string text, QListBoxItem after) : this((Type) null) {
			CreateQListBoxTextProxy();
			NewQListBoxText(listbox,text,after);
		}
		[SmokeMethod("QListBoxText(QListBox*, const QString&, QListBoxItem*)")]
		private void NewQListBoxText(QListBox listbox, string text, QListBoxItem after) {
			ProxyQListBoxText().NewQListBoxText(listbox,text,after);
		}
		[SmokeMethod("height(const QListBox*) const")]
		public new int Height(QListBox arg1) {
			return ProxyQListBoxText().Height(arg1);
		}
		[SmokeMethod("width(const QListBox*) const")]
		public new int Width(QListBox arg1) {
			return ProxyQListBoxText().Width(arg1);
		}
		[SmokeMethod("rtti() const")]
		public new int Rtti() {
			return ProxyQListBoxText().Rtti();
		}
		[SmokeMethod("paint(QPainter*)")]
		protected new void Paint(QPainter arg1) {
			ProxyQListBoxText().Paint(arg1);
		}
		~QListBoxText() {
			DisposeQListBoxText();
		}
		public new void Dispose() {
			DisposeQListBoxText();
		}
		private void DisposeQListBoxText() {
			ProxyQListBoxText().DisposeQListBoxText();
		}
	}
}
