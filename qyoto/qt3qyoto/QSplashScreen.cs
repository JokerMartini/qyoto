//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	/// See <see cref="IQSplashScreenSignals"></see> for signals emitted by QSplashScreen
	public class QSplashScreen : QWidget, IDisposable {
 		protected QSplashScreen(Type dummy) : base((Type) null) {}
		interface IQSplashScreenProxy {
			string Tr(string arg1, string arg2);
			string Tr(string arg1);
			string TrUtf8(string arg1, string arg2);
			string TrUtf8(string arg1);
		}

		protected void CreateQSplashScreenProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSplashScreen), this);
			_interceptor = (QSplashScreen) realProxy.GetTransparentProxy();
		}
		private QSplashScreen ProxyQSplashScreen() {
			return (QSplashScreen) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QSplashScreen() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSplashScreenProxy), null);
			_staticInterceptor = (IQSplashScreenProxy) realProxy.GetTransparentProxy();
		}
		private static IQSplashScreenProxy StaticQSplashScreen() {
			return (IQSplashScreenProxy) _staticInterceptor;
		}

		public new virtual QMetaObject MetaObject() {
			return ProxyQSplashScreen().MetaObject();
		}
		public new virtual string ClassName() {
			return ProxyQSplashScreen().ClassName();
		}
		public QSplashScreen(QPixmap pixmap, int f) : this((Type) null) {
			CreateQSplashScreenProxy();
			NewQSplashScreen(pixmap,f);
		}
		private void NewQSplashScreen(QPixmap pixmap, int f) {
			ProxyQSplashScreen().NewQSplashScreen(pixmap,f);
		}
		public QSplashScreen(QPixmap pixmap) : this((Type) null) {
			CreateQSplashScreenProxy();
			NewQSplashScreen(pixmap);
		}
		private void NewQSplashScreen(QPixmap pixmap) {
			ProxyQSplashScreen().NewQSplashScreen(pixmap);
		}
		public QSplashScreen() : this((Type) null) {
			CreateQSplashScreenProxy();
			NewQSplashScreen();
		}
		private void NewQSplashScreen() {
			ProxyQSplashScreen().NewQSplashScreen();
		}
		public void SetPixmap(QPixmap pixmap) {
			ProxyQSplashScreen().SetPixmap(pixmap);
		}
		public QPixmap Pixmap() {
			return ProxyQSplashScreen().Pixmap();
		}
		public void Finish(QWidget w) {
			ProxyQSplashScreen().Finish(w);
		}
		public new void Repaint() {
			ProxyQSplashScreen().Repaint();
		}
		public void Message(string str, int flags, QColor color) {
			ProxyQSplashScreen().Message(str,flags,color);
		}
		public void Message(string str, int flags) {
			ProxyQSplashScreen().Message(str,flags);
		}
		public void Message(string str) {
			ProxyQSplashScreen().Message(str);
		}
		public void Clear() {
			ProxyQSplashScreen().Clear();
		}
		public static new string Tr(string arg1, string arg2) {
			return StaticQSplashScreen().Tr(arg1,arg2);
		}
		public static new string Tr(string arg1) {
			return StaticQSplashScreen().Tr(arg1);
		}
		public static new string TrUtf8(string arg1, string arg2) {
			return StaticQSplashScreen().TrUtf8(arg1,arg2);
		}
		public static new string TrUtf8(string arg1) {
			return StaticQSplashScreen().TrUtf8(arg1);
		}
		protected virtual void DrawContents(QPainter painter) {
			ProxyQSplashScreen().DrawContents(painter);
		}
		protected new void MousePressEvent(QMouseEvent arg1) {
			ProxyQSplashScreen().MousePressEvent(arg1);
		}
		~QSplashScreen() {
			ProxyQSplashScreen().Dispose();
		}
		public new void Dispose() {
			ProxyQSplashScreen().Dispose();
		}
	}

	public interface IQSplashScreenSignals {
		void MessageChanged(string str);
	}
}
