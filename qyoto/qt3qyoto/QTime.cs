//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QTime : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QTime(Type dummy) {}
		interface IQTimeProxy {
			bool op_equals(QTime lhs, DateTime d);
			bool op_lt(QTime lhs, DateTime d);
			bool op_lte(QTime lhs, DateTime d);
			bool op_gt(QTime lhs, DateTime d);
			bool op_gte(QTime lhs, DateTime d);
			DateTime CurrentTime();
			DateTime CurrentTime(int arg1);
			DateTime FromString(string s, int f);
			DateTime FromString(string s);
			bool IsValid(int h, int m, int s, int ms);
			bool IsValid(int h, int m, int s);
		}

		protected void CreateQTimeProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTime), this);
			_interceptor = (QTime) realProxy.GetTransparentProxy();
		}
		private QTime ProxyQTime() {
			return (QTime) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QTime() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQTimeProxy), null);
			_staticInterceptor = (IQTimeProxy) realProxy.GetTransparentProxy();
		}
		private static IQTimeProxy StaticQTime() {
			return (IQTimeProxy) _staticInterceptor;
		}

		public QTime() : this((Type) null) {
			CreateQTimeProxy();
			NewQTime();
		}
		private void NewQTime() {
			ProxyQTime().NewQTime();
		}
		public QTime(int h, int m, int s, int ms) : this((Type) null) {
			CreateQTimeProxy();
			NewQTime(h,m,s,ms);
		}
		private void NewQTime(int h, int m, int s, int ms) {
			ProxyQTime().NewQTime(h,m,s,ms);
		}
		public QTime(int h, int m, int s) : this((Type) null) {
			CreateQTimeProxy();
			NewQTime(h,m,s);
		}
		private void NewQTime(int h, int m, int s) {
			ProxyQTime().NewQTime(h,m,s);
		}
		public QTime(int h, int m) : this((Type) null) {
			CreateQTimeProxy();
			NewQTime(h,m);
		}
		private void NewQTime(int h, int m) {
			ProxyQTime().NewQTime(h,m);
		}
		public bool IsNull() {
			return ProxyQTime().IsNull();
		}
		public bool IsValid() {
			return ProxyQTime().IsValid();
		}
		public int Hour() {
			return ProxyQTime().Hour();
		}
		public int Minute() {
			return ProxyQTime().Minute();
		}
		public int Second() {
			return ProxyQTime().Second();
		}
		public int Msec() {
			return ProxyQTime().Msec();
		}
		public new string ToString(int f) {
			return ProxyQTime().ToString(f);
		}
		public new string ToString() {
			return ProxyQTime().ToString();
		}
		public new string ToString(string format) {
			return ProxyQTime().ToString(format);
		}
		public bool SetHMS(int h, int m, int s, int ms) {
			return ProxyQTime().SetHMS(h,m,s,ms);
		}
		public bool SetHMS(int h, int m, int s) {
			return ProxyQTime().SetHMS(h,m,s);
		}
		public DateTime AddSecs(int secs) {
			return ProxyQTime().AddSecs(secs);
		}
		public int SecsTo(DateTime arg1) {
			return ProxyQTime().SecsTo(arg1);
		}
		public DateTime AddMSecs(int ms) {
			return ProxyQTime().AddMSecs(ms);
		}
		public int MsecsTo(DateTime arg1) {
			return ProxyQTime().MsecsTo(arg1);
		}
		public static bool operator==(QTime lhs, DateTime d) {
			return StaticQTime().op_equals(lhs,d);
		}
		public static bool operator!=(QTime lhs, DateTime d) {
			return !StaticQTime().op_equals(lhs,d);
		}
		public override bool Equals(object o) {
			if (!(o is QTime)) { return false; }
			return this == (QTime) o;
		}
		public override int GetHashCode() {
			return ProxyQTime().GetHashCode();
		}
		public static bool operator<(QTime lhs, DateTime d) {
			return StaticQTime().op_lt(lhs,d);
		}
		public static bool operator<=(QTime lhs, DateTime d) {
			return StaticQTime().op_lte(lhs,d);
		}
		public static bool operator>(QTime lhs, DateTime d) {
			return StaticQTime().op_gt(lhs,d);
		}
		public static bool operator>=(QTime lhs, DateTime d) {
			return StaticQTime().op_gte(lhs,d);
		}
		public void Start() {
			ProxyQTime().Start();
		}
		public int Restart() {
			return ProxyQTime().Restart();
		}
		public int Elapsed() {
			return ProxyQTime().Elapsed();
		}
		public static DateTime CurrentTime() {
			return StaticQTime().CurrentTime();
		}
		public static DateTime CurrentTime(int arg1) {
			return StaticQTime().CurrentTime(arg1);
		}
		public static DateTime FromString(string s, int f) {
			return StaticQTime().FromString(s,f);
		}
		public static DateTime FromString(string s) {
			return StaticQTime().FromString(s);
		}
		public static bool IsValid(int h, int m, int s, int ms) {
			return StaticQTime().IsValid(h,m,s,ms);
		}
		public static bool IsValid(int h, int m, int s) {
			return StaticQTime().IsValid(h,m,s);
		}
		~QTime() {
			ProxyQTime().Dispose();
		}
		public void Dispose() {
			ProxyQTime().Dispose();
		}
	}
}
