//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QDataPump : QObject, IDisposable {
 		protected QDataPump(Type dummy) : base((Type) null) {}
		interface IQDataPumpProxy {
			string Tr(string arg1, string arg2);
			string Tr(string arg1);
			string TrUtf8(string arg1, string arg2);
			string TrUtf8(string arg1);
		}

		protected void CreateQDataPumpProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDataPump), this);
			_interceptor = (QDataPump) realProxy.GetTransparentProxy();
		}
		private QDataPump ProxyQDataPump() {
			return (QDataPump) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QDataPump() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDataPumpProxy), null);
			_staticInterceptor = (IQDataPumpProxy) realProxy.GetTransparentProxy();
		}
		private static IQDataPumpProxy StaticQDataPump() {
			return (IQDataPumpProxy) _staticInterceptor;
		}

		public new virtual QMetaObject MetaObject() {
			return ProxyQDataPump().MetaObject();
		}
		public new virtual string ClassName() {
			return ProxyQDataPump().ClassName();
		}
		public QDataPump(QDataSource arg1, QDataSink arg2) : this((Type) null) {
			CreateQDataPumpProxy();
			NewQDataPump(arg1,arg2);
		}
		private void NewQDataPump(QDataSource arg1, QDataSink arg2) {
			ProxyQDataPump().NewQDataPump(arg1,arg2);
		}
		public static new string Tr(string arg1, string arg2) {
			return StaticQDataPump().Tr(arg1,arg2);
		}
		public static new string Tr(string arg1) {
			return StaticQDataPump().Tr(arg1);
		}
		public static new string TrUtf8(string arg1, string arg2) {
			return StaticQDataPump().TrUtf8(arg1,arg2);
		}
		public static new string TrUtf8(string arg1) {
			return StaticQDataPump().TrUtf8(arg1);
		}
		~QDataPump() {
			ProxyQDataPump().Dispose();
		}
		public new void Dispose() {
			ProxyQDataPump().Dispose();
		}
	}
}
