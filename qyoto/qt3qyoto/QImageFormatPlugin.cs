//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Collections;
	using System.Text;

	public class QImageFormatPlugin : QGPlugin {
 		protected QImageFormatPlugin(Type dummy) : base((Type) null) {}
		interface IQImageFormatPluginProxy {
			string Tr(string arg1, string arg2);
			string Tr(string arg1);
			string TrUtf8(string arg1, string arg2);
			string TrUtf8(string arg1);
		}

		protected void CreateQImageFormatPluginProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QImageFormatPlugin), this);
			_interceptor = (QImageFormatPlugin) realProxy.GetTransparentProxy();
		}
		private QImageFormatPlugin ProxyQImageFormatPlugin() {
			return (QImageFormatPlugin) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QImageFormatPlugin() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQImageFormatPluginProxy), null);
			_staticInterceptor = (IQImageFormatPluginProxy) realProxy.GetTransparentProxy();
		}
		private static IQImageFormatPluginProxy StaticQImageFormatPlugin() {
			return (IQImageFormatPluginProxy) _staticInterceptor;
		}

		public new virtual QMetaObject MetaObject() {
			return ProxyQImageFormatPlugin().MetaObject();
		}
		public new virtual string ClassName() {
			return ProxyQImageFormatPlugin().ClassName();
		}
		public virtual ArrayList Keys() {
			return ProxyQImageFormatPlugin().Keys();
		}
		public virtual bool LoadImage(string format, string filename, QImage image) {
			return ProxyQImageFormatPlugin().LoadImage(format,filename,image);
		}
		public virtual bool SaveImage(string format, string filename, QImage image) {
			return ProxyQImageFormatPlugin().SaveImage(format,filename,image);
		}
		public virtual bool InstallIOHandler(string format) {
			return ProxyQImageFormatPlugin().InstallIOHandler(format);
		}
		public static new string Tr(string arg1, string arg2) {
			return StaticQImageFormatPlugin().Tr(arg1,arg2);
		}
		public static new string Tr(string arg1) {
			return StaticQImageFormatPlugin().Tr(arg1);
		}
		public static new string TrUtf8(string arg1, string arg2) {
			return StaticQImageFormatPlugin().TrUtf8(arg1,arg2);
		}
		public static new string TrUtf8(string arg1) {
			return StaticQImageFormatPlugin().TrUtf8(arg1);
		}
	}
}
