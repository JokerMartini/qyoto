//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QPtrBucket : QBaseBucket, IDisposable {
 		protected QPtrBucket(Type dummy) : base((Type) null) {}
		interface IQPtrBucketProxy {
		}

		protected void CreateQPtrBucketProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QPtrBucket), this);
			_interceptor = (QPtrBucket) realProxy.GetTransparentProxy();
		}
		private QPtrBucket ProxyQPtrBucket() {
			return (QPtrBucket) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QPtrBucket() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQPtrBucketProxy), null);
			_staticInterceptor = (IQPtrBucketProxy) realProxy.GetTransparentProxy();
		}
		private static IQPtrBucketProxy StaticQPtrBucket() {
			return (IQPtrBucketProxy) _staticInterceptor;
		}

		// QPtrBucket* QPtrBucket(void* arg1,QPtrCollection::Item arg2,QBaseBucket* arg3); >>>> NOT CONVERTED
		// void* getKey(); >>>> NOT CONVERTED
		~QPtrBucket() {
			ProxyQPtrBucket().Dispose();
		}
		public void Dispose() {
			ProxyQPtrBucket().Dispose();
		}
	}
}
