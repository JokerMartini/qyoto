//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QChildEvent : QEvent, IDisposable {
 		protected QChildEvent(Type dummy) : base((Type) null) {}
		interface IQChildEventProxy {
		}

		protected void CreateQChildEventProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QChildEvent), this);
			_interceptor = (QChildEvent) realProxy.GetTransparentProxy();
		}
		private QChildEvent ProxyQChildEvent() {
			return (QChildEvent) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QChildEvent() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQChildEventProxy), null);
			_staticInterceptor = (IQChildEventProxy) realProxy.GetTransparentProxy();
		}
		private static IQChildEventProxy StaticQChildEvent() {
			return (IQChildEventProxy) _staticInterceptor;
		}

		public QChildEvent(int type, QObject child) : this((Type) null) {
			CreateQChildEventProxy();
			NewQChildEvent(type,child);
		}
		private void NewQChildEvent(int type, QObject child) {
			ProxyQChildEvent().NewQChildEvent(type,child);
		}
		public QObject Child() {
			return ProxyQChildEvent().Child();
		}
		public bool Inserted() {
			return ProxyQChildEvent().Inserted();
		}
		public bool Removed() {
			return ProxyQChildEvent().Removed();
		}
		~QChildEvent() {
			ProxyQChildEvent().Dispose();
		}
		public new void Dispose() {
			ProxyQChildEvent().Dispose();
		}
	}
}
