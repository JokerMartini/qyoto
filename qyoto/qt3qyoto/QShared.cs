//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QShared : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QShared(Type dummy) {}
		interface IQSharedProxy {
		}

		protected void CreateQSharedProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QShared), this);
			_interceptor = (QShared) realProxy.GetTransparentProxy();
		}
		private QShared ProxyQShared() {
			return (QShared) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QShared() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSharedProxy), null);
			_staticInterceptor = (IQSharedProxy) realProxy.GetTransparentProxy();
		}
		private static IQSharedProxy StaticQShared() {
			return (IQSharedProxy) _staticInterceptor;
		}

		public QShared() : this((Type) null) {
			CreateQSharedProxy();
			NewQShared();
		}
		[SmokeMethod("QShared()")]
		private void NewQShared() {
			ProxyQShared().NewQShared();
		}
		[SmokeMethod("ref()")]
		public void Ref() {
			ProxyQShared().Ref();
		}
		[SmokeMethod("deref()")]
		public bool Deref() {
			return ProxyQShared().Deref();
		}
		~QShared() {
			DisposeQShared();
		}
		public void Dispose() {
			DisposeQShared();
		}
		private void DisposeQShared() {
			ProxyQShared().DisposeQShared();
		}
	}
}
