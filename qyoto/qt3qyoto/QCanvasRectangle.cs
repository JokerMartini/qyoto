//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QCanvasRectangle : QCanvasPolygonalItem, IDisposable {
 		protected QCanvasRectangle(Type dummy) : base((Type) null) {}
		interface IQCanvasRectangleProxy {
		}

		protected void CreateQCanvasRectangleProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QCanvasRectangle), this);
			_interceptor = (QCanvasRectangle) realProxy.GetTransparentProxy();
		}
		private QCanvasRectangle ProxyQCanvasRectangle() {
			return (QCanvasRectangle) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QCanvasRectangle() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQCanvasRectangleProxy), null);
			_staticInterceptor = (IQCanvasRectangleProxy) realProxy.GetTransparentProxy();
		}
		private static IQCanvasRectangleProxy StaticQCanvasRectangle() {
			return (IQCanvasRectangleProxy) _staticInterceptor;
		}

		public QCanvasRectangle(QCanvas canvas) : this((Type) null) {
			CreateQCanvasRectangleProxy();
			NewQCanvasRectangle(canvas);
		}
		private void NewQCanvasRectangle(QCanvas canvas) {
			ProxyQCanvasRectangle().NewQCanvasRectangle(canvas);
		}
		public QCanvasRectangle(QRect arg1, QCanvas canvas) : this((Type) null) {
			CreateQCanvasRectangleProxy();
			NewQCanvasRectangle(arg1,canvas);
		}
		private void NewQCanvasRectangle(QRect arg1, QCanvas canvas) {
			ProxyQCanvasRectangle().NewQCanvasRectangle(arg1,canvas);
		}
		public QCanvasRectangle(int x, int y, int width, int height, QCanvas canvas) : this((Type) null) {
			CreateQCanvasRectangleProxy();
			NewQCanvasRectangle(x,y,width,height,canvas);
		}
		private void NewQCanvasRectangle(int x, int y, int width, int height, QCanvas canvas) {
			ProxyQCanvasRectangle().NewQCanvasRectangle(x,y,width,height,canvas);
		}
		public int Width() {
			return ProxyQCanvasRectangle().Width();
		}
		public int Height() {
			return ProxyQCanvasRectangle().Height();
		}
		public void SetSize(int w, int h) {
			ProxyQCanvasRectangle().SetSize(w,h);
		}
		public QSize Size() {
			return ProxyQCanvasRectangle().Size();
		}
		public new QPointArray AreaPoints() {
			return ProxyQCanvasRectangle().AreaPoints();
		}
		public QRect Rect() {
			return ProxyQCanvasRectangle().Rect();
		}
		public new bool CollidesWith(QCanvasItem arg1) {
			return ProxyQCanvasRectangle().CollidesWith(arg1);
		}
		public new int Rtti() {
			return ProxyQCanvasRectangle().Rtti();
		}
		protected new void DrawShape(QPainter arg1) {
			ProxyQCanvasRectangle().DrawShape(arg1);
		}
		protected new QPointArray Chunks() {
			return ProxyQCanvasRectangle().Chunks();
		}
		~QCanvasRectangle() {
			ProxyQCanvasRectangle().Dispose();
		}
		public new void Dispose() {
			ProxyQCanvasRectangle().Dispose();
		}
	}
}
