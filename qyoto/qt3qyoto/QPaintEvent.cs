//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	[SmokeClass("QPaintEvent")]
	public class QPaintEvent : QEvent, IDisposable {
 		protected QPaintEvent(Type dummy) : base((Type) null) {}
		interface IQPaintEventProxy {
		}

		protected void CreateQPaintEventProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QPaintEvent), this);
			_interceptor = (QPaintEvent) realProxy.GetTransparentProxy();
		}
		private QPaintEvent ProxyQPaintEvent() {
			return (QPaintEvent) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QPaintEvent() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQPaintEventProxy), null);
			_staticInterceptor = (IQPaintEventProxy) realProxy.GetTransparentProxy();
		}
		private static IQPaintEventProxy StaticQPaintEvent() {
			return (IQPaintEventProxy) _staticInterceptor;
		}

		public QPaintEvent(QRegion paintRegion, bool erased) : this((Type) null) {
			CreateQPaintEventProxy();
			NewQPaintEvent(paintRegion,erased);
		}
		[SmokeMethod("QPaintEvent(const QRegion&, bool)")]
		private void NewQPaintEvent(QRegion paintRegion, bool erased) {
			ProxyQPaintEvent().NewQPaintEvent(paintRegion,erased);
		}
		public QPaintEvent(QRegion paintRegion) : this((Type) null) {
			CreateQPaintEventProxy();
			NewQPaintEvent(paintRegion);
		}
		[SmokeMethod("QPaintEvent(const QRegion&)")]
		private void NewQPaintEvent(QRegion paintRegion) {
			ProxyQPaintEvent().NewQPaintEvent(paintRegion);
		}
		public QPaintEvent(QRect paintRect, bool erased) : this((Type) null) {
			CreateQPaintEventProxy();
			NewQPaintEvent(paintRect,erased);
		}
		[SmokeMethod("QPaintEvent(const QRect&, bool)")]
		private void NewQPaintEvent(QRect paintRect, bool erased) {
			ProxyQPaintEvent().NewQPaintEvent(paintRect,erased);
		}
		public QPaintEvent(QRect paintRect) : this((Type) null) {
			CreateQPaintEventProxy();
			NewQPaintEvent(paintRect);
		}
		[SmokeMethod("QPaintEvent(const QRect&)")]
		private void NewQPaintEvent(QRect paintRect) {
			ProxyQPaintEvent().NewQPaintEvent(paintRect);
		}
		public QPaintEvent(QRegion paintRegion, QRect paintRect, bool erased) : this((Type) null) {
			CreateQPaintEventProxy();
			NewQPaintEvent(paintRegion,paintRect,erased);
		}
		[SmokeMethod("QPaintEvent(const QRegion&, const QRect&, bool)")]
		private void NewQPaintEvent(QRegion paintRegion, QRect paintRect, bool erased) {
			ProxyQPaintEvent().NewQPaintEvent(paintRegion,paintRect,erased);
		}
		public QPaintEvent(QRegion paintRegion, QRect paintRect) : this((Type) null) {
			CreateQPaintEventProxy();
			NewQPaintEvent(paintRegion,paintRect);
		}
		[SmokeMethod("QPaintEvent(const QRegion&, const QRect&)")]
		private void NewQPaintEvent(QRegion paintRegion, QRect paintRect) {
			ProxyQPaintEvent().NewQPaintEvent(paintRegion,paintRect);
		}
		[SmokeMethod("rect() const")]
		public QRect Rect() {
			return ProxyQPaintEvent().Rect();
		}
		[SmokeMethod("region() const")]
		public QRegion Region() {
			return ProxyQPaintEvent().Region();
		}
		[SmokeMethod("erased() const")]
		public bool Erased() {
			return ProxyQPaintEvent().Erased();
		}
		~QPaintEvent() {
			DisposeQPaintEvent();
		}
		public new void Dispose() {
			DisposeQPaintEvent();
		}
		private void DisposeQPaintEvent() {
			ProxyQPaintEvent().DisposeQPaintEvent();
		}
	}
}
