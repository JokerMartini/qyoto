//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;

	[SmokeClass("QDBusMessage")]
	public class QDBusMessage : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
		protected QDBusMessage(Type dummy) {}
		interface IQDBusMessageProxy {
			QDBusMessage Signal(string path, string arg2, string name);
			QDBusMessage MethodCall(string destination, string path, string arg3, string method);
			QDBusMessage MethodReply(QDBusMessage other);
			QDBusMessage Error(QDBusMessage other, string name, string message);
			QDBusMessage Error(QDBusMessage other, string name);
			QDBusMessage Error(QDBusMessage other, QDBusError error);
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDBusMessage), this);
			_interceptor = (QDBusMessage) realProxy.GetTransparentProxy();
		}
		private QDBusMessage ProxyQDBusMessage() {
			return (QDBusMessage) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QDBusMessage() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDBusMessageProxy), null);
			_staticInterceptor = (IQDBusMessageProxy) realProxy.GetTransparentProxy();
		}
		private static IQDBusMessageProxy StaticQDBusMessage() {
			return (IQDBusMessageProxy) _staticInterceptor;
		}

		public enum MessageType {
			InvalidMessage = 0,
			MethodCallMessage = 1,
			ReplyMessage = 2,
			ErrorMessage = 3,
			SignalMessage = 4,
		}
		public const int DefaultTimeout = -1;
		public const int NoTimeout = 2147483647;

		public QDBusMessage() : this((Type) null) {
			CreateProxy();
			NewQDBusMessage();
		}
		[SmokeMethod("QDBusMessage()")]
		private void NewQDBusMessage() {
			ProxyQDBusMessage().NewQDBusMessage();
		}
		public QDBusMessage(QDBusMessage other) : this((Type) null) {
			CreateProxy();
			NewQDBusMessage(other);
		}
		[SmokeMethod("QDBusMessage(const QDBusMessage&)")]
		private void NewQDBusMessage(QDBusMessage other) {
			ProxyQDBusMessage().NewQDBusMessage(other);
		}
		[SmokeMethod("path() const")]
		public string Path() {
			return ProxyQDBusMessage().Path();
		}
		[SmokeMethod("interface() const")]
		public string Interface() {
			return ProxyQDBusMessage().Interface();
		}
		[SmokeMethod("name() const")]
		public string Name() {
			return ProxyQDBusMessage().Name();
		}
		[SmokeMethod("member() const")]
		public string Member() {
			return ProxyQDBusMessage().Member();
		}
		[SmokeMethod("method() const")]
		public string Method() {
			return ProxyQDBusMessage().Method();
		}
		[SmokeMethod("service() const")]
		public string Service() {
			return ProxyQDBusMessage().Service();
		}
		[SmokeMethod("sender() const")]
		public string Sender() {
			return ProxyQDBusMessage().Sender();
		}
		[SmokeMethod("type() const")]
		public QDBusMessage.MessageType type() {
			return ProxyQDBusMessage().type();
		}
		[SmokeMethod("timeout() const")]
		public int Timeout() {
			return ProxyQDBusMessage().Timeout();
		}
		[SmokeMethod("setTimeout(int)")]
		public void SetTimeout(int ms) {
			ProxyQDBusMessage().SetTimeout(ms);
		}
		[SmokeMethod("noReply() const")]
		public bool NoReply() {
			return ProxyQDBusMessage().NoReply();
		}
		[SmokeMethod("signature() const")]
		public string Signature() {
			return ProxyQDBusMessage().Signature();
		}
		[SmokeMethod("setSignature(const QString&)")]
		public void SetSignature(string signature) {
			ProxyQDBusMessage().SetSignature(signature);
		}
		[SmokeMethod("connection() const")]
		public QDBusConnection Connection() {
			return ProxyQDBusMessage().Connection();
		}
		[SmokeMethod("serialNumber() const")]
		public int SerialNumber() {
			return ProxyQDBusMessage().SerialNumber();
		}
		[SmokeMethod("replySerialNumber() const")]
		public int ReplySerialNumber() {
			return ProxyQDBusMessage().ReplySerialNumber();
		}
		[SmokeMethod("wasRepliedTo() const")]
		public bool WasRepliedTo() {
			return ProxyQDBusMessage().WasRepliedTo();
		}
		[SmokeMethod("signal(const QString&, const QString&, const QString&)")]
		public static QDBusMessage Signal(string path, string arg2, string name) {
			return StaticQDBusMessage().Signal(path,arg2,name);
		}
		[SmokeMethod("methodCall(const QString&, const QString&, const QString&, const QString&)")]
		public static QDBusMessage MethodCall(string destination, string path, string arg3, string method) {
			return StaticQDBusMessage().MethodCall(destination,path,arg3,method);
		}
		[SmokeMethod("methodReply(const QDBusMessage&)")]
		public static QDBusMessage MethodReply(QDBusMessage other) {
			return StaticQDBusMessage().MethodReply(other);
		}
		[SmokeMethod("error(const QDBusMessage&, const QString&, const QString&)")]
		public static QDBusMessage Error(QDBusMessage other, string name, string message) {
			return StaticQDBusMessage().Error(other,name,message);
		}
		[SmokeMethod("error(const QDBusMessage&, const QString&)")]
		public static QDBusMessage Error(QDBusMessage other, string name) {
			return StaticQDBusMessage().Error(other,name);
		}
		[SmokeMethod("error(const QDBusMessage&, const QDBusError&)")]
		public static QDBusMessage Error(QDBusMessage other, QDBusError error) {
			return StaticQDBusMessage().Error(other,error);
		}
		~QDBusMessage() {
			DisposeQDBusMessage();
		}
		public void Dispose() {
			DisposeQDBusMessage();
		}
		private void DisposeQDBusMessage() {
			ProxyQDBusMessage().DisposeQDBusMessage();
		}
	}
}
