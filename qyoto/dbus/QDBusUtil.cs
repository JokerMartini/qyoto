//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;

	public class QDBusUtil {
		protected Object _interceptor = null;
		interface IQDBusUtilProxy {
			bool IsValidInterfaceName(string ifaceName);
			bool IsValidUniqueConnectionName(string busName);
			bool IsValidBusName(string busName);
			bool IsValidMemberName(string memberName);
			bool IsValidErrorName(string errorName);
			bool IsValidObjectPath(string path);
			bool IsValidSignature(string signature);
			bool IsValidSingleSignature(string signature);
			QVariant.E_Type SignatureToType(string signature);
			string TypeToSignature(QVariant.E_Type type);
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDBusUtil), this);
			_interceptor = (QDBusUtil) realProxy.GetTransparentProxy();
		}
		private QDBusUtil ProxyQDBusUtil() {
			return (QDBusUtil) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QDBusUtil() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDBusUtilProxy), null);
			_staticInterceptor = (IQDBusUtilProxy) realProxy.GetTransparentProxy();
		}
		private static IQDBusUtilProxy StaticQDBusUtil() {
			return (IQDBusUtilProxy) _staticInterceptor;
		}

		[SmokeMethod("isValidInterfaceName(const QString&)")]
		public static bool IsValidInterfaceName(string ifaceName) {
			return StaticQDBusUtil().IsValidInterfaceName(ifaceName);
		}
		[SmokeMethod("isValidUniqueConnectionName(const QString&)")]
		public static bool IsValidUniqueConnectionName(string busName) {
			return StaticQDBusUtil().IsValidUniqueConnectionName(busName);
		}
		[SmokeMethod("isValidBusName(const QString&)")]
		public static bool IsValidBusName(string busName) {
			return StaticQDBusUtil().IsValidBusName(busName);
		}
		[SmokeMethod("isValidMemberName(const QString&)")]
		public static bool IsValidMemberName(string memberName) {
			return StaticQDBusUtil().IsValidMemberName(memberName);
		}
		[SmokeMethod("isValidErrorName(const QString&)")]
		public static bool IsValidErrorName(string errorName) {
			return StaticQDBusUtil().IsValidErrorName(errorName);
		}
		[SmokeMethod("isValidObjectPath(const QString&)")]
		public static bool IsValidObjectPath(string path) {
			return StaticQDBusUtil().IsValidObjectPath(path);
		}
		[SmokeMethod("isValidSignature(const QString&)")]
		public static bool IsValidSignature(string signature) {
			return StaticQDBusUtil().IsValidSignature(signature);
		}
		[SmokeMethod("isValidSingleSignature(const QString&)")]
		public static bool IsValidSingleSignature(string signature) {
			return StaticQDBusUtil().IsValidSingleSignature(signature);
		}
		[SmokeMethod("signatureToType(const QString&)")]
		public static QVariant.E_Type SignatureToType(string signature) {
			return StaticQDBusUtil().SignatureToType(signature);
		}
		[SmokeMethod("typeToSignature(QVariant::Type)")]
		public static string TypeToSignature(QVariant.E_Type type) {
			return StaticQDBusUtil().TypeToSignature(type);
		}
		~QDBusUtil() {
			DisposeQDBusUtil();
		}
		public void Dispose() {
			DisposeQDBusUtil();
		}
		private void DisposeQDBusUtil() {
			ProxyQDBusUtil().DisposeQDBusUtil();
		}
	}
}
