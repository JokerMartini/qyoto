//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;

	[SmokeClass("QDBusConnection")]
	public class QDBusConnection : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
		protected QDBusConnection(Type dummy) {}
		interface IQDBusConnectionProxy {
			QDBusConnection AddConnection(QDBusConnection.BusType type, string name);
			QDBusConnection AddConnection(string address, string name);
			void CloseConnection(string name);
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDBusConnection), this);
			_interceptor = (QDBusConnection) realProxy.GetTransparentProxy();
		}
		private QDBusConnection ProxyQDBusConnection() {
			return (QDBusConnection) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QDBusConnection() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDBusConnectionProxy), null);
			_staticInterceptor = (IQDBusConnectionProxy) realProxy.GetTransparentProxy();
		}
		private static IQDBusConnectionProxy StaticQDBusConnection() {
			return (IQDBusConnectionProxy) _staticInterceptor;
		}

		public enum BusType {
			SessionBus = 0,
			SystemBus = 1,
			ActivationBus = 2,
		}
		public enum RegisterOption {
			ExportAdaptors = 0x01,
			ExportSlots = 0x10,
			ExportSignals = 0x20,
			ExportProperties = 0x40,
			ExportContents = 0xf0,
			ExportNonScriptableSlots = 0x100,
			ExportNonScriptableSignals = 0x200,
			ExportNonScriptableProperties = 0x400,
			ExportNonScriptableContents = 0xf00,
			ExportChildObjects = 0x1000,
		}
		public enum UnregisterMode {
			UnregisterNode = 0,
			UnregisterTree = 1,
		}
		public QDBusConnection(string name) : this((Type) null) {
			CreateProxy();
			NewQDBusConnection(name);
		}
		[SmokeMethod("QDBusConnection(const QString&)")]
		private void NewQDBusConnection(string name) {
			ProxyQDBusConnection().NewQDBusConnection(name);
		}
		public QDBusConnection(QDBusConnection other) : this((Type) null) {
			CreateProxy();
			NewQDBusConnection(other);
		}
		[SmokeMethod("QDBusConnection(const QDBusConnection&)")]
		private void NewQDBusConnection(QDBusConnection other) {
			ProxyQDBusConnection().NewQDBusConnection(other);
		}
		[SmokeMethod("isConnected() const")]
		public bool IsConnected() {
			return ProxyQDBusConnection().IsConnected();
		}
		[SmokeMethod("baseService() const")]
		public string BaseService() {
			return ProxyQDBusConnection().BaseService();
		}
		[SmokeMethod("lastError() const")]
		public QDBusError LastError() {
			return ProxyQDBusConnection().LastError();
		}
		[SmokeMethod("send(const QDBusMessage&) const")]
		public bool Send(QDBusMessage message) {
			return ProxyQDBusConnection().Send(message);
		}
		[SmokeMethod("call(const QDBusMessage&, QDBus::CallMode, int) const")]
		public QDBusMessage Call(QDBusMessage message, QDBus.CallMode mode, int timeout) {
			return ProxyQDBusConnection().Call(message,mode,timeout);
		}
		[SmokeMethod("call(const QDBusMessage&, QDBus::CallMode) const")]
		public QDBusMessage Call(QDBusMessage message, QDBus.CallMode mode) {
			return ProxyQDBusConnection().Call(message,mode);
		}
		[SmokeMethod("call(const QDBusMessage&) const")]
		public QDBusMessage Call(QDBusMessage message) {
			return ProxyQDBusConnection().Call(message);
		}
		[SmokeMethod("call(const QDBusMessage&, QObject*, const char*, int) const")]
		public bool Call(QDBusMessage message, QObject receiver, string slot, int timeout) {
			return ProxyQDBusConnection().Call(message,receiver,slot,timeout);
		}
		[SmokeMethod("call(const QDBusMessage&, QObject*, const char*) const")]
		public bool Call(QDBusMessage message, QObject receiver, string slot) {
			return ProxyQDBusConnection().Call(message,receiver,slot);
		}
		[SmokeMethod("connect(const QString&, const QString&, const QString&, const QString&, QObject*, const char*)")]
		public bool Connect(string service, string path, string arg3, string name, QObject receiver, string slot) {
			return ProxyQDBusConnection().Connect(service,path,arg3,name,receiver,slot);
		}
		[SmokeMethod("connect(const QString&, const QString&, const QString&, const QString&, const QString&, QObject*, const char*)")]
		public bool Connect(string service, string path, string arg3, string name, string signature, QObject receiver, string slot) {
			return ProxyQDBusConnection().Connect(service,path,arg3,name,signature,receiver,slot);
		}
		[SmokeMethod("registerObject(const QString&, QObject*, RegisterOptions)")]
		public bool RegisterObject(string path, QObject arg2, int options) {
			return ProxyQDBusConnection().RegisterObject(path,arg2,options);
		}
		[SmokeMethod("registerObject(const QString&, QObject*)")]
		public bool RegisterObject(string path, QObject arg2) {
			return ProxyQDBusConnection().RegisterObject(path,arg2);
		}
		[SmokeMethod("unregisterObject(const QString&, QDBusConnection::UnregisterMode)")]
		public void UnregisterObject(string path, QDBusConnection.UnregisterMode mode) {
			ProxyQDBusConnection().UnregisterObject(path,mode);
		}
		[SmokeMethod("unregisterObject(const QString&)")]
		public void UnregisterObject(string path) {
			ProxyQDBusConnection().UnregisterObject(path);
		}
		[SmokeMethod("registerService(const QString&)")]
		public bool RegisterService(string serviceName) {
			return ProxyQDBusConnection().RegisterService(serviceName);
		}
		[SmokeMethod("unregisterService(const QString&)")]
		public bool UnregisterService(string serviceName) {
			return ProxyQDBusConnection().UnregisterService(serviceName);
		}
		[SmokeMethod("interface() const")]
		public QDBusConnectionInterface Interface() {
			return ProxyQDBusConnection().Interface();
		}
		[SmokeMethod("addConnection(QDBusConnection::BusType, const QString&)")]
		public static QDBusConnection AddConnection(QDBusConnection.BusType type, string name) {
			return StaticQDBusConnection().AddConnection(type,name);
		}
		[SmokeMethod("addConnection(const QString&, const QString&)")]
		public static QDBusConnection AddConnection(string address, string name) {
			return StaticQDBusConnection().AddConnection(address,name);
		}
		[SmokeMethod("closeConnection(const QString&)")]
		public static void CloseConnection(string name) {
			StaticQDBusConnection().CloseConnection(name);
		}
		~QDBusConnection() {
			DisposeQDBusConnection();
		}
		public void Dispose() {
			DisposeQDBusConnection();
		}
		[SmokeMethod("~QDBusConnection()")]
		private void DisposeQDBusConnection() {
			ProxyQDBusConnection().DisposeQDBusConnection();
		}
	}
}
