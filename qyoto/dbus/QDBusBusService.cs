//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections;
	using System.Text;

	[SmokeClass("QDBusBusService")]
	public class QDBusBusService : QDBusAbstractInterface {
 		protected QDBusBusService(Type dummy) : base((Type) null) {}
		interface IQDBusBusServiceProxy {
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDBusBusService), this);
			_interceptor = (QDBusBusService) realProxy.GetTransparentProxy();
		}
		private QDBusBusService ProxyQDBusBusService() {
			return (QDBusBusService) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QDBusBusService() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDBusBusServiceProxy), null);
			_staticInterceptor = (IQDBusBusServiceProxy) realProxy.GetTransparentProxy();
		}
		private static IQDBusBusServiceProxy StaticQDBusBusService() {
			return (IQDBusBusServiceProxy) _staticInterceptor;
		}

		public enum RequestNameOption {
			AllowReplacingName = 0x1,
			ReplaceExistingName = 0x2,
			DoNotQueueName = 0x4,
		}
		public enum RequestNameReply {
			PrimaryOwnerReply = 1,
			InQueueReply = 2,
			NameExistsReply = 3,
			AlreadyOwnerReply = 4,
		}
		public enum ReleaseNameReply {
			NameReleasedReply = 1,
			NameNonExistentReply = 2,
			NotOwnerReply = 3,
		}
		public enum StartServiceReply {
			Success = 1,
			AlreadyRunning = 2,
		}
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		[SmokeMethod("Hello()")]
		public string Hello() {
			return ProxyQDBusBusService().Hello();
		}
		// QDBusReply<void> ReloadConfig(); >>>> NOT CONVERTED
		[SmokeMethod("ListNames()")]
		public ArrayList ListNames() {
			return ProxyQDBusBusService().ListNames();
		}
		// QDBusReply<bool> NameHasOwner(const QString& arg1); >>>> NOT CONVERTED
		[SmokeMethod("GetNameOwner(const QString&)")]
		public string GetNameOwner(string name) {
			return ProxyQDBusBusService().GetNameOwner(name);
		}
		// QDBusReply<QDBusBusService::ReleaseNameReply> ReleaseName(const QString& arg1); >>>> NOT CONVERTED
		[SmokeMethod("ListQueuedOwners(const QString&)")]
		public ArrayList ListQueuedOwners(string service) {
			return ProxyQDBusBusService().ListQueuedOwners(service);
		}
		// QDBusReply<void> AddMatch(const QString& arg1); >>>> NOT CONVERTED
		// QDBusReply<void> RemoveMatch(const QString& arg1); >>>> NOT CONVERTED
		// QDBusReply<QByteArray> GetConnectionSELinuxSecurityContext(const QString& arg1); >>>> NOT CONVERTED
		// QDBusReply<uint> GetConnectionUnixProcessID(const QString& arg1); >>>> NOT CONVERTED
		// QDBusReply<uint> GetConnectionUnixUser(const QString& arg1); >>>> NOT CONVERTED
		// QDBusReply<QDBusBusService::StartServiceReply> StartServiceByName(const QString& arg1,uint arg2); >>>> NOT CONVERTED
		// QDBusReply<void> reloadConfig(); >>>> NOT CONVERTED
		// QDBusReply<bool> nameHasOwner(const QString& arg1); >>>> NOT CONVERTED
		[Q_SLOT("QDBusReply<QString> nameOwner(const QString&)")]
		[SmokeMethod("nameOwner(const QString&)")]
		public string NameOwner(string name) {
			return ProxyQDBusBusService().NameOwner(name);
		}
		// QDBusReply<QDBusBusService::ReleaseNameReply> releaseName(const QString& arg1); >>>> NOT CONVERTED
		// QDBusReply<void> addMatch(const QString& arg1); >>>> NOT CONVERTED
		// QDBusReply<void> removeMatch(const QString& arg1); >>>> NOT CONVERTED
		// QDBusReply<QByteArray> connectionSELinuxSecurityContext(const QString& arg1); >>>> NOT CONVERTED
		// QDBusReply<uint> connectionUnixProcessID(const QString& arg1); >>>> NOT CONVERTED
		// QDBusReply<uint> connectionUnixUser(const QString& arg1); >>>> NOT CONVERTED
		// QDBusReply<QDBusBusService::StartServiceReply> startServiceByName(const QString& arg1,uint arg2); >>>> NOT CONVERTED
		[SmokeMethod("tr(const char*, const char*)")]
		public static new string Tr(string s, string c) {
			return StaticQDBusBusService().Tr(s,c);
		}
		[SmokeMethod("tr(const char*)")]
		public static new string Tr(string s) {
			return StaticQDBusBusService().Tr(s);
		}
		protected new IQDBusBusServiceSignals Emit() {
			return (IQDBusBusServiceSignals) Q_EMIT;
		}
	}

	public interface IQDBusBusServiceSignals : IQDBusAbstractInterfaceSignals {
	}
}
