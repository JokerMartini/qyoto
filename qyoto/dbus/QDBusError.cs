//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;

	[SmokeClass("QDBusError")]
	public class QDBusError : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
		protected QDBusError(Type dummy) {}
		interface IQDBusErrorProxy {
			bool op_equals(QDBusError lhs, QDBusError.KnownErrors error);
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDBusError), this);
			_interceptor = (QDBusError) realProxy.GetTransparentProxy();
		}
		private QDBusError ProxyQDBusError() {
			return (QDBusError) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QDBusError() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDBusErrorProxy), null);
			_staticInterceptor = (IQDBusErrorProxy) realProxy.GetTransparentProxy();
		}
		private static IQDBusErrorProxy StaticQDBusError() {
			return (IQDBusErrorProxy) _staticInterceptor;
		}

		public enum KnownErrors {
			NoError = 0,
			Other = 1,
			Failed = 2,
			NoMemory = 3,
			ServiceUnknown = 4,
			NoReply = 5,
			BadAddress = 6,
			NotSupported = 7,
			LimitsExceeded = 8,
			AccessDenied = 9,
			NoServer = 10,
			Timeout = 11,
			NoNetwork = 12,
			AddressInUse = 13,
			Disconnected = 14,
			InvalidArgs = 15,
			UnknownMethod = 16,
			TimedOut = 17,
			InvalidSignature = 18,
			UnknownInterface = 19,
			InternalError = 20,
			qKnownErrorsMax = InternalError,
		}
		// QDBusError* QDBusError(const DBusError* arg1); >>>> NOT CONVERTED
		public QDBusError() : this((Type) null) {
			CreateProxy();
			NewQDBusError();
		}
		[SmokeMethod("QDBusError()")]
		private void NewQDBusError() {
			ProxyQDBusError().NewQDBusError();
		}
		public QDBusError(QDBusMessage msg) : this((Type) null) {
			CreateProxy();
			NewQDBusError(msg);
		}
		[SmokeMethod("QDBusError(const QDBusMessage&)")]
		private void NewQDBusError(QDBusMessage msg) {
			ProxyQDBusError().NewQDBusError(msg);
		}
		public QDBusError(QDBusError.KnownErrors error, string message) : this((Type) null) {
			CreateProxy();
			NewQDBusError(error,message);
		}
		[SmokeMethod("QDBusError(QDBusError::KnownErrors, const QString&)")]
		private void NewQDBusError(QDBusError.KnownErrors error, string message) {
			ProxyQDBusError().NewQDBusError(error,message);
		}
		[SmokeMethod("name() const")]
		public string Name() {
			return ProxyQDBusError().Name();
		}
		[SmokeMethod("message() const")]
		public string Message() {
			return ProxyQDBusError().Message();
		}
		[SmokeMethod("isValid() const")]
		public bool IsValid() {
			return ProxyQDBusError().IsValid();
		}
		[SmokeMethod("operator==(QDBusError::KnownErrors) const")]
		public static bool operator==(QDBusError lhs, QDBusError.KnownErrors error) {
			return StaticQDBusError().op_equals(lhs,error);
		}
		public static bool operator!=(QDBusError lhs, QDBusError.KnownErrors error) {
			return !StaticQDBusError().op_equals(lhs,error);
		}
		~QDBusError() {
			DisposeQDBusError();
		}
		public void Dispose() {
			DisposeQDBusError();
		}
		[SmokeMethod("~QDBusError()")]
		private void DisposeQDBusError() {
			ProxyQDBusError().DisposeQDBusError();
		}
	}
}
