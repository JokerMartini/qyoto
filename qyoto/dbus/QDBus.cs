//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	public class QDBus {
		protected Object _interceptor = null;
		interface IQDBusProxy {
			QDBusConnection SessionBus();
			QDBusConnection SystemBus();
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDBus), this);
			_interceptor = (QDBus) realProxy.GetTransparentProxy();
		}
		private QDBus ProxyQDBus() {
			return (QDBus) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QDBus() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDBusProxy), null);
			_staticInterceptor = (IQDBusProxy) realProxy.GetTransparentProxy();
		}
		private static IQDBusProxy StaticQDBus() {
			return (IQDBusProxy) _staticInterceptor;
		}

		[SmokeMethod("sessionBus()")]
		public static QDBusConnection SessionBus() {
			return StaticQDBus().SessionBus();
		}
		[SmokeMethod("systemBus()")]
		public static QDBusConnection SystemBus() {
			return StaticQDBus().SystemBus();
		}
		~QDBus() {
			DisposeQDBus();
		}
		public void Dispose() {
			DisposeQDBus();
		}
		private void DisposeQDBus() {
			ProxyQDBus().DisposeQDBus();
		}
	}
}
