//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QDBusInterface")]
	public class QDBusInterface : QDBusAbstractInterface {
 		protected QDBusInterface(Type dummy) : base((Type) null) {}
		interface IQDBusInterfaceProxy {
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDBusInterface), this);
			_interceptor = (QDBusInterface) realProxy.GetTransparentProxy();
		}
		private QDBusInterface ProxyQDBusInterface() {
			return (QDBusInterface) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QDBusInterface() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDBusInterfaceProxy), null);
			_staticInterceptor = (IQDBusInterfaceProxy) realProxy.GetTransparentProxy();
		}
		private static IQDBusInterfaceProxy StaticQDBusInterface() {
			return (IQDBusInterfaceProxy) _staticInterceptor;
		}

		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		~QDBusInterface() {
			DisposeQDBusInterface();
		}
		public new void Dispose() {
			DisposeQDBusInterface();
		}
		private void DisposeQDBusInterface() {
			ProxyQDBusInterface().DisposeQDBusInterface();
		}
		protected new IQDBusInterfaceSignals Emit() {
			return (IQDBusInterfaceSignals) Q_EMIT;
		}
	}

	public interface IQDBusInterfaceSignals : IQDBusAbstractInterfaceSignals {
	}
}
