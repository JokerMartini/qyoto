//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections;
	using System.Text;

	[SmokeClass("QDBusAbstractInterface")]
	public class QDBusAbstractInterface : QObject, IDisposable {
 		protected QDBusAbstractInterface(Type dummy) : base((Type) null) {}
		interface IQDBusAbstractInterfaceProxy {
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDBusAbstractInterface), this);
			_interceptor = (QDBusAbstractInterface) realProxy.GetTransparentProxy();
		}
		private QDBusAbstractInterface ProxyQDBusAbstractInterface() {
			return (QDBusAbstractInterface) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QDBusAbstractInterface() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDBusAbstractInterfaceProxy), null);
			_staticInterceptor = (IQDBusAbstractInterfaceProxy) realProxy.GetTransparentProxy();
		}
		private static IQDBusAbstractInterfaceProxy StaticQDBusAbstractInterface() {
			return (IQDBusAbstractInterfaceProxy) _staticInterceptor;
		}

		public enum CallMode {
			NoWaitForReply = 0,
			UseEventLoop = 1,
			NoUseEventLoop = 2,
			AutoDetect = 3,
		}
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		[SmokeMethod("isValid() const")]
		public bool IsValid() {
			return ProxyQDBusAbstractInterface().IsValid();
		}
		[SmokeMethod("connection() const")]
		public QDBusConnection Connection() {
			return ProxyQDBusAbstractInterface().Connection();
		}
		[SmokeMethod("service() const")]
		public string Service() {
			return ProxyQDBusAbstractInterface().Service();
		}
		[SmokeMethod("path() const")]
		public string Path() {
			return ProxyQDBusAbstractInterface().Path();
		}
		[SmokeMethod("interface() const")]
		public string Interface() {
			return ProxyQDBusAbstractInterface().Interface();
		}
		[SmokeMethod("lastError() const")]
		public QDBusError LastError() {
			return ProxyQDBusAbstractInterface().LastError();
		}
		[SmokeMethod("callWithArgs(const QString&, const QList<QVariant>&, QDBusAbstractInterface::CallMode)")]
		public QDBusMessage CallWithArgs(string method, ArrayList args, QDBusAbstractInterface.CallMode mode) {
			return ProxyQDBusAbstractInterface().CallWithArgs(method,args,mode);
		}
		[SmokeMethod("callWithArgs(const QString&, const QList<QVariant>&)")]
		public QDBusMessage CallWithArgs(string method, ArrayList args) {
			return ProxyQDBusAbstractInterface().CallWithArgs(method,args);
		}
		[SmokeMethod("callWithArgs(const QString&)")]
		public QDBusMessage CallWithArgs(string method) {
			return ProxyQDBusAbstractInterface().CallWithArgs(method);
		}
		[SmokeMethod("callWithArgs(const QString&, QObject*, const char*, const QList<QVariant>&)")]
		public bool CallWithArgs(string method, QObject receiver, string slot, ArrayList args) {
			return ProxyQDBusAbstractInterface().CallWithArgs(method,receiver,slot,args);
		}
		[SmokeMethod("callWithArgs(const QString&, QObject*, const char*)")]
		public bool CallWithArgs(string method, QObject receiver, string slot) {
			return ProxyQDBusAbstractInterface().CallWithArgs(method,receiver,slot);
		}
		[SmokeMethod("tr(const char*, const char*)")]
		public static new string Tr(string s, string c) {
			return StaticQDBusAbstractInterface().Tr(s,c);
		}
		[SmokeMethod("tr(const char*)")]
		public static new string Tr(string s) {
			return StaticQDBusAbstractInterface().Tr(s);
		}
		// QDBusAbstractInterface* QDBusAbstractInterface(QDBusAbstractInterfacePrivate* arg1); >>>> NOT CONVERTED
		[SmokeMethod("connectNotify(const char*)")]
		protected new void ConnectNotify(string signal) {
			ProxyQDBusAbstractInterface().ConnectNotify(signal);
		}
		[SmokeMethod("disconnectNotify(const char*)")]
		protected new void DisconnectNotify(string signal) {
			ProxyQDBusAbstractInterface().DisconnectNotify(signal);
		}
		[SmokeMethod("internalPropGet(const char*) const")]
		protected QVariant InternalPropGet(string propname) {
			return ProxyQDBusAbstractInterface().InternalPropGet(propname);
		}
		[SmokeMethod("internalPropSet(const char*, const QVariant&)")]
		protected void InternalPropSet(string propname, QVariant value) {
			ProxyQDBusAbstractInterface().InternalPropSet(propname,value);
		}
		~QDBusAbstractInterface() {
			DisposeQDBusAbstractInterface();
		}
		public new void Dispose() {
			DisposeQDBusAbstractInterface();
		}
		private void DisposeQDBusAbstractInterface() {
			ProxyQDBusAbstractInterface().DisposeQDBusAbstractInterface();
		}
		protected new IQDBusAbstractInterfaceSignals Emit() {
			return (IQDBusAbstractInterfaceSignals) Q_EMIT;
		}
	}

	public interface IQDBusAbstractInterfaceSignals : IQObjectSignals {
	}
}
