//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;
	using System.Collections.Generic;

	public partial class Qt : MarshalByRefObject {
		protected Object _interceptor = null;
		[SmokeClass("Qt")]
		interface IQtProxy {
			[SmokeMethod("mightBeRichText", "(const QString&)", "$")]
			bool MightBeRichText(string arg1);
			[SmokeMethod("escape", "(const QString&)", "$")]
			string Escape(string plain);
			[SmokeMethod("convertFromPlainText", "(const QString&, Qt::WhiteSpaceMode)", "$$")]
			string ConvertFromPlainText(string plain, Qt.WhiteSpaceMode mode);
			[SmokeMethod("convertFromPlainText", "(const QString&)", "$")]
			string ConvertFromPlainText(string plain);
			[SmokeMethod("codecForHtml", "(const QByteArray&)", "#")]
			QTextCodec CodecForHtml(QByteArray ba);
			[SmokeMethod("qDBusReplyFill", "(const QDBusMessage&, QDBusError&, QVariant&)", "###")]
			void QDBusReplyFill(QDBusMessage reply, QDBusError error, QVariant data);
			[SmokeMethod("operator>>", "(const QDBusArgument&, QVariant&)", "##")]
			QDBusArgument Read(QDBusArgument a, QVariant v);
			[SmokeMethod("operator>>", "(const QDBusArgument&, QDate&)", "##")]
			QDBusArgument Read(QDBusArgument a, QDate date);
			[SmokeMethod("operator<<", "(QDBusArgument&, const QDate&)", "##")]
			QDBusArgument Write(QDBusArgument a, QDate date);
			[SmokeMethod("operator>>", "(const QDBusArgument&, QTime&)", "##")]
			QDBusArgument Read(QDBusArgument a, QTime time);
			[SmokeMethod("operator<<", "(QDBusArgument&, const QTime&)", "##")]
			QDBusArgument Write(QDBusArgument a, QTime time);
			[SmokeMethod("operator>>", "(const QDBusArgument&, QDateTime&)", "##")]
			QDBusArgument Read(QDBusArgument a, QDateTime dt);
			[SmokeMethod("operator<<", "(QDBusArgument&, const QDateTime&)", "##")]
			QDBusArgument Write(QDBusArgument a, QDateTime dt);
			[SmokeMethod("operator>>", "(const QDBusArgument&, QRect&)", "##")]
			QDBusArgument Read(QDBusArgument a, QRect rect);
			[SmokeMethod("operator<<", "(QDBusArgument&, const QRect&)", "##")]
			QDBusArgument Write(QDBusArgument a, QRect rect);
			[SmokeMethod("operator>>", "(const QDBusArgument&, QRectF&)", "##")]
			QDBusArgument Read(QDBusArgument a, QRectF rect);
			[SmokeMethod("operator<<", "(QDBusArgument&, const QRectF&)", "##")]
			QDBusArgument Write(QDBusArgument a, QRectF rect);
			[SmokeMethod("operator>>", "(const QDBusArgument&, QSize&)", "##")]
			QDBusArgument Read(QDBusArgument a, QSize size);
			[SmokeMethod("operator<<", "(QDBusArgument&, const QSize&)", "##")]
			QDBusArgument Write(QDBusArgument a, QSize size);
			[SmokeMethod("operator>>", "(const QDBusArgument&, QSizeF&)", "##")]
			QDBusArgument Read(QDBusArgument a, QSizeF size);
			[SmokeMethod("operator<<", "(QDBusArgument&, const QSizeF&)", "##")]
			QDBusArgument Write(QDBusArgument a, QSizeF size);
			[SmokeMethod("operator>>", "(const QDBusArgument&, QPoint&)", "##")]
			QDBusArgument Read(QDBusArgument a, QPoint pt);
			[SmokeMethod("operator<<", "(QDBusArgument&, const QPoint&)", "##")]
			QDBusArgument Write(QDBusArgument a, QPoint pt);
			[SmokeMethod("operator>>", "(const QDBusArgument&, QPointF&)", "##")]
			QDBusArgument Read(QDBusArgument a, QPointF pt);
			[SmokeMethod("operator<<", "(QDBusArgument&, const QPointF&)", "##")]
			QDBusArgument Write(QDBusArgument a, QPointF pt);
			[SmokeMethod("operator>>", "(const QDBusArgument&, QLine&)", "##")]
			QDBusArgument Read(QDBusArgument a, QLine line);
			[SmokeMethod("operator<<", "(QDBusArgument&, const QLine&)", "##")]
			QDBusArgument Write(QDBusArgument a, QLine line);
			[SmokeMethod("operator>>", "(const QDBusArgument&, QLineF&)", "##")]
			QDBusArgument Read(QDBusArgument a, QLineF line);
			[SmokeMethod("operator<<", "(QDBusArgument&, const QLineF&)", "##")]
			QDBusArgument Write(QDBusArgument a, QLineF line);
			[SmokeMethod("operator<<", "(QDBusArgument&, const QVariantList&)", "#?")]
			QDBusArgument Write(QDBusArgument arg, List<QVariant> list);
			[SmokeMethod("operator==", "(const QGLFormat&, const QGLFormat&)", "##")]
			bool op_equals(QGLFormat arg1, QGLFormat arg2);
			[SmokeMethod("operator==", "(QHostAddress::SpecialAddress, const QHostAddress&)", "$#")]
			bool op_equals(QHostAddress.SpecialAddress address1, QHostAddress address2);
			[SmokeMethod("qHash", "(const QHostAddress&)", "#")]
			uint QHash(QHostAddress key);
			[SmokeMethod("operator<<", "(QDataStream&, const QHostAddress&)", "##")]
			QDataStream Write(QDataStream arg1, QHostAddress arg2);
			[SmokeMethod("operator>>", "(QDataStream&, QHostAddress&)", "##")]
			QDataStream Read(QDataStream arg1, QHostAddress arg2);
			[SmokeMethod("operator==", "(QKeyEvent*, QKeySequence::StandardKey)", "#$")]
			bool op_equals(QKeyEvent e, QKeySequence.StandardKey key);
			[SmokeMethod("operator==", "(QKeySequence::StandardKey, QKeyEvent*)", "$#")]
			bool op_equals(QKeySequence.StandardKey key, QKeyEvent e);
			[SmokeMethod("operator<<", "(QDataStream&, const QPalette&)", "##")]
			QDataStream Write(QDataStream ds, QPalette p);
			[SmokeMethod("operator>>", "(QDataStream&, QPalette&)", "##")]
			QDataStream Read(QDataStream ds, QPalette p);
			[SmokeMethod("operator<<", "(QDataStream&, const QCursor&)", "##")]
			QDataStream Write(QDataStream outS, QCursor cursor);
			[SmokeMethod("operator>>", "(QDataStream&, QCursor&)", "##")]
			QDataStream Read(QDataStream inS, QCursor cursor);
			[SmokeMethod("operator<<", "(QDataStream&, const QKeySequence&)", "##")]
			QDataStream Write(QDataStream arg1, QKeySequence ks);
			[SmokeMethod("operator>>", "(QDataStream&, QKeySequence&)", "##")]
			QDataStream Read(QDataStream arg1, QKeySequence ks);
			[SmokeMethod("operator<<", "(QDataStream&, const QSizePolicy&)", "##")]
			QDataStream Write(QDataStream arg1, QSizePolicy arg2);
			[SmokeMethod("operator>>", "(QDataStream&, QSizePolicy&)", "##")]
			QDataStream Read(QDataStream arg1, QSizePolicy arg2);
			[SmokeMethod("operator<<", "(QDataStream&, const QPicture&)", "##")]
			QDataStream Write(QDataStream arg1, QPicture arg2);
			[SmokeMethod("operator>>", "(QDataStream&, QPicture&)", "##")]
			QDataStream Read(QDataStream arg1, QPicture arg2);
			[SmokeMethod("operator<<", "(QDataStream&, const QImage&)", "##")]
			QDataStream Write(QDataStream arg1, QImage arg2);
			[SmokeMethod("operator>>", "(QDataStream&, QImage&)", "##")]
			QDataStream Read(QDataStream arg1, QImage arg2);
			[SmokeMethod("operator<<", "(QDataStream&, const QIcon&)", "##")]
			QDataStream Write(QDataStream arg1, QIcon arg2);
			[SmokeMethod("operator>>", "(QDataStream&, QIcon&)", "##")]
			QDataStream Read(QDataStream arg1, QIcon arg2);
			[SmokeMethod("operator<<", "(QDataStream&, const QPixmap&)", "##")]
			QDataStream Write(QDataStream arg1, QPixmap arg2);
			[SmokeMethod("operator>>", "(QDataStream&, QPixmap&)", "##")]
			QDataStream Read(QDataStream arg1, QPixmap arg2);
			[SmokeMethod("operator<<", "(QDataStream&, const QFont&)", "##")]
			QDataStream Write(QDataStream arg1, QFont arg2);
			[SmokeMethod("operator>>", "(QDataStream&, QFont&)", "##")]
			QDataStream Read(QDataStream arg1, QFont arg2);
			[SmokeMethod("operator<<", "(QDataStream&, const QTextLength&)", "##")]
			QDataStream Write(QDataStream arg1, QTextLength arg2);
			[SmokeMethod("operator>>", "(QDataStream&, QTextLength&)", "##")]
			QDataStream Read(QDataStream arg1, QTextLength arg2);
			[SmokeMethod("operator<<", "(QTextStream&, const QSplitter&)", "##")]
			QTextStream Write(QTextStream arg1, QSplitter arg2);
			[SmokeMethod("operator>>", "(QTextStream&, QSplitter&)", "##")]
			QTextStream Read(QTextStream arg1, QSplitter arg2);
			[SmokeMethod("operator<<", "(QDataStream&, const QColor&)", "##")]
			QDataStream Write(QDataStream arg1, QColor arg2);
			[SmokeMethod("operator>>", "(QDataStream&, QColor&)", "##")]
			QDataStream Read(QDataStream arg1, QColor arg2);
			[SmokeMethod("operator<<", "(QDataStream&, const QPen&)", "##")]
			QDataStream Write(QDataStream arg1, QPen arg2);
			[SmokeMethod("operator>>", "(QDataStream&, QPen&)", "##")]
			QDataStream Read(QDataStream arg1, QPen arg2);
			[SmokeMethod("qDrawShadeLine", "(QPainter*, int, int, int, int, const QPalette&, bool, int, int)", "#$$$$#$$$")]
			void QDrawShadeLine(QPainter p, int x1, int y1, int x2, int y2, QPalette pal, bool sunken, int lineWidth, int midLineWidth);
			[SmokeMethod("qDrawShadeLine", "(QPainter*, int, int, int, int, const QPalette&, bool, int)", "#$$$$#$$")]
			void QDrawShadeLine(QPainter p, int x1, int y1, int x2, int y2, QPalette pal, bool sunken, int lineWidth);
			[SmokeMethod("qDrawShadeLine", "(QPainter*, int, int, int, int, const QPalette&, bool)", "#$$$$#$")]
			void QDrawShadeLine(QPainter p, int x1, int y1, int x2, int y2, QPalette pal, bool sunken);
			[SmokeMethod("qDrawShadeLine", "(QPainter*, int, int, int, int, const QPalette&)", "#$$$$#")]
			void QDrawShadeLine(QPainter p, int x1, int y1, int x2, int y2, QPalette pal);
			[SmokeMethod("qDrawShadeLine", "(QPainter*, const QPoint&, const QPoint&, const QPalette&, bool, int, int)", "####$$$")]
			void QDrawShadeLine(QPainter p, QPoint p1, QPoint p2, QPalette pal, bool sunken, int lineWidth, int midLineWidth);
			[SmokeMethod("qDrawShadeLine", "(QPainter*, const QPoint&, const QPoint&, const QPalette&, bool, int)", "####$$")]
			void QDrawShadeLine(QPainter p, QPoint p1, QPoint p2, QPalette pal, bool sunken, int lineWidth);
			[SmokeMethod("qDrawShadeLine", "(QPainter*, const QPoint&, const QPoint&, const QPalette&, bool)", "####$")]
			void QDrawShadeLine(QPainter p, QPoint p1, QPoint p2, QPalette pal, bool sunken);
			[SmokeMethod("qDrawShadeLine", "(QPainter*, const QPoint&, const QPoint&, const QPalette&)", "####")]
			void QDrawShadeLine(QPainter p, QPoint p1, QPoint p2, QPalette pal);
			[SmokeMethod("qDrawShadeRect", "(QPainter*, int, int, int, int, const QPalette&, bool, int, int, const QBrush*)", "#$$$$#$$$#")]
			void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken, int lineWidth, int midLineWidth, QBrush fill);
			[SmokeMethod("qDrawShadeRect", "(QPainter*, int, int, int, int, const QPalette&, bool, int, int)", "#$$$$#$$$")]
			void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken, int lineWidth, int midLineWidth);
			[SmokeMethod("qDrawShadeRect", "(QPainter*, int, int, int, int, const QPalette&, bool, int)", "#$$$$#$$")]
			void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken, int lineWidth);
			[SmokeMethod("qDrawShadeRect", "(QPainter*, int, int, int, int, const QPalette&, bool)", "#$$$$#$")]
			void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken);
			[SmokeMethod("qDrawShadeRect", "(QPainter*, int, int, int, int, const QPalette&)", "#$$$$#")]
			void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QPalette pal);
			[SmokeMethod("qDrawShadeRect", "(QPainter*, const QRect&, const QPalette&, bool, int, int, const QBrush*)", "###$$$#")]
			void QDrawShadeRect(QPainter p, QRect r, QPalette pal, bool sunken, int lineWidth, int midLineWidth, QBrush fill);
			[SmokeMethod("qDrawShadeRect", "(QPainter*, const QRect&, const QPalette&, bool, int, int)", "###$$$")]
			void QDrawShadeRect(QPainter p, QRect r, QPalette pal, bool sunken, int lineWidth, int midLineWidth);
			[SmokeMethod("qDrawShadeRect", "(QPainter*, const QRect&, const QPalette&, bool, int)", "###$$")]
			void QDrawShadeRect(QPainter p, QRect r, QPalette pal, bool sunken, int lineWidth);
			[SmokeMethod("qDrawShadeRect", "(QPainter*, const QRect&, const QPalette&, bool)", "###$")]
			void QDrawShadeRect(QPainter p, QRect r, QPalette pal, bool sunken);
			[SmokeMethod("qDrawShadeRect", "(QPainter*, const QRect&, const QPalette&)", "###")]
			void QDrawShadeRect(QPainter p, QRect r, QPalette pal);
			[SmokeMethod("qDrawShadePanel", "(QPainter*, int, int, int, int, const QPalette&, bool, int, const QBrush*)", "#$$$$#$$#")]
			void QDrawShadePanel(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken, int lineWidth, QBrush fill);
			[SmokeMethod("qDrawShadePanel", "(QPainter*, int, int, int, int, const QPalette&, bool, int)", "#$$$$#$$")]
			void QDrawShadePanel(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken, int lineWidth);
			[SmokeMethod("qDrawShadePanel", "(QPainter*, int, int, int, int, const QPalette&, bool)", "#$$$$#$")]
			void QDrawShadePanel(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken);
			[SmokeMethod("qDrawShadePanel", "(QPainter*, int, int, int, int, const QPalette&)", "#$$$$#")]
			void QDrawShadePanel(QPainter p, int x, int y, int w, int h, QPalette pal);
			[SmokeMethod("qDrawShadePanel", "(QPainter*, const QRect&, const QPalette&, bool, int, const QBrush*)", "###$$#")]
			void QDrawShadePanel(QPainter p, QRect r, QPalette pal, bool sunken, int lineWidth, QBrush fill);
			[SmokeMethod("qDrawShadePanel", "(QPainter*, const QRect&, const QPalette&, bool, int)", "###$$")]
			void QDrawShadePanel(QPainter p, QRect r, QPalette pal, bool sunken, int lineWidth);
			[SmokeMethod("qDrawShadePanel", "(QPainter*, const QRect&, const QPalette&, bool)", "###$")]
			void QDrawShadePanel(QPainter p, QRect r, QPalette pal, bool sunken);
			[SmokeMethod("qDrawShadePanel", "(QPainter*, const QRect&, const QPalette&)", "###")]
			void QDrawShadePanel(QPainter p, QRect r, QPalette pal);
			[SmokeMethod("qDrawWinButton", "(QPainter*, int, int, int, int, const QPalette&, bool, const QBrush*)", "#$$$$#$#")]
			void QDrawWinButton(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken, QBrush fill);
			[SmokeMethod("qDrawWinButton", "(QPainter*, int, int, int, int, const QPalette&, bool)", "#$$$$#$")]
			void QDrawWinButton(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken);
			[SmokeMethod("qDrawWinButton", "(QPainter*, int, int, int, int, const QPalette&)", "#$$$$#")]
			void QDrawWinButton(QPainter p, int x, int y, int w, int h, QPalette pal);
			[SmokeMethod("qDrawWinButton", "(QPainter*, const QRect&, const QPalette&, bool, const QBrush*)", "###$#")]
			void QDrawWinButton(QPainter p, QRect r, QPalette pal, bool sunken, QBrush fill);
			[SmokeMethod("qDrawWinButton", "(QPainter*, const QRect&, const QPalette&, bool)", "###$")]
			void QDrawWinButton(QPainter p, QRect r, QPalette pal, bool sunken);
			[SmokeMethod("qDrawWinButton", "(QPainter*, const QRect&, const QPalette&)", "###")]
			void QDrawWinButton(QPainter p, QRect r, QPalette pal);
			[SmokeMethod("qDrawWinPanel", "(QPainter*, int, int, int, int, const QPalette&, bool, const QBrush*)", "#$$$$#$#")]
			void QDrawWinPanel(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken, QBrush fill);
			[SmokeMethod("qDrawWinPanel", "(QPainter*, int, int, int, int, const QPalette&, bool)", "#$$$$#$")]
			void QDrawWinPanel(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken);
			[SmokeMethod("qDrawWinPanel", "(QPainter*, int, int, int, int, const QPalette&)", "#$$$$#")]
			void QDrawWinPanel(QPainter p, int x, int y, int w, int h, QPalette pal);
			[SmokeMethod("qDrawWinPanel", "(QPainter*, const QRect&, const QPalette&, bool, const QBrush*)", "###$#")]
			void QDrawWinPanel(QPainter p, QRect r, QPalette pal, bool sunken, QBrush fill);
			[SmokeMethod("qDrawWinPanel", "(QPainter*, const QRect&, const QPalette&, bool)", "###$")]
			void QDrawWinPanel(QPainter p, QRect r, QPalette pal, bool sunken);
			[SmokeMethod("qDrawWinPanel", "(QPainter*, const QRect&, const QPalette&)", "###")]
			void QDrawWinPanel(QPainter p, QRect r, QPalette pal);
			[SmokeMethod("qDrawPlainRect", "(QPainter*, int, int, int, int, const QColor&, int, const QBrush*)", "#$$$$#$#")]
			void QDrawPlainRect(QPainter p, int x, int y, int w, int h, QColor arg6, int lineWidth, QBrush fill);
			[SmokeMethod("qDrawPlainRect", "(QPainter*, int, int, int, int, const QColor&, int)", "#$$$$#$")]
			void QDrawPlainRect(QPainter p, int x, int y, int w, int h, QColor arg6, int lineWidth);
			[SmokeMethod("qDrawPlainRect", "(QPainter*, int, int, int, int, const QColor&)", "#$$$$#")]
			void QDrawPlainRect(QPainter p, int x, int y, int w, int h, QColor arg6);
			[SmokeMethod("qDrawPlainRect", "(QPainter*, const QRect&, const QColor&, int, const QBrush*)", "###$#")]
			void QDrawPlainRect(QPainter p, QRect r, QColor arg3, int lineWidth, QBrush fill);
			[SmokeMethod("qDrawPlainRect", "(QPainter*, const QRect&, const QColor&, int)", "###$")]
			void QDrawPlainRect(QPainter p, QRect r, QColor arg3, int lineWidth);
			[SmokeMethod("qDrawPlainRect", "(QPainter*, const QRect&, const QColor&)", "###")]
			void QDrawPlainRect(QPainter p, QRect r, QColor arg3);
			[SmokeMethod("operator<<", "(QDataStream&, const QBrush&)", "##")]
			QDataStream Write(QDataStream arg1, QBrush arg2);
			[SmokeMethod("operator>>", "(QDataStream&, QBrush&)", "##")]
			QDataStream Read(QDataStream arg1, QBrush arg2);
			[SmokeMethod("qRed", "(QRgb)", "$")]
			int QRed(uint rgb);
			[SmokeMethod("qGreen", "(QRgb)", "$")]
			int QGreen(uint rgb);
			[SmokeMethod("qBlue", "(QRgb)", "$")]
			int QBlue(uint rgb);
			[SmokeMethod("qAlpha", "(QRgb)", "$")]
			int QAlpha(uint rgb);
			[SmokeMethod("qRgb", "(int, int, int)", "$$$")]
			uint QRgb(int r, int g, int b);
			[SmokeMethod("qRgba", "(int, int, int, int)", "$$$$")]
			uint QRgba(int r, int g, int b, int a);
			[SmokeMethod("qGray", "(int, int, int)", "$$$")]
			int QGray(int r, int g, int b);
			[SmokeMethod("qGray", "(QRgb)", "$")]
			int QGray(uint rgb);
			[SmokeMethod("qIsGray", "(QRgb)", "$")]
			bool QIsGray(uint rgb);
			[SmokeMethod("operator<<", "(QDataStream&, const QPainterPath&)", "##")]
			QDataStream Write(QDataStream arg1, QPainterPath arg2);
			[SmokeMethod("operator>>", "(QDataStream&, QPainterPath&)", "##")]
			QDataStream Read(QDataStream arg1, QPainterPath arg2);
			[SmokeMethod("operator<<", "(QDataStream&, const QRegion&)", "##")]
			QDataStream Write(QDataStream arg1, QRegion arg2);
			[SmokeMethod("operator>>", "(QDataStream&, QRegion&)", "##")]
			QDataStream Read(QDataStream arg1, QRegion arg2);
			[SmokeMethod("operator<<", "(QDataStream&, const QPolygonF&)", "##")]
			QDataStream Write(QDataStream stream, QPolygonF array);
			[SmokeMethod("operator>>", "(QDataStream&, QPolygonF&)", "##")]
			QDataStream Read(QDataStream stream, QPolygonF array);
			[SmokeMethod("operator*", "(const QPoint&, const QMatrix&)", "##")]
			QPoint op_mult(QPoint p, QMatrix m);
			[SmokeMethod("operator*", "(const QPointF&, const QMatrix&)", "##")]
			QPointF op_mult(QPointF p, QMatrix m);
			[SmokeMethod("operator*", "(const QLineF&, const QMatrix&)", "##")]
			QLineF op_mult(QLineF l, QMatrix m);
			[SmokeMethod("operator*", "(const QLine&, const QMatrix&)", "##")]
			QLine op_mult(QLine l, QMatrix m);
			[SmokeMethod("operator*", "(const QPolygon&, const QMatrix&)", "##")]
			QPolygon op_mult(QPolygon a, QMatrix m);
			[SmokeMethod("operator*", "(const QPolygonF&, const QMatrix&)", "##")]
			QPolygonF op_mult(QPolygonF a, QMatrix m);
			[SmokeMethod("operator*", "(const QRegion&, const QMatrix&)", "##")]
			QRegion op_mult(QRegion r, QMatrix m);
			[SmokeMethod("operator*", "(const QPainterPath&, const QMatrix&)", "##")]
			QPainterPath op_mult(QPainterPath p, QMatrix m);
			[SmokeMethod("operator<<", "(QDataStream&, const QMatrix&)", "##")]
			QDataStream Write(QDataStream arg1, QMatrix arg2);
			[SmokeMethod("operator>>", "(QDataStream&, QMatrix&)", "##")]
			QDataStream Read(QDataStream arg1, QMatrix arg2);
			[SmokeMethod("operator>>", "(QDataStream&, QTableWidgetItem&)", "##")]
			QDataStream Read(QDataStream arg1, QTableWidgetItem item);
			[SmokeMethod("operator<<", "(QDataStream&, const QTableWidgetItem&)", "##")]
			QDataStream Write(QDataStream arg1, QTableWidgetItem item);
			[SmokeMethod("operator<<", "(QDataStream&, const QTreeWidgetItem&)", "##")]
			QDataStream Write(QDataStream arg1, QTreeWidgetItem item);
			[SmokeMethod("operator>>", "(QDataStream&, QTreeWidgetItem&)", "##")]
			QDataStream Read(QDataStream arg1, QTreeWidgetItem item);
			[SmokeMethod("operator<<", "(QDataStream&, const QListWidgetItem&)", "##")]
			QDataStream Write(QDataStream arg1, QListWidgetItem item);
			[SmokeMethod("operator>>", "(QDataStream&, QListWidgetItem&)", "##")]
			QDataStream Read(QDataStream arg1, QListWidgetItem item);
			[SmokeMethod("qHash", "(const QItemSelectionRange&)", "#")]
			uint QHash(QItemSelectionRange arg1);
			[SmokeMethod("operator<<", "(QTextStream&, const QDomNode&)", "##")]
			QTextStream Write(QTextStream arg1, QDomNode arg2);
			[SmokeMethod("qRound", "(qreal)", "$")]
			int QRound(double d);
			[SmokeMethod("qRound64", "(qreal)", "$")]
			long QRound64(double d);
			[SmokeMethod("qVersion", "()", "")]
			string QVersion();
			[SmokeMethod("qSharedBuild", "()", "")]
			bool QSharedBuild();
			[SmokeMethod("operator==", "(QBool, bool)", "#$")]
			bool op_equals(QBool b1, bool b2);
			[SmokeMethod("operator==", "(bool, QBool)", "$#")]
			bool op_equals(bool b1, QBool b2);
			[SmokeMethod("operator==", "(QBool, QBool)", "##")]
			bool op_equals(QBool b1, QBool b2);
			[SmokeMethod("qFuzzyCompare", "(double, double)", "$$")]
			bool QFuzzyCompare(double p1, double p2);
			[SmokeMethod("qFuzzyCompare", "(float, float)", "$$")]
			bool QFuzzyCompare(float p1, float p2);
			[SmokeMethod("qIsNull", "(double)", "$")]
			bool QIsNull(double d);
			[SmokeMethod("qIsNull", "(float)", "$")]
			bool QIsNull(float f);
			[SmokeMethod("qgetenv", "(const char*)", "$")]
			QByteArray Qgetenv(string varName);
			[SmokeMethod("qIntCast", "(double)", "$")]
			int QIntCast(double f);
			[SmokeMethod("qIntCast", "(float)", "$")]
			int QIntCast(float f);
			[SmokeMethod("qsrand", "(uint)", "$")]
			void Qsrand(uint seed);
			[SmokeMethod("qrand", "()", "")]
			int Qrand();
			[SmokeMethod("operator>>", "(QDataStream&, QVariant&)", "##")]
			QDataStream Read(QDataStream s, QVariant p);
			[SmokeMethod("operator<<", "(QDataStream&, const QVariant&)", "##")]
			QDataStream Write(QDataStream s, QVariant p);
			[SmokeMethod("qAppName", "()", "")]
			string QAppName();
			[SmokeMethod("qHash", "(const QModelIndex&)", "#")]
			uint QHash(QModelIndex index);
			[SmokeMethod("operator==", "(const QRect&, const QRect&)", "##")]
			bool op_equals(QRect arg1, QRect arg2);
			[SmokeMethod("operator<<", "(QDataStream&, const QRect&)", "##")]
			QDataStream Write(QDataStream arg1, QRect arg2);
			[SmokeMethod("operator>>", "(QDataStream&, QRect&)", "##")]
			QDataStream Read(QDataStream arg1, QRect arg2);
			[SmokeMethod("operator==", "(const QRectF&, const QRectF&)", "##")]
			bool op_equals(QRectF arg1, QRectF arg2);
			[SmokeMethod("operator<<", "(QDataStream&, const QRectF&)", "##")]
			QDataStream Write(QDataStream arg1, QRectF arg2);
			[SmokeMethod("operator>>", "(QDataStream&, QRectF&)", "##")]
			QDataStream Read(QDataStream arg1, QRectF arg2);
			[SmokeMethod("operator<<", "(QDataStream&, const QLocale&)", "##")]
			QDataStream Write(QDataStream arg1, QLocale arg2);
			[SmokeMethod("operator>>", "(QDataStream&, QLocale&)", "##")]
			QDataStream Read(QDataStream arg1, QLocale arg2);
			[SmokeMethod("operator>>", "(QDataStream&, QStringList&)", "#?")]
			QDataStream Read(QDataStream arg1, List<string> list);
			[SmokeMethod("operator<<", "(QDataStream&, const QStringList&)", "#?")]
			QDataStream Write(QDataStream arg1, List<string> list);
			[SmokeMethod("qstrdup", "(const char*)", "$")]
			string Qstrdup(string arg1);
			[SmokeMethod("qstrlen", "(const char*)", "$")]
			uint Qstrlen(string str);
			[SmokeMethod("qstrnlen", "(const char*, uint)", "$$")]
			uint Qstrnlen(string str, uint maxlen);
			[SmokeMethod("qstrcpy", "(char*, const char*)", "$$")]
			string Qstrcpy(string dst, string src);
			[SmokeMethod("qstrncpy", "(char*, const char*, uint)", "$$$")]
			string Qstrncpy(string dst, string src, uint len);
			[SmokeMethod("qstrcmp", "(const char*, const char*)", "$$")]
			int Qstrcmp(string str1, string str2);
			[SmokeMethod("qstrncmp", "(const char*, const char*, uint)", "$$$")]
			int Qstrncmp(string str1, string str2, uint len);
			[SmokeMethod("qstricmp", "(const char*, const char*)", "$$")]
			int Qstricmp(string arg1, string arg2);
			[SmokeMethod("qstrnicmp", "(const char*, const char*, uint)", "$$$")]
			int Qstrnicmp(string arg1, string arg2, uint len);
			[SmokeMethod("qChecksum", "(const char*, uint)", "$$")]
			ushort QChecksum(string s, uint len);
			[SmokeMethod("operator==", "(const QByteArray&, const QByteArray&)", "##")]
			bool op_equals(QByteArray a1, QByteArray a2);
			[SmokeMethod("operator==", "(const QByteArray&, const char*)", "#$")]
			bool op_equals(QByteArray a1, string a2);
			[SmokeMethod("operator==", "(const char*, const QByteArray&)", "$#")]
			bool op_equals(string a1, QByteArray a2);
			[SmokeMethod("operator<", "(const QByteArray&, const QByteArray&)", "##")]
			bool op_lt(QByteArray a1, QByteArray a2);
			[SmokeMethod("operator<", "(const QByteArray&, const char*)", "#$")]
			bool op_lt(QByteArray a1, string a2);
			[SmokeMethod("operator<", "(const char*, const QByteArray&)", "$#")]
			bool op_lt(string a1, QByteArray a2);
			[SmokeMethod("operator<=", "(const QByteArray&, const QByteArray&)", "##")]
			bool op_lte(QByteArray a1, QByteArray a2);
			[SmokeMethod("operator<=", "(const QByteArray&, const char*)", "#$")]
			bool op_lte(QByteArray a1, string a2);
			[SmokeMethod("operator<=", "(const char*, const QByteArray&)", "$#")]
			bool op_lte(string a1, QByteArray a2);
			[SmokeMethod("operator>", "(const QByteArray&, const QByteArray&)", "##")]
			bool op_gt(QByteArray a1, QByteArray a2);
			[SmokeMethod("operator>", "(const QByteArray&, const char*)", "#$")]
			bool op_gt(QByteArray a1, string a2);
			[SmokeMethod("operator>", "(const char*, const QByteArray&)", "$#")]
			bool op_gt(string a1, QByteArray a2);
			[SmokeMethod("operator>=", "(const QByteArray&, const QByteArray&)", "##")]
			bool op_gte(QByteArray a1, QByteArray a2);
			[SmokeMethod("operator>=", "(const QByteArray&, const char*)", "#$")]
			bool op_gte(QByteArray a1, string a2);
			[SmokeMethod("operator>=", "(const char*, const QByteArray&)", "$#")]
			bool op_gte(string a1, QByteArray a2);
			[SmokeMethod("operator+", "(const QByteArray&, const QByteArray&)", "##")]
			QByteArray op_plus(QByteArray a1, QByteArray a2);
			[SmokeMethod("operator+", "(const QByteArray&, const char*)", "#$")]
			QByteArray op_plus(QByteArray a1, string a2);
			[SmokeMethod("operator+", "(const QByteArray&, char)", "#$")]
			QByteArray op_plus(QByteArray a1, char a2);
			[SmokeMethod("operator+", "(const char*, const QByteArray&)", "$#")]
			QByteArray op_plus(string a1, QByteArray a2);
			[SmokeMethod("operator+", "(char, const QByteArray&)", "$#")]
			QByteArray op_plus(char a1, QByteArray a2);
			[SmokeMethod("operator<<", "(QDataStream&, const QByteArray&)", "##")]
			QDataStream Write(QDataStream arg1, QByteArray arg2);
			[SmokeMethod("operator>>", "(QDataStream&, QByteArray&)", "##")]
			QDataStream Read(QDataStream arg1, QByteArray arg2);
			[SmokeMethod("qCompress", "(const uchar*, int, int)", "$$$")]
			QByteArray QCompress(char[] data, int nbytes, int compressionLevel);
			[SmokeMethod("qCompress", "(const uchar*, int)", "$$")]
			QByteArray QCompress(char[] data, int nbytes);
			[SmokeMethod("qUncompress", "(const uchar*, int)", "$$")]
			QByteArray QUncompress(char[] data, int nbytes);
			[SmokeMethod("qCompress", "(const QByteArray&, int)", "#$")]
			QByteArray QCompress(QByteArray data, int compressionLevel);
			[SmokeMethod("qCompress", "(const QByteArray&)", "#")]
			QByteArray QCompress(QByteArray data);
			[SmokeMethod("qUncompress", "(const QByteArray&)", "#")]
			QByteArray QUncompress(QByteArray data);
			[SmokeMethod("operator<<", "(QDataStream&, const QSize&)", "##")]
			QDataStream Write(QDataStream arg1, QSize arg2);
			[SmokeMethod("operator>>", "(QDataStream&, QSize&)", "##")]
			QDataStream Read(QDataStream arg1, QSize arg2);
			[SmokeMethod("operator==", "(const QSize&, const QSize&)", "##")]
			bool op_equals(QSize s1, QSize s2);
			[SmokeMethod("operator+", "(const QSize&, const QSize&)", "##")]
			QSize op_plus(QSize s1, QSize s2);
			[SmokeMethod("operator-", "(const QSize&, const QSize&)", "##")]
			QSize op_minus(QSize s1, QSize s2);
			[SmokeMethod("operator*", "(const QSize&, qreal)", "#$")]
			QSize op_mult(QSize s, double c);
			[SmokeMethod("operator*", "(qreal, const QSize&)", "$#")]
			QSize op_mult(double c, QSize s);
			[SmokeMethod("operator/", "(const QSize&, qreal)", "#$")]
			QSize op_div(QSize s, double c);
			[SmokeMethod("operator<<", "(QDataStream&, const QSizeF&)", "##")]
			QDataStream Write(QDataStream arg1, QSizeF arg2);
			[SmokeMethod("operator>>", "(QDataStream&, QSizeF&)", "##")]
			QDataStream Read(QDataStream arg1, QSizeF arg2);
			[SmokeMethod("operator==", "(const QSizeF&, const QSizeF&)", "##")]
			bool op_equals(QSizeF s1, QSizeF s2);
			[SmokeMethod("operator+", "(const QSizeF&, const QSizeF&)", "##")]
			QSizeF op_plus(QSizeF s1, QSizeF s2);
			[SmokeMethod("operator-", "(const QSizeF&, const QSizeF&)", "##")]
			QSizeF op_minus(QSizeF s1, QSizeF s2);
			[SmokeMethod("operator*", "(const QSizeF&, qreal)", "#$")]
			QSizeF op_mult(QSizeF s, double c);
			[SmokeMethod("operator*", "(qreal, const QSizeF&)", "$#")]
			QSizeF op_mult(double c, QSizeF s);
			[SmokeMethod("operator/", "(const QSizeF&, qreal)", "#$")]
			QSizeF op_div(QSizeF s, double c);
			[SmokeMethod("operator<<", "(QDataStream&, const QLine&)", "##")]
			QDataStream Write(QDataStream arg1, QLine arg2);
			[SmokeMethod("operator>>", "(QDataStream&, QLine&)", "##")]
			QDataStream Read(QDataStream arg1, QLine arg2);
			[SmokeMethod("operator<<", "(QDataStream&, const QLineF&)", "##")]
			QDataStream Write(QDataStream arg1, QLineF arg2);
			[SmokeMethod("operator>>", "(QDataStream&, QLineF&)", "##")]
			QDataStream Read(QDataStream arg1, QLineF arg2);
			[SmokeMethod("operator<<", "(QDataStream&, const QRegExp&)", "##")]
			QDataStream Write(QDataStream arg1, QRegExp regExp);
			[SmokeMethod("operator>>", "(QDataStream&, QRegExp&)", "##")]
			QDataStream Read(QDataStream arg1, QRegExp regExp);
			[SmokeMethod("operator<<", "(QDataStream&, const QDate&)", "##")]
			QDataStream Write(QDataStream arg1, QDate arg2);
			[SmokeMethod("operator>>", "(QDataStream&, QDate&)", "##")]
			QDataStream Read(QDataStream arg1, QDate arg2);
			[SmokeMethod("operator<<", "(QDataStream&, const QTime&)", "##")]
			QDataStream Write(QDataStream arg1, QTime arg2);
			[SmokeMethod("operator>>", "(QDataStream&, QTime&)", "##")]
			QDataStream Read(QDataStream arg1, QTime arg2);
			[SmokeMethod("operator<<", "(QDataStream&, const QDateTime&)", "##")]
			QDataStream Write(QDataStream arg1, QDateTime arg2);
			[SmokeMethod("operator>>", "(QDataStream&, QDateTime&)", "##")]
			QDataStream Read(QDataStream arg1, QDateTime arg2);
			[SmokeMethod("operator==", "(QChar, QChar)", "##")]
			bool op_equals(char c1, char c2);
			[SmokeMethod("operator<=", "(QChar, QChar)", "##")]
			bool op_lte(char c1, char c2);
			[SmokeMethod("operator>=", "(QChar, QChar)", "##")]
			bool op_gte(char c1, char c2);
			[SmokeMethod("operator<", "(QChar, QChar)", "##")]
			bool op_lt(char c1, char c2);
			[SmokeMethod("operator>", "(QChar, QChar)", "##")]
			bool op_gt(char c1, char c2);
			[SmokeMethod("operator<<", "(QDataStream&, const QChar&)", "##")]
			QDataStream Write(QDataStream arg1, char arg2);
			[SmokeMethod("operator>>", "(QDataStream&, QChar&)", "##")]
			QDataStream Read(QDataStream arg1, char arg2);
			[SmokeMethod("operator<<", "(QDataStream&, const QPoint&)", "##")]
			QDataStream Write(QDataStream arg1, QPoint arg2);
			[SmokeMethod("operator>>", "(QDataStream&, QPoint&)", "##")]
			QDataStream Read(QDataStream arg1, QPoint arg2);
			[SmokeMethod("operator==", "(const QPoint&, const QPoint&)", "##")]
			bool op_equals(QPoint p1, QPoint p2);
			[SmokeMethod("operator+", "(const QPoint&, const QPoint&)", "##")]
			QPoint op_plus(QPoint p1, QPoint p2);
			[SmokeMethod("operator-", "(const QPoint&, const QPoint&)", "##")]
			QPoint op_minus(QPoint p1, QPoint p2);
			[SmokeMethod("operator*", "(const QPoint&, qreal)", "#$")]
			QPoint op_mult(QPoint p, double c);
			[SmokeMethod("operator*", "(qreal, const QPoint&)", "$#")]
			QPoint op_mult(double c, QPoint p);
			[SmokeMethod("operator-", "(const QPoint&)", "#")]
			QPoint op_minus(QPoint p);
			[SmokeMethod("operator/", "(const QPoint&, qreal)", "#$")]
			QPoint op_div(QPoint p, double c);
			[SmokeMethod("operator<<", "(QDataStream&, const QPointF&)", "##")]
			QDataStream Write(QDataStream arg1, QPointF arg2);
			[SmokeMethod("operator>>", "(QDataStream&, QPointF&)", "##")]
			QDataStream Read(QDataStream arg1, QPointF arg2);
			[SmokeMethod("operator==", "(const QPointF&, const QPointF&)", "##")]
			bool op_equals(QPointF p1, QPointF p2);
			[SmokeMethod("operator+", "(const QPointF&, const QPointF&)", "##")]
			QPointF op_plus(QPointF p1, QPointF p2);
			[SmokeMethod("operator-", "(const QPointF&, const QPointF&)", "##")]
			QPointF op_minus(QPointF p1, QPointF p2);
			[SmokeMethod("operator*", "(const QPointF&, qreal)", "#$")]
			QPointF op_mult(QPointF p, double c);
			[SmokeMethod("operator*", "(qreal, const QPointF&)", "$#")]
			QPointF op_mult(double c, QPointF p);
			[SmokeMethod("operator-", "(const QPointF&)", "#")]
			QPointF op_minus(QPointF p);
			[SmokeMethod("operator/", "(const QPointF&, qreal)", "#$")]
			QPointF op_div(QPointF p, double c);
			[SmokeMethod("bin", "(QTextStream&)", "#")]
			QTextStream Bin(QTextStream s);
			[SmokeMethod("oct", "(QTextStream&)", "#")]
			QTextStream Oct(QTextStream s);
			[SmokeMethod("dec", "(QTextStream&)", "#")]
			QTextStream Dec(QTextStream s);
			[SmokeMethod("hex", "(QTextStream&)", "#")]
			QTextStream Hex(QTextStream s);
			[SmokeMethod("showbase", "(QTextStream&)", "#")]
			QTextStream Showbase(QTextStream s);
			[SmokeMethod("forcesign", "(QTextStream&)", "#")]
			QTextStream Forcesign(QTextStream s);
			[SmokeMethod("forcepoint", "(QTextStream&)", "#")]
			QTextStream Forcepoint(QTextStream s);
			[SmokeMethod("noshowbase", "(QTextStream&)", "#")]
			QTextStream Noshowbase(QTextStream s);
			[SmokeMethod("noforcesign", "(QTextStream&)", "#")]
			QTextStream Noforcesign(QTextStream s);
			[SmokeMethod("noforcepoint", "(QTextStream&)", "#")]
			QTextStream Noforcepoint(QTextStream s);
			[SmokeMethod("uppercasebase", "(QTextStream&)", "#")]
			QTextStream Uppercasebase(QTextStream s);
			[SmokeMethod("uppercasedigits", "(QTextStream&)", "#")]
			QTextStream Uppercasedigits(QTextStream s);
			[SmokeMethod("lowercasebase", "(QTextStream&)", "#")]
			QTextStream Lowercasebase(QTextStream s);
			[SmokeMethod("lowercasedigits", "(QTextStream&)", "#")]
			QTextStream Lowercasedigits(QTextStream s);
			[SmokeMethod("fixed", "(QTextStream&)", "#")]
			QTextStream Fixed(QTextStream s);
			[SmokeMethod("scientific", "(QTextStream&)", "#")]
			QTextStream Scientific(QTextStream s);
			[SmokeMethod("left", "(QTextStream&)", "#")]
			QTextStream Left(QTextStream s);
			[SmokeMethod("right", "(QTextStream&)", "#")]
			QTextStream Right(QTextStream s);
			[SmokeMethod("center", "(QTextStream&)", "#")]
			QTextStream Center(QTextStream s);
			[SmokeMethod("endl", "(QTextStream&)", "#")]
			QTextStream Endl(QTextStream s);
			[SmokeMethod("flush", "(QTextStream&)", "#")]
			QTextStream Flush(QTextStream s);
			[SmokeMethod("reset", "(QTextStream&)", "#")]
			QTextStream Reset(QTextStream s);
			[SmokeMethod("bom", "(QTextStream&)", "#")]
			QTextStream Bom(QTextStream s);
			[SmokeMethod("ws", "(QTextStream&)", "#")]
			QTextStream Ws(QTextStream s);
			[SmokeMethod("operator<<", "(QDataStream&, const QUrl&)", "##")]
			QDataStream Write(QDataStream arg1, IQUrl arg2);
			[SmokeMethod("operator>>", "(QDataStream&, QUrl&)", "##")]
			QDataStream Read(QDataStream arg1, IQUrl arg2);
			[SmokeMethod("operator<<", "(QDataStream&, const QUuid&)", "##")]
			QDataStream Write(QDataStream arg1, QUuid arg2);
			[SmokeMethod("operator>>", "(QDataStream&, QUuid&)", "##")]
			QDataStream Read(QDataStream arg1, QUuid arg2);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(Qt), this);
			_interceptor = (Qt) realProxy.GetTransparentProxy();
		}
		private Qt ProxyQt() {
			return (Qt) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static Qt() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQtProxy), null);
			_staticInterceptor = (IQtProxy) realProxy.GetTransparentProxy();
		}
		private static IQtProxy StaticQt() {
			return (IQtProxy) _staticInterceptor;
		}
		public enum HitTestAccuracy {
			ExactHit = 0,
			FuzzyHit = 1,
		}
		public enum WhiteSpaceMode {
			WhiteSpaceNormal = 0,
			WhiteSpacePre = 1,
			WhiteSpaceNoWrap = 2,
			WhiteSpaceModeUndefined = -1,
		}
		public enum GlobalColor {
			color0 = 0,
			color1 = 1,
			black = 2,
			white = 3,
			darkGray = 4,
			gray = 5,
			lightGray = 6,
			red = 7,
			green = 8,
			blue = 9,
			cyan = 10,
			magenta = 11,
			yellow = 12,
			darkRed = 13,
			darkGreen = 14,
			darkBlue = 15,
			darkCyan = 16,
			darkMagenta = 17,
			darkYellow = 18,
			transparent = 19,
		}
		public enum KeyboardModifier : long {
			NoModifier = 0x00000000,
			ShiftModifier = 0x02000000,
			ControlModifier = 0x04000000,
			AltModifier = 0x08000000,
			MetaModifier = 0x10000000,
			KeypadModifier = 0x20000000,
			GroupSwitchModifier = 0x40000000,
			KeyboardModifierMask = 0xfe000000,
		}
		public enum Modifier : long {
			META = Qt.KeyboardModifier.MetaModifier,
			SHIFT = Qt.KeyboardModifier.ShiftModifier,
			CTRL = Qt.KeyboardModifier.ControlModifier,
			ALT = Qt.KeyboardModifier.AltModifier,
			MODIFIER_MASK = Qt.KeyboardModifier.KeyboardModifierMask,
			UNICODE_ACCEL = 0x00000000,
		}
		public enum MouseButton {
			NoButton = 0x00000000,
			LeftButton = 0x00000001,
			RightButton = 0x00000002,
			MidButton = 0x00000004,
			XButton1 = 0x00000008,
			XButton2 = 0x00000010,
			MouseButtonMask = 0x000000ff,
		}
		public enum Orientation {
			Horizontal = 0x1,
			Vertical = 0x2,
		}
		public enum FocusPolicy {
			NoFocus = 0,
			TabFocus = 0x1,
			ClickFocus = 0x2,
			StrongFocus = TabFocus|ClickFocus|0x8,
			WheelFocus = StrongFocus|0x4,
		}
		public enum SortOrder {
			AscendingOrder = 0,
			DescendingOrder = 1,
		}
		public enum AlignmentFlag {
			AlignLeft = 0x0001,
			AlignLeading = AlignLeft,
			AlignRight = 0x0002,
			AlignTrailing = AlignRight,
			AlignHCenter = 0x0004,
			AlignJustify = 0x0008,
			AlignAbsolute = 0x0010,
			AlignHorizontal_Mask = AlignLeft|AlignRight|AlignHCenter|AlignJustify|AlignAbsolute,
			AlignTop = 0x0020,
			AlignBottom = 0x0040,
			AlignVCenter = 0x0080,
			AlignVertical_Mask = AlignTop|AlignBottom|AlignVCenter,
			AlignCenter = AlignVCenter|AlignHCenter,
		}
		public enum TextFlag {
			TextSingleLine = 0x0100,
			TextDontClip = 0x0200,
			TextExpandTabs = 0x0400,
			TextShowMnemonic = 0x0800,
			TextWordWrap = 0x1000,
			TextWrapAnywhere = 0x2000,
			TextDontPrint = 0x4000,
			TextIncludeTrailingSpaces = 0x08000000,
			TextHideMnemonic = 0x8000,
		}
		public enum TextElideMode {
			ElideLeft = 0,
			ElideRight = 1,
			ElideMiddle = 2,
			ElideNone = 3,
		}
		public enum WindowType {
			Widget = 0x00000000,
			Window = 0x00000001,
			Dialog = 0x00000002|Window,
			Sheet = 0x00000004|Window,
			Drawer = 0x00000006|Window,
			Popup = 0x00000008|Window,
			Tool = 0x0000000a|Window,
			ToolTip = 0x0000000c|Window,
			SplashScreen = 0x0000000e|Window,
			Desktop = 0x00000010|Window,
			SubWindow = 0x00000012,
			WindowType_Mask = 0x000000ff,
			MSWindowsFixedSizeDialogHint = 0x00000100,
			MSWindowsOwnDC = 0x00000200,
			X11BypassWindowManagerHint = 0x00000400,
			FramelessWindowHint = 0x00000800,
			WindowTitleHint = 0x00001000,
			WindowSystemMenuHint = 0x00002000,
			WindowMinimizeButtonHint = 0x00004000,
			WindowMaximizeButtonHint = 0x00008000,
			WindowMinMaxButtonsHint = WindowMinimizeButtonHint|WindowMaximizeButtonHint,
			WindowContextHelpButtonHint = 0x00010000,
			WindowShadeButtonHint = 0x00020000,
			WindowStaysOnTopHint = 0x00040000,
			CustomizeWindowHint = 0x02000000,
		}
		public enum WindowState {
			WindowNoState = 0x00000000,
			WindowMinimized = 0x00000001,
			WindowMaximized = 0x00000002,
			WindowFullScreen = 0x00000004,
			WindowActive = 0x00000008,
		}
		public enum WidgetAttribute {
			WA_Disabled = 0,
			WA_UnderMouse = 1,
			WA_MouseTracking = 2,
			WA_ContentsPropagated = 3,
			WA_OpaquePaintEvent = 4,
			WA_NoBackground = WA_OpaquePaintEvent,
			WA_StaticContents = 5,
			WA_LaidOut = 7,
			WA_PaintOnScreen = 8,
			WA_NoSystemBackground = 9,
			WA_UpdatesDisabled = 10,
			WA_Mapped = 11,
			WA_MacNoClickThrough = 12,
			WA_PaintOutsidePaintEvent = 13,
			WA_InputMethodEnabled = 14,
			WA_WState_Visible = 15,
			WA_WState_Hidden = 16,
			WA_ForceDisabled = 32,
			WA_KeyCompression = 33,
			WA_PendingMoveEvent = 34,
			WA_PendingResizeEvent = 35,
			WA_SetPalette = 36,
			WA_SetFont = 37,
			WA_SetCursor = 38,
			WA_NoChildEventsFromChildren = 39,
			WA_WindowModified = 41,
			WA_Resized = 42,
			WA_Moved = 43,
			WA_PendingUpdate = 44,
			WA_InvalidSize = 45,
			WA_MacMetalStyle = 46,
			WA_CustomWhatsThis = 47,
			WA_LayoutOnEntireRect = 48,
			WA_OutsideWSRange = 49,
			WA_GrabbedShortcut = 50,
			WA_TransparentForMouseEvents = 51,
			WA_PaintUnclipped = 52,
			WA_SetWindowIcon = 53,
			WA_NoMouseReplay = 54,
			WA_DeleteOnClose = 55,
			WA_RightToLeft = 56,
			WA_SetLayoutDirection = 57,
			WA_NoChildEventsForParent = 58,
			WA_ForceUpdatesDisabled = 59,
			WA_WState_Created = 60,
			WA_WState_CompressKeys = 61,
			WA_WState_InPaintEvent = 62,
			WA_WState_Reparented = 63,
			WA_WState_ConfigPending = 64,
			WA_WState_Polished = 66,
			WA_WState_DND = 67,
			WA_WState_OwnSizePolicy = 68,
			WA_WState_ExplicitShowHide = 69,
			WA_ShowModal = 70,
			WA_MouseNoMask = 71,
			WA_GroupLeader = 72,
			WA_NoMousePropagation = 73,
			WA_Hover = 74,
			WA_InputMethodTransparent = 75,
			WA_QuitOnClose = 76,
			WA_KeyboardFocusChange = 77,
			WA_AcceptDrops = 78,
			WA_DropSiteRegistered = 79,
			WA_ForceAcceptDrops = WA_DropSiteRegistered,
			WA_WindowPropagation = 80,
			WA_NoX11EventCompression = 81,
			WA_TintedBackground = 82,
			WA_X11OpenGLOverlay = 83,
			WA_AlwaysShowToolTips = 84,
			WA_MacOpaqueSizeGrip = 85,
			WA_SetStyle = 86,
			WA_AttributeCount = 87,
		}
		public enum ApplicationAttribute {
			AA_ImmediateWidgetCreation = 0,
			AA_AttributeCount = 1,
		}
		public enum ImageConversionFlag {
			ColorMode_Mask = 0x00000003,
			AutoColor = 0x00000000,
			ColorOnly = 0x00000003,
			MonoOnly = 0x00000002,
			AlphaDither_Mask = 0x0000000c,
			ThresholdAlphaDither = 0x00000000,
			OrderedAlphaDither = 0x00000004,
			DiffuseAlphaDither = 0x00000008,
			NoAlpha = 0x0000000c,
			Dither_Mask = 0x00000030,
			DiffuseDither = 0x00000000,
			OrderedDither = 0x00000010,
			ThresholdDither = 0x00000020,
			DitherMode_Mask = 0x000000c0,
			AutoDither = 0x00000000,
			PreferDither = 0x00000040,
			AvoidDither = 0x00000080,
		}
		public enum BGMode {
			TransparentMode = 0,
			OpaqueMode = 1,
		}
		public enum Key {
			Key_Escape = 0x01000000,
			Key_Tab = 0x01000001,
			Key_Backtab = 0x01000002,
			Key_Backspace = 0x01000003,
			Key_Return = 0x01000004,
			Key_Enter = 0x01000005,
			Key_Insert = 0x01000006,
			Key_Delete = 0x01000007,
			Key_Pause = 0x01000008,
			Key_Print = 0x01000009,
			Key_SysReq = 0x0100000a,
			Key_Clear = 0x0100000b,
			Key_Home = 0x01000010,
			Key_End = 0x01000011,
			Key_Left = 0x01000012,
			Key_Up = 0x01000013,
			Key_Right = 0x01000014,
			Key_Down = 0x01000015,
			Key_PageUp = 0x01000016,
			Key_PageDown = 0x01000017,
			Key_Shift = 0x01000020,
			Key_Control = 0x01000021,
			Key_Meta = 0x01000022,
			Key_Alt = 0x01000023,
			Key_CapsLock = 0x01000024,
			Key_NumLock = 0x01000025,
			Key_ScrollLock = 0x01000026,
			Key_F1 = 0x01000030,
			Key_F2 = 0x01000031,
			Key_F3 = 0x01000032,
			Key_F4 = 0x01000033,
			Key_F5 = 0x01000034,
			Key_F6 = 0x01000035,
			Key_F7 = 0x01000036,
			Key_F8 = 0x01000037,
			Key_F9 = 0x01000038,
			Key_F10 = 0x01000039,
			Key_F11 = 0x0100003a,
			Key_F12 = 0x0100003b,
			Key_F13 = 0x0100003c,
			Key_F14 = 0x0100003d,
			Key_F15 = 0x0100003e,
			Key_F16 = 0x0100003f,
			Key_F17 = 0x01000040,
			Key_F18 = 0x01000041,
			Key_F19 = 0x01000042,
			Key_F20 = 0x01000043,
			Key_F21 = 0x01000044,
			Key_F22 = 0x01000045,
			Key_F23 = 0x01000046,
			Key_F24 = 0x01000047,
			Key_F25 = 0x01000048,
			Key_F26 = 0x01000049,
			Key_F27 = 0x0100004a,
			Key_F28 = 0x0100004b,
			Key_F29 = 0x0100004c,
			Key_F30 = 0x0100004d,
			Key_F31 = 0x0100004e,
			Key_F32 = 0x0100004f,
			Key_F33 = 0x01000050,
			Key_F34 = 0x01000051,
			Key_F35 = 0x01000052,
			Key_Super_L = 0x01000053,
			Key_Super_R = 0x01000054,
			Key_Menu = 0x01000055,
			Key_Hyper_L = 0x01000056,
			Key_Hyper_R = 0x01000057,
			Key_Help = 0x01000058,
			Key_Direction_L = 0x01000059,
			Key_Direction_R = 0x01000060,
			Key_Space = 0x20,
			Key_Any = Key_Space,
			Key_Exclam = 0x21,
			Key_QuoteDbl = 0x22,
			Key_NumberSign = 0x23,
			Key_Dollar = 0x24,
			Key_Percent = 0x25,
			Key_Ampersand = 0x26,
			Key_Apostrophe = 0x27,
			Key_ParenLeft = 0x28,
			Key_ParenRight = 0x29,
			Key_Asterisk = 0x2a,
			Key_Plus = 0x2b,
			Key_Comma = 0x2c,
			Key_Minus = 0x2d,
			Key_Period = 0x2e,
			Key_Slash = 0x2f,
			Key_0 = 0x30,
			Key_1 = 0x31,
			Key_2 = 0x32,
			Key_3 = 0x33,
			Key_4 = 0x34,
			Key_5 = 0x35,
			Key_6 = 0x36,
			Key_7 = 0x37,
			Key_8 = 0x38,
			Key_9 = 0x39,
			Key_Colon = 0x3a,
			Key_Semicolon = 0x3b,
			Key_Less = 0x3c,
			Key_Equal = 0x3d,
			Key_Greater = 0x3e,
			Key_Question = 0x3f,
			Key_At = 0x40,
			Key_A = 0x41,
			Key_B = 0x42,
			Key_C = 0x43,
			Key_D = 0x44,
			Key_E = 0x45,
			Key_F = 0x46,
			Key_G = 0x47,
			Key_H = 0x48,
			Key_I = 0x49,
			Key_J = 0x4a,
			Key_K = 0x4b,
			Key_L = 0x4c,
			Key_M = 0x4d,
			Key_N = 0x4e,
			Key_O = 0x4f,
			Key_P = 0x50,
			Key_Q = 0x51,
			Key_R = 0x52,
			Key_S = 0x53,
			Key_T = 0x54,
			Key_U = 0x55,
			Key_V = 0x56,
			Key_W = 0x57,
			Key_X = 0x58,
			Key_Y = 0x59,
			Key_Z = 0x5a,
			Key_BracketLeft = 0x5b,
			Key_Backslash = 0x5c,
			Key_BracketRight = 0x5d,
			Key_AsciiCircum = 0x5e,
			Key_Underscore = 0x5f,
			Key_QuoteLeft = 0x60,
			Key_BraceLeft = 0x7b,
			Key_Bar = 0x7c,
			Key_BraceRight = 0x7d,
			Key_AsciiTilde = 0x7e,
			Key_nobreakspace = 0x0a0,
			Key_exclamdown = 0x0a1,
			Key_cent = 0x0a2,
			Key_sterling = 0x0a3,
			Key_currency = 0x0a4,
			Key_yen = 0x0a5,
			Key_brokenbar = 0x0a6,
			Key_section = 0x0a7,
			Key_diaeresis = 0x0a8,
			Key_copyright = 0x0a9,
			Key_ordfeminine = 0x0aa,
			Key_guillemotleft = 0x0ab,
			Key_notsign = 0x0ac,
			Key_hyphen = 0x0ad,
			Key_registered = 0x0ae,
			Key_macron = 0x0af,
			Key_degree = 0x0b0,
			Key_plusminus = 0x0b1,
			Key_twosuperior = 0x0b2,
			Key_threesuperior = 0x0b3,
			Key_acute = 0x0b4,
			Key_mu = 0x0b5,
			Key_paragraph = 0x0b6,
			Key_periodcentered = 0x0b7,
			Key_cedilla = 0x0b8,
			Key_onesuperior = 0x0b9,
			Key_masculine = 0x0ba,
			Key_guillemotright = 0x0bb,
			Key_onequarter = 0x0bc,
			Key_onehalf = 0x0bd,
			Key_threequarters = 0x0be,
			Key_questiondown = 0x0bf,
			Key_Agrave = 0x0c0,
			Key_Aacute = 0x0c1,
			Key_Acircumflex = 0x0c2,
			Key_Atilde = 0x0c3,
			Key_Adiaeresis = 0x0c4,
			Key_Aring = 0x0c5,
			Key_AE = 0x0c6,
			Key_Ccedilla = 0x0c7,
			Key_Egrave = 0x0c8,
			Key_Eacute = 0x0c9,
			Key_Ecircumflex = 0x0ca,
			Key_Ediaeresis = 0x0cb,
			Key_Igrave = 0x0cc,
			Key_Iacute = 0x0cd,
			Key_Icircumflex = 0x0ce,
			Key_Idiaeresis = 0x0cf,
			Key_ETH = 0x0d0,
			Key_Ntilde = 0x0d1,
			Key_Ograve = 0x0d2,
			Key_Oacute = 0x0d3,
			Key_Ocircumflex = 0x0d4,
			Key_Otilde = 0x0d5,
			Key_Odiaeresis = 0x0d6,
			Key_multiply = 0x0d7,
			Key_Ooblique = 0x0d8,
			Key_Ugrave = 0x0d9,
			Key_Uacute = 0x0da,
			Key_Ucircumflex = 0x0db,
			Key_Udiaeresis = 0x0dc,
			Key_Yacute = 0x0dd,
			Key_THORN = 0x0de,
			Key_ssharp = 0x0df,
			Key_division = 0x0f7,
			Key_ydiaeresis = 0x0ff,
			Key_AltGr = 0x01001103,
			Key_Multi_key = 0x01001120,
			Key_Codeinput = 0x01001137,
			Key_SingleCandidate = 0x0100113c,
			Key_MultipleCandidate = 0x0100113d,
			Key_PreviousCandidate = 0x0100113e,
			Key_Mode_switch = 0x0100117e,
			Key_Kanji = 0x01001121,
			Key_Muhenkan = 0x01001122,
			Key_Henkan = 0x01001123,
			Key_Romaji = 0x01001124,
			Key_Hiragana = 0x01001125,
			Key_Katakana = 0x01001126,
			Key_Hiragana_Katakana = 0x01001127,
			Key_Zenkaku = 0x01001128,
			Key_Hankaku = 0x01001129,
			Key_Zenkaku_Hankaku = 0x0100112a,
			Key_Touroku = 0x0100112b,
			Key_Massyo = 0x0100112c,
			Key_Kana_Lock = 0x0100112d,
			Key_Kana_Shift = 0x0100112e,
			Key_Eisu_Shift = 0x0100112f,
			Key_Eisu_toggle = 0x01001130,
			Key_Hangul = 0x01001131,
			Key_Hangul_Start = 0x01001132,
			Key_Hangul_End = 0x01001133,
			Key_Hangul_Hanja = 0x01001134,
			Key_Hangul_Jamo = 0x01001135,
			Key_Hangul_Romaja = 0x01001136,
			Key_Hangul_Jeonja = 0x01001138,
			Key_Hangul_Banja = 0x01001139,
			Key_Hangul_PreHanja = 0x0100113a,
			Key_Hangul_PostHanja = 0x0100113b,
			Key_Hangul_Special = 0x0100113f,
			Key_Dead_Grave = 0x01001250,
			Key_Dead_Acute = 0x01001251,
			Key_Dead_Circumflex = 0x01001252,
			Key_Dead_Tilde = 0x01001253,
			Key_Dead_Macron = 0x01001254,
			Key_Dead_Breve = 0x01001255,
			Key_Dead_Abovedot = 0x01001256,
			Key_Dead_Diaeresis = 0x01001257,
			Key_Dead_Abovering = 0x01001258,
			Key_Dead_Doubleacute = 0x01001259,
			Key_Dead_Caron = 0x0100125a,
			Key_Dead_Cedilla = 0x0100125b,
			Key_Dead_Ogonek = 0x0100125c,
			Key_Dead_Iota = 0x0100125d,
			Key_Dead_Voiced_Sound = 0x0100125e,
			Key_Dead_Semivoiced_Sound = 0x0100125f,
			Key_Dead_Belowdot = 0x01001260,
			Key_Dead_Hook = 0x01001261,
			Key_Dead_Horn = 0x01001262,
			Key_Back = 0x01000061,
			Key_Forward = 0x01000062,
			Key_Stop = 0x01000063,
			Key_Refresh = 0x01000064,
			Key_VolumeDown = 0x01000070,
			Key_VolumeMute = 0x01000071,
			Key_VolumeUp = 0x01000072,
			Key_BassBoost = 0x01000073,
			Key_BassUp = 0x01000074,
			Key_BassDown = 0x01000075,
			Key_TrebleUp = 0x01000076,
			Key_TrebleDown = 0x01000077,
			Key_MediaPlay = 0x01000080,
			Key_MediaStop = 0x01000081,
			Key_MediaPrevious = 0x01000082,
			Key_MediaNext = 0x01000083,
			Key_MediaRecord = 0x01000084,
			Key_HomePage = 0x01000090,
			Key_Favorites = 0x01000091,
			Key_Search = 0x01000092,
			Key_Standby = 0x01000093,
			Key_OpenUrl = 0x01000094,
			Key_LaunchMail = 0x010000a0,
			Key_LaunchMedia = 0x010000a1,
			Key_Launch0 = 0x010000a2,
			Key_Launch1 = 0x010000a3,
			Key_Launch2 = 0x010000a4,
			Key_Launch3 = 0x010000a5,
			Key_Launch4 = 0x010000a6,
			Key_Launch5 = 0x010000a7,
			Key_Launch6 = 0x010000a8,
			Key_Launch7 = 0x010000a9,
			Key_Launch8 = 0x010000aa,
			Key_Launch9 = 0x010000ab,
			Key_LaunchA = 0x010000ac,
			Key_LaunchB = 0x010000ad,
			Key_LaunchC = 0x010000ae,
			Key_LaunchD = 0x010000af,
			Key_LaunchE = 0x010000b0,
			Key_LaunchF = 0x010000b1,
			Key_MediaLast = 0x0100ffff,
			Key_Select = 0x01010000,
			Key_Yes = 0x01010001,
			Key_No = 0x01010002,
			Key_Cancel = 0x01020001,
			Key_Printer = 0x01020002,
			Key_Execute = 0x01020003,
			Key_Sleep = 0x01020004,
			Key_Play = 0x01020005,
			Key_Zoom = 0x01020006,
			Key_Context1 = 0x01100000,
			Key_Context2 = 0x01100001,
			Key_Context3 = 0x01100002,
			Key_Context4 = 0x01100003,
			Key_Call = 0x01100004,
			Key_Hangup = 0x01100005,
			Key_Flip = 0x01100006,
			Key_unknown = 0x01ffffff,
		}
		public enum ArrowType {
			NoArrow = 0,
			UpArrow = 1,
			DownArrow = 2,
			LeftArrow = 3,
			RightArrow = 4,
		}
		public enum PenStyle {
			NoPen = 0,
			SolidLine = 1,
			DashLine = 2,
			DotLine = 3,
			DashDotLine = 4,
			DashDotDotLine = 5,
			CustomDashLine = 6,
			MPenStyle = 0x0f,
		}
		public enum PenCapStyle {
			FlatCap = 0x00,
			SquareCap = 0x10,
			RoundCap = 0x20,
			MPenCapStyle = 0x30,
		}
		public enum PenJoinStyle {
			MiterJoin = 0x00,
			BevelJoin = 0x40,
			RoundJoin = 0x80,
			SvgMiterJoin = 0x100,
			MPenJoinStyle = 0x1c0,
		}
		public enum BrushStyle {
			NoBrush = 0,
			SolidPattern = 1,
			Dense1Pattern = 2,
			Dense2Pattern = 3,
			Dense3Pattern = 4,
			Dense4Pattern = 5,
			Dense5Pattern = 6,
			Dense6Pattern = 7,
			Dense7Pattern = 8,
			HorPattern = 9,
			VerPattern = 10,
			CrossPattern = 11,
			BDiagPattern = 12,
			FDiagPattern = 13,
			DiagCrossPattern = 14,
			LinearGradientPattern = 15,
			RadialGradientPattern = 16,
			ConicalGradientPattern = 17,
			TexturePattern = 24,
		}
		public enum UIEffect {
			UI_General = 0,
			UI_AnimateMenu = 1,
			UI_FadeMenu = 2,
			UI_AnimateCombo = 3,
			UI_AnimateTooltip = 4,
			UI_FadeTooltip = 5,
			UI_AnimateToolBox = 6,
		}
		public enum CursorShape {
			ArrowCursor = 0,
			UpArrowCursor = 1,
			CrossCursor = 2,
			WaitCursor = 3,
			IBeamCursor = 4,
			SizeVerCursor = 5,
			SizeHorCursor = 6,
			SizeBDiagCursor = 7,
			SizeFDiagCursor = 8,
			SizeAllCursor = 9,
			BlankCursor = 10,
			SplitVCursor = 11,
			SplitHCursor = 12,
			PointingHandCursor = 13,
			ForbiddenCursor = 14,
			WhatsThisCursor = 15,
			BusyCursor = 16,
			OpenHandCursor = 17,
			ClosedHandCursor = 18,
			LastCursor = ClosedHandCursor,
			BitmapCursor = 24,
			CustomCursor = 25,
		}
		public enum TextFormat {
			PlainText = 0,
			RichText = 1,
			AutoText = 2,
			LogText = 3,
		}
		public enum AspectRatioMode {
			IgnoreAspectRatio = 0,
			KeepAspectRatio = 1,
			KeepAspectRatioByExpanding = 2,
		}
		public enum AnchorAttribute {
			AnchorName = 0,
			AnchorHref = 1,
		}
		public enum DockWidgetArea {
			LeftDockWidgetArea = 0x1,
			RightDockWidgetArea = 0x2,
			TopDockWidgetArea = 0x4,
			BottomDockWidgetArea = 0x8,
			DockWidgetArea_Mask = 0xf,
			AllDockWidgetAreas = DockWidgetArea_Mask,
			NoDockWidgetArea = 0,
		}
		public enum DockWidgetAreaSizes {
			NDockWidgetAreas = 4,
		}
		public enum ToolBarArea {
			LeftToolBarArea = 0x1,
			RightToolBarArea = 0x2,
			TopToolBarArea = 0x4,
			BottomToolBarArea = 0x8,
			ToolBarArea_Mask = 0xf,
			AllToolBarAreas = ToolBarArea_Mask,
			NoToolBarArea = 0,
		}
		public enum ToolBarAreaSizes {
			NToolBarAreas = 4,
		}
		public enum DateFormat {
			TextDate = 0,
			ISODate = 1,
			SystemLocaleDate = 2,
			LocalDate = SystemLocaleDate,
			LocaleDate = 3,
		}
		public enum TimeSpec {
			LocalTime = 0,
			UTC = 1,
		}
		public enum DayOfWeek {
			Monday = 1,
			Tuesday = 2,
			Wednesday = 3,
			Thursday = 4,
			Friday = 5,
			Saturday = 6,
			Sunday = 7,
		}
		public enum ScrollBarPolicy {
			ScrollBarAsNeeded = 0,
			ScrollBarAlwaysOff = 1,
			ScrollBarAlwaysOn = 2,
		}
		public enum CaseSensitivity {
			CaseInsensitive = 0,
			CaseSensitive = 1,
		}
		public enum Corner {
			TopLeftCorner = 0x00000,
			TopRightCorner = 0x00001,
			BottomLeftCorner = 0x00002,
			BottomRightCorner = 0x00003,
		}
		public enum ConnectionType {
			AutoConnection = 0,
			DirectConnection = 1,
			QueuedConnection = 2,
			AutoCompatConnection = 3,
		}
		public enum ShortcutContext {
			WidgetShortcut = 0,
			WindowShortcut = 1,
			ApplicationShortcut = 2,
		}
		public enum FillRule {
			OddEvenFill = 0,
			WindingFill = 1,
		}
		public enum ClipOperation {
			NoClip = 0,
			ReplaceClip = 1,
			IntersectClip = 2,
			UniteClip = 3,
		}
		public enum ItemSelectionMode {
			ContainsItemShape = 0x0,
			IntersectsItemShape = 0x1,
			ContainsItemBoundingRect = 0x2,
			IntersectsItemBoundingRect = 0x3,
		}
		public enum TransformationMode {
			FastTransformation = 0,
			SmoothTransformation = 1,
		}
		public enum FocusReason {
			MouseFocusReason = 0,
			TabFocusReason = 1,
			BacktabFocusReason = 2,
			ActiveWindowFocusReason = 3,
			PopupFocusReason = 4,
			ShortcutFocusReason = 5,
			MenuBarFocusReason = 6,
			OtherFocusReason = 7,
			NoFocusReason = 8,
		}
		public enum ContextMenuPolicy {
			NoContextMenu = 0,
			DefaultContextMenu = 1,
			ActionsContextMenu = 2,
			CustomContextMenu = 3,
			PreventContextMenu = 4,
		}
		public enum InputMethodQuery {
			ImMicroFocus = 0,
			ImFont = 1,
			ImCursorPosition = 2,
			ImSurroundingText = 3,
			ImCurrentSelection = 4,
		}
		public enum ToolButtonStyle {
			ToolButtonIconOnly = 0,
			ToolButtonTextOnly = 1,
			ToolButtonTextBesideIcon = 2,
			ToolButtonTextUnderIcon = 3,
		}
		public enum LayoutDirection {
			LeftToRight = 0,
			RightToLeft = 1,
		}
		public enum DropAction {
			CopyAction = 0x1,
			MoveAction = 0x2,
			LinkAction = 0x4,
			ActionMask = 0xff,
			TargetMoveAction = 0x8002,
			IgnoreAction = 0x0,
		}
		public enum CheckState {
			Unchecked = 0,
			PartiallyChecked = 1,
			Checked = 2,
		}
		public enum ItemDataRole {
			DisplayRole = 0,
			DecorationRole = 1,
			EditRole = 2,
			ToolTipRole = 3,
			StatusTipRole = 4,
			WhatsThisRole = 5,
			FontRole = 6,
			TextAlignmentRole = 7,
			BackgroundColorRole = 8,
			BackgroundRole = 8,
			TextColorRole = 9,
			ForegroundRole = 9,
			CheckStateRole = 10,
			AccessibleTextRole = 11,
			AccessibleDescriptionRole = 12,
			SizeHintRole = 13,
			UserRole = 32,
		}
		public enum ItemFlag {
			ItemIsSelectable = 1,
			ItemIsEditable = 2,
			ItemIsDragEnabled = 4,
			ItemIsDropEnabled = 8,
			ItemIsUserCheckable = 16,
			ItemIsEnabled = 32,
			ItemIsTristate = 64,
		}
		public enum MatchFlag {
			MatchExactly = 0,
			MatchContains = 1,
			MatchStartsWith = 2,
			MatchEndsWith = 3,
			MatchRegExp = 4,
			MatchWildcard = 5,
			MatchFixedString = 8,
			MatchCaseSensitive = 16,
			MatchWrap = 32,
			MatchRecursive = 64,
		}
		public enum WindowModality {
			NonModal = 0,
			WindowModal = 1,
			ApplicationModal = 2,
		}
		public enum TextInteractionFlag {
			NoTextInteraction = 0,
			TextSelectableByMouse = 1,
			TextSelectableByKeyboard = 2,
			LinksAccessibleByMouse = 4,
			LinksAccessibleByKeyboard = 8,
			TextEditable = 16,
			TextEditorInteraction = TextSelectableByMouse|TextSelectableByKeyboard|TextEditable,
			TextBrowserInteraction = TextSelectableByMouse|LinksAccessibleByMouse|LinksAccessibleByKeyboard,
		}
		public static bool MightBeRichText(string arg1) {
			return StaticQt().MightBeRichText(arg1);
		}
		public static string Escape(string plain) {
			return StaticQt().Escape(plain);
		}
		public static string ConvertFromPlainText(string plain, Qt.WhiteSpaceMode mode) {
			return StaticQt().ConvertFromPlainText(plain,mode);
		}
		public static string ConvertFromPlainText(string plain) {
			return StaticQt().ConvertFromPlainText(plain);
		}
		public static QTextCodec CodecForHtml(QByteArray ba) {
			return StaticQt().CodecForHtml(ba);
		}
		~Qt() {
			DisposeQt();
		}
		public void Dispose() {
			DisposeQt();
		}
		[SmokeMethod("~Qt", "()", "")]
		private void DisposeQt() {
			ProxyQt().DisposeQt();
		}
		///<remarks>*************************************************
		///
		///* Copyright (C) 1992-2006 Trolltech ASA. All rights reserved.
		///
		///* This file is part of the tools applications of the Qt Toolkit.
		///
		///* This file may be used under the terms of the GNU General Public
		/// License version 2.0 as published by the Free Software Foundation
		/// and appearing in the file LICENSE.GPL included in the packaging of
		/// this file.  Please review the following information to ensure GNU
		/// General Public Licensing requirements will be met:
		/// http://www.trolltech.com/products/qt/opensource.html
		///
		///* If you are unsure which license is appropriate for your use, please
		/// review the following information:
		/// http://www.trolltech.com/products/qt/licensing.html or contact the
		/// sales department at sales@trolltech.com.
		///
		///* This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
		/// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
		///
		///**************************************************</remarks>		<short>                                                                                 Copyright (C) 1992-2006 Trolltech ASA.</short>
		public static void QDBusReplyFill(QDBusMessage reply, QDBusError error, QVariant data) {
			StaticQt().QDBusReplyFill(reply,error,data);
		}
		public static QDBusArgument Read(QDBusArgument a, QVariant v) {
			return StaticQt().Read(a,v);
		}
		public static QDBusArgument Read(QDBusArgument a, QDate date) {
			return StaticQt().Read(a,date);
		}
		public static QDBusArgument Write(QDBusArgument a, QDate date) {
			return StaticQt().Write(a,date);
		}
		public static QDBusArgument Read(QDBusArgument a, QTime time) {
			return StaticQt().Read(a,time);
		}
		public static QDBusArgument Write(QDBusArgument a, QTime time) {
			return StaticQt().Write(a,time);
		}
		public static QDBusArgument Read(QDBusArgument a, QDateTime dt) {
			return StaticQt().Read(a,dt);
		}
		public static QDBusArgument Write(QDBusArgument a, QDateTime dt) {
			return StaticQt().Write(a,dt);
		}
		public static QDBusArgument Read(QDBusArgument a, QRect rect) {
			return StaticQt().Read(a,rect);
		}
		public static QDBusArgument Write(QDBusArgument a, QRect rect) {
			return StaticQt().Write(a,rect);
		}
		public static QDBusArgument Read(QDBusArgument a, QRectF rect) {
			return StaticQt().Read(a,rect);
		}
		public static QDBusArgument Write(QDBusArgument a, QRectF rect) {
			return StaticQt().Write(a,rect);
		}
		public static QDBusArgument Read(QDBusArgument a, QSize size) {
			return StaticQt().Read(a,size);
		}
		public static QDBusArgument Write(QDBusArgument a, QSize size) {
			return StaticQt().Write(a,size);
		}
		public static QDBusArgument Read(QDBusArgument a, QSizeF size) {
			return StaticQt().Read(a,size);
		}
		public static QDBusArgument Write(QDBusArgument a, QSizeF size) {
			return StaticQt().Write(a,size);
		}
		public static QDBusArgument Read(QDBusArgument a, QPoint pt) {
			return StaticQt().Read(a,pt);
		}
		public static QDBusArgument Write(QDBusArgument a, QPoint pt) {
			return StaticQt().Write(a,pt);
		}
		public static QDBusArgument Read(QDBusArgument a, QPointF pt) {
			return StaticQt().Read(a,pt);
		}
		public static QDBusArgument Write(QDBusArgument a, QPointF pt) {
			return StaticQt().Write(a,pt);
		}
		public static QDBusArgument Read(QDBusArgument a, QLine line) {
			return StaticQt().Read(a,line);
		}
		public static QDBusArgument Write(QDBusArgument a, QLine line) {
			return StaticQt().Write(a,line);
		}
		public static QDBusArgument Read(QDBusArgument a, QLineF line) {
			return StaticQt().Read(a,line);
		}
		public static QDBusArgument Write(QDBusArgument a, QLineF line) {
			return StaticQt().Write(a,line);
		}
		public static QDBusArgument Write(QDBusArgument arg, List<QVariant> list) {
			return StaticQt().Write(arg,list);
		}
		// QDBusArgument& operator<<(QDBusArgument& arg1,const QVariantMap& arg2); >>>> NOT CONVERTED
		public static bool op_equals(QGLFormat arg1, QGLFormat arg2) {
			return StaticQt().op_equals(arg1,arg2);
		}
		public static bool op_equals(QHostAddress.SpecialAddress address1, QHostAddress address2) {
			return StaticQt().op_equals(address1,address2);
		}
		public static uint QHash(QHostAddress key) {
			return StaticQt().QHash(key);
		}
		public static QDataStream Write(QDataStream arg1, QHostAddress arg2) {
			return StaticQt().Write(arg1,arg2);
		}
		public static QDataStream Read(QDataStream arg1, QHostAddress arg2) {
			return StaticQt().Read(arg1,arg2);
		}
		public static bool op_equals(QKeyEvent e, QKeySequence.StandardKey key) {
			return StaticQt().op_equals(e,key);
		}
		public static bool op_equals(QKeySequence.StandardKey key, QKeyEvent e) {
			return StaticQt().op_equals(key,e);
		}
		///<remarks>**************************************************
		///  QPalette stream functions
		///**************************************************</remarks>		<short>                                                                                QPalette stream functions                                                                            </short>
		public static QDataStream Write(QDataStream ds, QPalette p) {
			return StaticQt().Write(ds,p);
		}
		public static QDataStream Read(QDataStream ds, QPalette p) {
			return StaticQt().Read(ds,p);
		}
		///<remarks>**************************************************
		///  QCursor stream functions
		///**************************************************</remarks>		<short>                                                                                QCursor stream functions                                                                            </short>
		public static QDataStream Write(QDataStream outS, QCursor cursor) {
			return StaticQt().Write(outS,cursor);
		}
		public static QDataStream Read(QDataStream inS, QCursor cursor) {
			return StaticQt().Read(inS,cursor);
		}
		public static QDataStream Write(QDataStream arg1, QKeySequence ks) {
			return StaticQt().Write(arg1,ks);
		}
		public static QDataStream Read(QDataStream arg1, QKeySequence ks) {
			return StaticQt().Read(arg1,ks);
		}
		public static QDataStream Write(QDataStream arg1, QSizePolicy arg2) {
			return StaticQt().Write(arg1,arg2);
		}
		public static QDataStream Read(QDataStream arg1, QSizePolicy arg2) {
			return StaticQt().Read(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QPicture stream functions
		///**************************************************</remarks>		<short>                                                                                QPicture stream functions                                                                            </short>
		public static QDataStream Write(QDataStream arg1, QPicture arg2) {
			return StaticQt().Write(arg1,arg2);
		}
		public static QDataStream Read(QDataStream arg1, QPicture arg2) {
			return StaticQt().Read(arg1,arg2);
		}
		public static QDataStream Write(QDataStream arg1, QImage arg2) {
			return StaticQt().Write(arg1,arg2);
		}
		public static QDataStream Read(QDataStream arg1, QImage arg2) {
			return StaticQt().Read(arg1,arg2);
		}
		public static QDataStream Write(QDataStream arg1, QIcon arg2) {
			return StaticQt().Write(arg1,arg2);
		}
		public static QDataStream Read(QDataStream arg1, QIcon arg2) {
			return StaticQt().Read(arg1,arg2);
		}
		///<remarks>**************************************************
		/// QPixmap stream functions
		///**************************************************</remarks>		<short>                                                                               QPixmap stream functions                                                                            </short>
		public static QDataStream Write(QDataStream arg1, QPixmap arg2) {
			return StaticQt().Write(arg1,arg2);
		}
		public static QDataStream Read(QDataStream arg1, QPixmap arg2) {
			return StaticQt().Read(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QFont stream functions
		///**************************************************</remarks>		<short>                                                                                QFont stream functions                                                                            </short>
		public static QDataStream Write(QDataStream arg1, QFont arg2) {
			return StaticQt().Write(arg1,arg2);
		}
		public static QDataStream Read(QDataStream arg1, QFont arg2) {
			return StaticQt().Read(arg1,arg2);
		}
		public static QDataStream Write(QDataStream arg1, QTextLength arg2) {
			return StaticQt().Write(arg1,arg2);
		}
		public static QDataStream Read(QDataStream arg1, QTextLength arg2) {
			return StaticQt().Read(arg1,arg2);
		}
		// QDataStream& operator<<(QDataStream& arg1,const QTextFormat& arg2); >>>> NOT CONVERTED
		// QDataStream& operator>>(QDataStream& arg1,QTextFormat& arg2); >>>> NOT CONVERTED
		public static QTextStream Write(QTextStream arg1, QSplitter arg2) {
			return StaticQt().Write(arg1,arg2);
		}
		public static QTextStream Read(QTextStream arg1, QSplitter arg2) {
			return StaticQt().Read(arg1,arg2);
		}
		public static QDataStream Write(QDataStream arg1, QColor arg2) {
			return StaticQt().Write(arg1,arg2);
		}
		public static QDataStream Read(QDataStream arg1, QColor arg2) {
			return StaticQt().Read(arg1,arg2);
		}
		public static QDataStream Write(QDataStream arg1, QPen arg2) {
			return StaticQt().Write(arg1,arg2);
		}
		public static QDataStream Read(QDataStream arg1, QPen arg2) {
			return StaticQt().Read(arg1,arg2);
		}
		public static void QDrawShadeLine(QPainter p, int x1, int y1, int x2, int y2, QPalette pal, bool sunken, int lineWidth, int midLineWidth) {
			StaticQt().QDrawShadeLine(p,x1,y1,x2,y2,pal,sunken,lineWidth,midLineWidth);
		}
		public static void QDrawShadeLine(QPainter p, int x1, int y1, int x2, int y2, QPalette pal, bool sunken, int lineWidth) {
			StaticQt().QDrawShadeLine(p,x1,y1,x2,y2,pal,sunken,lineWidth);
		}
		public static void QDrawShadeLine(QPainter p, int x1, int y1, int x2, int y2, QPalette pal, bool sunken) {
			StaticQt().QDrawShadeLine(p,x1,y1,x2,y2,pal,sunken);
		}
		public static void QDrawShadeLine(QPainter p, int x1, int y1, int x2, int y2, QPalette pal) {
			StaticQt().QDrawShadeLine(p,x1,y1,x2,y2,pal);
		}
		public static void QDrawShadeLine(QPainter p, QPoint p1, QPoint p2, QPalette pal, bool sunken, int lineWidth, int midLineWidth) {
			StaticQt().QDrawShadeLine(p,p1,p2,pal,sunken,lineWidth,midLineWidth);
		}
		public static void QDrawShadeLine(QPainter p, QPoint p1, QPoint p2, QPalette pal, bool sunken, int lineWidth) {
			StaticQt().QDrawShadeLine(p,p1,p2,pal,sunken,lineWidth);
		}
		public static void QDrawShadeLine(QPainter p, QPoint p1, QPoint p2, QPalette pal, bool sunken) {
			StaticQt().QDrawShadeLine(p,p1,p2,pal,sunken);
		}
		public static void QDrawShadeLine(QPainter p, QPoint p1, QPoint p2, QPalette pal) {
			StaticQt().QDrawShadeLine(p,p1,p2,pal);
		}
		public static void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken, int lineWidth, int midLineWidth, QBrush fill) {
			StaticQt().QDrawShadeRect(p,x,y,w,h,pal,sunken,lineWidth,midLineWidth,fill);
		}
		public static void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken, int lineWidth, int midLineWidth) {
			StaticQt().QDrawShadeRect(p,x,y,w,h,pal,sunken,lineWidth,midLineWidth);
		}
		public static void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken, int lineWidth) {
			StaticQt().QDrawShadeRect(p,x,y,w,h,pal,sunken,lineWidth);
		}
		public static void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken) {
			StaticQt().QDrawShadeRect(p,x,y,w,h,pal,sunken);
		}
		public static void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QPalette pal) {
			StaticQt().QDrawShadeRect(p,x,y,w,h,pal);
		}
		public static void QDrawShadeRect(QPainter p, QRect r, QPalette pal, bool sunken, int lineWidth, int midLineWidth, QBrush fill) {
			StaticQt().QDrawShadeRect(p,r,pal,sunken,lineWidth,midLineWidth,fill);
		}
		public static void QDrawShadeRect(QPainter p, QRect r, QPalette pal, bool sunken, int lineWidth, int midLineWidth) {
			StaticQt().QDrawShadeRect(p,r,pal,sunken,lineWidth,midLineWidth);
		}
		public static void QDrawShadeRect(QPainter p, QRect r, QPalette pal, bool sunken, int lineWidth) {
			StaticQt().QDrawShadeRect(p,r,pal,sunken,lineWidth);
		}
		public static void QDrawShadeRect(QPainter p, QRect r, QPalette pal, bool sunken) {
			StaticQt().QDrawShadeRect(p,r,pal,sunken);
		}
		public static void QDrawShadeRect(QPainter p, QRect r, QPalette pal) {
			StaticQt().QDrawShadeRect(p,r,pal);
		}
		public static void QDrawShadePanel(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken, int lineWidth, QBrush fill) {
			StaticQt().QDrawShadePanel(p,x,y,w,h,pal,sunken,lineWidth,fill);
		}
		public static void QDrawShadePanel(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken, int lineWidth) {
			StaticQt().QDrawShadePanel(p,x,y,w,h,pal,sunken,lineWidth);
		}
		public static void QDrawShadePanel(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken) {
			StaticQt().QDrawShadePanel(p,x,y,w,h,pal,sunken);
		}
		public static void QDrawShadePanel(QPainter p, int x, int y, int w, int h, QPalette pal) {
			StaticQt().QDrawShadePanel(p,x,y,w,h,pal);
		}
		public static void QDrawShadePanel(QPainter p, QRect r, QPalette pal, bool sunken, int lineWidth, QBrush fill) {
			StaticQt().QDrawShadePanel(p,r,pal,sunken,lineWidth,fill);
		}
		public static void QDrawShadePanel(QPainter p, QRect r, QPalette pal, bool sunken, int lineWidth) {
			StaticQt().QDrawShadePanel(p,r,pal,sunken,lineWidth);
		}
		public static void QDrawShadePanel(QPainter p, QRect r, QPalette pal, bool sunken) {
			StaticQt().QDrawShadePanel(p,r,pal,sunken);
		}
		public static void QDrawShadePanel(QPainter p, QRect r, QPalette pal) {
			StaticQt().QDrawShadePanel(p,r,pal);
		}
		public static void QDrawWinButton(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken, QBrush fill) {
			StaticQt().QDrawWinButton(p,x,y,w,h,pal,sunken,fill);
		}
		public static void QDrawWinButton(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken) {
			StaticQt().QDrawWinButton(p,x,y,w,h,pal,sunken);
		}
		public static void QDrawWinButton(QPainter p, int x, int y, int w, int h, QPalette pal) {
			StaticQt().QDrawWinButton(p,x,y,w,h,pal);
		}
		public static void QDrawWinButton(QPainter p, QRect r, QPalette pal, bool sunken, QBrush fill) {
			StaticQt().QDrawWinButton(p,r,pal,sunken,fill);
		}
		public static void QDrawWinButton(QPainter p, QRect r, QPalette pal, bool sunken) {
			StaticQt().QDrawWinButton(p,r,pal,sunken);
		}
		public static void QDrawWinButton(QPainter p, QRect r, QPalette pal) {
			StaticQt().QDrawWinButton(p,r,pal);
		}
		public static void QDrawWinPanel(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken, QBrush fill) {
			StaticQt().QDrawWinPanel(p,x,y,w,h,pal,sunken,fill);
		}
		public static void QDrawWinPanel(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken) {
			StaticQt().QDrawWinPanel(p,x,y,w,h,pal,sunken);
		}
		public static void QDrawWinPanel(QPainter p, int x, int y, int w, int h, QPalette pal) {
			StaticQt().QDrawWinPanel(p,x,y,w,h,pal);
		}
		public static void QDrawWinPanel(QPainter p, QRect r, QPalette pal, bool sunken, QBrush fill) {
			StaticQt().QDrawWinPanel(p,r,pal,sunken,fill);
		}
		public static void QDrawWinPanel(QPainter p, QRect r, QPalette pal, bool sunken) {
			StaticQt().QDrawWinPanel(p,r,pal,sunken);
		}
		public static void QDrawWinPanel(QPainter p, QRect r, QPalette pal) {
			StaticQt().QDrawWinPanel(p,r,pal);
		}
		public static void QDrawPlainRect(QPainter p, int x, int y, int w, int h, QColor arg6, int lineWidth, QBrush fill) {
			StaticQt().QDrawPlainRect(p,x,y,w,h,arg6,lineWidth,fill);
		}
		public static void QDrawPlainRect(QPainter p, int x, int y, int w, int h, QColor arg6, int lineWidth) {
			StaticQt().QDrawPlainRect(p,x,y,w,h,arg6,lineWidth);
		}
		public static void QDrawPlainRect(QPainter p, int x, int y, int w, int h, QColor arg6) {
			StaticQt().QDrawPlainRect(p,x,y,w,h,arg6);
		}
		public static void QDrawPlainRect(QPainter p, QRect r, QColor arg3, int lineWidth, QBrush fill) {
			StaticQt().QDrawPlainRect(p,r,arg3,lineWidth,fill);
		}
		public static void QDrawPlainRect(QPainter p, QRect r, QColor arg3, int lineWidth) {
			StaticQt().QDrawPlainRect(p,r,arg3,lineWidth);
		}
		public static void QDrawPlainRect(QPainter p, QRect r, QColor arg3) {
			StaticQt().QDrawPlainRect(p,r,arg3);
		}
		///<remarks>**************************************************
		///  QBrush stream functions
		///**************************************************</remarks>		<short>                                                                                QBrush stream functions                                                                            </short>
		public static QDataStream Write(QDataStream arg1, QBrush arg2) {
			return StaticQt().Write(arg1,arg2);
		}
		public static QDataStream Read(QDataStream arg1, QBrush arg2) {
			return StaticQt().Read(arg1,arg2);
		}
		public static int QRed(uint rgb) {
			return StaticQt().QRed(rgb);
		}
		public static int QGreen(uint rgb) {
			return StaticQt().QGreen(rgb);
		}
		public static int QBlue(uint rgb) {
			return StaticQt().QBlue(rgb);
		}
		public static int QAlpha(uint rgb) {
			return StaticQt().QAlpha(rgb);
		}
		public static uint QRgb(int r, int g, int b) {
			return StaticQt().QRgb(r,g,b);
		}
		public static uint QRgba(int r, int g, int b, int a) {
			return StaticQt().QRgba(r,g,b,a);
		}
		public static int QGray(int r, int g, int b) {
			return StaticQt().QGray(r,g,b);
		}
		public static int QGray(uint rgb) {
			return StaticQt().QGray(rgb);
		}
		public static bool QIsGray(uint rgb) {
			return StaticQt().QIsGray(rgb);
		}
		public static QDataStream Write(QDataStream arg1, QPainterPath arg2) {
			return StaticQt().Write(arg1,arg2);
		}
		public static QDataStream Read(QDataStream arg1, QPainterPath arg2) {
			return StaticQt().Read(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QRegion stream functions
		///**************************************************</remarks>		<short>                                                                                QRegion stream functions                                                                            </short>
		public static QDataStream Write(QDataStream arg1, QRegion arg2) {
			return StaticQt().Write(arg1,arg2);
		}
		public static QDataStream Read(QDataStream arg1, QRegion arg2) {
			return StaticQt().Read(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QPolygonF stream functions
		///**************************************************</remarks>		<short>                                                                                QPolygonF stream functions                                                                            </short>
		public static QDataStream Write(QDataStream stream, QPolygonF array) {
			return StaticQt().Write(stream,array);
		}
		public static QDataStream Read(QDataStream stream, QPolygonF array) {
			return StaticQt().Read(stream,array);
		}
		public static QPoint op_mult(QPoint p, QMatrix m) {
			return StaticQt().op_mult(p,m);
		}
		public static QPointF op_mult(QPointF p, QMatrix m) {
			return StaticQt().op_mult(p,m);
		}
		public static QLineF op_mult(QLineF l, QMatrix m) {
			return StaticQt().op_mult(l,m);
		}
		public static QLine op_mult(QLine l, QMatrix m) {
			return StaticQt().op_mult(l,m);
		}
		public static QPolygon op_mult(QPolygon a, QMatrix m) {
			return StaticQt().op_mult(a,m);
		}
		public static QPolygonF op_mult(QPolygonF a, QMatrix m) {
			return StaticQt().op_mult(a,m);
		}
		public static QRegion op_mult(QRegion r, QMatrix m) {
			return StaticQt().op_mult(r,m);
		}
		public static QPainterPath op_mult(QPainterPath p, QMatrix m) {
			return StaticQt().op_mult(p,m);
		}
		///<remarks>**************************************************
		/// QMatrix stream functions
		///**************************************************</remarks>		<short>                                                                               QMatrix stream functions                                                                            </short>
		public static QDataStream Write(QDataStream arg1, QMatrix arg2) {
			return StaticQt().Write(arg1,arg2);
		}
		public static QDataStream Read(QDataStream arg1, QMatrix arg2) {
			return StaticQt().Read(arg1,arg2);
		}
		public static QDataStream Read(QDataStream arg1, QTableWidgetItem item) {
			return StaticQt().Read(arg1,item);
		}
		public static QDataStream Write(QDataStream arg1, QTableWidgetItem item) {
			return StaticQt().Write(arg1,item);
		}
		public static QDataStream Write(QDataStream arg1, QTreeWidgetItem item) {
			return StaticQt().Write(arg1,item);
		}
		public static QDataStream Read(QDataStream arg1, QTreeWidgetItem item) {
			return StaticQt().Read(arg1,item);
		}
		public static QDataStream Write(QDataStream arg1, QListWidgetItem item) {
			return StaticQt().Write(arg1,item);
		}
		public static QDataStream Read(QDataStream arg1, QListWidgetItem item) {
			return StaticQt().Read(arg1,item);
		}
		public static uint QHash(QItemSelectionRange arg1) {
			return StaticQt().QHash(arg1);
		}
		public static QTextStream Write(QTextStream arg1, QDomNode arg2) {
			return StaticQt().Write(arg1,arg2);
		}
		public static int QRound(double d) {
			return StaticQt().QRound(d);
		}
		public static long QRound64(double d) {
			return StaticQt().QRound64(d);
		}
		public static string QVersion() {
			return StaticQt().QVersion();
		}
		public static bool QSharedBuild() {
			return StaticQt().QSharedBuild();
		}
		// QDebug qDebug(); >>>> NOT CONVERTED
		// QDebug qWarning(); >>>> NOT CONVERTED
		// QDebug qCritical(); >>>> NOT CONVERTED
		// QtMsgHandler qInstallMsgHandler(QtMsgHandler arg1); >>>> NOT CONVERTED
		public static bool op_equals(QBool b1, bool b2) {
			return StaticQt().op_equals(b1,b2);
		}
		public static bool op_equals(bool b1, QBool b2) {
			return StaticQt().op_equals(b1,b2);
		}
		public static bool op_equals(QBool b1, QBool b2) {
			return StaticQt().op_equals(b1,b2);
		}
		public static bool QFuzzyCompare(double p1, double p2) {
			return StaticQt().QFuzzyCompare(p1,p2);
		}
		public static bool QFuzzyCompare(float p1, float p2) {
			return StaticQt().QFuzzyCompare(p1,p2);
		}
		public static bool QIsNull(double d) {
			return StaticQt().QIsNull(d);
		}
		public static bool QIsNull(float f) {
			return StaticQt().QIsNull(f);
		}
		// void* qMalloc(size_t arg1); >>>> NOT CONVERTED
		// void qFree(void* arg1); >>>> NOT CONVERTED
		// void* qRealloc(void* arg1,size_t arg2); >>>> NOT CONVERTED
		// void* qMemCopy(void* arg1,const void* arg2,size_t arg3); >>>> NOT CONVERTED
		// void* qMemSet(void* arg1,int arg2,size_t arg3); >>>> NOT CONVERTED
		public static QByteArray Qgetenv(string varName) {
			return StaticQt().Qgetenv(varName);
		}
		public static int QIntCast(double f) {
			return StaticQt().QIntCast(f);
		}
		public static int QIntCast(float f) {
			return StaticQt().QIntCast(f);
		}
		public static void Qsrand(uint seed) {
			StaticQt().Qsrand(seed);
		}
		public static int Qrand() {
			return StaticQt().Qrand();
		}
		// bool qvariant_cast_helper(const QVariant& arg1,QVariant::Type arg2,void* arg3); >>>> NOT CONVERTED
		public static QDataStream Read(QDataStream s, QVariant p) {
			return StaticQt().Read(s,p);
		}
		public static QDataStream Write(QDataStream s, QVariant p) {
			return StaticQt().Write(s,p);
		}
		// bool operator==(const QVariant& arg1,const QVariantComparisonHelper& arg2); >>>> NOT CONVERTED
		// void qAddPostRoutine(QtCleanUpFunction arg1); >>>> NOT CONVERTED
		// void qRemovePostRoutine(QtCleanUpFunction arg1); >>>> NOT CONVERTED
		public static string QAppName() {
			return StaticQt().QAppName();
		}
		public static uint QHash(QModelIndex index) {
			return StaticQt().QHash(index);
		}
		public static bool op_equals(QRect arg1, QRect arg2) {
			return StaticQt().op_equals(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QRect stream functions
		///**************************************************</remarks>		<short>                                                                                QRect stream functions                                                                            </short>
		public static QDataStream Write(QDataStream arg1, QRect arg2) {
			return StaticQt().Write(arg1,arg2);
		}
		public static QDataStream Read(QDataStream arg1, QRect arg2) {
			return StaticQt().Read(arg1,arg2);
		}
		public static bool op_equals(QRectF arg1, QRectF arg2) {
			return StaticQt().op_equals(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QRectF stream functions
		///**************************************************</remarks>		<short>                                                                                QRectF stream functions                                                                            </short>
		public static QDataStream Write(QDataStream arg1, QRectF arg2) {
			return StaticQt().Write(arg1,arg2);
		}
		public static QDataStream Read(QDataStream arg1, QRectF arg2) {
			return StaticQt().Read(arg1,arg2);
		}
		public static QDataStream Write(QDataStream arg1, QLocale arg2) {
			return StaticQt().Write(arg1,arg2);
		}
		public static QDataStream Read(QDataStream arg1, QLocale arg2) {
			return StaticQt().Read(arg1,arg2);
		}
		public static QDataStream Read(QDataStream arg1, List<string> list) {
			return StaticQt().Read(arg1,list);
		}
		public static QDataStream Write(QDataStream arg1, List<string> list) {
			return StaticQt().Write(arg1,list);
		}
		///<remarks>**************************************************
		///  Safe and portable C string functions; extensions to standard string.h
		///**************************************************</remarks>		<short>                                                                                Safe and portable C string functions; extensions to standard string.</short>
		public static string Qstrdup(string arg1) {
			return StaticQt().Qstrdup(arg1);
		}
		public static uint Qstrlen(string str) {
			return StaticQt().Qstrlen(str);
		}
		public static uint Qstrnlen(string str, uint maxlen) {
			return StaticQt().Qstrnlen(str,maxlen);
		}
		public static string Qstrcpy(string dst, string src) {
			return StaticQt().Qstrcpy(dst,src);
		}
		public static string Qstrncpy(string dst, string src, uint len) {
			return StaticQt().Qstrncpy(dst,src,len);
		}
		public static int Qstrcmp(string str1, string str2) {
			return StaticQt().Qstrcmp(str1,str2);
		}
		public static int Qstrncmp(string str1, string str2, uint len) {
			return StaticQt().Qstrncmp(str1,str2,len);
		}
		public static int Qstricmp(string arg1, string arg2) {
			return StaticQt().Qstricmp(arg1,arg2);
		}
		public static int Qstrnicmp(string arg1, string arg2, uint len) {
			return StaticQt().Qstrnicmp(arg1,arg2,len);
		}
		// int qvsnprintf(char* arg1,size_t arg2,const char* arg3,va_list arg4); >>>> NOT CONVERTED
		public static ushort QChecksum(string s, uint len) {
			return StaticQt().QChecksum(s,len);
		}
		public static bool op_equals(QByteArray a1, QByteArray a2) {
			return StaticQt().op_equals(a1,a2);
		}
		public static bool op_equals(QByteArray a1, string a2) {
			return StaticQt().op_equals(a1,a2);
		}
		public static bool op_equals(string a1, QByteArray a2) {
			return StaticQt().op_equals(a1,a2);
		}
		public static bool op_lt(QByteArray a1, QByteArray a2) {
			return StaticQt().op_lt(a1,a2);
		}
		public static bool op_lt(QByteArray a1, string a2) {
			return StaticQt().op_lt(a1,a2);
		}
		public static bool op_lt(string a1, QByteArray a2) {
			return StaticQt().op_lt(a1,a2);
		}
		public static bool op_lte(QByteArray a1, QByteArray a2) {
			return StaticQt().op_lte(a1,a2);
		}
		public static bool op_lte(QByteArray a1, string a2) {
			return StaticQt().op_lte(a1,a2);
		}
		public static bool op_lte(string a1, QByteArray a2) {
			return StaticQt().op_lte(a1,a2);
		}
		public static bool op_gt(QByteArray a1, QByteArray a2) {
			return StaticQt().op_gt(a1,a2);
		}
		public static bool op_gt(QByteArray a1, string a2) {
			return StaticQt().op_gt(a1,a2);
		}
		public static bool op_gt(string a1, QByteArray a2) {
			return StaticQt().op_gt(a1,a2);
		}
		public static bool op_gte(QByteArray a1, QByteArray a2) {
			return StaticQt().op_gte(a1,a2);
		}
		public static bool op_gte(QByteArray a1, string a2) {
			return StaticQt().op_gte(a1,a2);
		}
		public static bool op_gte(string a1, QByteArray a2) {
			return StaticQt().op_gte(a1,a2);
		}
		public static QByteArray op_plus(QByteArray a1, QByteArray a2) {
			return StaticQt().op_plus(a1,a2);
		}
		public static QByteArray op_plus(QByteArray a1, string a2) {
			return StaticQt().op_plus(a1,a2);
		}
		public static QByteArray op_plus(QByteArray a1, char a2) {
			return StaticQt().op_plus(a1,a2);
		}
		public static QByteArray op_plus(string a1, QByteArray a2) {
			return StaticQt().op_plus(a1,a2);
		}
		public static QByteArray op_plus(char a1, QByteArray a2) {
			return StaticQt().op_plus(a1,a2);
		}
		public static QDataStream Write(QDataStream arg1, QByteArray arg2) {
			return StaticQt().Write(arg1,arg2);
		}
		public static QDataStream Read(QDataStream arg1, QByteArray arg2) {
			return StaticQt().Read(arg1,arg2);
		}
		public static QByteArray QCompress(char[] data, int nbytes, int compressionLevel) {
			return StaticQt().QCompress(data,nbytes,compressionLevel);
		}
		public static QByteArray QCompress(char[] data, int nbytes) {
			return StaticQt().QCompress(data,nbytes);
		}
		public static QByteArray QUncompress(char[] data, int nbytes) {
			return StaticQt().QUncompress(data,nbytes);
		}
		public static QByteArray QCompress(QByteArray data, int compressionLevel) {
			return StaticQt().QCompress(data,compressionLevel);
		}
		public static QByteArray QCompress(QByteArray data) {
			return StaticQt().QCompress(data);
		}
		public static QByteArray QUncompress(QByteArray data) {
			return StaticQt().QUncompress(data);
		}
		///<remarks>**************************************************
		///  QSize stream functions
		///**************************************************</remarks>		<short>                                                                                QSize stream functions                                                                            </short>
		public static QDataStream Write(QDataStream arg1, QSize arg2) {
			return StaticQt().Write(arg1,arg2);
		}
		public static QDataStream Read(QDataStream arg1, QSize arg2) {
			return StaticQt().Read(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QSize inline functions
		///**************************************************</remarks>		<short>                                                                                QSize inline functions                                                                            </short>
		public static bool op_equals(QSize s1, QSize s2) {
			return StaticQt().op_equals(s1,s2);
		}
		public static QSize op_plus(QSize s1, QSize s2) {
			return StaticQt().op_plus(s1,s2);
		}
		public static QSize op_minus(QSize s1, QSize s2) {
			return StaticQt().op_minus(s1,s2);
		}
		public static QSize op_mult(QSize s, double c) {
			return StaticQt().op_mult(s,c);
		}
		public static QSize op_mult(double c, QSize s) {
			return StaticQt().op_mult(c,s);
		}
		public static QSize op_div(QSize s, double c) {
			return StaticQt().op_div(s,c);
		}
		///<remarks>**************************************************
		///  QSizeF stream functions
		///**************************************************</remarks>		<short>                                                                                QSizeF stream functions                                                                            </short>
		public static QDataStream Write(QDataStream arg1, QSizeF arg2) {
			return StaticQt().Write(arg1,arg2);
		}
		public static QDataStream Read(QDataStream arg1, QSizeF arg2) {
			return StaticQt().Read(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QSizeF inline functions
		///**************************************************</remarks>		<short>                                                                                QSizeF inline functions                                                                            </short>
		public static bool op_equals(QSizeF s1, QSizeF s2) {
			return StaticQt().op_equals(s1,s2);
		}
		public static QSizeF op_plus(QSizeF s1, QSizeF s2) {
			return StaticQt().op_plus(s1,s2);
		}
		public static QSizeF op_minus(QSizeF s1, QSizeF s2) {
			return StaticQt().op_minus(s1,s2);
		}
		public static QSizeF op_mult(QSizeF s, double c) {
			return StaticQt().op_mult(s,c);
		}
		public static QSizeF op_mult(double c, QSizeF s) {
			return StaticQt().op_mult(c,s);
		}
		public static QSizeF op_div(QSizeF s, double c) {
			return StaticQt().op_div(s,c);
		}
		public static QDataStream Write(QDataStream arg1, QLine arg2) {
			return StaticQt().Write(arg1,arg2);
		}
		public static QDataStream Read(QDataStream arg1, QLine arg2) {
			return StaticQt().Read(arg1,arg2);
		}
		public static QDataStream Write(QDataStream arg1, QLineF arg2) {
			return StaticQt().Write(arg1,arg2);
		}
		public static QDataStream Read(QDataStream arg1, QLineF arg2) {
			return StaticQt().Read(arg1,arg2);
		}
		public static QDataStream Write(QDataStream arg1, QRegExp regExp) {
			return StaticQt().Write(arg1,regExp);
		}
		public static QDataStream Read(QDataStream arg1, QRegExp regExp) {
			return StaticQt().Read(arg1,regExp);
		}
		public static QDataStream Write(QDataStream arg1, QDate arg2) {
			return StaticQt().Write(arg1,arg2);
		}
		public static QDataStream Read(QDataStream arg1, QDate arg2) {
			return StaticQt().Read(arg1,arg2);
		}
		public static QDataStream Write(QDataStream arg1, QTime arg2) {
			return StaticQt().Write(arg1,arg2);
		}
		public static QDataStream Read(QDataStream arg1, QTime arg2) {
			return StaticQt().Read(arg1,arg2);
		}
		public static QDataStream Write(QDataStream arg1, QDateTime arg2) {
			return StaticQt().Write(arg1,arg2);
		}
		public static QDataStream Read(QDataStream arg1, QDateTime arg2) {
			return StaticQt().Read(arg1,arg2);
		}
		// QBitArray operator&(const QBitArray& arg1,const QBitArray& arg2); >>>> NOT CONVERTED
		// QBitArray operator|(const QBitArray& arg1,const QBitArray& arg2); >>>> NOT CONVERTED
		// QBitArray operator^(const QBitArray& arg1,const QBitArray& arg2); >>>> NOT CONVERTED
		// QDataStream& operator<<(QDataStream& arg1,const QBitArray& arg2); >>>> NOT CONVERTED
		// QDataStream& operator>>(QDataStream& arg1,QBitArray& arg2); >>>> NOT CONVERTED
		public static bool op_equals(char c1, char c2) {
			return StaticQt().op_equals(c1,c2);
		}
		public static bool op_lte(char c1, char c2) {
			return StaticQt().op_lte(c1,c2);
		}
		public static bool op_gte(char c1, char c2) {
			return StaticQt().op_gte(c1,c2);
		}
		public static bool op_lt(char c1, char c2) {
			return StaticQt().op_lt(c1,c2);
		}
		public static bool op_gt(char c1, char c2) {
			return StaticQt().op_gt(c1,c2);
		}
		public static QDataStream Write(QDataStream arg1, char arg2) {
			return StaticQt().Write(arg1,arg2);
		}
		public static QDataStream Read(QDataStream arg1, char arg2) {
			return StaticQt().Read(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QPoint stream functions
		///**************************************************</remarks>		<short>                                                                                QPoint stream functions                                                                            </short>
		public static QDataStream Write(QDataStream arg1, QPoint arg2) {
			return StaticQt().Write(arg1,arg2);
		}
		public static QDataStream Read(QDataStream arg1, QPoint arg2) {
			return StaticQt().Read(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QPoint inline functions
		///**************************************************</remarks>		<short>                                                                                QPoint inline functions                                                                            </short>
		public static bool op_equals(QPoint p1, QPoint p2) {
			return StaticQt().op_equals(p1,p2);
		}
		public static QPoint op_plus(QPoint p1, QPoint p2) {
			return StaticQt().op_plus(p1,p2);
		}
		public static QPoint op_minus(QPoint p1, QPoint p2) {
			return StaticQt().op_minus(p1,p2);
		}
		public static QPoint op_mult(QPoint p, double c) {
			return StaticQt().op_mult(p,c);
		}
		public static QPoint op_mult(double c, QPoint p) {
			return StaticQt().op_mult(c,p);
		}
		public static QPoint op_minus(QPoint p) {
			return StaticQt().op_minus(p);
		}
		public static QPoint op_div(QPoint p, double c) {
			return StaticQt().op_div(p,c);
		}
		///<remarks>**************************************************
		///  QPointF stream functions
		///**************************************************</remarks>		<short>                                                                                QPointF stream functions                                                                            </short>
		public static QDataStream Write(QDataStream arg1, QPointF arg2) {
			return StaticQt().Write(arg1,arg2);
		}
		public static QDataStream Read(QDataStream arg1, QPointF arg2) {
			return StaticQt().Read(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QPointF inline functions
		///**************************************************</remarks>		<short>                                                                                QPointF inline functions                                                                            </short>
		public static bool op_equals(QPointF p1, QPointF p2) {
			return StaticQt().op_equals(p1,p2);
		}
		public static QPointF op_plus(QPointF p1, QPointF p2) {
			return StaticQt().op_plus(p1,p2);
		}
		public static QPointF op_minus(QPointF p1, QPointF p2) {
			return StaticQt().op_minus(p1,p2);
		}
		public static QPointF op_mult(QPointF p, double c) {
			return StaticQt().op_mult(p,c);
		}
		public static QPointF op_mult(double c, QPointF p) {
			return StaticQt().op_mult(c,p);
		}
		public static QPointF op_minus(QPointF p) {
			return StaticQt().op_minus(p);
		}
		public static QPointF op_div(QPointF p, double c) {
			return StaticQt().op_div(p,c);
		}
		// QTextStream& operator>>(QTextStream& arg1,QTextStreamFunction arg2); >>>> NOT CONVERTED
		// QTextStream& operator<<(QTextStream& arg1,QTextStreamFunction arg2); >>>> NOT CONVERTED
		// QTextStream& operator<<(QTextStream& arg1,QTextStreamManipulator arg2); >>>> NOT CONVERTED
		public static QTextStream Bin(QTextStream s) {
			return StaticQt().Bin(s);
		}
		public static QTextStream Oct(QTextStream s) {
			return StaticQt().Oct(s);
		}
		public static QTextStream Dec(QTextStream s) {
			return StaticQt().Dec(s);
		}
		public static QTextStream Hex(QTextStream s) {
			return StaticQt().Hex(s);
		}
		public static QTextStream Showbase(QTextStream s) {
			return StaticQt().Showbase(s);
		}
		public static QTextStream Forcesign(QTextStream s) {
			return StaticQt().Forcesign(s);
		}
		public static QTextStream Forcepoint(QTextStream s) {
			return StaticQt().Forcepoint(s);
		}
		public static QTextStream Noshowbase(QTextStream s) {
			return StaticQt().Noshowbase(s);
		}
		public static QTextStream Noforcesign(QTextStream s) {
			return StaticQt().Noforcesign(s);
		}
		public static QTextStream Noforcepoint(QTextStream s) {
			return StaticQt().Noforcepoint(s);
		}
		public static QTextStream Uppercasebase(QTextStream s) {
			return StaticQt().Uppercasebase(s);
		}
		public static QTextStream Uppercasedigits(QTextStream s) {
			return StaticQt().Uppercasedigits(s);
		}
		public static QTextStream Lowercasebase(QTextStream s) {
			return StaticQt().Lowercasebase(s);
		}
		public static QTextStream Lowercasedigits(QTextStream s) {
			return StaticQt().Lowercasedigits(s);
		}
		public static QTextStream Fixed(QTextStream s) {
			return StaticQt().Fixed(s);
		}
		public static QTextStream Scientific(QTextStream s) {
			return StaticQt().Scientific(s);
		}
		public static QTextStream Left(QTextStream s) {
			return StaticQt().Left(s);
		}
		public static QTextStream Right(QTextStream s) {
			return StaticQt().Right(s);
		}
		public static QTextStream Center(QTextStream s) {
			return StaticQt().Center(s);
		}
		public static QTextStream Endl(QTextStream s) {
			return StaticQt().Endl(s);
		}
		public static QTextStream Flush(QTextStream s) {
			return StaticQt().Flush(s);
		}
		public static QTextStream Reset(QTextStream s) {
			return StaticQt().Reset(s);
		}
		public static QTextStream Bom(QTextStream s) {
			return StaticQt().Bom(s);
		}
		public static QTextStream Ws(QTextStream s) {
			return StaticQt().Ws(s);
		}
		// QTextStreamManipulator qSetFieldWidth(int arg1); >>>> NOT CONVERTED
		// QTextStreamManipulator qSetPadChar(QChar arg1); >>>> NOT CONVERTED
		// QTextStreamManipulator qSetRealNumberPrecision(int arg1); >>>> NOT CONVERTED
		// QDebug qDebug(); >>>> NOT CONVERTED
		// QDebug qWarning(); >>>> NOT CONVERTED
		// QDebug qCritical(); >>>> NOT CONVERTED
		public static QDataStream Write(QDataStream arg1, IQUrl arg2) {
			return StaticQt().Write(arg1,arg2);
		}
		public static QDataStream Read(QDataStream arg1, IQUrl arg2) {
			return StaticQt().Read(arg1,arg2);
		}
		public static QDataStream Write(QDataStream arg1, QUuid arg2) {
			return StaticQt().Write(arg1,arg2);
		}
		public static QDataStream Read(QDataStream arg1, QUuid arg2) {
			return StaticQt().Read(arg1,arg2);
		}
	}
}
