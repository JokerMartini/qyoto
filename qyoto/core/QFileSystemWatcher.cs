//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	/// See <see cref="IQFileSystemWatcherSignals"></see> for signals emitted by QFileSystemWatcher
	[SmokeClass("QFileSystemWatcher")]
	public class QFileSystemWatcher : QObject, IDisposable {
 		protected QFileSystemWatcher(Type dummy) : base((Type) null) {}
		[SmokeClass("QFileSystemWatcher")]
		interface IQFileSystemWatcherProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QFileSystemWatcher), this);
			interceptor = (QFileSystemWatcher) realProxy.GetTransparentProxy();
		}
		private static IQFileSystemWatcherProxy staticInterceptor = null;
		static QFileSystemWatcher() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQFileSystemWatcherProxy), null);
			staticInterceptor = (IQFileSystemWatcherProxy) realProxy.GetTransparentProxy();
		}
		public QFileSystemWatcher(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQFileSystemWatcher(parent);
		}
		[SmokeMethod("QFileSystemWatcher", "(QObject*)", "#")]
		private void NewQFileSystemWatcher(QObject parent) {
			((QFileSystemWatcher) interceptor).NewQFileSystemWatcher(parent);
		}
		public QFileSystemWatcher() : this((Type) null) {
			CreateProxy();
			NewQFileSystemWatcher();
		}
		[SmokeMethod("QFileSystemWatcher", "()", "")]
		private void NewQFileSystemWatcher() {
			((QFileSystemWatcher) interceptor).NewQFileSystemWatcher();
		}
		public QFileSystemWatcher(List<string> paths, QObject parent) : this((Type) null) {
			CreateProxy();
			NewQFileSystemWatcher(paths,parent);
		}
		[SmokeMethod("QFileSystemWatcher", "(const QStringList&, QObject*)", "?#")]
		private void NewQFileSystemWatcher(List<string> paths, QObject parent) {
			((QFileSystemWatcher) interceptor).NewQFileSystemWatcher(paths,parent);
		}
		public QFileSystemWatcher(List<string> paths) : this((Type) null) {
			CreateProxy();
			NewQFileSystemWatcher(paths);
		}
		[SmokeMethod("QFileSystemWatcher", "(const QStringList&)", "?")]
		private void NewQFileSystemWatcher(List<string> paths) {
			((QFileSystemWatcher) interceptor).NewQFileSystemWatcher(paths);
		}
		[SmokeMethod("addPath", "(const QString&)", "$")]
		public void AddPath(string file) {
			((QFileSystemWatcher) interceptor).AddPath(file);
		}
		[SmokeMethod("addPaths", "(const QStringList&)", "?")]
		public void AddPaths(List<string> files) {
			((QFileSystemWatcher) interceptor).AddPaths(files);
		}
		[SmokeMethod("removePath", "(const QString&)", "$")]
		public void RemovePath(string file) {
			((QFileSystemWatcher) interceptor).RemovePath(file);
		}
		[SmokeMethod("removePaths", "(const QStringList&)", "?")]
		public void RemovePaths(List<string> files) {
			((QFileSystemWatcher) interceptor).RemovePaths(files);
		}
		[SmokeMethod("files", "() const", "")]
		public List<string> Files() {
			return ((QFileSystemWatcher) interceptor).Files();
		}
		[SmokeMethod("directories", "() const", "")]
		public List<string> Directories() {
			return ((QFileSystemWatcher) interceptor).Directories();
		}
		~QFileSystemWatcher() {
			DisposeQFileSystemWatcher();
		}
		public new void Dispose() {
			DisposeQFileSystemWatcher();
		}
		[SmokeMethod("~QFileSystemWatcher", "()", "")]
		private void DisposeQFileSystemWatcher() {
			((QFileSystemWatcher) interceptor).DisposeQFileSystemWatcher();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQFileSystemWatcherSignals Emit {
			get { return (IQFileSystemWatcherSignals) Q_EMIT; }
		}
	}

	public interface IQFileSystemWatcherSignals : IQObjectSignals {
		[Q_SIGNAL("void fileChanged(const QString&)")]
		void FileChanged(string path);
		[Q_SIGNAL("void directoryChanged(const QString&)")]
		void DirectoryChanged(string path);
	}
}
