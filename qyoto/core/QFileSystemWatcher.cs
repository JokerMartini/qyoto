//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;
	using System.Collections.Generic;

	/// See <see cref="IQFileSystemWatcherSignals"></see> for signals emitted by QFileSystemWatcher
	[SmokeClass("QFileSystemWatcher")]
	public class QFileSystemWatcher : QObject, IDisposable {
 		protected QFileSystemWatcher(Type dummy) : base((Type) null) {}
		[SmokeClass("QFileSystemWatcher")]
		interface IQFileSystemWatcherProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QFileSystemWatcher), this);
			_interceptor = (QFileSystemWatcher) realProxy.GetTransparentProxy();
		}
		private QFileSystemWatcher ProxyQFileSystemWatcher() {
			return (QFileSystemWatcher) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QFileSystemWatcher() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQFileSystemWatcherProxy), null);
			_staticInterceptor = (IQFileSystemWatcherProxy) realProxy.GetTransparentProxy();
		}
		private static IQFileSystemWatcherProxy StaticQFileSystemWatcher() {
			return (IQFileSystemWatcherProxy) _staticInterceptor;
		}

		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QFileSystemWatcher(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQFileSystemWatcher(parent);
		}
		[SmokeMethod("QFileSystemWatcher", "(QObject*)", "#")]
		private void NewQFileSystemWatcher(QObject parent) {
			ProxyQFileSystemWatcher().NewQFileSystemWatcher(parent);
		}
		public QFileSystemWatcher() : this((Type) null) {
			CreateProxy();
			NewQFileSystemWatcher();
		}
		[SmokeMethod("QFileSystemWatcher", "()", "")]
		private void NewQFileSystemWatcher() {
			ProxyQFileSystemWatcher().NewQFileSystemWatcher();
		}
		public QFileSystemWatcher(List<string> paths, QObject parent) : this((Type) null) {
			CreateProxy();
			NewQFileSystemWatcher(paths,parent);
		}
		[SmokeMethod("QFileSystemWatcher", "(const QStringList&, QObject*)", "?#")]
		private void NewQFileSystemWatcher(List<string> paths, QObject parent) {
			ProxyQFileSystemWatcher().NewQFileSystemWatcher(paths,parent);
		}
		public QFileSystemWatcher(List<string> paths) : this((Type) null) {
			CreateProxy();
			NewQFileSystemWatcher(paths);
		}
		[SmokeMethod("QFileSystemWatcher", "(const QStringList&)", "?")]
		private void NewQFileSystemWatcher(List<string> paths) {
			ProxyQFileSystemWatcher().NewQFileSystemWatcher(paths);
		}
		[SmokeMethod("addPath", "(const QString&)", "$")]
		public void AddPath(string file) {
			ProxyQFileSystemWatcher().AddPath(file);
		}
		[SmokeMethod("addPaths", "(const QStringList&)", "?")]
		public void AddPaths(List<string> files) {
			ProxyQFileSystemWatcher().AddPaths(files);
		}
		[SmokeMethod("removePath", "(const QString&)", "$")]
		public void RemovePath(string file) {
			ProxyQFileSystemWatcher().RemovePath(file);
		}
		[SmokeMethod("removePaths", "(const QStringList&)", "?")]
		public void RemovePaths(List<string> files) {
			ProxyQFileSystemWatcher().RemovePaths(files);
		}
		[SmokeMethod("files", "() const", "")]
		public List<string> Files() {
			return ProxyQFileSystemWatcher().Files();
		}
		[SmokeMethod("directories", "() const", "")]
		public List<string> Directories() {
			return ProxyQFileSystemWatcher().Directories();
		}
		public static new string Tr(string s, string c) {
			return StaticQFileSystemWatcher().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQFileSystemWatcher().Tr(s);
		}
		~QFileSystemWatcher() {
			DisposeQFileSystemWatcher();
		}
		public new void Dispose() {
			DisposeQFileSystemWatcher();
		}
		[SmokeMethod("~QFileSystemWatcher", "()", "")]
		private void DisposeQFileSystemWatcher() {
			ProxyQFileSystemWatcher().DisposeQFileSystemWatcher();
		}
		protected new IQFileSystemWatcherSignals Emit {
			get {
				return (IQFileSystemWatcherSignals) Q_EMIT;
			}
		}
	}

	public interface IQFileSystemWatcherSignals : IQObjectSignals {
		[Q_SIGNAL("void fileChanged(const QString&)")]
		void FileChanged(string path);
		[Q_SIGNAL("void directoryChanged(const QString&)")]
		void DirectoryChanged(string path);
	}
}
