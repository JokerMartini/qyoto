//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QBasicTimer")]
	public class QBasicTimer : MarshalByRefObject, IDisposable {
		protected QBasicTimer interceptor = null;
		private IntPtr smokeObject;
		protected QBasicTimer(Type dummy) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QBasicTimer), this);
			interceptor = (QBasicTimer) realProxy.GetTransparentProxy();
		}
		public QBasicTimer() : this((Type) null) {
			CreateProxy();
			NewQBasicTimer();
		}
		[SmokeMethod("QBasicTimer", "()", "")]
		private void NewQBasicTimer() {
			((QBasicTimer) interceptor).NewQBasicTimer();
		}
		[SmokeMethod("isActive", "() const", "")]
		public bool IsActive() {
			return ((QBasicTimer) interceptor).IsActive();
		}
		[SmokeMethod("timerId", "() const", "")]
		public int TimerId() {
			return ((QBasicTimer) interceptor).TimerId();
		}
		[SmokeMethod("start", "(int, QObject*)", "$#")]
		public void Start(int msec, QObject arg2) {
			((QBasicTimer) interceptor).Start(msec,arg2);
		}
		[SmokeMethod("stop", "()", "")]
		public void Stop() {
			((QBasicTimer) interceptor).Stop();
		}
		~QBasicTimer() {
			DisposeQBasicTimer();
		}
		public void Dispose() {
			DisposeQBasicTimer();
		}
		[SmokeMethod("~QBasicTimer", "()", "")]
		private void DisposeQBasicTimer() {
			((QBasicTimer) interceptor).DisposeQBasicTimer();
		}
	}
}
