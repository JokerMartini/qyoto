//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	/// See <see cref="IQIODeviceSignals"></see> for signals emitted by QIODevice
	[SmokeClass("QIODevice")]
	public abstract class QIODevice : QObject {
 		protected QIODevice(Type dummy) : base((Type) null) {}
		[SmokeClass("QIODevice")]
		interface IQIODeviceProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QIODevice), this);
			interceptor = (QIODevice) realProxy.GetTransparentProxy();
		}
		private static IQIODeviceProxy staticInterceptor = null;
		static QIODevice() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQIODeviceProxy), null);
			staticInterceptor = (IQIODeviceProxy) realProxy.GetTransparentProxy();
		}
		public enum OpenModeFlag {
			NotOpen = 0x0000,
			ReadOnly = 0x0001,
			WriteOnly = 0x0002,
			ReadWrite = ReadOnly|WriteOnly,
			Append = 0x0004,
			Truncate = 0x0008,
			Text = 0x0010,
			Unbuffered = 0x0020,
		}
		public QIODevice() : this((Type) null) {
			CreateProxy();
			NewQIODevice();
		}
		[SmokeMethod("QIODevice", "()", "")]
		private void NewQIODevice() {
			((QIODevice) interceptor).NewQIODevice();
		}
		public QIODevice(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQIODevice(parent);
		}
		[SmokeMethod("QIODevice", "(QObject*)", "#")]
		private void NewQIODevice(QObject parent) {
			((QIODevice) interceptor).NewQIODevice(parent);
		}
		[SmokeMethod("openMode", "() const", "")]
		public int OpenMode() {
			return ((QIODevice) interceptor).OpenMode();
		}
		[SmokeMethod("setTextModeEnabled", "(bool)", "$")]
		public void SetTextModeEnabled(bool enabled) {
			((QIODevice) interceptor).SetTextModeEnabled(enabled);
		}
		[SmokeMethod("isTextModeEnabled", "() const", "")]
		public bool IsTextModeEnabled() {
			return ((QIODevice) interceptor).IsTextModeEnabled();
		}
		[SmokeMethod("isOpen", "() const", "")]
		public bool IsOpen() {
			return ((QIODevice) interceptor).IsOpen();
		}
		[SmokeMethod("isReadable", "() const", "")]
		public bool IsReadable() {
			return ((QIODevice) interceptor).IsReadable();
		}
		[SmokeMethod("isWritable", "() const", "")]
		public bool IsWritable() {
			return ((QIODevice) interceptor).IsWritable();
		}
		[SmokeMethod("isSequential", "() const", "")]
		public virtual bool IsSequential() {
			return ((QIODevice) interceptor).IsSequential();
		}
		[SmokeMethod("open", "(OpenMode)", "$")]
		public virtual bool Open(int mode) {
			return ((QIODevice) interceptor).Open(mode);
		}
		[SmokeMethod("close", "()", "")]
		public virtual void Close() {
			((QIODevice) interceptor).Close();
		}
		[SmokeMethod("pos", "() const", "")]
		public virtual long Pos() {
			return ((QIODevice) interceptor).Pos();
		}
		[SmokeMethod("size", "() const", "")]
		public virtual long Size() {
			return ((QIODevice) interceptor).Size();
		}
		[SmokeMethod("seek", "(qint64)", "$")]
		public virtual bool Seek(long pos) {
			return ((QIODevice) interceptor).Seek(pos);
		}
		[SmokeMethod("atEnd", "() const", "")]
		public virtual bool AtEnd() {
			return ((QIODevice) interceptor).AtEnd();
		}
		[SmokeMethod("reset", "()", "")]
		public virtual bool Reset() {
			return ((QIODevice) interceptor).Reset();
		}
		[SmokeMethod("bytesAvailable", "() const", "")]
		public virtual long BytesAvailable() {
			return ((QIODevice) interceptor).BytesAvailable();
		}
		[SmokeMethod("bytesToWrite", "() const", "")]
		public virtual long BytesToWrite() {
			return ((QIODevice) interceptor).BytesToWrite();
		}
		[SmokeMethod("read", "(char*, qint64)", "$$")]
		public long Read(string data, long maxlen) {
			return ((QIODevice) interceptor).Read(data,maxlen);
		}
		[SmokeMethod("read", "(qint64)", "$")]
		public QByteArray Read(long maxlen) {
			return ((QIODevice) interceptor).Read(maxlen);
		}
		[SmokeMethod("readAll", "()", "")]
		public QByteArray ReadAll() {
			return ((QIODevice) interceptor).ReadAll();
		}
		[SmokeMethod("readLine", "(char*, qint64)", "$$")]
		public long ReadLine(string data, long maxlen) {
			return ((QIODevice) interceptor).ReadLine(data,maxlen);
		}
		[SmokeMethod("readLine", "(qint64)", "$")]
		public QByteArray ReadLine(long maxlen) {
			return ((QIODevice) interceptor).ReadLine(maxlen);
		}
		[SmokeMethod("readLine", "()", "")]
		public QByteArray ReadLine() {
			return ((QIODevice) interceptor).ReadLine();
		}
		[SmokeMethod("canReadLine", "() const", "")]
		public virtual bool CanReadLine() {
			return ((QIODevice) interceptor).CanReadLine();
		}
		[SmokeMethod("write", "(const char*, qint64)", "$$")]
		public long Write(string data, long len) {
			return ((QIODevice) interceptor).Write(data,len);
		}
		[SmokeMethod("write", "(const QByteArray&)", "#")]
		public long Write(QByteArray data) {
			return ((QIODevice) interceptor).Write(data);
		}
		[SmokeMethod("peek", "(char*, qint64)", "$$")]
		public long Peek(string data, long maxlen) {
			return ((QIODevice) interceptor).Peek(data,maxlen);
		}
		[SmokeMethod("peek", "(qint64)", "$")]
		public QByteArray Peek(long maxlen) {
			return ((QIODevice) interceptor).Peek(maxlen);
		}
		[SmokeMethod("waitForReadyRead", "(int)", "$")]
		public virtual bool WaitForReadyRead(int msecs) {
			return ((QIODevice) interceptor).WaitForReadyRead(msecs);
		}
		[SmokeMethod("waitForBytesWritten", "(int)", "$")]
		public virtual bool WaitForBytesWritten(int msecs) {
			return ((QIODevice) interceptor).WaitForBytesWritten(msecs);
		}
		[SmokeMethod("ungetChar", "(char)", "$")]
		public void UngetChar(char c) {
			((QIODevice) interceptor).UngetChar(c);
		}
		[SmokeMethod("putChar", "(char)", "$")]
		public bool PutChar(char c) {
			return ((QIODevice) interceptor).PutChar(c);
		}
		[SmokeMethod("getChar", "(char*)", "$")]
		public bool GetChar(string c) {
			return ((QIODevice) interceptor).GetChar(c);
		}
		[SmokeMethod("errorString", "() const", "")]
		public string ErrorString() {
			return ((QIODevice) interceptor).ErrorString();
		}
		[SmokeMethod("readData", "(char*, qint64)", "$$")]
		protected abstract long ReadData(string data, long maxlen);
		[SmokeMethod("readLineData", "(char*, qint64)", "$$")]
		protected virtual long ReadLineData(string data, long maxlen) {
			return ((QIODevice) interceptor).ReadLineData(data,maxlen);
		}
		[SmokeMethod("writeData", "(const char*, qint64)", "$$")]
		protected abstract long WriteData(string data, long len);
		[SmokeMethod("setOpenMode", "(OpenMode)", "$")]
		protected void SetOpenMode(int openMode) {
			((QIODevice) interceptor).SetOpenMode(openMode);
		}
		[SmokeMethod("setErrorString", "(const QString&)", "$")]
		protected void SetErrorString(string errorString) {
			((QIODevice) interceptor).SetErrorString(errorString);
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQIODeviceSignals Emit {
			get { return (IQIODeviceSignals) Q_EMIT; }
		}
	}

	public interface IQIODeviceSignals : IQObjectSignals {
		[Q_SIGNAL("void readyRead()")]
		void ReadyRead();
		[Q_SIGNAL("void bytesWritten(qint64)")]
		void BytesWritten(long bytes);
		[Q_SIGNAL("void aboutToClose()")]
		void AboutToClose();
	}
}
