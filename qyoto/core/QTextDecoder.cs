//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QTextDecoder")]
	public class QTextDecoder : MarshalByRefObject, IDisposable {
		protected QTextDecoder interceptor = null;
		private IntPtr smokeObject;
		protected QTextDecoder(Type dummy) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTextDecoder), this);
			interceptor = (QTextDecoder) realProxy.GetTransparentProxy();
		}
		public QTextDecoder(QTextCodec codec) : this((Type) null) {
			CreateProxy();
			NewQTextDecoder(codec);
		}
		[SmokeMethod("QTextDecoder", "(const QTextCodec*)", "#")]
		private void NewQTextDecoder(QTextCodec codec) {
			((QTextDecoder) interceptor).NewQTextDecoder(codec);
		}
		[SmokeMethod("toUnicode", "(const char*, int)", "$$")]
		public string ToUnicode(string chars, int len) {
			return ((QTextDecoder) interceptor).ToUnicode(chars,len);
		}
		[SmokeMethod("toUnicode", "(const QByteArray&)", "#")]
		public string ToUnicode(QByteArray ba) {
			return ((QTextDecoder) interceptor).ToUnicode(ba);
		}
		~QTextDecoder() {
			DisposeQTextDecoder();
		}
		public void Dispose() {
			DisposeQTextDecoder();
		}
		[SmokeMethod("~QTextDecoder", "()", "")]
		private void DisposeQTextDecoder() {
			((QTextDecoder) interceptor).DisposeQTextDecoder();
		}
	}
}
