//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QObjectUserData")]
	public class QObjectUserData : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
		private IntPtr _smokeObject;
		protected QObjectUserData(Type dummy) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QObjectUserData), this);
			_interceptor = (QObjectUserData) realProxy.GetTransparentProxy();
		}
		private QObjectUserData ProxyQObjectUserData() {
			return (QObjectUserData) _interceptor;
		}
		// QObjectUserData* QObjectUserData(); >>>> NOT CONVERTED
		~QObjectUserData() {
			DisposeQObjectUserData();
		}
		public void Dispose() {
			DisposeQObjectUserData();
		}
		[SmokeMethod("~QObjectUserData", "()", "")]
		private void DisposeQObjectUserData() {
			ProxyQObjectUserData().DisposeQObjectUserData();
		}
	}
}
