//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QLine")]
	public class QLine : MarshalByRefObject, IDisposable {
		protected QLine interceptor = null;
		private IntPtr smokeObject;
		protected QLine(Type dummy) {}
		[SmokeClass("QLine")]
		interface IQLineProxy {
			[SmokeMethod("operator==", "(const QLine&) const", "#")]
			bool op_equals(QLine lhs, QLine d);
			[SmokeMethod("operator*", "(const QLine&, const QMatrix&)", "##")]
			QLine op_mult(QLine l, QMatrix m);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QLine), this);
			interceptor = (QLine) realProxy.GetTransparentProxy();
		}
		private static IQLineProxy staticInterceptor = null;
		static QLine() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQLineProxy), null);
			staticInterceptor = (IQLineProxy) realProxy.GetTransparentProxy();
		}
		public QLine() : this((Type) null) {
			CreateProxy();
			NewQLine();
		}
		[SmokeMethod("QLine", "()", "")]
		private void NewQLine() {
			((QLine) interceptor).NewQLine();
		}
		public QLine(QPoint pt1, QPoint pt2) : this((Type) null) {
			CreateProxy();
			NewQLine(pt1,pt2);
		}
		[SmokeMethod("QLine", "(const QPoint&, const QPoint&)", "##")]
		private void NewQLine(QPoint pt1, QPoint pt2) {
			((QLine) interceptor).NewQLine(pt1,pt2);
		}
		public QLine(int x1, int y1, int x2, int y2) : this((Type) null) {
			CreateProxy();
			NewQLine(x1,y1,x2,y2);
		}
		[SmokeMethod("QLine", "(int, int, int, int)", "$$$$")]
		private void NewQLine(int x1, int y1, int x2, int y2) {
			((QLine) interceptor).NewQLine(x1,y1,x2,y2);
		}
		[SmokeMethod("isNull", "() const", "")]
		public bool IsNull() {
			return ((QLine) interceptor).IsNull();
		}
		[SmokeMethod("p1", "() const", "")]
		public QPoint P1() {
			return ((QLine) interceptor).P1();
		}
		[SmokeMethod("p2", "() const", "")]
		public QPoint P2() {
			return ((QLine) interceptor).P2();
		}
		[SmokeMethod("x1", "() const", "")]
		public int X1() {
			return ((QLine) interceptor).X1();
		}
		[SmokeMethod("y1", "() const", "")]
		public int Y1() {
			return ((QLine) interceptor).Y1();
		}
		[SmokeMethod("x2", "() const", "")]
		public int X2() {
			return ((QLine) interceptor).X2();
		}
		[SmokeMethod("y2", "() const", "")]
		public int Y2() {
			return ((QLine) interceptor).Y2();
		}
		[SmokeMethod("dx", "() const", "")]
		public int Dx() {
			return ((QLine) interceptor).Dx();
		}
		[SmokeMethod("dy", "() const", "")]
		public int Dy() {
			return ((QLine) interceptor).Dy();
		}
		[SmokeMethod("translate", "(const QPoint&)", "#")]
		public void Translate(QPoint p) {
			((QLine) interceptor).Translate(p);
		}
		[SmokeMethod("translate", "(int, int)", "$$")]
		public void Translate(int dx, int dy) {
			((QLine) interceptor).Translate(dx,dy);
		}
		public override bool Equals(object o) {
			if (!(o is QLine)) { return false; }
			return this == (QLine) o;
		}
		public override int GetHashCode() {
			return ((QLine) interceptor).GetHashCode();
		}
		~QLine() {
			DisposeQLine();
		}
		public void Dispose() {
			DisposeQLine();
		}
		[SmokeMethod("~QLine", "()", "")]
		private void DisposeQLine() {
			((QLine) interceptor).DisposeQLine();
		}
		public static bool operator==(QLine lhs, QLine d) {
			return staticInterceptor.op_equals(lhs,d);
		}
		public static bool operator!=(QLine lhs, QLine d) {
			return !staticInterceptor.op_equals(lhs,d);
		}
		public static QLine operator*(QLine l, QMatrix m) {
			return staticInterceptor.op_mult(l,m);
		}
	}
}
