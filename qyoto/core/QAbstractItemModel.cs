//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	/// See <see cref="IQAbstractItemModelSignals"></see> for signals emitted by QAbstractItemModel
	[SmokeClass("QAbstractItemModel")]
	public abstract partial class QAbstractItemModel : QObject {
 		protected QAbstractItemModel(Type dummy) : base((Type) null) {}
		[SmokeClass("QAbstractItemModel")]
		interface IQAbstractItemModelProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QAbstractItemModel), this);
			interceptor = (QAbstractItemModel) realProxy.GetTransparentProxy();
		}
		private static IQAbstractItemModelProxy staticInterceptor = null;
		static QAbstractItemModel() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQAbstractItemModelProxy), null);
			staticInterceptor = (IQAbstractItemModelProxy) realProxy.GetTransparentProxy();
		}
		// QModelIndex createIndex(int arg1,int arg2,void* arg3); >>>> NOT CONVERTED
		public QAbstractItemModel(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQAbstractItemModel(parent);
		}
		[SmokeMethod("QAbstractItemModel", "(QObject*)", "#")]
		private void NewQAbstractItemModel(QObject parent) {
			((QAbstractItemModel) interceptor).NewQAbstractItemModel(parent);
		}
		public QAbstractItemModel() : this((Type) null) {
			CreateProxy();
			NewQAbstractItemModel();
		}
		[SmokeMethod("QAbstractItemModel", "()", "")]
		private void NewQAbstractItemModel() {
			((QAbstractItemModel) interceptor).NewQAbstractItemModel();
		}
		[SmokeMethod("hasIndex", "(int, int, const QModelIndex&) const", "$$#")]
		public bool HasIndex(int row, int column, QModelIndex parent) {
			return ((QAbstractItemModel) interceptor).HasIndex(row,column,parent);
		}
		[SmokeMethod("hasIndex", "(int, int) const", "$$")]
		public bool HasIndex(int row, int column) {
			return ((QAbstractItemModel) interceptor).HasIndex(row,column);
		}
		[SmokeMethod("index", "(int, int, const QModelIndex&) const", "$$#")]
		public abstract QModelIndex Index(int row, int column, QModelIndex parent);
		[SmokeMethod("parent", "(const QModelIndex&) const", "#")]
		public abstract QModelIndex Parent(QModelIndex child);
		[SmokeMethod("sibling", "(int, int, const QModelIndex&) const", "$$#")]
		public QModelIndex Sibling(int row, int column, QModelIndex idx) {
			return ((QAbstractItemModel) interceptor).Sibling(row,column,idx);
		}
		[SmokeMethod("rowCount", "(const QModelIndex&) const", "#")]
		public abstract int RowCount(QModelIndex parent);
		[SmokeMethod("columnCount", "(const QModelIndex&) const", "#")]
		public abstract int ColumnCount(QModelIndex parent);
		[SmokeMethod("hasChildren", "(const QModelIndex&) const", "#")]
		public virtual bool HasChildren(QModelIndex parent) {
			return ((QAbstractItemModel) interceptor).HasChildren(parent);
		}
		[SmokeMethod("hasChildren", "() const", "")]
		public virtual bool HasChildren() {
			return ((QAbstractItemModel) interceptor).HasChildren();
		}
		[SmokeMethod("data", "(const QModelIndex&, int) const", "#$")]
		public abstract QVariant Data(QModelIndex index, int role);
		[SmokeMethod("setData", "(const QModelIndex&, const QVariant&, int)", "##$")]
		public virtual bool SetData(QModelIndex index, QVariant value, int role) {
			return ((QAbstractItemModel) interceptor).SetData(index,value,role);
		}
		[SmokeMethod("setData", "(const QModelIndex&, const QVariant&)", "##")]
		public virtual bool SetData(QModelIndex index, QVariant value) {
			return ((QAbstractItemModel) interceptor).SetData(index,value);
		}
		[SmokeMethod("headerData", "(int, Qt::Orientation, int) const", "$$$")]
		public virtual QVariant HeaderData(int section, Qt.Orientation orientation, int role) {
			return ((QAbstractItemModel) interceptor).HeaderData(section,orientation,role);
		}
		[SmokeMethod("headerData", "(int, Qt::Orientation) const", "$$")]
		public virtual QVariant HeaderData(int section, Qt.Orientation orientation) {
			return ((QAbstractItemModel) interceptor).HeaderData(section,orientation);
		}
		[SmokeMethod("setHeaderData", "(int, Qt::Orientation, const QVariant&, int)", "$$#$")]
		public virtual bool SetHeaderData(int section, Qt.Orientation orientation, QVariant value, int role) {
			return ((QAbstractItemModel) interceptor).SetHeaderData(section,orientation,value,role);
		}
		[SmokeMethod("setHeaderData", "(int, Qt::Orientation, const QVariant&)", "$$#")]
		public virtual bool SetHeaderData(int section, Qt.Orientation orientation, QVariant value) {
			return ((QAbstractItemModel) interceptor).SetHeaderData(section,orientation,value);
		}
		[SmokeMethod("itemData", "(const QModelIndex&) const", "#")]
		public virtual Dictionary<int, QVariant> ItemData(QModelIndex index) {
			return ((QAbstractItemModel) interceptor).ItemData(index);
		}
		[SmokeMethod("setItemData", "(const QModelIndex&, const QMap<int, QVariant>&)", "#?")]
		public virtual bool SetItemData(QModelIndex index, Dictionary<int, QVariant> roles) {
			return ((QAbstractItemModel) interceptor).SetItemData(index,roles);
		}
		[SmokeMethod("mimeTypes", "() const", "")]
		public virtual List<string> MimeTypes() {
			return ((QAbstractItemModel) interceptor).MimeTypes();
		}
		[SmokeMethod("mimeData", "(const QModelIndexList&) const", "?")]
		public virtual QMimeData MimeData(List<QModelIndex> indexes) {
			return ((QAbstractItemModel) interceptor).MimeData(indexes);
		}
		[SmokeMethod("dropMimeData", "(const QMimeData*, Qt::DropAction, int, int, const QModelIndex&)", "#$$$#")]
		public virtual bool DropMimeData(QMimeData data, Qt.DropAction action, int row, int column, QModelIndex parent) {
			return ((QAbstractItemModel) interceptor).DropMimeData(data,action,row,column,parent);
		}
		[SmokeMethod("supportedDropActions", "() const", "")]
		public virtual int SupportedDropActions() {
			return ((QAbstractItemModel) interceptor).SupportedDropActions();
		}
		[SmokeMethod("supportedDragActions", "() const", "")]
		public int SupportedDragActions() {
			return ((QAbstractItemModel) interceptor).SupportedDragActions();
		}
		[SmokeMethod("setSupportedDragActions", "(Qt::DropActions)", "$")]
		public void SetSupportedDragActions(int arg1) {
			((QAbstractItemModel) interceptor).SetSupportedDragActions(arg1);
		}
		[SmokeMethod("insertRows", "(int, int, const QModelIndex&)", "$$#")]
		public virtual bool InsertRows(int row, int count, QModelIndex parent) {
			return ((QAbstractItemModel) interceptor).InsertRows(row,count,parent);
		}
		[SmokeMethod("insertRows", "(int, int)", "$$")]
		public virtual bool InsertRows(int row, int count) {
			return ((QAbstractItemModel) interceptor).InsertRows(row,count);
		}
		[SmokeMethod("insertColumns", "(int, int, const QModelIndex&)", "$$#")]
		public virtual bool InsertColumns(int column, int count, QModelIndex parent) {
			return ((QAbstractItemModel) interceptor).InsertColumns(column,count,parent);
		}
		[SmokeMethod("insertColumns", "(int, int)", "$$")]
		public virtual bool InsertColumns(int column, int count) {
			return ((QAbstractItemModel) interceptor).InsertColumns(column,count);
		}
		[SmokeMethod("removeRows", "(int, int, const QModelIndex&)", "$$#")]
		public virtual bool RemoveRows(int row, int count, QModelIndex parent) {
			return ((QAbstractItemModel) interceptor).RemoveRows(row,count,parent);
		}
		[SmokeMethod("removeRows", "(int, int)", "$$")]
		public virtual bool RemoveRows(int row, int count) {
			return ((QAbstractItemModel) interceptor).RemoveRows(row,count);
		}
		[SmokeMethod("removeColumns", "(int, int, const QModelIndex&)", "$$#")]
		public virtual bool RemoveColumns(int column, int count, QModelIndex parent) {
			return ((QAbstractItemModel) interceptor).RemoveColumns(column,count,parent);
		}
		[SmokeMethod("removeColumns", "(int, int)", "$$")]
		public virtual bool RemoveColumns(int column, int count) {
			return ((QAbstractItemModel) interceptor).RemoveColumns(column,count);
		}
		[SmokeMethod("insertRow", "(int, const QModelIndex&)", "$#")]
		public bool InsertRow(int row, QModelIndex parent) {
			return ((QAbstractItemModel) interceptor).InsertRow(row,parent);
		}
		[SmokeMethod("insertRow", "(int)", "$")]
		public bool InsertRow(int row) {
			return ((QAbstractItemModel) interceptor).InsertRow(row);
		}
		[SmokeMethod("insertColumn", "(int, const QModelIndex&)", "$#")]
		public bool InsertColumn(int column, QModelIndex parent) {
			return ((QAbstractItemModel) interceptor).InsertColumn(column,parent);
		}
		[SmokeMethod("insertColumn", "(int)", "$")]
		public bool InsertColumn(int column) {
			return ((QAbstractItemModel) interceptor).InsertColumn(column);
		}
		[SmokeMethod("removeRow", "(int, const QModelIndex&)", "$#")]
		public bool RemoveRow(int row, QModelIndex parent) {
			return ((QAbstractItemModel) interceptor).RemoveRow(row,parent);
		}
		[SmokeMethod("removeRow", "(int)", "$")]
		public bool RemoveRow(int row) {
			return ((QAbstractItemModel) interceptor).RemoveRow(row);
		}
		[SmokeMethod("removeColumn", "(int, const QModelIndex&)", "$#")]
		public bool RemoveColumn(int column, QModelIndex parent) {
			return ((QAbstractItemModel) interceptor).RemoveColumn(column,parent);
		}
		[SmokeMethod("removeColumn", "(int)", "$")]
		public bool RemoveColumn(int column) {
			return ((QAbstractItemModel) interceptor).RemoveColumn(column);
		}
		[SmokeMethod("fetchMore", "(const QModelIndex&)", "#")]
		public virtual void FetchMore(QModelIndex parent) {
			((QAbstractItemModel) interceptor).FetchMore(parent);
		}
		[SmokeMethod("canFetchMore", "(const QModelIndex&) const", "#")]
		public virtual bool CanFetchMore(QModelIndex parent) {
			return ((QAbstractItemModel) interceptor).CanFetchMore(parent);
		}
		[SmokeMethod("flags", "(const QModelIndex&) const", "#")]
		public virtual int Flags(QModelIndex index) {
			return ((QAbstractItemModel) interceptor).Flags(index);
		}
		[SmokeMethod("sort", "(int, Qt::SortOrder)", "$$")]
		public virtual void Sort(int column, Qt.SortOrder order) {
			((QAbstractItemModel) interceptor).Sort(column,order);
		}
		[SmokeMethod("sort", "(int)", "$")]
		public virtual void Sort(int column) {
			((QAbstractItemModel) interceptor).Sort(column);
		}
		[SmokeMethod("buddy", "(const QModelIndex&) const", "#")]
		public virtual QModelIndex Buddy(QModelIndex index) {
			return ((QAbstractItemModel) interceptor).Buddy(index);
		}
		[SmokeMethod("match", "(const QModelIndex&, int, const QVariant&, int, Qt::MatchFlags) const", "#$#$$")]
		public virtual List<QModelIndex> Match(QModelIndex start, int role, QVariant value, int hits, int flags) {
			return ((QAbstractItemModel) interceptor).Match(start,role,value,hits,flags);
		}
		[SmokeMethod("match", "(const QModelIndex&, int, const QVariant&, int) const", "#$#$")]
		public virtual List<QModelIndex> Match(QModelIndex start, int role, QVariant value, int hits) {
			return ((QAbstractItemModel) interceptor).Match(start,role,value,hits);
		}
		[SmokeMethod("match", "(const QModelIndex&, int, const QVariant&) const", "#$#")]
		public virtual List<QModelIndex> Match(QModelIndex start, int role, QVariant value) {
			return ((QAbstractItemModel) interceptor).Match(start,role,value);
		}
		[SmokeMethod("span", "(const QModelIndex&) const", "#")]
		public virtual QSize Span(QModelIndex index) {
			return ((QAbstractItemModel) interceptor).Span(index);
		}
		[SmokeMethod("parent", "() const", "")]
		public QObject Parent() {
			return ((QAbstractItemModel) interceptor).Parent();
		}
		[Q_SLOT("bool submit()")]
		[SmokeMethod("submit", "()", "")]
		public virtual bool Submit() {
			return ((QAbstractItemModel) interceptor).Submit();
		}
		[Q_SLOT("void revert()")]
		[SmokeMethod("revert", "()", "")]
		public virtual void Revert() {
			((QAbstractItemModel) interceptor).Revert();
		}
		[SmokeMethod("createIndex", "(int, int) const", "$$")]
		protected QModelIndex CreateIndex(int row, int column) {
			return ((QAbstractItemModel) interceptor).CreateIndex(row,column);
		}
		[SmokeMethod("createIndex", "(int, int, int) const", "$$$")]
		protected QModelIndex CreateIndex(int row, int column, int id) {
			return ((QAbstractItemModel) interceptor).CreateIndex(row,column,id);
		}
		[SmokeMethod("createIndex", "(int, int, quint32) const", "$$$")]
		protected QModelIndex CreateIndex(int row, int column, uint id) {
			return ((QAbstractItemModel) interceptor).CreateIndex(row,column,id);
		}
		[SmokeMethod("encodeData", "(const QModelIndexList&, QDataStream&) const", "?#")]
		protected void EncodeData(List<QModelIndex> indexes, QDataStream stream) {
			((QAbstractItemModel) interceptor).EncodeData(indexes,stream);
		}
		[SmokeMethod("decodeData", "(int, int, const QModelIndex&, QDataStream&)", "$$##")]
		protected bool DecodeData(int row, int column, QModelIndex parent, QDataStream stream) {
			return ((QAbstractItemModel) interceptor).DecodeData(row,column,parent,stream);
		}
		[SmokeMethod("beginInsertRows", "(const QModelIndex&, int, int)", "#$$")]
		protected void BeginInsertRows(QModelIndex parent, int first, int last) {
			((QAbstractItemModel) interceptor).BeginInsertRows(parent,first,last);
		}
		[SmokeMethod("endInsertRows", "()", "")]
		protected void EndInsertRows() {
			((QAbstractItemModel) interceptor).EndInsertRows();
		}
		[SmokeMethod("beginRemoveRows", "(const QModelIndex&, int, int)", "#$$")]
		protected void BeginRemoveRows(QModelIndex parent, int first, int last) {
			((QAbstractItemModel) interceptor).BeginRemoveRows(parent,first,last);
		}
		[SmokeMethod("endRemoveRows", "()", "")]
		protected void EndRemoveRows() {
			((QAbstractItemModel) interceptor).EndRemoveRows();
		}
		[SmokeMethod("beginInsertColumns", "(const QModelIndex&, int, int)", "#$$")]
		protected void BeginInsertColumns(QModelIndex parent, int first, int last) {
			((QAbstractItemModel) interceptor).BeginInsertColumns(parent,first,last);
		}
		[SmokeMethod("endInsertColumns", "()", "")]
		protected void EndInsertColumns() {
			((QAbstractItemModel) interceptor).EndInsertColumns();
		}
		[SmokeMethod("beginRemoveColumns", "(const QModelIndex&, int, int)", "#$$")]
		protected void BeginRemoveColumns(QModelIndex parent, int first, int last) {
			((QAbstractItemModel) interceptor).BeginRemoveColumns(parent,first,last);
		}
		[SmokeMethod("endRemoveColumns", "()", "")]
		protected void EndRemoveColumns() {
			((QAbstractItemModel) interceptor).EndRemoveColumns();
		}
		[SmokeMethod("reset", "()", "")]
		protected void Reset() {
			((QAbstractItemModel) interceptor).Reset();
		}
		[SmokeMethod("changePersistentIndex", "(const QModelIndex&, const QModelIndex&)", "##")]
		protected void ChangePersistentIndex(QModelIndex from, QModelIndex to) {
			((QAbstractItemModel) interceptor).ChangePersistentIndex(from,to);
		}
		[SmokeMethod("changePersistentIndexList", "(const QModelIndexList&, const QModelIndexList&)", "??")]
		protected void ChangePersistentIndexList(List<QModelIndex> from, List<QModelIndex> to) {
			((QAbstractItemModel) interceptor).ChangePersistentIndexList(from,to);
		}
		[SmokeMethod("persistentIndexList", "() const", "")]
		protected List<QModelIndex> PersistentIndexList() {
			return ((QAbstractItemModel) interceptor).PersistentIndexList();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQAbstractItemModelSignals Emit {
			get { return (IQAbstractItemModelSignals) Q_EMIT; }
		}
	}

	public interface IQAbstractItemModelSignals : IQObjectSignals {
		[Q_SIGNAL("void dataChanged(const QModelIndex&, const QModelIndex&)")]
		void DataChanged(QModelIndex topLeft, QModelIndex bottomRight);
		[Q_SIGNAL("void headerDataChanged(Qt::Orientation, int, int)")]
		void HeaderDataChanged(Qt.Orientation orientation, int first, int last);
		[Q_SIGNAL("void layoutChanged()")]
		void LayoutChanged();
		[Q_SIGNAL("void layoutAboutToBeChanged()")]
		void LayoutAboutToBeChanged();
	}
}
