//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QPoint")]
	public class QPoint : MarshalByRefObject, IDisposable {
		protected QPoint interceptor = null;
		private IntPtr smokeObject;
		protected QPoint(Type dummy) {}
		[SmokeClass("QPoint")]
		interface IQPointProxy {
			[SmokeMethod("operator/=", "(qreal)", "$")]
			QPoint op_div(QPoint lhs, double c);
			[SmokeMethod("operator*", "(const QPoint&, const QMatrix&)", "##")]
			QPoint op_mult(QPoint p, QMatrix m);
			[SmokeMethod("operator==", "(const QPoint&, const QPoint&)", "##")]
			bool op_equals(QPoint p1, QPoint p2);
			[SmokeMethod("operator+", "(const QPoint&, const QPoint&)", "##")]
			QPoint op_plus(QPoint p1, QPoint p2);
			[SmokeMethod("operator-", "(const QPoint&, const QPoint&)", "##")]
			QPoint op_minus(QPoint p1, QPoint p2);
			[SmokeMethod("operator*", "(const QPoint&, qreal)", "#$")]
			QPoint op_mult(QPoint p, double c);
			[SmokeMethod("operator*", "(qreal, const QPoint&)", "$#")]
			QPoint op_mult(double c, QPoint p);
			[SmokeMethod("operator-", "(const QPoint&)", "#")]
			QPoint op_minus(QPoint p);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QPoint), this);
			interceptor = (QPoint) realProxy.GetTransparentProxy();
		}
		private static IQPointProxy staticInterceptor = null;
		static QPoint() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQPointProxy), null);
			staticInterceptor = (IQPointProxy) realProxy.GetTransparentProxy();
		}
		// QPoint& operator*=(qreal arg1); >>>> NOT CONVERTED
		public QPoint() : this((Type) null) {
			CreateProxy();
			NewQPoint();
		}
		[SmokeMethod("QPoint", "()", "")]
		private void NewQPoint() {
			((QPoint) interceptor).NewQPoint();
		}
		public QPoint(int xpos, int ypos) : this((Type) null) {
			CreateProxy();
			NewQPoint(xpos,ypos);
		}
		[SmokeMethod("QPoint", "(int, int)", "$$")]
		private void NewQPoint(int xpos, int ypos) {
			((QPoint) interceptor).NewQPoint(xpos,ypos);
		}
		[SmokeMethod("isNull", "() const", "")]
		public bool IsNull() {
			return ((QPoint) interceptor).IsNull();
		}
		[SmokeMethod("x", "() const", "")]
		public int X() {
			return ((QPoint) interceptor).X();
		}
		[SmokeMethod("y", "() const", "")]
		public int Y() {
			return ((QPoint) interceptor).Y();
		}
		[SmokeMethod("setX", "(int)", "$")]
		public void SetX(int x) {
			((QPoint) interceptor).SetX(x);
		}
		[SmokeMethod("setY", "(int)", "$")]
		public void SetY(int y) {
			((QPoint) interceptor).SetY(y);
		}
		[SmokeMethod("manhattanLength", "() const", "")]
		public int ManhattanLength() {
			return ((QPoint) interceptor).ManhattanLength();
		}
		[SmokeMethod("rx", "()", "")]
		public int Rx() {
			return ((QPoint) interceptor).Rx();
		}
		[SmokeMethod("ry", "()", "")]
		public int Ry() {
			return ((QPoint) interceptor).Ry();
		}
		~QPoint() {
			DisposeQPoint();
		}
		public void Dispose() {
			DisposeQPoint();
		}
		[SmokeMethod("~QPoint", "()", "")]
		private void DisposeQPoint() {
			((QPoint) interceptor).DisposeQPoint();
		}
		public override bool Equals(object o) {
			if (!(o is QPoint)) { return false; }
			return this == (QPoint) o;
		}
		public override int GetHashCode() {
			return ((QPoint) interceptor).GetHashCode();
		}
		public static QPoint operator/(QPoint lhs, double c) {
			return staticInterceptor.op_div(lhs,c);
		}
		public static QPoint operator*(QPoint p, QMatrix m) {
			return staticInterceptor.op_mult(p,m);
		}
		public static bool operator==(QPoint p1, QPoint p2) {
			return staticInterceptor.op_equals(p1,p2);
		}
		public static bool operator!=(QPoint p1, QPoint p2) {
			return !staticInterceptor.op_equals(p1,p2);
		}
		public static QPoint operator+(QPoint p1, QPoint p2) {
			return staticInterceptor.op_plus(p1,p2);
		}
		public static QPoint operator-(QPoint p1, QPoint p2) {
			return staticInterceptor.op_minus(p1,p2);
		}
		public static QPoint operator*(QPoint p, double c) {
			return staticInterceptor.op_mult(p,c);
		}
		public static QPoint operator*(double c, QPoint p) {
			return staticInterceptor.op_mult(c,p);
		}
		public static QPoint operator-(QPoint p) {
			return staticInterceptor.op_minus(p);
		}
	}
}
