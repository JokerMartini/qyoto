//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QLibraryInfo")]
	public class QLibraryInfo : MarshalByRefObject {
		protected QLibraryInfo interceptor = null;
		private IntPtr smokeObject;
		protected QLibraryInfo(Type dummy) {}
		[SmokeClass("QLibraryInfo")]
		interface IQLibraryInfoProxy {
			[SmokeMethod("licensee", "()", "")]
			string Licensee();
			[SmokeMethod("licensedProducts", "()", "")]
			string LicensedProducts();
			[SmokeMethod("buildKey", "()", "")]
			string BuildKey();
			[SmokeMethod("location", "(QLibraryInfo::LibraryLocation)", "$")]
			string Location(QLibraryInfo.LibraryLocation arg1);
		}
		private static IQLibraryInfoProxy staticInterceptor = null;
		static QLibraryInfo() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQLibraryInfoProxy), null);
			staticInterceptor = (IQLibraryInfoProxy) realProxy.GetTransparentProxy();
		}
		public enum LibraryLocation {
			PrefixPath = 0,
			DocumentationPath = 1,
			HeadersPath = 2,
			LibrariesPath = 3,
			BinariesPath = 4,
			PluginsPath = 5,
			DataPath = 6,
			TranslationsPath = 7,
			SettingsPath = 8,
			DemosPath = 9,
			ExamplesPath = 10,
		}
		public static string Licensee() {
			return staticInterceptor.Licensee();
		}
		public static string LicensedProducts() {
			return staticInterceptor.LicensedProducts();
		}
		public static string BuildKey() {
			return staticInterceptor.BuildKey();
		}
		public static string Location(QLibraryInfo.LibraryLocation arg1) {
			return staticInterceptor.Location(arg1);
		}
	}
}
