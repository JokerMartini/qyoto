//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	[SmokeClass("QDirIterator")]
	public class QDirIterator : Object, IDisposable {
		protected SmokeInvocation interceptor = null;
		private IntPtr smokeObject;
		protected QDirIterator(Type dummy) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(QDirIterator), this);
		}
		public enum IteratorFlag {
			NoIteratorFlags = 0x0,
			FollowSymlinks = 0x1,
			Subdirectories = 0x2,
		}
		public QDirIterator(QDir dir, int flags) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QDirIterator#$", "QDirIterator(const QDir&, IteratorFlags)", typeof(void), typeof(QDir), dir, typeof(int), flags);
		}
		public QDirIterator(QDir dir) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QDirIterator#", "QDirIterator(const QDir&)", typeof(void), typeof(QDir), dir);
		}
		public QDirIterator(string path, int flags) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QDirIterator$$", "QDirIterator(const QString&, IteratorFlags)", typeof(void), typeof(string), path, typeof(int), flags);
		}
		public QDirIterator(string path) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QDirIterator$", "QDirIterator(const QString&)", typeof(void), typeof(string), path);
		}
		public QDirIterator(string path, int filter, int flags) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QDirIterator$$$", "QDirIterator(const QString&, QDir::Filters, IteratorFlags)", typeof(void), typeof(string), path, typeof(int), filter, typeof(int), flags);
		}
		public QDirIterator(string path, List<string> nameFilters, int filters, int flags) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QDirIterator$?$$", "QDirIterator(const QString&, const QStringList&, QDir::Filters, IteratorFlags)", typeof(void), typeof(string), path, typeof(List<string>), nameFilters, typeof(int), filters, typeof(int), flags);
		}
		public QDirIterator(string path, List<string> nameFilters, int filters) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QDirIterator$?$", "QDirIterator(const QString&, const QStringList&, QDir::Filters)", typeof(void), typeof(string), path, typeof(List<string>), nameFilters, typeof(int), filters);
		}
		public QDirIterator(string path, List<string> nameFilters) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QDirIterator$?", "QDirIterator(const QString&, const QStringList&)", typeof(void), typeof(string), path, typeof(List<string>), nameFilters);
		}
		public string Next() {
			return (string) interceptor.Invoke("next", "next()", typeof(string));
		}
		public bool HasNext() {
			return (bool) interceptor.Invoke("hasNext", "hasNext() const", typeof(bool));
		}
		public string FileName() {
			return (string) interceptor.Invoke("fileName", "fileName() const", typeof(string));
		}
		public string FilePath() {
			return (string) interceptor.Invoke("filePath", "filePath() const", typeof(string));
		}
		public QFileInfo FileInfo() {
			return (QFileInfo) interceptor.Invoke("fileInfo", "fileInfo() const", typeof(QFileInfo));
		}
		public string Path() {
			return (string) interceptor.Invoke("path", "path() const", typeof(string));
		}
		~QDirIterator() {
			interceptor.Invoke("~QDirIterator", "~QDirIterator()", typeof(void));
		}
		public void Dispose() {
			interceptor.Invoke("~QDirIterator", "~QDirIterator()", typeof(void));
		}
	}
}
