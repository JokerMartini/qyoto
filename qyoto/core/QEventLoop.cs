//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QEventLoop")]
	public class QEventLoop : QObject, IDisposable {
 		protected QEventLoop(Type dummy) : base((Type) null) {}
		[SmokeClass("QEventLoop")]
		interface IQEventLoopProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QEventLoop), this);
			interceptor = (QEventLoop) realProxy.GetTransparentProxy();
		}
		private static IQEventLoopProxy staticInterceptor = null;
		static QEventLoop() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQEventLoopProxy), null);
			staticInterceptor = (IQEventLoopProxy) realProxy.GetTransparentProxy();
		}
		public enum ProcessEventsFlag {
			AllEvents = 0x00,
			ExcludeUserInputEvents = 0x01,
			ExcludeSocketNotifiers = 0x02,
			WaitForMoreEvents = 0x04,
			X11ExcludeTimers = 0x08,
			DeferredDeletion = 0x10,
		}
		public QEventLoop(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQEventLoop(parent);
		}
		[SmokeMethod("QEventLoop", "(QObject*)", "#")]
		private void NewQEventLoop(QObject parent) {
			((QEventLoop) interceptor).NewQEventLoop(parent);
		}
		public QEventLoop() : this((Type) null) {
			CreateProxy();
			NewQEventLoop();
		}
		[SmokeMethod("QEventLoop", "()", "")]
		private void NewQEventLoop() {
			((QEventLoop) interceptor).NewQEventLoop();
		}
		[SmokeMethod("processEvents", "(ProcessEventsFlags)", "$")]
		public bool ProcessEvents(int flags) {
			return ((QEventLoop) interceptor).ProcessEvents(flags);
		}
		[SmokeMethod("processEvents", "()", "")]
		public bool ProcessEvents() {
			return ((QEventLoop) interceptor).ProcessEvents();
		}
		[SmokeMethod("processEvents", "(ProcessEventsFlags, int)", "$$")]
		public void ProcessEvents(int flags, int maximumTime) {
			((QEventLoop) interceptor).ProcessEvents(flags,maximumTime);
		}
		[SmokeMethod("exec", "(ProcessEventsFlags)", "$")]
		public int Exec(int flags) {
			return ((QEventLoop) interceptor).Exec(flags);
		}
		[SmokeMethod("exec", "()", "")]
		public int Exec() {
			return ((QEventLoop) interceptor).Exec();
		}
		[SmokeMethod("exit", "(int)", "$")]
		public void Exit(int returnCode) {
			((QEventLoop) interceptor).Exit(returnCode);
		}
		[SmokeMethod("exit", "()", "")]
		public void Exit() {
			((QEventLoop) interceptor).Exit();
		}
		[SmokeMethod("isRunning", "() const", "")]
		public bool IsRunning() {
			return ((QEventLoop) interceptor).IsRunning();
		}
		[SmokeMethod("wakeUp", "()", "")]
		public void WakeUp() {
			((QEventLoop) interceptor).WakeUp();
		}
		[Q_SLOT("void quit()")]
		[SmokeMethod("quit", "()", "")]
		public void Quit() {
			((QEventLoop) interceptor).Quit();
		}
		~QEventLoop() {
			DisposeQEventLoop();
		}
		public new void Dispose() {
			DisposeQEventLoop();
		}
		[SmokeMethod("~QEventLoop", "()", "")]
		private void DisposeQEventLoop() {
			((QEventLoop) interceptor).DisposeQEventLoop();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQEventLoopSignals Emit {
			get { return (IQEventLoopSignals) Q_EMIT; }
		}
	}

	public interface IQEventLoopSignals : IQObjectSignals {
	}
}
