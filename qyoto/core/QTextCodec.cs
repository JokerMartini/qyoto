//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	[SmokeClass("QTextCodec")]
	public abstract class QTextCodec : MarshalByRefObject {
		protected QTextCodec interceptor = null;
		private IntPtr smokeObject;
		protected QTextCodec(Type dummy) {}
		[SmokeClass("QTextCodec")]
		interface IQTextCodecProxy {
			[SmokeMethod("codecForName", "(const QByteArray&)", "#")]
			QTextCodec CodecForName(QByteArray name);
			[SmokeMethod("codecForName", "(const char*)", "$")]
			QTextCodec CodecForName(string name);
			[SmokeMethod("codecForMib", "(int)", "$")]
			QTextCodec CodecForMib(int mib);
			[SmokeMethod("availableCodecs", "()", "")]
			List<QByteArray> AvailableCodecs();
			[SmokeMethod("availableMibs", "()", "")]
			List<int> AvailableMibs();
			[SmokeMethod("codecForLocale", "()", "")]
			QTextCodec CodecForLocale();
			[SmokeMethod("setCodecForLocale", "(QTextCodec*)", "#")]
			void SetCodecForLocale(QTextCodec c);
			[SmokeMethod("codecForTr", "()", "")]
			QTextCodec CodecForTr();
			[SmokeMethod("setCodecForTr", "(QTextCodec*)", "#")]
			void SetCodecForTr(QTextCodec c);
			[SmokeMethod("codecForCStrings", "()", "")]
			QTextCodec CodecForCStrings();
			[SmokeMethod("setCodecForCStrings", "(QTextCodec*)", "#")]
			void SetCodecForCStrings(QTextCodec c);
			[SmokeMethod("codecForHtml", "(const QByteArray&)", "#")]
			QTextCodec CodecForHtml(QByteArray ba);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTextCodec), this);
			interceptor = (QTextCodec) realProxy.GetTransparentProxy();
		}
		private static IQTextCodecProxy staticInterceptor = null;
		static QTextCodec() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQTextCodecProxy), null);
			staticInterceptor = (IQTextCodecProxy) realProxy.GetTransparentProxy();
		}
		public enum ConversionFlag : long {
			DefaultConversion = 0,
			ConvertInvalidToNull = 0x80000000,
			IgnoreHeader = 0x1,
		}
		// QString toUnicode(const char* arg1,int arg2,QTextCodec::ConverterState* arg3); >>>> NOT CONVERTED
		// QByteArray fromUnicode(const QChar* arg1,int arg2,QTextCodec::ConverterState* arg3); >>>> NOT CONVERTED
		// QString convertToUnicode(const char* arg1,int arg2,QTextCodec::ConverterState* arg3); >>>> NOT CONVERTED
		// QByteArray convertFromUnicode(const QChar* arg1,int arg2,QTextCodec::ConverterState* arg3); >>>> NOT CONVERTED
		[SmokeMethod("makeDecoder", "() const", "")]
		public QTextDecoder MakeDecoder() {
			return ((QTextCodec) interceptor).MakeDecoder();
		}
		[SmokeMethod("makeEncoder", "() const", "")]
		public QTextEncoder MakeEncoder() {
			return ((QTextCodec) interceptor).MakeEncoder();
		}
		[SmokeMethod("canEncode", "(QChar) const", "#")]
		public bool CanEncode(char arg1) {
			return ((QTextCodec) interceptor).CanEncode(arg1);
		}
		[SmokeMethod("canEncode", "(const QString&) const", "$")]
		public bool CanEncode(string arg1) {
			return ((QTextCodec) interceptor).CanEncode(arg1);
		}
		[SmokeMethod("toUnicode", "(const QByteArray&) const", "#")]
		public string ToUnicode(QByteArray arg1) {
			return ((QTextCodec) interceptor).ToUnicode(arg1);
		}
		[SmokeMethod("toUnicode", "(const char*) const", "$")]
		public string ToUnicode(string chars) {
			return ((QTextCodec) interceptor).ToUnicode(chars);
		}
		[SmokeMethod("fromUnicode", "(const QString&) const", "$")]
		public QByteArray FromUnicode(string uc) {
			return ((QTextCodec) interceptor).FromUnicode(uc);
		}
		[SmokeMethod("toUnicode", "(const char*, int) const", "$$")]
		public string ToUnicode(string arg1, int length) {
			return ((QTextCodec) interceptor).ToUnicode(arg1,length);
		}
		[SmokeMethod("fromUnicode", "(const QChar*, int) const", "#$")]
		public QByteArray FromUnicode(char arg1, int length) {
			return ((QTextCodec) interceptor).FromUnicode(arg1,length);
		}
		[SmokeMethod("name", "() const", "")]
		public abstract QByteArray Name();
		[SmokeMethod("aliases", "() const", "")]
		public virtual List<QByteArray> Aliases() {
			return ((QTextCodec) interceptor).Aliases();
		}
		[SmokeMethod("mibEnum", "() const", "")]
		public abstract int MibEnum();
		public QTextCodec() : this((Type) null) {
			CreateProxy();
			NewQTextCodec();
		}
		[SmokeMethod("QTextCodec", "()", "")]
		private void NewQTextCodec() {
			((QTextCodec) interceptor).NewQTextCodec();
		}
		public static QTextCodec CodecForName(QByteArray name) {
			return staticInterceptor.CodecForName(name);
		}
		public static QTextCodec CodecForName(string name) {
			return staticInterceptor.CodecForName(name);
		}
		public static QTextCodec CodecForMib(int mib) {
			return staticInterceptor.CodecForMib(mib);
		}
		public static List<QByteArray> AvailableCodecs() {
			return staticInterceptor.AvailableCodecs();
		}
		public static List<int> AvailableMibs() {
			return staticInterceptor.AvailableMibs();
		}
		public static QTextCodec CodecForLocale() {
			return staticInterceptor.CodecForLocale();
		}
		public static void SetCodecForLocale(QTextCodec c) {
			staticInterceptor.SetCodecForLocale(c);
		}
		public static QTextCodec CodecForTr() {
			return staticInterceptor.CodecForTr();
		}
		public static void SetCodecForTr(QTextCodec c) {
			staticInterceptor.SetCodecForTr(c);
		}
		public static QTextCodec CodecForCStrings() {
			return staticInterceptor.CodecForCStrings();
		}
		public static void SetCodecForCStrings(QTextCodec c) {
			staticInterceptor.SetCodecForCStrings(c);
		}
		public static QTextCodec CodecForHtml(QByteArray ba) {
			return staticInterceptor.CodecForHtml(ba);
		}
	}
}
