//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	/// See <see cref="IQProcessSignals"></see> for signals emitted by QProcess
	[SmokeClass("QProcess")]
	public class QProcess : QIODevice, IDisposable {
 		protected QProcess(Type dummy) : base((Type) null) {}
		[SmokeClass("QProcess")]
		interface IQProcessProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
			[SmokeMethod("execute", "(const QString&, const QStringList&)", "$?")]
			int Execute(string program, List<string> arguments);
			[SmokeMethod("execute", "(const QString&)", "$")]
			int Execute(string program);
			[SmokeMethod("startDetached", "(const QString&, const QStringList&)", "$?")]
			bool StartDetached(string program, List<string> arguments);
			[SmokeMethod("startDetached", "(const QString&)", "$")]
			bool StartDetached(string program);
			[SmokeMethod("systemEnvironment", "()", "")]
			List<string> SystemEnvironment();
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QProcess), this);
			interceptor = (QProcess) realProxy.GetTransparentProxy();
		}
		private static IQProcessProxy staticInterceptor = null;
		static QProcess() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQProcessProxy), null);
			staticInterceptor = (IQProcessProxy) realProxy.GetTransparentProxy();
		}
		public enum ProcessError {
			FailedToStart = 0,
			Crashed = 1,
			Timedout = 2,
			ReadError = 3,
			WriteError = 4,
			UnknownError = 5,
		}
		public enum ProcessState {
			NotRunning = 0,
			Starting = 1,
			Running = 2,
		}
		public enum ProcessChannel {
			StandardOutput = 0,
			StandardError = 1,
		}
		public enum ProcessChannelMode {
			SeparateChannels = 0,
			MergedChannels = 1,
			ForwardedChannels = 2,
		}
		public enum ExitStatus {
			NormalExit = 0,
			CrashExit = 1,
		}
		// Q_PID pid(); >>>> NOT CONVERTED
		public QProcess(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQProcess(parent);
		}
		[SmokeMethod("QProcess", "(QObject*)", "#")]
		private void NewQProcess(QObject parent) {
			((QProcess) interceptor).NewQProcess(parent);
		}
		public QProcess() : this((Type) null) {
			CreateProxy();
			NewQProcess();
		}
		[SmokeMethod("QProcess", "()", "")]
		private void NewQProcess() {
			((QProcess) interceptor).NewQProcess();
		}
		[SmokeMethod("start", "(const QString&, const QStringList&, OpenMode)", "$?$")]
		public void Start(string program, List<string> arguments, int mode) {
			((QProcess) interceptor).Start(program,arguments,mode);
		}
		[SmokeMethod("start", "(const QString&, const QStringList&)", "$?")]
		public void Start(string program, List<string> arguments) {
			((QProcess) interceptor).Start(program,arguments);
		}
		[SmokeMethod("start", "(const QString&, OpenMode)", "$$")]
		public void Start(string program, int mode) {
			((QProcess) interceptor).Start(program,mode);
		}
		[SmokeMethod("start", "(const QString&)", "$")]
		public void Start(string program) {
			((QProcess) interceptor).Start(program);
		}
		[SmokeMethod("readChannelMode", "() const", "")]
		public QProcess.ProcessChannelMode ReadChannelMode() {
			return ((QProcess) interceptor).ReadChannelMode();
		}
		[SmokeMethod("setReadChannelMode", "(QProcess::ProcessChannelMode)", "$")]
		public void SetReadChannelMode(QProcess.ProcessChannelMode mode) {
			((QProcess) interceptor).SetReadChannelMode(mode);
		}
		[SmokeMethod("processChannelMode", "() const", "")]
		public QProcess.ProcessChannelMode processChannelMode() {
			return ((QProcess) interceptor).processChannelMode();
		}
		[SmokeMethod("setProcessChannelMode", "(QProcess::ProcessChannelMode)", "$")]
		public void SetProcessChannelMode(QProcess.ProcessChannelMode mode) {
			((QProcess) interceptor).SetProcessChannelMode(mode);
		}
		[SmokeMethod("readChannel", "() const", "")]
		public QProcess.ProcessChannel ReadChannel() {
			return ((QProcess) interceptor).ReadChannel();
		}
		[SmokeMethod("setReadChannel", "(QProcess::ProcessChannel)", "$")]
		public void SetReadChannel(QProcess.ProcessChannel channel) {
			((QProcess) interceptor).SetReadChannel(channel);
		}
		[SmokeMethod("closeReadChannel", "(QProcess::ProcessChannel)", "$")]
		public void CloseReadChannel(QProcess.ProcessChannel channel) {
			((QProcess) interceptor).CloseReadChannel(channel);
		}
		[SmokeMethod("closeWriteChannel", "()", "")]
		public void CloseWriteChannel() {
			((QProcess) interceptor).CloseWriteChannel();
		}
		[SmokeMethod("setStandardInputFile", "(const QString&)", "$")]
		public void SetStandardInputFile(string fileName) {
			((QProcess) interceptor).SetStandardInputFile(fileName);
		}
		[SmokeMethod("setStandardOutputFile", "(const QString&, OpenMode)", "$$")]
		public void SetStandardOutputFile(string fileName, int mode) {
			((QProcess) interceptor).SetStandardOutputFile(fileName,mode);
		}
		[SmokeMethod("setStandardOutputFile", "(const QString&)", "$")]
		public void SetStandardOutputFile(string fileName) {
			((QProcess) interceptor).SetStandardOutputFile(fileName);
		}
		[SmokeMethod("setStandardErrorFile", "(const QString&, OpenMode)", "$$")]
		public void SetStandardErrorFile(string fileName, int mode) {
			((QProcess) interceptor).SetStandardErrorFile(fileName,mode);
		}
		[SmokeMethod("setStandardErrorFile", "(const QString&)", "$")]
		public void SetStandardErrorFile(string fileName) {
			((QProcess) interceptor).SetStandardErrorFile(fileName);
		}
		[SmokeMethod("setStandardOutputProcess", "(QProcess*)", "#")]
		public void SetStandardOutputProcess(QProcess destination) {
			((QProcess) interceptor).SetStandardOutputProcess(destination);
		}
		[SmokeMethod("workingDirectory", "() const", "")]
		public string WorkingDirectory() {
			return ((QProcess) interceptor).WorkingDirectory();
		}
		[SmokeMethod("setWorkingDirectory", "(const QString&)", "$")]
		public void SetWorkingDirectory(string dir) {
			((QProcess) interceptor).SetWorkingDirectory(dir);
		}
		[SmokeMethod("setEnvironment", "(const QStringList&)", "?")]
		public void SetEnvironment(List<string> environment) {
			((QProcess) interceptor).SetEnvironment(environment);
		}
		[SmokeMethod("environment", "() const", "")]
		public List<string> Environment() {
			return ((QProcess) interceptor).Environment();
		}
		[SmokeMethod("error", "() const", "")]
		public QProcess.ProcessError Error() {
			return ((QProcess) interceptor).Error();
		}
		[SmokeMethod("state", "() const", "")]
		public QProcess.ProcessState State() {
			return ((QProcess) interceptor).State();
		}
		[SmokeMethod("waitForStarted", "(int)", "$")]
		public bool WaitForStarted(int msecs) {
			return ((QProcess) interceptor).WaitForStarted(msecs);
		}
		[SmokeMethod("waitForStarted", "()", "")]
		public bool WaitForStarted() {
			return ((QProcess) interceptor).WaitForStarted();
		}
		[SmokeMethod("waitForReadyRead", "(int)", "$")]
		public override bool WaitForReadyRead(int msecs) {
			return ((QProcess) interceptor).WaitForReadyRead(msecs);
		}
		[SmokeMethod("waitForReadyRead", "()", "")]
		public bool WaitForReadyRead() {
			return ((QProcess) interceptor).WaitForReadyRead();
		}
		[SmokeMethod("waitForBytesWritten", "(int)", "$")]
		public override bool WaitForBytesWritten(int msecs) {
			return ((QProcess) interceptor).WaitForBytesWritten(msecs);
		}
		[SmokeMethod("waitForBytesWritten", "()", "")]
		public bool WaitForBytesWritten() {
			return ((QProcess) interceptor).WaitForBytesWritten();
		}
		[SmokeMethod("waitForFinished", "(int)", "$")]
		public bool WaitForFinished(int msecs) {
			return ((QProcess) interceptor).WaitForFinished(msecs);
		}
		[SmokeMethod("waitForFinished", "()", "")]
		public bool WaitForFinished() {
			return ((QProcess) interceptor).WaitForFinished();
		}
		[SmokeMethod("readAllStandardOutput", "()", "")]
		public QByteArray ReadAllStandardOutput() {
			return ((QProcess) interceptor).ReadAllStandardOutput();
		}
		[SmokeMethod("readAllStandardError", "()", "")]
		public QByteArray ReadAllStandardError() {
			return ((QProcess) interceptor).ReadAllStandardError();
		}
		[SmokeMethod("exitCode", "() const", "")]
		public int ExitCode() {
			return ((QProcess) interceptor).ExitCode();
		}
		[SmokeMethod("exitStatus", "() const", "")]
		public QProcess.ExitStatus exitStatus() {
			return ((QProcess) interceptor).exitStatus();
		}
		[SmokeMethod("bytesAvailable", "() const", "")]
		public override long BytesAvailable() {
			return ((QProcess) interceptor).BytesAvailable();
		}
		[SmokeMethod("bytesToWrite", "() const", "")]
		public override long BytesToWrite() {
			return ((QProcess) interceptor).BytesToWrite();
		}
		[SmokeMethod("isSequential", "() const", "")]
		public override bool IsSequential() {
			return ((QProcess) interceptor).IsSequential();
		}
		[SmokeMethod("canReadLine", "() const", "")]
		public override bool CanReadLine() {
			return ((QProcess) interceptor).CanReadLine();
		}
		[SmokeMethod("close", "()", "")]
		public override void Close() {
			((QProcess) interceptor).Close();
		}
		[SmokeMethod("atEnd", "() const", "")]
		public override bool AtEnd() {
			return ((QProcess) interceptor).AtEnd();
		}
		[Q_SLOT("void terminate()")]
		[SmokeMethod("terminate", "()", "")]
		public void Terminate() {
			((QProcess) interceptor).Terminate();
		}
		[Q_SLOT("void kill()")]
		[SmokeMethod("kill", "()", "")]
		public void Kill() {
			((QProcess) interceptor).Kill();
		}
		[SmokeMethod("setProcessState", "(QProcess::ProcessState)", "$")]
		protected void SetProcessState(QProcess.ProcessState state) {
			((QProcess) interceptor).SetProcessState(state);
		}
		[SmokeMethod("setupChildProcess", "()", "")]
		protected virtual void SetupChildProcess() {
			((QProcess) interceptor).SetupChildProcess();
		}
		[SmokeMethod("readData", "(char*, qint64)", "$$")]
		protected override long ReadData(string data, long maxlen) {
			return ((QProcess) interceptor).ReadData(data,maxlen);
		}
		[SmokeMethod("writeData", "(const char*, qint64)", "$$")]
		protected override long WriteData(string data, long len) {
			return ((QProcess) interceptor).WriteData(data,len);
		}
		~QProcess() {
			DisposeQProcess();
		}
		public new void Dispose() {
			DisposeQProcess();
		}
		[SmokeMethod("~QProcess", "()", "")]
		private void DisposeQProcess() {
			((QProcess) interceptor).DisposeQProcess();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		public static int Execute(string program, List<string> arguments) {
			return staticInterceptor.Execute(program,arguments);
		}
		public static int Execute(string program) {
			return staticInterceptor.Execute(program);
		}
		public static bool StartDetached(string program, List<string> arguments) {
			return staticInterceptor.StartDetached(program,arguments);
		}
		public static bool StartDetached(string program) {
			return staticInterceptor.StartDetached(program);
		}
		public static List<string> SystemEnvironment() {
			return staticInterceptor.SystemEnvironment();
		}
		protected new IQProcessSignals Emit {
			get { return (IQProcessSignals) Q_EMIT; }
		}
	}

	public interface IQProcessSignals : IQIODeviceSignals {
		[Q_SIGNAL("void started()")]
		void Started();
		[Q_SIGNAL("void finished(int)")]
		void Finished(int exitCode);
		[Q_SIGNAL("void finished(int, QProcess::ExitStatus)")]
		void Finished(int exitCode, QProcess.ExitStatus exitStatus);
		[Q_SIGNAL("void error(QProcess::ProcessError)")]
		void Error(QProcess.ProcessError error);
		[Q_SIGNAL("void stateChanged(QProcess::ProcessState)")]
		void StateChanged(QProcess.ProcessState state);
		[Q_SIGNAL("void readyReadStandardOutput()")]
		void ReadyReadStandardOutput();
		[Q_SIGNAL("void readyReadStandardError()")]
		void ReadyReadStandardError();
	}
}
