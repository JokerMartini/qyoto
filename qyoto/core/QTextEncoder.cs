//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QTextEncoder")]
	public class QTextEncoder : MarshalByRefObject, IDisposable {
		protected QTextEncoder interceptor = null;
		private IntPtr smokeObject;
		protected QTextEncoder(Type dummy) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTextEncoder), this);
			interceptor = (QTextEncoder) realProxy.GetTransparentProxy();
		}
		public QTextEncoder(QTextCodec codec) : this((Type) null) {
			CreateProxy();
			NewQTextEncoder(codec);
		}
		[SmokeMethod("QTextEncoder", "(const QTextCodec*)", "#")]
		private void NewQTextEncoder(QTextCodec codec) {
			((QTextEncoder) interceptor).NewQTextEncoder(codec);
		}
		[SmokeMethod("fromUnicode", "(const QString&)", "$")]
		public QByteArray FromUnicode(string str) {
			return ((QTextEncoder) interceptor).FromUnicode(str);
		}
		[SmokeMethod("fromUnicode", "(const QChar*, int)", "#$")]
		public QByteArray FromUnicode(char uc, int len) {
			return ((QTextEncoder) interceptor).FromUnicode(uc,len);
		}
		~QTextEncoder() {
			DisposeQTextEncoder();
		}
		public void Dispose() {
			DisposeQTextEncoder();
		}
		[SmokeMethod("~QTextEncoder", "()", "")]
		private void DisposeQTextEncoder() {
			((QTextEncoder) interceptor).DisposeQTextEncoder();
		}
	}
}
