//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	[SmokeClass("QAbstractFileEngine")]
	public abstract class QAbstractFileEngine : MarshalByRefObject, IDisposable {
		protected QAbstractFileEngine interceptor = null;
		private IntPtr smokeObject;
		protected QAbstractFileEngine(Type dummy) {}
		[SmokeClass("QAbstractFileEngine")]
		interface IQAbstractFileEngineProxy {
			[SmokeMethod("create", "(const QString&)", "$")]
			QAbstractFileEngine Create(string fileName);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QAbstractFileEngine), this);
			interceptor = (QAbstractFileEngine) realProxy.GetTransparentProxy();
		}
		private static IQAbstractFileEngineProxy staticInterceptor = null;
		static QAbstractFileEngine() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQAbstractFileEngineProxy), null);
			staticInterceptor = (IQAbstractFileEngineProxy) realProxy.GetTransparentProxy();
		}
		public enum FileFlag {
			ReadOwnerPerm = 0x4000,
			WriteOwnerPerm = 0x2000,
			ExeOwnerPerm = 0x1000,
			ReadUserPerm = 0x0400,
			WriteUserPerm = 0x0200,
			ExeUserPerm = 0x0100,
			ReadGroupPerm = 0x0040,
			WriteGroupPerm = 0x0020,
			ExeGroupPerm = 0x0010,
			ReadOtherPerm = 0x0004,
			WriteOtherPerm = 0x0002,
			ExeOtherPerm = 0x0001,
			LinkType = 0x10000,
			FileType = 0x20000,
			DirectoryType = 0x40000,
			HiddenFlag = 0x0100000,
			LocalDiskFlag = 0x0200000,
			ExistsFlag = 0x0400000,
			RootFlag = 0x0800000,
			PermsMask = 0x0000FFFF,
			TypesMask = 0x000F0000,
			FlagsMask = 0x0FF00000,
			FileInfoAll = FlagsMask|PermsMask|TypesMask,
		}
		public enum FileName {
			DefaultName = 0,
			BaseName = 1,
			PathName = 2,
			AbsoluteName = 3,
			AbsolutePathName = 4,
			LinkName = 5,
			CanonicalName = 6,
			CanonicalPathName = 7,
		}
		public enum FileOwner {
			OwnerUser = 0,
			OwnerGroup = 1,
		}
		public enum FileTime {
			CreationTime = 0,
			ModificationTime = 1,
			AccessTime = 2,
		}
		public enum Extension {
		}
		// QAbstractFileEngine::Iterator* beginEntryList(QDir::Filters arg1,const QStringList& arg2); >>>> NOT CONVERTED
		// QAbstractFileEngine::Iterator* endEntryList(); >>>> NOT CONVERTED
		// bool extension(QAbstractFileEngine::Extension arg1,const QAbstractFileEngine::ExtensionOption* arg2,QAbstractFileEngine::ExtensionReturn* arg3); >>>> NOT CONVERTED
		// bool extension(QAbstractFileEngine::Extension arg1,const QAbstractFileEngine::ExtensionOption* arg2); >>>> NOT CONVERTED
		// QAbstractFileEngine* QAbstractFileEngine(QAbstractFileEnginePrivate& arg1); >>>> NOT CONVERTED
		[SmokeMethod("open", "(QIODevice::OpenMode)", "$")]
		public virtual bool Open(int openMode) {
			return ((QAbstractFileEngine) interceptor).Open(openMode);
		}
		[SmokeMethod("close", "()", "")]
		public virtual bool Close() {
			return ((QAbstractFileEngine) interceptor).Close();
		}
		[SmokeMethod("flush", "()", "")]
		public virtual bool Flush() {
			return ((QAbstractFileEngine) interceptor).Flush();
		}
		[SmokeMethod("size", "() const", "")]
		public virtual long Size() {
			return ((QAbstractFileEngine) interceptor).Size();
		}
		[SmokeMethod("pos", "() const", "")]
		public virtual long Pos() {
			return ((QAbstractFileEngine) interceptor).Pos();
		}
		[SmokeMethod("seek", "(qint64)", "$")]
		public virtual bool Seek(long pos) {
			return ((QAbstractFileEngine) interceptor).Seek(pos);
		}
		[SmokeMethod("isSequential", "() const", "")]
		public virtual bool IsSequential() {
			return ((QAbstractFileEngine) interceptor).IsSequential();
		}
		[SmokeMethod("remove", "()", "")]
		public virtual bool Remove() {
			return ((QAbstractFileEngine) interceptor).Remove();
		}
		[SmokeMethod("copy", "(const QString&)", "$")]
		public virtual bool Copy(string newName) {
			return ((QAbstractFileEngine) interceptor).Copy(newName);
		}
		[SmokeMethod("rename", "(const QString&)", "$")]
		public virtual bool Rename(string newName) {
			return ((QAbstractFileEngine) interceptor).Rename(newName);
		}
		[SmokeMethod("link", "(const QString&)", "$")]
		public virtual bool Link(string newName) {
			return ((QAbstractFileEngine) interceptor).Link(newName);
		}
		[SmokeMethod("mkdir", "(const QString&, bool) const", "$$")]
		public virtual bool Mkdir(string dirName, bool createParentDirectories) {
			return ((QAbstractFileEngine) interceptor).Mkdir(dirName,createParentDirectories);
		}
		[SmokeMethod("rmdir", "(const QString&, bool) const", "$$")]
		public virtual bool Rmdir(string dirName, bool recurseParentDirectories) {
			return ((QAbstractFileEngine) interceptor).Rmdir(dirName,recurseParentDirectories);
		}
		[SmokeMethod("setSize", "(qint64)", "$")]
		public virtual bool SetSize(long size) {
			return ((QAbstractFileEngine) interceptor).SetSize(size);
		}
		[SmokeMethod("caseSensitive", "() const", "")]
		public virtual bool CaseSensitive() {
			return ((QAbstractFileEngine) interceptor).CaseSensitive();
		}
		[SmokeMethod("isRelativePath", "() const", "")]
		public virtual bool IsRelativePath() {
			return ((QAbstractFileEngine) interceptor).IsRelativePath();
		}
		[SmokeMethod("entryList", "(QDir::Filters, const QStringList&) const", "$?")]
		public virtual List<string> EntryList(int filters, List<string> filterNames) {
			return ((QAbstractFileEngine) interceptor).EntryList(filters,filterNames);
		}
		[SmokeMethod("fileFlags", "(FileFlags) const", "$")]
		public virtual int FileFlags(int type) {
			return ((QAbstractFileEngine) interceptor).FileFlags(type);
		}
		[SmokeMethod("fileFlags", "() const", "")]
		public virtual int FileFlags() {
			return ((QAbstractFileEngine) interceptor).FileFlags();
		}
		[SmokeMethod("setPermissions", "(uint)", "$")]
		public virtual bool SetPermissions(uint perms) {
			return ((QAbstractFileEngine) interceptor).SetPermissions(perms);
		}
		[SmokeMethod("fileName", "(QAbstractFileEngine::FileName) const", "$")]
		public virtual string fileName(QAbstractFileEngine.FileName file) {
			return ((QAbstractFileEngine) interceptor).fileName(file);
		}
		[SmokeMethod("fileName", "() const", "")]
		public virtual string fileName() {
			return ((QAbstractFileEngine) interceptor).fileName();
		}
		[SmokeMethod("ownerId", "(QAbstractFileEngine::FileOwner) const", "$")]
		public virtual uint OwnerId(QAbstractFileEngine.FileOwner arg1) {
			return ((QAbstractFileEngine) interceptor).OwnerId(arg1);
		}
		[SmokeMethod("owner", "(QAbstractFileEngine::FileOwner) const", "$")]
		public virtual string Owner(QAbstractFileEngine.FileOwner arg1) {
			return ((QAbstractFileEngine) interceptor).Owner(arg1);
		}
		[SmokeMethod("fileTime", "(QAbstractFileEngine::FileTime) const", "$")]
		public virtual QDateTime fileTime(QAbstractFileEngine.FileTime time) {
			return ((QAbstractFileEngine) interceptor).fileTime(time);
		}
		[SmokeMethod("setFileName", "(const QString&)", "$")]
		public virtual void SetFileName(string file) {
			((QAbstractFileEngine) interceptor).SetFileName(file);
		}
		[SmokeMethod("read", "(char*, qint64)", "$$")]
		public virtual long Read(string data, long maxlen) {
			return ((QAbstractFileEngine) interceptor).Read(data,maxlen);
		}
		[SmokeMethod("readLine", "(char*, qint64)", "$$")]
		public virtual long ReadLine(string data, long maxlen) {
			return ((QAbstractFileEngine) interceptor).ReadLine(data,maxlen);
		}
		[SmokeMethod("write", "(const char*, qint64)", "$$")]
		public virtual long Write(string data, long len) {
			return ((QAbstractFileEngine) interceptor).Write(data,len);
		}
		[SmokeMethod("error", "() const", "")]
		public QFile.FileError Error() {
			return ((QAbstractFileEngine) interceptor).Error();
		}
		[SmokeMethod("errorString", "() const", "")]
		public string ErrorString() {
			return ((QAbstractFileEngine) interceptor).ErrorString();
		}
		[SmokeMethod("extension", "(QAbstractFileEngine::Extension)", "$")]
		public virtual bool extension(QAbstractFileEngine.Extension extension) {
			return ((QAbstractFileEngine) interceptor).extension(extension);
		}
		[SmokeMethod("supportsExtension", "(QAbstractFileEngine::Extension) const", "$")]
		public virtual bool SupportsExtension(QAbstractFileEngine.Extension extension) {
			return ((QAbstractFileEngine) interceptor).SupportsExtension(extension);
		}
		[SmokeMethod("setError", "(QFile::FileError, const QString&)", "$$")]
		protected void SetError(QFile.FileError error, string str) {
			((QAbstractFileEngine) interceptor).SetError(error,str);
		}
		public QAbstractFileEngine() : this((Type) null) {
			CreateProxy();
			NewQAbstractFileEngine();
		}
		[SmokeMethod("QAbstractFileEngine", "()", "")]
		private void NewQAbstractFileEngine() {
			((QAbstractFileEngine) interceptor).NewQAbstractFileEngine();
		}
		~QAbstractFileEngine() {
			DisposeQAbstractFileEngine();
		}
		public void Dispose() {
			DisposeQAbstractFileEngine();
		}
		[SmokeMethod("~QAbstractFileEngine", "()", "")]
		private void DisposeQAbstractFileEngine() {
			((QAbstractFileEngine) interceptor).DisposeQAbstractFileEngine();
		}
		public static QAbstractFileEngine Create(string fileName) {
			return staticInterceptor.Create(fileName);
		}
	}
}
