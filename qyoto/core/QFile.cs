//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QFile")]
	public class QFile : QIODevice, IDisposable {
 		protected QFile(Type dummy) : base((Type) null) {}
		[SmokeClass("QFile")]
		interface IQFileProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
			[SmokeMethod("encodeName", "(const QString&)", "$")]
			QByteArray EncodeName(string fileName);
			[SmokeMethod("decodeName", "(const QByteArray&)", "#")]
			string DecodeName(QByteArray localFileName);
			[SmokeMethod("decodeName", "(const char*)", "$")]
			string DecodeName(string localFileName);
			[SmokeMethod("exists", "(const QString&)", "$")]
			bool Exists(string fileName);
			[SmokeMethod("readLink", "(const QString&)", "$")]
			string ReadLink(string fileName);
			[SmokeMethod("symLinkTarget", "(const QString&)", "$")]
			string SymLinkTarget(string fileName);
			[SmokeMethod("remove", "(const QString&)", "$")]
			bool Remove(string fileName);
			[SmokeMethod("rename", "(const QString&, const QString&)", "$$")]
			bool Rename(string oldName, string newName);
			[SmokeMethod("link", "(const QString&, const QString&)", "$$")]
			bool Link(string oldname, string newName);
			[SmokeMethod("copy", "(const QString&, const QString&)", "$$")]
			bool Copy(string fileName, string newName);
			[SmokeMethod("resize", "(const QString&, qint64)", "$$")]
			bool Resize(string filename, long sz);
			[SmokeMethod("permissions", "(const QString&)", "$")]
			int Permissions(string filename);
			[SmokeMethod("setPermissions", "(const QString&, Permissions)", "$$")]
			bool SetPermissions(string filename, int permissionSpec);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QFile), this);
			interceptor = (QFile) realProxy.GetTransparentProxy();
		}
		private static IQFileProxy staticInterceptor = null;
		static QFile() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQFileProxy), null);
			staticInterceptor = (IQFileProxy) realProxy.GetTransparentProxy();
		}
		public enum FileError {
			NoError = 0,
			ReadError = 1,
			WriteError = 2,
			FatalError = 3,
			ResourceError = 4,
			OpenError = 5,
			AbortError = 6,
			TimeOutError = 7,
			UnspecifiedError = 8,
			RemoveError = 9,
			RenameError = 10,
			PositionError = 11,
			ResizeError = 12,
			PermissionsError = 13,
			CopyError = 14,
		}
		public enum Permission {
			ReadOwner = 0x4000,
			WriteOwner = 0x2000,
			ExeOwner = 0x1000,
			ReadUser = 0x0400,
			WriteUser = 0x0200,
			ExeUser = 0x0100,
			ReadGroup = 0x0040,
			WriteGroup = 0x0020,
			ExeGroup = 0x0010,
			ReadOther = 0x0004,
			WriteOther = 0x0002,
			ExeOther = 0x0001,
		}
		public QFile() : this((Type) null) {
			CreateProxy();
			NewQFile();
		}
		[SmokeMethod("QFile", "()", "")]
		private void NewQFile() {
			((QFile) interceptor).NewQFile();
		}
		public QFile(string name) : this((Type) null) {
			CreateProxy();
			NewQFile(name);
		}
		[SmokeMethod("QFile", "(const QString&)", "$")]
		private void NewQFile(string name) {
			((QFile) interceptor).NewQFile(name);
		}
		public QFile(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQFile(parent);
		}
		[SmokeMethod("QFile", "(QObject*)", "#")]
		private void NewQFile(QObject parent) {
			((QFile) interceptor).NewQFile(parent);
		}
		public QFile(string name, QObject parent) : this((Type) null) {
			CreateProxy();
			NewQFile(name,parent);
		}
		[SmokeMethod("QFile", "(const QString&, QObject*)", "$#")]
		private void NewQFile(string name, QObject parent) {
			((QFile) interceptor).NewQFile(name,parent);
		}
		[SmokeMethod("error", "() const", "")]
		public QFile.FileError Error() {
			return ((QFile) interceptor).Error();
		}
		[SmokeMethod("unsetError", "()", "")]
		public void UnsetError() {
			((QFile) interceptor).UnsetError();
		}
		[SmokeMethod("fileName", "() const", "")]
		public string FileName() {
			return ((QFile) interceptor).FileName();
		}
		[SmokeMethod("setFileName", "(const QString&)", "$")]
		public void SetFileName(string name) {
			((QFile) interceptor).SetFileName(name);
		}
		[SmokeMethod("exists", "() const", "")]
		public bool Exists() {
			return ((QFile) interceptor).Exists();
		}
		[SmokeMethod("readLink", "() const", "")]
		public string ReadLink() {
			return ((QFile) interceptor).ReadLink();
		}
		[SmokeMethod("symLinkTarget", "() const", "")]
		public string SymLinkTarget() {
			return ((QFile) interceptor).SymLinkTarget();
		}
		[SmokeMethod("remove", "()", "")]
		public bool Remove() {
			return ((QFile) interceptor).Remove();
		}
		[SmokeMethod("rename", "(const QString&)", "$")]
		public bool Rename(string newName) {
			return ((QFile) interceptor).Rename(newName);
		}
		[SmokeMethod("link", "(const QString&)", "$")]
		public bool Link(string newName) {
			return ((QFile) interceptor).Link(newName);
		}
		[SmokeMethod("copy", "(const QString&)", "$")]
		public bool Copy(string newName) {
			return ((QFile) interceptor).Copy(newName);
		}
		[SmokeMethod("isSequential", "() const", "")]
		public override bool IsSequential() {
			return ((QFile) interceptor).IsSequential();
		}
		[SmokeMethod("open", "(OpenMode)", "$")]
		public override bool Open(int flags) {
			return ((QFile) interceptor).Open(flags);
		}
		[SmokeMethod("open", "(int, OpenMode)", "$$")]
		public bool Open(int fd, int flags) {
			return ((QFile) interceptor).Open(fd,flags);
		}
		[SmokeMethod("close", "()", "")]
		public override void Close() {
			((QFile) interceptor).Close();
		}
		[SmokeMethod("size", "() const", "")]
		public override long Size() {
			return ((QFile) interceptor).Size();
		}
		[SmokeMethod("pos", "() const", "")]
		public override long Pos() {
			return ((QFile) interceptor).Pos();
		}
		[SmokeMethod("seek", "(qint64)", "$")]
		public override bool Seek(long offset) {
			return ((QFile) interceptor).Seek(offset);
		}
		[SmokeMethod("atEnd", "() const", "")]
		public override bool AtEnd() {
			return ((QFile) interceptor).AtEnd();
		}
		[SmokeMethod("flush", "()", "")]
		public bool Flush() {
			return ((QFile) interceptor).Flush();
		}
		[SmokeMethod("resize", "(qint64)", "$")]
		public bool Resize(long sz) {
			return ((QFile) interceptor).Resize(sz);
		}
		[SmokeMethod("permissions", "() const", "")]
		public int Permissions() {
			return ((QFile) interceptor).Permissions();
		}
		[SmokeMethod("setPermissions", "(Permissions)", "$")]
		public bool SetPermissions(int permissionSpec) {
			return ((QFile) interceptor).SetPermissions(permissionSpec);
		}
		[SmokeMethod("fileEngine", "() const", "")]
		public virtual QAbstractFileEngine FileEngine() {
			return ((QFile) interceptor).FileEngine();
		}
		[SmokeMethod("readData", "(char*, qint64)", "$$")]
		protected override long ReadData(string data, long maxlen) {
			return ((QFile) interceptor).ReadData(data,maxlen);
		}
		[SmokeMethod("writeData", "(const char*, qint64)", "$$")]
		protected override long WriteData(string data, long len) {
			return ((QFile) interceptor).WriteData(data,len);
		}
		[SmokeMethod("readLineData", "(char*, qint64)", "$$")]
		protected override long ReadLineData(string data, long maxlen) {
			return ((QFile) interceptor).ReadLineData(data,maxlen);
		}
		~QFile() {
			DisposeQFile();
		}
		public new void Dispose() {
			DisposeQFile();
		}
		[SmokeMethod("~QFile", "()", "")]
		private void DisposeQFile() {
			((QFile) interceptor).DisposeQFile();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		public static QByteArray EncodeName(string fileName) {
			return staticInterceptor.EncodeName(fileName);
		}
		public static string DecodeName(QByteArray localFileName) {
			return staticInterceptor.DecodeName(localFileName);
		}
		public static string DecodeName(string localFileName) {
			return staticInterceptor.DecodeName(localFileName);
		}
		public static bool Exists(string fileName) {
			return staticInterceptor.Exists(fileName);
		}
		public static string ReadLink(string fileName) {
			return staticInterceptor.ReadLink(fileName);
		}
		public static string SymLinkTarget(string fileName) {
			return staticInterceptor.SymLinkTarget(fileName);
		}
		public static bool Remove(string fileName) {
			return staticInterceptor.Remove(fileName);
		}
		public static bool Rename(string oldName, string newName) {
			return staticInterceptor.Rename(oldName,newName);
		}
		public static bool Link(string oldname, string newName) {
			return staticInterceptor.Link(oldname,newName);
		}
		public static bool Copy(string fileName, string newName) {
			return staticInterceptor.Copy(fileName,newName);
		}
		public static bool Resize(string filename, long sz) {
			return staticInterceptor.Resize(filename,sz);
		}
		public static int Permissions(string filename) {
			return staticInterceptor.Permissions(filename);
		}
		public static bool SetPermissions(string filename, int permissionSpec) {
			return staticInterceptor.SetPermissions(filename,permissionSpec);
		}
		protected new IQFileSignals Emit {
			get { return (IQFileSignals) Q_EMIT; }
		}
	}

	public interface IQFileSignals : IQIODeviceSignals {
	}
}
