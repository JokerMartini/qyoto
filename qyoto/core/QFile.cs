//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;

	[SmokeClass("QFile")]
	public class QFile : QIODevice, IDisposable {
 		protected QFile(Type dummy) : base((Type) null) {}
		interface IQFileProxy {
			[SmokeMethod("tr$$", "(const char*, const char*)")]
			string Tr(string s, string c);
			[SmokeMethod("tr$", "(const char*)")]
			string Tr(string s);
			[SmokeMethod("encodeName$", "(const QString&)")]
			QByteArray EncodeName(string fileName);
			[SmokeMethod("decodeName#", "(const QByteArray&)")]
			string DecodeName(QByteArray localFileName);
			[SmokeMethod("decodeName$", "(const char*)")]
			string DecodeName(string localFileName);
			[SmokeMethod("exists$", "(const QString&)")]
			bool Exists(string fileName);
			[SmokeMethod("readLink$", "(const QString&)")]
			string ReadLink(string fileName);
			[SmokeMethod("symLinkTarget$", "(const QString&)")]
			string SymLinkTarget(string fileName);
			[SmokeMethod("remove$", "(const QString&)")]
			bool Remove(string fileName);
			[SmokeMethod("rename$$", "(const QString&, const QString&)")]
			bool Rename(string oldName, string newName);
			[SmokeMethod("link$$", "(const QString&, const QString&)")]
			bool Link(string oldname, string newName);
			[SmokeMethod("copy$$", "(const QString&, const QString&)")]
			bool Copy(string fileName, string newName);
			[SmokeMethod("resize$$", "(const QString&, qint64)")]
			bool Resize(string filename, long sz);
			[SmokeMethod("permissions$", "(const QString&)")]
			int Permissions(string filename);
			[SmokeMethod("setPermissions$$", "(const QString&, Permissions)")]
			bool SetPermissions(string filename, int permissionSpec);
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QFile), this);
			_interceptor = (QFile) realProxy.GetTransparentProxy();
		}
		private QFile ProxyQFile() {
			return (QFile) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QFile() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQFileProxy), null);
			_staticInterceptor = (IQFileProxy) realProxy.GetTransparentProxy();
		}
		private static IQFileProxy StaticQFile() {
			return (IQFileProxy) _staticInterceptor;
		}

		public enum FileError {
			NoError = 0,
			ReadError = 1,
			WriteError = 2,
			FatalError = 3,
			ResourceError = 4,
			OpenError = 5,
			AbortError = 6,
			TimeOutError = 7,
			UnspecifiedError = 8,
			RemoveError = 9,
			RenameError = 10,
			PositionError = 11,
			ResizeError = 12,
			PermissionsError = 13,
			CopyError = 14,
		}
		public enum Permission {
			ReadOwner = 0x4000,
			WriteOwner = 0x2000,
			ExeOwner = 0x1000,
			ReadUser = 0x0400,
			WriteUser = 0x0200,
			ExeUser = 0x0100,
			ReadGroup = 0x0040,
			WriteGroup = 0x0020,
			ExeGroup = 0x0010,
			ReadOther = 0x0004,
			WriteOther = 0x0002,
			ExeOther = 0x0001,
		}
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QFile() : this((Type) null) {
			CreateProxy();
			NewQFile();
		}
		[SmokeMethod("QFile", "()")]
		private void NewQFile() {
			ProxyQFile().NewQFile();
		}
		public QFile(string name) : this((Type) null) {
			CreateProxy();
			NewQFile(name);
		}
		[SmokeMethod("QFile$", "(const QString&)")]
		private void NewQFile(string name) {
			ProxyQFile().NewQFile(name);
		}
		public QFile(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQFile(parent);
		}
		[SmokeMethod("QFile#", "(QObject*)")]
		private void NewQFile(QObject parent) {
			ProxyQFile().NewQFile(parent);
		}
		public QFile(string name, QObject parent) : this((Type) null) {
			CreateProxy();
			NewQFile(name,parent);
		}
		[SmokeMethod("QFile$#", "(const QString&, QObject*)")]
		private void NewQFile(string name, QObject parent) {
			ProxyQFile().NewQFile(name,parent);
		}
		[SmokeMethod("error", "() const")]
		public QFile.FileError Error() {
			return ProxyQFile().Error();
		}
		[SmokeMethod("unsetError", "()")]
		public void UnsetError() {
			ProxyQFile().UnsetError();
		}
		[SmokeMethod("fileName", "() const")]
		public string FileName() {
			return ProxyQFile().FileName();
		}
		[SmokeMethod("setFileName$", "(const QString&)")]
		public void SetFileName(string name) {
			ProxyQFile().SetFileName(name);
		}
		[SmokeMethod("exists", "() const")]
		public bool Exists() {
			return ProxyQFile().Exists();
		}
		[SmokeMethod("readLink", "() const")]
		public string ReadLink() {
			return ProxyQFile().ReadLink();
		}
		[SmokeMethod("symLinkTarget", "() const")]
		public string SymLinkTarget() {
			return ProxyQFile().SymLinkTarget();
		}
		[SmokeMethod("remove", "()")]
		public bool Remove() {
			return ProxyQFile().Remove();
		}
		[SmokeMethod("rename$", "(const QString&)")]
		public bool Rename(string newName) {
			return ProxyQFile().Rename(newName);
		}
		[SmokeMethod("link$", "(const QString&)")]
		public bool Link(string newName) {
			return ProxyQFile().Link(newName);
		}
		[SmokeMethod("copy$", "(const QString&)")]
		public bool Copy(string newName) {
			return ProxyQFile().Copy(newName);
		}
		[SmokeMethod("isSequential", "() const")]
		public new bool IsSequential() {
			return ProxyQFile().IsSequential();
		}
		[SmokeMethod("open$", "(OpenMode)")]
		public new bool Open(int flags) {
			return ProxyQFile().Open(flags);
		}
		[SmokeMethod("open$$", "(int, OpenMode)")]
		public new bool Open(int fd, int flags) {
			return ProxyQFile().Open(fd,flags);
		}
		[SmokeMethod("close", "()")]
		public new virtual void Close() {
			ProxyQFile().Close();
		}
		[SmokeMethod("size", "() const")]
		public new long Size() {
			return ProxyQFile().Size();
		}
		[SmokeMethod("pos", "() const")]
		public new long Pos() {
			return ProxyQFile().Pos();
		}
		[SmokeMethod("seek$", "(qint64)")]
		public new bool Seek(long offset) {
			return ProxyQFile().Seek(offset);
		}
		[SmokeMethod("atEnd", "() const")]
		public new bool AtEnd() {
			return ProxyQFile().AtEnd();
		}
		[SmokeMethod("flush", "()")]
		public bool Flush() {
			return ProxyQFile().Flush();
		}
		[SmokeMethod("resize$", "(qint64)")]
		public bool Resize(long sz) {
			return ProxyQFile().Resize(sz);
		}
		[SmokeMethod("permissions", "() const")]
		public int Permissions() {
			return ProxyQFile().Permissions();
		}
		[SmokeMethod("setPermissions$", "(Permissions)")]
		public bool SetPermissions(int permissionSpec) {
			return ProxyQFile().SetPermissions(permissionSpec);
		}
		[SmokeMethod("fileEngine", "() const")]
		public virtual QAbstractFileEngine FileEngine() {
			return ProxyQFile().FileEngine();
		}
		public static new string Tr(string s, string c) {
			return StaticQFile().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQFile().Tr(s);
		}
		public static QByteArray EncodeName(string fileName) {
			return StaticQFile().EncodeName(fileName);
		}
		public static string DecodeName(QByteArray localFileName) {
			return StaticQFile().DecodeName(localFileName);
		}
		public static string DecodeName(string localFileName) {
			return StaticQFile().DecodeName(localFileName);
		}
		public static bool Exists(string fileName) {
			return StaticQFile().Exists(fileName);
		}
		public static string ReadLink(string fileName) {
			return StaticQFile().ReadLink(fileName);
		}
		public static string SymLinkTarget(string fileName) {
			return StaticQFile().SymLinkTarget(fileName);
		}
		public static bool Remove(string fileName) {
			return StaticQFile().Remove(fileName);
		}
		public static bool Rename(string oldName, string newName) {
			return StaticQFile().Rename(oldName,newName);
		}
		public static bool Link(string oldname, string newName) {
			return StaticQFile().Link(oldname,newName);
		}
		public static bool Copy(string fileName, string newName) {
			return StaticQFile().Copy(fileName,newName);
		}
		public static bool Resize(string filename, long sz) {
			return StaticQFile().Resize(filename,sz);
		}
		public static int Permissions(string filename) {
			return StaticQFile().Permissions(filename);
		}
		public static bool SetPermissions(string filename, int permissionSpec) {
			return StaticQFile().SetPermissions(filename,permissionSpec);
		}
		[SmokeMethod("readData$$", "(char*, qint64)")]
		protected new long ReadData(string data, long maxlen) {
			return ProxyQFile().ReadData(data,maxlen);
		}
		[SmokeMethod("writeData$$", "(const char*, qint64)")]
		protected new long WriteData(string data, long len) {
			return ProxyQFile().WriteData(data,len);
		}
		[SmokeMethod("readLineData$$", "(char*, qint64)")]
		protected new long ReadLineData(string data, long maxlen) {
			return ProxyQFile().ReadLineData(data,maxlen);
		}
		~QFile() {
			DisposeQFile();
		}
		public void Dispose() {
			DisposeQFile();
		}
		[SmokeMethod("~QFile", "()")]
		private void DisposeQFile() {
			ProxyQFile().DisposeQFile();
		}
		protected new IQFileSignals Emit {
			get {
				return (IQFileSignals) Q_EMIT;
			}
		}
	}

	public interface IQFileSignals : IQIODeviceSignals {
	}
}
