//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	public interface IQUrl {
		void SetUrl(string url);
		void SetUrl(string url, QUrl.ParsingMode mode);
		void SetEncodedUrl(QByteArray url);
		void SetEncodedUrl(QByteArray url, QUrl.ParsingMode mode);
		bool IsValid();
		bool IsEmpty();
		void Clear();
		void SetScheme(string scheme);
		string Scheme();
		void SetAuthority(string authority);
		string Authority();
		void SetUserInfo(string userInfo);
		string UserInfo();
		void SetUserName(string userName);
		string UserName();
		void SetPassword(string password);
		string Password();
		void SetHost(string host);
		string Host();
		void SetPort(int port);
		int Port();
		int Port(int defaultPort);
		void SetPath(string path);
		string Path();
		bool HasQuery();
		void SetEncodedQuery(QByteArray query);
		QByteArray EncodedQuery();
		void SetQueryDelimiters(char valueDelimiter, char pairDelimiter);
		char QueryValueDelimiter();
		char QueryPairDelimiter();
		void SetQueryItems(List<QPair<string, string>> query);
		void AddQueryItem(string key, string value);
		List<QPair<string, string>> QueryItems();
		bool HasQueryItem(string key);
		string QueryItemValue(string key);
		List<string> AllQueryItemValues(string key);
		void RemoveQueryItem(string key);
		void RemoveAllQueryItems(string key);
		void SetFragment(string fragment);
		string Fragment();
		bool HasFragment();
		IQUrl Resolved(IQUrl relative);
		bool IsRelative();
		bool IsParentOf(IQUrl url);
		string ToLocalFile();
		string ToString(int options);
		string ToString();
		QByteArray ToEncoded(int options);
		QByteArray ToEncoded();
		void Detach();
		bool IsDetached();
		string ErrorString();
	}

	[SmokeClass("QUrl")]
	public class QUrl : MarshalByRefObject, IQUrl, IDisposable {
		protected QUrl interceptor = null;
		private IntPtr smokeObject;
		protected QUrl(Type dummy) {}
		[SmokeClass("QUrl")]
		interface IQUrlProxy {
			[SmokeMethod("fromLocalFile", "(const QString&)", "$")]
			IQUrl FromLocalFile(string localfile);
			[SmokeMethod("fromEncoded", "(const QByteArray&)", "#")]
			IQUrl FromEncoded(QByteArray url);
			[SmokeMethod("fromEncoded", "(const QByteArray&, QUrl::ParsingMode)", "#$")]
			IQUrl FromEncoded(QByteArray url, QUrl.ParsingMode mode);
			[SmokeMethod("fromPercentEncoding", "(const QByteArray&)", "#")]
			string FromPercentEncoding(QByteArray arg1);
			[SmokeMethod("toPercentEncoding", "(const QString&, const QByteArray&, const QByteArray&)", "$##")]
			QByteArray ToPercentEncoding(string arg1, QByteArray exclude, QByteArray include);
			[SmokeMethod("toPercentEncoding", "(const QString&, const QByteArray&)", "$#")]
			QByteArray ToPercentEncoding(string arg1, QByteArray exclude);
			[SmokeMethod("toPercentEncoding", "(const QString&)", "$")]
			QByteArray ToPercentEncoding(string arg1);
			[SmokeMethod("fromPunycode", "(const QByteArray&)", "#")]
			string FromPunycode(QByteArray arg1);
			[SmokeMethod("toPunycode", "(const QString&)", "$")]
			QByteArray ToPunycode(string arg1);
			[SmokeMethod("fromAce", "(const QByteArray&)", "#")]
			string FromAce(QByteArray arg1);
			[SmokeMethod("toAce", "(const QString&)", "$")]
			QByteArray ToAce(string arg1);
			[SmokeMethod("idnWhitelist", "()", "")]
			List<string> IdnWhitelist();
			[SmokeMethod("setIdnWhitelist", "(const QStringList&)", "?")]
			void SetIdnWhitelist(List<string> arg1);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QUrl), this);
			interceptor = (QUrl) realProxy.GetTransparentProxy();
		}
		private static IQUrlProxy staticInterceptor = null;
		static QUrl() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQUrlProxy), null);
			staticInterceptor = (IQUrlProxy) realProxy.GetTransparentProxy();
		}
		public enum ParsingMode {
			TolerantMode = 0,
			StrictMode = 1,
		}
		public enum FormattingOption {
			None = 0x0,
			RemoveScheme = 0x1,
			RemovePassword = 0x2,
			RemoveUserInfo = RemovePassword|0x4,
			RemovePort = 0x8,
			RemoveAuthority = RemoveUserInfo|RemovePort|0x10,
			RemovePath = 0x20,
			RemoveQuery = 0x40,
			RemoveFragment = 0x80,
			StripTrailingSlash = 0x10000,
		}
		public QUrl() : this((Type) null) {
			CreateProxy();
			NewQUrl();
		}
		[SmokeMethod("QUrl", "()", "")]
		private void NewQUrl() {
			((QUrl) interceptor).NewQUrl();
		}
		public QUrl(string url) : this((Type) null) {
			CreateProxy();
			NewQUrl(url);
		}
		[SmokeMethod("QUrl", "(const QString&)", "$")]
		private void NewQUrl(string url) {
			((QUrl) interceptor).NewQUrl(url);
		}
		public QUrl(string url, QUrl.ParsingMode mode) : this((Type) null) {
			CreateProxy();
			NewQUrl(url,mode);
		}
		[SmokeMethod("QUrl", "(const QString&, QUrl::ParsingMode)", "$$")]
		private void NewQUrl(string url, QUrl.ParsingMode mode) {
			((QUrl) interceptor).NewQUrl(url,mode);
		}
		public QUrl(IQUrl copy) : this((Type) null) {
			CreateProxy();
			NewQUrl(copy);
		}
		[SmokeMethod("QUrl", "(const QUrl&)", "#")]
		private void NewQUrl(IQUrl copy) {
			((QUrl) interceptor).NewQUrl(copy);
		}
		[SmokeMethod("setUrl", "(const QString&)", "$")]
		public void SetUrl(string url) {
			((QUrl) interceptor).SetUrl(url);
		}
		[SmokeMethod("setUrl", "(const QString&, QUrl::ParsingMode)", "$$")]
		public void SetUrl(string url, QUrl.ParsingMode mode) {
			((QUrl) interceptor).SetUrl(url,mode);
		}
		[SmokeMethod("setEncodedUrl", "(const QByteArray&)", "#")]
		public void SetEncodedUrl(QByteArray url) {
			((QUrl) interceptor).SetEncodedUrl(url);
		}
		[SmokeMethod("setEncodedUrl", "(const QByteArray&, QUrl::ParsingMode)", "#$")]
		public void SetEncodedUrl(QByteArray url, QUrl.ParsingMode mode) {
			((QUrl) interceptor).SetEncodedUrl(url,mode);
		}
		[SmokeMethod("isValid", "() const", "")]
		public bool IsValid() {
			return ((QUrl) interceptor).IsValid();
		}
		[SmokeMethod("isEmpty", "() const", "")]
		public bool IsEmpty() {
			return ((QUrl) interceptor).IsEmpty();
		}
		[SmokeMethod("clear", "()", "")]
		public void Clear() {
			((QUrl) interceptor).Clear();
		}
		[SmokeMethod("setScheme", "(const QString&)", "$")]
		public void SetScheme(string scheme) {
			((QUrl) interceptor).SetScheme(scheme);
		}
		[SmokeMethod("scheme", "() const", "")]
		public string Scheme() {
			return ((QUrl) interceptor).Scheme();
		}
		[SmokeMethod("setAuthority", "(const QString&)", "$")]
		public void SetAuthority(string authority) {
			((QUrl) interceptor).SetAuthority(authority);
		}
		[SmokeMethod("authority", "() const", "")]
		public string Authority() {
			return ((QUrl) interceptor).Authority();
		}
		[SmokeMethod("setUserInfo", "(const QString&)", "$")]
		public void SetUserInfo(string userInfo) {
			((QUrl) interceptor).SetUserInfo(userInfo);
		}
		[SmokeMethod("userInfo", "() const", "")]
		public string UserInfo() {
			return ((QUrl) interceptor).UserInfo();
		}
		[SmokeMethod("setUserName", "(const QString&)", "$")]
		public void SetUserName(string userName) {
			((QUrl) interceptor).SetUserName(userName);
		}
		[SmokeMethod("userName", "() const", "")]
		public string UserName() {
			return ((QUrl) interceptor).UserName();
		}
		[SmokeMethod("setPassword", "(const QString&)", "$")]
		public void SetPassword(string password) {
			((QUrl) interceptor).SetPassword(password);
		}
		[SmokeMethod("password", "() const", "")]
		public string Password() {
			return ((QUrl) interceptor).Password();
		}
		[SmokeMethod("setHost", "(const QString&)", "$")]
		public void SetHost(string host) {
			((QUrl) interceptor).SetHost(host);
		}
		[SmokeMethod("host", "() const", "")]
		public string Host() {
			return ((QUrl) interceptor).Host();
		}
		[SmokeMethod("setPort", "(int)", "$")]
		public void SetPort(int port) {
			((QUrl) interceptor).SetPort(port);
		}
		[SmokeMethod("port", "() const", "")]
		public int Port() {
			return ((QUrl) interceptor).Port();
		}
		[SmokeMethod("port", "(int) const", "$")]
		public int Port(int defaultPort) {
			return ((QUrl) interceptor).Port(defaultPort);
		}
		[SmokeMethod("setPath", "(const QString&)", "$")]
		public void SetPath(string path) {
			((QUrl) interceptor).SetPath(path);
		}
		[SmokeMethod("path", "() const", "")]
		public string Path() {
			return ((QUrl) interceptor).Path();
		}
		[SmokeMethod("hasQuery", "() const", "")]
		public bool HasQuery() {
			return ((QUrl) interceptor).HasQuery();
		}
		[SmokeMethod("setEncodedQuery", "(const QByteArray&)", "#")]
		public void SetEncodedQuery(QByteArray query) {
			((QUrl) interceptor).SetEncodedQuery(query);
		}
		[SmokeMethod("encodedQuery", "() const", "")]
		public QByteArray EncodedQuery() {
			return ((QUrl) interceptor).EncodedQuery();
		}
		[SmokeMethod("setQueryDelimiters", "(char, char)", "$$")]
		public void SetQueryDelimiters(char valueDelimiter, char pairDelimiter) {
			((QUrl) interceptor).SetQueryDelimiters(valueDelimiter,pairDelimiter);
		}
		[SmokeMethod("queryValueDelimiter", "() const", "")]
		public char QueryValueDelimiter() {
			return ((QUrl) interceptor).QueryValueDelimiter();
		}
		[SmokeMethod("queryPairDelimiter", "() const", "")]
		public char QueryPairDelimiter() {
			return ((QUrl) interceptor).QueryPairDelimiter();
		}
		[SmokeMethod("setQueryItems", "(const QList<QPair<QString, QString> >&)", "?")]
		public void SetQueryItems(List<QPair<string, string>> query) {
			((QUrl) interceptor).SetQueryItems(query);
		}
		[SmokeMethod("addQueryItem", "(const QString&, const QString&)", "$$")]
		public void AddQueryItem(string key, string value) {
			((QUrl) interceptor).AddQueryItem(key,value);
		}
		[SmokeMethod("queryItems", "() const", "")]
		public List<QPair<string, string>> QueryItems() {
			return ((QUrl) interceptor).QueryItems();
		}
		[SmokeMethod("hasQueryItem", "(const QString&) const", "$")]
		public bool HasQueryItem(string key) {
			return ((QUrl) interceptor).HasQueryItem(key);
		}
		[SmokeMethod("queryItemValue", "(const QString&) const", "$")]
		public string QueryItemValue(string key) {
			return ((QUrl) interceptor).QueryItemValue(key);
		}
		[SmokeMethod("allQueryItemValues", "(const QString&) const", "$")]
		public List<string> AllQueryItemValues(string key) {
			return ((QUrl) interceptor).AllQueryItemValues(key);
		}
		[SmokeMethod("removeQueryItem", "(const QString&)", "$")]
		public void RemoveQueryItem(string key) {
			((QUrl) interceptor).RemoveQueryItem(key);
		}
		[SmokeMethod("removeAllQueryItems", "(const QString&)", "$")]
		public void RemoveAllQueryItems(string key) {
			((QUrl) interceptor).RemoveAllQueryItems(key);
		}
		[SmokeMethod("setFragment", "(const QString&)", "$")]
		public void SetFragment(string fragment) {
			((QUrl) interceptor).SetFragment(fragment);
		}
		[SmokeMethod("fragment", "() const", "")]
		public string Fragment() {
			return ((QUrl) interceptor).Fragment();
		}
		[SmokeMethod("hasFragment", "() const", "")]
		public bool HasFragment() {
			return ((QUrl) interceptor).HasFragment();
		}
		[SmokeMethod("resolved", "(const QUrl&) const", "#")]
		public IQUrl Resolved(IQUrl relative) {
			return ((QUrl) interceptor).Resolved(relative);
		}
		[SmokeMethod("isRelative", "() const", "")]
		public bool IsRelative() {
			return ((QUrl) interceptor).IsRelative();
		}
		[SmokeMethod("isParentOf", "(const QUrl&) const", "#")]
		public bool IsParentOf(IQUrl url) {
			return ((QUrl) interceptor).IsParentOf(url);
		}
		[SmokeMethod("toLocalFile", "() const", "")]
		public string ToLocalFile() {
			return ((QUrl) interceptor).ToLocalFile();
		}
		[SmokeMethod("toString", "(FormattingOptions) const", "$")]
		public string ToString(int options) {
			return ((QUrl) interceptor).ToString(options);
		}
		[SmokeMethod("toString", "() const", "")]
		public string ToString() {
			return ((QUrl) interceptor).ToString();
		}
		[SmokeMethod("toEncoded", "(FormattingOptions) const", "$")]
		public QByteArray ToEncoded(int options) {
			return ((QUrl) interceptor).ToEncoded(options);
		}
		[SmokeMethod("toEncoded", "() const", "")]
		public QByteArray ToEncoded() {
			return ((QUrl) interceptor).ToEncoded();
		}
		[SmokeMethod("detach", "()", "")]
		public void Detach() {
			((QUrl) interceptor).Detach();
		}
		[SmokeMethod("isDetached", "() const", "")]
		public bool IsDetached() {
			return ((QUrl) interceptor).IsDetached();
		}
		[SmokeMethod("errorString", "() const", "")]
		public string ErrorString() {
			return ((QUrl) interceptor).ErrorString();
		}
		~QUrl() {
			DisposeQUrl();
		}
		public void Dispose() {
			DisposeQUrl();
		}
		[SmokeMethod("~QUrl", "()", "")]
		private void DisposeQUrl() {
			((QUrl) interceptor).DisposeQUrl();
		}
		public static IQUrl FromLocalFile(string localfile) {
			return staticInterceptor.FromLocalFile(localfile);
		}
		public static IQUrl FromEncoded(QByteArray url) {
			return staticInterceptor.FromEncoded(url);
		}
		public static IQUrl FromEncoded(QByteArray url, QUrl.ParsingMode mode) {
			return staticInterceptor.FromEncoded(url,mode);
		}
		public static string FromPercentEncoding(QByteArray arg1) {
			return staticInterceptor.FromPercentEncoding(arg1);
		}
		public static QByteArray ToPercentEncoding(string arg1, QByteArray exclude, QByteArray include) {
			return staticInterceptor.ToPercentEncoding(arg1,exclude,include);
		}
		public static QByteArray ToPercentEncoding(string arg1, QByteArray exclude) {
			return staticInterceptor.ToPercentEncoding(arg1,exclude);
		}
		public static QByteArray ToPercentEncoding(string arg1) {
			return staticInterceptor.ToPercentEncoding(arg1);
		}
		public static string FromPunycode(QByteArray arg1) {
			return staticInterceptor.FromPunycode(arg1);
		}
		public static QByteArray ToPunycode(string arg1) {
			return staticInterceptor.ToPunycode(arg1);
		}
		public static string FromAce(QByteArray arg1) {
			return staticInterceptor.FromAce(arg1);
		}
		public static QByteArray ToAce(string arg1) {
			return staticInterceptor.ToAce(arg1);
		}
		public static List<string> IdnWhitelist() {
			return staticInterceptor.IdnWhitelist();
		}
		public static void SetIdnWhitelist(List<string> arg1) {
			staticInterceptor.SetIdnWhitelist(arg1);
		}
	}
}
