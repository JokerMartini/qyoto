//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QPersistentModelIndex")]
	public class QPersistentModelIndex : MarshalByRefObject, IDisposable {
		protected QPersistentModelIndex interceptor = null;
		private IntPtr smokeObject;
		protected QPersistentModelIndex(Type dummy) {}
		[SmokeClass("QPersistentModelIndex")]
		interface IQPersistentModelIndexProxy {
			[SmokeMethod("operator<", "(const QPersistentModelIndex&) const", "#")]
			bool op_lt(QPersistentModelIndex lhs, QPersistentModelIndex other);
			[SmokeMethod("operator==", "(const QPersistentModelIndex&) const", "#")]
			bool op_equals(QPersistentModelIndex lhs, QPersistentModelIndex other);
			[SmokeMethod("operator==", "(const QModelIndex&) const", "#")]
			bool op_equals(QPersistentModelIndex lhs, QModelIndex other);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QPersistentModelIndex), this);
			interceptor = (QPersistentModelIndex) realProxy.GetTransparentProxy();
		}
		private static IQPersistentModelIndexProxy staticInterceptor = null;
		static QPersistentModelIndex() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQPersistentModelIndexProxy), null);
			staticInterceptor = (IQPersistentModelIndexProxy) realProxy.GetTransparentProxy();
		}
		//  operator const QModelIndex&(); >>>> NOT CONVERTED
		// void* internalPointer(); >>>> NOT CONVERTED
		public QPersistentModelIndex() : this((Type) null) {
			CreateProxy();
			NewQPersistentModelIndex();
		}
		[SmokeMethod("QPersistentModelIndex", "()", "")]
		private void NewQPersistentModelIndex() {
			((QPersistentModelIndex) interceptor).NewQPersistentModelIndex();
		}
		public QPersistentModelIndex(QModelIndex index) : this((Type) null) {
			CreateProxy();
			NewQPersistentModelIndex(index);
		}
		[SmokeMethod("QPersistentModelIndex", "(const QModelIndex&)", "#")]
		private void NewQPersistentModelIndex(QModelIndex index) {
			((QPersistentModelIndex) interceptor).NewQPersistentModelIndex(index);
		}
		public QPersistentModelIndex(QPersistentModelIndex other) : this((Type) null) {
			CreateProxy();
			NewQPersistentModelIndex(other);
		}
		[SmokeMethod("QPersistentModelIndex", "(const QPersistentModelIndex&)", "#")]
		private void NewQPersistentModelIndex(QPersistentModelIndex other) {
			((QPersistentModelIndex) interceptor).NewQPersistentModelIndex(other);
		}
		public override bool Equals(object o) {
			if (!(o is QPersistentModelIndex)) { return false; }
			return this == (QPersistentModelIndex) o;
		}
		public override int GetHashCode() {
			return ((QPersistentModelIndex) interceptor).GetHashCode();
		}
		[SmokeMethod("row", "() const", "")]
		public int Row() {
			return ((QPersistentModelIndex) interceptor).Row();
		}
		[SmokeMethod("column", "() const", "")]
		public int Column() {
			return ((QPersistentModelIndex) interceptor).Column();
		}
		[SmokeMethod("internalId", "() const", "")]
		public long InternalId() {
			return ((QPersistentModelIndex) interceptor).InternalId();
		}
		[SmokeMethod("parent", "() const", "")]
		public QModelIndex Parent() {
			return ((QPersistentModelIndex) interceptor).Parent();
		}
		[SmokeMethod("sibling", "(int, int) const", "$$")]
		public QModelIndex Sibling(int row, int column) {
			return ((QPersistentModelIndex) interceptor).Sibling(row,column);
		}
		[SmokeMethod("child", "(int, int) const", "$$")]
		public QModelIndex Child(int row, int column) {
			return ((QPersistentModelIndex) interceptor).Child(row,column);
		}
		[SmokeMethod("data", "(int) const", "$")]
		public QVariant Data(int role) {
			return ((QPersistentModelIndex) interceptor).Data(role);
		}
		[SmokeMethod("data", "() const", "")]
		public QVariant Data() {
			return ((QPersistentModelIndex) interceptor).Data();
		}
		[SmokeMethod("flags", "() const", "")]
		public int Flags() {
			return ((QPersistentModelIndex) interceptor).Flags();
		}
		[SmokeMethod("model", "() const", "")]
		public QAbstractItemModel Model() {
			return ((QPersistentModelIndex) interceptor).Model();
		}
		[SmokeMethod("isValid", "() const", "")]
		public bool IsValid() {
			return ((QPersistentModelIndex) interceptor).IsValid();
		}
		~QPersistentModelIndex() {
			DisposeQPersistentModelIndex();
		}
		public void Dispose() {
			DisposeQPersistentModelIndex();
		}
		[SmokeMethod("~QPersistentModelIndex", "()", "")]
		private void DisposeQPersistentModelIndex() {
			((QPersistentModelIndex) interceptor).DisposeQPersistentModelIndex();
		}
		public static bool operator<(QPersistentModelIndex lhs, QPersistentModelIndex other) {
			return staticInterceptor.op_lt(lhs,other);
		}
		public static bool operator>(QPersistentModelIndex lhs, QPersistentModelIndex other) {
			return !staticInterceptor.op_lt(lhs,other)
						&& !staticInterceptor.op_equals(lhs,other);
		}
		public static bool operator==(QPersistentModelIndex lhs, QPersistentModelIndex other) {
			return staticInterceptor.op_equals(lhs,other);
		}
		public static bool operator!=(QPersistentModelIndex lhs, QPersistentModelIndex other) {
			return !staticInterceptor.op_equals(lhs,other);
		}
		public static bool operator==(QPersistentModelIndex lhs, QModelIndex other) {
			return staticInterceptor.op_equals(lhs,other);
		}
		public static bool operator!=(QPersistentModelIndex lhs, QModelIndex other) {
			return !staticInterceptor.op_equals(lhs,other);
		}
	}
}
