//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QAbstractTableModel")]
	public abstract class QAbstractTableModel : QAbstractItemModel, IDisposable {
 		protected QAbstractTableModel(Type dummy) : base((Type) null) {}
		[SmokeClass("QAbstractTableModel")]
		interface IQAbstractTableModelProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QAbstractTableModel), this);
			interceptor = (QAbstractTableModel) realProxy.GetTransparentProxy();
		}
		private static IQAbstractTableModelProxy staticInterceptor = null;
		static QAbstractTableModel() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQAbstractTableModelProxy), null);
			staticInterceptor = (IQAbstractTableModelProxy) realProxy.GetTransparentProxy();
		}
		public QAbstractTableModel(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQAbstractTableModel(parent);
		}
		[SmokeMethod("QAbstractTableModel", "(QObject*)", "#")]
		private void NewQAbstractTableModel(QObject parent) {
			((QAbstractTableModel) interceptor).NewQAbstractTableModel(parent);
		}
		public QAbstractTableModel() : this((Type) null) {
			CreateProxy();
			NewQAbstractTableModel();
		}
		[SmokeMethod("QAbstractTableModel", "()", "")]
		private void NewQAbstractTableModel() {
			((QAbstractTableModel) interceptor).NewQAbstractTableModel();
		}
		[SmokeMethod("index", "(int, int, const QModelIndex&) const", "$$#")]
		public override QModelIndex Index(int row, int column, QModelIndex parent) {
			return ((QAbstractTableModel) interceptor).Index(row,column,parent);
		}
		[SmokeMethod("index", "(int, int) const", "$$")]
		public virtual QModelIndex Index(int row, int column) {
			return ((QAbstractTableModel) interceptor).Index(row,column);
		}
		[SmokeMethod("dropMimeData", "(const QMimeData*, Qt::DropAction, int, int, const QModelIndex&)", "#$$$#")]
		public override bool DropMimeData(QMimeData data, Qt.DropAction action, int row, int column, QModelIndex parent) {
			return ((QAbstractTableModel) interceptor).DropMimeData(data,action,row,column,parent);
		}
		~QAbstractTableModel() {
			DisposeQAbstractTableModel();
		}
		public new void Dispose() {
			DisposeQAbstractTableModel();
		}
		[SmokeMethod("~QAbstractTableModel", "()", "")]
		private void DisposeQAbstractTableModel() {
			((QAbstractTableModel) interceptor).DisposeQAbstractTableModel();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQAbstractTableModelSignals Emit {
			get { return (IQAbstractTableModelSignals) Q_EMIT; }
		}
	}

	public interface IQAbstractTableModelSignals : IQAbstractItemModelSignals {
	}
}
