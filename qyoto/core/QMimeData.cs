//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	[SmokeClass("QMimeData")]
	public class QMimeData : QObject, IDisposable {
 		protected QMimeData(Type dummy) : base((Type) null) {}
		[SmokeClass("QMimeData")]
		interface IQMimeDataProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QMimeData), this);
			interceptor = (QMimeData) realProxy.GetTransparentProxy();
		}
		private static IQMimeDataProxy staticInterceptor = null;
		static QMimeData() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQMimeDataProxy), null);
			staticInterceptor = (IQMimeDataProxy) realProxy.GetTransparentProxy();
		}
		public QMimeData() : this((Type) null) {
			CreateProxy();
			NewQMimeData();
		}
		[SmokeMethod("QMimeData", "()", "")]
		private void NewQMimeData() {
			((QMimeData) interceptor).NewQMimeData();
		}
		[SmokeMethod("urls", "() const", "")]
		public List<QUrl> Urls() {
			return ((QMimeData) interceptor).Urls();
		}
		[SmokeMethod("setUrls", "(const QList<QUrl>&)", "?")]
		public void SetUrls(List<QUrl> urls) {
			((QMimeData) interceptor).SetUrls(urls);
		}
		[SmokeMethod("hasUrls", "() const", "")]
		public bool HasUrls() {
			return ((QMimeData) interceptor).HasUrls();
		}
		[SmokeMethod("text", "() const", "")]
		public string Text() {
			return ((QMimeData) interceptor).Text();
		}
		[SmokeMethod("setText", "(const QString&)", "$")]
		public void SetText(string text) {
			((QMimeData) interceptor).SetText(text);
		}
		[SmokeMethod("hasText", "() const", "")]
		public bool HasText() {
			return ((QMimeData) interceptor).HasText();
		}
		[SmokeMethod("html", "() const", "")]
		public string Html() {
			return ((QMimeData) interceptor).Html();
		}
		[SmokeMethod("setHtml", "(const QString&)", "$")]
		public void SetHtml(string html) {
			((QMimeData) interceptor).SetHtml(html);
		}
		[SmokeMethod("hasHtml", "() const", "")]
		public bool HasHtml() {
			return ((QMimeData) interceptor).HasHtml();
		}
		[SmokeMethod("imageData", "() const", "")]
		public QVariant ImageData() {
			return ((QMimeData) interceptor).ImageData();
		}
		[SmokeMethod("setImageData", "(const QVariant&)", "#")]
		public void SetImageData(QVariant image) {
			((QMimeData) interceptor).SetImageData(image);
		}
		[SmokeMethod("hasImage", "() const", "")]
		public bool HasImage() {
			return ((QMimeData) interceptor).HasImage();
		}
		[SmokeMethod("colorData", "() const", "")]
		public QVariant ColorData() {
			return ((QMimeData) interceptor).ColorData();
		}
		[SmokeMethod("setColorData", "(const QVariant&)", "#")]
		public void SetColorData(QVariant color) {
			((QMimeData) interceptor).SetColorData(color);
		}
		[SmokeMethod("hasColor", "() const", "")]
		public bool HasColor() {
			return ((QMimeData) interceptor).HasColor();
		}
		[SmokeMethod("data", "(const QString&) const", "$")]
		public QByteArray Data(string mimetype) {
			return ((QMimeData) interceptor).Data(mimetype);
		}
		[SmokeMethod("setData", "(const QString&, const QByteArray&)", "$#")]
		public void SetData(string mimetype, QByteArray data) {
			((QMimeData) interceptor).SetData(mimetype,data);
		}
		[SmokeMethod("hasFormat", "(const QString&) const", "$")]
		public virtual bool HasFormat(string mimetype) {
			return ((QMimeData) interceptor).HasFormat(mimetype);
		}
		[SmokeMethod("formats", "() const", "")]
		public virtual List<string> Formats() {
			return ((QMimeData) interceptor).Formats();
		}
		[SmokeMethod("clear", "()", "")]
		public void Clear() {
			((QMimeData) interceptor).Clear();
		}
		[SmokeMethod("retrieveData", "(const QString&, QVariant::Type) const", "$$")]
		protected virtual QVariant RetrieveData(string mimetype, QVariant.TypeOf preferredType) {
			return ((QMimeData) interceptor).RetrieveData(mimetype,preferredType);
		}
		~QMimeData() {
			DisposeQMimeData();
		}
		public new void Dispose() {
			DisposeQMimeData();
		}
		[SmokeMethod("~QMimeData", "()", "")]
		private void DisposeQMimeData() {
			((QMimeData) interceptor).DisposeQMimeData();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQMimeDataSignals Emit {
			get { return (IQMimeDataSignals) Q_EMIT; }
		}
	}

	public interface IQMimeDataSignals : IQObjectSignals {
	}
}
