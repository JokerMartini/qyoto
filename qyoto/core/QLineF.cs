//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QLineF")]
	public class QLineF : MarshalByRefObject, IDisposable {
		protected QLineF interceptor = null;
		private IntPtr smokeObject;
		protected QLineF(Type dummy) {}
		[SmokeClass("QLineF")]
		interface IQLineFProxy {
			[SmokeMethod("operator==", "(const QLineF&) const", "#")]
			bool op_equals(QLineF lhs, QLineF d);
			[SmokeMethod("operator*", "(const QLineF&, const QMatrix&)", "##")]
			QLineF op_mult(QLineF l, QMatrix m);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QLineF), this);
			interceptor = (QLineF) realProxy.GetTransparentProxy();
		}
		private static IQLineFProxy staticInterceptor = null;
		static QLineF() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQLineFProxy), null);
			staticInterceptor = (IQLineFProxy) realProxy.GetTransparentProxy();
		}
		public enum IntersectType {
			NoIntersection = 0,
			BoundedIntersection = 1,
			UnboundedIntersection = 2,
		}
		public QLineF() : this((Type) null) {
			CreateProxy();
			NewQLineF();
		}
		[SmokeMethod("QLineF", "()", "")]
		private void NewQLineF() {
			((QLineF) interceptor).NewQLineF();
		}
		public QLineF(QPointF pt1, QPointF pt2) : this((Type) null) {
			CreateProxy();
			NewQLineF(pt1,pt2);
		}
		[SmokeMethod("QLineF", "(const QPointF&, const QPointF&)", "##")]
		private void NewQLineF(QPointF pt1, QPointF pt2) {
			((QLineF) interceptor).NewQLineF(pt1,pt2);
		}
		public QLineF(double x1, double y1, double x2, double y2) : this((Type) null) {
			CreateProxy();
			NewQLineF(x1,y1,x2,y2);
		}
		[SmokeMethod("QLineF", "(qreal, qreal, qreal, qreal)", "$$$$")]
		private void NewQLineF(double x1, double y1, double x2, double y2) {
			((QLineF) interceptor).NewQLineF(x1,y1,x2,y2);
		}
		public QLineF(QLine line) : this((Type) null) {
			CreateProxy();
			NewQLineF(line);
		}
		[SmokeMethod("QLineF", "(const QLine&)", "#")]
		private void NewQLineF(QLine line) {
			((QLineF) interceptor).NewQLineF(line);
		}
		[SmokeMethod("isNull", "() const", "")]
		public bool IsNull() {
			return ((QLineF) interceptor).IsNull();
		}
		[SmokeMethod("p1", "() const", "")]
		public QPointF P1() {
			return ((QLineF) interceptor).P1();
		}
		[SmokeMethod("p2", "() const", "")]
		public QPointF P2() {
			return ((QLineF) interceptor).P2();
		}
		[SmokeMethod("x1", "() const", "")]
		public double X1() {
			return ((QLineF) interceptor).X1();
		}
		[SmokeMethod("y1", "() const", "")]
		public double Y1() {
			return ((QLineF) interceptor).Y1();
		}
		[SmokeMethod("x2", "() const", "")]
		public double X2() {
			return ((QLineF) interceptor).X2();
		}
		[SmokeMethod("y2", "() const", "")]
		public double Y2() {
			return ((QLineF) interceptor).Y2();
		}
		[SmokeMethod("dx", "() const", "")]
		public double Dx() {
			return ((QLineF) interceptor).Dx();
		}
		[SmokeMethod("dy", "() const", "")]
		public double Dy() {
			return ((QLineF) interceptor).Dy();
		}
		[SmokeMethod("length", "() const", "")]
		public double Length() {
			return ((QLineF) interceptor).Length();
		}
		[SmokeMethod("setLength", "(qreal)", "$")]
		public void SetLength(double len) {
			((QLineF) interceptor).SetLength(len);
		}
		[SmokeMethod("unitVector", "() const", "")]
		public QLineF UnitVector() {
			return ((QLineF) interceptor).UnitVector();
		}
		[SmokeMethod("normalVector", "() const", "")]
		public QLineF NormalVector() {
			return ((QLineF) interceptor).NormalVector();
		}
		[SmokeMethod("intersect", "(const QLineF&, QPointF*) const", "##")]
		public QLineF.IntersectType Intersect(QLineF l, QPointF intersectionPoint) {
			return ((QLineF) interceptor).Intersect(l,intersectionPoint);
		}
		[SmokeMethod("angle", "(const QLineF&) const", "#")]
		public double Angle(QLineF l) {
			return ((QLineF) interceptor).Angle(l);
		}
		[SmokeMethod("pointAt", "(qreal) const", "$")]
		public QPointF PointAt(double t) {
			return ((QLineF) interceptor).PointAt(t);
		}
		[SmokeMethod("translate", "(const QPointF&)", "#")]
		public void Translate(QPointF p) {
			((QLineF) interceptor).Translate(p);
		}
		[SmokeMethod("translate", "(qreal, qreal)", "$$")]
		public void Translate(double dx, double dy) {
			((QLineF) interceptor).Translate(dx,dy);
		}
		public override bool Equals(object o) {
			if (!(o is QLineF)) { return false; }
			return this == (QLineF) o;
		}
		public override int GetHashCode() {
			return ((QLineF) interceptor).GetHashCode();
		}
		[SmokeMethod("toLine", "() const", "")]
		public QLine ToLine() {
			return ((QLineF) interceptor).ToLine();
		}
		~QLineF() {
			DisposeQLineF();
		}
		public void Dispose() {
			DisposeQLineF();
		}
		[SmokeMethod("~QLineF", "()", "")]
		private void DisposeQLineF() {
			((QLineF) interceptor).DisposeQLineF();
		}
		public static bool operator==(QLineF lhs, QLineF d) {
			return staticInterceptor.op_equals(lhs,d);
		}
		public static bool operator!=(QLineF lhs, QLineF d) {
			return !staticInterceptor.op_equals(lhs,d);
		}
		public static QLineF operator*(QLineF l, QMatrix m) {
			return staticInterceptor.op_mult(l,m);
		}
	}
}
