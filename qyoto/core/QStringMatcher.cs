//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QStringMatcher")]
	public class QStringMatcher : MarshalByRefObject, IDisposable {
		protected QStringMatcher interceptor = null;
		private IntPtr smokeObject;
		protected QStringMatcher(Type dummy) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QStringMatcher), this);
			interceptor = (QStringMatcher) realProxy.GetTransparentProxy();
		}
		public QStringMatcher() : this((Type) null) {
			CreateProxy();
			NewQStringMatcher();
		}
		[SmokeMethod("QStringMatcher", "()", "")]
		private void NewQStringMatcher() {
			((QStringMatcher) interceptor).NewQStringMatcher();
		}
		public QStringMatcher(string pattern, Qt.CaseSensitivity cs) : this((Type) null) {
			CreateProxy();
			NewQStringMatcher(pattern,cs);
		}
		[SmokeMethod("QStringMatcher", "(const QString&, Qt::CaseSensitivity)", "$$")]
		private void NewQStringMatcher(string pattern, Qt.CaseSensitivity cs) {
			((QStringMatcher) interceptor).NewQStringMatcher(pattern,cs);
		}
		public QStringMatcher(string pattern) : this((Type) null) {
			CreateProxy();
			NewQStringMatcher(pattern);
		}
		[SmokeMethod("QStringMatcher", "(const QString&)", "$")]
		private void NewQStringMatcher(string pattern) {
			((QStringMatcher) interceptor).NewQStringMatcher(pattern);
		}
		[SmokeMethod("setPattern", "(const QString&)", "$")]
		public void SetPattern(string pattern) {
			((QStringMatcher) interceptor).SetPattern(pattern);
		}
		[SmokeMethod("setCaseSensitivity", "(Qt::CaseSensitivity)", "$")]
		public void SetCaseSensitivity(Qt.CaseSensitivity cs) {
			((QStringMatcher) interceptor).SetCaseSensitivity(cs);
		}
		[SmokeMethod("indexIn", "(const QString&, int) const", "$$")]
		public int IndexIn(string str, int from) {
			return ((QStringMatcher) interceptor).IndexIn(str,from);
		}
		[SmokeMethod("indexIn", "(const QString&) const", "$")]
		public int IndexIn(string str) {
			return ((QStringMatcher) interceptor).IndexIn(str);
		}
		[SmokeMethod("pattern", "() const", "")]
		public string Pattern() {
			return ((QStringMatcher) interceptor).Pattern();
		}
		[SmokeMethod("caseSensitivity", "() const", "")]
		public Qt.CaseSensitivity CaseSensitivity() {
			return ((QStringMatcher) interceptor).CaseSensitivity();
		}
		~QStringMatcher() {
			DisposeQStringMatcher();
		}
		public void Dispose() {
			DisposeQStringMatcher();
		}
		[SmokeMethod("~QStringMatcher", "()", "")]
		private void DisposeQStringMatcher() {
			((QStringMatcher) interceptor).DisposeQStringMatcher();
		}
	}
}
