//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QBuffer")]
	public class QBuffer : QIODevice, IDisposable {
 		protected QBuffer(Type dummy) : base((Type) null) {}
		[SmokeClass("QBuffer")]
		interface IQBufferProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QBuffer), this);
			interceptor = (QBuffer) realProxy.GetTransparentProxy();
		}
		private static IQBufferProxy staticInterceptor = null;
		static QBuffer() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQBufferProxy), null);
			staticInterceptor = (IQBufferProxy) realProxy.GetTransparentProxy();
		}
		public QBuffer(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQBuffer(parent);
		}
		[SmokeMethod("QBuffer", "(QObject*)", "#")]
		private void NewQBuffer(QObject parent) {
			((QBuffer) interceptor).NewQBuffer(parent);
		}
		public QBuffer() : this((Type) null) {
			CreateProxy();
			NewQBuffer();
		}
		[SmokeMethod("QBuffer", "()", "")]
		private void NewQBuffer() {
			((QBuffer) interceptor).NewQBuffer();
		}
		public QBuffer(QByteArray buf, QObject parent) : this((Type) null) {
			CreateProxy();
			NewQBuffer(buf,parent);
		}
		[SmokeMethod("QBuffer", "(QByteArray*, QObject*)", "##")]
		private void NewQBuffer(QByteArray buf, QObject parent) {
			((QBuffer) interceptor).NewQBuffer(buf,parent);
		}
		public QBuffer(QByteArray buf) : this((Type) null) {
			CreateProxy();
			NewQBuffer(buf);
		}
		[SmokeMethod("QBuffer", "(QByteArray*)", "#")]
		private void NewQBuffer(QByteArray buf) {
			((QBuffer) interceptor).NewQBuffer(buf);
		}
		[SmokeMethod("buffer", "()", "")]
		public QByteArray Buffer() {
			return ((QBuffer) interceptor).Buffer();
		}
		[SmokeMethod("setBuffer", "(QByteArray*)", "#")]
		public void SetBuffer(QByteArray a) {
			((QBuffer) interceptor).SetBuffer(a);
		}
		[SmokeMethod("setData", "(const QByteArray&)", "#")]
		public void SetData(QByteArray data) {
			((QBuffer) interceptor).SetData(data);
		}
		[SmokeMethod("setData", "(const char*, int)", "$$")]
		public void SetData(string data, int len) {
			((QBuffer) interceptor).SetData(data,len);
		}
		[SmokeMethod("data", "() const", "")]
		public QByteArray Data() {
			return ((QBuffer) interceptor).Data();
		}
		[SmokeMethod("open", "(OpenMode)", "$")]
		public override bool Open(int openMode) {
			return ((QBuffer) interceptor).Open(openMode);
		}
		[SmokeMethod("close", "()", "")]
		public override void Close() {
			((QBuffer) interceptor).Close();
		}
		[SmokeMethod("size", "() const", "")]
		public override long Size() {
			return ((QBuffer) interceptor).Size();
		}
		[SmokeMethod("pos", "() const", "")]
		public override long Pos() {
			return ((QBuffer) interceptor).Pos();
		}
		[SmokeMethod("seek", "(qint64)", "$")]
		public override bool Seek(long off) {
			return ((QBuffer) interceptor).Seek(off);
		}
		[SmokeMethod("atEnd", "() const", "")]
		public override bool AtEnd() {
			return ((QBuffer) interceptor).AtEnd();
		}
		[SmokeMethod("canReadLine", "() const", "")]
		public override bool CanReadLine() {
			return ((QBuffer) interceptor).CanReadLine();
		}
		[SmokeMethod("readData", "(char*, qint64)", "$$")]
		protected override long ReadData(string data, long maxlen) {
			return ((QBuffer) interceptor).ReadData(data,maxlen);
		}
		[SmokeMethod("writeData", "(const char*, qint64)", "$$")]
		protected override long WriteData(string data, long len) {
			return ((QBuffer) interceptor).WriteData(data,len);
		}
		~QBuffer() {
			DisposeQBuffer();
		}
		public new void Dispose() {
			DisposeQBuffer();
		}
		[SmokeMethod("~QBuffer", "()", "")]
		private void DisposeQBuffer() {
			((QBuffer) interceptor).DisposeQBuffer();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQBufferSignals Emit {
			get { return (IQBufferSignals) Q_EMIT; }
		}
	}

	public interface IQBufferSignals : IQIODeviceSignals {
	}
}
