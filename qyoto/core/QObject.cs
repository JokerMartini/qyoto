//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Reflection;
	using System.Collections.Generic;

	/// See <see cref="IQObjectSignals"></see> for signals emitted by QObject
	[SmokeClass("QObject")]
	public partial class QObject : Qt, IDisposable {
		private IntPtr smokeObject;
		protected Object Q_EMIT = null;
		protected QObject(Type dummy) {
			try {
				Type proxyInterface = Qyoto.GetSignalsInterface(GetType());
				SignalInvocation realProxy = new SignalInvocation(proxyInterface, this);
				Q_EMIT = realProxy.GetTransparentProxy();
			}
			catch {
				Console.WriteLine("Could not retrieve signal interface");
			}
		}
		[SmokeMethod("metaObject", "()", "")]
		public virtual QMetaObject MetaObject() {
			if (SmokeMarshallers.IsSmokeClass(GetType())) {
				return ((QObject) interceptor).MetaObject();
			} else {
				return Qyoto.GetMetaObject(this);
			}
		}
		[SmokeClass("QObject")]
		interface IQObjectProxy {
			[SmokeMethod("staticQtMetaObject", "()", "")]
			QMetaObject staticQtMetaObject();
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
			[SmokeMethod("connect", "(const QObject*, const char*, const QObject*, const char*, Qt::ConnectionType)", "#$#$$")]
			bool Connect(QObject sender, string signal, QObject receiver, string member, Qt.ConnectionType arg5);
			[SmokeMethod("connect", "(const QObject*, const char*, const QObject*, const char*)", "#$#$")]
			bool Connect(QObject sender, string signal, QObject receiver, string member);
			[SmokeMethod("disconnect", "(const QObject*, const char*, const QObject*, const char*)", "#$#$")]
			bool Disconnect(QObject sender, string signal, QObject receiver, string member);
			[SmokeMethod("registerUserData", "()", "")]
			uint RegisterUserData();
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QObject), this);
			interceptor = (QObject) realProxy.GetTransparentProxy();
		}
		private static IQObjectProxy staticInterceptor = null;
		static QObject() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQObjectProxy), null);
			staticInterceptor = (IQObjectProxy) realProxy.GetTransparentProxy();
		}
		public static QMetaObject StaticQtMetaObject() {
			return staticInterceptor.staticQtMetaObject();
		}
		[Q_PROPERTY("QString", "objectName")]
		public string ObjectName {
			[SmokeMethod("objectName", "()", "")]
			get { return ((QObject) interceptor).ObjectName; }
			[SmokeMethod("setObjectName", "(QString)", "$")]
			set { ((QObject) interceptor).ObjectName = value; }
		}
		// QThread* thread(); >>>> NOT CONVERTED
		// void moveToThread(QThread* arg1); >>>> NOT CONVERTED
		// void setUserData(uint arg1,QObjectUserData* arg2); >>>> NOT CONVERTED
		// QObjectUserData* userData(uint arg1); >>>> NOT CONVERTED
		public QObject(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQObject(parent);
		}
		[SmokeMethod("QObject", "(QObject*)", "#")]
		private void NewQObject(QObject parent) {
			((QObject) interceptor).NewQObject(parent);
		}
		public QObject() : this((Type) null) {
			CreateProxy();
			NewQObject();
		}
		[SmokeMethod("QObject", "()", "")]
		private void NewQObject() {
			((QObject) interceptor).NewQObject();
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		public virtual bool Event(QEvent arg1) {
			return ((QObject) interceptor).Event(arg1);
		}
		[SmokeMethod("eventFilter", "(QObject*, QEvent*)", "##")]
		public virtual bool EventFilter(QObject arg1, QEvent arg2) {
			return ((QObject) interceptor).EventFilter(arg1,arg2);
		}
		[SmokeMethod("isWidgetType", "() const", "")]
		public bool IsWidgetType() {
			return ((QObject) interceptor).IsWidgetType();
		}
		[SmokeMethod("signalsBlocked", "() const", "")]
		public bool SignalsBlocked() {
			return ((QObject) interceptor).SignalsBlocked();
		}
		[SmokeMethod("blockSignals", "(bool)", "$")]
		public bool BlockSignals(bool b) {
			return ((QObject) interceptor).BlockSignals(b);
		}
		[SmokeMethod("startTimer", "(int)", "$")]
		public int StartTimer(int interval) {
			return ((QObject) interceptor).StartTimer(interval);
		}
		[SmokeMethod("killTimer", "(int)", "$")]
		public void KillTimer(int id) {
			((QObject) interceptor).KillTimer(id);
		}
		[SmokeMethod("children", "() const", "")]
		public List<QObject> Children() {
			return ((QObject) interceptor).Children();
		}
		[SmokeMethod("setParent", "(QObject*)", "#")]
		public void SetParent(QObject arg1) {
			((QObject) interceptor).SetParent(arg1);
		}
		[SmokeMethod("installEventFilter", "(QObject*)", "#")]
		public void InstallEventFilter(QObject arg1) {
			((QObject) interceptor).InstallEventFilter(arg1);
		}
		[SmokeMethod("removeEventFilter", "(QObject*)", "#")]
		public void RemoveEventFilter(QObject arg1) {
			((QObject) interceptor).RemoveEventFilter(arg1);
		}
		[SmokeMethod("connect", "(const QObject*, const char*, const char*, Qt::ConnectionType) const", "#$$$")]
		public bool Connect(QObject sender, string signal, string member, Qt.ConnectionType type) {
			return ((QObject) interceptor).Connect(sender,signal,member,type);
		}
		[SmokeMethod("connect", "(const QObject*, const char*, const char*) const", "#$$")]
		public bool Connect(QObject sender, string signal, string member) {
			return ((QObject) interceptor).Connect(sender,signal,member);
		}
		[SmokeMethod("disconnect", "(const char*, const QObject*, const char*)", "$#$")]
		public bool Disconnect(string signal, QObject receiver, string member) {
			return ((QObject) interceptor).Disconnect(signal,receiver,member);
		}
		[SmokeMethod("disconnect", "(const char*, const QObject*)", "$#")]
		public bool Disconnect(string signal, QObject receiver) {
			return ((QObject) interceptor).Disconnect(signal,receiver);
		}
		[SmokeMethod("disconnect", "(const char*)", "$")]
		public bool Disconnect(string signal) {
			return ((QObject) interceptor).Disconnect(signal);
		}
		[SmokeMethod("disconnect", "()", "")]
		public bool Disconnect() {
			return ((QObject) interceptor).Disconnect();
		}
		[SmokeMethod("disconnect", "(const QObject*, const char*)", "#$")]
		public bool Disconnect(QObject receiver, string member) {
			return ((QObject) interceptor).Disconnect(receiver,member);
		}
		[SmokeMethod("disconnect", "(const QObject*)", "#")]
		public bool Disconnect(QObject receiver) {
			return ((QObject) interceptor).Disconnect(receiver);
		}
		[SmokeMethod("dumpObjectTree", "()", "")]
		public void DumpObjectTree() {
			((QObject) interceptor).DumpObjectTree();
		}
		[SmokeMethod("dumpObjectInfo", "()", "")]
		public void DumpObjectInfo() {
			((QObject) interceptor).DumpObjectInfo();
		}
		[SmokeMethod("setProperty", "(const char*, const QVariant&)", "$#")]
		public bool SetProperty(string name, QVariant value) {
			return ((QObject) interceptor).SetProperty(name,value);
		}
		[SmokeMethod("property", "(const char*) const", "$")]
		public QVariant Property(string name) {
			return ((QObject) interceptor).Property(name);
		}
		[SmokeMethod("dynamicPropertyNames", "() const", "")]
		public List<QByteArray> DynamicPropertyNames() {
			return ((QObject) interceptor).DynamicPropertyNames();
		}
		[SmokeMethod("parent", "() const", "")]
		public QObject Parent() {
			return ((QObject) interceptor).Parent();
		}
		[SmokeMethod("inherits", "(const char*) const", "$")]
		public bool Inherits(string classname) {
			return ((QObject) interceptor).Inherits(classname);
		}
		[Q_SLOT("void deleteLater()")]
		[SmokeMethod("deleteLater", "()", "")]
		public void DeleteLater() {
			((QObject) interceptor).DeleteLater();
		}
		[SmokeMethod("sender", "() const", "")]
		protected QObject Sender() {
			return ((QObject) interceptor).Sender();
		}
		[SmokeMethod("receivers", "(const char*) const", "$")]
		protected int Receivers(string signal) {
			return ((QObject) interceptor).Receivers(signal);
		}
		[SmokeMethod("timerEvent", "(QTimerEvent*)", "#")]
		protected virtual void TimerEvent(QTimerEvent arg1) {
			((QObject) interceptor).TimerEvent(arg1);
		}
		[SmokeMethod("childEvent", "(QChildEvent*)", "#")]
		protected virtual void ChildEvent(QChildEvent arg1) {
			((QObject) interceptor).ChildEvent(arg1);
		}
		[SmokeMethod("customEvent", "(QEvent*)", "#")]
		protected virtual void CustomEvent(QEvent arg1) {
			((QObject) interceptor).CustomEvent(arg1);
		}
		[SmokeMethod("connectNotify", "(const char*)", "$")]
		protected virtual void ConnectNotify(string signal) {
			((QObject) interceptor).ConnectNotify(signal);
		}
		[SmokeMethod("disconnectNotify", "(const char*)", "$")]
		protected virtual void DisconnectNotify(string signal) {
			((QObject) interceptor).DisconnectNotify(signal);
		}
		~QObject() {
			DisposeQObject();
		}
		public void Dispose() {
			DisposeQObject();
		}
		[SmokeMethod("~QObject", "()", "")]
		private void DisposeQObject() {
			((QObject) interceptor).DisposeQObject();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		public static bool Connect(QObject sender, string signal, QObject receiver, string member, Qt.ConnectionType arg5) {
			return staticInterceptor.Connect(sender,signal,receiver,member,arg5);
		}
		public static bool Connect(QObject sender, string signal, QObject receiver, string member) {
			return staticInterceptor.Connect(sender,signal,receiver,member);
		}
		public static bool Disconnect(QObject sender, string signal, QObject receiver, string member) {
			return staticInterceptor.Disconnect(sender,signal,receiver,member);
		}
		public static uint RegisterUserData() {
			return staticInterceptor.RegisterUserData();
		}
		protected new IQObjectSignals Emit {
			get { return (IQObjectSignals) Q_EMIT; }
		}
	}

	public interface IQObjectSignals {
		[Q_SIGNAL("void destroyed(QObject*)")]
		void Destroyed(QObject arg1);
		[Q_SIGNAL("void destroyed()")]
		void Destroyed();
	}
}
