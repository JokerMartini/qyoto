//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QModelIndex")]
	public partial class QModelIndex : MarshalByRefObject, IDisposable {
		protected QModelIndex interceptor = null;
		private IntPtr smokeObject;
		protected QModelIndex(Type dummy) {}
		[SmokeClass("QModelIndex")]
		interface IQModelIndexProxy {
			[SmokeMethod("operator==", "(const QModelIndex&) const", "#")]
			bool op_equals(QModelIndex lhs, QModelIndex other);
			[SmokeMethod("operator<", "(const QModelIndex&) const", "#")]
			bool op_lt(QModelIndex lhs, QModelIndex other);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QModelIndex), this);
			interceptor = (QModelIndex) realProxy.GetTransparentProxy();
		}
		private static IQModelIndexProxy staticInterceptor = null;
		static QModelIndex() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQModelIndexProxy), null);
			staticInterceptor = (IQModelIndexProxy) realProxy.GetTransparentProxy();
		}
		// void* internalPointer(); >>>> NOT CONVERTED
		public QModelIndex() : this((Type) null) {
			CreateProxy();
			NewQModelIndex();
		}
		[SmokeMethod("QModelIndex", "()", "")]
		private void NewQModelIndex() {
			((QModelIndex) interceptor).NewQModelIndex();
		}
		public QModelIndex(QModelIndex other) : this((Type) null) {
			CreateProxy();
			NewQModelIndex(other);
		}
		[SmokeMethod("QModelIndex", "(const QModelIndex&)", "#")]
		private void NewQModelIndex(QModelIndex other) {
			((QModelIndex) interceptor).NewQModelIndex(other);
		}
		[SmokeMethod("row", "() const", "")]
		public int Row() {
			return ((QModelIndex) interceptor).Row();
		}
		[SmokeMethod("column", "() const", "")]
		public int Column() {
			return ((QModelIndex) interceptor).Column();
		}
		[SmokeMethod("internalId", "() const", "")]
		public long InternalId() {
			return ((QModelIndex) interceptor).InternalId();
		}
		[SmokeMethod("parent", "() const", "")]
		public QModelIndex Parent() {
			return ((QModelIndex) interceptor).Parent();
		}
		[SmokeMethod("sibling", "(int, int) const", "$$")]
		public QModelIndex Sibling(int row, int column) {
			return ((QModelIndex) interceptor).Sibling(row,column);
		}
		[SmokeMethod("child", "(int, int) const", "$$")]
		public QModelIndex Child(int row, int column) {
			return ((QModelIndex) interceptor).Child(row,column);
		}
		[SmokeMethod("data", "(int) const", "$")]
		public QVariant Data(int role) {
			return ((QModelIndex) interceptor).Data(role);
		}
		[SmokeMethod("data", "() const", "")]
		public QVariant Data() {
			return ((QModelIndex) interceptor).Data();
		}
		[SmokeMethod("flags", "() const", "")]
		public int Flags() {
			return ((QModelIndex) interceptor).Flags();
		}
		[SmokeMethod("model", "() const", "")]
		public QAbstractItemModel Model() {
			return ((QModelIndex) interceptor).Model();
		}
		[SmokeMethod("isValid", "() const", "")]
		public bool IsValid() {
			return ((QModelIndex) interceptor).IsValid();
		}
		public override bool Equals(object o) {
			if (!(o is QModelIndex)) { return false; }
			return this == (QModelIndex) o;
		}
		public override int GetHashCode() {
			return ((QModelIndex) interceptor).GetHashCode();
		}
		~QModelIndex() {
			DisposeQModelIndex();
		}
		public void Dispose() {
			DisposeQModelIndex();
		}
		[SmokeMethod("~QModelIndex", "()", "")]
		private void DisposeQModelIndex() {
			QAbstractItemModel.DerefIndexHandle(InternalPointer());
			((QModelIndex) interceptor).DisposeQModelIndex();
		}
		public static bool operator==(QModelIndex lhs, QModelIndex other) {
			return staticInterceptor.op_equals(lhs,other);
		}
		public static bool operator!=(QModelIndex lhs, QModelIndex other) {
			return !staticInterceptor.op_equals(lhs,other);
		}
		public static bool operator<(QModelIndex lhs, QModelIndex other) {
			return staticInterceptor.op_lt(lhs,other);
		}
		public static bool operator>(QModelIndex lhs, QModelIndex other) {
			return !staticInterceptor.op_lt(lhs,other)
						&& !staticInterceptor.op_equals(lhs,other);
		}
	}
}
