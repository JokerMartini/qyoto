//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	[SmokeClass("QSettings")]
	public class QSettings : QObject, IDisposable {
 		protected QSettings(Type dummy) : base((Type) null) {}
		[SmokeClass("QSettings")]
		interface IQSettingsProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
			[SmokeMethod("setSystemIniPath", "(const QString&)", "$")]
			void SetSystemIniPath(string dir);
			[SmokeMethod("setUserIniPath", "(const QString&)", "$")]
			void SetUserIniPath(string dir);
			[SmokeMethod("setPath", "(QSettings::Format, QSettings::Scope, const QString&)", "$$$")]
			void SetPath(QSettings.Format format, QSettings.Scope scope, string path);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSettings), this);
			interceptor = (QSettings) realProxy.GetTransparentProxy();
		}
		private static IQSettingsProxy staticInterceptor = null;
		static QSettings() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSettingsProxy), null);
			staticInterceptor = (IQSettingsProxy) realProxy.GetTransparentProxy();
		}
		public enum Status {
			NoError = 0,
			AccessError = 1,
			FormatError = 2,
		}
		public enum Format {
			NativeFormat = 0,
			IniFormat = 1,
			InvalidFormat = 16,
			CustomFormat1 = 17,
			CustomFormat2 = 18,
			CustomFormat3 = 19,
			CustomFormat4 = 20,
			CustomFormat5 = 21,
			CustomFormat6 = 22,
			CustomFormat7 = 23,
			CustomFormat8 = 24,
			CustomFormat9 = 25,
			CustomFormat10 = 26,
			CustomFormat11 = 27,
			CustomFormat12 = 28,
			CustomFormat13 = 29,
			CustomFormat14 = 30,
			CustomFormat15 = 31,
			CustomFormat16 = 32,
		}
		public enum Scope {
			UserScope = 0,
			SystemScope = 1,
		}
		// QSettings::Format registerFormat(const QString& arg1,ReadFunc arg2,WriteFunc arg3,Qt::CaseSensitivity arg4); >>>> NOT CONVERTED
		// QSettings::Format registerFormat(const QString& arg1,ReadFunc arg2,WriteFunc arg3); >>>> NOT CONVERTED
		public QSettings(string organization, string application, QObject parent) : this((Type) null) {
			CreateProxy();
			NewQSettings(organization,application,parent);
		}
		[SmokeMethod("QSettings", "(const QString&, const QString&, QObject*)", "$$#")]
		private void NewQSettings(string organization, string application, QObject parent) {
			((QSettings) interceptor).NewQSettings(organization,application,parent);
		}
		public QSettings(string organization, string application) : this((Type) null) {
			CreateProxy();
			NewQSettings(organization,application);
		}
		[SmokeMethod("QSettings", "(const QString&, const QString&)", "$$")]
		private void NewQSettings(string organization, string application) {
			((QSettings) interceptor).NewQSettings(organization,application);
		}
		public QSettings(string organization) : this((Type) null) {
			CreateProxy();
			NewQSettings(organization);
		}
		[SmokeMethod("QSettings", "(const QString&)", "$")]
		private void NewQSettings(string organization) {
			((QSettings) interceptor).NewQSettings(organization);
		}
		public QSettings(QSettings.Scope scope, string organization, string application, QObject parent) : this((Type) null) {
			CreateProxy();
			NewQSettings(scope,organization,application,parent);
		}
		[SmokeMethod("QSettings", "(QSettings::Scope, const QString&, const QString&, QObject*)", "$$$#")]
		private void NewQSettings(QSettings.Scope scope, string organization, string application, QObject parent) {
			((QSettings) interceptor).NewQSettings(scope,organization,application,parent);
		}
		public QSettings(QSettings.Scope scope, string organization, string application) : this((Type) null) {
			CreateProxy();
			NewQSettings(scope,organization,application);
		}
		[SmokeMethod("QSettings", "(QSettings::Scope, const QString&, const QString&)", "$$$")]
		private void NewQSettings(QSettings.Scope scope, string organization, string application) {
			((QSettings) interceptor).NewQSettings(scope,organization,application);
		}
		public QSettings(QSettings.Scope scope, string organization) : this((Type) null) {
			CreateProxy();
			NewQSettings(scope,organization);
		}
		[SmokeMethod("QSettings", "(QSettings::Scope, const QString&)", "$$")]
		private void NewQSettings(QSettings.Scope scope, string organization) {
			((QSettings) interceptor).NewQSettings(scope,organization);
		}
		public QSettings(QSettings.Format format, QSettings.Scope scope, string organization, string application, QObject parent) : this((Type) null) {
			CreateProxy();
			NewQSettings(format,scope,organization,application,parent);
		}
		[SmokeMethod("QSettings", "(QSettings::Format, QSettings::Scope, const QString&, const QString&, QObject*)", "$$$$#")]
		private void NewQSettings(QSettings.Format format, QSettings.Scope scope, string organization, string application, QObject parent) {
			((QSettings) interceptor).NewQSettings(format,scope,organization,application,parent);
		}
		public QSettings(QSettings.Format format, QSettings.Scope scope, string organization, string application) : this((Type) null) {
			CreateProxy();
			NewQSettings(format,scope,organization,application);
		}
		[SmokeMethod("QSettings", "(QSettings::Format, QSettings::Scope, const QString&, const QString&)", "$$$$")]
		private void NewQSettings(QSettings.Format format, QSettings.Scope scope, string organization, string application) {
			((QSettings) interceptor).NewQSettings(format,scope,organization,application);
		}
		public QSettings(QSettings.Format format, QSettings.Scope scope, string organization) : this((Type) null) {
			CreateProxy();
			NewQSettings(format,scope,organization);
		}
		[SmokeMethod("QSettings", "(QSettings::Format, QSettings::Scope, const QString&)", "$$$")]
		private void NewQSettings(QSettings.Format format, QSettings.Scope scope, string organization) {
			((QSettings) interceptor).NewQSettings(format,scope,organization);
		}
		public QSettings(string fileName, QSettings.Format format, QObject parent) : this((Type) null) {
			CreateProxy();
			NewQSettings(fileName,format,parent);
		}
		[SmokeMethod("QSettings", "(const QString&, QSettings::Format, QObject*)", "$$#")]
		private void NewQSettings(string fileName, QSettings.Format format, QObject parent) {
			((QSettings) interceptor).NewQSettings(fileName,format,parent);
		}
		public QSettings(string fileName, QSettings.Format format) : this((Type) null) {
			CreateProxy();
			NewQSettings(fileName,format);
		}
		[SmokeMethod("QSettings", "(const QString&, QSettings::Format)", "$$")]
		private void NewQSettings(string fileName, QSettings.Format format) {
			((QSettings) interceptor).NewQSettings(fileName,format);
		}
		public QSettings(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQSettings(parent);
		}
		[SmokeMethod("QSettings", "(QObject*)", "#")]
		private void NewQSettings(QObject parent) {
			((QSettings) interceptor).NewQSettings(parent);
		}
		public QSettings() : this((Type) null) {
			CreateProxy();
			NewQSettings();
		}
		[SmokeMethod("QSettings", "()", "")]
		private void NewQSettings() {
			((QSettings) interceptor).NewQSettings();
		}
		[SmokeMethod("clear", "()", "")]
		public void Clear() {
			((QSettings) interceptor).Clear();
		}
		[SmokeMethod("sync", "()", "")]
		public void Sync() {
			((QSettings) interceptor).Sync();
		}
		[SmokeMethod("status", "() const", "")]
		public QSettings.Status status() {
			return ((QSettings) interceptor).status();
		}
		[SmokeMethod("beginGroup", "(const QString&)", "$")]
		public void BeginGroup(string prefix) {
			((QSettings) interceptor).BeginGroup(prefix);
		}
		[SmokeMethod("endGroup", "()", "")]
		public void EndGroup() {
			((QSettings) interceptor).EndGroup();
		}
		[SmokeMethod("group", "() const", "")]
		public string Group() {
			return ((QSettings) interceptor).Group();
		}
		[SmokeMethod("beginReadArray", "(const QString&)", "$")]
		public int BeginReadArray(string prefix) {
			return ((QSettings) interceptor).BeginReadArray(prefix);
		}
		[SmokeMethod("beginWriteArray", "(const QString&, int)", "$$")]
		public void BeginWriteArray(string prefix, int size) {
			((QSettings) interceptor).BeginWriteArray(prefix,size);
		}
		[SmokeMethod("beginWriteArray", "(const QString&)", "$")]
		public void BeginWriteArray(string prefix) {
			((QSettings) interceptor).BeginWriteArray(prefix);
		}
		[SmokeMethod("endArray", "()", "")]
		public void EndArray() {
			((QSettings) interceptor).EndArray();
		}
		[SmokeMethod("setArrayIndex", "(int)", "$")]
		public void SetArrayIndex(int i) {
			((QSettings) interceptor).SetArrayIndex(i);
		}
		[SmokeMethod("allKeys", "() const", "")]
		public List<string> AllKeys() {
			return ((QSettings) interceptor).AllKeys();
		}
		[SmokeMethod("childKeys", "() const", "")]
		public List<string> ChildKeys() {
			return ((QSettings) interceptor).ChildKeys();
		}
		[SmokeMethod("childGroups", "() const", "")]
		public List<string> ChildGroups() {
			return ((QSettings) interceptor).ChildGroups();
		}
		[SmokeMethod("isWritable", "() const", "")]
		public bool IsWritable() {
			return ((QSettings) interceptor).IsWritable();
		}
		[SmokeMethod("setValue", "(const QString&, const QVariant&)", "$#")]
		public void SetValue(string key, QVariant value) {
			((QSettings) interceptor).SetValue(key,value);
		}
		[SmokeMethod("value", "(const QString&, const QVariant&) const", "$#")]
		public QVariant Value(string key, QVariant defaultValue) {
			return ((QSettings) interceptor).Value(key,defaultValue);
		}
		[SmokeMethod("value", "(const QString&) const", "$")]
		public QVariant Value(string key) {
			return ((QSettings) interceptor).Value(key);
		}
		[SmokeMethod("remove", "(const QString&)", "$")]
		public void Remove(string key) {
			((QSettings) interceptor).Remove(key);
		}
		[SmokeMethod("contains", "(const QString&) const", "$")]
		public bool Contains(string key) {
			return ((QSettings) interceptor).Contains(key);
		}
		[SmokeMethod("setFallbacksEnabled", "(bool)", "$")]
		public void SetFallbacksEnabled(bool b) {
			((QSettings) interceptor).SetFallbacksEnabled(b);
		}
		[SmokeMethod("fallbacksEnabled", "() const", "")]
		public bool FallbacksEnabled() {
			return ((QSettings) interceptor).FallbacksEnabled();
		}
		[SmokeMethod("fileName", "() const", "")]
		public string FileName() {
			return ((QSettings) interceptor).FileName();
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		protected new virtual bool Event(QEvent arg1) {
			return ((QSettings) interceptor).Event(arg1);
		}
		~QSettings() {
			DisposeQSettings();
		}
		public new void Dispose() {
			DisposeQSettings();
		}
		[SmokeMethod("~QSettings", "()", "")]
		private void DisposeQSettings() {
			((QSettings) interceptor).DisposeQSettings();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		public static void SetSystemIniPath(string dir) {
			staticInterceptor.SetSystemIniPath(dir);
		}
		public static void SetUserIniPath(string dir) {
			staticInterceptor.SetUserIniPath(dir);
		}
		public static void SetPath(QSettings.Format format, QSettings.Scope scope, string path) {
			staticInterceptor.SetPath(format,scope,path);
		}
		protected new IQSettingsSignals Emit {
			get { return (IQSettingsSignals) Q_EMIT; }
		}
	}

	public interface IQSettingsSignals : IQObjectSignals {
	}
}
