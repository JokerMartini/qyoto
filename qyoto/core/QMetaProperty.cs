//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QMetaProperty")]
	public class QMetaProperty : MarshalByRefObject, IDisposable {
		protected QMetaProperty interceptor = null;
		private IntPtr smokeObject;
		protected QMetaProperty(Type dummy) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QMetaProperty), this);
			interceptor = (QMetaProperty) realProxy.GetTransparentProxy();
		}
		public QMetaProperty() : this((Type) null) {
			CreateProxy();
			NewQMetaProperty();
		}
		[SmokeMethod("QMetaProperty", "()", "")]
		private void NewQMetaProperty() {
			((QMetaProperty) interceptor).NewQMetaProperty();
		}
		[SmokeMethod("name", "() const", "")]
		public string Name() {
			return ((QMetaProperty) interceptor).Name();
		}
		[SmokeMethod("typeName", "() const", "")]
		public string TypeName() {
			return ((QMetaProperty) interceptor).TypeName();
		}
		[SmokeMethod("type", "() const", "")]
		public QVariant.TypeOf type() {
			return ((QMetaProperty) interceptor).type();
		}
		[SmokeMethod("userType", "() const", "")]
		public int UserType() {
			return ((QMetaProperty) interceptor).UserType();
		}
		[SmokeMethod("isReadable", "() const", "")]
		public bool IsReadable() {
			return ((QMetaProperty) interceptor).IsReadable();
		}
		[SmokeMethod("isWritable", "() const", "")]
		public bool IsWritable() {
			return ((QMetaProperty) interceptor).IsWritable();
		}
		[SmokeMethod("isResettable", "() const", "")]
		public bool IsResettable() {
			return ((QMetaProperty) interceptor).IsResettable();
		}
		[SmokeMethod("isDesignable", "(const QObject*) const", "#")]
		public bool IsDesignable(QObject arg1) {
			return ((QMetaProperty) interceptor).IsDesignable(arg1);
		}
		[SmokeMethod("isDesignable", "() const", "")]
		public bool IsDesignable() {
			return ((QMetaProperty) interceptor).IsDesignable();
		}
		[SmokeMethod("isScriptable", "(const QObject*) const", "#")]
		public bool IsScriptable(QObject arg1) {
			return ((QMetaProperty) interceptor).IsScriptable(arg1);
		}
		[SmokeMethod("isScriptable", "() const", "")]
		public bool IsScriptable() {
			return ((QMetaProperty) interceptor).IsScriptable();
		}
		[SmokeMethod("isStored", "(const QObject*) const", "#")]
		public bool IsStored(QObject arg1) {
			return ((QMetaProperty) interceptor).IsStored(arg1);
		}
		[SmokeMethod("isStored", "() const", "")]
		public bool IsStored() {
			return ((QMetaProperty) interceptor).IsStored();
		}
		[SmokeMethod("isEditable", "(const QObject*) const", "#")]
		public bool IsEditable(QObject arg1) {
			return ((QMetaProperty) interceptor).IsEditable(arg1);
		}
		[SmokeMethod("isEditable", "() const", "")]
		public bool IsEditable() {
			return ((QMetaProperty) interceptor).IsEditable();
		}
		[SmokeMethod("isUser", "(const QObject*) const", "#")]
		public bool IsUser(QObject arg1) {
			return ((QMetaProperty) interceptor).IsUser(arg1);
		}
		[SmokeMethod("isUser", "() const", "")]
		public bool IsUser() {
			return ((QMetaProperty) interceptor).IsUser();
		}
		[SmokeMethod("isFlagType", "() const", "")]
		public bool IsFlagType() {
			return ((QMetaProperty) interceptor).IsFlagType();
		}
		[SmokeMethod("isEnumType", "() const", "")]
		public bool IsEnumType() {
			return ((QMetaProperty) interceptor).IsEnumType();
		}
		[SmokeMethod("enumerator", "() const", "")]
		public QMetaEnum Enumerator() {
			return ((QMetaProperty) interceptor).Enumerator();
		}
		[SmokeMethod("read", "(const QObject*) const", "#")]
		public QVariant Read(QObject arg1) {
			return ((QMetaProperty) interceptor).Read(arg1);
		}
		[SmokeMethod("write", "(QObject*, const QVariant&) const", "##")]
		public bool Write(QObject arg1, QVariant value) {
			return ((QMetaProperty) interceptor).Write(arg1,value);
		}
		[SmokeMethod("reset", "(QObject*) const", "#")]
		public bool Reset(QObject arg1) {
			return ((QMetaProperty) interceptor).Reset(arg1);
		}
		[SmokeMethod("hasStdCppSet", "() const", "")]
		public bool HasStdCppSet() {
			return ((QMetaProperty) interceptor).HasStdCppSet();
		}
		[SmokeMethod("isValid", "() const", "")]
		public bool IsValid() {
			return ((QMetaProperty) interceptor).IsValid();
		}
		~QMetaProperty() {
			DisposeQMetaProperty();
		}
		public void Dispose() {
			DisposeQMetaProperty();
		}
		[SmokeMethod("~QMetaProperty", "()", "")]
		private void DisposeQMetaProperty() {
			((QMetaProperty) interceptor).DisposeQMetaProperty();
		}
	}
}
