//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QTimerEvent")]
	public class QTimerEvent : QEvent, IDisposable {
 		protected QTimerEvent(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTimerEvent), this);
			interceptor = (QTimerEvent) realProxy.GetTransparentProxy();
		}
		public QTimerEvent(int timerId) : this((Type) null) {
			CreateProxy();
			NewQTimerEvent(timerId);
		}
		[SmokeMethod("QTimerEvent", "(int)", "$")]
		private void NewQTimerEvent(int timerId) {
			((QTimerEvent) interceptor).NewQTimerEvent(timerId);
		}
		[SmokeMethod("timerId", "() const", "")]
		public int TimerId() {
			return ((QTimerEvent) interceptor).TimerId();
		}
		~QTimerEvent() {
			DisposeQTimerEvent();
		}
		public new void Dispose() {
			DisposeQTimerEvent();
		}
		[SmokeMethod("~QTimerEvent", "()", "")]
		private void DisposeQTimerEvent() {
			((QTimerEvent) interceptor).DisposeQTimerEvent();
		}
	}
}
