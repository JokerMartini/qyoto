//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	[SmokeClass("QVariant")]
	public partial class QVariant : MarshalByRefObject, IDisposable {
		protected QVariant interceptor = null;
		private IntPtr smokeObject;
		protected QVariant(Type dummy) {}
		[SmokeClass("QVariant")]
		interface IQVariantProxy {
			[SmokeMethod("operator==", "(const QVariant&) const", "#")]
			bool op_equals(QVariant lhs, QVariant v);
			[SmokeMethod("typeToName", "(QVariant::Type)", "$")]
			string TypeToName(QVariant.TypeOf type);
			[SmokeMethod("nameToType", "(const char*)", "$")]
			QVariant.TypeOf NameToType(string name);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QVariant), this);
			interceptor = (QVariant) realProxy.GetTransparentProxy();
		}
		private static IQVariantProxy staticInterceptor = null;
		static QVariant() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQVariantProxy), null);
			staticInterceptor = (IQVariantProxy) realProxy.GetTransparentProxy();
		}
		public enum TypeOf : uint {
			Invalid = 0,
			Bool = 1,
			Int = 2,
			UInt = 3,
			LongLong = 4,
			ULongLong = 5,
			Double = 6,
			Char = 7,
			Map = 8,
			List = 9,
			String = 10,
			StringList = 11,
			ByteArray = 12,
			BitArray = 13,
			Date = 14,
			Time = 15,
			DateTime = 16,
			Url = 17,
			Locale = 18,
			Rect = 19,
			RectF = 20,
			Size = 21,
			SizeF = 22,
			Line = 23,
			LineF = 24,
			Point = 25,
			PointF = 26,
			RegExp = 27,
			LastCoreType = RegExp,
			Font = 64,
			Pixmap = 65,
			Brush = 66,
			Color = 67,
			Palette = 68,
			Icon = 69,
			Image = 70,
			Polygon = 71,
			Region = 72,
			Bitmap = 73,
			Cursor = 74,
			SizePolicy = 75,
			KeySequence = 76,
			Pen = 77,
			TextLength = 78,
			TextFormat = 79,
			Matrix = 80,
			LastGuiType = Matrix,
			UserType = 127,
			LastType = 0xffffffff,
		}
		// QVariant* QVariant(int arg1,const void* arg2); >>>> NOT CONVERTED
		// QVariant* QVariant(const QBitArray& arg1); >>>> NOT CONVERTED
		// QVariant* QVariant(const QLatin1String& arg1); >>>> NOT CONVERTED
		// QBitArray toBitArray(); >>>> NOT CONVERTED
		// void* data(); >>>> NOT CONVERTED
		// const void* constData(); >>>> NOT CONVERTED
		// const void* data(); >>>> NOT CONVERTED
		// void create(int arg1,const void* arg2); >>>> NOT CONVERTED
		// bool operator==(const QVariant& arg1,const QVariantComparisonHelper& arg2); >>>> NOT CONVERTED
		public QVariant() : this((Type) null) {
			CreateProxy();
			NewQVariant();
		}
		[SmokeMethod("QVariant", "()", "")]
		private void NewQVariant() {
			((QVariant) interceptor).NewQVariant();
		}
		public QVariant(QVariant.TypeOf type) : this((Type) null) {
			CreateProxy();
			NewQVariant(type);
		}
		[SmokeMethod("QVariant", "(QVariant::Type)", "$")]
		private void NewQVariant(QVariant.TypeOf type) {
			((QVariant) interceptor).NewQVariant(type);
		}
		public QVariant(QVariant other) : this((Type) null) {
			CreateProxy();
			NewQVariant(other);
		}
		[SmokeMethod("QVariant", "(const QVariant&)", "#")]
		private void NewQVariant(QVariant other) {
			((QVariant) interceptor).NewQVariant(other);
		}
		public QVariant(QDataStream s) : this((Type) null) {
			CreateProxy();
			NewQVariant(s);
		}
		[SmokeMethod("QVariant", "(QDataStream&)", "#")]
		private void NewQVariant(QDataStream s) {
			((QVariant) interceptor).NewQVariant(s);
		}
		public QVariant(int i) : this((Type) null) {
			CreateProxy();
			NewQVariant(i);
		}
		[SmokeMethod("QVariant", "(int)", "$")]
		private void NewQVariant(int i) {
			((QVariant) interceptor).NewQVariant(i);
		}
		public QVariant(uint ui) : this((Type) null) {
			CreateProxy();
			NewQVariant(ui);
		}
		[SmokeMethod("QVariant", "(uint)", "$")]
		private void NewQVariant(uint ui) {
			((QVariant) interceptor).NewQVariant(ui);
		}
		public QVariant(long ll) : this((Type) null) {
			CreateProxy();
			NewQVariant(ll);
		}
		[SmokeMethod("QVariant", "(qlonglong)", "?")]
		private void NewQVariant(long ll) {
			((QVariant) interceptor).NewQVariant(ll);
		}
		public QVariant(ulong ull) : this((Type) null) {
			CreateProxy();
			NewQVariant(ull);
		}
		[SmokeMethod("QVariant", "(qulonglong)", "$")]
		private void NewQVariant(ulong ull) {
			((QVariant) interceptor).NewQVariant(ull);
		}
		public QVariant(bool b) : this((Type) null) {
			CreateProxy();
			NewQVariant(b);
		}
		[SmokeMethod("QVariant", "(bool)", "$")]
		private void NewQVariant(bool b) {
			((QVariant) interceptor).NewQVariant(b);
		}
		public QVariant(double d) : this((Type) null) {
			CreateProxy();
			NewQVariant(d);
		}
		[SmokeMethod("QVariant", "(double)", "$")]
		private void NewQVariant(double d) {
			((QVariant) interceptor).NewQVariant(d);
		}
		public QVariant(string str) : this((Type) null) {
			CreateProxy();
			NewQVariant(str);
		}
		[SmokeMethod("QVariant", "(const char*)", "$")]
		private void NewQVariant(string str) {
			((QVariant) interceptor).NewQVariant(str);
		}
		public QVariant(QByteArray bytearray) : this((Type) null) {
			CreateProxy();
			NewQVariant(bytearray);
		}
		[SmokeMethod("QVariant", "(const QByteArray&)", "#")]
		private void NewQVariant(QByteArray bytearray) {
			((QVariant) interceptor).NewQVariant(bytearray);
		}
		public QVariant(List<string> stringlist) : this((Type) null) {
			CreateProxy();
			NewQVariant(stringlist);
		}
		[SmokeMethod("QVariant", "(const QStringList&)", "?")]
		private void NewQVariant(List<string> stringlist) {
			((QVariant) interceptor).NewQVariant(stringlist);
		}
		public QVariant(char qchar) : this((Type) null) {
			CreateProxy();
			NewQVariant(qchar);
		}
		[SmokeMethod("QVariant", "(const QChar&)", "#")]
		private void NewQVariant(char qchar) {
			((QVariant) interceptor).NewQVariant(qchar);
		}
		public QVariant(QDate date) : this((Type) null) {
			CreateProxy();
			NewQVariant(date);
		}
		[SmokeMethod("QVariant", "(const QDate&)", "#")]
		private void NewQVariant(QDate date) {
			((QVariant) interceptor).NewQVariant(date);
		}
		public QVariant(QTime time) : this((Type) null) {
			CreateProxy();
			NewQVariant(time);
		}
		[SmokeMethod("QVariant", "(const QTime&)", "#")]
		private void NewQVariant(QTime time) {
			((QVariant) interceptor).NewQVariant(time);
		}
		public QVariant(QDateTime datetime) : this((Type) null) {
			CreateProxy();
			NewQVariant(datetime);
		}
		[SmokeMethod("QVariant", "(const QDateTime&)", "#")]
		private void NewQVariant(QDateTime datetime) {
			((QVariant) interceptor).NewQVariant(datetime);
		}
		public QVariant(List<QVariant> list) : this((Type) null) {
			CreateProxy();
			NewQVariant(list);
		}
		[SmokeMethod("QVariant", "(const QList<QVariant>&)", "?")]
		private void NewQVariant(List<QVariant> list) {
			((QVariant) interceptor).NewQVariant(list);
		}
		public QVariant(Dictionary<string, QVariant> map) : this((Type) null) {
			CreateProxy();
			NewQVariant(map);
		}
		[SmokeMethod("QVariant", "(const QMap<QString, QVariant>&)", "?")]
		private void NewQVariant(Dictionary<string, QVariant> map) {
			((QVariant) interceptor).NewQVariant(map);
		}
		public QVariant(QSize size) : this((Type) null) {
			CreateProxy();
			NewQVariant(size);
		}
		[SmokeMethod("QVariant", "(const QSize&)", "#")]
		private void NewQVariant(QSize size) {
			((QVariant) interceptor).NewQVariant(size);
		}
		public QVariant(QSizeF size) : this((Type) null) {
			CreateProxy();
			NewQVariant(size);
		}
		[SmokeMethod("QVariant", "(const QSizeF&)", "#")]
		private void NewQVariant(QSizeF size) {
			((QVariant) interceptor).NewQVariant(size);
		}
		public QVariant(QPoint pt) : this((Type) null) {
			CreateProxy();
			NewQVariant(pt);
		}
		[SmokeMethod("QVariant", "(const QPoint&)", "#")]
		private void NewQVariant(QPoint pt) {
			((QVariant) interceptor).NewQVariant(pt);
		}
		public QVariant(QPointF pt) : this((Type) null) {
			CreateProxy();
			NewQVariant(pt);
		}
		[SmokeMethod("QVariant", "(const QPointF&)", "#")]
		private void NewQVariant(QPointF pt) {
			((QVariant) interceptor).NewQVariant(pt);
		}
		public QVariant(QLine line) : this((Type) null) {
			CreateProxy();
			NewQVariant(line);
		}
		[SmokeMethod("QVariant", "(const QLine&)", "#")]
		private void NewQVariant(QLine line) {
			((QVariant) interceptor).NewQVariant(line);
		}
		public QVariant(QLineF line) : this((Type) null) {
			CreateProxy();
			NewQVariant(line);
		}
		[SmokeMethod("QVariant", "(const QLineF&)", "#")]
		private void NewQVariant(QLineF line) {
			((QVariant) interceptor).NewQVariant(line);
		}
		public QVariant(QRect rect) : this((Type) null) {
			CreateProxy();
			NewQVariant(rect);
		}
		[SmokeMethod("QVariant", "(const QRect&)", "#")]
		private void NewQVariant(QRect rect) {
			((QVariant) interceptor).NewQVariant(rect);
		}
		public QVariant(QRectF rect) : this((Type) null) {
			CreateProxy();
			NewQVariant(rect);
		}
		[SmokeMethod("QVariant", "(const QRectF&)", "#")]
		private void NewQVariant(QRectF rect) {
			((QVariant) interceptor).NewQVariant(rect);
		}
		public QVariant(IQUrl url) : this((Type) null) {
			CreateProxy();
			NewQVariant(url);
		}
		[SmokeMethod("QVariant", "(const QUrl&)", "#")]
		private void NewQVariant(IQUrl url) {
			((QVariant) interceptor).NewQVariant(url);
		}
		public QVariant(QLocale locale) : this((Type) null) {
			CreateProxy();
			NewQVariant(locale);
		}
		[SmokeMethod("QVariant", "(const QLocale&)", "#")]
		private void NewQVariant(QLocale locale) {
			((QVariant) interceptor).NewQVariant(locale);
		}
		public QVariant(QRegExp regExp) : this((Type) null) {
			CreateProxy();
			NewQVariant(regExp);
		}
		[SmokeMethod("QVariant", "(const QRegExp&)", "#")]
		private void NewQVariant(QRegExp regExp) {
			((QVariant) interceptor).NewQVariant(regExp);
		}
		public QVariant(Qt.GlobalColor color) : this((Type) null) {
			CreateProxy();
			NewQVariant(color);
		}
		[SmokeMethod("QVariant", "(Qt::GlobalColor)", "$")]
		private void NewQVariant(Qt.GlobalColor color) {
			((QVariant) interceptor).NewQVariant(color);
		}
		[SmokeMethod("type", "() const", "")]
		public QVariant.TypeOf type() {
			return ((QVariant) interceptor).type();
		}
		[SmokeMethod("userType", "() const", "")]
		public int UserType() {
			return ((QVariant) interceptor).UserType();
		}
		[SmokeMethod("typeName", "() const", "")]
		public string TypeName() {
			return ((QVariant) interceptor).TypeName();
		}
		[SmokeMethod("canConvert", "(QVariant::Type) const", "$")]
		public bool CanConvert(QVariant.TypeOf t) {
			return ((QVariant) interceptor).CanConvert(t);
		}
		[SmokeMethod("convert", "(QVariant::Type)", "$")]
		public bool Convert(QVariant.TypeOf t) {
			return ((QVariant) interceptor).Convert(t);
		}
		[SmokeMethod("isValid", "() const", "")]
		public bool IsValid() {
			return ((QVariant) interceptor).IsValid();
		}
		[SmokeMethod("isNull", "() const", "")]
		public bool IsNull() {
			return ((QVariant) interceptor).IsNull();
		}
		[SmokeMethod("clear", "()", "")]
		public void Clear() {
			((QVariant) interceptor).Clear();
		}
		[SmokeMethod("detach", "()", "")]
		public void Detach() {
			((QVariant) interceptor).Detach();
		}
		[SmokeMethod("isDetached", "() const", "")]
		public bool IsDetached() {
			return ((QVariant) interceptor).IsDetached();
		}
		[SmokeMethod("toInt", "(bool*) const", "$")]
		public int ToInt(out bool ok) {
			return ((QVariant) interceptor).ToInt(out ok);
		}
		[SmokeMethod("toInt", "() const", "")]
		public int ToInt() {
			return ((QVariant) interceptor).ToInt();
		}
		[SmokeMethod("toUInt", "(bool*) const", "$")]
		public uint ToUInt(out bool ok) {
			return ((QVariant) interceptor).ToUInt(out ok);
		}
		[SmokeMethod("toUInt", "() const", "")]
		public uint ToUInt() {
			return ((QVariant) interceptor).ToUInt();
		}
		[SmokeMethod("toLongLong", "(bool*) const", "$")]
		public long ToLongLong(out bool ok) {
			return ((QVariant) interceptor).ToLongLong(out ok);
		}
		[SmokeMethod("toLongLong", "() const", "")]
		public long ToLongLong() {
			return ((QVariant) interceptor).ToLongLong();
		}
		[SmokeMethod("toULongLong", "(bool*) const", "$")]
		public ulong ToULongLong(out bool ok) {
			return ((QVariant) interceptor).ToULongLong(out ok);
		}
		[SmokeMethod("toULongLong", "() const", "")]
		public ulong ToULongLong() {
			return ((QVariant) interceptor).ToULongLong();
		}
		[SmokeMethod("toBool", "() const", "")]
		public bool ToBool() {
			return ((QVariant) interceptor).ToBool();
		}
		[SmokeMethod("toDouble", "(bool*) const", "$")]
		public double ToDouble(out bool ok) {
			return ((QVariant) interceptor).ToDouble(out ok);
		}
		[SmokeMethod("toDouble", "() const", "")]
		public double ToDouble() {
			return ((QVariant) interceptor).ToDouble();
		}
		[SmokeMethod("toByteArray", "() const", "")]
		public QByteArray ToByteArray() {
			return ((QVariant) interceptor).ToByteArray();
		}
		[SmokeMethod("toString", "() const", "")]
		public string ToString() {
			return ((QVariant) interceptor).ToString();
		}
		[SmokeMethod("toStringList", "() const", "")]
		public List<string> ToStringList() {
			return ((QVariant) interceptor).ToStringList();
		}
		[SmokeMethod("toChar", "() const", "")]
		public char ToChar() {
			return ((QVariant) interceptor).ToChar();
		}
		[SmokeMethod("toDate", "() const", "")]
		public QDate ToDate() {
			return ((QVariant) interceptor).ToDate();
		}
		[SmokeMethod("toTime", "() const", "")]
		public QTime ToTime() {
			return ((QVariant) interceptor).ToTime();
		}
		[SmokeMethod("toDateTime", "() const", "")]
		public QDateTime ToDateTime() {
			return ((QVariant) interceptor).ToDateTime();
		}
		[SmokeMethod("toList", "() const", "")]
		public List<QVariant> ToList() {
			return ((QVariant) interceptor).ToList();
		}
		[SmokeMethod("toMap", "() const", "")]
		public Dictionary<string, QVariant> ToMap() {
			return ((QVariant) interceptor).ToMap();
		}
		[SmokeMethod("toPoint", "() const", "")]
		public QPoint ToPoint() {
			return ((QVariant) interceptor).ToPoint();
		}
		[SmokeMethod("toPointF", "() const", "")]
		public QPointF ToPointF() {
			return ((QVariant) interceptor).ToPointF();
		}
		[SmokeMethod("toRect", "() const", "")]
		public QRect ToRect() {
			return ((QVariant) interceptor).ToRect();
		}
		[SmokeMethod("toSize", "() const", "")]
		public QSize ToSize() {
			return ((QVariant) interceptor).ToSize();
		}
		[SmokeMethod("toSizeF", "() const", "")]
		public QSizeF ToSizeF() {
			return ((QVariant) interceptor).ToSizeF();
		}
		[SmokeMethod("toLine", "() const", "")]
		public QLine ToLine() {
			return ((QVariant) interceptor).ToLine();
		}
		[SmokeMethod("toLineF", "() const", "")]
		public QLineF ToLineF() {
			return ((QVariant) interceptor).ToLineF();
		}
		[SmokeMethod("toRectF", "() const", "")]
		public QRectF ToRectF() {
			return ((QVariant) interceptor).ToRectF();
		}
		[SmokeMethod("toUrl", "() const", "")]
		public IQUrl ToUrl() {
			return ((QVariant) interceptor).ToUrl();
		}
		[SmokeMethod("toLocale", "() const", "")]
		public QLocale ToLocale() {
			return ((QVariant) interceptor).ToLocale();
		}
		[SmokeMethod("toRegExp", "() const", "")]
		public QRegExp ToRegExp() {
			return ((QVariant) interceptor).ToRegExp();
		}
		[SmokeMethod("load", "(QDataStream&)", "#")]
		public void Load(QDataStream ds) {
			((QVariant) interceptor).Load(ds);
		}
		[SmokeMethod("save", "(QDataStream&) const", "#")]
		public void Save(QDataStream ds) {
			((QVariant) interceptor).Save(ds);
		}
		public override bool Equals(object o) {
			if (!(o is QVariant)) { return false; }
			return this == (QVariant) o;
		}
		public override int GetHashCode() {
			return ((QVariant) interceptor).GetHashCode();
		}
		[SmokeMethod("cmp", "(const QVariant&) const", "#")]
		protected bool Cmp(QVariant other) {
			return ((QVariant) interceptor).Cmp(other);
		}
		~QVariant() {
			DisposeQVariant();
		}
		public void Dispose() {
			DisposeQVariant();
		}
		[SmokeMethod("~QVariant", "()", "")]
		private void DisposeQVariant() {
			((QVariant) interceptor).DisposeQVariant();
		}
		public static bool operator==(QVariant lhs, QVariant v) {
			return staticInterceptor.op_equals(lhs,v);
		}
		public static bool operator!=(QVariant lhs, QVariant v) {
			return !staticInterceptor.op_equals(lhs,v);
		}
		public static string TypeToName(QVariant.TypeOf type) {
			return staticInterceptor.TypeToName(type);
		}
		public static QVariant.TypeOf NameToType(string name) {
			return staticInterceptor.NameToType(name);
		}
	}
}
