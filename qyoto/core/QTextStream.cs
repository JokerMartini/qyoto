//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;

	[SmokeClass("QTextStream")]
	public class QTextStream : MarshalByRefObject, IDisposable {
		protected QTextStream interceptor = null;
		private IntPtr smokeObject;
		protected QTextStream(Type dummy) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTextStream), this);
			interceptor = (QTextStream) realProxy.GetTransparentProxy();
		}
		public enum RealNumberNotation {
			SmartNotation = 0,
			FixedNotation = 1,
			ScientificNotation = 2,
		}
		public enum FieldAlignment {
			AlignLeft = 0,
			AlignRight = 1,
			AlignCenter = 2,
			AlignAccountingStyle = 3,
		}
		public enum Status {
			Ok = 0,
			ReadPastEnd = 1,
			ReadCorruptData = 2,
		}
		public enum NumberFlag {
			ShowBase = 0x1,
			ForcePoint = 0x2,
			ForceSign = 0x4,
			UppercaseBase = 0x8,
			UppercaseDigits = 0x10,
		}
		// QTextStream& operator>>(signed short& arg1); >>>> NOT CONVERTED
		// QTextStream& operator>>(signed int& arg1); >>>> NOT CONVERTED
		// QTextStream& operator>>(signed long& arg1); >>>> NOT CONVERTED
		// QTextStream& operator>>(qlonglong& arg1); >>>> NOT CONVERTED
		// QTextStream& operator>>(qulonglong& arg1); >>>> NOT CONVERTED
		// QTextStream& operator<<(signed short arg1); >>>> NOT CONVERTED
		// QTextStream& operator<<(signed int arg1); >>>> NOT CONVERTED
		// QTextStream& operator<<(signed long arg1); >>>> NOT CONVERTED
		// QTextStream& operator<<(const void* arg1); >>>> NOT CONVERTED
		public QTextStream() : this((Type) null) {
			CreateProxy();
			NewQTextStream();
		}
		[SmokeMethod("QTextStream", "()", "")]
		private void NewQTextStream() {
			((QTextStream) interceptor).NewQTextStream();
		}
		public QTextStream(QIODevice device) : this((Type) null) {
			CreateProxy();
			NewQTextStream(device);
		}
		[SmokeMethod("QTextStream", "(QIODevice*)", "#")]
		private void NewQTextStream(QIODevice device) {
			((QTextStream) interceptor).NewQTextStream(device);
		}
		public QTextStream(StringBuilder arg1, int openMode) : this((Type) null) {
			CreateProxy();
			NewQTextStream(arg1,openMode);
		}
		[SmokeMethod("QTextStream", "(QString*, QIODevice::OpenMode)", "$$")]
		private void NewQTextStream(StringBuilder arg1, int openMode) {
			((QTextStream) interceptor).NewQTextStream(arg1,openMode);
		}
		public QTextStream(StringBuilder arg1) : this((Type) null) {
			CreateProxy();
			NewQTextStream(arg1);
		}
		[SmokeMethod("QTextStream", "(QString*)", "$")]
		private void NewQTextStream(StringBuilder arg1) {
			((QTextStream) interceptor).NewQTextStream(arg1);
		}
		public QTextStream(QByteArray array, int openMode) : this((Type) null) {
			CreateProxy();
			NewQTextStream(array,openMode);
		}
		[SmokeMethod("QTextStream", "(QByteArray*, QIODevice::OpenMode)", "#$")]
		private void NewQTextStream(QByteArray array, int openMode) {
			((QTextStream) interceptor).NewQTextStream(array,openMode);
		}
		public QTextStream(QByteArray array) : this((Type) null) {
			CreateProxy();
			NewQTextStream(array);
		}
		[SmokeMethod("QTextStream", "(QByteArray*)", "#")]
		private void NewQTextStream(QByteArray array) {
			((QTextStream) interceptor).NewQTextStream(array);
		}
		[SmokeMethod("setCodec", "(QTextCodec*)", "#")]
		public void SetCodec(QTextCodec codec) {
			((QTextStream) interceptor).SetCodec(codec);
		}
		[SmokeMethod("setCodec", "(const char*)", "$")]
		public void SetCodec(string codecName) {
			((QTextStream) interceptor).SetCodec(codecName);
		}
		[SmokeMethod("codec", "() const", "")]
		public QTextCodec Codec() {
			return ((QTextStream) interceptor).Codec();
		}
		[SmokeMethod("setAutoDetectUnicode", "(bool)", "$")]
		public void SetAutoDetectUnicode(bool enabled) {
			((QTextStream) interceptor).SetAutoDetectUnicode(enabled);
		}
		[SmokeMethod("autoDetectUnicode", "() const", "")]
		public bool AutoDetectUnicode() {
			return ((QTextStream) interceptor).AutoDetectUnicode();
		}
		[SmokeMethod("setGenerateByteOrderMark", "(bool)", "$")]
		public void SetGenerateByteOrderMark(bool generate) {
			((QTextStream) interceptor).SetGenerateByteOrderMark(generate);
		}
		[SmokeMethod("generateByteOrderMark", "() const", "")]
		public bool GenerateByteOrderMark() {
			return ((QTextStream) interceptor).GenerateByteOrderMark();
		}
		[SmokeMethod("setDevice", "(QIODevice*)", "#")]
		public void SetDevice(QIODevice device) {
			((QTextStream) interceptor).SetDevice(device);
		}
		[SmokeMethod("device", "() const", "")]
		public QIODevice Device() {
			return ((QTextStream) interceptor).Device();
		}
		[SmokeMethod("setString", "(QString*, QIODevice::OpenMode)", "$$")]
		public void SetString(StringBuilder arg1, int openMode) {
			((QTextStream) interceptor).SetString(arg1,openMode);
		}
		[SmokeMethod("setString", "(QString*)", "$")]
		public void SetString(StringBuilder arg1) {
			((QTextStream) interceptor).SetString(arg1);
		}
		[SmokeMethod("string", "() const", "")]
		public string String() {
			return ((QTextStream) interceptor).String();
		}
		[SmokeMethod("status", "() const", "")]
		public QTextStream.Status status() {
			return ((QTextStream) interceptor).status();
		}
		[SmokeMethod("setStatus", "(QTextStream::Status)", "$")]
		public void SetStatus(QTextStream.Status status) {
			((QTextStream) interceptor).SetStatus(status);
		}
		[SmokeMethod("resetStatus", "()", "")]
		public void ResetStatus() {
			((QTextStream) interceptor).ResetStatus();
		}
		[SmokeMethod("atEnd", "() const", "")]
		public bool AtEnd() {
			return ((QTextStream) interceptor).AtEnd();
		}
		[SmokeMethod("reset", "()", "")]
		public void Reset() {
			((QTextStream) interceptor).Reset();
		}
		[SmokeMethod("flush", "()", "")]
		public void Flush() {
			((QTextStream) interceptor).Flush();
		}
		[SmokeMethod("seek", "(qint64)", "$")]
		public bool Seek(long pos) {
			return ((QTextStream) interceptor).Seek(pos);
		}
		[SmokeMethod("pos", "() const", "")]
		public long Pos() {
			return ((QTextStream) interceptor).Pos();
		}
		[SmokeMethod("skipWhiteSpace", "()", "")]
		public void SkipWhiteSpace() {
			((QTextStream) interceptor).SkipWhiteSpace();
		}
		[SmokeMethod("readLine", "(qint64)", "$")]
		public string ReadLine(long maxlen) {
			return ((QTextStream) interceptor).ReadLine(maxlen);
		}
		[SmokeMethod("readLine", "()", "")]
		public string ReadLine() {
			return ((QTextStream) interceptor).ReadLine();
		}
		[SmokeMethod("readAll", "()", "")]
		public string ReadAll() {
			return ((QTextStream) interceptor).ReadAll();
		}
		[SmokeMethod("read", "(qint64)", "$")]
		public string Read(long maxlen) {
			return ((QTextStream) interceptor).Read(maxlen);
		}
		[SmokeMethod("setFieldAlignment", "(QTextStream::FieldAlignment)", "$")]
		public void SetFieldAlignment(QTextStream.FieldAlignment alignment) {
			((QTextStream) interceptor).SetFieldAlignment(alignment);
		}
		[SmokeMethod("fieldAlignment", "() const", "")]
		public QTextStream.FieldAlignment fieldAlignment() {
			return ((QTextStream) interceptor).fieldAlignment();
		}
		[SmokeMethod("setPadChar", "(QChar)", "#")]
		public void SetPadChar(char ch) {
			((QTextStream) interceptor).SetPadChar(ch);
		}
		[SmokeMethod("padChar", "() const", "")]
		public char PadChar() {
			return ((QTextStream) interceptor).PadChar();
		}
		[SmokeMethod("setFieldWidth", "(int)", "$")]
		public void SetFieldWidth(int width) {
			((QTextStream) interceptor).SetFieldWidth(width);
		}
		[SmokeMethod("fieldWidth", "() const", "")]
		public int FieldWidth() {
			return ((QTextStream) interceptor).FieldWidth();
		}
		[SmokeMethod("setNumberFlags", "(NumberFlags)", "$")]
		public void SetNumberFlags(int flags) {
			((QTextStream) interceptor).SetNumberFlags(flags);
		}
		[SmokeMethod("numberFlags", "() const", "")]
		public int NumberFlags() {
			return ((QTextStream) interceptor).NumberFlags();
		}
		[SmokeMethod("setIntegerBase", "(int)", "$")]
		public void SetIntegerBase(int arg1) {
			((QTextStream) interceptor).SetIntegerBase(arg1);
		}
		[SmokeMethod("integerBase", "() const", "")]
		public int IntegerBase() {
			return ((QTextStream) interceptor).IntegerBase();
		}
		[SmokeMethod("setRealNumberNotation", "(QTextStream::RealNumberNotation)", "$")]
		public void SetRealNumberNotation(QTextStream.RealNumberNotation notation) {
			((QTextStream) interceptor).SetRealNumberNotation(notation);
		}
		[SmokeMethod("realNumberNotation", "() const", "")]
		public QTextStream.RealNumberNotation realNumberNotation() {
			return ((QTextStream) interceptor).realNumberNotation();
		}
		[SmokeMethod("setRealNumberPrecision", "(int)", "$")]
		public void SetRealNumberPrecision(int precision) {
			((QTextStream) interceptor).SetRealNumberPrecision(precision);
		}
		[SmokeMethod("realNumberPrecision", "() const", "")]
		public int RealNumberPrecision() {
			return ((QTextStream) interceptor).RealNumberPrecision();
		}
		[SmokeMethod("operator>>", "(QChar&)", "#")]
		public QTextStream Read(char ch) {
			return ((QTextStream) interceptor).Read(ch);
		}
		[SmokeMethod("operator>>", "(unsigned short&)", "$")]
		public QTextStream Read(ushort i) {
			return ((QTextStream) interceptor).Read(i);
		}
		[SmokeMethod("operator>>", "(unsigned int&)", "$")]
		public QTextStream Read(uint i) {
			return ((QTextStream) interceptor).Read(i);
		}
		[SmokeMethod("operator>>", "(unsigned long&)", "$")]
		public QTextStream Read(ulong i) {
			return ((QTextStream) interceptor).Read(i);
		}
		[SmokeMethod("operator>>", "(float&)", "$")]
		public QTextStream Read(float f) {
			return ((QTextStream) interceptor).Read(f);
		}
		[SmokeMethod("operator>>", "(double&)", "$")]
		public QTextStream Read(double f) {
			return ((QTextStream) interceptor).Read(f);
		}
		[SmokeMethod("operator>>", "(QString&)", "$")]
		public QTextStream Read(StringBuilder s) {
			return ((QTextStream) interceptor).Read(s);
		}
		[SmokeMethod("operator>>", "(QByteArray&)", "#")]
		public QTextStream Read(QByteArray array) {
			return ((QTextStream) interceptor).Read(array);
		}
		[SmokeMethod("operator>>", "(char*)", "$")]
		public QTextStream Read(string c) {
			return ((QTextStream) interceptor).Read(c);
		}
		[SmokeMethod("operator<<", "(QBool)", "#")]
		public QTextStream Write(QBool b) {
			return ((QTextStream) interceptor).Write(b);
		}
		[SmokeMethod("operator<<", "(QChar)", "#")]
		public QTextStream Write(char ch) {
			return ((QTextStream) interceptor).Write(ch);
		}
		[SmokeMethod("operator<<", "(unsigned short)", "$")]
		public QTextStream Write(ushort i) {
			return ((QTextStream) interceptor).Write(i);
		}
		[SmokeMethod("operator<<", "(unsigned int)", "$")]
		public QTextStream Write(uint i) {
			return ((QTextStream) interceptor).Write(i);
		}
		[SmokeMethod("operator<<", "(unsigned long)", "$")]
		public QTextStream Write(ulong i) {
			return ((QTextStream) interceptor).Write(i);
		}
		[SmokeMethod("operator<<", "(qlonglong)", "?")]
		public QTextStream Write(long i) {
			return ((QTextStream) interceptor).Write(i);
		}
		[SmokeMethod("operator<<", "(float)", "$")]
		public QTextStream Write(float f) {
			return ((QTextStream) interceptor).Write(f);
		}
		[SmokeMethod("operator<<", "(double)", "$")]
		public QTextStream Write(double f) {
			return ((QTextStream) interceptor).Write(f);
		}
		[SmokeMethod("operator<<", "(const QString&)", "$")]
		public QTextStream Write(string s) {
			return ((QTextStream) interceptor).Write(s);
		}
		[SmokeMethod("operator<<", "(const QByteArray&)", "#")]
		public QTextStream Write(QByteArray array) {
			return ((QTextStream) interceptor).Write(array);
		}
		~QTextStream() {
			DisposeQTextStream();
		}
		public void Dispose() {
			DisposeQTextStream();
		}
		[SmokeMethod("~QTextStream", "()", "")]
		private void DisposeQTextStream() {
			((QTextStream) interceptor).DisposeQTextStream();
		}
	}
}
