//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QMetaEnum")]
	public class QMetaEnum : MarshalByRefObject, IDisposable {
		protected QMetaEnum interceptor = null;
		private IntPtr smokeObject;
		protected QMetaEnum(Type dummy) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QMetaEnum), this);
			interceptor = (QMetaEnum) realProxy.GetTransparentProxy();
		}
		public QMetaEnum() : this((Type) null) {
			CreateProxy();
			NewQMetaEnum();
		}
		[SmokeMethod("QMetaEnum", "()", "")]
		private void NewQMetaEnum() {
			((QMetaEnum) interceptor).NewQMetaEnum();
		}
		[SmokeMethod("name", "() const", "")]
		public string Name() {
			return ((QMetaEnum) interceptor).Name();
		}
		[SmokeMethod("isFlag", "() const", "")]
		public bool IsFlag() {
			return ((QMetaEnum) interceptor).IsFlag();
		}
		[SmokeMethod("keyCount", "() const", "")]
		public int KeyCount() {
			return ((QMetaEnum) interceptor).KeyCount();
		}
		[SmokeMethod("key", "(int) const", "$")]
		public string Key(int index) {
			return ((QMetaEnum) interceptor).Key(index);
		}
		[SmokeMethod("value", "(int) const", "$")]
		public int Value(int index) {
			return ((QMetaEnum) interceptor).Value(index);
		}
		[SmokeMethod("scope", "() const", "")]
		public string Scope() {
			return ((QMetaEnum) interceptor).Scope();
		}
		[SmokeMethod("keyToValue", "(const char*) const", "$")]
		public int KeyToValue(string key) {
			return ((QMetaEnum) interceptor).KeyToValue(key);
		}
		[SmokeMethod("valueToKey", "(int) const", "$")]
		public string ValueToKey(int value) {
			return ((QMetaEnum) interceptor).ValueToKey(value);
		}
		[SmokeMethod("keysToValue", "(const char*) const", "$")]
		public int KeysToValue(string keys) {
			return ((QMetaEnum) interceptor).KeysToValue(keys);
		}
		[SmokeMethod("valueToKeys", "(int) const", "$")]
		public QByteArray ValueToKeys(int value) {
			return ((QMetaEnum) interceptor).ValueToKeys(value);
		}
		[SmokeMethod("isValid", "() const", "")]
		public bool IsValid() {
			return ((QMetaEnum) interceptor).IsValid();
		}
		~QMetaEnum() {
			DisposeQMetaEnum();
		}
		public void Dispose() {
			DisposeQMetaEnum();
		}
		[SmokeMethod("~QMetaEnum", "()", "")]
		private void DisposeQMetaEnum() {
			((QMetaEnum) interceptor).DisposeQMetaEnum();
		}
	}
}
