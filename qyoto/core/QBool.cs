//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QBool")]
	public class QBool : MarshalByRefObject, IDisposable {
		protected QBool interceptor = null;
		private IntPtr smokeObject;
		protected QBool(Type dummy) {}
		[SmokeClass("QBool")]
		interface IQBoolProxy {
			[SmokeMethod("operator==", "(QBool, bool)", "#$")]
			bool op_equals(QBool b1, bool b2);
			[SmokeMethod("operator==", "(bool, QBool)", "$#")]
			bool op_equals(bool b1, QBool b2);
			[SmokeMethod("operator==", "(QBool, QBool)", "##")]
			bool op_equals(QBool b1, QBool b2);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QBool), this);
			interceptor = (QBool) realProxy.GetTransparentProxy();
		}
		private static IQBoolProxy staticInterceptor = null;
		static QBool() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQBoolProxy), null);
			staticInterceptor = (IQBoolProxy) realProxy.GetTransparentProxy();
		}
		//  operator const void *(); >>>> NOT CONVERTED
		public QBool(bool B) : this((Type) null) {
			CreateProxy();
			NewQBool(B);
		}
		[SmokeMethod("QBool", "(bool)", "$")]
		private void NewQBool(bool B) {
			((QBool) interceptor).NewQBool(B);
		}
		~QBool() {
			DisposeQBool();
		}
		public void Dispose() {
			DisposeQBool();
		}
		[SmokeMethod("~QBool", "()", "")]
		private void DisposeQBool() {
			((QBool) interceptor).DisposeQBool();
		}
		public static bool operator==(QBool b1, bool b2) {
			return staticInterceptor.op_equals(b1,b2);
		}
		public static bool operator!=(QBool b1, bool b2) {
			return !staticInterceptor.op_equals(b1,b2);
		}
		public static bool operator==(bool b1, QBool b2) {
			return staticInterceptor.op_equals(b1,b2);
		}
		public static bool operator!=(bool b1, QBool b2) {
			return !staticInterceptor.op_equals(b1,b2);
		}
		public static bool operator==(QBool b1, QBool b2) {
			return staticInterceptor.op_equals(b1,b2);
		}
		public static bool operator!=(QBool b1, QBool b2) {
			return !staticInterceptor.op_equals(b1,b2);
		}
	}
}
