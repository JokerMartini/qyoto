//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QDateTime")]
	public class QDateTime : MarshalByRefObject, IDisposable {
		protected QDateTime interceptor = null;
		private IntPtr smokeObject;
		protected QDateTime(Type dummy) {}
		[SmokeClass("QDateTime")]
		interface IQDateTimeProxy {
			[SmokeMethod("operator==", "(const QDateTime&) const", "#")]
			bool op_equals(QDateTime lhs, QDateTime other);
			[SmokeMethod("operator<", "(const QDateTime&) const", "#")]
			bool op_lt(QDateTime lhs, QDateTime other);
			[SmokeMethod("operator<=", "(const QDateTime&) const", "#")]
			bool op_lte(QDateTime lhs, QDateTime other);
			[SmokeMethod("operator>", "(const QDateTime&) const", "#")]
			bool op_gt(QDateTime lhs, QDateTime other);
			[SmokeMethod("operator>=", "(const QDateTime&) const", "#")]
			bool op_gte(QDateTime lhs, QDateTime other);
			[SmokeMethod("currentDateTime", "()", "")]
			QDateTime CurrentDateTime();
			[SmokeMethod("fromString", "(const QString&, Qt::DateFormat)", "$$")]
			QDateTime FromString(string s, Qt.DateFormat f);
			[SmokeMethod("fromString", "(const QString&)", "$")]
			QDateTime FromString(string s);
			[SmokeMethod("fromString", "(const QString&, const QString&)", "$$")]
			QDateTime FromString(string s, string format);
			[SmokeMethod("fromTime_t", "(uint)", "$")]
			QDateTime FromTime_t(uint secsSince1Jan1970UTC);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDateTime), this);
			interceptor = (QDateTime) realProxy.GetTransparentProxy();
		}
		private static IQDateTimeProxy staticInterceptor = null;
		static QDateTime() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDateTimeProxy), null);
			staticInterceptor = (IQDateTimeProxy) realProxy.GetTransparentProxy();
		}
		public QDateTime() : this((Type) null) {
			CreateProxy();
			NewQDateTime();
		}
		[SmokeMethod("QDateTime", "()", "")]
		private void NewQDateTime() {
			((QDateTime) interceptor).NewQDateTime();
		}
		public QDateTime(QDate arg1) : this((Type) null) {
			CreateProxy();
			NewQDateTime(arg1);
		}
		[SmokeMethod("QDateTime", "(const QDate&)", "#")]
		private void NewQDateTime(QDate arg1) {
			((QDateTime) interceptor).NewQDateTime(arg1);
		}
		public QDateTime(QDate arg1, QTime arg2, Qt.TimeSpec spec) : this((Type) null) {
			CreateProxy();
			NewQDateTime(arg1,arg2,spec);
		}
		[SmokeMethod("QDateTime", "(const QDate&, const QTime&, Qt::TimeSpec)", "##$")]
		private void NewQDateTime(QDate arg1, QTime arg2, Qt.TimeSpec spec) {
			((QDateTime) interceptor).NewQDateTime(arg1,arg2,spec);
		}
		public QDateTime(QDate arg1, QTime arg2) : this((Type) null) {
			CreateProxy();
			NewQDateTime(arg1,arg2);
		}
		[SmokeMethod("QDateTime", "(const QDate&, const QTime&)", "##")]
		private void NewQDateTime(QDate arg1, QTime arg2) {
			((QDateTime) interceptor).NewQDateTime(arg1,arg2);
		}
		public QDateTime(QDateTime other) : this((Type) null) {
			CreateProxy();
			NewQDateTime(other);
		}
		[SmokeMethod("QDateTime", "(const QDateTime&)", "#")]
		private void NewQDateTime(QDateTime other) {
			((QDateTime) interceptor).NewQDateTime(other);
		}
		[SmokeMethod("isNull", "() const", "")]
		public bool IsNull() {
			return ((QDateTime) interceptor).IsNull();
		}
		[SmokeMethod("isValid", "() const", "")]
		public bool IsValid() {
			return ((QDateTime) interceptor).IsValid();
		}
		[SmokeMethod("date", "() const", "")]
		public QDate Date() {
			return ((QDateTime) interceptor).Date();
		}
		[SmokeMethod("time", "() const", "")]
		public QTime Time() {
			return ((QDateTime) interceptor).Time();
		}
		[SmokeMethod("timeSpec", "() const", "")]
		public Qt.TimeSpec TimeSpec() {
			return ((QDateTime) interceptor).TimeSpec();
		}
		[SmokeMethod("toTime_t", "() const", "")]
		public uint ToTime_t() {
			return ((QDateTime) interceptor).ToTime_t();
		}
		[SmokeMethod("setDate", "(const QDate&)", "#")]
		public void SetDate(QDate date) {
			((QDateTime) interceptor).SetDate(date);
		}
		[SmokeMethod("setTime", "(const QTime&)", "#")]
		public void SetTime(QTime time) {
			((QDateTime) interceptor).SetTime(time);
		}
		[SmokeMethod("setTimeSpec", "(Qt::TimeSpec)", "$")]
		public void SetTimeSpec(Qt.TimeSpec spec) {
			((QDateTime) interceptor).SetTimeSpec(spec);
		}
		[SmokeMethod("setTime_t", "(uint)", "$")]
		public void SetTime_t(uint secsSince1Jan1970UTC) {
			((QDateTime) interceptor).SetTime_t(secsSince1Jan1970UTC);
		}
		[SmokeMethod("toString", "(Qt::DateFormat) const", "$")]
		public string ToString(Qt.DateFormat f) {
			return ((QDateTime) interceptor).ToString(f);
		}
		[SmokeMethod("toString", "() const", "")]
		public string ToString() {
			return ((QDateTime) interceptor).ToString();
		}
		[SmokeMethod("toString", "(const QString&) const", "$")]
		public string ToString(string format) {
			return ((QDateTime) interceptor).ToString(format);
		}
		[SmokeMethod("addDays", "(int) const", "$")]
		public QDateTime AddDays(int days) {
			return ((QDateTime) interceptor).AddDays(days);
		}
		[SmokeMethod("addMonths", "(int) const", "$")]
		public QDateTime AddMonths(int months) {
			return ((QDateTime) interceptor).AddMonths(months);
		}
		[SmokeMethod("addYears", "(int) const", "$")]
		public QDateTime AddYears(int years) {
			return ((QDateTime) interceptor).AddYears(years);
		}
		[SmokeMethod("addSecs", "(int) const", "$")]
		public QDateTime AddSecs(int secs) {
			return ((QDateTime) interceptor).AddSecs(secs);
		}
		[SmokeMethod("addMSecs", "(qint64) const", "$")]
		public QDateTime AddMSecs(long msecs) {
			return ((QDateTime) interceptor).AddMSecs(msecs);
		}
		[SmokeMethod("toTimeSpec", "(Qt::TimeSpec) const", "$")]
		public QDateTime ToTimeSpec(Qt.TimeSpec spec) {
			return ((QDateTime) interceptor).ToTimeSpec(spec);
		}
		[SmokeMethod("toLocalTime", "() const", "")]
		public QDateTime ToLocalTime() {
			return ((QDateTime) interceptor).ToLocalTime();
		}
		[SmokeMethod("toUTC", "() const", "")]
		public QDateTime ToUTC() {
			return ((QDateTime) interceptor).ToUTC();
		}
		[SmokeMethod("daysTo", "(const QDateTime&) const", "#")]
		public int DaysTo(QDateTime arg1) {
			return ((QDateTime) interceptor).DaysTo(arg1);
		}
		[SmokeMethod("secsTo", "(const QDateTime&) const", "#")]
		public int SecsTo(QDateTime arg1) {
			return ((QDateTime) interceptor).SecsTo(arg1);
		}
		public override bool Equals(object o) {
			if (!(o is QDateTime)) { return false; }
			return this == (QDateTime) o;
		}
		public override int GetHashCode() {
			return ((QDateTime) interceptor).GetHashCode();
		}
		~QDateTime() {
			DisposeQDateTime();
		}
		public void Dispose() {
			DisposeQDateTime();
		}
		[SmokeMethod("~QDateTime", "()", "")]
		private void DisposeQDateTime() {
			((QDateTime) interceptor).DisposeQDateTime();
		}
		public static bool operator==(QDateTime lhs, QDateTime other) {
			return staticInterceptor.op_equals(lhs,other);
		}
		public static bool operator!=(QDateTime lhs, QDateTime other) {
			return !staticInterceptor.op_equals(lhs,other);
		}
		public static bool operator<(QDateTime lhs, QDateTime other) {
			return staticInterceptor.op_lt(lhs,other);
		}
		public static bool operator<=(QDateTime lhs, QDateTime other) {
			return staticInterceptor.op_lte(lhs,other);
		}
		public static bool operator>(QDateTime lhs, QDateTime other) {
			return staticInterceptor.op_gt(lhs,other);
		}
		public static bool operator>=(QDateTime lhs, QDateTime other) {
			return staticInterceptor.op_gte(lhs,other);
		}
		public static QDateTime CurrentDateTime() {
			return staticInterceptor.CurrentDateTime();
		}
		public static QDateTime FromString(string s, Qt.DateFormat f) {
			return staticInterceptor.FromString(s,f);
		}
		public static QDateTime FromString(string s) {
			return staticInterceptor.FromString(s);
		}
		public static QDateTime FromString(string s, string format) {
			return staticInterceptor.FromString(s,format);
		}
		public static QDateTime FromTime_t(uint secsSince1Jan1970UTC) {
			return staticInterceptor.FromTime_t(secsSince1Jan1970UTC);
		}
	}
}
