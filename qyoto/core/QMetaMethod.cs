//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	[SmokeClass("QMetaMethod")]
	public class QMetaMethod : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
		protected QMetaMethod(Type dummy) {}
		interface IQMetaMethodProxy {
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QMetaMethod), this);
			_interceptor = (QMetaMethod) realProxy.GetTransparentProxy();
		}
		private QMetaMethod ProxyQMetaMethod() {
			return (QMetaMethod) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QMetaMethod() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQMetaMethodProxy), null);
			_staticInterceptor = (IQMetaMethodProxy) realProxy.GetTransparentProxy();
		}
		private static IQMetaMethodProxy StaticQMetaMethod() {
			return (IQMetaMethodProxy) _staticInterceptor;
		}

		public enum Access {
			Private = 0,
			Protected = 1,
			Public = 2,
		}
		public enum MethodType {
			Method = 0,
			Signal = 1,
			Slot = 2,
		}
		public enum Attributes {
			Compatibility = 0x1,
			Cloned = 0x2,
			Scriptable = 0x4,
		}
		public QMetaMethod() : this((Type) null) {
			CreateProxy();
			NewQMetaMethod();
		}
		[SmokeMethod("QMetaMethod()")]
		private void NewQMetaMethod() {
			ProxyQMetaMethod().NewQMetaMethod();
		}
		[SmokeMethod("signature() const")]
		public string Signature() {
			return ProxyQMetaMethod().Signature();
		}
		[SmokeMethod("typeName() const")]
		public string TypeName() {
			return ProxyQMetaMethod().TypeName();
		}
		[SmokeMethod("parameterTypes() const")]
		public List<QByteArray> ParameterTypes() {
			return ProxyQMetaMethod().ParameterTypes();
		}
		[SmokeMethod("parameterNames() const")]
		public List<QByteArray> ParameterNames() {
			return ProxyQMetaMethod().ParameterNames();
		}
		[SmokeMethod("tag() const")]
		public string Tag() {
			return ProxyQMetaMethod().Tag();
		}
		[SmokeMethod("access() const")]
		public QMetaMethod.Access access() {
			return ProxyQMetaMethod().access();
		}
		[SmokeMethod("methodType() const")]
		public QMetaMethod.MethodType methodType() {
			return ProxyQMetaMethod().methodType();
		}
		[SmokeMethod("attributes() const")]
		public int attributes() {
			return ProxyQMetaMethod().attributes();
		}
		~QMetaMethod() {
			DisposeQMetaMethod();
		}
		public void Dispose() {
			DisposeQMetaMethod();
		}
		[SmokeMethod("~QMetaMethod()")]
		private void DisposeQMetaMethod() {
			ProxyQMetaMethod().DisposeQMetaMethod();
		}
	}
}
