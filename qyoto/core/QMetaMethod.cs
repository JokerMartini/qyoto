//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	[SmokeClass("QMetaMethod")]
	public class QMetaMethod : MarshalByRefObject, IDisposable {
		protected QMetaMethod interceptor = null;
		private IntPtr smokeObject;
		protected QMetaMethod(Type dummy) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QMetaMethod), this);
			interceptor = (QMetaMethod) realProxy.GetTransparentProxy();
		}
		public enum Access {
			Private = 0,
			Protected = 1,
			Public = 2,
		}
		public enum MethodType {
			Method = 0,
			Signal = 1,
			Slot = 2,
		}
		public enum Attributes {
			Compatibility = 0x1,
			Cloned = 0x2,
			Scriptable = 0x4,
		}
		public QMetaMethod() : this((Type) null) {
			CreateProxy();
			NewQMetaMethod();
		}
		[SmokeMethod("QMetaMethod", "()", "")]
		private void NewQMetaMethod() {
			((QMetaMethod) interceptor).NewQMetaMethod();
		}
		[SmokeMethod("signature", "() const", "")]
		public string Signature() {
			return ((QMetaMethod) interceptor).Signature();
		}
		[SmokeMethod("typeName", "() const", "")]
		public string TypeName() {
			return ((QMetaMethod) interceptor).TypeName();
		}
		[SmokeMethod("parameterTypes", "() const", "")]
		public List<QByteArray> ParameterTypes() {
			return ((QMetaMethod) interceptor).ParameterTypes();
		}
		[SmokeMethod("parameterNames", "() const", "")]
		public List<QByteArray> ParameterNames() {
			return ((QMetaMethod) interceptor).ParameterNames();
		}
		[SmokeMethod("tag", "() const", "")]
		public string Tag() {
			return ((QMetaMethod) interceptor).Tag();
		}
		[SmokeMethod("access", "() const", "")]
		public QMetaMethod.Access access() {
			return ((QMetaMethod) interceptor).access();
		}
		[SmokeMethod("methodType", "() const", "")]
		public QMetaMethod.MethodType methodType() {
			return ((QMetaMethod) interceptor).methodType();
		}
		[SmokeMethod("attributes", "() const", "")]
		public int attributes() {
			return ((QMetaMethod) interceptor).attributes();
		}
		~QMetaMethod() {
			DisposeQMetaMethod();
		}
		public void Dispose() {
			DisposeQMetaMethod();
		}
		[SmokeMethod("~QMetaMethod", "()", "")]
		private void DisposeQMetaMethod() {
			((QMetaMethod) interceptor).DisposeQMetaMethod();
		}
	}
}
