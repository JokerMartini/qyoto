//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QLibrary")]
	public class QLibrary : QObject, IDisposable {
 		protected QLibrary(Type dummy) : base((Type) null) {}
		[SmokeClass("QLibrary")]
		interface IQLibraryProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
			[SmokeMethod("isLibrary", "(const QString&)", "$")]
			bool IsLibrary(string fileName);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QLibrary), this);
			_interceptor = (QLibrary) realProxy.GetTransparentProxy();
		}
		private QLibrary ProxyQLibrary() {
			return (QLibrary) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QLibrary() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQLibraryProxy), null);
			_staticInterceptor = (IQLibraryProxy) realProxy.GetTransparentProxy();
		}
		private static IQLibraryProxy StaticQLibrary() {
			return (IQLibraryProxy) _staticInterceptor;
		}
		public enum LoadHint {
			ResolveAllSymbolsHint = 0x01,
			ExportExternalSymbolsHint = 0x02,
			LoadArchiveMemberHint = 0x04,
		}
		[Q_PROPERTY("QString", "fileName")]
		public string FileName {
			get {
				return Property("fileName").Value<string>();
			}
			set {
				SetProperty("fileName", QVariant.FromValue<string>(value));
			}
		}
		public QLibrary(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQLibrary(parent);
		}
		[SmokeMethod("QLibrary", "(QObject*)", "#")]
		private void NewQLibrary(QObject parent) {
			ProxyQLibrary().NewQLibrary(parent);
		}
		public QLibrary() : this((Type) null) {
			CreateProxy();
			NewQLibrary();
		}
		[SmokeMethod("QLibrary", "()", "")]
		private void NewQLibrary() {
			ProxyQLibrary().NewQLibrary();
		}
		public QLibrary(string fileName, QObject parent) : this((Type) null) {
			CreateProxy();
			NewQLibrary(fileName,parent);
		}
		[SmokeMethod("QLibrary", "(const QString&, QObject*)", "$#")]
		private void NewQLibrary(string fileName, QObject parent) {
			ProxyQLibrary().NewQLibrary(fileName,parent);
		}
		public QLibrary(string fileName) : this((Type) null) {
			CreateProxy();
			NewQLibrary(fileName);
		}
		[SmokeMethod("QLibrary", "(const QString&)", "$")]
		private void NewQLibrary(string fileName) {
			ProxyQLibrary().NewQLibrary(fileName);
		}
		public QLibrary(string fileName, int verNum, QObject parent) : this((Type) null) {
			CreateProxy();
			NewQLibrary(fileName,verNum,parent);
		}
		[SmokeMethod("QLibrary", "(const QString&, int, QObject*)", "$$#")]
		private void NewQLibrary(string fileName, int verNum, QObject parent) {
			ProxyQLibrary().NewQLibrary(fileName,verNum,parent);
		}
		public QLibrary(string fileName, int verNum) : this((Type) null) {
			CreateProxy();
			NewQLibrary(fileName,verNum);
		}
		[SmokeMethod("QLibrary", "(const QString&, int)", "$$")]
		private void NewQLibrary(string fileName, int verNum) {
			ProxyQLibrary().NewQLibrary(fileName,verNum);
		}
		// void* resolve(const char* arg1); >>>> NOT CONVERTED
		[SmokeMethod("load", "()", "")]
		public bool Load() {
			return ProxyQLibrary().Load();
		}
		[SmokeMethod("unload", "()", "")]
		public bool Unload() {
			return ProxyQLibrary().Unload();
		}
		[SmokeMethod("isLoaded", "() const", "")]
		public bool IsLoaded() {
			return ProxyQLibrary().IsLoaded();
		}
		[SmokeMethod("setFileNameAndVersion", "(const QString&, int)", "$$")]
		public void SetFileNameAndVersion(string fileName, int verNum) {
			ProxyQLibrary().SetFileNameAndVersion(fileName,verNum);
		}
		[SmokeMethod("errorString", "() const", "")]
		public string ErrorString() {
			return ProxyQLibrary().ErrorString();
		}
		public static new string Tr(string s, string c) {
			return StaticQLibrary().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQLibrary().Tr(s);
		}
		// void* resolve(const QString& arg1,const char* arg2); >>>> NOT CONVERTED
		// void* resolve(const QString& arg1,int arg2,const char* arg3); >>>> NOT CONVERTED
		public static bool IsLibrary(string fileName) {
			return StaticQLibrary().IsLibrary(fileName);
		}
		~QLibrary() {
			DisposeQLibrary();
		}
		public new void Dispose() {
			DisposeQLibrary();
		}
		[SmokeMethod("~QLibrary", "()", "")]
		private void DisposeQLibrary() {
			ProxyQLibrary().DisposeQLibrary();
		}
		protected new IQLibrarySignals Emit {
			get {
				return (IQLibrarySignals) Q_EMIT;
			}
		}
	}

	public interface IQLibrarySignals : IQObjectSignals {
	}
}
