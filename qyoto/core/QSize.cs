//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QSize")]
	public class QSize : MarshalByRefObject, IDisposable {
		protected QSize interceptor = null;
		private IntPtr smokeObject;
		protected QSize(Type dummy) {}
		[SmokeClass("QSize")]
		interface IQSizeProxy {
			[SmokeMethod("operator*=", "(qreal)", "$")]
			QSize op_mult(QSize lhs, double c);
			[SmokeMethod("operator/=", "(qreal)", "$")]
			QSize op_div(QSize lhs, double c);
			[SmokeMethod("operator==", "(const QSize&, const QSize&)", "##")]
			bool op_equals(QSize s1, QSize s2);
			[SmokeMethod("operator+", "(const QSize&, const QSize&)", "##")]
			QSize op_plus(QSize s1, QSize s2);
			[SmokeMethod("operator-", "(const QSize&, const QSize&)", "##")]
			QSize op_minus(QSize s1, QSize s2);
			[SmokeMethod("operator*", "(qreal, const QSize&)", "$#")]
			QSize op_mult(double c, QSize s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSize), this);
			interceptor = (QSize) realProxy.GetTransparentProxy();
		}
		private static IQSizeProxy staticInterceptor = null;
		static QSize() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSizeProxy), null);
			staticInterceptor = (IQSizeProxy) realProxy.GetTransparentProxy();
		}
		public QSize() : this((Type) null) {
			CreateProxy();
			NewQSize();
		}
		[SmokeMethod("QSize", "()", "")]
		private void NewQSize() {
			((QSize) interceptor).NewQSize();
		}
		public QSize(int w, int h) : this((Type) null) {
			CreateProxy();
			NewQSize(w,h);
		}
		[SmokeMethod("QSize", "(int, int)", "$$")]
		private void NewQSize(int w, int h) {
			((QSize) interceptor).NewQSize(w,h);
		}
		[SmokeMethod("isNull", "() const", "")]
		public bool IsNull() {
			return ((QSize) interceptor).IsNull();
		}
		[SmokeMethod("isEmpty", "() const", "")]
		public bool IsEmpty() {
			return ((QSize) interceptor).IsEmpty();
		}
		[SmokeMethod("isValid", "() const", "")]
		public bool IsValid() {
			return ((QSize) interceptor).IsValid();
		}
		[SmokeMethod("width", "() const", "")]
		public int Width() {
			return ((QSize) interceptor).Width();
		}
		[SmokeMethod("height", "() const", "")]
		public int Height() {
			return ((QSize) interceptor).Height();
		}
		[SmokeMethod("setWidth", "(int)", "$")]
		public void SetWidth(int w) {
			((QSize) interceptor).SetWidth(w);
		}
		[SmokeMethod("setHeight", "(int)", "$")]
		public void SetHeight(int h) {
			((QSize) interceptor).SetHeight(h);
		}
		[SmokeMethod("transpose", "()", "")]
		public void Transpose() {
			((QSize) interceptor).Transpose();
		}
		[SmokeMethod("scale", "(int, int, Qt::AspectRatioMode)", "$$$")]
		public void Scale(int w, int h, Qt.AspectRatioMode mode) {
			((QSize) interceptor).Scale(w,h,mode);
		}
		[SmokeMethod("scale", "(const QSize&, Qt::AspectRatioMode)", "#$")]
		public void Scale(QSize s, Qt.AspectRatioMode mode) {
			((QSize) interceptor).Scale(s,mode);
		}
		[SmokeMethod("expandedTo", "(const QSize&) const", "#")]
		public QSize ExpandedTo(QSize arg1) {
			return ((QSize) interceptor).ExpandedTo(arg1);
		}
		[SmokeMethod("boundedTo", "(const QSize&) const", "#")]
		public QSize BoundedTo(QSize arg1) {
			return ((QSize) interceptor).BoundedTo(arg1);
		}
		[SmokeMethod("rwidth", "()", "")]
		public int Rwidth() {
			return ((QSize) interceptor).Rwidth();
		}
		[SmokeMethod("rheight", "()", "")]
		public int Rheight() {
			return ((QSize) interceptor).Rheight();
		}
		~QSize() {
			DisposeQSize();
		}
		public void Dispose() {
			DisposeQSize();
		}
		[SmokeMethod("~QSize", "()", "")]
		private void DisposeQSize() {
			((QSize) interceptor).DisposeQSize();
		}
		public override bool Equals(object o) {
			if (!(o is QSize)) { return false; }
			return this == (QSize) o;
		}
		public override int GetHashCode() {
			return ((QSize) interceptor).GetHashCode();
		}
		public static QSize operator*(QSize lhs, double c) {
			return staticInterceptor.op_mult(lhs,c);
		}
		public static QSize operator/(QSize lhs, double c) {
			return staticInterceptor.op_div(lhs,c);
		}
		public static bool operator==(QSize s1, QSize s2) {
			return staticInterceptor.op_equals(s1,s2);
		}
		public static bool operator!=(QSize s1, QSize s2) {
			return !staticInterceptor.op_equals(s1,s2);
		}
		public static QSize operator+(QSize s1, QSize s2) {
			return staticInterceptor.op_plus(s1,s2);
		}
		public static QSize operator-(QSize s1, QSize s2) {
			return staticInterceptor.op_minus(s1,s2);
		}
		public static QSize operator*(double c, QSize s) {
			return staticInterceptor.op_mult(c,s);
		}
	}
}
