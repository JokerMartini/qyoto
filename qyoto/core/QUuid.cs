//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QUuid")]
	public class QUuid : MarshalByRefObject, IDisposable {
		protected QUuid interceptor = null;
		private IntPtr smokeObject;
		protected QUuid(Type dummy) {}
		[SmokeClass("QUuid")]
		interface IQUuidProxy {
			[SmokeMethod("operator==", "(const QUuid&) const", "#")]
			bool op_equals(QUuid lhs, QUuid orig);
			[SmokeMethod("operator<", "(const QUuid&) const", "#")]
			bool op_lt(QUuid lhs, QUuid other);
			[SmokeMethod("operator>", "(const QUuid&) const", "#")]
			bool op_gt(QUuid lhs, QUuid other);
			[SmokeMethod("createUuid", "()", "")]
			QUuid CreateUuid();
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QUuid), this);
			interceptor = (QUuid) realProxy.GetTransparentProxy();
		}
		private static IQUuidProxy staticInterceptor = null;
		static QUuid() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQUuidProxy), null);
			staticInterceptor = (IQUuidProxy) realProxy.GetTransparentProxy();
		}
		public enum Variant {
			VarUnknown = -1,
			NCS = 0,
			DCE = 2,
			Microsoft = 6,
			Reserved = 7,
		}
		public enum Version {
			VerUnknown = -1,
			Time = 1,
			EmbeddedPOSIX = 2,
			Name = 3,
			Random = 4,
		}
		//  operator QString(); >>>> NOT CONVERTED
		public QUuid() : this((Type) null) {
			CreateProxy();
			NewQUuid();
		}
		[SmokeMethod("QUuid", "()", "")]
		private void NewQUuid() {
			((QUuid) interceptor).NewQUuid();
		}
		public QUuid(uint l, ushort w1, ushort w2, ushort b1, ushort b2, ushort b3, ushort b4, ushort b5, ushort b6, ushort b7, ushort b8) : this((Type) null) {
			CreateProxy();
			NewQUuid(l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8);
		}
		[SmokeMethod("QUuid", "(uint, ushort, ushort, uchar, uchar, uchar, uchar, uchar, uchar, uchar, uchar)", "$$$$$$$$$$$")]
		private void NewQUuid(uint l, ushort w1, ushort w2, ushort b1, ushort b2, ushort b3, ushort b4, ushort b5, ushort b6, ushort b7, ushort b8) {
			((QUuid) interceptor).NewQUuid(l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8);
		}
		public QUuid(string arg1) : this((Type) null) {
			CreateProxy();
			NewQUuid(arg1);
		}
		[SmokeMethod("QUuid", "(const QString&)", "$")]
		private void NewQUuid(string arg1) {
			((QUuid) interceptor).NewQUuid(arg1);
		}
		[SmokeMethod("toString", "() const", "")]
		public string ToString() {
			return ((QUuid) interceptor).ToString();
		}
		[SmokeMethod("isNull", "() const", "")]
		public bool IsNull() {
			return ((QUuid) interceptor).IsNull();
		}
		public override bool Equals(object o) {
			if (!(o is QUuid)) { return false; }
			return this == (QUuid) o;
		}
		public override int GetHashCode() {
			return ((QUuid) interceptor).GetHashCode();
		}
		[SmokeMethod("variant", "() const", "")]
		public QUuid.Variant variant() {
			return ((QUuid) interceptor).variant();
		}
		[SmokeMethod("version", "() const", "")]
		public QUuid.Version version() {
			return ((QUuid) interceptor).version();
		}
		~QUuid() {
			DisposeQUuid();
		}
		public void Dispose() {
			DisposeQUuid();
		}
		[SmokeMethod("~QUuid", "()", "")]
		private void DisposeQUuid() {
			((QUuid) interceptor).DisposeQUuid();
		}
		public static bool operator==(QUuid lhs, QUuid orig) {
			return staticInterceptor.op_equals(lhs,orig);
		}
		public static bool operator!=(QUuid lhs, QUuid orig) {
			return !staticInterceptor.op_equals(lhs,orig);
		}
		public static bool operator<(QUuid lhs, QUuid other) {
			return staticInterceptor.op_lt(lhs,other);
		}
		public static bool operator>(QUuid lhs, QUuid other) {
			return staticInterceptor.op_gt(lhs,other);
		}
		public static QUuid CreateUuid() {
			return staticInterceptor.CreateUuid();
		}
	}
}
