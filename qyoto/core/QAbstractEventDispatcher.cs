//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	/// See <see cref="IQAbstractEventDispatcherSignals"></see> for signals emitted by QAbstractEventDispatcher
	[SmokeClass("QAbstractEventDispatcher")]
	public abstract class QAbstractEventDispatcher : QObject {
 		protected QAbstractEventDispatcher(Type dummy) : base((Type) null) {}
		[SmokeClass("QAbstractEventDispatcher")]
		interface IQAbstractEventDispatcherProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QAbstractEventDispatcher), this);
			_interceptor = (QAbstractEventDispatcher) realProxy.GetTransparentProxy();
		}
		private QAbstractEventDispatcher ProxyQAbstractEventDispatcher() {
			return (QAbstractEventDispatcher) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QAbstractEventDispatcher() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQAbstractEventDispatcherProxy), null);
			_staticInterceptor = (IQAbstractEventDispatcherProxy) realProxy.GetTransparentProxy();
		}
		private static IQAbstractEventDispatcherProxy StaticQAbstractEventDispatcher() {
			return (IQAbstractEventDispatcherProxy) _staticInterceptor;
		}
		public QAbstractEventDispatcher(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQAbstractEventDispatcher(parent);
		}
		[SmokeMethod("QAbstractEventDispatcher", "(QObject*)", "#")]
		private void NewQAbstractEventDispatcher(QObject parent) {
			ProxyQAbstractEventDispatcher().NewQAbstractEventDispatcher(parent);
		}
		public QAbstractEventDispatcher() : this((Type) null) {
			CreateProxy();
			NewQAbstractEventDispatcher();
		}
		[SmokeMethod("QAbstractEventDispatcher", "()", "")]
		private void NewQAbstractEventDispatcher() {
			ProxyQAbstractEventDispatcher().NewQAbstractEventDispatcher();
		}
		public abstract bool ProcessEvents(uint flags);
		public abstract bool HasPendingEvents();
		public abstract void RegisterSocketNotifier(QSocketNotifier notifier);
		public abstract void UnregisterSocketNotifier(QSocketNotifier notifier);
		[SmokeMethod("registerTimer", "(int, QObject*)", "$#")]
		public int RegisterTimer(int interval, QObject arg2) {
			return ProxyQAbstractEventDispatcher().RegisterTimer(interval,arg2);
		}
		public abstract void RegisterTimer(int timerId, int interval, QObject arg3);
		public abstract bool UnregisterTimer(int timerId);
		public abstract bool UnregisterTimers(QObject arg1);
		// QList<QAbstractEventDispatcher::TimerInfo> registeredTimers(QObject* arg1); >>>> NOT CONVERTED
		public abstract void WakeUp();
		public abstract void Interrupt();
		public abstract void Flush();
		[SmokeMethod("startingUp", "()", "")]
		public virtual void StartingUp() {
			ProxyQAbstractEventDispatcher().StartingUp();
		}
		[SmokeMethod("closingDown", "()", "")]
		public virtual void ClosingDown() {
			ProxyQAbstractEventDispatcher().ClosingDown();
		}
		// EventFilter setEventFilter(EventFilter arg1); >>>> NOT CONVERTED
		// bool filterEvent(void* arg1); >>>> NOT CONVERTED
		public static string Tr(string s, string c) {
			return StaticQAbstractEventDispatcher().Tr(s,c);
		}
		public static string Tr(string s) {
			return StaticQAbstractEventDispatcher().Tr(s);
		}
		// QAbstractEventDispatcher* instance(QThread* arg1); >>>> NOT CONVERTED
		~QAbstractEventDispatcher() {
			DisposeQAbstractEventDispatcher();
		}
		public new void Dispose() {
			DisposeQAbstractEventDispatcher();
		}
		[SmokeMethod("~QAbstractEventDispatcher", "()", "")]
		private void DisposeQAbstractEventDispatcher() {
			ProxyQAbstractEventDispatcher().DisposeQAbstractEventDispatcher();
		}
		protected new IQAbstractEventDispatcherSignals Emit {
			get { return (IQAbstractEventDispatcherSignals) Q_EMIT; }
		}
	}

	public interface IQAbstractEventDispatcherSignals : IQObjectSignals {
		[Q_SIGNAL("void aboutToBlock()")]
		void AboutToBlock();
		[Q_SIGNAL("void awake()")]
		void Awake();
	}
}
