//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QObjectCleanupHandler")]
	public class QObjectCleanupHandler : QObject, IDisposable {
 		protected QObjectCleanupHandler(Type dummy) : base((Type) null) {}
		[SmokeClass("QObjectCleanupHandler")]
		interface IQObjectCleanupHandlerProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QObjectCleanupHandler), this);
			interceptor = (QObjectCleanupHandler) realProxy.GetTransparentProxy();
		}
		private static IQObjectCleanupHandlerProxy staticInterceptor = null;
		static QObjectCleanupHandler() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQObjectCleanupHandlerProxy), null);
			staticInterceptor = (IQObjectCleanupHandlerProxy) realProxy.GetTransparentProxy();
		}
		public QObjectCleanupHandler() : this((Type) null) {
			CreateProxy();
			NewQObjectCleanupHandler();
		}
		[SmokeMethod("QObjectCleanupHandler", "()", "")]
		private void NewQObjectCleanupHandler() {
			((QObjectCleanupHandler) interceptor).NewQObjectCleanupHandler();
		}
		[SmokeMethod("add", "(QObject*)", "#")]
		public QObject Add(QObject arg1) {
			return ((QObjectCleanupHandler) interceptor).Add(arg1);
		}
		[SmokeMethod("remove", "(QObject*)", "#")]
		public void Remove(QObject arg1) {
			((QObjectCleanupHandler) interceptor).Remove(arg1);
		}
		[SmokeMethod("isEmpty", "() const", "")]
		public bool IsEmpty() {
			return ((QObjectCleanupHandler) interceptor).IsEmpty();
		}
		[SmokeMethod("clear", "()", "")]
		public void Clear() {
			((QObjectCleanupHandler) interceptor).Clear();
		}
		~QObjectCleanupHandler() {
			DisposeQObjectCleanupHandler();
		}
		public new void Dispose() {
			DisposeQObjectCleanupHandler();
		}
		[SmokeMethod("~QObjectCleanupHandler", "()", "")]
		private void DisposeQObjectCleanupHandler() {
			((QObjectCleanupHandler) interceptor).DisposeQObjectCleanupHandler();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQObjectCleanupHandlerSignals Emit {
			get { return (IQObjectCleanupHandlerSignals) Q_EMIT; }
		}
	}

	public interface IQObjectCleanupHandlerSignals : IQObjectSignals {
	}
}
