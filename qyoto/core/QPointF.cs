//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QPointF")]
	public class QPointF : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
		private IntPtr _smokeObject;
		protected QPointF(Type dummy) {}
		[SmokeClass("QPointF")]
		interface IQPointFProxy {
			[SmokeMethod("operator*=", "(qreal)", "$")]
			QPointF op_mult(QPointF lhs, double c);
			[SmokeMethod("operator/=", "(qreal)", "$")]
			QPointF op_div(QPointF lhs, double c);
			[SmokeMethod("operator*", "(const QPointF&, const QMatrix&)", "##")]
			QPointF op_mult(QPointF p, QMatrix m);
			[SmokeMethod("operator==", "(const QPointF&, const QPointF&)", "##")]
			bool op_equals(QPointF p1, QPointF p2);
			[SmokeMethod("operator+", "(const QPointF&, const QPointF&)", "##")]
			QPointF op_plus(QPointF p1, QPointF p2);
			[SmokeMethod("operator-", "(const QPointF&, const QPointF&)", "##")]
			QPointF op_minus(QPointF p1, QPointF p2);
			[SmokeMethod("operator*", "(qreal, const QPointF&)", "$#")]
			QPointF op_mult(double c, QPointF p);
			[SmokeMethod("operator-", "(const QPointF&)", "#")]
			QPointF op_minus(QPointF p);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QPointF), this);
			_interceptor = (QPointF) realProxy.GetTransparentProxy();
		}
		private QPointF ProxyQPointF() {
			return (QPointF) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QPointF() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQPointFProxy), null);
			_staticInterceptor = (IQPointFProxy) realProxy.GetTransparentProxy();
		}
		private static IQPointFProxy StaticQPointF() {
			return (IQPointFProxy) _staticInterceptor;
		}
		public QPointF() : this((Type) null) {
			CreateProxy();
			NewQPointF();
		}
		[SmokeMethod("QPointF", "()", "")]
		private void NewQPointF() {
			ProxyQPointF().NewQPointF();
		}
		public QPointF(QPoint p) : this((Type) null) {
			CreateProxy();
			NewQPointF(p);
		}
		[SmokeMethod("QPointF", "(const QPoint&)", "#")]
		private void NewQPointF(QPoint p) {
			ProxyQPointF().NewQPointF(p);
		}
		public QPointF(double xpos, double ypos) : this((Type) null) {
			CreateProxy();
			NewQPointF(xpos,ypos);
		}
		[SmokeMethod("QPointF", "(qreal, qreal)", "$$")]
		private void NewQPointF(double xpos, double ypos) {
			ProxyQPointF().NewQPointF(xpos,ypos);
		}
		[SmokeMethod("isNull", "() const", "")]
		public bool IsNull() {
			return ProxyQPointF().IsNull();
		}
		[SmokeMethod("x", "() const", "")]
		public double X() {
			return ProxyQPointF().X();
		}
		[SmokeMethod("y", "() const", "")]
		public double Y() {
			return ProxyQPointF().Y();
		}
		[SmokeMethod("setX", "(qreal)", "$")]
		public void SetX(double x) {
			ProxyQPointF().SetX(x);
		}
		[SmokeMethod("setY", "(qreal)", "$")]
		public void SetY(double y) {
			ProxyQPointF().SetY(y);
		}
		// qreal& rx(); >>>> NOT CONVERTED
		// qreal& ry(); >>>> NOT CONVERTED
		public static QPointF operator*(QPointF lhs, double c) {
			return StaticQPointF().op_mult(lhs,c);
		}
		public static QPointF operator/(QPointF lhs, double c) {
			return StaticQPointF().op_div(lhs,c);
		}
		[SmokeMethod("toPoint", "() const", "")]
		public QPoint ToPoint() {
			return ProxyQPointF().ToPoint();
		}
		~QPointF() {
			DisposeQPointF();
		}
		public void Dispose() {
			DisposeQPointF();
		}
		[SmokeMethod("~QPointF", "()", "")]
		private void DisposeQPointF() {
			ProxyQPointF().DisposeQPointF();
		}
		public static QPointF operator*(QPointF p, QMatrix m) {
			return StaticQPointF().op_mult(p,m);
		}
		public static bool operator==(QPointF p1, QPointF p2) {
			return StaticQPointF().op_equals(p1,p2);
		}
		public static bool operator!=(QPointF p1, QPointF p2) {
			return !StaticQPointF().op_equals(p1,p2);
		}
		public override bool Equals(object o) {
			if (!(o is QPointF)) { return false; }
			return this == (QPointF) o;
		}
		public override int GetHashCode() {
			return ProxyQPointF().GetHashCode();
		}
		public static QPointF operator+(QPointF p1, QPointF p2) {
			return StaticQPointF().op_plus(p1,p2);
		}
		public static QPointF operator-(QPointF p1, QPointF p2) {
			return StaticQPointF().op_minus(p1,p2);
		}
		public static QPointF operator*(double c, QPointF p) {
			return StaticQPointF().op_mult(c,p);
		}
		public static QPointF operator-(QPointF p) {
			return StaticQPointF().op_minus(p);
		}
	}
}
