//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QDate")]
	public class QDate : MarshalByRefObject, IDisposable {
		protected QDate interceptor = null;
		private IntPtr smokeObject;
		protected QDate(Type dummy) {}
		[SmokeClass("QDate")]
		interface IQDateProxy {
			[SmokeMethod("operator==", "(const QDate&) const", "#")]
			bool op_equals(QDate lhs, QDate other);
			[SmokeMethod("operator<", "(const QDate&) const", "#")]
			bool op_lt(QDate lhs, QDate other);
			[SmokeMethod("operator<=", "(const QDate&) const", "#")]
			bool op_lte(QDate lhs, QDate other);
			[SmokeMethod("operator>", "(const QDate&) const", "#")]
			bool op_gt(QDate lhs, QDate other);
			[SmokeMethod("operator>=", "(const QDate&) const", "#")]
			bool op_gte(QDate lhs, QDate other);
			[SmokeMethod("shortMonthName", "(int)", "$")]
			string ShortMonthName(int month);
			[SmokeMethod("shortDayName", "(int)", "$")]
			string ShortDayName(int weekday);
			[SmokeMethod("longMonthName", "(int)", "$")]
			string LongMonthName(int month);
			[SmokeMethod("longDayName", "(int)", "$")]
			string LongDayName(int weekday);
			[SmokeMethod("currentDate", "()", "")]
			QDate CurrentDate();
			[SmokeMethod("fromString", "(const QString&, Qt::DateFormat)", "$$")]
			QDate FromString(string s, Qt.DateFormat f);
			[SmokeMethod("fromString", "(const QString&)", "$")]
			QDate FromString(string s);
			[SmokeMethod("fromString", "(const QString&, const QString&)", "$$")]
			QDate FromString(string s, string format);
			[SmokeMethod("isValid", "(int, int, int)", "$$$")]
			bool IsValid(int y, int m, int d);
			[SmokeMethod("isLeapYear", "(int)", "$")]
			bool IsLeapYear(int year);
			[SmokeMethod("gregorianToJulian", "(int, int, int)", "$$$")]
			uint GregorianToJulian(int y, int m, int d);
			[SmokeMethod("julianToGregorian", "(uint, int&, int&, int&)", "$$$$")]
			void JulianToGregorian(uint jd, out int y, out int m, out int d);
			[SmokeMethod("fromJulianDay", "(int)", "$")]
			QDate FromJulianDay(int jd);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDate), this);
			interceptor = (QDate) realProxy.GetTransparentProxy();
		}
		private static IQDateProxy staticInterceptor = null;
		static QDate() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDateProxy), null);
			staticInterceptor = (IQDateProxy) realProxy.GetTransparentProxy();
		}
		public QDate() : this((Type) null) {
			CreateProxy();
			NewQDate();
		}
		[SmokeMethod("QDate", "()", "")]
		private void NewQDate() {
			((QDate) interceptor).NewQDate();
		}
		public QDate(int y, int m, int d) : this((Type) null) {
			CreateProxy();
			NewQDate(y,m,d);
		}
		[SmokeMethod("QDate", "(int, int, int)", "$$$")]
		private void NewQDate(int y, int m, int d) {
			((QDate) interceptor).NewQDate(y,m,d);
		}
		[SmokeMethod("isNull", "() const", "")]
		public bool IsNull() {
			return ((QDate) interceptor).IsNull();
		}
		[SmokeMethod("isValid", "() const", "")]
		public bool IsValid() {
			return ((QDate) interceptor).IsValid();
		}
		[SmokeMethod("year", "() const", "")]
		public int Year() {
			return ((QDate) interceptor).Year();
		}
		[SmokeMethod("month", "() const", "")]
		public int Month() {
			return ((QDate) interceptor).Month();
		}
		[SmokeMethod("day", "() const", "")]
		public int Day() {
			return ((QDate) interceptor).Day();
		}
		[SmokeMethod("dayOfWeek", "() const", "")]
		public int DayOfWeek() {
			return ((QDate) interceptor).DayOfWeek();
		}
		[SmokeMethod("dayOfYear", "() const", "")]
		public int DayOfYear() {
			return ((QDate) interceptor).DayOfYear();
		}
		[SmokeMethod("daysInMonth", "() const", "")]
		public int DaysInMonth() {
			return ((QDate) interceptor).DaysInMonth();
		}
		[SmokeMethod("daysInYear", "() const", "")]
		public int DaysInYear() {
			return ((QDate) interceptor).DaysInYear();
		}
		[SmokeMethod("weekNumber", "(int*) const", "$")]
		public int WeekNumber(out int yearNum) {
			return ((QDate) interceptor).WeekNumber(out yearNum);
		}
		[SmokeMethod("weekNumber", "() const", "")]
		public int WeekNumber() {
			return ((QDate) interceptor).WeekNumber();
		}
		[SmokeMethod("toString", "(Qt::DateFormat) const", "$")]
		public string ToString(Qt.DateFormat f) {
			return ((QDate) interceptor).ToString(f);
		}
		[SmokeMethod("toString", "() const", "")]
		public string ToString() {
			return ((QDate) interceptor).ToString();
		}
		[SmokeMethod("toString", "(const QString&) const", "$")]
		public string ToString(string format) {
			return ((QDate) interceptor).ToString(format);
		}
		[SmokeMethod("setYMD", "(int, int, int)", "$$$")]
		public bool SetYMD(int y, int m, int d) {
			return ((QDate) interceptor).SetYMD(y,m,d);
		}
		[SmokeMethod("setDate", "(int, int, int)", "$$$")]
		public bool SetDate(int year, int month, int date) {
			return ((QDate) interceptor).SetDate(year,month,date);
		}
		[SmokeMethod("addDays", "(int) const", "$")]
		public QDate AddDays(int days) {
			return ((QDate) interceptor).AddDays(days);
		}
		[SmokeMethod("addMonths", "(int) const", "$")]
		public QDate AddMonths(int months) {
			return ((QDate) interceptor).AddMonths(months);
		}
		[SmokeMethod("addYears", "(int) const", "$")]
		public QDate AddYears(int years) {
			return ((QDate) interceptor).AddYears(years);
		}
		[SmokeMethod("daysTo", "(const QDate&) const", "#")]
		public int DaysTo(QDate arg1) {
			return ((QDate) interceptor).DaysTo(arg1);
		}
		public override bool Equals(object o) {
			if (!(o is QDate)) { return false; }
			return this == (QDate) o;
		}
		public override int GetHashCode() {
			return ((QDate) interceptor).GetHashCode();
		}
		[SmokeMethod("toJulianDay", "() const", "")]
		public int ToJulianDay() {
			return ((QDate) interceptor).ToJulianDay();
		}
		~QDate() {
			DisposeQDate();
		}
		public void Dispose() {
			DisposeQDate();
		}
		[SmokeMethod("~QDate", "()", "")]
		private void DisposeQDate() {
			((QDate) interceptor).DisposeQDate();
		}
		public static bool operator==(QDate lhs, QDate other) {
			return staticInterceptor.op_equals(lhs,other);
		}
		public static bool operator!=(QDate lhs, QDate other) {
			return !staticInterceptor.op_equals(lhs,other);
		}
		public static bool operator<(QDate lhs, QDate other) {
			return staticInterceptor.op_lt(lhs,other);
		}
		public static bool operator<=(QDate lhs, QDate other) {
			return staticInterceptor.op_lte(lhs,other);
		}
		public static bool operator>(QDate lhs, QDate other) {
			return staticInterceptor.op_gt(lhs,other);
		}
		public static bool operator>=(QDate lhs, QDate other) {
			return staticInterceptor.op_gte(lhs,other);
		}
		public static string ShortMonthName(int month) {
			return staticInterceptor.ShortMonthName(month);
		}
		public static string ShortDayName(int weekday) {
			return staticInterceptor.ShortDayName(weekday);
		}
		public static string LongMonthName(int month) {
			return staticInterceptor.LongMonthName(month);
		}
		public static string LongDayName(int weekday) {
			return staticInterceptor.LongDayName(weekday);
		}
		public static QDate CurrentDate() {
			return staticInterceptor.CurrentDate();
		}
		public static QDate FromString(string s, Qt.DateFormat f) {
			return staticInterceptor.FromString(s,f);
		}
		public static QDate FromString(string s) {
			return staticInterceptor.FromString(s);
		}
		public static QDate FromString(string s, string format) {
			return staticInterceptor.FromString(s,format);
		}
		public static bool IsValid(int y, int m, int d) {
			return staticInterceptor.IsValid(y,m,d);
		}
		public static bool IsLeapYear(int year) {
			return staticInterceptor.IsLeapYear(year);
		}
		public static uint GregorianToJulian(int y, int m, int d) {
			return staticInterceptor.GregorianToJulian(y,m,d);
		}
		public static void JulianToGregorian(uint jd, out int y, out int m, out int d) {
			staticInterceptor.JulianToGregorian(jd,out y,out m,out d);
		}
		public static QDate FromJulianDay(int jd) {
			return staticInterceptor.FromJulianDay(jd);
		}
	}
}
