//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;

	[SmokeClass("QAbstractListModel")]
	public class QAbstractListModel : QAbstractItemModel, IDisposable {
 		protected QAbstractListModel(Type dummy) : base((Type) null) {}
		[SmokeClass("QAbstractListModel")]
		interface IQAbstractListModelProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QAbstractListModel), this);
			_interceptor = (QAbstractListModel) realProxy.GetTransparentProxy();
		}
		private QAbstractListModel ProxyQAbstractListModel() {
			return (QAbstractListModel) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QAbstractListModel() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQAbstractListModelProxy), null);
			_staticInterceptor = (IQAbstractListModelProxy) realProxy.GetTransparentProxy();
		}
		private static IQAbstractListModelProxy StaticQAbstractListModel() {
			return (IQAbstractListModelProxy) _staticInterceptor;
		}

		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QAbstractListModel(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQAbstractListModel(parent);
		}
		[SmokeMethod("QAbstractListModel", "(QObject*)", "#")]
		private void NewQAbstractListModel(QObject parent) {
			ProxyQAbstractListModel().NewQAbstractListModel(parent);
		}
		public QAbstractListModel() : this((Type) null) {
			CreateProxy();
			NewQAbstractListModel();
		}
		[SmokeMethod("QAbstractListModel", "()", "")]
		private void NewQAbstractListModel() {
			ProxyQAbstractListModel().NewQAbstractListModel();
		}
		[SmokeMethod("index", "(int, int, const QModelIndex&) const", "$$#")]
		public new QModelIndex Index(int row, int column, QModelIndex parent) {
			return ProxyQAbstractListModel().Index(row,column,parent);
		}
		[SmokeMethod("index", "(int, int) const", "$$")]
		public new QModelIndex Index(int row, int column) {
			return ProxyQAbstractListModel().Index(row,column);
		}
		[SmokeMethod("index", "(int) const", "$")]
		public new QModelIndex Index(int row) {
			return ProxyQAbstractListModel().Index(row);
		}
		[SmokeMethod("dropMimeData", "(const QMimeData*, Qt::DropAction, int, int, const QModelIndex&)", "#$$$#")]
		public new bool DropMimeData(QMimeData data, Qt.DropAction action, int row, int column, QModelIndex parent) {
			return ProxyQAbstractListModel().DropMimeData(data,action,row,column,parent);
		}
		public static new string Tr(string s, string c) {
			return StaticQAbstractListModel().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQAbstractListModel().Tr(s);
		}
		~QAbstractListModel() {
			DisposeQAbstractListModel();
		}
		public new void Dispose() {
			DisposeQAbstractListModel();
		}
		[SmokeMethod("~QAbstractListModel", "()", "")]
		private void DisposeQAbstractListModel() {
			ProxyQAbstractListModel().DisposeQAbstractListModel();
		}
		protected new IQAbstractListModelSignals Emit {
			get {
				return (IQAbstractListModelSignals) Q_EMIT;
			}
		}
	}

	public interface IQAbstractListModelSignals : IQAbstractItemModelSignals {
	}
}
