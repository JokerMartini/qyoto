//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QDynamicPropertyChangeEvent")]
	public class QDynamicPropertyChangeEvent : QEvent, IDisposable {
 		protected QDynamicPropertyChangeEvent(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDynamicPropertyChangeEvent), this);
			interceptor = (QDynamicPropertyChangeEvent) realProxy.GetTransparentProxy();
		}
		public QDynamicPropertyChangeEvent(QByteArray name) : this((Type) null) {
			CreateProxy();
			NewQDynamicPropertyChangeEvent(name);
		}
		[SmokeMethod("QDynamicPropertyChangeEvent", "(const QByteArray&)", "#")]
		private void NewQDynamicPropertyChangeEvent(QByteArray name) {
			((QDynamicPropertyChangeEvent) interceptor).NewQDynamicPropertyChangeEvent(name);
		}
		[SmokeMethod("propertyName", "() const", "")]
		public QByteArray PropertyName() {
			return ((QDynamicPropertyChangeEvent) interceptor).PropertyName();
		}
		~QDynamicPropertyChangeEvent() {
			DisposeQDynamicPropertyChangeEvent();
		}
		public new void Dispose() {
			DisposeQDynamicPropertyChangeEvent();
		}
		[SmokeMethod("~QDynamicPropertyChangeEvent", "()", "")]
		private void DisposeQDynamicPropertyChangeEvent() {
			((QDynamicPropertyChangeEvent) interceptor).DisposeQDynamicPropertyChangeEvent();
		}
	}
}
