//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QDynamicPropertyChangeEvent")]
	public class QDynamicPropertyChangeEvent : QEvent, IDisposable {
 		protected QDynamicPropertyChangeEvent(Type dummy) : base((Type) null) {}
		[SmokeClass("QDynamicPropertyChangeEvent")]
		interface IQDynamicPropertyChangeEventProxy {
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDynamicPropertyChangeEvent), this);
			_interceptor = (QDynamicPropertyChangeEvent) realProxy.GetTransparentProxy();
		}
		private QDynamicPropertyChangeEvent ProxyQDynamicPropertyChangeEvent() {
			return (QDynamicPropertyChangeEvent) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QDynamicPropertyChangeEvent() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDynamicPropertyChangeEventProxy), null);
			_staticInterceptor = (IQDynamicPropertyChangeEventProxy) realProxy.GetTransparentProxy();
		}
		private static IQDynamicPropertyChangeEventProxy StaticQDynamicPropertyChangeEvent() {
			return (IQDynamicPropertyChangeEventProxy) _staticInterceptor;
		}

		public QDynamicPropertyChangeEvent(QByteArray name) : this((Type) null) {
			CreateProxy();
			NewQDynamicPropertyChangeEvent(name);
		}
		[SmokeMethod("QDynamicPropertyChangeEvent", "(const QByteArray&)", "#")]
		private void NewQDynamicPropertyChangeEvent(QByteArray name) {
			ProxyQDynamicPropertyChangeEvent().NewQDynamicPropertyChangeEvent(name);
		}
		[SmokeMethod("propertyName", "() const", "")]
		public QByteArray PropertyName() {
			return ProxyQDynamicPropertyChangeEvent().PropertyName();
		}
		~QDynamicPropertyChangeEvent() {
			DisposeQDynamicPropertyChangeEvent();
		}
		public new void Dispose() {
			DisposeQDynamicPropertyChangeEvent();
		}
		[SmokeMethod("~QDynamicPropertyChangeEvent", "()", "")]
		private void DisposeQDynamicPropertyChangeEvent() {
			ProxyQDynamicPropertyChangeEvent().DisposeQDynamicPropertyChangeEvent();
		}
	}
}
