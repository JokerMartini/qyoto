//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QTime")]
	public class QTime : MarshalByRefObject, IDisposable {
		protected QTime interceptor = null;
		private IntPtr smokeObject;
		protected QTime(Type dummy) {}
		[SmokeClass("QTime")]
		interface IQTimeProxy {
			[SmokeMethod("operator==", "(const QTime&) const", "#")]
			bool op_equals(QTime lhs, QTime other);
			[SmokeMethod("operator<", "(const QTime&) const", "#")]
			bool op_lt(QTime lhs, QTime other);
			[SmokeMethod("operator<=", "(const QTime&) const", "#")]
			bool op_lte(QTime lhs, QTime other);
			[SmokeMethod("operator>", "(const QTime&) const", "#")]
			bool op_gt(QTime lhs, QTime other);
			[SmokeMethod("operator>=", "(const QTime&) const", "#")]
			bool op_gte(QTime lhs, QTime other);
			[SmokeMethod("currentTime", "()", "")]
			QTime CurrentTime();
			[SmokeMethod("fromString", "(const QString&, Qt::DateFormat)", "$$")]
			QTime FromString(string s, Qt.DateFormat f);
			[SmokeMethod("fromString", "(const QString&)", "$")]
			QTime FromString(string s);
			[SmokeMethod("fromString", "(const QString&, const QString&)", "$$")]
			QTime FromString(string s, string format);
			[SmokeMethod("isValid", "(int, int, int, int)", "$$$$")]
			bool IsValid(int h, int m, int s, int ms);
			[SmokeMethod("isValid", "(int, int, int)", "$$$")]
			bool IsValid(int h, int m, int s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTime), this);
			interceptor = (QTime) realProxy.GetTransparentProxy();
		}
		private static IQTimeProxy staticInterceptor = null;
		static QTime() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQTimeProxy), null);
			staticInterceptor = (IQTimeProxy) realProxy.GetTransparentProxy();
		}
		public QTime() : this((Type) null) {
			CreateProxy();
			NewQTime();
		}
		[SmokeMethod("QTime", "()", "")]
		private void NewQTime() {
			((QTime) interceptor).NewQTime();
		}
		public QTime(int h, int m, int s, int ms) : this((Type) null) {
			CreateProxy();
			NewQTime(h,m,s,ms);
		}
		[SmokeMethod("QTime", "(int, int, int, int)", "$$$$")]
		private void NewQTime(int h, int m, int s, int ms) {
			((QTime) interceptor).NewQTime(h,m,s,ms);
		}
		public QTime(int h, int m, int s) : this((Type) null) {
			CreateProxy();
			NewQTime(h,m,s);
		}
		[SmokeMethod("QTime", "(int, int, int)", "$$$")]
		private void NewQTime(int h, int m, int s) {
			((QTime) interceptor).NewQTime(h,m,s);
		}
		public QTime(int h, int m) : this((Type) null) {
			CreateProxy();
			NewQTime(h,m);
		}
		[SmokeMethod("QTime", "(int, int)", "$$")]
		private void NewQTime(int h, int m) {
			((QTime) interceptor).NewQTime(h,m);
		}
		[SmokeMethod("isNull", "() const", "")]
		public bool IsNull() {
			return ((QTime) interceptor).IsNull();
		}
		[SmokeMethod("isValid", "() const", "")]
		public bool IsValid() {
			return ((QTime) interceptor).IsValid();
		}
		[SmokeMethod("hour", "() const", "")]
		public int Hour() {
			return ((QTime) interceptor).Hour();
		}
		[SmokeMethod("minute", "() const", "")]
		public int Minute() {
			return ((QTime) interceptor).Minute();
		}
		[SmokeMethod("second", "() const", "")]
		public int Second() {
			return ((QTime) interceptor).Second();
		}
		[SmokeMethod("msec", "() const", "")]
		public int Msec() {
			return ((QTime) interceptor).Msec();
		}
		[SmokeMethod("toString", "(Qt::DateFormat) const", "$")]
		public string ToString(Qt.DateFormat f) {
			return ((QTime) interceptor).ToString(f);
		}
		[SmokeMethod("toString", "() const", "")]
		public string ToString() {
			return ((QTime) interceptor).ToString();
		}
		[SmokeMethod("toString", "(const QString&) const", "$")]
		public string ToString(string format) {
			return ((QTime) interceptor).ToString(format);
		}
		[SmokeMethod("setHMS", "(int, int, int, int)", "$$$$")]
		public bool SetHMS(int h, int m, int s, int ms) {
			return ((QTime) interceptor).SetHMS(h,m,s,ms);
		}
		[SmokeMethod("setHMS", "(int, int, int)", "$$$")]
		public bool SetHMS(int h, int m, int s) {
			return ((QTime) interceptor).SetHMS(h,m,s);
		}
		[SmokeMethod("addSecs", "(int) const", "$")]
		public QTime AddSecs(int secs) {
			return ((QTime) interceptor).AddSecs(secs);
		}
		[SmokeMethod("secsTo", "(const QTime&) const", "#")]
		public int SecsTo(QTime arg1) {
			return ((QTime) interceptor).SecsTo(arg1);
		}
		[SmokeMethod("addMSecs", "(int) const", "$")]
		public QTime AddMSecs(int ms) {
			return ((QTime) interceptor).AddMSecs(ms);
		}
		[SmokeMethod("msecsTo", "(const QTime&) const", "#")]
		public int MsecsTo(QTime arg1) {
			return ((QTime) interceptor).MsecsTo(arg1);
		}
		public override bool Equals(object o) {
			if (!(o is QTime)) { return false; }
			return this == (QTime) o;
		}
		public override int GetHashCode() {
			return ((QTime) interceptor).GetHashCode();
		}
		[SmokeMethod("start", "()", "")]
		public void Start() {
			((QTime) interceptor).Start();
		}
		[SmokeMethod("restart", "()", "")]
		public int Restart() {
			return ((QTime) interceptor).Restart();
		}
		[SmokeMethod("elapsed", "() const", "")]
		public int Elapsed() {
			return ((QTime) interceptor).Elapsed();
		}
		~QTime() {
			DisposeQTime();
		}
		public void Dispose() {
			DisposeQTime();
		}
		[SmokeMethod("~QTime", "()", "")]
		private void DisposeQTime() {
			((QTime) interceptor).DisposeQTime();
		}
		public static bool operator==(QTime lhs, QTime other) {
			return staticInterceptor.op_equals(lhs,other);
		}
		public static bool operator!=(QTime lhs, QTime other) {
			return !staticInterceptor.op_equals(lhs,other);
		}
		public static bool operator<(QTime lhs, QTime other) {
			return staticInterceptor.op_lt(lhs,other);
		}
		public static bool operator<=(QTime lhs, QTime other) {
			return staticInterceptor.op_lte(lhs,other);
		}
		public static bool operator>(QTime lhs, QTime other) {
			return staticInterceptor.op_gt(lhs,other);
		}
		public static bool operator>=(QTime lhs, QTime other) {
			return staticInterceptor.op_gte(lhs,other);
		}
		public static QTime CurrentTime() {
			return staticInterceptor.CurrentTime();
		}
		public static QTime FromString(string s, Qt.DateFormat f) {
			return staticInterceptor.FromString(s,f);
		}
		public static QTime FromString(string s) {
			return staticInterceptor.FromString(s);
		}
		public static QTime FromString(string s, string format) {
			return staticInterceptor.FromString(s,format);
		}
		public static bool IsValid(int h, int m, int s, int ms) {
			return staticInterceptor.IsValid(h,m,s,ms);
		}
		public static bool IsValid(int h, int m, int s) {
			return staticInterceptor.IsValid(h,m,s);
		}
	}
}
