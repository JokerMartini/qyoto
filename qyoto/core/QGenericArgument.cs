//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QGenericArgument")]
	public class QGenericArgument : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
		private IntPtr _smokeObject;
		protected QGenericArgument(Type dummy) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QGenericArgument), this);
			_interceptor = (QGenericArgument) realProxy.GetTransparentProxy();
		}
		private QGenericArgument ProxyQGenericArgument() {
			return (QGenericArgument) _interceptor;
		}
		// QGenericArgument* QGenericArgument(const char* arg1,const void* arg2); >>>> NOT CONVERTED
		// void* data(); >>>> NOT CONVERTED
		public QGenericArgument(string aName) : this((Type) null) {
			CreateProxy();
			NewQGenericArgument(aName);
		}
		[SmokeMethod("QGenericArgument", "(const char*)", "$")]
		private void NewQGenericArgument(string aName) {
			ProxyQGenericArgument().NewQGenericArgument(aName);
		}
		public QGenericArgument() : this((Type) null) {
			CreateProxy();
			NewQGenericArgument();
		}
		[SmokeMethod("QGenericArgument", "()", "")]
		private void NewQGenericArgument() {
			ProxyQGenericArgument().NewQGenericArgument();
		}
		[SmokeMethod("name", "() const", "")]
		public string Name() {
			return ProxyQGenericArgument().Name();
		}
		~QGenericArgument() {
			DisposeQGenericArgument();
		}
		public void Dispose() {
			DisposeQGenericArgument();
		}
		[SmokeMethod("~QGenericArgument", "()", "")]
		private void DisposeQGenericArgument() {
			ProxyQGenericArgument().DisposeQGenericArgument();
		}
	}
}
