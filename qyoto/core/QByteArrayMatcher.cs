//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QByteArrayMatcher")]
	public class QByteArrayMatcher : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
		private IntPtr _smokeObject;
		protected QByteArrayMatcher(Type dummy) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QByteArrayMatcher), this);
			_interceptor = (QByteArrayMatcher) realProxy.GetTransparentProxy();
		}
		private QByteArrayMatcher ProxyQByteArrayMatcher() {
			return (QByteArrayMatcher) _interceptor;
		}
		public QByteArrayMatcher() : this((Type) null) {
			CreateProxy();
			NewQByteArrayMatcher();
		}
		[SmokeMethod("QByteArrayMatcher", "()", "")]
		private void NewQByteArrayMatcher() {
			ProxyQByteArrayMatcher().NewQByteArrayMatcher();
		}
		public QByteArrayMatcher(QByteArray pattern) : this((Type) null) {
			CreateProxy();
			NewQByteArrayMatcher(pattern);
		}
		[SmokeMethod("QByteArrayMatcher", "(const QByteArray&)", "#")]
		private void NewQByteArrayMatcher(QByteArray pattern) {
			ProxyQByteArrayMatcher().NewQByteArrayMatcher(pattern);
		}
		public QByteArrayMatcher(QByteArrayMatcher other) : this((Type) null) {
			CreateProxy();
			NewQByteArrayMatcher(other);
		}
		[SmokeMethod("QByteArrayMatcher", "(const QByteArrayMatcher&)", "#")]
		private void NewQByteArrayMatcher(QByteArrayMatcher other) {
			ProxyQByteArrayMatcher().NewQByteArrayMatcher(other);
		}
		[SmokeMethod("setPattern", "(const QByteArray&)", "#")]
		public void SetPattern(QByteArray pattern) {
			ProxyQByteArrayMatcher().SetPattern(pattern);
		}
		[SmokeMethod("indexIn", "(const QByteArray&, int) const", "#$")]
		public int IndexIn(QByteArray ba, int from) {
			return ProxyQByteArrayMatcher().IndexIn(ba,from);
		}
		[SmokeMethod("indexIn", "(const QByteArray&) const", "#")]
		public int IndexIn(QByteArray ba) {
			return ProxyQByteArrayMatcher().IndexIn(ba);
		}
		[SmokeMethod("pattern", "() const", "")]
		public QByteArray Pattern() {
			return ProxyQByteArrayMatcher().Pattern();
		}
		~QByteArrayMatcher() {
			DisposeQByteArrayMatcher();
		}
		public void Dispose() {
			DisposeQByteArrayMatcher();
		}
		[SmokeMethod("~QByteArrayMatcher", "()", "")]
		private void DisposeQByteArrayMatcher() {
			ProxyQByteArrayMatcher().DisposeQByteArrayMatcher();
		}
	}
}
