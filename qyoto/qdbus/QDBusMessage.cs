//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	[SmokeClass("QDBusMessage")]
	public class QDBusMessage : MarshalByRefObject, IDisposable {
		protected QDBusMessage interceptor = null;
		private IntPtr smokeObject;
		protected QDBusMessage(Type dummy) {}
		[SmokeClass("QDBusMessage")]
		interface IQDBusMessageProxy {
			[SmokeMethod("createSignal", "(const QString&, const QString&, const QString&)", "$$$")]
			QDBusMessage CreateSignal(string path, string arg2, string name);
			[SmokeMethod("createMethodCall", "(const QString&, const QString&, const QString&, const QString&)", "$$$$")]
			QDBusMessage CreateMethodCall(string destination, string path, string arg3, string method);
			[SmokeMethod("createError", "(const QString&, const QString&)", "$$")]
			QDBusMessage CreateError(string name, string msg);
			[SmokeMethod("createError", "(const QDBusError&)", "#")]
			QDBusMessage CreateError(QDBusError err);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDBusMessage), this);
			interceptor = (QDBusMessage) realProxy.GetTransparentProxy();
		}
		private static IQDBusMessageProxy staticInterceptor = null;
		static QDBusMessage() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDBusMessageProxy), null);
			staticInterceptor = (IQDBusMessageProxy) realProxy.GetTransparentProxy();
		}
		public enum MessageType {
			InvalidMessage = 0,
			MethodCallMessage = 1,
			ReplyMessage = 2,
			ErrorMessage = 3,
			SignalMessage = 4,
		}
		public QDBusMessage() : this((Type) null) {
			CreateProxy();
			NewQDBusMessage();
		}
		[SmokeMethod("QDBusMessage", "()", "")]
		private void NewQDBusMessage() {
			((QDBusMessage) interceptor).NewQDBusMessage();
		}
		public QDBusMessage(QDBusMessage other) : this((Type) null) {
			CreateProxy();
			NewQDBusMessage(other);
		}
		[SmokeMethod("QDBusMessage", "(const QDBusMessage&)", "#")]
		private void NewQDBusMessage(QDBusMessage other) {
			((QDBusMessage) interceptor).NewQDBusMessage(other);
		}
		[SmokeMethod("createReply", "(const QList<QVariant>&) const", "?")]
		public QDBusMessage CreateReply(List<QVariant> arguments) {
			return ((QDBusMessage) interceptor).CreateReply(arguments);
		}
		[SmokeMethod("createReply", "() const", "")]
		public QDBusMessage CreateReply() {
			return ((QDBusMessage) interceptor).CreateReply();
		}
		[SmokeMethod("createReply", "(const QVariant&) const", "#")]
		public QDBusMessage CreateReply(QVariant argument) {
			return ((QDBusMessage) interceptor).CreateReply(argument);
		}
		[SmokeMethod("createErrorReply", "(const QString, const QString&) const", "$$")]
		public QDBusMessage CreateErrorReply(string name, string msg) {
			return ((QDBusMessage) interceptor).CreateErrorReply(name,msg);
		}
		[SmokeMethod("createErrorReply", "(const QDBusError&) const", "#")]
		public QDBusMessage CreateErrorReply(QDBusError err) {
			return ((QDBusMessage) interceptor).CreateErrorReply(err);
		}
		[SmokeMethod("service", "() const", "")]
		public string Service() {
			return ((QDBusMessage) interceptor).Service();
		}
		[SmokeMethod("path", "() const", "")]
		public string Path() {
			return ((QDBusMessage) interceptor).Path();
		}
		[SmokeMethod("interface", "() const", "")]
		public string Interface() {
			return ((QDBusMessage) interceptor).Interface();
		}
		[SmokeMethod("member", "() const", "")]
		public string Member() {
			return ((QDBusMessage) interceptor).Member();
		}
		[SmokeMethod("errorName", "() const", "")]
		public string ErrorName() {
			return ((QDBusMessage) interceptor).ErrorName();
		}
		[SmokeMethod("type", "() const", "")]
		public QDBusMessage.MessageType type() {
			return ((QDBusMessage) interceptor).type();
		}
		[SmokeMethod("signature", "() const", "")]
		public string Signature() {
			return ((QDBusMessage) interceptor).Signature();
		}
		[SmokeMethod("isReplyRequired", "() const", "")]
		public bool IsReplyRequired() {
			return ((QDBusMessage) interceptor).IsReplyRequired();
		}
		[SmokeMethod("setDelayedReply", "(bool) const", "$")]
		public void SetDelayedReply(bool enable) {
			((QDBusMessage) interceptor).SetDelayedReply(enable);
		}
		[SmokeMethod("isDelayedReply", "() const", "")]
		public bool IsDelayedReply() {
			return ((QDBusMessage) interceptor).IsDelayedReply();
		}
		[SmokeMethod("setArguments", "(const QList<QVariant>&)", "?")]
		public void SetArguments(List<QVariant> arguments) {
			((QDBusMessage) interceptor).SetArguments(arguments);
		}
		[SmokeMethod("arguments", "() const", "")]
		public List<QVariant> Arguments() {
			return ((QDBusMessage) interceptor).Arguments();
		}
		[SmokeMethod("operator<<", "(const QVariant&)", "#")]
		public QDBusMessage Write(QVariant arg) {
			return ((QDBusMessage) interceptor).Write(arg);
		}
		~QDBusMessage() {
			DisposeQDBusMessage();
		}
		public void Dispose() {
			DisposeQDBusMessage();
		}
		[SmokeMethod("~QDBusMessage", "()", "")]
		private void DisposeQDBusMessage() {
			((QDBusMessage) interceptor).DisposeQDBusMessage();
		}
		public static QDBusMessage CreateSignal(string path, string arg2, string name) {
			return staticInterceptor.CreateSignal(path,arg2,name);
		}
		public static QDBusMessage CreateMethodCall(string destination, string path, string arg3, string method) {
			return staticInterceptor.CreateMethodCall(destination,path,arg3,method);
		}
		public static QDBusMessage CreateError(string name, string msg) {
			return staticInterceptor.CreateError(name,msg);
		}
		public static QDBusMessage CreateError(QDBusError err) {
			return staticInterceptor.CreateError(err);
		}
	}
}
