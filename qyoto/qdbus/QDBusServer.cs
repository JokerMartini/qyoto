//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QDBusServer")]
	public class QDBusServer : QObject, IDisposable {
 		protected QDBusServer(Type dummy) : base((Type) null) {}
		[SmokeClass("QDBusServer")]
		interface IQDBusServerProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDBusServer), this);
			interceptor = (QDBusServer) realProxy.GetTransparentProxy();
		}
		private static IQDBusServerProxy staticInterceptor = null;
		static QDBusServer() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDBusServerProxy), null);
			staticInterceptor = (IQDBusServerProxy) realProxy.GetTransparentProxy();
		}
		public QDBusServer(string address, QObject parent) : this((Type) null) {
			CreateProxy();
			NewQDBusServer(address,parent);
		}
		[SmokeMethod("QDBusServer", "(const QString&, QObject*)", "$#")]
		private void NewQDBusServer(string address, QObject parent) {
			((QDBusServer) interceptor).NewQDBusServer(address,parent);
		}
		public QDBusServer(string address) : this((Type) null) {
			CreateProxy();
			NewQDBusServer(address);
		}
		[SmokeMethod("QDBusServer", "(const QString&)", "$")]
		private void NewQDBusServer(string address) {
			((QDBusServer) interceptor).NewQDBusServer(address);
		}
		[SmokeMethod("isConnected", "() const", "")]
		public bool IsConnected() {
			return ((QDBusServer) interceptor).IsConnected();
		}
		[SmokeMethod("lastError", "() const", "")]
		public QDBusError LastError() {
			return ((QDBusServer) interceptor).LastError();
		}
		[SmokeMethod("address", "() const", "")]
		public string Address() {
			return ((QDBusServer) interceptor).Address();
		}
		~QDBusServer() {
			DisposeQDBusServer();
		}
		public new void Dispose() {
			DisposeQDBusServer();
		}
		[SmokeMethod("~QDBusServer", "()", "")]
		private void DisposeQDBusServer() {
			((QDBusServer) interceptor).DisposeQDBusServer();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQDBusServerSignals Emit {
			get { return (IQDBusServerSignals) Q_EMIT; }
		}
	}

	public interface IQDBusServerSignals : IQObjectSignals {
	}
}
