//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;

	[SmokeClass("QDBusArgument")]
	public class QDBusArgument : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
		protected QDBusArgument(Type dummy) {}
		interface IQDBusArgumentProxy {
			QDBusArgument op_write(QDBusArgument lhs, ushort arg);
			QDBusArgument op_write(QDBusArgument lhs, bool arg);
			QDBusArgument op_write(QDBusArgument lhs, short arg);
			QDBusArgument op_write(QDBusArgument lhs, int arg);
			QDBusArgument op_write(QDBusArgument lhs, uint arg);
			QDBusArgument op_write(QDBusArgument lhs, double arg);
			QDBusArgument op_write(QDBusArgument lhs, string arg);
			QDBusArgument op_write(QDBusArgument lhs, string[] arg);
			QDBusArgument op_write(QDBusArgument lhs, QByteArray arg);
			QDBusArgument op_read(QDBusArgument lhs, ushort arg);
			QDBusArgument op_read(QDBusArgument lhs, bool arg);
			QDBusArgument op_read(QDBusArgument lhs, out int arg);
			QDBusArgument op_read(QDBusArgument lhs, uint arg);
			QDBusArgument op_read(QDBusArgument lhs, double arg);
			QDBusArgument op_read(QDBusArgument lhs, StringBuilder arg);
			QDBusArgument op_read(QDBusArgument lhs, string[] arg);
			QDBusArgument op_read(QDBusArgument lhs, QByteArray arg);
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDBusArgument), this);
			_interceptor = (QDBusArgument) realProxy.GetTransparentProxy();
		}
		private QDBusArgument ProxyQDBusArgument() {
			return (QDBusArgument) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QDBusArgument() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDBusArgumentProxy), null);
			_staticInterceptor = (IQDBusArgumentProxy) realProxy.GetTransparentProxy();
		}
		private static IQDBusArgumentProxy StaticQDBusArgument() {
			return (IQDBusArgumentProxy) _staticInterceptor;
		}

		public QDBusArgument() : this((Type) null) {
			CreateProxy();
			NewQDBusArgument();
		}
		[SmokeMethod("QDBusArgument()")]
		private void NewQDBusArgument() {
			ProxyQDBusArgument().NewQDBusArgument();
		}
		public QDBusArgument(QDBusArgument other) : this((Type) null) {
			CreateProxy();
			NewQDBusArgument(other);
		}
		[SmokeMethod("QDBusArgument(const QDBusArgument&)")]
		private void NewQDBusArgument(QDBusArgument other) {
			ProxyQDBusArgument().NewQDBusArgument(other);
		}
		[SmokeMethod("operator<<(uchar)")]
		public static QDBusArgument op_write(QDBusArgument lhs, ushort arg) {
			return StaticQDBusArgument().op_write(lhs,arg);
		}
		[SmokeMethod("operator<<(bool)")]
		public static QDBusArgument op_write(QDBusArgument lhs, bool arg) {
			return StaticQDBusArgument().op_write(lhs,arg);
		}
		[SmokeMethod("operator<<(short)")]
		public static QDBusArgument op_write(QDBusArgument lhs, short arg) {
			return StaticQDBusArgument().op_write(lhs,arg);
		}
		[SmokeMethod("operator<<(int)")]
		public static QDBusArgument op_write(QDBusArgument lhs, int arg) {
			return StaticQDBusArgument().op_write(lhs,arg);
		}
		[SmokeMethod("operator<<(uint)")]
		public static QDBusArgument op_write(QDBusArgument lhs, uint arg) {
			return StaticQDBusArgument().op_write(lhs,arg);
		}
		// QDBusArgument& operator<<(qlonglong arg1); >>>> NOT CONVERTED
		// QDBusArgument& operator<<(qulonglong arg1); >>>> NOT CONVERTED
		[SmokeMethod("operator<<(double)")]
		public static QDBusArgument op_write(QDBusArgument lhs, double arg) {
			return StaticQDBusArgument().op_write(lhs,arg);
		}
		[SmokeMethod("operator<<(const QString&)")]
		public static QDBusArgument op_write(QDBusArgument lhs, string arg) {
			return StaticQDBusArgument().op_write(lhs,arg);
		}
		// QDBusArgument& operator<<(const QDBusVariant& arg1); >>>> NOT CONVERTED
		// QDBusArgument& operator<<(const QDBusObjectPath& arg1); >>>> NOT CONVERTED
		// QDBusArgument& operator<<(const QDBusSignature& arg1); >>>> NOT CONVERTED
		[SmokeMethod("operator<<(const QStringList&)")]
		public static QDBusArgument op_write(QDBusArgument lhs, string[] arg) {
			return StaticQDBusArgument().op_write(lhs,arg);
		}
		[SmokeMethod("operator<<(const QByteArray&)")]
		public static QDBusArgument op_write(QDBusArgument lhs, QByteArray arg) {
			return StaticQDBusArgument().op_write(lhs,arg);
		}
		[SmokeMethod("beginStructure()")]
		public void BeginStructure() {
			ProxyQDBusArgument().BeginStructure();
		}
		[SmokeMethod("endStructure()")]
		public void EndStructure() {
			ProxyQDBusArgument().EndStructure();
		}
		[SmokeMethod("beginArray(int)")]
		public void BeginArray(int elementMetaTypeId) {
			ProxyQDBusArgument().BeginArray(elementMetaTypeId);
		}
		[SmokeMethod("endArray()")]
		public void EndArray() {
			ProxyQDBusArgument().EndArray();
		}
		[SmokeMethod("beginMap(int, int)")]
		public void BeginMap(int keyMetaTypeId, int valueMetaTypeId) {
			ProxyQDBusArgument().BeginMap(keyMetaTypeId,valueMetaTypeId);
		}
		[SmokeMethod("endMap()")]
		public void EndMap() {
			ProxyQDBusArgument().EndMap();
		}
		[SmokeMethod("beginMapEntry()")]
		public void BeginMapEntry() {
			ProxyQDBusArgument().BeginMapEntry();
		}
		[SmokeMethod("endMapEntry()")]
		public void EndMapEntry() {
			ProxyQDBusArgument().EndMapEntry();
		}
		[SmokeMethod("currentSignature() const")]
		public string CurrentSignature() {
			return ProxyQDBusArgument().CurrentSignature();
		}
		[SmokeMethod("operator>>(uchar&) const")]
		public static QDBusArgument op_read(QDBusArgument lhs, ushort arg) {
			return StaticQDBusArgument().op_read(lhs,arg);
		}
		[SmokeMethod("operator>>(bool&) const")]
		public static QDBusArgument op_read(QDBusArgument lhs, bool arg) {
			return StaticQDBusArgument().op_read(lhs,arg);
		}
		// const QDBusArgument& operator>>(short& arg1); >>>> NOT CONVERTED
		// const QDBusArgument& operator>>(ushort& arg1); >>>> NOT CONVERTED
		[SmokeMethod("operator>>(int&) const")]
		public static QDBusArgument op_read(QDBusArgument lhs, out int arg) {
			return StaticQDBusArgument().op_read(lhs,out arg);
		}
		[SmokeMethod("operator>>(uint&) const")]
		public static QDBusArgument op_read(QDBusArgument lhs, uint arg) {
			return StaticQDBusArgument().op_read(lhs,arg);
		}
		// const QDBusArgument& operator>>(qlonglong& arg1); >>>> NOT CONVERTED
		// const QDBusArgument& operator>>(qulonglong& arg1); >>>> NOT CONVERTED
		[SmokeMethod("operator>>(double&) const")]
		public static QDBusArgument op_read(QDBusArgument lhs, double arg) {
			return StaticQDBusArgument().op_read(lhs,arg);
		}
		[SmokeMethod("operator>>(QString&) const")]
		public static QDBusArgument op_read(QDBusArgument lhs, StringBuilder arg) {
			return StaticQDBusArgument().op_read(lhs,arg);
		}
		// const QDBusArgument& operator>>(QDBusVariant& arg1); >>>> NOT CONVERTED
		// const QDBusArgument& operator>>(QDBusObjectPath& arg1); >>>> NOT CONVERTED
		// const QDBusArgument& operator>>(QDBusSignature& arg1); >>>> NOT CONVERTED
		[SmokeMethod("operator>>(QStringList&) const")]
		public static QDBusArgument op_read(QDBusArgument lhs, string[] arg) {
			return StaticQDBusArgument().op_read(lhs,arg);
		}
		[SmokeMethod("operator>>(QByteArray&) const")]
		public static QDBusArgument op_read(QDBusArgument lhs, QByteArray arg) {
			return StaticQDBusArgument().op_read(lhs,arg);
		}
		[SmokeMethod("beginArray() const")]
		public void BeginArray() {
			ProxyQDBusArgument().BeginArray();
		}
		[SmokeMethod("beginMap() const")]
		public void BeginMap() {
			ProxyQDBusArgument().BeginMap();
		}
		[SmokeMethod("atEnd() const")]
		public bool AtEnd() {
			return ProxyQDBusArgument().AtEnd();
		}
		~QDBusArgument() {
			DisposeQDBusArgument();
		}
		public void Dispose() {
			DisposeQDBusArgument();
		}
		[SmokeMethod("~QDBusArgument()")]
		private void DisposeQDBusArgument() {
			ProxyQDBusArgument().DisposeQDBusArgument();
		}
	}
}
