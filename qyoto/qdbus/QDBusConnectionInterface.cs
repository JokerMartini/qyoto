//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QDBusConnectionInterface")]
	public partial class QDBusConnectionInterface : QDBusAbstractInterface {
 		protected QDBusConnectionInterface(Type dummy) : base((Type) null) {}
		[SmokeClass("QDBusConnectionInterface")]
		interface IQDBusConnectionInterfaceProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		private static Object _staticInterceptor = null;
		static QDBusConnectionInterface() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDBusConnectionInterfaceProxy), null);
			_staticInterceptor = (IQDBusConnectionInterfaceProxy) realProxy.GetTransparentProxy();
		}
		private static IQDBusConnectionInterfaceProxy StaticQDBusConnectionInterface() {
			return (IQDBusConnectionInterfaceProxy) _staticInterceptor;
		}
		public enum ServiceQueueOptions {
			DontQueueService = 0,
			QueueService = 1,
			ReplaceExistingService = 2,
		}
		public enum ServiceReplacementOptions {
			DontAllowReplacement = 0,
			AllowReplacement = 1,
		}
		public enum RegisterServiceReply {
			ServiceNotRegistered = 0,
			ServiceRegistered = 1,
			ServiceQueued = 2,
		}
		// QDBusReply<QStringList> registeredServiceNames(); >>>> NOT CONVERTED
		// QDBusReply<bool> isServiceRegistered(const QString& arg1); >>>> NOT CONVERTED
		// QDBusReply<QString> serviceOwner(const QString& arg1); >>>> NOT CONVERTED
		// QDBusReply<bool> unregisterService(const QString& arg1); >>>> NOT CONVERTED
		// QDBusReply<QDBusConnectionInterface::RegisterServiceReply> registerService(const QString& arg1,QDBusConnectionInterface::ServiceQueueOptions arg2,QDBusConnectionInterface::ServiceReplacementOptions arg3); >>>> NOT CONVERTED
		// QDBusReply<QDBusConnectionInterface::RegisterServiceReply> registerService(const QString& arg1,QDBusConnectionInterface::ServiceQueueOptions arg2); >>>> NOT CONVERTED
		// QDBusReply<QDBusConnectionInterface::RegisterServiceReply> registerService(const QString& arg1); >>>> NOT CONVERTED
		// QDBusReply<uint> servicePid(const QString& arg1); >>>> NOT CONVERTED
		// QDBusReply<uint> serviceUid(const QString& arg1); >>>> NOT CONVERTED
		// QDBusReply<void> startService(const QString& arg1); >>>> NOT CONVERTED
		public static string Tr(string s, string c) {
			return StaticQDBusConnectionInterface().Tr(s,c);
		}
		public static string Tr(string s) {
			return StaticQDBusConnectionInterface().Tr(s);
		}
		protected new IQDBusConnectionInterfaceSignals Emit {
			get { return (IQDBusConnectionInterfaceSignals) Q_EMIT; }
		}
	}

	public interface IQDBusConnectionInterfaceSignals : IQDBusAbstractInterfaceSignals {
	}
}
