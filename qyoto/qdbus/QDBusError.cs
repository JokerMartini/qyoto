//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QDBusError")]
	public class QDBusError : MarshalByRefObject, IDisposable {
		protected QDBusError interceptor = null;
		private IntPtr smokeObject;
		protected QDBusError(Type dummy) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDBusError), this);
			interceptor = (QDBusError) realProxy.GetTransparentProxy();
		}
		public enum ErrorType {
			NoError = 0,
			Other = 1,
			Failed = 2,
			NoMemory = 3,
			ServiceUnknown = 4,
			NoReply = 5,
			BadAddress = 6,
			NotSupported = 7,
			LimitsExceeded = 8,
			AccessDenied = 9,
			NoServer = 10,
			Timeout = 11,
			NoNetwork = 12,
			AddressInUse = 13,
			Disconnected = 14,
			InvalidArgs = 15,
			UnknownMethod = 16,
			TimedOut = 17,
			InvalidSignature = 18,
			UnknownInterface = 19,
			InternalError = 20,
			LastErrorType = InternalError,
		}
		// QDBusError* QDBusError(const DBusError* arg1); >>>> NOT CONVERTED
		public QDBusError(QDBusMessage msg) : this((Type) null) {
			CreateProxy();
			NewQDBusError(msg);
		}
		[SmokeMethod("QDBusError", "(const QDBusMessage&)", "#")]
		private void NewQDBusError(QDBusMessage msg) {
			((QDBusError) interceptor).NewQDBusError(msg);
		}
		public QDBusError(QDBusError.ErrorType error, string message) : this((Type) null) {
			CreateProxy();
			NewQDBusError(error,message);
		}
		[SmokeMethod("QDBusError", "(QDBusError::ErrorType, const QString&)", "$$")]
		private void NewQDBusError(QDBusError.ErrorType error, string message) {
			((QDBusError) interceptor).NewQDBusError(error,message);
		}
		public QDBusError(QDBusError other) : this((Type) null) {
			CreateProxy();
			NewQDBusError(other);
		}
		[SmokeMethod("QDBusError", "(const QDBusError&)", "#")]
		private void NewQDBusError(QDBusError other) {
			((QDBusError) interceptor).NewQDBusError(other);
		}
		[SmokeMethod("type", "() const", "")]
		public QDBusError.ErrorType type() {
			return ((QDBusError) interceptor).type();
		}
		[SmokeMethod("name", "() const", "")]
		public string Name() {
			return ((QDBusError) interceptor).Name();
		}
		[SmokeMethod("message", "() const", "")]
		public string Message() {
			return ((QDBusError) interceptor).Message();
		}
		[SmokeMethod("isValid", "() const", "")]
		public bool IsValid() {
			return ((QDBusError) interceptor).IsValid();
		}
		~QDBusError() {
			DisposeQDBusError();
		}
		public void Dispose() {
			DisposeQDBusError();
		}
		[SmokeMethod("~QDBusError", "()", "")]
		private void DisposeQDBusError() {
			((QDBusError) interceptor).DisposeQDBusError();
		}
	}
}
