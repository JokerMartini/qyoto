//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QDBusConnection")]
	public class QDBusConnection : MarshalByRefObject, IDisposable {
		protected QDBusConnection interceptor = null;
		private IntPtr smokeObject;
		protected QDBusConnection(Type dummy) {}
		[SmokeClass("QDBusConnection")]
		interface IQDBusConnectionProxy {
			[SmokeMethod("connectToBus", "(QDBusConnection::BusType, const QString&)", "$$")]
			QDBusConnection ConnectToBus(QDBusConnection.BusType type, string name);
			[SmokeMethod("connectToBus", "(const QString&, const QString&)", "$$")]
			QDBusConnection ConnectToBus(string address, string name);
			[SmokeMethod("disconnectFromBus", "(const QString&)", "$")]
			void DisconnectFromBus(string name);
			[SmokeMethod("sessionBus", "()", "")]
			QDBusConnection SessionBus();
			[SmokeMethod("systemBus", "()", "")]
			QDBusConnection SystemBus();
			[SmokeMethod("sender", "()", "")]
			QDBusConnection Sender();
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDBusConnection), this);
			interceptor = (QDBusConnection) realProxy.GetTransparentProxy();
		}
		private static IQDBusConnectionProxy staticInterceptor = null;
		static QDBusConnection() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDBusConnectionProxy), null);
			staticInterceptor = (IQDBusConnectionProxy) realProxy.GetTransparentProxy();
		}
		public enum BusType {
			SessionBus = 0,
			SystemBus = 1,
			ActivationBus = 2,
		}
		public enum RegisterOption {
			ExportAdaptors = 0x01,
			ExportScriptableSlots = 0x10,
			ExportScriptableSignals = 0x20,
			ExportScriptableProperties = 0x40,
			ExportScriptableContents = 0xf0,
			ExportNonScriptableSlots = 0x100,
			ExportNonScriptableSignals = 0x200,
			ExportNonScriptableProperties = 0x400,
			ExportNonScriptableContents = 0xf00,
			ExportAllSlots = ExportScriptableSlots|ExportNonScriptableSlots,
			ExportAllSignal = ExportScriptableSignals|ExportNonScriptableSignals,
			ExportAllProperties = ExportScriptableProperties|ExportNonScriptableProperties,
			ExportAllContents = ExportScriptableContents|ExportNonScriptableContents,
			ExportChildObjects = 0x1000,
		}
		public enum UnregisterMode {
			UnregisterNode = 0,
			UnregisterTree = 1,
		}
		// QDBusConnection* QDBusConnection(QDBusConnectionPrivate* arg1); >>>> NOT CONVERTED
		public QDBusConnection(string name) : this((Type) null) {
			CreateProxy();
			NewQDBusConnection(name);
		}
		[SmokeMethod("QDBusConnection", "(const QString&)", "$")]
		private void NewQDBusConnection(string name) {
			((QDBusConnection) interceptor).NewQDBusConnection(name);
		}
		public QDBusConnection(QDBusConnection other) : this((Type) null) {
			CreateProxy();
			NewQDBusConnection(other);
		}
		[SmokeMethod("QDBusConnection", "(const QDBusConnection&)", "#")]
		private void NewQDBusConnection(QDBusConnection other) {
			((QDBusConnection) interceptor).NewQDBusConnection(other);
		}
		[SmokeMethod("isConnected", "() const", "")]
		public bool IsConnected() {
			return ((QDBusConnection) interceptor).IsConnected();
		}
		[SmokeMethod("baseService", "() const", "")]
		public string BaseService() {
			return ((QDBusConnection) interceptor).BaseService();
		}
		[SmokeMethod("lastError", "() const", "")]
		public QDBusError LastError() {
			return ((QDBusConnection) interceptor).LastError();
		}
		[SmokeMethod("send", "(const QDBusMessage&) const", "#")]
		public bool Send(QDBusMessage message) {
			return ((QDBusConnection) interceptor).Send(message);
		}
		[SmokeMethod("callWithCallback", "(const QDBusMessage&, QObject*, const char*, int) const", "##$$")]
		public bool CallWithCallback(QDBusMessage message, QObject receiver, string slot, int timeout) {
			return ((QDBusConnection) interceptor).CallWithCallback(message,receiver,slot,timeout);
		}
		[SmokeMethod("callWithCallback", "(const QDBusMessage&, QObject*, const char*) const", "##$")]
		public bool CallWithCallback(QDBusMessage message, QObject receiver, string slot) {
			return ((QDBusConnection) interceptor).CallWithCallback(message,receiver,slot);
		}
		[SmokeMethod("call", "(const QDBusMessage&, QDBus::CallMode, int) const", "#$$")]
		public QDBusMessage Call(QDBusMessage message, QDBus.CallMode mode, int timeout) {
			return ((QDBusConnection) interceptor).Call(message,mode,timeout);
		}
		[SmokeMethod("call", "(const QDBusMessage&, QDBus::CallMode) const", "#$")]
		public QDBusMessage Call(QDBusMessage message, QDBus.CallMode mode) {
			return ((QDBusConnection) interceptor).Call(message,mode);
		}
		[SmokeMethod("call", "(const QDBusMessage&) const", "#")]
		public QDBusMessage Call(QDBusMessage message) {
			return ((QDBusConnection) interceptor).Call(message);
		}
		[SmokeMethod("connect", "(const QString&, const QString&, const QString&, const QString&, QObject*, const char*)", "$$$$#$")]
		public bool Connect(string service, string path, string arg3, string name, QObject receiver, string slot) {
			return ((QDBusConnection) interceptor).Connect(service,path,arg3,name,receiver,slot);
		}
		[SmokeMethod("disconnect", "(const QString&, const QString&, const QString&, const QString&, QObject*, const char*)", "$$$$#$")]
		public bool Disconnect(string service, string path, string arg3, string name, QObject receiver, string slot) {
			return ((QDBusConnection) interceptor).Disconnect(service,path,arg3,name,receiver,slot);
		}
		[SmokeMethod("connect", "(const QString&, const QString&, const QString&, const QString&, const QString&, QObject*, const char*)", "$$$$$#$")]
		public bool Connect(string service, string path, string arg3, string name, string signature, QObject receiver, string slot) {
			return ((QDBusConnection) interceptor).Connect(service,path,arg3,name,signature,receiver,slot);
		}
		[SmokeMethod("disconnect", "(const QString&, const QString&, const QString&, const QString&, const QString&, QObject*, const char*)", "$$$$$#$")]
		public bool Disconnect(string service, string path, string arg3, string name, string signature, QObject receiver, string slot) {
			return ((QDBusConnection) interceptor).Disconnect(service,path,arg3,name,signature,receiver,slot);
		}
		[SmokeMethod("registerObject", "(const QString&, QObject*, RegisterOptions)", "$#$")]
		public bool RegisterObject(string path, QObject arg2, int options) {
			return ((QDBusConnection) interceptor).RegisterObject(path,arg2,options);
		}
		[SmokeMethod("registerObject", "(const QString&, QObject*)", "$#")]
		public bool RegisterObject(string path, QObject arg2) {
			return ((QDBusConnection) interceptor).RegisterObject(path,arg2);
		}
		[SmokeMethod("unregisterObject", "(const QString&, QDBusConnection::UnregisterMode)", "$$")]
		public void UnregisterObject(string path, QDBusConnection.UnregisterMode mode) {
			((QDBusConnection) interceptor).UnregisterObject(path,mode);
		}
		[SmokeMethod("unregisterObject", "(const QString&)", "$")]
		public void UnregisterObject(string path) {
			((QDBusConnection) interceptor).UnregisterObject(path);
		}
		[SmokeMethod("objectRegisteredAt", "(const QString&) const", "$")]
		public QObject ObjectRegisteredAt(string path) {
			return ((QDBusConnection) interceptor).ObjectRegisteredAt(path);
		}
		[SmokeMethod("registerService", "(const QString&)", "$")]
		public bool RegisterService(string serviceName) {
			return ((QDBusConnection) interceptor).RegisterService(serviceName);
		}
		[SmokeMethod("unregisterService", "(const QString&)", "$")]
		public bool UnregisterService(string serviceName) {
			return ((QDBusConnection) interceptor).UnregisterService(serviceName);
		}
		[SmokeMethod("interface", "() const", "")]
		public QDBusConnectionInterface Interface() {
			return ((QDBusConnection) interceptor).Interface();
		}
		~QDBusConnection() {
			DisposeQDBusConnection();
		}
		public void Dispose() {
			DisposeQDBusConnection();
		}
		[SmokeMethod("~QDBusConnection", "()", "")]
		private void DisposeQDBusConnection() {
			((QDBusConnection) interceptor).DisposeQDBusConnection();
		}
		public static QDBusConnection ConnectToBus(QDBusConnection.BusType type, string name) {
			return staticInterceptor.ConnectToBus(type,name);
		}
		public static QDBusConnection ConnectToBus(string address, string name) {
			return staticInterceptor.ConnectToBus(address,name);
		}
		public static void DisconnectFromBus(string name) {
			staticInterceptor.DisconnectFromBus(name);
		}
		public static QDBusConnection SessionBus() {
			return staticInterceptor.SessionBus();
		}
		public static QDBusConnection SystemBus() {
			return staticInterceptor.SystemBus();
		}
		public static QDBusConnection Sender() {
			return staticInterceptor.Sender();
		}
	}
}
