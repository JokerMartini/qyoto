//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;

	[SmokeClass("QDBusInterface")]
	public class QDBusInterface : QDBusAbstractInterface, IDisposable {
 		protected QDBusInterface(Type dummy) : base((Type) null) {}
		interface IQDBusInterfaceProxy {
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDBusInterface), this);
			_interceptor = (QDBusInterface) realProxy.GetTransparentProxy();
		}
		private QDBusInterface ProxyQDBusInterface() {
			return (QDBusInterface) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QDBusInterface() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDBusInterfaceProxy), null);
			_staticInterceptor = (IQDBusInterfaceProxy) realProxy.GetTransparentProxy();
		}
		private static IQDBusInterfaceProxy StaticQDBusInterface() {
			return (IQDBusInterfaceProxy) _staticInterceptor;
		}

		public QDBusInterface(string service, string path, string arg3, QDBusConnection connection, QObject parent) : this((Type) null) {
			CreateProxy();
			NewQDBusInterface(service,path,arg3,connection,parent);
		}
		[SmokeMethod("QDBusInterface", "(const QString&, const QString&, const QString&, const QDBusConnection&, QObject*)", "$$$##")]
		private void NewQDBusInterface(string service, string path, string arg3, QDBusConnection connection, QObject parent) {
			ProxyQDBusInterface().NewQDBusInterface(service,path,arg3,connection,parent);
		}
		public QDBusInterface(string service, string path, string arg3, QDBusConnection connection) : this((Type) null) {
			CreateProxy();
			NewQDBusInterface(service,path,arg3,connection);
		}
		[SmokeMethod("QDBusInterface", "(const QString&, const QString&, const QString&, const QDBusConnection&)", "$$$#")]
		private void NewQDBusInterface(string service, string path, string arg3, QDBusConnection connection) {
			ProxyQDBusInterface().NewQDBusInterface(service,path,arg3,connection);
		}
		public QDBusInterface(string service, string path, string arg3) : this((Type) null) {
			CreateProxy();
			NewQDBusInterface(service,path,arg3);
		}
		[SmokeMethod("QDBusInterface", "(const QString&, const QString&, const QString&)", "$$$")]
		private void NewQDBusInterface(string service, string path, string arg3) {
			ProxyQDBusInterface().NewQDBusInterface(service,path,arg3);
		}
		public QDBusInterface(string service, string path) : this((Type) null) {
			CreateProxy();
			NewQDBusInterface(service,path);
		}
		[SmokeMethod("QDBusInterface", "(const QString&, const QString&)", "$$")]
		private void NewQDBusInterface(string service, string path) {
			ProxyQDBusInterface().NewQDBusInterface(service,path);
		}
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		~QDBusInterface() {
			DisposeQDBusInterface();
		}
		public new void Dispose() {
			DisposeQDBusInterface();
		}
		[SmokeMethod("~QDBusInterface", "()", "")]
		private void DisposeQDBusInterface() {
			ProxyQDBusInterface().DisposeQDBusInterface();
		}
		protected new IQDBusInterfaceSignals Emit {
			get {
				return (IQDBusInterfaceSignals) Q_EMIT;
			}
		}
	}

	public interface IQDBusInterfaceSignals : IQDBusAbstractInterfaceSignals {
	}
}
