//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	/// See <see cref="IQSvgRendererSignals"></see> for signals emitted by QSvgRenderer
	[SmokeClass("QSvgRenderer")]
	public class QSvgRenderer : QObject, IDisposable {
 		protected QSvgRenderer(Type dummy) : base((Type) null) {}
		[SmokeClass("QSvgRenderer")]
		interface IQSvgRendererProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSvgRenderer), this);
			_interceptor = (QSvgRenderer) realProxy.GetTransparentProxy();
		}
		private QSvgRenderer ProxyQSvgRenderer() {
			return (QSvgRenderer) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QSvgRenderer() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSvgRendererProxy), null);
			_staticInterceptor = (IQSvgRendererProxy) realProxy.GetTransparentProxy();
		}
		private static IQSvgRendererProxy StaticQSvgRenderer() {
			return (IQSvgRendererProxy) _staticInterceptor;
		}
		[Q_PROPERTY("QRectF", "viewBox")]
		public QRectF ViewBox {
			get {
				return Property("viewBox").Value<QRectF>();
			}
			set {
				SetProperty("viewBox", QVariant.FromValue<QRectF>(value));
			}
		}
		[Q_PROPERTY("int", "framesPerSecond")]
		public int FramesPerSecond {
			get {
				return Property("framesPerSecond").Value<int>();
			}
			set {
				SetProperty("framesPerSecond", QVariant.FromValue<int>(value));
			}
		}
		[Q_PROPERTY("int", "currentFrame")]
		public int CurrentFrame {
			get {
				return Property("currentFrame").Value<int>();
			}
			set {
				SetProperty("currentFrame", QVariant.FromValue<int>(value));
			}
		}
		public QSvgRenderer(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQSvgRenderer(parent);
		}
		[SmokeMethod("QSvgRenderer", "(QObject*)", "#")]
		private void NewQSvgRenderer(QObject parent) {
			ProxyQSvgRenderer().NewQSvgRenderer(parent);
		}
		public QSvgRenderer() : this((Type) null) {
			CreateProxy();
			NewQSvgRenderer();
		}
		[SmokeMethod("QSvgRenderer", "()", "")]
		private void NewQSvgRenderer() {
			ProxyQSvgRenderer().NewQSvgRenderer();
		}
		public QSvgRenderer(string filename, QObject parent) : this((Type) null) {
			CreateProxy();
			NewQSvgRenderer(filename,parent);
		}
		[SmokeMethod("QSvgRenderer", "(const QString&, QObject*)", "$#")]
		private void NewQSvgRenderer(string filename, QObject parent) {
			ProxyQSvgRenderer().NewQSvgRenderer(filename,parent);
		}
		public QSvgRenderer(string filename) : this((Type) null) {
			CreateProxy();
			NewQSvgRenderer(filename);
		}
		[SmokeMethod("QSvgRenderer", "(const QString&)", "$")]
		private void NewQSvgRenderer(string filename) {
			ProxyQSvgRenderer().NewQSvgRenderer(filename);
		}
		public QSvgRenderer(QByteArray contents, QObject parent) : this((Type) null) {
			CreateProxy();
			NewQSvgRenderer(contents,parent);
		}
		[SmokeMethod("QSvgRenderer", "(const QByteArray&, QObject*)", "##")]
		private void NewQSvgRenderer(QByteArray contents, QObject parent) {
			ProxyQSvgRenderer().NewQSvgRenderer(contents,parent);
		}
		public QSvgRenderer(QByteArray contents) : this((Type) null) {
			CreateProxy();
			NewQSvgRenderer(contents);
		}
		[SmokeMethod("QSvgRenderer", "(const QByteArray&)", "#")]
		private void NewQSvgRenderer(QByteArray contents) {
			ProxyQSvgRenderer().NewQSvgRenderer(contents);
		}
		[SmokeMethod("isValid", "() const", "")]
		public bool IsValid() {
			return ProxyQSvgRenderer().IsValid();
		}
		[SmokeMethod("defaultSize", "() const", "")]
		public QSize DefaultSize() {
			return ProxyQSvgRenderer().DefaultSize();
		}
		[SmokeMethod("viewBoxF", "() const", "")]
		public QRectF ViewBoxF() {
			return ProxyQSvgRenderer().ViewBoxF();
		}
		[SmokeMethod("animated", "() const", "")]
		public bool Animated() {
			return ProxyQSvgRenderer().Animated();
		}
		[SmokeMethod("animationDuration", "() const", "")]
		public int AnimationDuration() {
			return ProxyQSvgRenderer().AnimationDuration();
		}
		[SmokeMethod("boundsOnElement", "(const QString&) const", "$")]
		public QRectF BoundsOnElement(string id) {
			return ProxyQSvgRenderer().BoundsOnElement(id);
		}
		[SmokeMethod("elementExists", "(const QString&) const", "$")]
		public bool ElementExists(string id) {
			return ProxyQSvgRenderer().ElementExists(id);
		}
		[SmokeMethod("matrixForElement", "(const QString&) const", "$")]
		public QMatrix MatrixForElement(string id) {
			return ProxyQSvgRenderer().MatrixForElement(id);
		}
		[Q_SLOT("bool load(const QString&)")]
		[SmokeMethod("load", "(const QString&)", "$")]
		public bool Load(string filename) {
			return ProxyQSvgRenderer().Load(filename);
		}
		[Q_SLOT("bool load(const QByteArray&)")]
		[SmokeMethod("load", "(const QByteArray&)", "#")]
		public bool Load(QByteArray contents) {
			return ProxyQSvgRenderer().Load(contents);
		}
		[Q_SLOT("void render(QPainter*)")]
		[SmokeMethod("render", "(QPainter*)", "#")]
		public void Render(QPainter p) {
			ProxyQSvgRenderer().Render(p);
		}
		[Q_SLOT("void render(QPainter*, const QRectF&)")]
		[SmokeMethod("render", "(QPainter*, const QRectF&)", "##")]
		public void Render(QPainter p, QRectF bounds) {
			ProxyQSvgRenderer().Render(p,bounds);
		}
		[Q_SLOT("void render(QPainter*, const QString&, const QRectF&)")]
		[SmokeMethod("render", "(QPainter*, const QString&, const QRectF&)", "#$#")]
		public void Render(QPainter p, string elementId, QRectF bounds) {
			ProxyQSvgRenderer().Render(p,elementId,bounds);
		}
		[Q_SLOT("void render(QPainter*, const QString&)")]
		[SmokeMethod("render", "(QPainter*, const QString&)", "#$")]
		public void Render(QPainter p, string elementId) {
			ProxyQSvgRenderer().Render(p,elementId);
		}
		public static new string Tr(string s, string c) {
			return StaticQSvgRenderer().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQSvgRenderer().Tr(s);
		}
		~QSvgRenderer() {
			DisposeQSvgRenderer();
		}
		public new void Dispose() {
			DisposeQSvgRenderer();
		}
		[SmokeMethod("~QSvgRenderer", "()", "")]
		private void DisposeQSvgRenderer() {
			ProxyQSvgRenderer().DisposeQSvgRenderer();
		}
		protected new IQSvgRendererSignals Emit {
			get {
				return (IQSvgRendererSignals) Q_EMIT;
			}
		}
	}

	public interface IQSvgRendererSignals : IQObjectSignals {
		[Q_SIGNAL("void repaintNeeded()")]
		void RepaintNeeded();
	}
}
