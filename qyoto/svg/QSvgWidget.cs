//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;

	[SmokeClass("QSvgWidget")]
	public class QSvgWidget : QWidget, IDisposable {
 		protected QSvgWidget(Type dummy) : base((Type) null) {}
		[SmokeClass("QSvgWidget")]
		interface IQSvgWidgetProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSvgWidget), this);
			_interceptor = (QSvgWidget) realProxy.GetTransparentProxy();
		}
		private QSvgWidget ProxyQSvgWidget() {
			return (QSvgWidget) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QSvgWidget() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSvgWidgetProxy), null);
			_staticInterceptor = (IQSvgWidgetProxy) realProxy.GetTransparentProxy();
		}
		private static IQSvgWidgetProxy StaticQSvgWidget() {
			return (IQSvgWidgetProxy) _staticInterceptor;
		}

		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QSvgWidget(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQSvgWidget(parent);
		}
		[SmokeMethod("QSvgWidget", "(QWidget*)", "#")]
		private void NewQSvgWidget(QWidget parent) {
			ProxyQSvgWidget().NewQSvgWidget(parent);
		}
		public QSvgWidget() : this((Type) null) {
			CreateProxy();
			NewQSvgWidget();
		}
		[SmokeMethod("QSvgWidget", "()", "")]
		private void NewQSvgWidget() {
			ProxyQSvgWidget().NewQSvgWidget();
		}
		public QSvgWidget(string file, QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQSvgWidget(file,parent);
		}
		[SmokeMethod("QSvgWidget", "(const QString&, QWidget*)", "$#")]
		private void NewQSvgWidget(string file, QWidget parent) {
			ProxyQSvgWidget().NewQSvgWidget(file,parent);
		}
		public QSvgWidget(string file) : this((Type) null) {
			CreateProxy();
			NewQSvgWidget(file);
		}
		[SmokeMethod("QSvgWidget", "(const QString&)", "$")]
		private void NewQSvgWidget(string file) {
			ProxyQSvgWidget().NewQSvgWidget(file);
		}
		[SmokeMethod("renderer", "() const", "")]
		public QSvgRenderer Renderer() {
			return ProxyQSvgWidget().Renderer();
		}
		[SmokeMethod("sizeHint", "() const", "")]
		public new QSize SizeHint() {
			return ProxyQSvgWidget().SizeHint();
		}
		[Q_SLOT("void load(const QString&)")]
		[SmokeMethod("load", "(const QString&)", "$")]
		public void Load(string file) {
			ProxyQSvgWidget().Load(file);
		}
		[Q_SLOT("void load(const QByteArray&)")]
		[SmokeMethod("load", "(const QByteArray&)", "#")]
		public void Load(QByteArray contents) {
			ProxyQSvgWidget().Load(contents);
		}
		public static new string Tr(string s, string c) {
			return StaticQSvgWidget().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQSvgWidget().Tr(s);
		}
		[SmokeMethod("paintEvent", "(QPaintEvent*)", "#")]
		protected new void PaintEvent(QPaintEvent arg1) {
			ProxyQSvgWidget().PaintEvent(arg1);
		}
		~QSvgWidget() {
			DisposeQSvgWidget();
		}
		public new void Dispose() {
			DisposeQSvgWidget();
		}
		[SmokeMethod("~QSvgWidget", "()", "")]
		private void DisposeQSvgWidget() {
			ProxyQSvgWidget().DisposeQSvgWidget();
		}
		protected new IQSvgWidgetSignals Emit {
			get {
				return (IQSvgWidgetSignals) Q_EMIT;
			}
		}
	}

	public interface IQSvgWidgetSignals : IQWidgetSignals {
	}
}
