//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QSvgGenerator")]
	public class QSvgGenerator : QPaintDevice, IDisposable {
 		protected QSvgGenerator(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(QSvgGenerator), this);
		}
		public QSvgGenerator() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QSvgGenerator", "QSvgGenerator()", typeof(void));
		}
		public QSize Size() {
			return (QSize) interceptor.Invoke("size", "size() const", typeof(QSize));
		}
		public void SetSize(QSize size) {
			interceptor.Invoke("setSize#", "setSize(const QSize&)", typeof(void), typeof(QSize), size);
		}
		public string FileName() {
			return (string) interceptor.Invoke("fileName", "fileName() const", typeof(string));
		}
		public void SetFileName(string fileName) {
			interceptor.Invoke("setFileName$", "setFileName(const QString&)", typeof(void), typeof(string), fileName);
		}
		public QIODevice OutputDevice() {
			return (QIODevice) interceptor.Invoke("outputDevice", "outputDevice() const", typeof(QIODevice));
		}
		public void SetOutputDevice(QIODevice outputDevice) {
			interceptor.Invoke("setOutputDevice#", "setOutputDevice(QIODevice*)", typeof(void), typeof(QIODevice), outputDevice);
		}
		public void SetResolution(int dpi) {
			interceptor.Invoke("setResolution$", "setResolution(int)", typeof(void), typeof(int), dpi);
		}
		public int Resolution() {
			return (int) interceptor.Invoke("resolution", "resolution() const", typeof(int));
		}
		[SmokeMethod("paintEngine() const")]
		public override QPaintEngine PaintEngine() {
			return (QPaintEngine) interceptor.Invoke("paintEngine", "paintEngine() const", typeof(QPaintEngine));
		}
		[SmokeMethod("metric(QPaintDevice::PaintDeviceMetric) const")]
		protected override int Metric(IQPaintDevice metric) {
			return (int) interceptor.Invoke("metric$", "metric(QPaintDevice::PaintDeviceMetric) const", typeof(int), typeof(IQPaintDevice), metric);
		}
		~QSvgGenerator() {
			interceptor.Invoke("~QSvgGenerator", "~QSvgGenerator()", typeof(void));
		}
		public void Dispose() {
			interceptor.Invoke("~QSvgGenerator", "~QSvgGenerator()", typeof(void));
		}
	}
}
