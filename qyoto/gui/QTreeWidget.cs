//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	/// See <see cref="IQTreeWidgetSignals"></see> for signals emitted by QTreeWidget
	[SmokeClass("QTreeWidget")]
	public class QTreeWidget : QTreeView, IDisposable {
 		protected QTreeWidget(Type dummy) : base((Type) null) {}
		[SmokeClass("QTreeWidget")]
		interface IQTreeWidgetProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTreeWidget), this);
			interceptor = (QTreeWidget) realProxy.GetTransparentProxy();
		}
		private static IQTreeWidgetProxy staticInterceptor = null;
		static QTreeWidget() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQTreeWidgetProxy), null);
			staticInterceptor = (IQTreeWidgetProxy) realProxy.GetTransparentProxy();
		}
		[Q_PROPERTY("int", "columnCount")]
		public int ColumnCount {
			get { return Property("columnCount").Value<int>(); }
			set { SetProperty("columnCount", QVariant.FromValue<int>(value)); }
		}
		[Q_PROPERTY("int", "topLevelItemCount")]
		public int TopLevelItemCount {
			get { return Property("topLevelItemCount").Value<int>(); }
		}
		public QTreeWidget(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQTreeWidget(parent);
		}
		[SmokeMethod("QTreeWidget", "(QWidget*)", "#")]
		private void NewQTreeWidget(QWidget parent) {
			((QTreeWidget) interceptor).NewQTreeWidget(parent);
		}
		public QTreeWidget() : this((Type) null) {
			CreateProxy();
			NewQTreeWidget();
		}
		[SmokeMethod("QTreeWidget", "()", "")]
		private void NewQTreeWidget() {
			((QTreeWidget) interceptor).NewQTreeWidget();
		}
		[SmokeMethod("invisibleRootItem", "() const", "")]
		public QTreeWidgetItem InvisibleRootItem() {
			return ((QTreeWidget) interceptor).InvisibleRootItem();
		}
		[SmokeMethod("topLevelItem", "(int) const", "$")]
		public QTreeWidgetItem TopLevelItem(int index) {
			return ((QTreeWidget) interceptor).TopLevelItem(index);
		}
		[SmokeMethod("insertTopLevelItem", "(int, QTreeWidgetItem*)", "$#")]
		public void InsertTopLevelItem(int index, QTreeWidgetItem item) {
			((QTreeWidget) interceptor).InsertTopLevelItem(index,item);
		}
		[SmokeMethod("addTopLevelItem", "(QTreeWidgetItem*)", "#")]
		public void AddTopLevelItem(QTreeWidgetItem item) {
			((QTreeWidget) interceptor).AddTopLevelItem(item);
		}
		[SmokeMethod("takeTopLevelItem", "(int)", "$")]
		public QTreeWidgetItem TakeTopLevelItem(int index) {
			return ((QTreeWidget) interceptor).TakeTopLevelItem(index);
		}
		[SmokeMethod("indexOfTopLevelItem", "(QTreeWidgetItem*)", "#")]
		public int IndexOfTopLevelItem(QTreeWidgetItem item) {
			return ((QTreeWidget) interceptor).IndexOfTopLevelItem(item);
		}
		[SmokeMethod("insertTopLevelItems", "(int, const QList<QTreeWidgetItem*>&)", "$?")]
		public void InsertTopLevelItems(int index, List<QTreeWidgetItem> items) {
			((QTreeWidget) interceptor).InsertTopLevelItems(index,items);
		}
		[SmokeMethod("addTopLevelItems", "(const QList<QTreeWidgetItem*>&)", "?")]
		public void AddTopLevelItems(List<QTreeWidgetItem> items) {
			((QTreeWidget) interceptor).AddTopLevelItems(items);
		}
		[SmokeMethod("headerItem", "() const", "")]
		public QTreeWidgetItem HeaderItem() {
			return ((QTreeWidget) interceptor).HeaderItem();
		}
		[SmokeMethod("setHeaderItem", "(QTreeWidgetItem*)", "#")]
		public void SetHeaderItem(QTreeWidgetItem item) {
			((QTreeWidget) interceptor).SetHeaderItem(item);
		}
		[SmokeMethod("setHeaderLabels", "(const QStringList&)", "?")]
		public void SetHeaderLabels(List<string> labels) {
			((QTreeWidget) interceptor).SetHeaderLabels(labels);
		}
		[SmokeMethod("setHeaderLabel", "(const QString&)", "$")]
		public void SetHeaderLabel(string label) {
			((QTreeWidget) interceptor).SetHeaderLabel(label);
		}
		[SmokeMethod("currentItem", "() const", "")]
		public QTreeWidgetItem CurrentItem() {
			return ((QTreeWidget) interceptor).CurrentItem();
		}
		[SmokeMethod("currentColumn", "() const", "")]
		public int CurrentColumn() {
			return ((QTreeWidget) interceptor).CurrentColumn();
		}
		[SmokeMethod("setCurrentItem", "(QTreeWidgetItem*)", "#")]
		public void SetCurrentItem(QTreeWidgetItem item) {
			((QTreeWidget) interceptor).SetCurrentItem(item);
		}
		[SmokeMethod("setCurrentItem", "(QTreeWidgetItem*, int)", "#$")]
		public void SetCurrentItem(QTreeWidgetItem item, int column) {
			((QTreeWidget) interceptor).SetCurrentItem(item,column);
		}
		[SmokeMethod("itemAt", "(const QPoint&) const", "#")]
		public QTreeWidgetItem ItemAt(QPoint p) {
			return ((QTreeWidget) interceptor).ItemAt(p);
		}
		[SmokeMethod("itemAt", "(int, int) const", "$$")]
		public QTreeWidgetItem ItemAt(int x, int y) {
			return ((QTreeWidget) interceptor).ItemAt(x,y);
		}
		[SmokeMethod("visualItemRect", "(const QTreeWidgetItem*) const", "#")]
		public QRect VisualItemRect(QTreeWidgetItem item) {
			return ((QTreeWidget) interceptor).VisualItemRect(item);
		}
		[SmokeMethod("sortColumn", "() const", "")]
		public int SortColumn() {
			return ((QTreeWidget) interceptor).SortColumn();
		}
		[SmokeMethod("sortItems", "(int, Qt::SortOrder)", "$$")]
		public void SortItems(int column, Qt.SortOrder order) {
			((QTreeWidget) interceptor).SortItems(column,order);
		}
		[SmokeMethod("setSortingEnabled", "(bool)", "$")]
		public void SetSortingEnabled(bool enable) {
			((QTreeWidget) interceptor).SetSortingEnabled(enable);
		}
		[SmokeMethod("isSortingEnabled", "() const", "")]
		public bool IsSortingEnabled() {
			return ((QTreeWidget) interceptor).IsSortingEnabled();
		}
		[SmokeMethod("editItem", "(QTreeWidgetItem*, int)", "#$")]
		public void EditItem(QTreeWidgetItem item, int column) {
			((QTreeWidget) interceptor).EditItem(item,column);
		}
		[SmokeMethod("editItem", "(QTreeWidgetItem*)", "#")]
		public void EditItem(QTreeWidgetItem item) {
			((QTreeWidget) interceptor).EditItem(item);
		}
		[SmokeMethod("openPersistentEditor", "(QTreeWidgetItem*, int)", "#$")]
		public void OpenPersistentEditor(QTreeWidgetItem item, int column) {
			((QTreeWidget) interceptor).OpenPersistentEditor(item,column);
		}
		[SmokeMethod("openPersistentEditor", "(QTreeWidgetItem*)", "#")]
		public void OpenPersistentEditor(QTreeWidgetItem item) {
			((QTreeWidget) interceptor).OpenPersistentEditor(item);
		}
		[SmokeMethod("closePersistentEditor", "(QTreeWidgetItem*, int)", "#$")]
		public void ClosePersistentEditor(QTreeWidgetItem item, int column) {
			((QTreeWidget) interceptor).ClosePersistentEditor(item,column);
		}
		[SmokeMethod("closePersistentEditor", "(QTreeWidgetItem*)", "#")]
		public void ClosePersistentEditor(QTreeWidgetItem item) {
			((QTreeWidget) interceptor).ClosePersistentEditor(item);
		}
		[SmokeMethod("itemWidget", "(QTreeWidgetItem*, int) const", "#$")]
		public QWidget ItemWidget(QTreeWidgetItem item, int column) {
			return ((QTreeWidget) interceptor).ItemWidget(item,column);
		}
		[SmokeMethod("setItemWidget", "(QTreeWidgetItem*, int, QWidget*)", "#$#")]
		public void SetItemWidget(QTreeWidgetItem item, int column, QWidget widget) {
			((QTreeWidget) interceptor).SetItemWidget(item,column,widget);
		}
		[SmokeMethod("isItemSelected", "(const QTreeWidgetItem*) const", "#")]
		public bool IsItemSelected(QTreeWidgetItem item) {
			return ((QTreeWidget) interceptor).IsItemSelected(item);
		}
		[SmokeMethod("setItemSelected", "(const QTreeWidgetItem*, bool)", "#$")]
		public void SetItemSelected(QTreeWidgetItem item, bool select) {
			((QTreeWidget) interceptor).SetItemSelected(item,select);
		}
		[SmokeMethod("selectedItems", "() const", "")]
		public List<QTreeWidgetItem> SelectedItems() {
			return ((QTreeWidget) interceptor).SelectedItems();
		}
		[SmokeMethod("findItems", "(const QString&, Qt::MatchFlags, int) const", "$$$")]
		public List<QTreeWidgetItem> FindItems(string text, int flags, int column) {
			return ((QTreeWidget) interceptor).FindItems(text,flags,column);
		}
		[SmokeMethod("findItems", "(const QString&, Qt::MatchFlags) const", "$$")]
		public List<QTreeWidgetItem> FindItems(string text, int flags) {
			return ((QTreeWidget) interceptor).FindItems(text,flags);
		}
		[SmokeMethod("isItemHidden", "(const QTreeWidgetItem*) const", "#")]
		public bool IsItemHidden(QTreeWidgetItem item) {
			return ((QTreeWidget) interceptor).IsItemHidden(item);
		}
		[SmokeMethod("setItemHidden", "(const QTreeWidgetItem*, bool)", "#$")]
		public void SetItemHidden(QTreeWidgetItem item, bool hide) {
			((QTreeWidget) interceptor).SetItemHidden(item,hide);
		}
		[SmokeMethod("isItemExpanded", "(const QTreeWidgetItem*) const", "#")]
		public bool IsItemExpanded(QTreeWidgetItem item) {
			return ((QTreeWidget) interceptor).IsItemExpanded(item);
		}
		[SmokeMethod("setItemExpanded", "(const QTreeWidgetItem*, bool)", "#$")]
		public void SetItemExpanded(QTreeWidgetItem item, bool expand) {
			((QTreeWidget) interceptor).SetItemExpanded(item,expand);
		}
		[Q_SLOT("void scrollToItem(const QTreeWidgetItem*, QAbstractItemView::ScrollHint)")]
		[SmokeMethod("scrollToItem", "(const QTreeWidgetItem*, QAbstractItemView::ScrollHint)", "#$")]
		public void ScrollToItem(QTreeWidgetItem item, QAbstractItemView.ScrollHint hint) {
			((QTreeWidget) interceptor).ScrollToItem(item,hint);
		}
		[Q_SLOT("void scrollToItem(const QTreeWidgetItem*)")]
		[SmokeMethod("scrollToItem", "(const QTreeWidgetItem*)", "#")]
		public void ScrollToItem(QTreeWidgetItem item) {
			((QTreeWidget) interceptor).ScrollToItem(item);
		}
		[Q_SLOT("void expandItem(const QTreeWidgetItem*)")]
		[SmokeMethod("expandItem", "(const QTreeWidgetItem*)", "#")]
		public void ExpandItem(QTreeWidgetItem item) {
			((QTreeWidget) interceptor).ExpandItem(item);
		}
		[Q_SLOT("void collapseItem(const QTreeWidgetItem*)")]
		[SmokeMethod("collapseItem", "(const QTreeWidgetItem*)", "#")]
		public void CollapseItem(QTreeWidgetItem item) {
			((QTreeWidget) interceptor).CollapseItem(item);
		}
		[Q_SLOT("void clear()")]
		[SmokeMethod("clear", "()", "")]
		public void Clear() {
			((QTreeWidget) interceptor).Clear();
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		protected override bool Event(QEvent e) {
			return ((QTreeWidget) interceptor).Event(e);
		}
		[SmokeMethod("mimeTypes", "() const", "")]
		protected virtual List<string> MimeTypes() {
			return ((QTreeWidget) interceptor).MimeTypes();
		}
		[SmokeMethod("mimeData", "(const QList<QTreeWidgetItem*>) const", "?")]
		protected virtual QMimeData MimeData(List<QTreeWidgetItem> items) {
			return ((QTreeWidget) interceptor).MimeData(items);
		}
		[SmokeMethod("dropMimeData", "(QTreeWidgetItem*, int, const QMimeData*, Qt::DropAction)", "#$#$")]
		protected virtual bool DropMimeData(QTreeWidgetItem parent, int index, QMimeData data, Qt.DropAction action) {
			return ((QTreeWidget) interceptor).DropMimeData(parent,index,data,action);
		}
		[SmokeMethod("supportedDropActions", "() const", "")]
		protected virtual int SupportedDropActions() {
			return ((QTreeWidget) interceptor).SupportedDropActions();
		}
		[SmokeMethod("items", "(const QMimeData*) const", "#")]
		protected List<QTreeWidgetItem> Items(QMimeData data) {
			return ((QTreeWidget) interceptor).Items(data);
		}
		[SmokeMethod("indexFromItem", "(QTreeWidgetItem*, int) const", "#$")]
		protected QModelIndex IndexFromItem(QTreeWidgetItem item, int column) {
			return ((QTreeWidget) interceptor).IndexFromItem(item,column);
		}
		[SmokeMethod("indexFromItem", "(QTreeWidgetItem*) const", "#")]
		protected QModelIndex IndexFromItem(QTreeWidgetItem item) {
			return ((QTreeWidget) interceptor).IndexFromItem(item);
		}
		[SmokeMethod("itemFromIndex", "(const QModelIndex&) const", "#")]
		protected QTreeWidgetItem ItemFromIndex(QModelIndex index) {
			return ((QTreeWidget) interceptor).ItemFromIndex(index);
		}
		[SmokeMethod("dropEvent", "(QDropEvent*)", "#")]
		protected override void DropEvent(QDropEvent arg1) {
			((QTreeWidget) interceptor).DropEvent(arg1);
		}
		~QTreeWidget() {
			DisposeQTreeWidget();
		}
		public new void Dispose() {
			DisposeQTreeWidget();
		}
		[SmokeMethod("~QTreeWidget", "()", "")]
		private void DisposeQTreeWidget() {
			((QTreeWidget) interceptor).DisposeQTreeWidget();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQTreeWidgetSignals Emit {
			get { return (IQTreeWidgetSignals) Q_EMIT; }
		}
	}

	public interface IQTreeWidgetSignals : IQTreeViewSignals {
		[Q_SIGNAL("void itemPressed(QTreeWidgetItem*, int)")]
		void ItemPressed(QTreeWidgetItem item, int column);
		[Q_SIGNAL("void itemClicked(QTreeWidgetItem*, int)")]
		void ItemClicked(QTreeWidgetItem item, int column);
		[Q_SIGNAL("void itemDoubleClicked(QTreeWidgetItem*, int)")]
		void ItemDoubleClicked(QTreeWidgetItem item, int column);
		[Q_SIGNAL("void itemActivated(QTreeWidgetItem*, int)")]
		void ItemActivated(QTreeWidgetItem item, int column);
		[Q_SIGNAL("void itemEntered(QTreeWidgetItem*, int)")]
		void ItemEntered(QTreeWidgetItem item, int column);
		[Q_SIGNAL("void itemChanged(QTreeWidgetItem*, int)")]
		void ItemChanged(QTreeWidgetItem item, int column);
		[Q_SIGNAL("void itemExpanded(QTreeWidgetItem*)")]
		void ItemExpanded(QTreeWidgetItem item);
		[Q_SIGNAL("void itemCollapsed(QTreeWidgetItem*)")]
		void ItemCollapsed(QTreeWidgetItem item);
		[Q_SIGNAL("void currentItemChanged(QTreeWidgetItem*, QTreeWidgetItem*)")]
		void CurrentItemChanged(QTreeWidgetItem current, QTreeWidgetItem previous);
		[Q_SIGNAL("void itemSelectionChanged()")]
		void ItemSelectionChanged();
	}
}
