//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	public interface IQMimeSource {
			string Format(int n);
			bool Provides(string arg1);
			QByteArray EncodedData(string arg1);
	}

	[SmokeClass("QMimeSource")]
	public abstract class QMimeSource : MarshalByRefObject, IQMimeSource {
		protected Object _interceptor = null;
		private IntPtr _smokeObject;
		protected QMimeSource(Type dummy) {}
		[SmokeClass("QMimeSource")]
		interface IQMimeSourceProxy {
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QMimeSource), this);
			_interceptor = (QMimeSource) realProxy.GetTransparentProxy();
		}
		private QMimeSource ProxyQMimeSource() {
			return (QMimeSource) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QMimeSource() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQMimeSourceProxy), null);
			_staticInterceptor = (IQMimeSourceProxy) realProxy.GetTransparentProxy();
		}
		private static IQMimeSourceProxy StaticQMimeSource() {
			return (IQMimeSourceProxy) _staticInterceptor;
		}
		public abstract string Format(int n);
		[SmokeMethod("provides", "(const char*) const", "$")]
		public virtual bool Provides(string arg1) {
			return ProxyQMimeSource().Provides(arg1);
		}
		public abstract QByteArray EncodedData(string arg1);
		public QMimeSource() : this((Type) null) {
			CreateProxy();
			NewQMimeSource();
		}
		[SmokeMethod("QMimeSource", "()", "")]
		private void NewQMimeSource() {
			ProxyQMimeSource().NewQMimeSource();
		}
		~QMimeSource() {
			DisposeQMimeSource();
		}
		public void Dispose() {
			DisposeQMimeSource();
		}
		[SmokeMethod("~QMimeSource", "()", "")]
		private void DisposeQMimeSource() {
			ProxyQMimeSource().DisposeQMimeSource();
		}
	}
}
