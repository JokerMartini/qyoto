//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	/// See <see cref="IQTextBrowserSignals"></see> for signals emitted by QTextBrowser
	[SmokeClass("QTextBrowser")]
	public class QTextBrowser : QTextEdit, IDisposable {
 		protected QTextBrowser(Type dummy) : base((Type) null) {}
		[SmokeClass("QTextBrowser")]
		interface IQTextBrowserProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTextBrowser), this);
			_interceptor = (QTextBrowser) realProxy.GetTransparentProxy();
		}
		private QTextBrowser ProxyQTextBrowser() {
			return (QTextBrowser) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QTextBrowser() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQTextBrowserProxy), null);
			_staticInterceptor = (IQTextBrowserProxy) realProxy.GetTransparentProxy();
		}
		private static IQTextBrowserProxy StaticQTextBrowser() {
			return (IQTextBrowserProxy) _staticInterceptor;
		}
		[Q_PROPERTY("QUrl", "source")]
		public IQUrl Source {
			get { return Property("source").Value<IQUrl>(); }
			set { SetProperty("source", QVariant.FromValue<IQUrl>(value)); }
		}
		[Q_PROPERTY("QStringList", "searchPaths")]
		public List<string> SearchPaths {
			get { return Property("searchPaths").Value<List<string>>(); }
			set { SetProperty("searchPaths", QVariant.FromValue<List<string>>(value)); }
		}
		[Q_PROPERTY("bool", "openExternalLinks")]
		public bool OpenExternalLinks {
			get { return Property("openExternalLinks").Value<bool>(); }
			set { SetProperty("openExternalLinks", QVariant.FromValue<bool>(value)); }
		}
		public QTextBrowser(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQTextBrowser(parent);
		}
		[SmokeMethod("QTextBrowser", "(QWidget*)", "#")]
		private void NewQTextBrowser(QWidget parent) {
			ProxyQTextBrowser().NewQTextBrowser(parent);
		}
		public QTextBrowser() : this((Type) null) {
			CreateProxy();
			NewQTextBrowser();
		}
		[SmokeMethod("QTextBrowser", "()", "")]
		private void NewQTextBrowser() {
			ProxyQTextBrowser().NewQTextBrowser();
		}
		[SmokeMethod("loadResource", "(int, const QUrl&)", "$#")]
		public override QVariant LoadResource(int type, IQUrl name) {
			return ProxyQTextBrowser().LoadResource(type,name);
		}
		[SmokeMethod("isBackwardAvailable", "() const", "")]
		public bool IsBackwardAvailable() {
			return ProxyQTextBrowser().IsBackwardAvailable();
		}
		[SmokeMethod("isForwardAvailable", "() const", "")]
		public bool IsForwardAvailable() {
			return ProxyQTextBrowser().IsForwardAvailable();
		}
		[SmokeMethod("clearHistory", "()", "")]
		public void ClearHistory() {
			ProxyQTextBrowser().ClearHistory();
		}
		[Q_SLOT("void backward()")]
		[SmokeMethod("backward", "()", "")]
		public virtual void Backward() {
			ProxyQTextBrowser().Backward();
		}
		[Q_SLOT("void forward()")]
		[SmokeMethod("forward", "()", "")]
		public virtual void Forward() {
			ProxyQTextBrowser().Forward();
		}
		[Q_SLOT("void home()")]
		[SmokeMethod("home", "()", "")]
		public virtual void Home() {
			ProxyQTextBrowser().Home();
		}
		[Q_SLOT("void reload()")]
		[SmokeMethod("reload", "()", "")]
		public virtual void Reload() {
			ProxyQTextBrowser().Reload();
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		protected override bool Event(QEvent e) {
			return ProxyQTextBrowser().Event(e);
		}
		[SmokeMethod("keyPressEvent", "(QKeyEvent*)", "#")]
		protected override void KeyPressEvent(QKeyEvent ev) {
			ProxyQTextBrowser().KeyPressEvent(ev);
		}
		[SmokeMethod("mouseMoveEvent", "(QMouseEvent*)", "#")]
		protected override void MouseMoveEvent(QMouseEvent ev) {
			ProxyQTextBrowser().MouseMoveEvent(ev);
		}
		[SmokeMethod("mousePressEvent", "(QMouseEvent*)", "#")]
		protected override void MousePressEvent(QMouseEvent ev) {
			ProxyQTextBrowser().MousePressEvent(ev);
		}
		[SmokeMethod("mouseReleaseEvent", "(QMouseEvent*)", "#")]
		protected override void MouseReleaseEvent(QMouseEvent ev) {
			ProxyQTextBrowser().MouseReleaseEvent(ev);
		}
		[SmokeMethod("focusOutEvent", "(QFocusEvent*)", "#")]
		protected override void FocusOutEvent(QFocusEvent ev) {
			ProxyQTextBrowser().FocusOutEvent(ev);
		}
		[SmokeMethod("focusNextPrevChild", "(bool)", "$")]
		protected override bool FocusNextPrevChild(bool next) {
			return ProxyQTextBrowser().FocusNextPrevChild(next);
		}
		[SmokeMethod("paintEvent", "(QPaintEvent*)", "#")]
		protected override void PaintEvent(QPaintEvent e) {
			ProxyQTextBrowser().PaintEvent(e);
		}
		~QTextBrowser() {
			DisposeQTextBrowser();
		}
		public new void Dispose() {
			DisposeQTextBrowser();
		}
		[SmokeMethod("~QTextBrowser", "()", "")]
		private void DisposeQTextBrowser() {
			ProxyQTextBrowser().DisposeQTextBrowser();
		}
		public static string Tr(string s, string c) {
			return StaticQTextBrowser().Tr(s,c);
		}
		public static string Tr(string s) {
			return StaticQTextBrowser().Tr(s);
		}
		protected new IQTextBrowserSignals Emit {
			get { return (IQTextBrowserSignals) Q_EMIT; }
		}
	}

	public interface IQTextBrowserSignals : IQTextEditSignals {
		[Q_SIGNAL("void backwardAvailable(bool)")]
		void BackwardAvailable(bool arg1);
		[Q_SIGNAL("void forwardAvailable(bool)")]
		void ForwardAvailable(bool arg1);
		[Q_SIGNAL("void sourceChanged(const QUrl&)")]
		void SourceChanged(IQUrl arg1);
		[Q_SIGNAL("void highlighted(const QUrl&)")]
		void Highlighted(IQUrl arg1);
		[Q_SIGNAL("void highlighted(const QString&)")]
		void Highlighted(string arg1);
		[Q_SIGNAL("void anchorClicked(const QUrl&)")]
		void AnchorClicked(IQUrl arg1);
	}
}
