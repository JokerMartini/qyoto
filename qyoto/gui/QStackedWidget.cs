//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	/// See <see cref="IQStackedWidgetSignals"></see> for signals emitted by QStackedWidget
	[SmokeClass("QStackedWidget")]
	public class QStackedWidget : QFrame, IDisposable {
 		protected QStackedWidget(Type dummy) : base((Type) null) {}
		[SmokeClass("QStackedWidget")]
		interface IQStackedWidgetProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QStackedWidget), this);
			interceptor = (QStackedWidget) realProxy.GetTransparentProxy();
		}
		private static IQStackedWidgetProxy staticInterceptor = null;
		static QStackedWidget() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQStackedWidgetProxy), null);
			staticInterceptor = (IQStackedWidgetProxy) realProxy.GetTransparentProxy();
		}
		[Q_PROPERTY("int", "currentIndex")]
		public int CurrentIndex {
			get { return Property("currentIndex").Value<int>(); }
			set { SetProperty("currentIndex", QVariant.FromValue<int>(value)); }
		}
		[Q_PROPERTY("int", "count")]
		public int Count {
			get { return Property("count").Value<int>(); }
		}
		public QStackedWidget(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQStackedWidget(parent);
		}
		[SmokeMethod("QStackedWidget", "(QWidget*)", "#")]
		private void NewQStackedWidget(QWidget parent) {
			((QStackedWidget) interceptor).NewQStackedWidget(parent);
		}
		public QStackedWidget() : this((Type) null) {
			CreateProxy();
			NewQStackedWidget();
		}
		[SmokeMethod("QStackedWidget", "()", "")]
		private void NewQStackedWidget() {
			((QStackedWidget) interceptor).NewQStackedWidget();
		}
		[SmokeMethod("addWidget", "(QWidget*)", "#")]
		public int AddWidget(QWidget w) {
			return ((QStackedWidget) interceptor).AddWidget(w);
		}
		[SmokeMethod("insertWidget", "(int, QWidget*)", "$#")]
		public int InsertWidget(int index, QWidget w) {
			return ((QStackedWidget) interceptor).InsertWidget(index,w);
		}
		[SmokeMethod("removeWidget", "(QWidget*)", "#")]
		public void RemoveWidget(QWidget w) {
			((QStackedWidget) interceptor).RemoveWidget(w);
		}
		[SmokeMethod("currentWidget", "() const", "")]
		public QWidget CurrentWidget() {
			return ((QStackedWidget) interceptor).CurrentWidget();
		}
		[SmokeMethod("indexOf", "(QWidget*) const", "#")]
		public int IndexOf(QWidget arg1) {
			return ((QStackedWidget) interceptor).IndexOf(arg1);
		}
		[SmokeMethod("widget", "(int) const", "$")]
		public QWidget Widget(int arg1) {
			return ((QStackedWidget) interceptor).Widget(arg1);
		}
		[Q_SLOT("void setCurrentWidget(QWidget*)")]
		[SmokeMethod("setCurrentWidget", "(QWidget*)", "#")]
		public void SetCurrentWidget(QWidget w) {
			((QStackedWidget) interceptor).SetCurrentWidget(w);
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		protected override bool Event(QEvent e) {
			return ((QStackedWidget) interceptor).Event(e);
		}
		~QStackedWidget() {
			DisposeQStackedWidget();
		}
		public new void Dispose() {
			DisposeQStackedWidget();
		}
		[SmokeMethod("~QStackedWidget", "()", "")]
		private void DisposeQStackedWidget() {
			((QStackedWidget) interceptor).DisposeQStackedWidget();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQStackedWidgetSignals Emit {
			get { return (IQStackedWidgetSignals) Q_EMIT; }
		}
	}

	public interface IQStackedWidgetSignals : IQFrameSignals {
		[Q_SIGNAL("void currentChanged(int)")]
		void CurrentChanged(int arg1);
		[Q_SIGNAL("void widgetRemoved(int)")]
		void WidgetRemoved(int index);
	}
}
