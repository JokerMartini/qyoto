//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QWidgetItem")]
	public class QWidgetItem : QLayoutItem, IDisposable {
 		protected QWidgetItem(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QWidgetItem), this);
			interceptor = (QWidgetItem) realProxy.GetTransparentProxy();
		}
		public QWidgetItem(QWidget w) : this((Type) null) {
			CreateProxy();
			NewQWidgetItem(w);
		}
		[SmokeMethod("QWidgetItem", "(QWidget*)", "#")]
		private void NewQWidgetItem(QWidget w) {
			((QWidgetItem) interceptor).NewQWidgetItem(w);
		}
		[SmokeMethod("sizeHint", "() const", "")]
		public override QSize SizeHint() {
			return ((QWidgetItem) interceptor).SizeHint();
		}
		[SmokeMethod("minimumSize", "() const", "")]
		public override QSize MinimumSize() {
			return ((QWidgetItem) interceptor).MinimumSize();
		}
		[SmokeMethod("maximumSize", "() const", "")]
		public override QSize MaximumSize() {
			return ((QWidgetItem) interceptor).MaximumSize();
		}
		[SmokeMethod("expandingDirections", "() const", "")]
		public override int ExpandingDirections() {
			return ((QWidgetItem) interceptor).ExpandingDirections();
		}
		[SmokeMethod("isEmpty", "() const", "")]
		public override bool IsEmpty() {
			return ((QWidgetItem) interceptor).IsEmpty();
		}
		[SmokeMethod("setGeometry", "(const QRect&)", "#")]
		public override void SetGeometry(QRect arg1) {
			((QWidgetItem) interceptor).SetGeometry(arg1);
		}
		[SmokeMethod("geometry", "() const", "")]
		public override QRect Geometry() {
			return ((QWidgetItem) interceptor).Geometry();
		}
		[SmokeMethod("widget", "()", "")]
		public override QWidget Widget() {
			return ((QWidgetItem) interceptor).Widget();
		}
		[SmokeMethod("hasHeightForWidth", "() const", "")]
		public override bool HasHeightForWidth() {
			return ((QWidgetItem) interceptor).HasHeightForWidth();
		}
		[SmokeMethod("heightForWidth", "(int) const", "$")]
		public override int HeightForWidth(int arg1) {
			return ((QWidgetItem) interceptor).HeightForWidth(arg1);
		}
		~QWidgetItem() {
			DisposeQWidgetItem();
		}
		public void Dispose() {
			DisposeQWidgetItem();
		}
		[SmokeMethod("~QWidgetItem", "()", "")]
		private void DisposeQWidgetItem() {
			((QWidgetItem) interceptor).DisposeQWidgetItem();
		}
	}
}
