//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;

	/// See <see cref="IQFontComboBoxSignals"></see> for signals emitted by QFontComboBox
	[SmokeClass("QFontComboBox")]
	public class QFontComboBox : QComboBox, IDisposable {
 		protected QFontComboBox(Type dummy) : base((Type) null) {}
		interface IQFontComboBoxProxy {
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QFontComboBox), this);
			_interceptor = (QFontComboBox) realProxy.GetTransparentProxy();
		}
		private QFontComboBox ProxyQFontComboBox() {
			return (QFontComboBox) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QFontComboBox() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQFontComboBoxProxy), null);
			_staticInterceptor = (IQFontComboBoxProxy) realProxy.GetTransparentProxy();
		}
		private static IQFontComboBoxProxy StaticQFontComboBox() {
			return (IQFontComboBoxProxy) _staticInterceptor;
		}

		public enum FontFilter {
			AllFonts = 0,
			ScalableFonts = 0x1,
			NonScalableFonts = 0x2,
			MonospacedFonts = 0x4,
			ProportionalFonts = 0x8,
		}
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QFontComboBox(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQFontComboBox(parent);
		}
		[SmokeMethod("QFontComboBox(QWidget*)")]
		private void NewQFontComboBox(QWidget parent) {
			ProxyQFontComboBox().NewQFontComboBox(parent);
		}
		public QFontComboBox() : this((Type) null) {
			CreateProxy();
			NewQFontComboBox();
		}
		[SmokeMethod("QFontComboBox()")]
		private void NewQFontComboBox() {
			ProxyQFontComboBox().NewQFontComboBox();
		}
		[SmokeMethod("setWritingSystem(QFontDatabase::WritingSystem)")]
		public void SetWritingSystem(QFontDatabase.WritingSystem arg1) {
			ProxyQFontComboBox().SetWritingSystem(arg1);
		}
		[SmokeMethod("writingSystem() const")]
		public QFontDatabase.WritingSystem WritingSystem() {
			return ProxyQFontComboBox().WritingSystem();
		}
		[SmokeMethod("setFontFilters(FontFilters)")]
		public void SetFontFilters(int filters) {
			ProxyQFontComboBox().SetFontFilters(filters);
		}
		[SmokeMethod("fontFilters() const")]
		public int FontFilters() {
			return ProxyQFontComboBox().FontFilters();
		}
		[SmokeMethod("currentFont() const")]
		public QFont CurrentFont() {
			return ProxyQFontComboBox().CurrentFont();
		}
		[SmokeMethod("sizeHint() const")]
		public new QSize SizeHint() {
			return ProxyQFontComboBox().SizeHint();
		}
		[SmokeMethod("setCurrentFont(const QFont&)")]
		public void SetCurrentFont(QFont f) {
			ProxyQFontComboBox().SetCurrentFont(f);
		}
		[SmokeMethod("tr(const char*, const char*)")]
		public static new string Tr(string s, string c) {
			return StaticQFontComboBox().Tr(s,c);
		}
		[SmokeMethod("tr(const char*)")]
		public static new string Tr(string s) {
			return StaticQFontComboBox().Tr(s);
		}
		[SmokeMethod("event(QEvent*)")]
		public new bool Event(QEvent e) {
			return ProxyQFontComboBox().Event(e);
		}
		~QFontComboBox() {
			DisposeQFontComboBox();
		}
		public new void Dispose() {
			DisposeQFontComboBox();
		}
		[SmokeMethod("~QFontComboBox()")]
		private void DisposeQFontComboBox() {
			ProxyQFontComboBox().DisposeQFontComboBox();
		}
		protected new IQFontComboBoxSignals Emit() {
			return (IQFontComboBoxSignals) Q_EMIT;
		}
	}

	public interface IQFontComboBoxSignals : IQComboBoxSignals {
		[Q_SIGNAL("void currentFontChanged(const QFont&)")]
		void CurrentFontChanged(QFont f);
	}
}
