//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	[SmokeClass("QPen")]
	public class QPen : MarshalByRefObject, IDisposable {
		protected QPen interceptor = null;
		private IntPtr smokeObject;
		protected QPen(Type dummy) {}
		[SmokeClass("QPen")]
		interface IQPenProxy {
			[SmokeMethod("operator==", "(const QPen&) const", "#")]
			bool op_equals(QPen lhs, QPen p);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QPen), this);
			interceptor = (QPen) realProxy.GetTransparentProxy();
		}
		private static IQPenProxy staticInterceptor = null;
		static QPen() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQPenProxy), null);
			staticInterceptor = (IQPenProxy) realProxy.GetTransparentProxy();
		}
		//  operator QVariant(); >>>> NOT CONVERTED
		public QPen() : this((Type) null) {
			CreateProxy();
			NewQPen();
		}
		[SmokeMethod("QPen", "()", "")]
		private void NewQPen() {
			((QPen) interceptor).NewQPen();
		}
		public QPen(Qt.PenStyle arg1) : this((Type) null) {
			CreateProxy();
			NewQPen(arg1);
		}
		[SmokeMethod("QPen", "(Qt::PenStyle)", "$")]
		private void NewQPen(Qt.PenStyle arg1) {
			((QPen) interceptor).NewQPen(arg1);
		}
		public QPen(QColor color) : this((Type) null) {
			CreateProxy();
			NewQPen(color);
		}
		[SmokeMethod("QPen", "(const QColor&)", "#")]
		private void NewQPen(QColor color) {
			((QPen) interceptor).NewQPen(color);
		}
		public QPen(QBrush brush, double width, Qt.PenStyle s, Qt.PenCapStyle c, Qt.PenJoinStyle j) : this((Type) null) {
			CreateProxy();
			NewQPen(brush,width,s,c,j);
		}
		[SmokeMethod("QPen", "(const QBrush&, qreal, Qt::PenStyle, Qt::PenCapStyle, Qt::PenJoinStyle)", "#$$$$")]
		private void NewQPen(QBrush brush, double width, Qt.PenStyle s, Qt.PenCapStyle c, Qt.PenJoinStyle j) {
			((QPen) interceptor).NewQPen(brush,width,s,c,j);
		}
		public QPen(QBrush brush, double width, Qt.PenStyle s, Qt.PenCapStyle c) : this((Type) null) {
			CreateProxy();
			NewQPen(brush,width,s,c);
		}
		[SmokeMethod("QPen", "(const QBrush&, qreal, Qt::PenStyle, Qt::PenCapStyle)", "#$$$")]
		private void NewQPen(QBrush brush, double width, Qt.PenStyle s, Qt.PenCapStyle c) {
			((QPen) interceptor).NewQPen(brush,width,s,c);
		}
		public QPen(QBrush brush, double width, Qt.PenStyle s) : this((Type) null) {
			CreateProxy();
			NewQPen(brush,width,s);
		}
		[SmokeMethod("QPen", "(const QBrush&, qreal, Qt::PenStyle)", "#$$")]
		private void NewQPen(QBrush brush, double width, Qt.PenStyle s) {
			((QPen) interceptor).NewQPen(brush,width,s);
		}
		public QPen(QBrush brush, double width) : this((Type) null) {
			CreateProxy();
			NewQPen(brush,width);
		}
		[SmokeMethod("QPen", "(const QBrush&, qreal)", "#$")]
		private void NewQPen(QBrush brush, double width) {
			((QPen) interceptor).NewQPen(brush,width);
		}
		public QPen(QPen pen) : this((Type) null) {
			CreateProxy();
			NewQPen(pen);
		}
		[SmokeMethod("QPen", "(const QPen&)", "#")]
		private void NewQPen(QPen pen) {
			((QPen) interceptor).NewQPen(pen);
		}
		[SmokeMethod("style", "() const", "")]
		public Qt.PenStyle Style() {
			return ((QPen) interceptor).Style();
		}
		[SmokeMethod("setStyle", "(Qt::PenStyle)", "$")]
		public void SetStyle(Qt.PenStyle arg1) {
			((QPen) interceptor).SetStyle(arg1);
		}
		[SmokeMethod("dashPattern", "() const", "")]
		public List<double> DashPattern() {
			return ((QPen) interceptor).DashPattern();
		}
		[SmokeMethod("setDashPattern", "(const QVector<qreal>&)", "?")]
		public void SetDashPattern(List<double> pattern) {
			((QPen) interceptor).SetDashPattern(pattern);
		}
		[SmokeMethod("miterLimit", "() const", "")]
		public double MiterLimit() {
			return ((QPen) interceptor).MiterLimit();
		}
		[SmokeMethod("setMiterLimit", "(qreal)", "$")]
		public void SetMiterLimit(double limit) {
			((QPen) interceptor).SetMiterLimit(limit);
		}
		[SmokeMethod("widthF", "() const", "")]
		public double WidthF() {
			return ((QPen) interceptor).WidthF();
		}
		[SmokeMethod("setWidthF", "(qreal)", "$")]
		public void SetWidthF(double width) {
			((QPen) interceptor).SetWidthF(width);
		}
		[SmokeMethod("width", "() const", "")]
		public int Width() {
			return ((QPen) interceptor).Width();
		}
		[SmokeMethod("setWidth", "(int)", "$")]
		public void SetWidth(int width) {
			((QPen) interceptor).SetWidth(width);
		}
		[SmokeMethod("color", "() const", "")]
		public QColor Color() {
			return ((QPen) interceptor).Color();
		}
		[SmokeMethod("setColor", "(const QColor&)", "#")]
		public void SetColor(QColor color) {
			((QPen) interceptor).SetColor(color);
		}
		[SmokeMethod("brush", "() const", "")]
		public QBrush Brush() {
			return ((QPen) interceptor).Brush();
		}
		[SmokeMethod("setBrush", "(const QBrush&)", "#")]
		public void SetBrush(QBrush brush) {
			((QPen) interceptor).SetBrush(brush);
		}
		[SmokeMethod("isSolid", "() const", "")]
		public bool IsSolid() {
			return ((QPen) interceptor).IsSolid();
		}
		[SmokeMethod("capStyle", "() const", "")]
		public Qt.PenCapStyle CapStyle() {
			return ((QPen) interceptor).CapStyle();
		}
		[SmokeMethod("setCapStyle", "(Qt::PenCapStyle)", "$")]
		public void SetCapStyle(Qt.PenCapStyle pcs) {
			((QPen) interceptor).SetCapStyle(pcs);
		}
		[SmokeMethod("joinStyle", "() const", "")]
		public Qt.PenJoinStyle JoinStyle() {
			return ((QPen) interceptor).JoinStyle();
		}
		[SmokeMethod("setJoinStyle", "(Qt::PenJoinStyle)", "$")]
		public void SetJoinStyle(Qt.PenJoinStyle pcs) {
			((QPen) interceptor).SetJoinStyle(pcs);
		}
		public override bool Equals(object o) {
			if (!(o is QPen)) { return false; }
			return this == (QPen) o;
		}
		public override int GetHashCode() {
			return ((QPen) interceptor).GetHashCode();
		}
		[SmokeMethod("isDetached", "()", "")]
		public bool IsDetached() {
			return ((QPen) interceptor).IsDetached();
		}
		~QPen() {
			DisposeQPen();
		}
		public void Dispose() {
			DisposeQPen();
		}
		[SmokeMethod("~QPen", "()", "")]
		private void DisposeQPen() {
			((QPen) interceptor).DisposeQPen();
		}
		public static bool operator==(QPen lhs, QPen p) {
			return staticInterceptor.op_equals(lhs,p);
		}
		public static bool operator!=(QPen lhs, QPen p) {
			return !staticInterceptor.op_equals(lhs,p);
		}
	}
}
