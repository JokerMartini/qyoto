//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	[SmokeClass("QStyleFactory")]
	public class QStyleFactory : MarshalByRefObject, IDisposable {
		protected QStyleFactory interceptor = null;
		private IntPtr smokeObject;
		protected QStyleFactory(Type dummy) {}
		[SmokeClass("QStyleFactory")]
		interface IQStyleFactoryProxy {
			[SmokeMethod("keys", "()", "")]
			List<string> Keys();
			[SmokeMethod("create", "(const QString&)", "$")]
			QStyle Create(string arg1);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QStyleFactory), this);
			interceptor = (QStyleFactory) realProxy.GetTransparentProxy();
		}
		private static IQStyleFactoryProxy staticInterceptor = null;
		static QStyleFactory() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQStyleFactoryProxy), null);
			staticInterceptor = (IQStyleFactoryProxy) realProxy.GetTransparentProxy();
		}
		public QStyleFactory() : this((Type) null) {
			CreateProxy();
			NewQStyleFactory();
		}
		[SmokeMethod("QStyleFactory", "()", "")]
		private void NewQStyleFactory() {
			((QStyleFactory) interceptor).NewQStyleFactory();
		}
		~QStyleFactory() {
			DisposeQStyleFactory();
		}
		public void Dispose() {
			DisposeQStyleFactory();
		}
		[SmokeMethod("~QStyleFactory", "()", "")]
		private void DisposeQStyleFactory() {
			((QStyleFactory) interceptor).DisposeQStyleFactory();
		}
		public static List<string> Keys() {
			return staticInterceptor.Keys();
		}
		public static QStyle Create(string arg1) {
			return staticInterceptor.Create(arg1);
		}
	}
}
