//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QUndoView")]
	public class QUndoView : QListView, IDisposable {
 		protected QUndoView(Type dummy) : base((Type) null) {}
		[SmokeClass("QUndoView")]
		interface IQUndoViewProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QUndoView), this);
			interceptor = (QUndoView) realProxy.GetTransparentProxy();
		}
		private static IQUndoViewProxy staticInterceptor = null;
		static QUndoView() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQUndoViewProxy), null);
			staticInterceptor = (IQUndoViewProxy) realProxy.GetTransparentProxy();
		}
		[Q_PROPERTY("QString", "emptyLabel")]
		public string EmptyLabel {
			[SmokeMethod("emptyLabel", "()", "")]
			get { return ((QUndoView) interceptor).EmptyLabel; }
			[SmokeMethod("setEmptyLabel", "(QString)", "$")]
			set { ((QUndoView) interceptor).EmptyLabel = value; }
		}
		[Q_PROPERTY("QIcon", "cleanIcon")]
		public QIcon CleanIcon {
			[SmokeMethod("cleanIcon", "()", "")]
			get { return ((QUndoView) interceptor).CleanIcon; }
			[SmokeMethod("setCleanIcon", "(QIcon)", "#")]
			set { ((QUndoView) interceptor).CleanIcon = value; }
		}
		public QUndoView(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQUndoView(parent);
		}
		[SmokeMethod("QUndoView", "(QWidget*)", "#")]
		private void NewQUndoView(QWidget parent) {
			((QUndoView) interceptor).NewQUndoView(parent);
		}
		public QUndoView() : this((Type) null) {
			CreateProxy();
			NewQUndoView();
		}
		[SmokeMethod("QUndoView", "()", "")]
		private void NewQUndoView() {
			((QUndoView) interceptor).NewQUndoView();
		}
		public QUndoView(QUndoStack stack, QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQUndoView(stack,parent);
		}
		[SmokeMethod("QUndoView", "(QUndoStack*, QWidget*)", "##")]
		private void NewQUndoView(QUndoStack stack, QWidget parent) {
			((QUndoView) interceptor).NewQUndoView(stack,parent);
		}
		public QUndoView(QUndoStack stack) : this((Type) null) {
			CreateProxy();
			NewQUndoView(stack);
		}
		[SmokeMethod("QUndoView", "(QUndoStack*)", "#")]
		private void NewQUndoView(QUndoStack stack) {
			((QUndoView) interceptor).NewQUndoView(stack);
		}
		public QUndoView(QUndoGroup group, QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQUndoView(group,parent);
		}
		[SmokeMethod("QUndoView", "(QUndoGroup*, QWidget*)", "##")]
		private void NewQUndoView(QUndoGroup group, QWidget parent) {
			((QUndoView) interceptor).NewQUndoView(group,parent);
		}
		public QUndoView(QUndoGroup group) : this((Type) null) {
			CreateProxy();
			NewQUndoView(group);
		}
		[SmokeMethod("QUndoView", "(QUndoGroup*)", "#")]
		private void NewQUndoView(QUndoGroup group) {
			((QUndoView) interceptor).NewQUndoView(group);
		}
		[SmokeMethod("stack", "() const", "")]
		public QUndoStack Stack() {
			return ((QUndoView) interceptor).Stack();
		}
		[SmokeMethod("group", "() const", "")]
		public QUndoGroup Group() {
			return ((QUndoView) interceptor).Group();
		}
		[Q_SLOT("void setStack(QUndoStack*)")]
		[SmokeMethod("setStack", "(QUndoStack*)", "#")]
		public void SetStack(QUndoStack stack) {
			((QUndoView) interceptor).SetStack(stack);
		}
		[Q_SLOT("void setGroup(QUndoGroup*)")]
		[SmokeMethod("setGroup", "(QUndoGroup*)", "#")]
		public void SetGroup(QUndoGroup group) {
			((QUndoView) interceptor).SetGroup(group);
		}
		~QUndoView() {
			DisposeQUndoView();
		}
		public new void Dispose() {
			DisposeQUndoView();
		}
		[SmokeMethod("~QUndoView", "()", "")]
		private void DisposeQUndoView() {
			((QUndoView) interceptor).DisposeQUndoView();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQUndoViewSignals Emit {
			get { return (IQUndoViewSignals) Q_EMIT; }
		}
	}

	public interface IQUndoViewSignals : IQListViewSignals {
	}
}
