//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QConicalGradient")]
	public class QConicalGradient : QGradient, IDisposable {
 		protected QConicalGradient(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QConicalGradient), this);
			interceptor = (QConicalGradient) realProxy.GetTransparentProxy();
		}
		public QConicalGradient() : this((Type) null) {
			CreateProxy();
			NewQConicalGradient();
		}
		[SmokeMethod("QConicalGradient", "()", "")]
		private void NewQConicalGradient() {
			((QConicalGradient) interceptor).NewQConicalGradient();
		}
		public QConicalGradient(QPointF center, double startAngle) : this((Type) null) {
			CreateProxy();
			NewQConicalGradient(center,startAngle);
		}
		[SmokeMethod("QConicalGradient", "(const QPointF&, qreal)", "#$")]
		private void NewQConicalGradient(QPointF center, double startAngle) {
			((QConicalGradient) interceptor).NewQConicalGradient(center,startAngle);
		}
		public QConicalGradient(double cx, double cy, double startAngle) : this((Type) null) {
			CreateProxy();
			NewQConicalGradient(cx,cy,startAngle);
		}
		[SmokeMethod("QConicalGradient", "(qreal, qreal, qreal)", "$$$")]
		private void NewQConicalGradient(double cx, double cy, double startAngle) {
			((QConicalGradient) interceptor).NewQConicalGradient(cx,cy,startAngle);
		}
		[SmokeMethod("center", "() const", "")]
		public QPointF Center() {
			return ((QConicalGradient) interceptor).Center();
		}
		[SmokeMethod("setCenter", "(const QPointF&)", "#")]
		public void SetCenter(QPointF center) {
			((QConicalGradient) interceptor).SetCenter(center);
		}
		[SmokeMethod("setCenter", "(qreal, qreal)", "$$")]
		public void SetCenter(double x, double y) {
			((QConicalGradient) interceptor).SetCenter(x,y);
		}
		[SmokeMethod("angle", "() const", "")]
		public double Angle() {
			return ((QConicalGradient) interceptor).Angle();
		}
		[SmokeMethod("setAngle", "(qreal)", "$")]
		public void SetAngle(double angle) {
			((QConicalGradient) interceptor).SetAngle(angle);
		}
		~QConicalGradient() {
			DisposeQConicalGradient();
		}
		public void Dispose() {
			DisposeQConicalGradient();
		}
		[SmokeMethod("~QConicalGradient", "()", "")]
		private void DisposeQConicalGradient() {
			((QConicalGradient) interceptor).DisposeQConicalGradient();
		}
	}
}
