//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
	using System;
	using System.Runtime.InteropServices;
	[SmokeClass("QColorDialog")]
	public class QColorDialog : QDialog {
 		protected QColorDialog(Type dummy) : base((Type) null) {}
		private static SmokeInvocation staticInterceptor = null;
		static QColorDialog() {
			staticInterceptor = new SmokeInvocation(typeof(QColorDialog), null);
		}
		public static new string Tr(string s, string c) {
			return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
		}
		public static new string Tr(string s) {
			return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
		}
		public static QColor GetColor(QColor init, QWidget parent) {
			return (QColor) staticInterceptor.Invoke("getColor##", "getColor(const QColor&, QWidget*)", typeof(QColor), typeof(QColor), init, typeof(QWidget), parent);
		}
		public static QColor GetColor(QColor init) {
			return (QColor) staticInterceptor.Invoke("getColor#", "getColor(const QColor&)", typeof(QColor), typeof(QColor), init);
		}
		public static QColor GetColor() {
			return (QColor) staticInterceptor.Invoke("getColor", "getColor()", typeof(QColor));
		}
		public static uint GetRgba(uint arg1, ref bool ok, QWidget parent) {
			StackItem[] stack = new StackItem[4];
			stack[1].s_uint = arg1;
			stack[2].s_bool = ok;
#if DEBUG
			stack[3].s_class = (IntPtr) DebugGCHandle.Alloc(parent);
#else
			stack[3].s_class = (IntPtr) GCHandle.Alloc(parent);
#endif
			staticInterceptor.Invoke("getRgba$$#", "getRgba(unsigned int, bool*, QWidget*)", stack);
			ok = stack[2].s_bool;
#if DEBUG
			DebugGCHandle.Free((GCHandle) stack[3].s_class);
#else
			((GCHandle) stack[3].s_class).Free();
#endif
			return stack[0].s_uint;
		}
		public static uint GetRgba(uint arg1, ref bool ok) {
			StackItem[] stack = new StackItem[3];
			stack[1].s_uint = arg1;
			stack[2].s_bool = ok;
			staticInterceptor.Invoke("getRgba$$", "getRgba(unsigned int, bool*)", stack);
			ok = stack[2].s_bool;
			return stack[0].s_uint;
		}
		public static uint GetRgba(uint arg1) {
			return (uint) staticInterceptor.Invoke("getRgba$", "getRgba(unsigned int)", typeof(uint), typeof(uint), arg1);
		}
		public static uint GetRgba() {
			return (uint) staticInterceptor.Invoke("getRgba", "getRgba()", typeof(uint));
		}
		public static int CustomCount() {
			return (int) staticInterceptor.Invoke("customCount", "customCount()", typeof(int));
		}
		public static uint CustomColor(int arg1) {
			return (uint) staticInterceptor.Invoke("customColor$", "customColor(int)", typeof(uint), typeof(int), arg1);
		}
		public static void SetCustomColor(int arg1, uint arg2) {
			staticInterceptor.Invoke("setCustomColor$$", "setCustomColor(int, unsigned int)", typeof(void), typeof(int), arg1, typeof(uint), arg2);
		}
		public static void SetStandardColor(int arg1, uint arg2) {
			staticInterceptor.Invoke("setStandardColor$$", "setStandardColor(int, unsigned int)", typeof(void), typeof(int), arg1, typeof(uint), arg2);
		}
		protected new IQColorDialogSignals Emit {
			get { return (IQColorDialogSignals) Q_EMIT; }
		}
	}

	public interface IQColorDialogSignals : IQDialogSignals {
	}
}
