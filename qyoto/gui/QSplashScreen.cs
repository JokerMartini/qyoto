//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	/// See <see cref="IQSplashScreenSignals"></see> for signals emitted by QSplashScreen
	[SmokeClass("QSplashScreen")]
	public class QSplashScreen : QWidget, IDisposable {
 		protected QSplashScreen(Type dummy) : base((Type) null) {}
		[SmokeClass("QSplashScreen")]
		interface IQSplashScreenProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSplashScreen), this);
			interceptor = (QSplashScreen) realProxy.GetTransparentProxy();
		}
		private static IQSplashScreenProxy staticInterceptor = null;
		static QSplashScreen() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSplashScreenProxy), null);
			staticInterceptor = (IQSplashScreenProxy) realProxy.GetTransparentProxy();
		}
		public QSplashScreen(QPixmap pixmap, int f) : this((Type) null) {
			CreateProxy();
			NewQSplashScreen(pixmap,f);
		}
		[SmokeMethod("QSplashScreen", "(const QPixmap&, Qt::WindowFlags)", "#$")]
		private void NewQSplashScreen(QPixmap pixmap, int f) {
			((QSplashScreen) interceptor).NewQSplashScreen(pixmap,f);
		}
		public QSplashScreen(QPixmap pixmap) : this((Type) null) {
			CreateProxy();
			NewQSplashScreen(pixmap);
		}
		[SmokeMethod("QSplashScreen", "(const QPixmap&)", "#")]
		private void NewQSplashScreen(QPixmap pixmap) {
			((QSplashScreen) interceptor).NewQSplashScreen(pixmap);
		}
		public QSplashScreen() : this((Type) null) {
			CreateProxy();
			NewQSplashScreen();
		}
		[SmokeMethod("QSplashScreen", "()", "")]
		private void NewQSplashScreen() {
			((QSplashScreen) interceptor).NewQSplashScreen();
		}
		public QSplashScreen(QWidget parent, QPixmap pixmap, int f) : this((Type) null) {
			CreateProxy();
			NewQSplashScreen(parent,pixmap,f);
		}
		[SmokeMethod("QSplashScreen", "(QWidget*, const QPixmap&, Qt::WindowFlags)", "##$")]
		private void NewQSplashScreen(QWidget parent, QPixmap pixmap, int f) {
			((QSplashScreen) interceptor).NewQSplashScreen(parent,pixmap,f);
		}
		public QSplashScreen(QWidget parent, QPixmap pixmap) : this((Type) null) {
			CreateProxy();
			NewQSplashScreen(parent,pixmap);
		}
		[SmokeMethod("QSplashScreen", "(QWidget*, const QPixmap&)", "##")]
		private void NewQSplashScreen(QWidget parent, QPixmap pixmap) {
			((QSplashScreen) interceptor).NewQSplashScreen(parent,pixmap);
		}
		public QSplashScreen(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQSplashScreen(parent);
		}
		[SmokeMethod("QSplashScreen", "(QWidget*)", "#")]
		private void NewQSplashScreen(QWidget parent) {
			((QSplashScreen) interceptor).NewQSplashScreen(parent);
		}
		[SmokeMethod("setPixmap", "(const QPixmap&)", "#")]
		public void SetPixmap(QPixmap pixmap) {
			((QSplashScreen) interceptor).SetPixmap(pixmap);
		}
		[SmokeMethod("pixmap", "() const", "")]
		public QPixmap Pixmap() {
			return ((QSplashScreen) interceptor).Pixmap();
		}
		[SmokeMethod("finish", "(QWidget*)", "#")]
		public void Finish(QWidget w) {
			((QSplashScreen) interceptor).Finish(w);
		}
		[SmokeMethod("repaint", "()", "")]
		public void Repaint() {
			((QSplashScreen) interceptor).Repaint();
		}
		[Q_SLOT("void showMessage(const QString&, int, const QColor&)")]
		[SmokeMethod("showMessage", "(const QString&, int, const QColor&)", "$$#")]
		public void ShowMessage(string message, int alignment, QColor color) {
			((QSplashScreen) interceptor).ShowMessage(message,alignment,color);
		}
		[Q_SLOT("void showMessage(const QString&, int)")]
		[SmokeMethod("showMessage", "(const QString&, int)", "$$")]
		public void ShowMessage(string message, int alignment) {
			((QSplashScreen) interceptor).ShowMessage(message,alignment);
		}
		[Q_SLOT("void showMessage(const QString&)")]
		[SmokeMethod("showMessage", "(const QString&)", "$")]
		public void ShowMessage(string message) {
			((QSplashScreen) interceptor).ShowMessage(message);
		}
		[Q_SLOT("void clearMessage()")]
		[SmokeMethod("clearMessage", "()", "")]
		public void ClearMessage() {
			((QSplashScreen) interceptor).ClearMessage();
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		protected override bool Event(QEvent e) {
			return ((QSplashScreen) interceptor).Event(e);
		}
		[SmokeMethod("drawContents", "(QPainter*)", "#")]
		protected virtual void DrawContents(QPainter painter) {
			((QSplashScreen) interceptor).DrawContents(painter);
		}
		[SmokeMethod("mousePressEvent", "(QMouseEvent*)", "#")]
		protected override void MousePressEvent(QMouseEvent arg1) {
			((QSplashScreen) interceptor).MousePressEvent(arg1);
		}
		~QSplashScreen() {
			DisposeQSplashScreen();
		}
		public new void Dispose() {
			DisposeQSplashScreen();
		}
		[SmokeMethod("~QSplashScreen", "()", "")]
		private void DisposeQSplashScreen() {
			((QSplashScreen) interceptor).DisposeQSplashScreen();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQSplashScreenSignals Emit {
			get { return (IQSplashScreenSignals) Q_EMIT; }
		}
	}

	public interface IQSplashScreenSignals : IQWidgetSignals {
		[Q_SIGNAL("void messageChanged(const QString&)")]
		void MessageChanged(string message);
	}
}
