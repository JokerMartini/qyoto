//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QItemDelegate")]
	public class QItemDelegate : QAbstractItemDelegate, IDisposable {
 		protected QItemDelegate(Type dummy) : base((Type) null) {}
		[SmokeClass("QItemDelegate")]
		interface IQItemDelegateProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QItemDelegate), this);
			interceptor = (QItemDelegate) realProxy.GetTransparentProxy();
		}
		private static IQItemDelegateProxy staticInterceptor = null;
		static QItemDelegate() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQItemDelegateProxy), null);
			staticInterceptor = (IQItemDelegateProxy) realProxy.GetTransparentProxy();
		}
		[Q_PROPERTY("bool", "clipping")]
		public bool Clipping {
			[SmokeMethod("hasClipping", "()", "")]
			get { return ((QItemDelegate) interceptor).Clipping; }
			[SmokeMethod("setClipping", "(bool)", "$")]
			set { ((QItemDelegate) interceptor).Clipping = value; }
		}
		public QItemDelegate(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQItemDelegate(parent);
		}
		[SmokeMethod("QItemDelegate", "(QObject*)", "#")]
		private void NewQItemDelegate(QObject parent) {
			((QItemDelegate) interceptor).NewQItemDelegate(parent);
		}
		public QItemDelegate() : this((Type) null) {
			CreateProxy();
			NewQItemDelegate();
		}
		[SmokeMethod("QItemDelegate", "()", "")]
		private void NewQItemDelegate() {
			((QItemDelegate) interceptor).NewQItemDelegate();
		}
		[SmokeMethod("hasClipping", "() const", "")]
		public bool HasClipping() {
			return ((QItemDelegate) interceptor).HasClipping();
		}
		[SmokeMethod("paint", "(QPainter*, const QStyleOptionViewItem&, const QModelIndex&) const", "###")]
		public override void Paint(QPainter painter, QStyleOptionViewItem option, QModelIndex index) {
			((QItemDelegate) interceptor).Paint(painter,option,index);
		}
		[SmokeMethod("sizeHint", "(const QStyleOptionViewItem&, const QModelIndex&) const", "##")]
		public override QSize SizeHint(QStyleOptionViewItem option, QModelIndex index) {
			return ((QItemDelegate) interceptor).SizeHint(option,index);
		}
		[SmokeMethod("createEditor", "(QWidget*, const QStyleOptionViewItem&, const QModelIndex&) const", "###")]
		public override QWidget CreateEditor(QWidget parent, QStyleOptionViewItem option, QModelIndex index) {
			return ((QItemDelegate) interceptor).CreateEditor(parent,option,index);
		}
		[SmokeMethod("setEditorData", "(QWidget*, const QModelIndex&) const", "##")]
		public override void SetEditorData(QWidget editor, QModelIndex index) {
			((QItemDelegate) interceptor).SetEditorData(editor,index);
		}
		[SmokeMethod("setModelData", "(QWidget*, QAbstractItemModel*, const QModelIndex&) const", "###")]
		public override void SetModelData(QWidget editor, QAbstractItemModel model, QModelIndex index) {
			((QItemDelegate) interceptor).SetModelData(editor,model,index);
		}
		[SmokeMethod("updateEditorGeometry", "(QWidget*, const QStyleOptionViewItem&, const QModelIndex&) const", "###")]
		public override void UpdateEditorGeometry(QWidget editor, QStyleOptionViewItem option, QModelIndex index) {
			((QItemDelegate) interceptor).UpdateEditorGeometry(editor,option,index);
		}
		[SmokeMethod("itemEditorFactory", "() const", "")]
		public QItemEditorFactory ItemEditorFactory() {
			return ((QItemDelegate) interceptor).ItemEditorFactory();
		}
		[SmokeMethod("setItemEditorFactory", "(QItemEditorFactory*)", "#")]
		public void SetItemEditorFactory(QItemEditorFactory factory) {
			((QItemDelegate) interceptor).SetItemEditorFactory(factory);
		}
		[SmokeMethod("drawDisplay", "(QPainter*, const QStyleOptionViewItem&, const QRect&, const QString&) const", "###$")]
		protected virtual void DrawDisplay(QPainter painter, QStyleOptionViewItem option, QRect rect, string text) {
			((QItemDelegate) interceptor).DrawDisplay(painter,option,rect,text);
		}
		[SmokeMethod("drawDecoration", "(QPainter*, const QStyleOptionViewItem&, const QRect&, const QPixmap&) const", "####")]
		protected virtual void DrawDecoration(QPainter painter, QStyleOptionViewItem option, QRect rect, QPixmap pixmap) {
			((QItemDelegate) interceptor).DrawDecoration(painter,option,rect,pixmap);
		}
		[SmokeMethod("drawFocus", "(QPainter*, const QStyleOptionViewItem&, const QRect&) const", "###")]
		protected virtual void DrawFocus(QPainter painter, QStyleOptionViewItem option, QRect rect) {
			((QItemDelegate) interceptor).DrawFocus(painter,option,rect);
		}
		[SmokeMethod("drawCheck", "(QPainter*, const QStyleOptionViewItem&, const QRect&, Qt::CheckState) const", "###$")]
		protected virtual void DrawCheck(QPainter painter, QStyleOptionViewItem option, QRect rect, Qt.CheckState state) {
			((QItemDelegate) interceptor).DrawCheck(painter,option,rect,state);
		}
		[SmokeMethod("drawBackground", "(QPainter*, const QStyleOptionViewItem&, const QModelIndex&) const", "###")]
		protected void DrawBackground(QPainter painter, QStyleOptionViewItem option, QModelIndex index) {
			((QItemDelegate) interceptor).DrawBackground(painter,option,index);
		}
		[SmokeMethod("doLayout", "(const QStyleOptionViewItem&, QRect*, QRect*, QRect*, bool) const", "####$")]
		protected void DoLayout(QStyleOptionViewItem option, QRect checkRect, QRect iconRect, QRect textRect, bool hint) {
			((QItemDelegate) interceptor).DoLayout(option,checkRect,iconRect,textRect,hint);
		}
		[SmokeMethod("rect", "(const QStyleOptionViewItem&, const QModelIndex&, int) const", "##$")]
		protected QRect Rect(QStyleOptionViewItem option, QModelIndex index, int role) {
			return ((QItemDelegate) interceptor).Rect(option,index,role);
		}
		[SmokeMethod("eventFilter", "(QObject*, QEvent*)", "##")]
		protected new virtual bool EventFilter(QObject arg1, QEvent arg2) {
			return ((QItemDelegate) interceptor).EventFilter(arg1,arg2);
		}
		[SmokeMethod("editorEvent", "(QEvent*, QAbstractItemModel*, const QStyleOptionViewItem&, const QModelIndex&)", "####")]
		protected new virtual bool EditorEvent(QEvent arg1, QAbstractItemModel model, QStyleOptionViewItem option, QModelIndex index) {
			return ((QItemDelegate) interceptor).EditorEvent(arg1,model,option,index);
		}
		[SmokeMethod("setOptions", "(const QModelIndex&, const QStyleOptionViewItem&) const", "##")]
		protected QStyleOptionViewItem SetOptions(QModelIndex index, QStyleOptionViewItem option) {
			return ((QItemDelegate) interceptor).SetOptions(index,option);
		}
		[SmokeMethod("decoration", "(const QStyleOptionViewItem&, const QVariant&) const", "##")]
		protected QPixmap Decoration(QStyleOptionViewItem option, QVariant variant) {
			return ((QItemDelegate) interceptor).Decoration(option,variant);
		}
		[SmokeMethod("selected", "(const QPixmap&, const QPalette&, bool) const", "##$")]
		protected QPixmap Selected(QPixmap pixmap, QPalette palette, bool enabled) {
			return ((QItemDelegate) interceptor).Selected(pixmap,palette,enabled);
		}
		[SmokeMethod("check", "(const QStyleOptionViewItem&, const QRect&, const QVariant&) const", "###")]
		protected QRect Check(QStyleOptionViewItem option, QRect bounding, QVariant variant) {
			return ((QItemDelegate) interceptor).Check(option,bounding,variant);
		}
		[SmokeMethod("textRectangle", "(QPainter*, const QRect&, const QFont&, const QString&) const", "###$")]
		protected QRect TextRectangle(QPainter painter, QRect rect, QFont font, string text) {
			return ((QItemDelegate) interceptor).TextRectangle(painter,rect,font,text);
		}
		~QItemDelegate() {
			DisposeQItemDelegate();
		}
		public new void Dispose() {
			DisposeQItemDelegate();
		}
		[SmokeMethod("~QItemDelegate", "()", "")]
		private void DisposeQItemDelegate() {
			((QItemDelegate) interceptor).DisposeQItemDelegate();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQItemDelegateSignals Emit {
			get { return (IQItemDelegateSignals) Q_EMIT; }
		}
	}

	public interface IQItemDelegateSignals : IQAbstractItemDelegateSignals {
	}
}
