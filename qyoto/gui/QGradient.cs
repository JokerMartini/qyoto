//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QGradient")]
	public class QGradient : MarshalByRefObject, IDisposable {
		protected QGradient interceptor = null;
		private IntPtr smokeObject;
		protected QGradient(Type dummy) {}
		[SmokeClass("QGradient")]
		interface IQGradientProxy {
			[SmokeMethod("operator==", "(const QGradient&) const", "#")]
			bool op_equals(QGradient lhs, QGradient gradient);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QGradient), this);
			interceptor = (QGradient) realProxy.GetTransparentProxy();
		}
		private static IQGradientProxy staticInterceptor = null;
		static QGradient() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQGradientProxy), null);
			staticInterceptor = (IQGradientProxy) realProxy.GetTransparentProxy();
		}
		public enum TypeOf {
			LinearGradient = 0,
			RadialGradient = 1,
			ConicalGradient = 2,
			NoGradient = 3,
		}
		public enum Spread {
			PadSpread = 0,
			ReflectSpread = 1,
			RepeatSpread = 2,
		}
		public enum CoordinateMode {
			LogicalMode = 0,
			StretchToDeviceMode = 1,
		}
		// void setStops(const QGradientStops& arg1); >>>> NOT CONVERTED
		// QGradientStops stops(); >>>> NOT CONVERTED
		public QGradient() : this((Type) null) {
			CreateProxy();
			NewQGradient();
		}
		[SmokeMethod("QGradient", "()", "")]
		private void NewQGradient() {
			((QGradient) interceptor).NewQGradient();
		}
		[SmokeMethod("type", "() const", "")]
		public QGradient.TypeOf type() {
			return ((QGradient) interceptor).type();
		}
		[SmokeMethod("setSpread", "(QGradient::Spread)", "$")]
		public void SetSpread(QGradient.Spread spread) {
			((QGradient) interceptor).SetSpread(spread);
		}
		[SmokeMethod("spread", "() const", "")]
		public QGradient.Spread spread() {
			return ((QGradient) interceptor).spread();
		}
		[SmokeMethod("setColorAt", "(qreal, const QColor&)", "$#")]
		public void SetColorAt(double pos, QColor color) {
			((QGradient) interceptor).SetColorAt(pos,color);
		}
		[SmokeMethod("coordinateMode", "() const", "")]
		public QGradient.CoordinateMode coordinateMode() {
			return ((QGradient) interceptor).coordinateMode();
		}
		[SmokeMethod("setCoordinateMode", "(QGradient::CoordinateMode)", "$")]
		public void SetCoordinateMode(QGradient.CoordinateMode mode) {
			((QGradient) interceptor).SetCoordinateMode(mode);
		}
		public override bool Equals(object o) {
			if (!(o is QGradient)) { return false; }
			return this == (QGradient) o;
		}
		public override int GetHashCode() {
			return ((QGradient) interceptor).GetHashCode();
		}
		~QGradient() {
			DisposeQGradient();
		}
		public void Dispose() {
			DisposeQGradient();
		}
		[SmokeMethod("~QGradient", "()", "")]
		private void DisposeQGradient() {
			((QGradient) interceptor).DisposeQGradient();
		}
		public static bool operator==(QGradient lhs, QGradient gradient) {
			return staticInterceptor.op_equals(lhs,gradient);
		}
		public static bool operator!=(QGradient lhs, QGradient gradient) {
			return !staticInterceptor.op_equals(lhs,gradient);
		}
	}
}
