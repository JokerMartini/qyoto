//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	/// See <see cref="IQAbstractItemDelegateSignals"></see> for signals emitted by QAbstractItemDelegate
	[SmokeClass("QAbstractItemDelegate")]
	public abstract class QAbstractItemDelegate : QObject {
 		protected QAbstractItemDelegate(Type dummy) : base((Type) null) {}
		[SmokeClass("QAbstractItemDelegate")]
		interface IQAbstractItemDelegateProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
			[SmokeMethod("elidedText", "(const QFontMetrics&, int, Qt::TextElideMode, const QString&)", "#$$$")]
			string ElidedText(QFontMetrics fontMetrics, int width, Qt.TextElideMode mode, string text);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QAbstractItemDelegate), this);
			interceptor = (QAbstractItemDelegate) realProxy.GetTransparentProxy();
		}
		private static IQAbstractItemDelegateProxy staticInterceptor = null;
		static QAbstractItemDelegate() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQAbstractItemDelegateProxy), null);
			staticInterceptor = (IQAbstractItemDelegateProxy) realProxy.GetTransparentProxy();
		}
		public enum EndEditHint {
			NoHint = 0,
			EditNextItem = 1,
			EditPreviousItem = 2,
			SubmitModelCache = 3,
			RevertModelCache = 4,
		}
		public QAbstractItemDelegate(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQAbstractItemDelegate(parent);
		}
		[SmokeMethod("QAbstractItemDelegate", "(QObject*)", "#")]
		private void NewQAbstractItemDelegate(QObject parent) {
			((QAbstractItemDelegate) interceptor).NewQAbstractItemDelegate(parent);
		}
		public QAbstractItemDelegate() : this((Type) null) {
			CreateProxy();
			NewQAbstractItemDelegate();
		}
		[SmokeMethod("QAbstractItemDelegate", "()", "")]
		private void NewQAbstractItemDelegate() {
			((QAbstractItemDelegate) interceptor).NewQAbstractItemDelegate();
		}
		[SmokeMethod("paint", "(QPainter*, const QStyleOptionViewItem&, const QModelIndex&) const", "###")]
		public abstract void Paint(QPainter painter, QStyleOptionViewItem option, QModelIndex index);
		[SmokeMethod("sizeHint", "(const QStyleOptionViewItem&, const QModelIndex&) const", "##")]
		public abstract QSize SizeHint(QStyleOptionViewItem option, QModelIndex index);
		[SmokeMethod("createEditor", "(QWidget*, const QStyleOptionViewItem&, const QModelIndex&) const", "###")]
		public virtual QWidget CreateEditor(QWidget parent, QStyleOptionViewItem option, QModelIndex index) {
			return ((QAbstractItemDelegate) interceptor).CreateEditor(parent,option,index);
		}
		[SmokeMethod("setEditorData", "(QWidget*, const QModelIndex&) const", "##")]
		public virtual void SetEditorData(QWidget editor, QModelIndex index) {
			((QAbstractItemDelegate) interceptor).SetEditorData(editor,index);
		}
		[SmokeMethod("setModelData", "(QWidget*, QAbstractItemModel*, const QModelIndex&) const", "###")]
		public virtual void SetModelData(QWidget editor, QAbstractItemModel model, QModelIndex index) {
			((QAbstractItemDelegate) interceptor).SetModelData(editor,model,index);
		}
		[SmokeMethod("updateEditorGeometry", "(QWidget*, const QStyleOptionViewItem&, const QModelIndex&) const", "###")]
		public virtual void UpdateEditorGeometry(QWidget editor, QStyleOptionViewItem option, QModelIndex index) {
			((QAbstractItemDelegate) interceptor).UpdateEditorGeometry(editor,option,index);
		}
		[SmokeMethod("editorEvent", "(QEvent*, QAbstractItemModel*, const QStyleOptionViewItem&, const QModelIndex&)", "####")]
		public virtual bool EditorEvent(QEvent arg1, QAbstractItemModel model, QStyleOptionViewItem option, QModelIndex index) {
			return ((QAbstractItemDelegate) interceptor).EditorEvent(arg1,model,option,index);
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		public static string ElidedText(QFontMetrics fontMetrics, int width, Qt.TextElideMode mode, string text) {
			return staticInterceptor.ElidedText(fontMetrics,width,mode,text);
		}
		protected new IQAbstractItemDelegateSignals Emit {
			get { return (IQAbstractItemDelegateSignals) Q_EMIT; }
		}
	}

	public interface IQAbstractItemDelegateSignals : IQObjectSignals {
		[Q_SIGNAL("void commitData(QWidget*)")]
		void CommitData(QWidget editor);
		[Q_SIGNAL("void closeEditor(QWidget*, QAbstractItemDelegate::EndEditHint)")]
		void CloseEditor(QWidget editor, QAbstractItemDelegate.EndEditHint hint);
		[Q_SIGNAL("void closeEditor(QWidget*)")]
		void CloseEditor(QWidget editor);
	}
}
