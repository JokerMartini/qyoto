//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QCloseEvent")]
	public class QCloseEvent : QEvent, IDisposable {
 		protected QCloseEvent(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QCloseEvent), this);
			_interceptor = (QCloseEvent) realProxy.GetTransparentProxy();
		}
		private QCloseEvent ProxyQCloseEvent() {
			return (QCloseEvent) _interceptor;
		}
		public QCloseEvent() : this((Type) null) {
			CreateProxy();
			NewQCloseEvent();
		}
		[SmokeMethod("QCloseEvent", "()", "")]
		private void NewQCloseEvent() {
			ProxyQCloseEvent().NewQCloseEvent();
		}
		~QCloseEvent() {
			DisposeQCloseEvent();
		}
		public new void Dispose() {
			DisposeQCloseEvent();
		}
		[SmokeMethod("~QCloseEvent", "()", "")]
		private void DisposeQCloseEvent() {
			ProxyQCloseEvent().DisposeQCloseEvent();
		}
	}
}
