//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QGraphicsItemAnimation")]
	public class QGraphicsItemAnimation : QObject, IDisposable {
 		protected QGraphicsItemAnimation(Type dummy) : base((Type) null) {}
		[SmokeClass("QGraphicsItemAnimation")]
		interface IQGraphicsItemAnimationProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QGraphicsItemAnimation), this);
			interceptor = (QGraphicsItemAnimation) realProxy.GetTransparentProxy();
		}
		private static IQGraphicsItemAnimationProxy staticInterceptor = null;
		static QGraphicsItemAnimation() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQGraphicsItemAnimationProxy), null);
			staticInterceptor = (IQGraphicsItemAnimationProxy) realProxy.GetTransparentProxy();
		}
		public QGraphicsItemAnimation(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQGraphicsItemAnimation(parent);
		}
		[SmokeMethod("QGraphicsItemAnimation", "(QObject*)", "#")]
		private void NewQGraphicsItemAnimation(QObject parent) {
			((QGraphicsItemAnimation) interceptor).NewQGraphicsItemAnimation(parent);
		}
		public QGraphicsItemAnimation() : this((Type) null) {
			CreateProxy();
			NewQGraphicsItemAnimation();
		}
		[SmokeMethod("QGraphicsItemAnimation", "()", "")]
		private void NewQGraphicsItemAnimation() {
			((QGraphicsItemAnimation) interceptor).NewQGraphicsItemAnimation();
		}
		[SmokeMethod("item", "() const", "")]
		public QGraphicsItem Item() {
			return ((QGraphicsItemAnimation) interceptor).Item();
		}
		[SmokeMethod("setItem", "(QGraphicsItem*)", "#")]
		public void SetItem(QGraphicsItem item) {
			((QGraphicsItemAnimation) interceptor).SetItem(item);
		}
		[SmokeMethod("timeLine", "() const", "")]
		public QTimeLine TimeLine() {
			return ((QGraphicsItemAnimation) interceptor).TimeLine();
		}
		[SmokeMethod("setTimeLine", "(QTimeLine*)", "#")]
		public void SetTimeLine(QTimeLine timeLine) {
			((QGraphicsItemAnimation) interceptor).SetTimeLine(timeLine);
		}
		[SmokeMethod("posAt", "(qreal) const", "$")]
		public QPointF PosAt(double step) {
			return ((QGraphicsItemAnimation) interceptor).PosAt(step);
		}
		[SmokeMethod("setPosAt", "(qreal, const QPointF&)", "$#")]
		public void SetPosAt(double step, QPointF pos) {
			((QGraphicsItemAnimation) interceptor).SetPosAt(step,pos);
		}
		[SmokeMethod("matrixAt", "(qreal) const", "$")]
		public QMatrix MatrixAt(double step) {
			return ((QGraphicsItemAnimation) interceptor).MatrixAt(step);
		}
		[SmokeMethod("rotationAt", "(qreal) const", "$")]
		public double RotationAt(double step) {
			return ((QGraphicsItemAnimation) interceptor).RotationAt(step);
		}
		[SmokeMethod("setRotationAt", "(qreal, qreal)", "$$")]
		public void SetRotationAt(double step, double angle) {
			((QGraphicsItemAnimation) interceptor).SetRotationAt(step,angle);
		}
		[SmokeMethod("xTranslationAt", "(qreal) const", "$")]
		public double XTranslationAt(double step) {
			return ((QGraphicsItemAnimation) interceptor).XTranslationAt(step);
		}
		[SmokeMethod("yTranslationAt", "(qreal) const", "$")]
		public double YTranslationAt(double step) {
			return ((QGraphicsItemAnimation) interceptor).YTranslationAt(step);
		}
		[SmokeMethod("setTranslationAt", "(qreal, qreal, qreal)", "$$$")]
		public void SetTranslationAt(double step, double dx, double dy) {
			((QGraphicsItemAnimation) interceptor).SetTranslationAt(step,dx,dy);
		}
		[SmokeMethod("verticalScaleAt", "(qreal) const", "$")]
		public double VerticalScaleAt(double step) {
			return ((QGraphicsItemAnimation) interceptor).VerticalScaleAt(step);
		}
		[SmokeMethod("horizontalScaleAt", "(qreal) const", "$")]
		public double HorizontalScaleAt(double step) {
			return ((QGraphicsItemAnimation) interceptor).HorizontalScaleAt(step);
		}
		[SmokeMethod("setScaleAt", "(qreal, qreal, qreal)", "$$$")]
		public void SetScaleAt(double step, double sx, double sy) {
			((QGraphicsItemAnimation) interceptor).SetScaleAt(step,sx,sy);
		}
		[SmokeMethod("verticalShearAt", "(qreal) const", "$")]
		public double VerticalShearAt(double step) {
			return ((QGraphicsItemAnimation) interceptor).VerticalShearAt(step);
		}
		[SmokeMethod("horizontalShearAt", "(qreal) const", "$")]
		public double HorizontalShearAt(double step) {
			return ((QGraphicsItemAnimation) interceptor).HorizontalShearAt(step);
		}
		[SmokeMethod("setShearAt", "(qreal, qreal, qreal)", "$$$")]
		public void SetShearAt(double step, double sh, double sv) {
			((QGraphicsItemAnimation) interceptor).SetShearAt(step,sh,sv);
		}
		[SmokeMethod("clear", "()", "")]
		public void Clear() {
			((QGraphicsItemAnimation) interceptor).Clear();
		}
		[Q_SLOT("void setStep(qreal)")]
		[SmokeMethod("setStep", "(qreal)", "$")]
		public void SetStep(double x) {
			((QGraphicsItemAnimation) interceptor).SetStep(x);
		}
		[Q_SLOT("void reset()")]
		[SmokeMethod("reset", "()", "")]
		public void Reset() {
			((QGraphicsItemAnimation) interceptor).Reset();
		}
		[SmokeMethod("beforeAnimationStep", "(qreal)", "$")]
		protected virtual void BeforeAnimationStep(double step) {
			((QGraphicsItemAnimation) interceptor).BeforeAnimationStep(step);
		}
		[SmokeMethod("afterAnimationStep", "(qreal)", "$")]
		protected virtual void AfterAnimationStep(double step) {
			((QGraphicsItemAnimation) interceptor).AfterAnimationStep(step);
		}
		~QGraphicsItemAnimation() {
			DisposeQGraphicsItemAnimation();
		}
		public new void Dispose() {
			DisposeQGraphicsItemAnimation();
		}
		[SmokeMethod("~QGraphicsItemAnimation", "()", "")]
		private void DisposeQGraphicsItemAnimation() {
			((QGraphicsItemAnimation) interceptor).DisposeQGraphicsItemAnimation();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQGraphicsItemAnimationSignals Emit {
			get { return (IQGraphicsItemAnimationSignals) Q_EMIT; }
		}
	}

	public interface IQGraphicsItemAnimationSignals : IQObjectSignals {
	}
}
