//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;

	[SmokeClass("QIntValidator")]
	public class QIntValidator : QValidator, IDisposable {
 		protected QIntValidator(Type dummy) : base((Type) null) {}
		[SmokeClass("QIntValidator")]
		interface IQIntValidatorProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QIntValidator), this);
			interceptor = (QIntValidator) realProxy.GetTransparentProxy();
		}
		private static IQIntValidatorProxy staticInterceptor = null;
		static QIntValidator() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQIntValidatorProxy), null);
			staticInterceptor = (IQIntValidatorProxy) realProxy.GetTransparentProxy();
		}
		[Q_PROPERTY("int", "bottom")]
		public int Bottom {
			get { return Property("bottom").Value<int>(); }
			set { SetProperty("bottom", QVariant.FromValue<int>(value)); }
		}
		[Q_PROPERTY("int", "top")]
		public int Top {
			get { return Property("top").Value<int>(); }
			set { SetProperty("top", QVariant.FromValue<int>(value)); }
		}
		public QIntValidator(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQIntValidator(parent);
		}
		[SmokeMethod("QIntValidator", "(QObject*)", "#")]
		private void NewQIntValidator(QObject parent) {
			((QIntValidator) interceptor).NewQIntValidator(parent);
		}
		public QIntValidator(int bottom, int top, QObject parent) : this((Type) null) {
			CreateProxy();
			NewQIntValidator(bottom,top,parent);
		}
		[SmokeMethod("QIntValidator", "(int, int, QObject*)", "$$#")]
		private void NewQIntValidator(int bottom, int top, QObject parent) {
			((QIntValidator) interceptor).NewQIntValidator(bottom,top,parent);
		}
		[SmokeMethod("validate", "(QString&, int&) const", "$$")]
		public override int Validate(StringBuilder arg1, out int arg2) {
			return ((QIntValidator) interceptor).Validate(arg1,out arg2);
		}
		[SmokeMethod("setRange", "(int, int)", "$$")]
		public virtual void SetRange(int bottom, int top) {
			((QIntValidator) interceptor).SetRange(bottom,top);
		}
		~QIntValidator() {
			DisposeQIntValidator();
		}
		public new void Dispose() {
			DisposeQIntValidator();
		}
		[SmokeMethod("~QIntValidator", "()", "")]
		private void DisposeQIntValidator() {
			((QIntValidator) interceptor).DisposeQIntValidator();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQIntValidatorSignals Emit {
			get { return (IQIntValidatorSignals) Q_EMIT; }
		}
	}

	public interface IQIntValidatorSignals : IQValidatorSignals {
	}
}
