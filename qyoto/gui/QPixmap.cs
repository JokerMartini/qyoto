//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QPixmap")]
	public class QPixmap : QPaintDevice, IDisposable {
 		protected QPixmap(Type dummy) : base((Type) null) {}
		[SmokeClass("QPixmap")]
		interface IQPixmapProxy {
			[SmokeMethod("operator!", "() const", "")]
			bool op_not(QPixmap lhs);
			[SmokeMethod("defaultDepth", "()", "")]
			int DefaultDepth();
			[SmokeMethod("grabWindow", "(WId, int, int, int, int)", "$$$$$")]
			QPixmap GrabWindow(ulong arg1, int x, int y, int w, int h);
			[SmokeMethod("grabWindow", "(WId, int, int, int)", "$$$$")]
			QPixmap GrabWindow(ulong arg1, int x, int y, int w);
			[SmokeMethod("grabWindow", "(WId, int, int)", "$$$")]
			QPixmap GrabWindow(ulong arg1, int x, int y);
			[SmokeMethod("grabWindow", "(WId, int)", "$$")]
			QPixmap GrabWindow(ulong arg1, int x);
			[SmokeMethod("grabWindow", "(WId)", "$")]
			QPixmap GrabWindow(ulong arg1);
			[SmokeMethod("grabWidget", "(QWidget*, const QRect&)", "##")]
			QPixmap GrabWidget(QWidget widget, QRect rect);
			[SmokeMethod("grabWidget", "(QWidget*, int, int, int, int)", "#$$$$")]
			QPixmap GrabWidget(QWidget widget, int x, int y, int w, int h);
			[SmokeMethod("grabWidget", "(QWidget*, int, int, int)", "#$$$")]
			QPixmap GrabWidget(QWidget widget, int x, int y, int w);
			[SmokeMethod("grabWidget", "(QWidget*, int, int)", "#$$")]
			QPixmap GrabWidget(QWidget widget, int x, int y);
			[SmokeMethod("grabWidget", "(QWidget*, int)", "#$")]
			QPixmap GrabWidget(QWidget widget, int x);
			[SmokeMethod("grabWidget", "(QWidget*)", "#")]
			QPixmap GrabWidget(QWidget widget);
			[SmokeMethod("trueMatrix", "(const QMatrix&, int, int)", "#$$")]
			QMatrix TrueMatrix(QMatrix m, int w, int h);
			[SmokeMethod("fromImage", "(const QImage&, Qt::ImageConversionFlags)", "#$")]
			QPixmap FromImage(QImage image, int flags);
			[SmokeMethod("fromImage", "(const QImage&)", "#")]
			QPixmap FromImage(QImage image);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QPixmap), this);
			interceptor = (QPixmap) realProxy.GetTransparentProxy();
		}
		private static IQPixmapProxy staticInterceptor = null;
		static QPixmap() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQPixmapProxy), null);
			staticInterceptor = (IQPixmapProxy) realProxy.GetTransparentProxy();
		}
		// QPixmap* QPixmap(const char** arg1); >>>> NOT CONVERTED
		//  operator QVariant(); >>>> NOT CONVERTED
		public QPixmap() : this((Type) null) {
			CreateProxy();
			NewQPixmap();
		}
		[SmokeMethod("QPixmap", "()", "")]
		private void NewQPixmap() {
			((QPixmap) interceptor).NewQPixmap();
		}
		public QPixmap(int w, int h) : this((Type) null) {
			CreateProxy();
			NewQPixmap(w,h);
		}
		[SmokeMethod("QPixmap", "(int, int)", "$$")]
		private void NewQPixmap(int w, int h) {
			((QPixmap) interceptor).NewQPixmap(w,h);
		}
		public QPixmap(QSize arg1) : this((Type) null) {
			CreateProxy();
			NewQPixmap(arg1);
		}
		[SmokeMethod("QPixmap", "(const QSize&)", "#")]
		private void NewQPixmap(QSize arg1) {
			((QPixmap) interceptor).NewQPixmap(arg1);
		}
		public QPixmap(string fileName, string format, int flags) : this((Type) null) {
			CreateProxy();
			NewQPixmap(fileName,format,flags);
		}
		[SmokeMethod("QPixmap", "(const QString&, const char*, Qt::ImageConversionFlags)", "$$$")]
		private void NewQPixmap(string fileName, string format, int flags) {
			((QPixmap) interceptor).NewQPixmap(fileName,format,flags);
		}
		public QPixmap(string fileName, string format) : this((Type) null) {
			CreateProxy();
			NewQPixmap(fileName,format);
		}
		[SmokeMethod("QPixmap", "(const QString&, const char*)", "$$")]
		private void NewQPixmap(string fileName, string format) {
			((QPixmap) interceptor).NewQPixmap(fileName,format);
		}
		public QPixmap(string fileName) : this((Type) null) {
			CreateProxy();
			NewQPixmap(fileName);
		}
		[SmokeMethod("QPixmap", "(const QString&)", "$")]
		private void NewQPixmap(string fileName) {
			((QPixmap) interceptor).NewQPixmap(fileName);
		}
		public QPixmap(QPixmap arg1) : this((Type) null) {
			CreateProxy();
			NewQPixmap(arg1);
		}
		[SmokeMethod("QPixmap", "(const QPixmap&)", "#")]
		private void NewQPixmap(QPixmap arg1) {
			((QPixmap) interceptor).NewQPixmap(arg1);
		}
		[SmokeMethod("isNull", "() const", "")]
		public bool IsNull() {
			return ((QPixmap) interceptor).IsNull();
		}
		[SmokeMethod("devType", "() const", "")]
		public override int DevType() {
			return ((QPixmap) interceptor).DevType();
		}
		[SmokeMethod("width", "() const", "")]
		public int Width() {
			return ((QPixmap) interceptor).Width();
		}
		[SmokeMethod("height", "() const", "")]
		public int Height() {
			return ((QPixmap) interceptor).Height();
		}
		[SmokeMethod("size", "() const", "")]
		public QSize Size() {
			return ((QPixmap) interceptor).Size();
		}
		[SmokeMethod("rect", "() const", "")]
		public QRect Rect() {
			return ((QPixmap) interceptor).Rect();
		}
		[SmokeMethod("depth", "() const", "")]
		public int Depth() {
			return ((QPixmap) interceptor).Depth();
		}
		[SmokeMethod("fill", "(const QColor&)", "#")]
		public void Fill(QColor fillColor) {
			((QPixmap) interceptor).Fill(fillColor);
		}
		[SmokeMethod("fill", "()", "")]
		public void Fill() {
			((QPixmap) interceptor).Fill();
		}
		[SmokeMethod("fill", "(const QWidget*, const QPoint&)", "##")]
		public void Fill(QWidget widget, QPoint ofs) {
			((QPixmap) interceptor).Fill(widget,ofs);
		}
		[SmokeMethod("fill", "(const QWidget*, int, int)", "#$$")]
		public void Fill(QWidget widget, int xofs, int yofs) {
			((QPixmap) interceptor).Fill(widget,xofs,yofs);
		}
		[SmokeMethod("mask", "() const", "")]
		public QBitmap Mask() {
			return ((QPixmap) interceptor).Mask();
		}
		[SmokeMethod("setMask", "(const QBitmap&)", "#")]
		public void SetMask(QBitmap arg1) {
			((QPixmap) interceptor).SetMask(arg1);
		}
		[SmokeMethod("alphaChannel", "() const", "")]
		public QPixmap AlphaChannel() {
			return ((QPixmap) interceptor).AlphaChannel();
		}
		[SmokeMethod("setAlphaChannel", "(const QPixmap&)", "#")]
		public void SetAlphaChannel(QPixmap arg1) {
			((QPixmap) interceptor).SetAlphaChannel(arg1);
		}
		[SmokeMethod("hasAlpha", "() const", "")]
		public bool HasAlpha() {
			return ((QPixmap) interceptor).HasAlpha();
		}
		[SmokeMethod("hasAlphaChannel", "() const", "")]
		public bool HasAlphaChannel() {
			return ((QPixmap) interceptor).HasAlphaChannel();
		}
		[SmokeMethod("createHeuristicMask", "(bool) const", "$")]
		public QBitmap CreateHeuristicMask(bool clipTight) {
			return ((QPixmap) interceptor).CreateHeuristicMask(clipTight);
		}
		[SmokeMethod("createHeuristicMask", "() const", "")]
		public QBitmap CreateHeuristicMask() {
			return ((QPixmap) interceptor).CreateHeuristicMask();
		}
		[SmokeMethod("createMaskFromColor", "(const QColor&) const", "#")]
		public QBitmap CreateMaskFromColor(QColor maskColor) {
			return ((QPixmap) interceptor).CreateMaskFromColor(maskColor);
		}
		[SmokeMethod("scaled", "(int, int, Qt::AspectRatioMode, Qt::TransformationMode) const", "$$$$")]
		public QPixmap Scaled(int w, int h, Qt.AspectRatioMode aspectMode, Qt.TransformationMode mode) {
			return ((QPixmap) interceptor).Scaled(w,h,aspectMode,mode);
		}
		[SmokeMethod("scaled", "(int, int, Qt::AspectRatioMode) const", "$$$")]
		public QPixmap Scaled(int w, int h, Qt.AspectRatioMode aspectMode) {
			return ((QPixmap) interceptor).Scaled(w,h,aspectMode);
		}
		[SmokeMethod("scaled", "(int, int) const", "$$")]
		public QPixmap Scaled(int w, int h) {
			return ((QPixmap) interceptor).Scaled(w,h);
		}
		[SmokeMethod("scaled", "(const QSize&, Qt::AspectRatioMode, Qt::TransformationMode) const", "#$$")]
		public QPixmap Scaled(QSize s, Qt.AspectRatioMode aspectMode, Qt.TransformationMode mode) {
			return ((QPixmap) interceptor).Scaled(s,aspectMode,mode);
		}
		[SmokeMethod("scaled", "(const QSize&, Qt::AspectRatioMode) const", "#$")]
		public QPixmap Scaled(QSize s, Qt.AspectRatioMode aspectMode) {
			return ((QPixmap) interceptor).Scaled(s,aspectMode);
		}
		[SmokeMethod("scaled", "(const QSize&) const", "#")]
		public QPixmap Scaled(QSize s) {
			return ((QPixmap) interceptor).Scaled(s);
		}
		[SmokeMethod("scaledToWidth", "(int, Qt::TransformationMode) const", "$$")]
		public QPixmap ScaledToWidth(int w, Qt.TransformationMode mode) {
			return ((QPixmap) interceptor).ScaledToWidth(w,mode);
		}
		[SmokeMethod("scaledToWidth", "(int) const", "$")]
		public QPixmap ScaledToWidth(int w) {
			return ((QPixmap) interceptor).ScaledToWidth(w);
		}
		[SmokeMethod("scaledToHeight", "(int, Qt::TransformationMode) const", "$$")]
		public QPixmap ScaledToHeight(int h, Qt.TransformationMode mode) {
			return ((QPixmap) interceptor).ScaledToHeight(h,mode);
		}
		[SmokeMethod("scaledToHeight", "(int) const", "$")]
		public QPixmap ScaledToHeight(int h) {
			return ((QPixmap) interceptor).ScaledToHeight(h);
		}
		[SmokeMethod("transformed", "(const QMatrix&, Qt::TransformationMode) const", "#$")]
		public QPixmap Transformed(QMatrix arg1, Qt.TransformationMode mode) {
			return ((QPixmap) interceptor).Transformed(arg1,mode);
		}
		[SmokeMethod("transformed", "(const QMatrix&) const", "#")]
		public QPixmap Transformed(QMatrix arg1) {
			return ((QPixmap) interceptor).Transformed(arg1);
		}
		[SmokeMethod("toImage", "() const", "")]
		public QImage ToImage() {
			return ((QPixmap) interceptor).ToImage();
		}
		[SmokeMethod("load", "(const QString&, const char*, Qt::ImageConversionFlags)", "$$$")]
		public bool Load(string fileName, string format, int flags) {
			return ((QPixmap) interceptor).Load(fileName,format,flags);
		}
		[SmokeMethod("load", "(const QString&, const char*)", "$$")]
		public bool Load(string fileName, string format) {
			return ((QPixmap) interceptor).Load(fileName,format);
		}
		[SmokeMethod("load", "(const QString&)", "$")]
		public bool Load(string fileName) {
			return ((QPixmap) interceptor).Load(fileName);
		}
		[SmokeMethod("loadFromData", "(const uchar*, uint, const char*, Qt::ImageConversionFlags)", "$$$$")]
		public bool LoadFromData(char[] buf, uint len, string format, int flags) {
			return ((QPixmap) interceptor).LoadFromData(buf,len,format,flags);
		}
		[SmokeMethod("loadFromData", "(const uchar*, uint, const char*)", "$$$")]
		public bool LoadFromData(char[] buf, uint len, string format) {
			return ((QPixmap) interceptor).LoadFromData(buf,len,format);
		}
		[SmokeMethod("loadFromData", "(const uchar*, uint)", "$$")]
		public bool LoadFromData(char[] buf, uint len) {
			return ((QPixmap) interceptor).LoadFromData(buf,len);
		}
		[SmokeMethod("loadFromData", "(const QByteArray&, const char*, Qt::ImageConversionFlags)", "#$$")]
		public bool LoadFromData(QByteArray data, string format, int flags) {
			return ((QPixmap) interceptor).LoadFromData(data,format,flags);
		}
		[SmokeMethod("loadFromData", "(const QByteArray&, const char*)", "#$")]
		public bool LoadFromData(QByteArray data, string format) {
			return ((QPixmap) interceptor).LoadFromData(data,format);
		}
		[SmokeMethod("loadFromData", "(const QByteArray&)", "#")]
		public bool LoadFromData(QByteArray data) {
			return ((QPixmap) interceptor).LoadFromData(data);
		}
		[SmokeMethod("save", "(const QString&, const char*, int) const", "$$$")]
		public bool Save(string fileName, string format, int quality) {
			return ((QPixmap) interceptor).Save(fileName,format,quality);
		}
		[SmokeMethod("save", "(const QString&, const char*) const", "$$")]
		public bool Save(string fileName, string format) {
			return ((QPixmap) interceptor).Save(fileName,format);
		}
		[SmokeMethod("save", "(const QString&) const", "$")]
		public bool Save(string fileName) {
			return ((QPixmap) interceptor).Save(fileName);
		}
		[SmokeMethod("save", "(QIODevice*, const char*, int) const", "#$$")]
		public bool Save(QIODevice device, string format, int quality) {
			return ((QPixmap) interceptor).Save(device,format,quality);
		}
		[SmokeMethod("save", "(QIODevice*, const char*) const", "#$")]
		public bool Save(QIODevice device, string format) {
			return ((QPixmap) interceptor).Save(device,format);
		}
		[SmokeMethod("save", "(QIODevice*) const", "#")]
		public bool Save(QIODevice device) {
			return ((QPixmap) interceptor).Save(device);
		}
		[SmokeMethod("copy", "(int, int, int, int) const", "$$$$")]
		public QPixmap Copy(int x, int y, int width, int height) {
			return ((QPixmap) interceptor).Copy(x,y,width,height);
		}
		[SmokeMethod("copy", "(const QRect&) const", "#")]
		public QPixmap Copy(QRect rect) {
			return ((QPixmap) interceptor).Copy(rect);
		}
		[SmokeMethod("copy", "() const", "")]
		public QPixmap Copy() {
			return ((QPixmap) interceptor).Copy();
		}
		[SmokeMethod("serialNumber", "() const", "")]
		public int SerialNumber() {
			return ((QPixmap) interceptor).SerialNumber();
		}
		[SmokeMethod("isDetached", "() const", "")]
		public bool IsDetached() {
			return ((QPixmap) interceptor).IsDetached();
		}
		[SmokeMethod("detach", "()", "")]
		public void Detach() {
			((QPixmap) interceptor).Detach();
		}
		[SmokeMethod("isQBitmap", "() const", "")]
		public bool IsQBitmap() {
			return ((QPixmap) interceptor).IsQBitmap();
		}
		[SmokeMethod("paintEngine", "() const", "")]
		public override QPaintEngine PaintEngine() {
			return ((QPixmap) interceptor).PaintEngine();
		}
		[SmokeMethod("metric", "(QPaintDevice::PaintDeviceMetric) const", "$")]
		protected override int Metric(IQPaintDevice arg1) {
			return ((QPixmap) interceptor).Metric(arg1);
		}
		~QPixmap() {
			DisposeQPixmap();
		}
		public void Dispose() {
			DisposeQPixmap();
		}
		[SmokeMethod("~QPixmap", "()", "")]
		private void DisposeQPixmap() {
			((QPixmap) interceptor).DisposeQPixmap();
		}
		public static bool operator!(QPixmap lhs) {
			return staticInterceptor.op_not(lhs);
		}
		public static int DefaultDepth() {
			return staticInterceptor.DefaultDepth();
		}
		public static QPixmap GrabWindow(ulong arg1, int x, int y, int w, int h) {
			return staticInterceptor.GrabWindow(arg1,x,y,w,h);
		}
		public static QPixmap GrabWindow(ulong arg1, int x, int y, int w) {
			return staticInterceptor.GrabWindow(arg1,x,y,w);
		}
		public static QPixmap GrabWindow(ulong arg1, int x, int y) {
			return staticInterceptor.GrabWindow(arg1,x,y);
		}
		public static QPixmap GrabWindow(ulong arg1, int x) {
			return staticInterceptor.GrabWindow(arg1,x);
		}
		public static QPixmap GrabWindow(ulong arg1) {
			return staticInterceptor.GrabWindow(arg1);
		}
		public static QPixmap GrabWidget(QWidget widget, QRect rect) {
			return staticInterceptor.GrabWidget(widget,rect);
		}
		public static QPixmap GrabWidget(QWidget widget, int x, int y, int w, int h) {
			return staticInterceptor.GrabWidget(widget,x,y,w,h);
		}
		public static QPixmap GrabWidget(QWidget widget, int x, int y, int w) {
			return staticInterceptor.GrabWidget(widget,x,y,w);
		}
		public static QPixmap GrabWidget(QWidget widget, int x, int y) {
			return staticInterceptor.GrabWidget(widget,x,y);
		}
		public static QPixmap GrabWidget(QWidget widget, int x) {
			return staticInterceptor.GrabWidget(widget,x);
		}
		public static QPixmap GrabWidget(QWidget widget) {
			return staticInterceptor.GrabWidget(widget);
		}
		public static QMatrix TrueMatrix(QMatrix m, int w, int h) {
			return staticInterceptor.TrueMatrix(m,w,h);
		}
		public static QPixmap FromImage(QImage image, int flags) {
			return staticInterceptor.FromImage(image,flags);
		}
		public static QPixmap FromImage(QImage image) {
			return staticInterceptor.FromImage(image);
		}
	}
}
