//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	[SmokeClass("QPictureIO")]
	public class QPictureIO : MarshalByRefObject, IDisposable {
		protected QPictureIO interceptor = null;
		private IntPtr smokeObject;
		protected QPictureIO(Type dummy) {}
		[SmokeClass("QPictureIO")]
		interface IQPictureIOProxy {
			[SmokeMethod("pictureFormat", "(const QString&)", "$")]
			QByteArray PictureFormat(string fileName);
			[SmokeMethod("pictureFormat", "(QIODevice*)", "#")]
			QByteArray PictureFormat(QIODevice arg1);
			[SmokeMethod("inputFormats", "()", "")]
			List<QByteArray> InputFormats();
			[SmokeMethod("outputFormats", "()", "")]
			List<QByteArray> OutputFormats();
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QPictureIO), this);
			interceptor = (QPictureIO) realProxy.GetTransparentProxy();
		}
		private static IQPictureIOProxy staticInterceptor = null;
		static QPictureIO() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQPictureIOProxy), null);
			staticInterceptor = (IQPictureIOProxy) realProxy.GetTransparentProxy();
		}
		// void defineIOHandler(const char* arg1,const char* arg2,const char* arg3,picture_io_handler arg4,picture_io_handler arg5); >>>> NOT CONVERTED
		public QPictureIO() : this((Type) null) {
			CreateProxy();
			NewQPictureIO();
		}
		[SmokeMethod("QPictureIO", "()", "")]
		private void NewQPictureIO() {
			((QPictureIO) interceptor).NewQPictureIO();
		}
		public QPictureIO(QIODevice ioDevice, string format) : this((Type) null) {
			CreateProxy();
			NewQPictureIO(ioDevice,format);
		}
		[SmokeMethod("QPictureIO", "(QIODevice*, const char*)", "#$")]
		private void NewQPictureIO(QIODevice ioDevice, string format) {
			((QPictureIO) interceptor).NewQPictureIO(ioDevice,format);
		}
		public QPictureIO(string fileName, string format) : this((Type) null) {
			CreateProxy();
			NewQPictureIO(fileName,format);
		}
		[SmokeMethod("QPictureIO", "(const QString&, const char*)", "$$")]
		private void NewQPictureIO(string fileName, string format) {
			((QPictureIO) interceptor).NewQPictureIO(fileName,format);
		}
		[SmokeMethod("picture", "() const", "")]
		public QPicture Picture() {
			return ((QPictureIO) interceptor).Picture();
		}
		[SmokeMethod("status", "() const", "")]
		public int Status() {
			return ((QPictureIO) interceptor).Status();
		}
		[SmokeMethod("format", "() const", "")]
		public string Format() {
			return ((QPictureIO) interceptor).Format();
		}
		[SmokeMethod("ioDevice", "() const", "")]
		public QIODevice IoDevice() {
			return ((QPictureIO) interceptor).IoDevice();
		}
		[SmokeMethod("fileName", "() const", "")]
		public string FileName() {
			return ((QPictureIO) interceptor).FileName();
		}
		[SmokeMethod("quality", "() const", "")]
		public int Quality() {
			return ((QPictureIO) interceptor).Quality();
		}
		[SmokeMethod("description", "() const", "")]
		public string Description() {
			return ((QPictureIO) interceptor).Description();
		}
		[SmokeMethod("parameters", "() const", "")]
		public string Parameters() {
			return ((QPictureIO) interceptor).Parameters();
		}
		[SmokeMethod("gamma", "() const", "")]
		public float Gamma() {
			return ((QPictureIO) interceptor).Gamma();
		}
		[SmokeMethod("setPicture", "(const QPicture&)", "#")]
		public void SetPicture(QPicture arg1) {
			((QPictureIO) interceptor).SetPicture(arg1);
		}
		[SmokeMethod("setStatus", "(int)", "$")]
		public void SetStatus(int arg1) {
			((QPictureIO) interceptor).SetStatus(arg1);
		}
		[SmokeMethod("setFormat", "(const char*)", "$")]
		public void SetFormat(string arg1) {
			((QPictureIO) interceptor).SetFormat(arg1);
		}
		[SmokeMethod("setIODevice", "(QIODevice*)", "#")]
		public void SetIODevice(QIODevice arg1) {
			((QPictureIO) interceptor).SetIODevice(arg1);
		}
		[SmokeMethod("setFileName", "(const QString&)", "$")]
		public void SetFileName(string arg1) {
			((QPictureIO) interceptor).SetFileName(arg1);
		}
		[SmokeMethod("setQuality", "(int)", "$")]
		public void SetQuality(int arg1) {
			((QPictureIO) interceptor).SetQuality(arg1);
		}
		[SmokeMethod("setDescription", "(const QString&)", "$")]
		public void SetDescription(string arg1) {
			((QPictureIO) interceptor).SetDescription(arg1);
		}
		[SmokeMethod("setParameters", "(const char*)", "$")]
		public void SetParameters(string arg1) {
			((QPictureIO) interceptor).SetParameters(arg1);
		}
		[SmokeMethod("setGamma", "(float)", "$")]
		public void SetGamma(float arg1) {
			((QPictureIO) interceptor).SetGamma(arg1);
		}
		[SmokeMethod("read", "()", "")]
		public bool Read() {
			return ((QPictureIO) interceptor).Read();
		}
		[SmokeMethod("write", "()", "")]
		public bool Write() {
			return ((QPictureIO) interceptor).Write();
		}
		~QPictureIO() {
			DisposeQPictureIO();
		}
		public void Dispose() {
			DisposeQPictureIO();
		}
		[SmokeMethod("~QPictureIO", "()", "")]
		private void DisposeQPictureIO() {
			((QPictureIO) interceptor).DisposeQPictureIO();
		}
		public static QByteArray PictureFormat(string fileName) {
			return staticInterceptor.PictureFormat(fileName);
		}
		public static QByteArray PictureFormat(QIODevice arg1) {
			return staticInterceptor.PictureFormat(arg1);
		}
		public static List<QByteArray> InputFormats() {
			return staticInterceptor.InputFormats();
		}
		public static List<QByteArray> OutputFormats() {
			return staticInterceptor.OutputFormats();
		}
	}
}
