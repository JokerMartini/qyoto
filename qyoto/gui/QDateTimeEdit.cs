//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;

	/// See <see cref="IQDateTimeEditSignals"></see> for signals emitted by QDateTimeEdit
	[SmokeClass("QDateTimeEdit")]
	public class QDateTimeEdit : QAbstractSpinBox, IDisposable {
 		protected QDateTimeEdit(Type dummy) : base((Type) null) {}
		[SmokeClass("QDateTimeEdit")]
		interface IQDateTimeEditProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDateTimeEdit), this);
			interceptor = (QDateTimeEdit) realProxy.GetTransparentProxy();
		}
		private static IQDateTimeEditProxy staticInterceptor = null;
		static QDateTimeEdit() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDateTimeEditProxy), null);
			staticInterceptor = (IQDateTimeEditProxy) realProxy.GetTransparentProxy();
		}
		public enum Section {
			NoSection = 0x0000,
			AmPmSection = 0x0001,
			MSecSection = 0x0002,
			SecondSection = 0x0004,
			MinuteSection = 0x0008,
			HourSection = 0x0010,
			DaySection = 0x0100,
			MonthSection = 0x0200,
			YearSection = 0x0400,
			TimeSections_Mask = AmPmSection|MSecSection|SecondSection|MinuteSection|HourSection,
			DateSections_Mask = DaySection|MonthSection|YearSection,
		}
		[Q_PROPERTY("QDateTime", "dateTime")]
		public QDateTime DateTime {
			[SmokeMethod("dateTime", "()", "")]
			get { return ((QDateTimeEdit) interceptor).DateTime; }
			[SmokeMethod("setDateTime", "(QDateTime)", "#")]
			set { ((QDateTimeEdit) interceptor).DateTime = value; }
		}
		[Q_PROPERTY("QDate", "date")]
		public QDate Date {
			[SmokeMethod("date", "()", "")]
			get { return ((QDateTimeEdit) interceptor).Date; }
			[SmokeMethod("setDate", "(QDate)", "#")]
			set { ((QDateTimeEdit) interceptor).Date = value; }
		}
		[Q_PROPERTY("QTime", "time")]
		public QTime Time {
			[SmokeMethod("time", "()", "")]
			get { return ((QDateTimeEdit) interceptor).Time; }
			[SmokeMethod("setTime", "(QTime)", "#")]
			set { ((QDateTimeEdit) interceptor).Time = value; }
		}
		[Q_PROPERTY("QDate", "maximumDate")]
		public QDate MaximumDate {
			[SmokeMethod("maximumDate", "()", "")]
			get { return ((QDateTimeEdit) interceptor).MaximumDate; }
			[SmokeMethod("setMaximumDate", "(QDate)", "#")]
			set { ((QDateTimeEdit) interceptor).MaximumDate = value; }
		}
		[Q_PROPERTY("QDate", "minimumDate")]
		public QDate MinimumDate {
			[SmokeMethod("minimumDate", "()", "")]
			get { return ((QDateTimeEdit) interceptor).MinimumDate; }
			[SmokeMethod("setMinimumDate", "(QDate)", "#")]
			set { ((QDateTimeEdit) interceptor).MinimumDate = value; }
		}
		[Q_PROPERTY("QTime", "maximumTime")]
		public QTime MaximumTime {
			[SmokeMethod("maximumTime", "()", "")]
			get { return ((QDateTimeEdit) interceptor).MaximumTime; }
			[SmokeMethod("setMaximumTime", "(QTime)", "#")]
			set { ((QDateTimeEdit) interceptor).MaximumTime = value; }
		}
		[Q_PROPERTY("QTime", "minimumTime")]
		public QTime MinimumTime {
			[SmokeMethod("minimumTime", "()", "")]
			get { return ((QDateTimeEdit) interceptor).MinimumTime; }
			[SmokeMethod("setMinimumTime", "(QTime)", "#")]
			set { ((QDateTimeEdit) interceptor).MinimumTime = value; }
		}
		[Q_PROPERTY("QDateTimeEdit::Section", "currentSection")]
		public QDateTimeEdit.Section CurrentSection {
			[SmokeMethod("currentSection", "()", "")]
			get { return ((QDateTimeEdit) interceptor).CurrentSection; }
			[SmokeMethod("setCurrentSection", "(QDateTimeEdit::Section)", "$")]
			set { ((QDateTimeEdit) interceptor).CurrentSection = value; }
		}
		[Q_PROPERTY("Sections", "displayedSections")]
		public int DisplayedSections {
			[SmokeMethod("displayedSections", "()", "")]
			get { return ((QDateTimeEdit) interceptor).DisplayedSections; }
		}
		[Q_PROPERTY("QString", "displayFormat")]
		public string DisplayFormat {
			[SmokeMethod("displayFormat", "()", "")]
			get { return ((QDateTimeEdit) interceptor).DisplayFormat; }
			[SmokeMethod("setDisplayFormat", "(QString)", "$")]
			set { ((QDateTimeEdit) interceptor).DisplayFormat = value; }
		}
		[Q_PROPERTY("bool", "calendarPopup")]
		public bool CalendarPopup {
			[SmokeMethod("calendarPopup", "()", "")]
			get { return ((QDateTimeEdit) interceptor).CalendarPopup; }
			[SmokeMethod("setCalendarPopup", "(bool)", "$")]
			set { ((QDateTimeEdit) interceptor).CalendarPopup = value; }
		}
		public QDateTimeEdit(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQDateTimeEdit(parent);
		}
		[SmokeMethod("QDateTimeEdit", "(QWidget*)", "#")]
		private void NewQDateTimeEdit(QWidget parent) {
			((QDateTimeEdit) interceptor).NewQDateTimeEdit(parent);
		}
		public QDateTimeEdit() : this((Type) null) {
			CreateProxy();
			NewQDateTimeEdit();
		}
		[SmokeMethod("QDateTimeEdit", "()", "")]
		private void NewQDateTimeEdit() {
			((QDateTimeEdit) interceptor).NewQDateTimeEdit();
		}
		public QDateTimeEdit(QDateTime dt, QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQDateTimeEdit(dt,parent);
		}
		[SmokeMethod("QDateTimeEdit", "(const QDateTime&, QWidget*)", "##")]
		private void NewQDateTimeEdit(QDateTime dt, QWidget parent) {
			((QDateTimeEdit) interceptor).NewQDateTimeEdit(dt,parent);
		}
		public QDateTimeEdit(QDateTime dt) : this((Type) null) {
			CreateProxy();
			NewQDateTimeEdit(dt);
		}
		[SmokeMethod("QDateTimeEdit", "(const QDateTime&)", "#")]
		private void NewQDateTimeEdit(QDateTime dt) {
			((QDateTimeEdit) interceptor).NewQDateTimeEdit(dt);
		}
		public QDateTimeEdit(QDate d, QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQDateTimeEdit(d,parent);
		}
		[SmokeMethod("QDateTimeEdit", "(const QDate&, QWidget*)", "##")]
		private void NewQDateTimeEdit(QDate d, QWidget parent) {
			((QDateTimeEdit) interceptor).NewQDateTimeEdit(d,parent);
		}
		public QDateTimeEdit(QDate d) : this((Type) null) {
			CreateProxy();
			NewQDateTimeEdit(d);
		}
		[SmokeMethod("QDateTimeEdit", "(const QDate&)", "#")]
		private void NewQDateTimeEdit(QDate d) {
			((QDateTimeEdit) interceptor).NewQDateTimeEdit(d);
		}
		public QDateTimeEdit(QTime t, QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQDateTimeEdit(t,parent);
		}
		[SmokeMethod("QDateTimeEdit", "(const QTime&, QWidget*)", "##")]
		private void NewQDateTimeEdit(QTime t, QWidget parent) {
			((QDateTimeEdit) interceptor).NewQDateTimeEdit(t,parent);
		}
		public QDateTimeEdit(QTime t) : this((Type) null) {
			CreateProxy();
			NewQDateTimeEdit(t);
		}
		[SmokeMethod("QDateTimeEdit", "(const QTime&)", "#")]
		private void NewQDateTimeEdit(QTime t) {
			((QDateTimeEdit) interceptor).NewQDateTimeEdit(t);
		}
		[SmokeMethod("clearMinimumDate", "()", "")]
		public void ClearMinimumDate() {
			((QDateTimeEdit) interceptor).ClearMinimumDate();
		}
		[SmokeMethod("clearMaximumDate", "()", "")]
		public void ClearMaximumDate() {
			((QDateTimeEdit) interceptor).ClearMaximumDate();
		}
		[SmokeMethod("setDateRange", "(const QDate&, const QDate&)", "##")]
		public void SetDateRange(QDate min, QDate max) {
			((QDateTimeEdit) interceptor).SetDateRange(min,max);
		}
		[SmokeMethod("clearMinimumTime", "()", "")]
		public void ClearMinimumTime() {
			((QDateTimeEdit) interceptor).ClearMinimumTime();
		}
		[SmokeMethod("clearMaximumTime", "()", "")]
		public void ClearMaximumTime() {
			((QDateTimeEdit) interceptor).ClearMaximumTime();
		}
		[SmokeMethod("setTimeRange", "(const QTime&, const QTime&)", "##")]
		public void SetTimeRange(QTime min, QTime max) {
			((QDateTimeEdit) interceptor).SetTimeRange(min,max);
		}
		[SmokeMethod("setSelectedSection", "(QDateTimeEdit::Section)", "$")]
		public void SetSelectedSection(QDateTimeEdit.Section section) {
			((QDateTimeEdit) interceptor).SetSelectedSection(section);
		}
		[SmokeMethod("sectionText", "(QDateTimeEdit::Section) const", "$")]
		public string SectionText(QDateTimeEdit.Section section) {
			return ((QDateTimeEdit) interceptor).SectionText(section);
		}
		[SmokeMethod("sizeHint", "() const", "")]
		public override QSize SizeHint() {
			return ((QDateTimeEdit) interceptor).SizeHint();
		}
		[SmokeMethod("clear", "()", "")]
		public override void Clear() {
			((QDateTimeEdit) interceptor).Clear();
		}
		[SmokeMethod("stepBy", "(int)", "$")]
		public override void StepBy(int steps) {
			((QDateTimeEdit) interceptor).StepBy(steps);
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		public override bool Event(QEvent arg1) {
			return ((QDateTimeEdit) interceptor).Event(arg1);
		}
		[SmokeMethod("keyPressEvent", "(QKeyEvent*)", "#")]
		protected override void KeyPressEvent(QKeyEvent arg1) {
			((QDateTimeEdit) interceptor).KeyPressEvent(arg1);
		}
		[SmokeMethod("wheelEvent", "(QWheelEvent*)", "#")]
		protected override void WheelEvent(QWheelEvent arg1) {
			((QDateTimeEdit) interceptor).WheelEvent(arg1);
		}
		[SmokeMethod("focusInEvent", "(QFocusEvent*)", "#")]
		protected override void FocusInEvent(QFocusEvent arg1) {
			((QDateTimeEdit) interceptor).FocusInEvent(arg1);
		}
		[SmokeMethod("focusNextPrevChild", "(bool)", "$")]
		protected override bool FocusNextPrevChild(bool next) {
			return ((QDateTimeEdit) interceptor).FocusNextPrevChild(next);
		}
		[SmokeMethod("validate", "(QString&, int&) const", "$$")]
		protected new virtual int Validate(StringBuilder input, out int pos) {
			return ((QDateTimeEdit) interceptor).Validate(input,out pos);
		}
		[SmokeMethod("fixup", "(QString&) const", "$")]
		protected new virtual void Fixup(StringBuilder input) {
			((QDateTimeEdit) interceptor).Fixup(input);
		}
		[SmokeMethod("dateTimeFromText", "(const QString&) const", "$")]
		protected virtual QDateTime DateTimeFromText(string text) {
			return ((QDateTimeEdit) interceptor).DateTimeFromText(text);
		}
		[SmokeMethod("textFromDateTime", "(const QDateTime&) const", "#")]
		protected virtual string TextFromDateTime(QDateTime dt) {
			return ((QDateTimeEdit) interceptor).TextFromDateTime(dt);
		}
		[SmokeMethod("stepEnabled", "() const", "")]
		protected override int StepEnabled() {
			return ((QDateTimeEdit) interceptor).StepEnabled();
		}
		[SmokeMethod("mousePressEvent", "(QMouseEvent*)", "#")]
		protected override void MousePressEvent(QMouseEvent arg1) {
			((QDateTimeEdit) interceptor).MousePressEvent(arg1);
		}
		[SmokeMethod("paintEvent", "(QPaintEvent*)", "#")]
		protected override void PaintEvent(QPaintEvent arg1) {
			((QDateTimeEdit) interceptor).PaintEvent(arg1);
		}
		~QDateTimeEdit() {
			DisposeQDateTimeEdit();
		}
		public new void Dispose() {
			DisposeQDateTimeEdit();
		}
		[SmokeMethod("~QDateTimeEdit", "()", "")]
		private void DisposeQDateTimeEdit() {
			((QDateTimeEdit) interceptor).DisposeQDateTimeEdit();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQDateTimeEditSignals Emit {
			get { return (IQDateTimeEditSignals) Q_EMIT; }
		}
	}

	public interface IQDateTimeEditSignals : IQAbstractSpinBoxSignals {
		[Q_SIGNAL("void dateTimeChanged(const QDateTime&)")]
		void DateTimeChanged(QDateTime date);
		[Q_SIGNAL("void timeChanged(const QTime&)")]
		void TimeChanged(QTime date);
		[Q_SIGNAL("void dateChanged(const QDate&)")]
		void DateChanged(QDate date);
	}
}
