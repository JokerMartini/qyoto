//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QStyleOptionFocusRect")]
	public class QStyleOptionFocusRect : QStyleOption, IDisposable {
 		protected QStyleOptionFocusRect(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QStyleOptionFocusRect), this);
			interceptor = (QStyleOptionFocusRect) realProxy.GetTransparentProxy();
		}
		public enum StyleOptionType {
			Type = QStyleOption.OptionType.SO_FocusRect,
		}
		public enum StyleOptionVersion {
			Version = 1,
		}
		public QStyleOptionFocusRect() : this((Type) null) {
			CreateProxy();
			NewQStyleOptionFocusRect();
		}
		[SmokeMethod("QStyleOptionFocusRect", "()", "")]
		private void NewQStyleOptionFocusRect() {
			((QStyleOptionFocusRect) interceptor).NewQStyleOptionFocusRect();
		}
		public QStyleOptionFocusRect(QStyleOptionFocusRect other) : this((Type) null) {
			CreateProxy();
			NewQStyleOptionFocusRect(other);
		}
		[SmokeMethod("QStyleOptionFocusRect", "(const QStyleOptionFocusRect&)", "#")]
		private void NewQStyleOptionFocusRect(QStyleOptionFocusRect other) {
			((QStyleOptionFocusRect) interceptor).NewQStyleOptionFocusRect(other);
		}
		public QStyleOptionFocusRect(int version) : this((Type) null) {
			CreateProxy();
			NewQStyleOptionFocusRect(version);
		}
		[SmokeMethod("QStyleOptionFocusRect", "(int)", "$")]
		private void NewQStyleOptionFocusRect(int version) {
			((QStyleOptionFocusRect) interceptor).NewQStyleOptionFocusRect(version);
		}
		~QStyleOptionFocusRect() {
			DisposeQStyleOptionFocusRect();
		}
		public void Dispose() {
			DisposeQStyleOptionFocusRect();
		}
		[SmokeMethod("~QStyleOptionFocusRect", "()", "")]
		private void DisposeQStyleOptionFocusRect() {
			((QStyleOptionFocusRect) interceptor).DisposeQStyleOptionFocusRect();
		}
	}
}
