//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QAbstractProxyModel")]
	public abstract class QAbstractProxyModel : QAbstractItemModel {
 		protected QAbstractProxyModel(Type dummy) : base((Type) null) {}
		[SmokeClass("QAbstractProxyModel")]
		interface IQAbstractProxyModelProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QAbstractProxyModel), this);
			_interceptor = (QAbstractProxyModel) realProxy.GetTransparentProxy();
		}
		private QAbstractProxyModel ProxyQAbstractProxyModel() {
			return (QAbstractProxyModel) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QAbstractProxyModel() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQAbstractProxyModelProxy), null);
			_staticInterceptor = (IQAbstractProxyModelProxy) realProxy.GetTransparentProxy();
		}
		private static IQAbstractProxyModelProxy StaticQAbstractProxyModel() {
			return (IQAbstractProxyModelProxy) _staticInterceptor;
		}
		public QAbstractProxyModel(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQAbstractProxyModel(parent);
		}
		[SmokeMethod("QAbstractProxyModel", "(QObject*)", "#")]
		private void NewQAbstractProxyModel(QObject parent) {
			ProxyQAbstractProxyModel().NewQAbstractProxyModel(parent);
		}
		public QAbstractProxyModel() : this((Type) null) {
			CreateProxy();
			NewQAbstractProxyModel();
		}
		[SmokeMethod("QAbstractProxyModel", "()", "")]
		private void NewQAbstractProxyModel() {
			ProxyQAbstractProxyModel().NewQAbstractProxyModel();
		}
		[SmokeMethod("setSourceModel", "(QAbstractItemModel*)", "#")]
		public virtual void SetSourceModel(QAbstractItemModel sourceModel) {
			ProxyQAbstractProxyModel().SetSourceModel(sourceModel);
		}
		[SmokeMethod("sourceModel", "() const", "")]
		public QAbstractItemModel SourceModel() {
			return ProxyQAbstractProxyModel().SourceModel();
		}
		[SmokeMethod("mapToSource", "(const QModelIndex&) const", "#")]
		public abstract QModelIndex MapToSource(QModelIndex proxyIndex);
		[SmokeMethod("mapFromSource", "(const QModelIndex&) const", "#")]
		public abstract QModelIndex MapFromSource(QModelIndex sourceIndex);
		[SmokeMethod("mapSelectionToSource", "(const QItemSelection&) const", "#")]
		public virtual QItemSelection MapSelectionToSource(QItemSelection selection) {
			return ProxyQAbstractProxyModel().MapSelectionToSource(selection);
		}
		[SmokeMethod("mapSelectionFromSource", "(const QItemSelection&) const", "#")]
		public virtual QItemSelection MapSelectionFromSource(QItemSelection selection) {
			return ProxyQAbstractProxyModel().MapSelectionFromSource(selection);
		}
		[SmokeMethod("submit", "()", "")]
		public override bool Submit() {
			return ProxyQAbstractProxyModel().Submit();
		}
		[SmokeMethod("revert", "()", "")]
		public override void Revert() {
			ProxyQAbstractProxyModel().Revert();
		}
		[SmokeMethod("data", "(const QModelIndex&, int) const", "#$")]
		public override QVariant Data(QModelIndex proxyIndex, int role) {
			return ProxyQAbstractProxyModel().Data(proxyIndex,role);
		}
		[SmokeMethod("data", "(const QModelIndex&) const", "#")]
		public virtual QVariant Data(QModelIndex proxyIndex) {
			return ProxyQAbstractProxyModel().Data(proxyIndex);
		}
		[SmokeMethod("headerData", "(int, Qt::Orientation, int) const", "$$$")]
		public override QVariant HeaderData(int section, Qt.Orientation orientation, int role) {
			return ProxyQAbstractProxyModel().HeaderData(section,orientation,role);
		}
		[SmokeMethod("flags", "(const QModelIndex&) const", "#")]
		public override int Flags(QModelIndex index) {
			return ProxyQAbstractProxyModel().Flags(index);
		}
		public static string Tr(string s, string c) {
			return StaticQAbstractProxyModel().Tr(s,c);
		}
		public static string Tr(string s) {
			return StaticQAbstractProxyModel().Tr(s);
		}
		protected new IQAbstractProxyModelSignals Emit {
			get { return (IQAbstractProxyModelSignals) Q_EMIT; }
		}
	}

	public interface IQAbstractProxyModelSignals : IQAbstractItemModelSignals {
	}
}
