//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;

	[SmokeClass("QUndoCommand")]
	public class QUndoCommand : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
		protected QUndoCommand(Type dummy) {}
		interface IQUndoCommandProxy {
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QUndoCommand), this);
			_interceptor = (QUndoCommand) realProxy.GetTransparentProxy();
		}
		private QUndoCommand ProxyQUndoCommand() {
			return (QUndoCommand) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QUndoCommand() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQUndoCommandProxy), null);
			_staticInterceptor = (IQUndoCommandProxy) realProxy.GetTransparentProxy();
		}
		private static IQUndoCommandProxy StaticQUndoCommand() {
			return (IQUndoCommandProxy) _staticInterceptor;
		}

		public QUndoCommand(QUndoCommand parent) : this((Type) null) {
			CreateProxy();
			NewQUndoCommand(parent);
		}
		[SmokeMethod("QUndoCommand#", "(QUndoCommand*)")]
		private void NewQUndoCommand(QUndoCommand parent) {
			ProxyQUndoCommand().NewQUndoCommand(parent);
		}
		public QUndoCommand() : this((Type) null) {
			CreateProxy();
			NewQUndoCommand();
		}
		[SmokeMethod("QUndoCommand", "()")]
		private void NewQUndoCommand() {
			ProxyQUndoCommand().NewQUndoCommand();
		}
		public QUndoCommand(string text, QUndoCommand parent) : this((Type) null) {
			CreateProxy();
			NewQUndoCommand(text,parent);
		}
		[SmokeMethod("QUndoCommand$$", "(const QString&, QUndoCommand*)")]
		private void NewQUndoCommand(string text, QUndoCommand parent) {
			ProxyQUndoCommand().NewQUndoCommand(text,parent);
		}
		public QUndoCommand(string text) : this((Type) null) {
			CreateProxy();
			NewQUndoCommand(text);
		}
		[SmokeMethod("QUndoCommand$", "(const QString&)")]
		private void NewQUndoCommand(string text) {
			ProxyQUndoCommand().NewQUndoCommand(text);
		}
		[SmokeMethod("undo", "()")]
		public virtual void Undo() {
			ProxyQUndoCommand().Undo();
		}
		[SmokeMethod("redo", "()")]
		public virtual void Redo() {
			ProxyQUndoCommand().Redo();
		}
		[SmokeMethod("text", "() const")]
		public string Text() {
			return ProxyQUndoCommand().Text();
		}
		[SmokeMethod("setText$", "(const QString&)")]
		public void SetText(string text) {
			ProxyQUndoCommand().SetText(text);
		}
		[SmokeMethod("id", "() const")]
		public virtual int Id() {
			return ProxyQUndoCommand().Id();
		}
		[SmokeMethod("mergeWith#", "(const QUndoCommand*)")]
		public virtual bool MergeWith(QUndoCommand other) {
			return ProxyQUndoCommand().MergeWith(other);
		}
		~QUndoCommand() {
			DisposeQUndoCommand();
		}
		public void Dispose() {
			DisposeQUndoCommand();
		}
		[SmokeMethod("~QUndoCommand", "()")]
		private void DisposeQUndoCommand() {
			ProxyQUndoCommand().DisposeQUndoCommand();
		}
	}
}
