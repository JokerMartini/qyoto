//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QUndoCommand")]
	public class QUndoCommand : MarshalByRefObject, IDisposable {
		protected QUndoCommand interceptor = null;
		private IntPtr smokeObject;
		protected QUndoCommand(Type dummy) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QUndoCommand), this);
			interceptor = (QUndoCommand) realProxy.GetTransparentProxy();
		}
		public QUndoCommand(QUndoCommand parent) : this((Type) null) {
			CreateProxy();
			NewQUndoCommand(parent);
		}
		[SmokeMethod("QUndoCommand", "(QUndoCommand*)", "#")]
		private void NewQUndoCommand(QUndoCommand parent) {
			((QUndoCommand) interceptor).NewQUndoCommand(parent);
		}
		public QUndoCommand() : this((Type) null) {
			CreateProxy();
			NewQUndoCommand();
		}
		[SmokeMethod("QUndoCommand", "()", "")]
		private void NewQUndoCommand() {
			((QUndoCommand) interceptor).NewQUndoCommand();
		}
		public QUndoCommand(string text, QUndoCommand parent) : this((Type) null) {
			CreateProxy();
			NewQUndoCommand(text,parent);
		}
		[SmokeMethod("QUndoCommand", "(const QString&, QUndoCommand*)", "$#")]
		private void NewQUndoCommand(string text, QUndoCommand parent) {
			((QUndoCommand) interceptor).NewQUndoCommand(text,parent);
		}
		public QUndoCommand(string text) : this((Type) null) {
			CreateProxy();
			NewQUndoCommand(text);
		}
		[SmokeMethod("QUndoCommand", "(const QString&)", "$")]
		private void NewQUndoCommand(string text) {
			((QUndoCommand) interceptor).NewQUndoCommand(text);
		}
		[SmokeMethod("undo", "()", "")]
		public virtual void Undo() {
			((QUndoCommand) interceptor).Undo();
		}
		[SmokeMethod("redo", "()", "")]
		public virtual void Redo() {
			((QUndoCommand) interceptor).Redo();
		}
		[SmokeMethod("text", "() const", "")]
		public string Text() {
			return ((QUndoCommand) interceptor).Text();
		}
		[SmokeMethod("setText", "(const QString&)", "$")]
		public void SetText(string text) {
			((QUndoCommand) interceptor).SetText(text);
		}
		[SmokeMethod("id", "() const", "")]
		public virtual int Id() {
			return ((QUndoCommand) interceptor).Id();
		}
		[SmokeMethod("mergeWith", "(const QUndoCommand*)", "#")]
		public virtual bool MergeWith(QUndoCommand other) {
			return ((QUndoCommand) interceptor).MergeWith(other);
		}
		~QUndoCommand() {
			DisposeQUndoCommand();
		}
		public void Dispose() {
			DisposeQUndoCommand();
		}
		[SmokeMethod("~QUndoCommand", "()", "")]
		private void DisposeQUndoCommand() {
			((QUndoCommand) interceptor).DisposeQUndoCommand();
		}
	}
}
