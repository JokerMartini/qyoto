//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	[SmokeClass("QStringListModel")]
	public partial class QStringListModel : QAbstractListModel, IDisposable {
 		protected QStringListModel(Type dummy) : base((Type) null) {}
		[SmokeClass("QStringListModel")]
		interface IQStringListModelProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QStringListModel), this);
			interceptor = (QStringListModel) realProxy.GetTransparentProxy();
		}
		private static IQStringListModelProxy staticInterceptor = null;
		static QStringListModel() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQStringListModelProxy), null);
			staticInterceptor = (IQStringListModelProxy) realProxy.GetTransparentProxy();
		}
		public QStringListModel(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQStringListModel(parent);
		}
		[SmokeMethod("QStringListModel", "(QObject*)", "#")]
		private void NewQStringListModel(QObject parent) {
			((QStringListModel) interceptor).NewQStringListModel(parent);
		}
		public QStringListModel() : this((Type) null) {
			CreateProxy();
			NewQStringListModel();
		}
		[SmokeMethod("QStringListModel", "()", "")]
		private void NewQStringListModel() {
			((QStringListModel) interceptor).NewQStringListModel();
		}
		public QStringListModel(List<string> strings, QObject parent) : this((Type) null) {
			CreateProxy();
			NewQStringListModel(strings,parent);
		}
		[SmokeMethod("QStringListModel", "(const QStringList&, QObject*)", "?#")]
		private void NewQStringListModel(List<string> strings, QObject parent) {
			((QStringListModel) interceptor).NewQStringListModel(strings,parent);
		}
		public QStringListModel(List<string> strings) : this((Type) null) {
			CreateProxy();
			NewQStringListModel(strings);
		}
		[SmokeMethod("QStringListModel", "(const QStringList&)", "?")]
		private void NewQStringListModel(List<string> strings) {
			((QStringListModel) interceptor).NewQStringListModel(strings);
		}
		[SmokeMethod("rowCount", "(const QModelIndex&) const", "#")]
		public override int RowCount(QModelIndex parent) {
			return ((QStringListModel) interceptor).RowCount(parent);
		}
		[SmokeMethod("rowCount", "() const", "")]
		public virtual int RowCount() {
			return ((QStringListModel) interceptor).RowCount();
		}
		[SmokeMethod("data", "(const QModelIndex&, int) const", "#$")]
		public override QVariant Data(QModelIndex index, int role) {
			return ((QStringListModel) interceptor).Data(index,role);
		}
		[SmokeMethod("setData", "(const QModelIndex&, const QVariant&, int)", "##$")]
		public override bool SetData(QModelIndex index, QVariant value, int role) {
			return ((QStringListModel) interceptor).SetData(index,value,role);
		}
		[SmokeMethod("setData", "(const QModelIndex&, const QVariant&)", "##")]
		public override bool SetData(QModelIndex index, QVariant value) {
			return ((QStringListModel) interceptor).SetData(index,value);
		}
		[SmokeMethod("flags", "(const QModelIndex&) const", "#")]
		public override int Flags(QModelIndex index) {
			return ((QStringListModel) interceptor).Flags(index);
		}
		[SmokeMethod("insertRows", "(int, int, const QModelIndex&)", "$$#")]
		public override bool InsertRows(int row, int count, QModelIndex parent) {
			return ((QStringListModel) interceptor).InsertRows(row,count,parent);
		}
		[SmokeMethod("insertRows", "(int, int)", "$$")]
		public override bool InsertRows(int row, int count) {
			return ((QStringListModel) interceptor).InsertRows(row,count);
		}
		[SmokeMethod("removeRows", "(int, int, const QModelIndex&)", "$$#")]
		public override bool RemoveRows(int row, int count, QModelIndex parent) {
			return ((QStringListModel) interceptor).RemoveRows(row,count,parent);
		}
		[SmokeMethod("removeRows", "(int, int)", "$$")]
		public override bool RemoveRows(int row, int count) {
			return ((QStringListModel) interceptor).RemoveRows(row,count);
		}
		[SmokeMethod("sort", "(int, Qt::SortOrder)", "$$")]
		public override void Sort(int column, Qt.SortOrder order) {
			((QStringListModel) interceptor).Sort(column,order);
		}
		[SmokeMethod("sort", "(int)", "$")]
		public override void Sort(int column) {
			((QStringListModel) interceptor).Sort(column);
		}
		[SmokeMethod("stringList", "() const", "")]
		public List<string> StringList() {
			return ((QStringListModel) interceptor).StringList();
		}
		[SmokeMethod("setStringList", "(const QStringList&)", "?")]
		public void SetStringList(List<string> strings) {
			((QStringListModel) interceptor).SetStringList(strings);
		}
		~QStringListModel() {
			DisposeQStringListModel();
		}
		public new void Dispose() {
			DisposeQStringListModel();
		}
		[SmokeMethod("~QStringListModel", "()", "")]
		private void DisposeQStringListModel() {
			((QStringListModel) interceptor).DisposeQStringListModel();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQStringListModelSignals Emit {
			get { return (IQStringListModelSignals) Q_EMIT; }
		}
	}

	public interface IQStringListModelSignals : IQAbstractListModelSignals {
	}
}
