//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QStyleFactoryInterface")]
	public abstract class QStyleFactoryInterface : QFactoryInterface {
 		protected QStyleFactoryInterface(Type dummy) : base((Type) null) {}
		[SmokeClass("QStyleFactoryInterface")]
		interface IQStyleFactoryInterfaceProxy {
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QStyleFactoryInterface), this);
			_interceptor = (QStyleFactoryInterface) realProxy.GetTransparentProxy();
		}
		private QStyleFactoryInterface ProxyQStyleFactoryInterface() {
			return (QStyleFactoryInterface) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QStyleFactoryInterface() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQStyleFactoryInterfaceProxy), null);
			_staticInterceptor = (IQStyleFactoryInterfaceProxy) realProxy.GetTransparentProxy();
		}
		private static IQStyleFactoryInterfaceProxy StaticQStyleFactoryInterface() {
			return (IQStyleFactoryInterfaceProxy) _staticInterceptor;
		}
		public abstract QStyle Create(string key);
		public QStyleFactoryInterface() : this((Type) null) {
			CreateProxy();
			NewQStyleFactoryInterface();
		}
		[SmokeMethod("QStyleFactoryInterface", "()", "")]
		private void NewQStyleFactoryInterface() {
			ProxyQStyleFactoryInterface().NewQStyleFactoryInterface();
		}
		~QStyleFactoryInterface() {
			DisposeQStyleFactoryInterface();
		}
		public new void Dispose() {
			DisposeQStyleFactoryInterface();
		}
		[SmokeMethod("~QStyleFactoryInterface", "()", "")]
		private void DisposeQStyleFactoryInterface() {
			ProxyQStyleFactoryInterface().DisposeQStyleFactoryInterface();
		}
	}
}
