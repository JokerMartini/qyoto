//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QContextMenuEvent")]
	public class QContextMenuEvent : QInputEvent, IDisposable {
 		protected QContextMenuEvent(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QContextMenuEvent), this);
			interceptor = (QContextMenuEvent) realProxy.GetTransparentProxy();
		}
		public enum Reason {
			Mouse = 0,
			Keyboard = 1,
			Other = 2,
		}
		public QContextMenuEvent(QContextMenuEvent.Reason reason, QPoint pos, QPoint globalPos) : this((Type) null) {
			CreateProxy();
			NewQContextMenuEvent(reason,pos,globalPos);
		}
		[SmokeMethod("QContextMenuEvent", "(QContextMenuEvent::Reason, const QPoint&, const QPoint&)", "$##")]
		private void NewQContextMenuEvent(QContextMenuEvent.Reason reason, QPoint pos, QPoint globalPos) {
			((QContextMenuEvent) interceptor).NewQContextMenuEvent(reason,pos,globalPos);
		}
		public QContextMenuEvent(QContextMenuEvent.Reason reason, QPoint pos) : this((Type) null) {
			CreateProxy();
			NewQContextMenuEvent(reason,pos);
		}
		[SmokeMethod("QContextMenuEvent", "(QContextMenuEvent::Reason, const QPoint&)", "$#")]
		private void NewQContextMenuEvent(QContextMenuEvent.Reason reason, QPoint pos) {
			((QContextMenuEvent) interceptor).NewQContextMenuEvent(reason,pos);
		}
		[SmokeMethod("x", "() const", "")]
		public int X() {
			return ((QContextMenuEvent) interceptor).X();
		}
		[SmokeMethod("y", "() const", "")]
		public int Y() {
			return ((QContextMenuEvent) interceptor).Y();
		}
		[SmokeMethod("globalX", "() const", "")]
		public int GlobalX() {
			return ((QContextMenuEvent) interceptor).GlobalX();
		}
		[SmokeMethod("globalY", "() const", "")]
		public int GlobalY() {
			return ((QContextMenuEvent) interceptor).GlobalY();
		}
		[SmokeMethod("pos", "() const", "")]
		public QPoint Pos() {
			return ((QContextMenuEvent) interceptor).Pos();
		}
		[SmokeMethod("globalPos", "() const", "")]
		public QPoint GlobalPos() {
			return ((QContextMenuEvent) interceptor).GlobalPos();
		}
		[SmokeMethod("reason", "() const", "")]
		public QContextMenuEvent.Reason reason() {
			return ((QContextMenuEvent) interceptor).reason();
		}
		~QContextMenuEvent() {
			DisposeQContextMenuEvent();
		}
		public new void Dispose() {
			DisposeQContextMenuEvent();
		}
		[SmokeMethod("~QContextMenuEvent", "()", "")]
		private void DisposeQContextMenuEvent() {
			((QContextMenuEvent) interceptor).DisposeQContextMenuEvent();
		}
	}
}
