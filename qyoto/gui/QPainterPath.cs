//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	[SmokeClass("QPainterPath")]
	public class QPainterPath : MarshalByRefObject, IDisposable {
		protected QPainterPath interceptor = null;
		private IntPtr smokeObject;
		protected QPainterPath(Type dummy) {}
		[SmokeClass("QPainterPath")]
		interface IQPainterPathProxy {
			[SmokeMethod("operator==", "(const QPainterPath&) const", "#")]
			bool op_equals(QPainterPath lhs, QPainterPath other);
			[SmokeMethod("operator*", "(const QPainterPath&, const QMatrix&)", "##")]
			QPainterPath op_mult(QPainterPath p, QMatrix m);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QPainterPath), this);
			interceptor = (QPainterPath) realProxy.GetTransparentProxy();
		}
		private static IQPainterPathProxy staticInterceptor = null;
		static QPainterPath() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQPainterPathProxy), null);
			staticInterceptor = (IQPainterPathProxy) realProxy.GetTransparentProxy();
		}
		public enum ElementType {
			MoveToElement = 0,
			LineToElement = 1,
			CurveToElement = 2,
			CurveToDataElement = 3,
		}
		// const QPainterPath::Element& elementAt(int arg1); >>>> NOT CONVERTED
		public QPainterPath() : this((Type) null) {
			CreateProxy();
			NewQPainterPath();
		}
		[SmokeMethod("QPainterPath", "()", "")]
		private void NewQPainterPath() {
			((QPainterPath) interceptor).NewQPainterPath();
		}
		public QPainterPath(QPointF startPoint) : this((Type) null) {
			CreateProxy();
			NewQPainterPath(startPoint);
		}
		[SmokeMethod("QPainterPath", "(const QPointF&)", "#")]
		private void NewQPainterPath(QPointF startPoint) {
			((QPainterPath) interceptor).NewQPainterPath(startPoint);
		}
		public QPainterPath(QPainterPath other) : this((Type) null) {
			CreateProxy();
			NewQPainterPath(other);
		}
		[SmokeMethod("QPainterPath", "(const QPainterPath&)", "#")]
		private void NewQPainterPath(QPainterPath other) {
			((QPainterPath) interceptor).NewQPainterPath(other);
		}
		[SmokeMethod("closeSubpath", "()", "")]
		public void CloseSubpath() {
			((QPainterPath) interceptor).CloseSubpath();
		}
		[SmokeMethod("moveTo", "(const QPointF&)", "#")]
		public void MoveTo(QPointF p) {
			((QPainterPath) interceptor).MoveTo(p);
		}
		[SmokeMethod("moveTo", "(qreal, qreal)", "$$")]
		public void MoveTo(double x, double y) {
			((QPainterPath) interceptor).MoveTo(x,y);
		}
		[SmokeMethod("lineTo", "(const QPointF&)", "#")]
		public void LineTo(QPointF p) {
			((QPainterPath) interceptor).LineTo(p);
		}
		[SmokeMethod("lineTo", "(qreal, qreal)", "$$")]
		public void LineTo(double x, double y) {
			((QPainterPath) interceptor).LineTo(x,y);
		}
		[SmokeMethod("arcMoveTo", "(const QRectF&, qreal)", "#$")]
		public void ArcMoveTo(QRectF rect, double angle) {
			((QPainterPath) interceptor).ArcMoveTo(rect,angle);
		}
		[SmokeMethod("arcMoveTo", "(qreal, qreal, qreal, qreal, qreal)", "$$$$$")]
		public void ArcMoveTo(double x, double y, double w, double h, double angle) {
			((QPainterPath) interceptor).ArcMoveTo(x,y,w,h,angle);
		}
		[SmokeMethod("arcTo", "(const QRectF&, qreal, qreal)", "#$$")]
		public void ArcTo(QRectF rect, double startAngle, double arcLength) {
			((QPainterPath) interceptor).ArcTo(rect,startAngle,arcLength);
		}
		[SmokeMethod("arcTo", "(qreal, qreal, qreal, qreal, qreal, qreal)", "$$$$$$")]
		public void ArcTo(double x, double y, double w, double h, double startAngle, double arcLength) {
			((QPainterPath) interceptor).ArcTo(x,y,w,h,startAngle,arcLength);
		}
		[SmokeMethod("cubicTo", "(const QPointF&, const QPointF&, const QPointF&)", "###")]
		public void CubicTo(QPointF ctrlPt1, QPointF ctrlPt2, QPointF endPt) {
			((QPainterPath) interceptor).CubicTo(ctrlPt1,ctrlPt2,endPt);
		}
		[SmokeMethod("cubicTo", "(qreal, qreal, qreal, qreal, qreal, qreal)", "$$$$$$")]
		public void CubicTo(double ctrlPt1x, double ctrlPt1y, double ctrlPt2x, double ctrlPt2y, double endPtx, double endPty) {
			((QPainterPath) interceptor).CubicTo(ctrlPt1x,ctrlPt1y,ctrlPt2x,ctrlPt2y,endPtx,endPty);
		}
		[SmokeMethod("quadTo", "(const QPointF&, const QPointF&)", "##")]
		public void QuadTo(QPointF ctrlPt, QPointF endPt) {
			((QPainterPath) interceptor).QuadTo(ctrlPt,endPt);
		}
		[SmokeMethod("quadTo", "(qreal, qreal, qreal, qreal)", "$$$$")]
		public void QuadTo(double ctrlPtx, double ctrlPty, double endPtx, double endPty) {
			((QPainterPath) interceptor).QuadTo(ctrlPtx,ctrlPty,endPtx,endPty);
		}
		[SmokeMethod("currentPosition", "() const", "")]
		public QPointF CurrentPosition() {
			return ((QPainterPath) interceptor).CurrentPosition();
		}
		[SmokeMethod("addRect", "(const QRectF&)", "#")]
		public void AddRect(QRectF rect) {
			((QPainterPath) interceptor).AddRect(rect);
		}
		[SmokeMethod("addRect", "(qreal, qreal, qreal, qreal)", "$$$$")]
		public void AddRect(double x, double y, double w, double h) {
			((QPainterPath) interceptor).AddRect(x,y,w,h);
		}
		[SmokeMethod("addEllipse", "(const QRectF&)", "#")]
		public void AddEllipse(QRectF rect) {
			((QPainterPath) interceptor).AddEllipse(rect);
		}
		[SmokeMethod("addEllipse", "(qreal, qreal, qreal, qreal)", "$$$$")]
		public void AddEllipse(double x, double y, double w, double h) {
			((QPainterPath) interceptor).AddEllipse(x,y,w,h);
		}
		[SmokeMethod("addPolygon", "(const QPolygonF&)", "#")]
		public void AddPolygon(QPolygonF polygon) {
			((QPainterPath) interceptor).AddPolygon(polygon);
		}
		[SmokeMethod("addText", "(const QPointF&, const QFont&, const QString&)", "##$")]
		public void AddText(QPointF point, QFont f, string text) {
			((QPainterPath) interceptor).AddText(point,f,text);
		}
		[SmokeMethod("addText", "(qreal, qreal, const QFont&, const QString&)", "$$#$")]
		public void AddText(double x, double y, QFont f, string text) {
			((QPainterPath) interceptor).AddText(x,y,f,text);
		}
		[SmokeMethod("addPath", "(const QPainterPath&)", "#")]
		public void AddPath(QPainterPath path) {
			((QPainterPath) interceptor).AddPath(path);
		}
		[SmokeMethod("addRegion", "(const QRegion&)", "#")]
		public void AddRegion(QRegion region) {
			((QPainterPath) interceptor).AddRegion(region);
		}
		[SmokeMethod("connectPath", "(const QPainterPath&)", "#")]
		public void ConnectPath(QPainterPath path) {
			((QPainterPath) interceptor).ConnectPath(path);
		}
		[SmokeMethod("contains", "(const QPointF&) const", "#")]
		public bool Contains(QPointF pt) {
			return ((QPainterPath) interceptor).Contains(pt);
		}
		[SmokeMethod("contains", "(const QRectF&) const", "#")]
		public bool Contains(QRectF rect) {
			return ((QPainterPath) interceptor).Contains(rect);
		}
		[SmokeMethod("intersects", "(const QRectF&) const", "#")]
		public bool Intersects(QRectF rect) {
			return ((QPainterPath) interceptor).Intersects(rect);
		}
		[SmokeMethod("boundingRect", "() const", "")]
		public QRectF BoundingRect() {
			return ((QPainterPath) interceptor).BoundingRect();
		}
		[SmokeMethod("controlPointRect", "() const", "")]
		public QRectF ControlPointRect() {
			return ((QPainterPath) interceptor).ControlPointRect();
		}
		[SmokeMethod("fillRule", "() const", "")]
		public Qt.FillRule FillRule() {
			return ((QPainterPath) interceptor).FillRule();
		}
		[SmokeMethod("setFillRule", "(Qt::FillRule)", "$")]
		public void SetFillRule(Qt.FillRule fillRule) {
			((QPainterPath) interceptor).SetFillRule(fillRule);
		}
		[SmokeMethod("isEmpty", "() const", "")]
		public bool IsEmpty() {
			return ((QPainterPath) interceptor).IsEmpty();
		}
		[SmokeMethod("toReversed", "() const", "")]
		public QPainterPath ToReversed() {
			return ((QPainterPath) interceptor).ToReversed();
		}
		[SmokeMethod("toSubpathPolygons", "(const QMatrix&) const", "#")]
		public List<QPolygonF> ToSubpathPolygons(QMatrix matrix) {
			return ((QPainterPath) interceptor).ToSubpathPolygons(matrix);
		}
		[SmokeMethod("toSubpathPolygons", "() const", "")]
		public List<QPolygonF> ToSubpathPolygons() {
			return ((QPainterPath) interceptor).ToSubpathPolygons();
		}
		[SmokeMethod("toFillPolygons", "(const QMatrix&) const", "#")]
		public List<QPolygonF> ToFillPolygons(QMatrix matrix) {
			return ((QPainterPath) interceptor).ToFillPolygons(matrix);
		}
		[SmokeMethod("toFillPolygons", "() const", "")]
		public List<QPolygonF> ToFillPolygons() {
			return ((QPainterPath) interceptor).ToFillPolygons();
		}
		[SmokeMethod("toFillPolygon", "(const QMatrix&) const", "#")]
		public QPolygonF ToFillPolygon(QMatrix matrix) {
			return ((QPainterPath) interceptor).ToFillPolygon(matrix);
		}
		[SmokeMethod("toFillPolygon", "() const", "")]
		public QPolygonF ToFillPolygon() {
			return ((QPainterPath) interceptor).ToFillPolygon();
		}
		[SmokeMethod("elementCount", "() const", "")]
		public int ElementCount() {
			return ((QPainterPath) interceptor).ElementCount();
		}
		[SmokeMethod("setElementPositionAt", "(int, qreal, qreal)", "$$$")]
		public void SetElementPositionAt(int i, double x, double y) {
			((QPainterPath) interceptor).SetElementPositionAt(i,x,y);
		}
		public override bool Equals(object o) {
			if (!(o is QPainterPath)) { return false; }
			return this == (QPainterPath) o;
		}
		public override int GetHashCode() {
			return ((QPainterPath) interceptor).GetHashCode();
		}
		~QPainterPath() {
			DisposeQPainterPath();
		}
		public void Dispose() {
			DisposeQPainterPath();
		}
		[SmokeMethod("~QPainterPath", "()", "")]
		private void DisposeQPainterPath() {
			((QPainterPath) interceptor).DisposeQPainterPath();
		}
		public static bool operator==(QPainterPath lhs, QPainterPath other) {
			return staticInterceptor.op_equals(lhs,other);
		}
		public static bool operator!=(QPainterPath lhs, QPainterPath other) {
			return !staticInterceptor.op_equals(lhs,other);
		}
		public static QPainterPath operator*(QPainterPath p, QMatrix m) {
			return staticInterceptor.op_mult(p,m);
		}
	}
}
