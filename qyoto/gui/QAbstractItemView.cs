//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	/// See <see cref="IQAbstractItemViewSignals"></see> for signals emitted by QAbstractItemView
	[SmokeClass("QAbstractItemView")]
	public abstract class QAbstractItemView : QAbstractScrollArea {
 		protected QAbstractItemView(Type dummy) : base((Type) null) {}
		[SmokeClass("QAbstractItemView")]
		interface IQAbstractItemViewProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QAbstractItemView), this);
			interceptor = (QAbstractItemView) realProxy.GetTransparentProxy();
		}
		private static IQAbstractItemViewProxy staticInterceptor = null;
		static QAbstractItemView() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQAbstractItemViewProxy), null);
			staticInterceptor = (IQAbstractItemViewProxy) realProxy.GetTransparentProxy();
		}
		public enum SelectionMode {
			NoSelection = 0,
			SingleSelection = 1,
			MultiSelection = 2,
			ExtendedSelection = 3,
			ContiguousSelection = 4,
		}
		public enum SelectionBehavior {
			SelectItems = 0,
			SelectRows = 1,
			SelectColumns = 2,
		}
		public enum ScrollHint {
			EnsureVisible = 0,
			PositionAtTop = 1,
			PositionAtBottom = 2,
			PositionAtCenter = 3,
		}
		public enum EditTrigger {
			NoEditTriggers = 0,
			CurrentChanged = 1,
			DoubleClicked = 2,
			SelectedClicked = 4,
			EditKeyPressed = 8,
			AnyKeyPressed = 16,
			AllEditTriggers = 31,
		}
		public enum ScrollMode {
			ScrollPerItem = 0,
			ScrollPerPixel = 1,
		}
		public enum DragDropMode {
			NoDragDrop = 0,
			DragOnly = 1,
			DropOnly = 2,
			DragDrop = 3,
			InternalMove = 4,
		}
		public enum CursorAction {
			MoveUp = 0,
			MoveDown = 1,
			MoveLeft = 2,
			MoveRight = 3,
			MoveHome = 4,
			MoveEnd = 5,
			MovePageUp = 6,
			MovePageDown = 7,
			MoveNext = 8,
			MovePrevious = 9,
		}
		public enum State {
			NoState = 0,
			DraggingState = 1,
			DragSelectingState = 2,
			EditingState = 3,
			ExpandingState = 4,
			CollapsingState = 5,
			AnimatingState = 6,
		}
		public enum DropIndicatorPosition {
			OnItem = 0,
			AboveItem = 1,
			BelowItem = 2,
			OnViewport = 3,
		}
		[Q_PROPERTY("bool", "autoScroll")]
		public bool AutoScroll {
			[SmokeMethod("hasAutoScroll", "()", "")]
			get { return ((QAbstractItemView) interceptor).AutoScroll; }
			[SmokeMethod("setAutoScroll", "(bool)", "$")]
			set { ((QAbstractItemView) interceptor).AutoScroll = value; }
		}
		[Q_PROPERTY("EditTriggers", "editTriggers")]
		public int EditTriggers {
			[SmokeMethod("editTriggers", "()", "")]
			get { return ((QAbstractItemView) interceptor).EditTriggers; }
			[SmokeMethod("setEditTriggers", "(EditTriggers)", "$")]
			set { ((QAbstractItemView) interceptor).EditTriggers = value; }
		}
		[Q_PROPERTY("bool", "tabKeyNavigation")]
		public bool TabKeyNavigation {
			[SmokeMethod("tabKeyNavigation", "()", "")]
			get { return ((QAbstractItemView) interceptor).TabKeyNavigation; }
			[SmokeMethod("setTabKeyNavigation", "(bool)", "$")]
			set { ((QAbstractItemView) interceptor).TabKeyNavigation = value; }
		}
		[Q_PROPERTY("bool", "showDropIndicator")]
		public bool ShowDropIndicator {
			[SmokeMethod("showDropIndicator", "()", "")]
			get { return ((QAbstractItemView) interceptor).ShowDropIndicator; }
			[SmokeMethod("setDropIndicatorShown", "(bool)", "$")]
			set { ((QAbstractItemView) interceptor).ShowDropIndicator = value; }
		}
		[Q_PROPERTY("bool", "dragEnabled")]
		public bool DragEnabled {
			[SmokeMethod("dragEnabled", "()", "")]
			get { return ((QAbstractItemView) interceptor).DragEnabled; }
			[SmokeMethod("setDragEnabled", "(bool)", "$")]
			set { ((QAbstractItemView) interceptor).DragEnabled = value; }
		}
		[Q_PROPERTY("bool", "dragDropOverwriteMode")]
		public bool DragDropOverwriteMode {
			[SmokeMethod("dragDropOverwriteMode", "()", "")]
			get { return ((QAbstractItemView) interceptor).DragDropOverwriteMode; }
			[SmokeMethod("setDragDropOverwriteMode", "(bool)", "$")]
			set { ((QAbstractItemView) interceptor).DragDropOverwriteMode = value; }
		}
		[Q_PROPERTY("QAbstractItemView::DragDropMode", "dragDropMode")]
		public QAbstractItemView.DragDropMode dragDropMode {
			[SmokeMethod("dragDropMode", "()", "")]
			get { return ((QAbstractItemView) interceptor).dragDropMode; }
			[SmokeMethod("setDragDropMode", "(QAbstractItemView::DragDropMode)", "$")]
			set { ((QAbstractItemView) interceptor).dragDropMode = value; }
		}
		[Q_PROPERTY("bool", "alternatingRowColors")]
		public bool AlternatingRowColors {
			[SmokeMethod("alternatingRowColors", "()", "")]
			get { return ((QAbstractItemView) interceptor).AlternatingRowColors; }
			[SmokeMethod("setAlternatingRowColors", "(bool)", "$")]
			set { ((QAbstractItemView) interceptor).AlternatingRowColors = value; }
		}
		[Q_PROPERTY("QAbstractItemView::SelectionMode", "selectionMode")]
		public QAbstractItemView.SelectionMode selectionMode {
			[SmokeMethod("selectionMode", "()", "")]
			get { return ((QAbstractItemView) interceptor).selectionMode; }
			[SmokeMethod("setSelectionMode", "(QAbstractItemView::SelectionMode)", "$")]
			set { ((QAbstractItemView) interceptor).selectionMode = value; }
		}
		[Q_PROPERTY("QAbstractItemView::SelectionBehavior", "selectionBehavior")]
		public QAbstractItemView.SelectionBehavior selectionBehavior {
			[SmokeMethod("selectionBehavior", "()", "")]
			get { return ((QAbstractItemView) interceptor).selectionBehavior; }
			[SmokeMethod("setSelectionBehavior", "(QAbstractItemView::SelectionBehavior)", "$")]
			set { ((QAbstractItemView) interceptor).selectionBehavior = value; }
		}
		[Q_PROPERTY("QSize", "iconSize")]
		public QSize IconSize {
			[SmokeMethod("iconSize", "()", "")]
			get { return ((QAbstractItemView) interceptor).IconSize; }
			[SmokeMethod("setIconSize", "(QSize)", "#")]
			set { ((QAbstractItemView) interceptor).IconSize = value; }
		}
		[Q_PROPERTY("Qt::TextElideMode", "textElideMode")]
		public Qt.TextElideMode TextElideMode {
			[SmokeMethod("textElideMode", "()", "")]
			get { return ((QAbstractItemView) interceptor).TextElideMode; }
			[SmokeMethod("setTextElideMode", "(Qt::TextElideMode)", "$")]
			set { ((QAbstractItemView) interceptor).TextElideMode = value; }
		}
		[Q_PROPERTY("QAbstractItemView::ScrollMode", "verticalScrollMode")]
		public QAbstractItemView.ScrollMode VerticalScrollMode {
			[SmokeMethod("verticalScrollMode", "()", "")]
			get { return ((QAbstractItemView) interceptor).VerticalScrollMode; }
			[SmokeMethod("setVerticalScrollMode", "(QAbstractItemView::ScrollMode)", "$")]
			set { ((QAbstractItemView) interceptor).VerticalScrollMode = value; }
		}
		[Q_PROPERTY("QAbstractItemView::ScrollMode", "horizontalScrollMode")]
		public QAbstractItemView.ScrollMode HorizontalScrollMode {
			[SmokeMethod("horizontalScrollMode", "()", "")]
			get { return ((QAbstractItemView) interceptor).HorizontalScrollMode; }
			[SmokeMethod("setHorizontalScrollMode", "(QAbstractItemView::ScrollMode)", "$")]
			set { ((QAbstractItemView) interceptor).HorizontalScrollMode = value; }
		}
		public QAbstractItemView(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQAbstractItemView(parent);
		}
		[SmokeMethod("QAbstractItemView", "(QWidget*)", "#")]
		private void NewQAbstractItemView(QWidget parent) {
			((QAbstractItemView) interceptor).NewQAbstractItemView(parent);
		}
		public QAbstractItemView() : this((Type) null) {
			CreateProxy();
			NewQAbstractItemView();
		}
		[SmokeMethod("QAbstractItemView", "()", "")]
		private void NewQAbstractItemView() {
			((QAbstractItemView) interceptor).NewQAbstractItemView();
		}
		[SmokeMethod("setModel", "(QAbstractItemModel*)", "#")]
		public virtual void SetModel(QAbstractItemModel model) {
			((QAbstractItemView) interceptor).SetModel(model);
		}
		[SmokeMethod("model", "() const", "")]
		public QAbstractItemModel Model() {
			return ((QAbstractItemView) interceptor).Model();
		}
		[SmokeMethod("setSelectionModel", "(QItemSelectionModel*)", "#")]
		public virtual void SetSelectionModel(QItemSelectionModel selectionModel) {
			((QAbstractItemView) interceptor).SetSelectionModel(selectionModel);
		}
		[SmokeMethod("selectionModel", "() const", "")]
		public QItemSelectionModel SelectionModel() {
			return ((QAbstractItemView) interceptor).SelectionModel();
		}
		[SmokeMethod("setItemDelegate", "(QAbstractItemDelegate*)", "#")]
		public void SetItemDelegate(QAbstractItemDelegate arg1) {
			((QAbstractItemView) interceptor).SetItemDelegate(arg1);
		}
		[SmokeMethod("itemDelegate", "() const", "")]
		public QAbstractItemDelegate ItemDelegate() {
			return ((QAbstractItemView) interceptor).ItemDelegate();
		}
		[SmokeMethod("currentIndex", "() const", "")]
		public QModelIndex CurrentIndex() {
			return ((QAbstractItemView) interceptor).CurrentIndex();
		}
		[SmokeMethod("rootIndex", "() const", "")]
		public QModelIndex RootIndex() {
			return ((QAbstractItemView) interceptor).RootIndex();
		}
		[SmokeMethod("hasAutoScroll", "() const", "")]
		public bool HasAutoScroll() {
			return ((QAbstractItemView) interceptor).HasAutoScroll();
		}
		[SmokeMethod("setDropIndicatorShown", "(bool)", "$")]
		public void SetDropIndicatorShown(bool enable) {
			((QAbstractItemView) interceptor).SetDropIndicatorShown(enable);
		}
		[SmokeMethod("keyboardSearch", "(const QString&)", "$")]
		public virtual void KeyboardSearch(string search) {
			((QAbstractItemView) interceptor).KeyboardSearch(search);
		}
		[SmokeMethod("visualRect", "(const QModelIndex&) const", "#")]
		public abstract QRect VisualRect(QModelIndex index);
		[SmokeMethod("scrollTo", "(const QModelIndex&, QAbstractItemView::ScrollHint)", "#$")]
		public abstract void ScrollTo(QModelIndex index, QAbstractItemView.ScrollHint hint);
		[SmokeMethod("indexAt", "(const QPoint&) const", "#")]
		public abstract QModelIndex IndexAt(QPoint point);
		[SmokeMethod("sizeHintForIndex", "(const QModelIndex&) const", "#")]
		public QSize SizeHintForIndex(QModelIndex index) {
			return ((QAbstractItemView) interceptor).SizeHintForIndex(index);
		}
		[SmokeMethod("sizeHintForRow", "(int) const", "$")]
		public virtual int SizeHintForRow(int row) {
			return ((QAbstractItemView) interceptor).SizeHintForRow(row);
		}
		[SmokeMethod("sizeHintForColumn", "(int) const", "$")]
		public virtual int SizeHintForColumn(int column) {
			return ((QAbstractItemView) interceptor).SizeHintForColumn(column);
		}
		[SmokeMethod("openPersistentEditor", "(const QModelIndex&)", "#")]
		public void OpenPersistentEditor(QModelIndex index) {
			((QAbstractItemView) interceptor).OpenPersistentEditor(index);
		}
		[SmokeMethod("closePersistentEditor", "(const QModelIndex&)", "#")]
		public void ClosePersistentEditor(QModelIndex index) {
			((QAbstractItemView) interceptor).ClosePersistentEditor(index);
		}
		[SmokeMethod("setIndexWidget", "(const QModelIndex&, QWidget*)", "##")]
		public void SetIndexWidget(QModelIndex index, QWidget widget) {
			((QAbstractItemView) interceptor).SetIndexWidget(index,widget);
		}
		[SmokeMethod("indexWidget", "(const QModelIndex&) const", "#")]
		public QWidget IndexWidget(QModelIndex index) {
			return ((QAbstractItemView) interceptor).IndexWidget(index);
		}
		[SmokeMethod("setItemDelegateForRow", "(int, QAbstractItemDelegate*)", "$#")]
		public void SetItemDelegateForRow(int row, QAbstractItemDelegate arg2) {
			((QAbstractItemView) interceptor).SetItemDelegateForRow(row,arg2);
		}
		[SmokeMethod("itemDelegateForRow", "(int) const", "$")]
		public QAbstractItemDelegate ItemDelegateForRow(int row) {
			return ((QAbstractItemView) interceptor).ItemDelegateForRow(row);
		}
		[SmokeMethod("setItemDelegateForColumn", "(int, QAbstractItemDelegate*)", "$#")]
		public void SetItemDelegateForColumn(int column, QAbstractItemDelegate arg2) {
			((QAbstractItemView) interceptor).SetItemDelegateForColumn(column,arg2);
		}
		[SmokeMethod("itemDelegateForColumn", "(int) const", "$")]
		public QAbstractItemDelegate ItemDelegateForColumn(int column) {
			return ((QAbstractItemView) interceptor).ItemDelegateForColumn(column);
		}
		[SmokeMethod("itemDelegate", "(const QModelIndex&) const", "#")]
		public QAbstractItemDelegate ItemDelegate(QModelIndex index) {
			return ((QAbstractItemView) interceptor).ItemDelegate(index);
		}
		[SmokeMethod("inputMethodQuery", "(Qt::InputMethodQuery) const", "$")]
		public override QVariant InputMethodQuery(Qt.InputMethodQuery query) {
			return ((QAbstractItemView) interceptor).InputMethodQuery(query);
		}
		[Q_SLOT("void reset()")]
		[SmokeMethod("reset", "()", "")]
		public virtual void Reset() {
			((QAbstractItemView) interceptor).Reset();
		}
		[Q_SLOT("void setRootIndex(const QModelIndex&)")]
		[SmokeMethod("setRootIndex", "(const QModelIndex&)", "#")]
		public virtual void SetRootIndex(QModelIndex index) {
			((QAbstractItemView) interceptor).SetRootIndex(index);
		}
		[Q_SLOT("void doItemsLayout()")]
		[SmokeMethod("doItemsLayout", "()", "")]
		public virtual void DoItemsLayout() {
			((QAbstractItemView) interceptor).DoItemsLayout();
		}
		[Q_SLOT("void selectAll()")]
		[SmokeMethod("selectAll", "()", "")]
		public virtual void SelectAll() {
			((QAbstractItemView) interceptor).SelectAll();
		}
		[Q_SLOT("void edit(const QModelIndex&)")]
		[SmokeMethod("edit", "(const QModelIndex&)", "#")]
		public void Edit(QModelIndex index) {
			((QAbstractItemView) interceptor).Edit(index);
		}
		[Q_SLOT("void clearSelection()")]
		[SmokeMethod("clearSelection", "()", "")]
		public void ClearSelection() {
			((QAbstractItemView) interceptor).ClearSelection();
		}
		[Q_SLOT("void setCurrentIndex(const QModelIndex&)")]
		[SmokeMethod("setCurrentIndex", "(const QModelIndex&)", "#")]
		public void SetCurrentIndex(QModelIndex index) {
			((QAbstractItemView) interceptor).SetCurrentIndex(index);
		}
		[Q_SLOT("void scrollToTop()")]
		[SmokeMethod("scrollToTop", "()", "")]
		public void ScrollToTop() {
			((QAbstractItemView) interceptor).ScrollToTop();
		}
		[Q_SLOT("void scrollToBottom()")]
		[SmokeMethod("scrollToBottom", "()", "")]
		public void ScrollToBottom() {
			((QAbstractItemView) interceptor).ScrollToBottom();
		}
		[SmokeMethod("setHorizontalStepsPerItem", "(int)", "$")]
		protected void SetHorizontalStepsPerItem(int steps) {
			((QAbstractItemView) interceptor).SetHorizontalStepsPerItem(steps);
		}
		[SmokeMethod("horizontalStepsPerItem", "() const", "")]
		protected int HorizontalStepsPerItem() {
			return ((QAbstractItemView) interceptor).HorizontalStepsPerItem();
		}
		[SmokeMethod("setVerticalStepsPerItem", "(int)", "$")]
		protected void SetVerticalStepsPerItem(int steps) {
			((QAbstractItemView) interceptor).SetVerticalStepsPerItem(steps);
		}
		[SmokeMethod("verticalStepsPerItem", "() const", "")]
		protected int VerticalStepsPerItem() {
			return ((QAbstractItemView) interceptor).VerticalStepsPerItem();
		}
		[SmokeMethod("moveCursor", "(QAbstractItemView::CursorAction, Qt::KeyboardModifiers)", "$$")]
		protected abstract QModelIndex MoveCursor(QAbstractItemView.CursorAction cursorAction, int modifiers);
		[SmokeMethod("horizontalOffset", "() const", "")]
		protected abstract int HorizontalOffset();
		[SmokeMethod("verticalOffset", "() const", "")]
		protected abstract int VerticalOffset();
		[SmokeMethod("isIndexHidden", "(const QModelIndex&) const", "#")]
		protected abstract bool IsIndexHidden(QModelIndex index);
		[SmokeMethod("setSelection", "(const QRect&, QItemSelectionModel::SelectionFlags)", "#$")]
		protected abstract void SetSelection(QRect rect, int command);
		[SmokeMethod("visualRegionForSelection", "(const QItemSelection&) const", "#")]
		protected abstract QRegion VisualRegionForSelection(QItemSelection selection);
		[SmokeMethod("selectedIndexes", "() const", "")]
		protected virtual List<QModelIndex> SelectedIndexes() {
			return ((QAbstractItemView) interceptor).SelectedIndexes();
		}
		[SmokeMethod("edit", "(const QModelIndex&, QAbstractItemView::EditTrigger, QEvent*)", "#$#")]
		protected virtual bool Edit(QModelIndex index, QAbstractItemView.EditTrigger trigger, QEvent arg3) {
			return ((QAbstractItemView) interceptor).Edit(index,trigger,arg3);
		}
		[SmokeMethod("selectionCommand", "(const QModelIndex&, const QEvent*) const", "##")]
		protected virtual int SelectionCommand(QModelIndex index, QEvent arg2) {
			return ((QAbstractItemView) interceptor).SelectionCommand(index,arg2);
		}
		[SmokeMethod("selectionCommand", "(const QModelIndex&) const", "#")]
		protected virtual int SelectionCommand(QModelIndex index) {
			return ((QAbstractItemView) interceptor).SelectionCommand(index);
		}
		[SmokeMethod("startDrag", "(Qt::DropActions)", "$")]
		protected virtual void StartDrag(int supportedActions) {
			((QAbstractItemView) interceptor).StartDrag(supportedActions);
		}
		[SmokeMethod("viewOptions", "() const", "")]
		protected virtual QStyleOptionViewItem ViewOptions() {
			return ((QAbstractItemView) interceptor).ViewOptions();
		}
		[SmokeMethod("state", "() const", "")]
		protected QAbstractItemView.State state() {
			return ((QAbstractItemView) interceptor).state();
		}
		[SmokeMethod("setState", "(QAbstractItemView::State)", "$")]
		protected void SetState(QAbstractItemView.State state) {
			((QAbstractItemView) interceptor).SetState(state);
		}
		[SmokeMethod("scheduleDelayedItemsLayout", "()", "")]
		protected void ScheduleDelayedItemsLayout() {
			((QAbstractItemView) interceptor).ScheduleDelayedItemsLayout();
		}
		[SmokeMethod("executeDelayedItemsLayout", "()", "")]
		protected void ExecuteDelayedItemsLayout() {
			((QAbstractItemView) interceptor).ExecuteDelayedItemsLayout();
		}
		[SmokeMethod("setDirtyRegion", "(const QRegion&)", "#")]
		protected void SetDirtyRegion(QRegion region) {
			((QAbstractItemView) interceptor).SetDirtyRegion(region);
		}
		[SmokeMethod("scrollDirtyRegion", "(int, int)", "$$")]
		protected void ScrollDirtyRegion(int dx, int dy) {
			((QAbstractItemView) interceptor).ScrollDirtyRegion(dx,dy);
		}
		[SmokeMethod("dirtyRegionOffset", "() const", "")]
		protected QPoint DirtyRegionOffset() {
			return ((QAbstractItemView) interceptor).DirtyRegionOffset();
		}
		[SmokeMethod("startAutoScroll", "()", "")]
		protected void StartAutoScroll() {
			((QAbstractItemView) interceptor).StartAutoScroll();
		}
		[SmokeMethod("stopAutoScroll", "()", "")]
		protected void StopAutoScroll() {
			((QAbstractItemView) interceptor).StopAutoScroll();
		}
		[SmokeMethod("doAutoScroll", "()", "")]
		protected void DoAutoScroll() {
			((QAbstractItemView) interceptor).DoAutoScroll();
		}
		[SmokeMethod("focusNextPrevChild", "(bool)", "$")]
		protected override bool FocusNextPrevChild(bool next) {
			return ((QAbstractItemView) interceptor).FocusNextPrevChild(next);
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		protected override bool Event(QEvent arg1) {
			return ((QAbstractItemView) interceptor).Event(arg1);
		}
		[SmokeMethod("viewportEvent", "(QEvent*)", "#")]
		protected override bool ViewportEvent(QEvent arg1) {
			return ((QAbstractItemView) interceptor).ViewportEvent(arg1);
		}
		[SmokeMethod("mousePressEvent", "(QMouseEvent*)", "#")]
		protected override void MousePressEvent(QMouseEvent arg1) {
			((QAbstractItemView) interceptor).MousePressEvent(arg1);
		}
		[SmokeMethod("mouseMoveEvent", "(QMouseEvent*)", "#")]
		protected override void MouseMoveEvent(QMouseEvent arg1) {
			((QAbstractItemView) interceptor).MouseMoveEvent(arg1);
		}
		[SmokeMethod("mouseReleaseEvent", "(QMouseEvent*)", "#")]
		protected override void MouseReleaseEvent(QMouseEvent arg1) {
			((QAbstractItemView) interceptor).MouseReleaseEvent(arg1);
		}
		[SmokeMethod("mouseDoubleClickEvent", "(QMouseEvent*)", "#")]
		protected override void MouseDoubleClickEvent(QMouseEvent arg1) {
			((QAbstractItemView) interceptor).MouseDoubleClickEvent(arg1);
		}
		[SmokeMethod("dragEnterEvent", "(QDragEnterEvent*)", "#")]
		protected override void DragEnterEvent(QDragEnterEvent arg1) {
			((QAbstractItemView) interceptor).DragEnterEvent(arg1);
		}
		[SmokeMethod("dragMoveEvent", "(QDragMoveEvent*)", "#")]
		protected override void DragMoveEvent(QDragMoveEvent arg1) {
			((QAbstractItemView) interceptor).DragMoveEvent(arg1);
		}
		[SmokeMethod("dragLeaveEvent", "(QDragLeaveEvent*)", "#")]
		protected override void DragLeaveEvent(QDragLeaveEvent arg1) {
			((QAbstractItemView) interceptor).DragLeaveEvent(arg1);
		}
		[SmokeMethod("dropEvent", "(QDropEvent*)", "#")]
		protected override void DropEvent(QDropEvent arg1) {
			((QAbstractItemView) interceptor).DropEvent(arg1);
		}
		[SmokeMethod("focusInEvent", "(QFocusEvent*)", "#")]
		protected override void FocusInEvent(QFocusEvent arg1) {
			((QAbstractItemView) interceptor).FocusInEvent(arg1);
		}
		[SmokeMethod("focusOutEvent", "(QFocusEvent*)", "#")]
		protected override void FocusOutEvent(QFocusEvent arg1) {
			((QAbstractItemView) interceptor).FocusOutEvent(arg1);
		}
		[SmokeMethod("keyPressEvent", "(QKeyEvent*)", "#")]
		protected override void KeyPressEvent(QKeyEvent arg1) {
			((QAbstractItemView) interceptor).KeyPressEvent(arg1);
		}
		[SmokeMethod("resizeEvent", "(QResizeEvent*)", "#")]
		protected override void ResizeEvent(QResizeEvent arg1) {
			((QAbstractItemView) interceptor).ResizeEvent(arg1);
		}
		[SmokeMethod("timerEvent", "(QTimerEvent*)", "#")]
		protected override void TimerEvent(QTimerEvent arg1) {
			((QAbstractItemView) interceptor).TimerEvent(arg1);
		}
		[SmokeMethod("inputMethodEvent", "(QInputMethodEvent*)", "#")]
		protected override void InputMethodEvent(QInputMethodEvent arg1) {
			((QAbstractItemView) interceptor).InputMethodEvent(arg1);
		}
		[SmokeMethod("dropIndicatorPosition", "() const", "")]
		protected QAbstractItemView.DropIndicatorPosition dropIndicatorPosition() {
			return ((QAbstractItemView) interceptor).dropIndicatorPosition();
		}
		[Q_SLOT("void dataChanged(const QModelIndex&, const QModelIndex&)")]
		[SmokeMethod("dataChanged", "(const QModelIndex&, const QModelIndex&)", "##")]
		protected virtual void DataChanged(QModelIndex topLeft, QModelIndex bottomRight) {
			((QAbstractItemView) interceptor).DataChanged(topLeft,bottomRight);
		}
		[Q_SLOT("void rowsInserted(const QModelIndex&, int, int)")]
		[SmokeMethod("rowsInserted", "(const QModelIndex&, int, int)", "#$$")]
		protected virtual void RowsInserted(QModelIndex parent, int start, int end) {
			((QAbstractItemView) interceptor).RowsInserted(parent,start,end);
		}
		[Q_SLOT("void rowsAboutToBeRemoved(const QModelIndex&, int, int)")]
		[SmokeMethod("rowsAboutToBeRemoved", "(const QModelIndex&, int, int)", "#$$")]
		protected virtual void RowsAboutToBeRemoved(QModelIndex parent, int start, int end) {
			((QAbstractItemView) interceptor).RowsAboutToBeRemoved(parent,start,end);
		}
		[Q_SLOT("void selectionChanged(const QItemSelection&, const QItemSelection&)")]
		[SmokeMethod("selectionChanged", "(const QItemSelection&, const QItemSelection&)", "##")]
		protected virtual void SelectionChanged(QItemSelection selected, QItemSelection deselected) {
			((QAbstractItemView) interceptor).SelectionChanged(selected,deselected);
		}
		[Q_SLOT("void currentChanged(const QModelIndex&, const QModelIndex&)")]
		[SmokeMethod("currentChanged", "(const QModelIndex&, const QModelIndex&)", "##")]
		protected virtual void CurrentChanged(QModelIndex current, QModelIndex previous) {
			((QAbstractItemView) interceptor).CurrentChanged(current,previous);
		}
		[Q_SLOT("void updateEditorData()")]
		[SmokeMethod("updateEditorData", "()", "")]
		protected virtual void UpdateEditorData() {
			((QAbstractItemView) interceptor).UpdateEditorData();
		}
		[Q_SLOT("void updateEditorGeometries()")]
		[SmokeMethod("updateEditorGeometries", "()", "")]
		protected virtual void UpdateEditorGeometries() {
			((QAbstractItemView) interceptor).UpdateEditorGeometries();
		}
		[Q_SLOT("void updateGeometries()")]
		[SmokeMethod("updateGeometries", "()", "")]
		protected virtual void UpdateGeometries() {
			((QAbstractItemView) interceptor).UpdateGeometries();
		}
		[Q_SLOT("void verticalScrollbarAction(int)")]
		[SmokeMethod("verticalScrollbarAction", "(int)", "$")]
		protected virtual void VerticalScrollbarAction(int action) {
			((QAbstractItemView) interceptor).VerticalScrollbarAction(action);
		}
		[Q_SLOT("void horizontalScrollbarAction(int)")]
		[SmokeMethod("horizontalScrollbarAction", "(int)", "$")]
		protected virtual void HorizontalScrollbarAction(int action) {
			((QAbstractItemView) interceptor).HorizontalScrollbarAction(action);
		}
		[Q_SLOT("void verticalScrollbarValueChanged(int)")]
		[SmokeMethod("verticalScrollbarValueChanged", "(int)", "$")]
		protected virtual void VerticalScrollbarValueChanged(int value) {
			((QAbstractItemView) interceptor).VerticalScrollbarValueChanged(value);
		}
		[Q_SLOT("void horizontalScrollbarValueChanged(int)")]
		[SmokeMethod("horizontalScrollbarValueChanged", "(int)", "$")]
		protected virtual void HorizontalScrollbarValueChanged(int value) {
			((QAbstractItemView) interceptor).HorizontalScrollbarValueChanged(value);
		}
		[Q_SLOT("void closeEditor(QWidget*, QAbstractItemDelegate::EndEditHint)")]
		[SmokeMethod("closeEditor", "(QWidget*, QAbstractItemDelegate::EndEditHint)", "#$")]
		protected virtual void CloseEditor(QWidget editor, QAbstractItemDelegate.EndEditHint hint) {
			((QAbstractItemView) interceptor).CloseEditor(editor,hint);
		}
		[Q_SLOT("void commitData(QWidget*)")]
		[SmokeMethod("commitData", "(QWidget*)", "#")]
		protected virtual void CommitData(QWidget editor) {
			((QAbstractItemView) interceptor).CommitData(editor);
		}
		[Q_SLOT("void editorDestroyed(QObject*)")]
		[SmokeMethod("editorDestroyed", "(QObject*)", "#")]
		protected virtual void EditorDestroyed(QObject editor) {
			((QAbstractItemView) interceptor).EditorDestroyed(editor);
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQAbstractItemViewSignals Emit {
			get { return (IQAbstractItemViewSignals) Q_EMIT; }
		}
	}

	public interface IQAbstractItemViewSignals : IQAbstractScrollAreaSignals {
		[Q_SIGNAL("void pressed(const QModelIndex&)")]
		void Pressed(QModelIndex index);
		[Q_SIGNAL("void clicked(const QModelIndex&)")]
		void Clicked(QModelIndex index);
		[Q_SIGNAL("void doubleClicked(const QModelIndex&)")]
		void DoubleClicked(QModelIndex index);
		[Q_SIGNAL("void activated(const QModelIndex&)")]
		void Activated(QModelIndex index);
		[Q_SIGNAL("void entered(const QModelIndex&)")]
		void Entered(QModelIndex index);
		[Q_SIGNAL("void viewportEntered()")]
		void ViewportEntered();
	}
}
