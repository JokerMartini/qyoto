//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QClipboardEvent")]
	public class QClipboardEvent : QEvent, IDisposable {
 		protected QClipboardEvent(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QClipboardEvent), this);
			_interceptor = (QClipboardEvent) realProxy.GetTransparentProxy();
		}
		private QClipboardEvent ProxyQClipboardEvent() {
			return (QClipboardEvent) _interceptor;
		}
		// QClipboardEvent* QClipboardEvent(QEventPrivate* arg1); >>>> NOT CONVERTED
		// QEventPrivate* data(); >>>> NOT CONVERTED
		~QClipboardEvent() {
			DisposeQClipboardEvent();
		}
		public new void Dispose() {
			DisposeQClipboardEvent();
		}
		[SmokeMethod("~QClipboardEvent", "()", "")]
		private void DisposeQClipboardEvent() {
			ProxyQClipboardEvent().DisposeQClipboardEvent();
		}
	}
}
