//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QStyleOptionComplex")]
	public class QStyleOptionComplex : QStyleOption, IDisposable {
 		protected QStyleOptionComplex(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(QStyleOptionComplex), "QStyleOptionComplex", this);
		}
		public enum StyleOptionType {
			Type = QStyleOption.OptionType.SO_Complex,
		}
		public enum StyleOptionVersion {
			Version = 1,
		}
		public QStyleOptionComplex(int version, int type) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QStyleOptionComplex$$", "QStyleOptionComplex(int, int)", typeof(void), typeof(int), version, typeof(int), type);
		}
		public QStyleOptionComplex(int version) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QStyleOptionComplex$", "QStyleOptionComplex(int)", typeof(void), typeof(int), version);
		}
		public QStyleOptionComplex() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QStyleOptionComplex", "QStyleOptionComplex()", typeof(void));
		}
		public QStyleOptionComplex(QStyleOptionComplex other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QStyleOptionComplex#", "QStyleOptionComplex(const QStyleOptionComplex&)", typeof(void), typeof(QStyleOptionComplex), other);
		}
		~QStyleOptionComplex() {
			interceptor.Invoke("~QStyleOptionComplex", "~QStyleOptionComplex()", typeof(void));
		}
		public void Dispose() {
			interceptor.Invoke("~QStyleOptionComplex", "~QStyleOptionComplex()", typeof(void));
		}
	}
}
