//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QStyleOptionComplex")]
	public class QStyleOptionComplex : QStyleOption, IDisposable {
 		protected QStyleOptionComplex(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QStyleOptionComplex), this);
			interceptor = (QStyleOptionComplex) realProxy.GetTransparentProxy();
		}
		public enum StyleOptionType {
			Type = QStyleOption.OptionType.SO_Complex,
		}
		public enum StyleOptionVersion {
			Version = 1,
		}
		public QStyleOptionComplex(int version, int type) : this((Type) null) {
			CreateProxy();
			NewQStyleOptionComplex(version,type);
		}
		[SmokeMethod("QStyleOptionComplex", "(int, int)", "$$")]
		private void NewQStyleOptionComplex(int version, int type) {
			((QStyleOptionComplex) interceptor).NewQStyleOptionComplex(version,type);
		}
		public QStyleOptionComplex(int version) : this((Type) null) {
			CreateProxy();
			NewQStyleOptionComplex(version);
		}
		[SmokeMethod("QStyleOptionComplex", "(int)", "$")]
		private void NewQStyleOptionComplex(int version) {
			((QStyleOptionComplex) interceptor).NewQStyleOptionComplex(version);
		}
		public QStyleOptionComplex() : this((Type) null) {
			CreateProxy();
			NewQStyleOptionComplex();
		}
		[SmokeMethod("QStyleOptionComplex", "()", "")]
		private void NewQStyleOptionComplex() {
			((QStyleOptionComplex) interceptor).NewQStyleOptionComplex();
		}
		public QStyleOptionComplex(QStyleOptionComplex other) : this((Type) null) {
			CreateProxy();
			NewQStyleOptionComplex(other);
		}
		[SmokeMethod("QStyleOptionComplex", "(const QStyleOptionComplex&)", "#")]
		private void NewQStyleOptionComplex(QStyleOptionComplex other) {
			((QStyleOptionComplex) interceptor).NewQStyleOptionComplex(other);
		}
		~QStyleOptionComplex() {
			DisposeQStyleOptionComplex();
		}
		public void Dispose() {
			DisposeQStyleOptionComplex();
		}
		[SmokeMethod("~QStyleOptionComplex", "()", "")]
		private void DisposeQStyleOptionComplex() {
			((QStyleOptionComplex) interceptor).DisposeQStyleOptionComplex();
		}
	}
}
