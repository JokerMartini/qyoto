//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	/// See <see cref="IQTextEditSignals"></see> for signals emitted by QTextEdit
	[SmokeClass("QTextEdit")]
	public class QTextEdit : QAbstractScrollArea, IDisposable {
 		protected QTextEdit(Type dummy) : base((Type) null) {}
		[SmokeClass("QTextEdit")]
		interface IQTextEditProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTextEdit), this);
			interceptor = (QTextEdit) realProxy.GetTransparentProxy();
		}
		private static IQTextEditProxy staticInterceptor = null;
		static QTextEdit() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQTextEditProxy), null);
			staticInterceptor = (IQTextEditProxy) realProxy.GetTransparentProxy();
		}
		public enum LineWrapMode {
			NoWrap = 0,
			WidgetWidth = 1,
			FixedPixelWidth = 2,
			FixedColumnWidth = 3,
		}
		public enum AutoFormattingFlag : uint {
			AutoNone = 0,
			AutoBulletList = 0x00000001,
			AutoAll = 0xffffffff,
		}
		[Q_PROPERTY("AutoFormatting", "autoFormatting")]
		public int AutoFormatting {
			get { return Property("autoFormatting").Value<int>(); }
			set { SetProperty("autoFormatting", QVariant.FromValue<int>(value)); }
		}
		[Q_PROPERTY("bool", "tabChangesFocus")]
		public bool TabChangesFocus {
			get { return Property("tabChangesFocus").Value<bool>(); }
			set { SetProperty("tabChangesFocus", QVariant.FromValue<bool>(value)); }
		}
		[Q_PROPERTY("QString", "documentTitle")]
		public string DocumentTitle {
			get { return Property("documentTitle").Value<string>(); }
			set { SetProperty("documentTitle", QVariant.FromValue<string>(value)); }
		}
		[Q_PROPERTY("bool", "undoRedoEnabled")]
		public bool UndoRedoEnabled {
			get { return Property("undoRedoEnabled").Value<bool>(); }
			set { SetProperty("undoRedoEnabled", QVariant.FromValue<bool>(value)); }
		}
		[Q_PROPERTY("QTextEdit::LineWrapMode", "lineWrapMode")]
		public QTextEdit.LineWrapMode lineWrapMode {
			get { return Property("lineWrapMode").Value<QTextEdit.LineWrapMode>(); }
			set { SetProperty("lineWrapMode", QVariant.FromValue<QTextEdit.LineWrapMode>(value)); }
		}
		[Q_PROPERTY("int", "lineWrapColumnOrWidth")]
		public int LineWrapColumnOrWidth {
			get { return Property("lineWrapColumnOrWidth").Value<int>(); }
			set { SetProperty("lineWrapColumnOrWidth", QVariant.FromValue<int>(value)); }
		}
		[Q_PROPERTY("bool", "readOnly")]
		public bool ReadOnly {
			get { return Property("readOnly").Value<bool>(); }
			set { SetProperty("readOnly", QVariant.FromValue<bool>(value)); }
		}
		[Q_PROPERTY("QString", "html")]
		public string Html {
			get { return Property("html").Value<string>(); }
			set { SetProperty("html", QVariant.FromValue<string>(value)); }
		}
		[Q_PROPERTY("bool", "overwriteMode")]
		public bool OverwriteMode {
			get { return Property("overwriteMode").Value<bool>(); }
			set { SetProperty("overwriteMode", QVariant.FromValue<bool>(value)); }
		}
		[Q_PROPERTY("int", "tabStopWidth")]
		public int TabStopWidth {
			get { return Property("tabStopWidth").Value<int>(); }
			set { SetProperty("tabStopWidth", QVariant.FromValue<int>(value)); }
		}
		[Q_PROPERTY("bool", "acceptRichText")]
		public bool AcceptRichText {
			get { return Property("acceptRichText").Value<bool>(); }
			set { SetProperty("acceptRichText", QVariant.FromValue<bool>(value)); }
		}
		[Q_PROPERTY("int", "cursorWidth")]
		public int CursorWidth {
			get { return Property("cursorWidth").Value<int>(); }
			set { SetProperty("cursorWidth", QVariant.FromValue<int>(value)); }
		}
		[Q_PROPERTY("Qt::TextInteractionFlags", "textInteractionFlags")]
		public int TextInteractionFlags {
			get { return Property("textInteractionFlags").Value<int>(); }
			set { SetProperty("textInteractionFlags", QVariant.FromValue<int>(value)); }
		}
		// void setExtraSelections(const QList<QTextEdit::ExtraSelection>& arg1); >>>> NOT CONVERTED
		// QList<QTextEdit::ExtraSelection> extraSelections(); >>>> NOT CONVERTED
		public QTextEdit(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQTextEdit(parent);
		}
		[SmokeMethod("QTextEdit", "(QWidget*)", "#")]
		private void NewQTextEdit(QWidget parent) {
			((QTextEdit) interceptor).NewQTextEdit(parent);
		}
		public QTextEdit() : this((Type) null) {
			CreateProxy();
			NewQTextEdit();
		}
		[SmokeMethod("QTextEdit", "()", "")]
		private void NewQTextEdit() {
			((QTextEdit) interceptor).NewQTextEdit();
		}
		public QTextEdit(string text, QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQTextEdit(text,parent);
		}
		[SmokeMethod("QTextEdit", "(const QString&, QWidget*)", "$#")]
		private void NewQTextEdit(string text, QWidget parent) {
			((QTextEdit) interceptor).NewQTextEdit(text,parent);
		}
		public QTextEdit(string text) : this((Type) null) {
			CreateProxy();
			NewQTextEdit(text);
		}
		[SmokeMethod("QTextEdit", "(const QString&)", "$")]
		private void NewQTextEdit(string text) {
			((QTextEdit) interceptor).NewQTextEdit(text);
		}
		[SmokeMethod("setDocument", "(QTextDocument*)", "#")]
		public void SetDocument(QTextDocument document) {
			((QTextEdit) interceptor).SetDocument(document);
		}
		[SmokeMethod("document", "() const", "")]
		public QTextDocument Document() {
			return ((QTextEdit) interceptor).Document();
		}
		[SmokeMethod("setTextCursor", "(const QTextCursor&)", "#")]
		public void SetTextCursor(QTextCursor cursor) {
			((QTextEdit) interceptor).SetTextCursor(cursor);
		}
		[SmokeMethod("textCursor", "() const", "")]
		public QTextCursor TextCursor() {
			return ((QTextEdit) interceptor).TextCursor();
		}
		[SmokeMethod("isReadOnly", "() const", "")]
		public bool IsReadOnly() {
			return ((QTextEdit) interceptor).IsReadOnly();
		}
		[SmokeMethod("fontPointSize", "() const", "")]
		public double FontPointSize() {
			return ((QTextEdit) interceptor).FontPointSize();
		}
		[SmokeMethod("fontFamily", "() const", "")]
		public string FontFamily() {
			return ((QTextEdit) interceptor).FontFamily();
		}
		[SmokeMethod("fontWeight", "() const", "")]
		public int FontWeight() {
			return ((QTextEdit) interceptor).FontWeight();
		}
		[SmokeMethod("fontUnderline", "() const", "")]
		public bool FontUnderline() {
			return ((QTextEdit) interceptor).FontUnderline();
		}
		[SmokeMethod("fontItalic", "() const", "")]
		public bool FontItalic() {
			return ((QTextEdit) interceptor).FontItalic();
		}
		[SmokeMethod("textColor", "() const", "")]
		public QColor TextColor() {
			return ((QTextEdit) interceptor).TextColor();
		}
		[SmokeMethod("currentFont", "() const", "")]
		public QFont CurrentFont() {
			return ((QTextEdit) interceptor).CurrentFont();
		}
		[SmokeMethod("alignment", "() const", "")]
		public int Alignment() {
			return ((QTextEdit) interceptor).Alignment();
		}
		[SmokeMethod("mergeCurrentCharFormat", "(const QTextCharFormat&)", "#")]
		public void MergeCurrentCharFormat(QTextCharFormat modifier) {
			((QTextEdit) interceptor).MergeCurrentCharFormat(modifier);
		}
		[SmokeMethod("setCurrentCharFormat", "(const QTextCharFormat&)", "#")]
		public void SetCurrentCharFormat(QTextCharFormat format) {
			((QTextEdit) interceptor).SetCurrentCharFormat(format);
		}
		[SmokeMethod("currentCharFormat", "() const", "")]
		public QTextCharFormat CurrentCharFormat() {
			return ((QTextEdit) interceptor).CurrentCharFormat();
		}
		[SmokeMethod("isUndoRedoEnabled", "() const", "")]
		public bool IsUndoRedoEnabled() {
			return ((QTextEdit) interceptor).IsUndoRedoEnabled();
		}
		[SmokeMethod("wordWrapMode", "() const", "")]
		public QTextOption.WrapMode WordWrapMode() {
			return ((QTextEdit) interceptor).WordWrapMode();
		}
		[SmokeMethod("setWordWrapMode", "(QTextOption::WrapMode)", "$")]
		public void SetWordWrapMode(QTextOption.WrapMode policy) {
			((QTextEdit) interceptor).SetWordWrapMode(policy);
		}
		[SmokeMethod("find", "(const QString&, QTextDocument::FindFlags)", "$$")]
		public bool Find(string exp, int options) {
			return ((QTextEdit) interceptor).Find(exp,options);
		}
		[SmokeMethod("find", "(const QString&)", "$")]
		public bool Find(string exp) {
			return ((QTextEdit) interceptor).Find(exp);
		}
		[SmokeMethod("toPlainText", "() const", "")]
		public string ToPlainText() {
			return ((QTextEdit) interceptor).ToPlainText();
		}
		[SmokeMethod("toHtml", "() const", "")]
		public string ToHtml() {
			return ((QTextEdit) interceptor).ToHtml();
		}
		[SmokeMethod("ensureCursorVisible", "()", "")]
		public void EnsureCursorVisible() {
			((QTextEdit) interceptor).EnsureCursorVisible();
		}
		[SmokeMethod("loadResource", "(int, const QUrl&)", "$#")]
		public virtual QVariant LoadResource(int type, IQUrl name) {
			return ((QTextEdit) interceptor).LoadResource(type,name);
		}
		[SmokeMethod("createStandardContextMenu", "()", "")]
		public QMenu CreateStandardContextMenu() {
			return ((QTextEdit) interceptor).CreateStandardContextMenu();
		}
		[SmokeMethod("cursorForPosition", "(const QPoint&) const", "#")]
		public QTextCursor CursorForPosition(QPoint pos) {
			return ((QTextEdit) interceptor).CursorForPosition(pos);
		}
		[SmokeMethod("cursorRect", "(const QTextCursor&) const", "#")]
		public QRect CursorRect(QTextCursor cursor) {
			return ((QTextEdit) interceptor).CursorRect(cursor);
		}
		[SmokeMethod("cursorRect", "() const", "")]
		public QRect CursorRect() {
			return ((QTextEdit) interceptor).CursorRect();
		}
		[SmokeMethod("anchorAt", "(const QPoint&) const", "#")]
		public string AnchorAt(QPoint pos) {
			return ((QTextEdit) interceptor).AnchorAt(pos);
		}
		[SmokeMethod("moveCursor", "(QTextCursor::MoveOperation, QTextCursor::MoveMode)", "$$")]
		public void MoveCursor(QTextCursor.MoveOperation operation, QTextCursor.MoveMode mode) {
			((QTextEdit) interceptor).MoveCursor(operation,mode);
		}
		[SmokeMethod("moveCursor", "(QTextCursor::MoveOperation)", "$")]
		public void MoveCursor(QTextCursor.MoveOperation operation) {
			((QTextEdit) interceptor).MoveCursor(operation);
		}
		[SmokeMethod("canPaste", "() const", "")]
		public bool CanPaste() {
			return ((QTextEdit) interceptor).CanPaste();
		}
		[Q_SLOT("void setFontPointSize(qreal)")]
		[SmokeMethod("setFontPointSize", "(qreal)", "$")]
		public void SetFontPointSize(double s) {
			((QTextEdit) interceptor).SetFontPointSize(s);
		}
		[Q_SLOT("void setFontFamily(const QString&)")]
		[SmokeMethod("setFontFamily", "(const QString&)", "$")]
		public void SetFontFamily(string fontFamily) {
			((QTextEdit) interceptor).SetFontFamily(fontFamily);
		}
		[Q_SLOT("void setFontWeight(int)")]
		[SmokeMethod("setFontWeight", "(int)", "$")]
		public void SetFontWeight(int w) {
			((QTextEdit) interceptor).SetFontWeight(w);
		}
		[Q_SLOT("void setFontUnderline(bool)")]
		[SmokeMethod("setFontUnderline", "(bool)", "$")]
		public void SetFontUnderline(bool b) {
			((QTextEdit) interceptor).SetFontUnderline(b);
		}
		[Q_SLOT("void setFontItalic(bool)")]
		[SmokeMethod("setFontItalic", "(bool)", "$")]
		public void SetFontItalic(bool b) {
			((QTextEdit) interceptor).SetFontItalic(b);
		}
		[Q_SLOT("void setTextColor(const QColor&)")]
		[SmokeMethod("setTextColor", "(const QColor&)", "#")]
		public void SetTextColor(QColor c) {
			((QTextEdit) interceptor).SetTextColor(c);
		}
		[Q_SLOT("void setCurrentFont(const QFont&)")]
		[SmokeMethod("setCurrentFont", "(const QFont&)", "#")]
		public void SetCurrentFont(QFont f) {
			((QTextEdit) interceptor).SetCurrentFont(f);
		}
		[Q_SLOT("void setAlignment(Qt::Alignment)")]
		[SmokeMethod("setAlignment", "(Qt::Alignment)", "$")]
		public void SetAlignment(int a) {
			((QTextEdit) interceptor).SetAlignment(a);
		}
		[Q_SLOT("void setPlainText(const QString&)")]
		[SmokeMethod("setPlainText", "(const QString&)", "$")]
		public void SetPlainText(string text) {
			((QTextEdit) interceptor).SetPlainText(text);
		}
		[Q_SLOT("void setText(const QString&)")]
		[SmokeMethod("setText", "(const QString&)", "$")]
		public void SetText(string text) {
			((QTextEdit) interceptor).SetText(text);
		}
		[Q_SLOT("void cut()")]
		[SmokeMethod("cut", "()", "")]
		public void Cut() {
			((QTextEdit) interceptor).Cut();
		}
		[Q_SLOT("void copy()")]
		[SmokeMethod("copy", "()", "")]
		public void Copy() {
			((QTextEdit) interceptor).Copy();
		}
		[Q_SLOT("void paste()")]
		[SmokeMethod("paste", "()", "")]
		public void Paste() {
			((QTextEdit) interceptor).Paste();
		}
		[Q_SLOT("void undo()")]
		[SmokeMethod("undo", "()", "")]
		public void Undo() {
			((QTextEdit) interceptor).Undo();
		}
		[Q_SLOT("void redo()")]
		[SmokeMethod("redo", "()", "")]
		public void Redo() {
			((QTextEdit) interceptor).Redo();
		}
		[Q_SLOT("void clear()")]
		[SmokeMethod("clear", "()", "")]
		public void Clear() {
			((QTextEdit) interceptor).Clear();
		}
		[Q_SLOT("void selectAll()")]
		[SmokeMethod("selectAll", "()", "")]
		public void SelectAll() {
			((QTextEdit) interceptor).SelectAll();
		}
		[Q_SLOT("void insertPlainText(const QString&)")]
		[SmokeMethod("insertPlainText", "(const QString&)", "$")]
		public void InsertPlainText(string text) {
			((QTextEdit) interceptor).InsertPlainText(text);
		}
		[Q_SLOT("void insertHtml(const QString&)")]
		[SmokeMethod("insertHtml", "(const QString&)", "$")]
		public void InsertHtml(string text) {
			((QTextEdit) interceptor).InsertHtml(text);
		}
		[Q_SLOT("void append(const QString&)")]
		[SmokeMethod("append", "(const QString&)", "$")]
		public void Append(string text) {
			((QTextEdit) interceptor).Append(text);
		}
		[Q_SLOT("void scrollToAnchor(const QString&)")]
		[SmokeMethod("scrollToAnchor", "(const QString&)", "$")]
		public void ScrollToAnchor(string name) {
			((QTextEdit) interceptor).ScrollToAnchor(name);
		}
		[Q_SLOT("void zoomIn(int)")]
		[SmokeMethod("zoomIn", "(int)", "$")]
		public void ZoomIn(int range) {
			((QTextEdit) interceptor).ZoomIn(range);
		}
		[Q_SLOT("void zoomIn()")]
		[SmokeMethod("zoomIn", "()", "")]
		public void ZoomIn() {
			((QTextEdit) interceptor).ZoomIn();
		}
		[Q_SLOT("void zoomOut(int)")]
		[SmokeMethod("zoomOut", "(int)", "$")]
		public void ZoomOut(int range) {
			((QTextEdit) interceptor).ZoomOut(range);
		}
		[Q_SLOT("void zoomOut()")]
		[SmokeMethod("zoomOut", "()", "")]
		public void ZoomOut() {
			((QTextEdit) interceptor).ZoomOut();
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		protected override bool Event(QEvent e) {
			return ((QTextEdit) interceptor).Event(e);
		}
		[SmokeMethod("timerEvent", "(QTimerEvent*)", "#")]
		protected override void TimerEvent(QTimerEvent e) {
			((QTextEdit) interceptor).TimerEvent(e);
		}
		[SmokeMethod("keyPressEvent", "(QKeyEvent*)", "#")]
		protected override void KeyPressEvent(QKeyEvent e) {
			((QTextEdit) interceptor).KeyPressEvent(e);
		}
		[SmokeMethod("keyReleaseEvent", "(QKeyEvent*)", "#")]
		protected override void KeyReleaseEvent(QKeyEvent e) {
			((QTextEdit) interceptor).KeyReleaseEvent(e);
		}
		[SmokeMethod("resizeEvent", "(QResizeEvent*)", "#")]
		protected override void ResizeEvent(QResizeEvent e) {
			((QTextEdit) interceptor).ResizeEvent(e);
		}
		[SmokeMethod("paintEvent", "(QPaintEvent*)", "#")]
		protected override void PaintEvent(QPaintEvent e) {
			((QTextEdit) interceptor).PaintEvent(e);
		}
		[SmokeMethod("mousePressEvent", "(QMouseEvent*)", "#")]
		protected override void MousePressEvent(QMouseEvent e) {
			((QTextEdit) interceptor).MousePressEvent(e);
		}
		[SmokeMethod("mouseMoveEvent", "(QMouseEvent*)", "#")]
		protected override void MouseMoveEvent(QMouseEvent e) {
			((QTextEdit) interceptor).MouseMoveEvent(e);
		}
		[SmokeMethod("mouseReleaseEvent", "(QMouseEvent*)", "#")]
		protected override void MouseReleaseEvent(QMouseEvent e) {
			((QTextEdit) interceptor).MouseReleaseEvent(e);
		}
		[SmokeMethod("mouseDoubleClickEvent", "(QMouseEvent*)", "#")]
		protected override void MouseDoubleClickEvent(QMouseEvent e) {
			((QTextEdit) interceptor).MouseDoubleClickEvent(e);
		}
		[SmokeMethod("focusNextPrevChild", "(bool)", "$")]
		protected override bool FocusNextPrevChild(bool next) {
			return ((QTextEdit) interceptor).FocusNextPrevChild(next);
		}
		[SmokeMethod("contextMenuEvent", "(QContextMenuEvent*)", "#")]
		protected override void ContextMenuEvent(QContextMenuEvent e) {
			((QTextEdit) interceptor).ContextMenuEvent(e);
		}
		[SmokeMethod("dragEnterEvent", "(QDragEnterEvent*)", "#")]
		protected override void DragEnterEvent(QDragEnterEvent e) {
			((QTextEdit) interceptor).DragEnterEvent(e);
		}
		[SmokeMethod("dragLeaveEvent", "(QDragLeaveEvent*)", "#")]
		protected override void DragLeaveEvent(QDragLeaveEvent e) {
			((QTextEdit) interceptor).DragLeaveEvent(e);
		}
		[SmokeMethod("dragMoveEvent", "(QDragMoveEvent*)", "#")]
		protected override void DragMoveEvent(QDragMoveEvent e) {
			((QTextEdit) interceptor).DragMoveEvent(e);
		}
		[SmokeMethod("dropEvent", "(QDropEvent*)", "#")]
		protected override void DropEvent(QDropEvent e) {
			((QTextEdit) interceptor).DropEvent(e);
		}
		[SmokeMethod("focusInEvent", "(QFocusEvent*)", "#")]
		protected override void FocusInEvent(QFocusEvent e) {
			((QTextEdit) interceptor).FocusInEvent(e);
		}
		[SmokeMethod("focusOutEvent", "(QFocusEvent*)", "#")]
		protected override void FocusOutEvent(QFocusEvent e) {
			((QTextEdit) interceptor).FocusOutEvent(e);
		}
		[SmokeMethod("showEvent", "(QShowEvent*)", "#")]
		protected override void ShowEvent(QShowEvent arg1) {
			((QTextEdit) interceptor).ShowEvent(arg1);
		}
		[SmokeMethod("changeEvent", "(QEvent*)", "#")]
		protected override void ChangeEvent(QEvent e) {
			((QTextEdit) interceptor).ChangeEvent(e);
		}
		[SmokeMethod("wheelEvent", "(QWheelEvent*)", "#")]
		protected override void WheelEvent(QWheelEvent e) {
			((QTextEdit) interceptor).WheelEvent(e);
		}
		[SmokeMethod("createMimeDataFromSelection", "() const", "")]
		protected virtual QMimeData CreateMimeDataFromSelection() {
			return ((QTextEdit) interceptor).CreateMimeDataFromSelection();
		}
		[SmokeMethod("canInsertFromMimeData", "(const QMimeData*) const", "#")]
		protected virtual bool CanInsertFromMimeData(QMimeData source) {
			return ((QTextEdit) interceptor).CanInsertFromMimeData(source);
		}
		[SmokeMethod("insertFromMimeData", "(const QMimeData*)", "#")]
		protected virtual void InsertFromMimeData(QMimeData source) {
			((QTextEdit) interceptor).InsertFromMimeData(source);
		}
		[SmokeMethod("inputMethodEvent", "(QInputMethodEvent*)", "#")]
		protected override void InputMethodEvent(QInputMethodEvent arg1) {
			((QTextEdit) interceptor).InputMethodEvent(arg1);
		}
		[SmokeMethod("inputMethodQuery", "(Qt::InputMethodQuery) const", "$")]
		protected new virtual QVariant InputMethodQuery(Qt.InputMethodQuery property) {
			return ((QTextEdit) interceptor).InputMethodQuery(property);
		}
		[SmokeMethod("scrollContentsBy", "(int, int)", "$$")]
		protected override void ScrollContentsBy(int dx, int dy) {
			((QTextEdit) interceptor).ScrollContentsBy(dx,dy);
		}
		~QTextEdit() {
			DisposeQTextEdit();
		}
		public new void Dispose() {
			DisposeQTextEdit();
		}
		[SmokeMethod("~QTextEdit", "()", "")]
		private void DisposeQTextEdit() {
			((QTextEdit) interceptor).DisposeQTextEdit();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQTextEditSignals Emit {
			get { return (IQTextEditSignals) Q_EMIT; }
		}
	}

	public interface IQTextEditSignals : IQAbstractScrollAreaSignals {
		[Q_SIGNAL("void textChanged()")]
		void TextChanged();
		[Q_SIGNAL("void undoAvailable(bool)")]
		void UndoAvailable(bool b);
		[Q_SIGNAL("void redoAvailable(bool)")]
		void RedoAvailable(bool b);
		[Q_SIGNAL("void currentCharFormatChanged(const QTextCharFormat&)")]
		void CurrentCharFormatChanged(QTextCharFormat format);
		[Q_SIGNAL("void copyAvailable(bool)")]
		void CopyAvailable(bool b);
		[Q_SIGNAL("void selectionChanged()")]
		void SelectionChanged();
		[Q_SIGNAL("void cursorPositionChanged()")]
		void CursorPositionChanged();
	}
}
