//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	/// See <see cref="IQDataWidgetMapperSignals"></see> for signals emitted by QDataWidgetMapper
	[SmokeClass("QDataWidgetMapper")]
	public class QDataWidgetMapper : QObject, IDisposable {
 		protected QDataWidgetMapper(Type dummy) : base((Type) null) {}
		[SmokeClass("QDataWidgetMapper")]
		interface IQDataWidgetMapperProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDataWidgetMapper), this);
			interceptor = (QDataWidgetMapper) realProxy.GetTransparentProxy();
		}
		private static IQDataWidgetMapperProxy staticInterceptor = null;
		static QDataWidgetMapper() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDataWidgetMapperProxy), null);
			staticInterceptor = (IQDataWidgetMapperProxy) realProxy.GetTransparentProxy();
		}
		public enum SubmitPolicy {
			AutoSubmit = 0,
			ManualSubmit = 1,
		}
		[Q_PROPERTY("int", "currentIndex")]
		public int CurrentIndex {
			get { return Property("currentIndex").Value<int>(); }
			set { SetProperty("currentIndex", QVariant.FromValue<int>(value)); }
		}
		[Q_PROPERTY("Qt::Orientation", "orientation")]
		public Qt.Orientation Orientation {
			get { return Property("orientation").Value<Qt.Orientation>(); }
			set { SetProperty("orientation", QVariant.FromValue<Qt.Orientation>(value)); }
		}
		[Q_PROPERTY("QDataWidgetMapper::SubmitPolicy", "submitPolicy")]
		public QDataWidgetMapper.SubmitPolicy submitPolicy {
			get { return Property("submitPolicy").Value<QDataWidgetMapper.SubmitPolicy>(); }
			set { SetProperty("submitPolicy", QVariant.FromValue<QDataWidgetMapper.SubmitPolicy>(value)); }
		}
		public QDataWidgetMapper(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQDataWidgetMapper(parent);
		}
		[SmokeMethod("QDataWidgetMapper", "(QObject*)", "#")]
		private void NewQDataWidgetMapper(QObject parent) {
			((QDataWidgetMapper) interceptor).NewQDataWidgetMapper(parent);
		}
		public QDataWidgetMapper() : this((Type) null) {
			CreateProxy();
			NewQDataWidgetMapper();
		}
		[SmokeMethod("QDataWidgetMapper", "()", "")]
		private void NewQDataWidgetMapper() {
			((QDataWidgetMapper) interceptor).NewQDataWidgetMapper();
		}
		[SmokeMethod("setModel", "(QAbstractItemModel*)", "#")]
		public void SetModel(QAbstractItemModel model) {
			((QDataWidgetMapper) interceptor).SetModel(model);
		}
		[SmokeMethod("model", "() const", "")]
		public QAbstractItemModel Model() {
			return ((QDataWidgetMapper) interceptor).Model();
		}
		[SmokeMethod("setItemDelegate", "(QAbstractItemDelegate*)", "#")]
		public void SetItemDelegate(QAbstractItemDelegate arg1) {
			((QDataWidgetMapper) interceptor).SetItemDelegate(arg1);
		}
		[SmokeMethod("itemDelegate", "() const", "")]
		public QAbstractItemDelegate ItemDelegate() {
			return ((QDataWidgetMapper) interceptor).ItemDelegate();
		}
		[SmokeMethod("setRootIndex", "(const QModelIndex&)", "#")]
		public void SetRootIndex(QModelIndex index) {
			((QDataWidgetMapper) interceptor).SetRootIndex(index);
		}
		[SmokeMethod("rootIndex", "() const", "")]
		public QModelIndex RootIndex() {
			return ((QDataWidgetMapper) interceptor).RootIndex();
		}
		[SmokeMethod("addMapping", "(QWidget*, int)", "#$")]
		public void AddMapping(QWidget widget, int section) {
			((QDataWidgetMapper) interceptor).AddMapping(widget,section);
		}
		[SmokeMethod("removeMapping", "(QWidget*)", "#")]
		public void RemoveMapping(QWidget widget) {
			((QDataWidgetMapper) interceptor).RemoveMapping(widget);
		}
		[SmokeMethod("mappedSection", "(QWidget*) const", "#")]
		public int MappedSection(QWidget widget) {
			return ((QDataWidgetMapper) interceptor).MappedSection(widget);
		}
		[SmokeMethod("mappedWidgetAt", "(int) const", "$")]
		public QWidget MappedWidgetAt(int section) {
			return ((QDataWidgetMapper) interceptor).MappedWidgetAt(section);
		}
		[SmokeMethod("clearMapping", "()", "")]
		public void ClearMapping() {
			((QDataWidgetMapper) interceptor).ClearMapping();
		}
		[Q_SLOT("void revert()")]
		[SmokeMethod("revert", "()", "")]
		public void Revert() {
			((QDataWidgetMapper) interceptor).Revert();
		}
		[Q_SLOT("bool submit()")]
		[SmokeMethod("submit", "()", "")]
		public bool Submit() {
			return ((QDataWidgetMapper) interceptor).Submit();
		}
		[Q_SLOT("void toFirst()")]
		[SmokeMethod("toFirst", "()", "")]
		public void ToFirst() {
			((QDataWidgetMapper) interceptor).ToFirst();
		}
		[Q_SLOT("void toLast()")]
		[SmokeMethod("toLast", "()", "")]
		public void ToLast() {
			((QDataWidgetMapper) interceptor).ToLast();
		}
		[Q_SLOT("void toNext()")]
		[SmokeMethod("toNext", "()", "")]
		public void ToNext() {
			((QDataWidgetMapper) interceptor).ToNext();
		}
		[Q_SLOT("void toPrevious()")]
		[SmokeMethod("toPrevious", "()", "")]
		public void ToPrevious() {
			((QDataWidgetMapper) interceptor).ToPrevious();
		}
		[Q_SLOT("void setCurrentModelIndex(const QModelIndex&)")]
		[SmokeMethod("setCurrentModelIndex", "(const QModelIndex&)", "#")]
		public void SetCurrentModelIndex(QModelIndex index) {
			((QDataWidgetMapper) interceptor).SetCurrentModelIndex(index);
		}
		~QDataWidgetMapper() {
			DisposeQDataWidgetMapper();
		}
		public new void Dispose() {
			DisposeQDataWidgetMapper();
		}
		[SmokeMethod("~QDataWidgetMapper", "()", "")]
		private void DisposeQDataWidgetMapper() {
			((QDataWidgetMapper) interceptor).DisposeQDataWidgetMapper();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQDataWidgetMapperSignals Emit {
			get { return (IQDataWidgetMapperSignals) Q_EMIT; }
		}
	}

	public interface IQDataWidgetMapperSignals : IQObjectSignals {
		[Q_SIGNAL("void currentIndexChanged(int)")]
		void CurrentIndexChanged(int index);
	}
}
