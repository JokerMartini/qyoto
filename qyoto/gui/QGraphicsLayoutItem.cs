//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	public interface IQGraphicsLayoutItem {
		void SetSizePolicy(QSizePolicy policy);
		void SetSizePolicy(QSizePolicy.Policy hPolicy, QSizePolicy.Policy vPolicy, QSizePolicy.ControlType controlType);
		QSizePolicy SizePolicy();
		void SetMinimumSize(QSizeF size);
		void SetMinimumSize(double w, double h);
		QSizeF MinimumSize();
		void SetPreferredSize(QSizeF size);
		void SetPreferredSize(double w, double h);
		QSizeF PreferredSize();
		void SetMaximumSize(QSizeF size);
		void SetMaximumSize(double w, double h);
		QSizeF MaximumSize();
		void SetGeometry(QRectF rect);
		QRectF Geometry();
		void GetContentsMargins(ref double left, ref double top, ref double right, ref double bottom);
		QRectF ContentsRect();
		QSizeF EffectiveSizeHint(Qt.SizeHint which, QSizeF constraint);
		QSizeF EffectiveSizeHint(Qt.SizeHint which);
		void UpdateGeometry();
		QGraphicsLayoutItem ParentLayoutItem();
		void SetParentLayoutItem(QGraphicsLayoutItem parent);
		bool IsLayout();
		QSizeF SizeHint(Qt.SizeHint which, QSizeF constraint);
	}

	[SmokeClass("QGraphicsLayoutItem")]
	public abstract class QGraphicsLayoutItem : Object, IQGraphicsLayoutItem {
		protected SmokeInvocation interceptor = null;
		private IntPtr smokeObject;
		protected QGraphicsLayoutItem(Type dummy) {}
		protected void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(QGraphicsLayoutItem), this);
		}
		// QGraphicsLayoutItem* QGraphicsLayoutItem(QGraphicsLayoutItemPrivate& arg1); >>>> NOT CONVERTED
		public QGraphicsLayoutItem(QGraphicsLayoutItem parent, bool isLayout) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QGraphicsLayoutItem#$", "QGraphicsLayoutItem(QGraphicsLayoutItem*, bool)", typeof(void), typeof(QGraphicsLayoutItem), parent, typeof(bool), isLayout);
		}
		public QGraphicsLayoutItem(QGraphicsLayoutItem parent) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QGraphicsLayoutItem#", "QGraphicsLayoutItem(QGraphicsLayoutItem*)", typeof(void), typeof(QGraphicsLayoutItem), parent);
		}
		public QGraphicsLayoutItem() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QGraphicsLayoutItem", "QGraphicsLayoutItem()", typeof(void));
		}
		public void SetSizePolicy(QSizePolicy policy) {
			interceptor.Invoke("setSizePolicy#", "setSizePolicy(const QSizePolicy&)", typeof(void), typeof(QSizePolicy), policy);
		}
		public void SetSizePolicy(QSizePolicy.Policy hPolicy, QSizePolicy.Policy vPolicy, QSizePolicy.ControlType controlType) {
			interceptor.Invoke("setSizePolicy$$$", "setSizePolicy(QSizePolicy::Policy, QSizePolicy::Policy, QSizePolicy::ControlType)", typeof(void), typeof(QSizePolicy.Policy), hPolicy, typeof(QSizePolicy.Policy), vPolicy, typeof(QSizePolicy.ControlType), controlType);
		}
		public QSizePolicy SizePolicy() {
			return (QSizePolicy) interceptor.Invoke("sizePolicy", "sizePolicy() const", typeof(QSizePolicy));
		}
		public void SetMinimumSize(QSizeF size) {
			interceptor.Invoke("setMinimumSize#", "setMinimumSize(const QSizeF&)", typeof(void), typeof(QSizeF), size);
		}
		public void SetMinimumSize(double w, double h) {
			interceptor.Invoke("setMinimumSize$$", "setMinimumSize(qreal, qreal)", typeof(void), typeof(double), w, typeof(double), h);
		}
		public QSizeF MinimumSize() {
			return (QSizeF) interceptor.Invoke("minimumSize", "minimumSize() const", typeof(QSizeF));
		}
		public void SetPreferredSize(QSizeF size) {
			interceptor.Invoke("setPreferredSize#", "setPreferredSize(const QSizeF&)", typeof(void), typeof(QSizeF), size);
		}
		public void SetPreferredSize(double w, double h) {
			interceptor.Invoke("setPreferredSize$$", "setPreferredSize(qreal, qreal)", typeof(void), typeof(double), w, typeof(double), h);
		}
		public QSizeF PreferredSize() {
			return (QSizeF) interceptor.Invoke("preferredSize", "preferredSize() const", typeof(QSizeF));
		}
		public void SetMaximumSize(QSizeF size) {
			interceptor.Invoke("setMaximumSize#", "setMaximumSize(const QSizeF&)", typeof(void), typeof(QSizeF), size);
		}
		public void SetMaximumSize(double w, double h) {
			interceptor.Invoke("setMaximumSize$$", "setMaximumSize(qreal, qreal)", typeof(void), typeof(double), w, typeof(double), h);
		}
		public QSizeF MaximumSize() {
			return (QSizeF) interceptor.Invoke("maximumSize", "maximumSize() const", typeof(QSizeF));
		}
		[SmokeMethod("setGeometry(const QRectF&)")]
		public abstract void SetGeometry(QRectF rect);
		[SmokeMethod("geometry() const")]
		public abstract QRectF Geometry();
		[SmokeMethod("getContentsMargins(qreal*, qreal*, qreal*, qreal*) const")]
		public virtual void GetContentsMargins(ref double left, ref double top, ref double right, ref double bottom) {
			StackItem[] stack = new StackItem[5];
			stack[1].s_double = left;
			stack[2].s_double = top;
			stack[3].s_double = right;
			stack[4].s_double = bottom;
			interceptor.Invoke("getContentsMargins$$$$", "getContentsMargins(qreal*, qreal*, qreal*, qreal*) const", stack);
			left = stack[1].s_double;
			top = stack[2].s_double;
			right = stack[3].s_double;
			bottom = stack[4].s_double;
			return;
		}
		public QRectF ContentsRect() {
			return (QRectF) interceptor.Invoke("contentsRect", "contentsRect() const", typeof(QRectF));
		}
		public QSizeF EffectiveSizeHint(Qt.SizeHint which, QSizeF constraint) {
			return (QSizeF) interceptor.Invoke("effectiveSizeHint$#", "effectiveSizeHint(Qt::SizeHint, const QSizeF&) const", typeof(QSizeF), typeof(Qt.SizeHint), which, typeof(QSizeF), constraint);
		}
		public QSizeF EffectiveSizeHint(Qt.SizeHint which) {
			return (QSizeF) interceptor.Invoke("effectiveSizeHint$", "effectiveSizeHint(Qt::SizeHint) const", typeof(QSizeF), typeof(Qt.SizeHint), which);
		}
		[SmokeMethod("updateGeometry()")]
		public virtual void UpdateGeometry() {
			interceptor.Invoke("updateGeometry", "updateGeometry()", typeof(void));
		}
		public QGraphicsLayoutItem ParentLayoutItem() {
			return (QGraphicsLayoutItem) interceptor.Invoke("parentLayoutItem", "parentLayoutItem() const", typeof(QGraphicsLayoutItem));
		}
		public void SetParentLayoutItem(QGraphicsLayoutItem parent) {
			interceptor.Invoke("setParentLayoutItem#", "setParentLayoutItem(QGraphicsLayoutItem*)", typeof(void), typeof(QGraphicsLayoutItem), parent);
		}
		public bool IsLayout() {
			return (bool) interceptor.Invoke("isLayout", "isLayout() const", typeof(bool));
		}
		[SmokeMethod("sizeHint(Qt::SizeHint, const QSizeF&) const")]
		public abstract QSizeF SizeHint(Qt.SizeHint which, QSizeF constraint);
	}
}
