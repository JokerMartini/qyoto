//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	[SmokeClass("QInputContextFactory")]
	public class QInputContextFactory : MarshalByRefObject, IDisposable {
		protected QInputContextFactory interceptor = null;
		private IntPtr smokeObject;
		protected QInputContextFactory(Type dummy) {}
		[SmokeClass("QInputContextFactory")]
		interface IQInputContextFactoryProxy {
			[SmokeMethod("keys", "()", "")]
			List<string> Keys();
			[SmokeMethod("create", "(const QString&, QObject*)", "$#")]
			QInputContext Create(string key, QObject parent);
			[SmokeMethod("languages", "(const QString&)", "$")]
			List<string> Languages(string key);
			[SmokeMethod("displayName", "(const QString&)", "$")]
			string DisplayName(string key);
			[SmokeMethod("description", "(const QString&)", "$")]
			string Description(string key);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QInputContextFactory), this);
			interceptor = (QInputContextFactory) realProxy.GetTransparentProxy();
		}
		private static IQInputContextFactoryProxy staticInterceptor = null;
		static QInputContextFactory() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQInputContextFactoryProxy), null);
			staticInterceptor = (IQInputContextFactoryProxy) realProxy.GetTransparentProxy();
		}
		public QInputContextFactory() : this((Type) null) {
			CreateProxy();
			NewQInputContextFactory();
		}
		[SmokeMethod("QInputContextFactory", "()", "")]
		private void NewQInputContextFactory() {
			((QInputContextFactory) interceptor).NewQInputContextFactory();
		}
		~QInputContextFactory() {
			DisposeQInputContextFactory();
		}
		public void Dispose() {
			DisposeQInputContextFactory();
		}
		[SmokeMethod("~QInputContextFactory", "()", "")]
		private void DisposeQInputContextFactory() {
			((QInputContextFactory) interceptor).DisposeQInputContextFactory();
		}
		public static List<string> Keys() {
			return staticInterceptor.Keys();
		}
		public static QInputContext Create(string key, QObject parent) {
			return staticInterceptor.Create(key,parent);
		}
		public static List<string> Languages(string key) {
			return staticInterceptor.Languages(key);
		}
		public static string DisplayName(string key) {
			return staticInterceptor.DisplayName(key);
		}
		public static string Description(string key) {
			return staticInterceptor.Description(key);
		}
	}
}
