//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	/// See <see cref="IQMovieSignals"></see> for signals emitted by QMovie
	[SmokeClass("QMovie")]
	public class QMovie : QObject, IDisposable {
 		protected QMovie(Type dummy) : base((Type) null) {}
		[SmokeClass("QMovie")]
		interface IQMovieProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
			[SmokeMethod("supportedFormats", "()", "")]
			List<QByteArray> SupportedFormats();
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QMovie), this);
			interceptor = (QMovie) realProxy.GetTransparentProxy();
		}
		private static IQMovieProxy staticInterceptor = null;
		static QMovie() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQMovieProxy), null);
			staticInterceptor = (IQMovieProxy) realProxy.GetTransparentProxy();
		}
		public enum MovieState {
			NotRunning = 0,
			Paused = 1,
			Running = 2,
		}
		public enum CacheMode {
			CacheNone = 0,
			CacheAll = 1,
		}
		[Q_PROPERTY("int", "speed")]
		public int Speed {
			[SmokeMethod("speed", "()", "")]
			get { return ((QMovie) interceptor).Speed; }
			[SmokeMethod("setSpeed", "(int)", "$")]
			set { ((QMovie) interceptor).Speed = value; }
		}
		[Q_PROPERTY("QMovie::CacheMode", "cacheMode")]
		public QMovie.CacheMode cacheMode {
			[SmokeMethod("cacheMode", "()", "")]
			get { return ((QMovie) interceptor).cacheMode; }
			[SmokeMethod("setCacheMode", "(QMovie::CacheMode)", "$")]
			set { ((QMovie) interceptor).cacheMode = value; }
		}
		public QMovie(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQMovie(parent);
		}
		[SmokeMethod("QMovie", "(QObject*)", "#")]
		private void NewQMovie(QObject parent) {
			((QMovie) interceptor).NewQMovie(parent);
		}
		public QMovie() : this((Type) null) {
			CreateProxy();
			NewQMovie();
		}
		[SmokeMethod("QMovie", "()", "")]
		private void NewQMovie() {
			((QMovie) interceptor).NewQMovie();
		}
		public QMovie(QIODevice device, QByteArray format, QObject parent) : this((Type) null) {
			CreateProxy();
			NewQMovie(device,format,parent);
		}
		[SmokeMethod("QMovie", "(QIODevice*, const QByteArray&, QObject*)", "###")]
		private void NewQMovie(QIODevice device, QByteArray format, QObject parent) {
			((QMovie) interceptor).NewQMovie(device,format,parent);
		}
		public QMovie(QIODevice device, QByteArray format) : this((Type) null) {
			CreateProxy();
			NewQMovie(device,format);
		}
		[SmokeMethod("QMovie", "(QIODevice*, const QByteArray&)", "##")]
		private void NewQMovie(QIODevice device, QByteArray format) {
			((QMovie) interceptor).NewQMovie(device,format);
		}
		public QMovie(QIODevice device) : this((Type) null) {
			CreateProxy();
			NewQMovie(device);
		}
		[SmokeMethod("QMovie", "(QIODevice*)", "#")]
		private void NewQMovie(QIODevice device) {
			((QMovie) interceptor).NewQMovie(device);
		}
		public QMovie(string fileName, QByteArray format, QObject parent) : this((Type) null) {
			CreateProxy();
			NewQMovie(fileName,format,parent);
		}
		[SmokeMethod("QMovie", "(const QString&, const QByteArray&, QObject*)", "$##")]
		private void NewQMovie(string fileName, QByteArray format, QObject parent) {
			((QMovie) interceptor).NewQMovie(fileName,format,parent);
		}
		public QMovie(string fileName, QByteArray format) : this((Type) null) {
			CreateProxy();
			NewQMovie(fileName,format);
		}
		[SmokeMethod("QMovie", "(const QString&, const QByteArray&)", "$#")]
		private void NewQMovie(string fileName, QByteArray format) {
			((QMovie) interceptor).NewQMovie(fileName,format);
		}
		public QMovie(string fileName) : this((Type) null) {
			CreateProxy();
			NewQMovie(fileName);
		}
		[SmokeMethod("QMovie", "(const QString&)", "$")]
		private void NewQMovie(string fileName) {
			((QMovie) interceptor).NewQMovie(fileName);
		}
		[SmokeMethod("setDevice", "(QIODevice*)", "#")]
		public void SetDevice(QIODevice device) {
			((QMovie) interceptor).SetDevice(device);
		}
		[SmokeMethod("device", "() const", "")]
		public QIODevice Device() {
			return ((QMovie) interceptor).Device();
		}
		[SmokeMethod("setFileName", "(const QString&)", "$")]
		public void SetFileName(string fileName) {
			((QMovie) interceptor).SetFileName(fileName);
		}
		[SmokeMethod("fileName", "() const", "")]
		public string FileName() {
			return ((QMovie) interceptor).FileName();
		}
		[SmokeMethod("setFormat", "(const QByteArray&)", "#")]
		public void SetFormat(QByteArray format) {
			((QMovie) interceptor).SetFormat(format);
		}
		[SmokeMethod("format", "() const", "")]
		public QByteArray Format() {
			return ((QMovie) interceptor).Format();
		}
		[SmokeMethod("setBackgroundColor", "(const QColor&)", "#")]
		public void SetBackgroundColor(QColor color) {
			((QMovie) interceptor).SetBackgroundColor(color);
		}
		[SmokeMethod("backgroundColor", "() const", "")]
		public QColor BackgroundColor() {
			return ((QMovie) interceptor).BackgroundColor();
		}
		[SmokeMethod("state", "() const", "")]
		public QMovie.MovieState State() {
			return ((QMovie) interceptor).State();
		}
		[SmokeMethod("frameRect", "() const", "")]
		public QRect FrameRect() {
			return ((QMovie) interceptor).FrameRect();
		}
		[SmokeMethod("currentImage", "() const", "")]
		public QImage CurrentImage() {
			return ((QMovie) interceptor).CurrentImage();
		}
		[SmokeMethod("currentPixmap", "() const", "")]
		public QPixmap CurrentPixmap() {
			return ((QMovie) interceptor).CurrentPixmap();
		}
		[SmokeMethod("isValid", "() const", "")]
		public bool IsValid() {
			return ((QMovie) interceptor).IsValid();
		}
		[SmokeMethod("jumpToFrame", "(int)", "$")]
		public bool JumpToFrame(int frameNumber) {
			return ((QMovie) interceptor).JumpToFrame(frameNumber);
		}
		[SmokeMethod("loopCount", "() const", "")]
		public int LoopCount() {
			return ((QMovie) interceptor).LoopCount();
		}
		[SmokeMethod("frameCount", "() const", "")]
		public int FrameCount() {
			return ((QMovie) interceptor).FrameCount();
		}
		[SmokeMethod("nextFrameDelay", "() const", "")]
		public int NextFrameDelay() {
			return ((QMovie) interceptor).NextFrameDelay();
		}
		[SmokeMethod("currentFrameNumber", "() const", "")]
		public int CurrentFrameNumber() {
			return ((QMovie) interceptor).CurrentFrameNumber();
		}
		[SmokeMethod("scaledSize", "()", "")]
		public QSize ScaledSize() {
			return ((QMovie) interceptor).ScaledSize();
		}
		[SmokeMethod("setScaledSize", "(const QSize&)", "#")]
		public void SetScaledSize(QSize size) {
			((QMovie) interceptor).SetScaledSize(size);
		}
		[Q_SLOT("void start()")]
		[SmokeMethod("start", "()", "")]
		public void Start() {
			((QMovie) interceptor).Start();
		}
		[Q_SLOT("bool jumpToNextFrame()")]
		[SmokeMethod("jumpToNextFrame", "()", "")]
		public bool JumpToNextFrame() {
			return ((QMovie) interceptor).JumpToNextFrame();
		}
		[Q_SLOT("void setPaused(bool)")]
		[SmokeMethod("setPaused", "(bool)", "$")]
		public void SetPaused(bool paused) {
			((QMovie) interceptor).SetPaused(paused);
		}
		[Q_SLOT("void stop()")]
		[SmokeMethod("stop", "()", "")]
		public void Stop() {
			((QMovie) interceptor).Stop();
		}
		~QMovie() {
			DisposeQMovie();
		}
		public new void Dispose() {
			DisposeQMovie();
		}
		[SmokeMethod("~QMovie", "()", "")]
		private void DisposeQMovie() {
			((QMovie) interceptor).DisposeQMovie();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		public static List<QByteArray> SupportedFormats() {
			return staticInterceptor.SupportedFormats();
		}
		protected new IQMovieSignals Emit {
			get { return (IQMovieSignals) Q_EMIT; }
		}
	}

	public interface IQMovieSignals : IQObjectSignals {
		[Q_SIGNAL("void started()")]
		void Started();
		[Q_SIGNAL("void resized(const QSize&)")]
		void Resized(QSize size);
		[Q_SIGNAL("void updated(const QRect&)")]
		void Updated(QRect rect);
		[Q_SIGNAL("void stateChanged(QMovie::MovieState)")]
		void StateChanged(QMovie.MovieState state);
		[Q_SIGNAL("void error(QImageReader::ImageReaderError)")]
		void Error(int error);
		[Q_SIGNAL("void finished()")]
		void Finished();
		[Q_SIGNAL("void frameChanged(int)")]
		void FrameChanged(int frameNumber);
	}
}
