//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections;
	using System.Text;

	[SmokeClass("QAccessibleInterface")]
	public class QAccessibleInterface : QAccessible {
 		protected QAccessibleInterface(Type dummy) : base((Type) null) {}
		interface IQAccessibleInterfaceProxy {
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QAccessibleInterface), this);
			_interceptor = (QAccessibleInterface) realProxy.GetTransparentProxy();
		}
		private QAccessibleInterface ProxyQAccessibleInterface() {
			return (QAccessibleInterface) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QAccessibleInterface() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQAccessibleInterfaceProxy), null);
			_staticInterceptor = (IQAccessibleInterfaceProxy) realProxy.GetTransparentProxy();
		}
		private static IQAccessibleInterfaceProxy StaticQAccessibleInterface() {
			return (IQAccessibleInterfaceProxy) _staticInterceptor;
		}

		[SmokeMethod("isValid() const")]
		public virtual bool IsValid() {
			return ProxyQAccessibleInterface().IsValid();
		}
		[SmokeMethod("object() const")]
		public virtual QObject Object() {
			return ProxyQAccessibleInterface().Object();
		}
		[SmokeMethod("childCount() const")]
		public virtual int ChildCount() {
			return ProxyQAccessibleInterface().ChildCount();
		}
		[SmokeMethod("indexOfChild(const QAccessibleInterface*) const")]
		public virtual int IndexOfChild(QAccessibleInterface arg1) {
			return ProxyQAccessibleInterface().IndexOfChild(arg1);
		}
		[SmokeMethod("relationTo(int, const QAccessibleInterface*, int) const")]
		public virtual int RelationTo(int child, QAccessibleInterface other, int otherChild) {
			return ProxyQAccessibleInterface().RelationTo(child,other,otherChild);
		}
		[SmokeMethod("childAt(int, int) const")]
		public virtual int ChildAt(int x, int y) {
			return ProxyQAccessibleInterface().ChildAt(x,y);
		}
		[SmokeMethod("navigate(QAccessible::RelationFlag, int, QAccessibleInterface**) const")]
		public virtual int Navigate(QAccessible.RelationFlag relation, int index, QAccessibleInterface iface) {
			return ProxyQAccessibleInterface().Navigate(relation,index,iface);
		}
		[SmokeMethod("text(QAccessible::Text, int) const")]
		public virtual string Text(QAccessible.Text t, int child) {
			return ProxyQAccessibleInterface().Text(t,child);
		}
		[SmokeMethod("setText(QAccessible::Text, int, const QString&)")]
		public virtual void SetText(QAccessible.Text t, int child, string text) {
			ProxyQAccessibleInterface().SetText(t,child,text);
		}
		[SmokeMethod("rect(int) const")]
		public virtual QRect Rect(int child) {
			return ProxyQAccessibleInterface().Rect(child);
		}
		[SmokeMethod("role(int) const")]
		public virtual QAccessible.Role Role(int child) {
			return ProxyQAccessibleInterface().Role(child);
		}
		[SmokeMethod("state(int) const")]
		public virtual int State(int child) {
			return ProxyQAccessibleInterface().State(child);
		}
		[SmokeMethod("userActionCount(int) const")]
		public virtual int UserActionCount(int child) {
			return ProxyQAccessibleInterface().UserActionCount(child);
		}
		[SmokeMethod("actionText(int, QAccessible::Text, int) const")]
		public virtual string ActionText(int action, QAccessible.Text t, int child) {
			return ProxyQAccessibleInterface().ActionText(action,t,child);
		}
		[SmokeMethod("doAction(int, int, const QVariantList&)")]
		public virtual bool DoAction(int action, int child, ArrayList arg3) {
			return ProxyQAccessibleInterface().DoAction(action,child,arg3);
		}
		[SmokeMethod("doAction(int, int)")]
		public virtual bool DoAction(int action, int child) {
			return ProxyQAccessibleInterface().DoAction(action,child);
		}
		[SmokeMethod("invokeMethod(QAccessible::Method, int, const QVariantList&)")]
		public QVariant InvokeMethod(QAccessible.Method method, int child, ArrayList arg3) {
			return ProxyQAccessibleInterface().InvokeMethod(method,child,arg3);
		}
		[SmokeMethod("invokeMethod(QAccessible::Method, int)")]
		public QVariant InvokeMethod(QAccessible.Method method, int child) {
			return ProxyQAccessibleInterface().InvokeMethod(method,child);
		}
		[SmokeMethod("invokeMethod(QAccessible::Method)")]
		public QVariant InvokeMethod(QAccessible.Method method) {
			return ProxyQAccessibleInterface().InvokeMethod(method);
		}
		public QAccessibleInterface() : this((Type) null) {
			CreateProxy();
			NewQAccessibleInterface();
		}
		[SmokeMethod("QAccessibleInterface()")]
		private void NewQAccessibleInterface() {
			ProxyQAccessibleInterface().NewQAccessibleInterface();
		}
		~QAccessibleInterface() {
			DisposeQAccessibleInterface();
		}
		public void Dispose() {
			DisposeQAccessibleInterface();
		}
		[SmokeMethod("~QAccessibleInterface()")]
		private void DisposeQAccessibleInterface() {
			ProxyQAccessibleInterface().DisposeQAccessibleInterface();
		}
	}
}
