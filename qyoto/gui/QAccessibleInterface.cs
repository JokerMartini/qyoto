//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	[SmokeClass("QAccessibleInterface")]
	public abstract class QAccessibleInterface : QAccessible {
 		protected QAccessibleInterface(Type dummy) : base((Type) null) {}
		[SmokeClass("QAccessibleInterface")]
		interface IQAccessibleInterfaceProxy {
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QAccessibleInterface), this);
			_interceptor = (QAccessibleInterface) realProxy.GetTransparentProxy();
		}
		private QAccessibleInterface ProxyQAccessibleInterface() {
			return (QAccessibleInterface) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QAccessibleInterface() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQAccessibleInterfaceProxy), null);
			_staticInterceptor = (IQAccessibleInterfaceProxy) realProxy.GetTransparentProxy();
		}
		private static IQAccessibleInterfaceProxy StaticQAccessibleInterface() {
			return (IQAccessibleInterfaceProxy) _staticInterceptor;
		}
		public abstract bool IsValid();
		public abstract QObject Object();
		public abstract int ChildCount();
		public abstract int IndexOfChild(QAccessibleInterface arg1);
		public abstract int RelationTo(int child, QAccessibleInterface other, int otherChild);
		public abstract int ChildAt(int x, int y);
		public abstract int Navigate(QAccessible.RelationFlag relation, int index, QAccessibleInterface iface);
		public abstract string Text(QAccessible.Text t, int child);
		public abstract void SetText(QAccessible.Text t, int child, string text);
		public abstract QRect Rect(int child);
		public abstract QAccessible.Role Role(int child);
		public abstract int State(int child);
		public abstract int UserActionCount(int child);
		public abstract string ActionText(int action, QAccessible.Text t, int child);
		public abstract bool DoAction(int action, int child, List<QVariant> arg3);
		[SmokeMethod("invokeMethod", "(QAccessible::Method, int, const QVariantList&)", "$$?")]
		public QVariant InvokeMethod(QAccessible.Method method, int child, List<QVariant> arg3) {
			return ProxyQAccessibleInterface().InvokeMethod(method,child,arg3);
		}
		[SmokeMethod("invokeMethod", "(QAccessible::Method, int)", "$$")]
		public QVariant InvokeMethod(QAccessible.Method method, int child) {
			return ProxyQAccessibleInterface().InvokeMethod(method,child);
		}
		[SmokeMethod("invokeMethod", "(QAccessible::Method)", "$")]
		public QVariant InvokeMethod(QAccessible.Method method) {
			return ProxyQAccessibleInterface().InvokeMethod(method);
		}
		public QAccessibleInterface() : this((Type) null) {
			CreateProxy();
			NewQAccessibleInterface();
		}
		[SmokeMethod("QAccessibleInterface", "()", "")]
		private void NewQAccessibleInterface() {
			ProxyQAccessibleInterface().NewQAccessibleInterface();
		}
		~QAccessibleInterface() {
			DisposeQAccessibleInterface();
		}
		public void Dispose() {
			DisposeQAccessibleInterface();
		}
		[SmokeMethod("~QAccessibleInterface", "()", "")]
		private void DisposeQAccessibleInterface() {
			ProxyQAccessibleInterface().DisposeQAccessibleInterface();
		}
	}
}
