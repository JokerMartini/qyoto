//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QGraphicsPixmapItem")]
	public class QGraphicsPixmapItem : QGraphicsItem, IDisposable {
 		protected QGraphicsPixmapItem(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QGraphicsPixmapItem), this);
			interceptor = (QGraphicsPixmapItem) realProxy.GetTransparentProxy();
		}
		public enum ShapeMode {
			MaskShape = 0,
			BoundingRectShape = 1,
			HeuristicMaskShape = 2,
		}
		public const int Type = 7;

		public QGraphicsPixmapItem(QGraphicsItem parent, QGraphicsScene scene) : this((Type) null) {
			CreateProxy();
			NewQGraphicsPixmapItem(parent,scene);
		}
		[SmokeMethod("QGraphicsPixmapItem", "(QGraphicsItem*, QGraphicsScene*)", "##")]
		private void NewQGraphicsPixmapItem(QGraphicsItem parent, QGraphicsScene scene) {
			((QGraphicsPixmapItem) interceptor).NewQGraphicsPixmapItem(parent,scene);
		}
		public QGraphicsPixmapItem(QGraphicsItem parent) : this((Type) null) {
			CreateProxy();
			NewQGraphicsPixmapItem(parent);
		}
		[SmokeMethod("QGraphicsPixmapItem", "(QGraphicsItem*)", "#")]
		private void NewQGraphicsPixmapItem(QGraphicsItem parent) {
			((QGraphicsPixmapItem) interceptor).NewQGraphicsPixmapItem(parent);
		}
		public QGraphicsPixmapItem() : this((Type) null) {
			CreateProxy();
			NewQGraphicsPixmapItem();
		}
		[SmokeMethod("QGraphicsPixmapItem", "()", "")]
		private void NewQGraphicsPixmapItem() {
			((QGraphicsPixmapItem) interceptor).NewQGraphicsPixmapItem();
		}
		public QGraphicsPixmapItem(QPixmap pixmap, QGraphicsItem parent, QGraphicsScene scene) : this((Type) null) {
			CreateProxy();
			NewQGraphicsPixmapItem(pixmap,parent,scene);
		}
		[SmokeMethod("QGraphicsPixmapItem", "(const QPixmap&, QGraphicsItem*, QGraphicsScene*)", "###")]
		private void NewQGraphicsPixmapItem(QPixmap pixmap, QGraphicsItem parent, QGraphicsScene scene) {
			((QGraphicsPixmapItem) interceptor).NewQGraphicsPixmapItem(pixmap,parent,scene);
		}
		public QGraphicsPixmapItem(QPixmap pixmap, QGraphicsItem parent) : this((Type) null) {
			CreateProxy();
			NewQGraphicsPixmapItem(pixmap,parent);
		}
		[SmokeMethod("QGraphicsPixmapItem", "(const QPixmap&, QGraphicsItem*)", "##")]
		private void NewQGraphicsPixmapItem(QPixmap pixmap, QGraphicsItem parent) {
			((QGraphicsPixmapItem) interceptor).NewQGraphicsPixmapItem(pixmap,parent);
		}
		public QGraphicsPixmapItem(QPixmap pixmap) : this((Type) null) {
			CreateProxy();
			NewQGraphicsPixmapItem(pixmap);
		}
		[SmokeMethod("QGraphicsPixmapItem", "(const QPixmap&)", "#")]
		private void NewQGraphicsPixmapItem(QPixmap pixmap) {
			((QGraphicsPixmapItem) interceptor).NewQGraphicsPixmapItem(pixmap);
		}
		[SmokeMethod("pixmap", "() const", "")]
		public QPixmap Pixmap() {
			return ((QGraphicsPixmapItem) interceptor).Pixmap();
		}
		[SmokeMethod("setPixmap", "(const QPixmap&)", "#")]
		public void SetPixmap(QPixmap pixmap) {
			((QGraphicsPixmapItem) interceptor).SetPixmap(pixmap);
		}
		[SmokeMethod("transformationMode", "() const", "")]
		public Qt.TransformationMode TransformationMode() {
			return ((QGraphicsPixmapItem) interceptor).TransformationMode();
		}
		[SmokeMethod("setTransformationMode", "(Qt::TransformationMode)", "$")]
		public void SetTransformationMode(Qt.TransformationMode mode) {
			((QGraphicsPixmapItem) interceptor).SetTransformationMode(mode);
		}
		[SmokeMethod("offset", "() const", "")]
		public QPointF Offset() {
			return ((QGraphicsPixmapItem) interceptor).Offset();
		}
		[SmokeMethod("setOffset", "(const QPointF&)", "#")]
		public void SetOffset(QPointF offset) {
			((QGraphicsPixmapItem) interceptor).SetOffset(offset);
		}
		[SmokeMethod("boundingRect", "() const", "")]
		public override QRectF BoundingRect() {
			return ((QGraphicsPixmapItem) interceptor).BoundingRect();
		}
		[SmokeMethod("shape", "() const", "")]
		public override QPainterPath Shape() {
			return ((QGraphicsPixmapItem) interceptor).Shape();
		}
		[SmokeMethod("contains", "(const QPointF&) const", "#")]
		public override bool Contains(QPointF point) {
			return ((QGraphicsPixmapItem) interceptor).Contains(point);
		}
		[SmokeMethod("paint", "(QPainter*, const QStyleOptionGraphicsItem*, QWidget*)", "###")]
		public override void Paint(QPainter painter, QStyleOptionGraphicsItem option, QWidget widget) {
			((QGraphicsPixmapItem) interceptor).Paint(painter,option,widget);
		}
		[SmokeMethod("isObscuredBy", "(const QGraphicsItem*) const", "#")]
		public override bool IsObscuredBy(QGraphicsItem item) {
			return ((QGraphicsPixmapItem) interceptor).IsObscuredBy(item);
		}
		[SmokeMethod("opaqueArea", "() const", "")]
		public override QPainterPath OpaqueArea() {
			return ((QGraphicsPixmapItem) interceptor).OpaqueArea();
		}
		[SmokeMethod("type", "() const", "")]
		public override int type() {
			return ((QGraphicsPixmapItem) interceptor).type();
		}
		[SmokeMethod("shapeMode", "() const", "")]
		public QGraphicsPixmapItem.ShapeMode shapeMode() {
			return ((QGraphicsPixmapItem) interceptor).shapeMode();
		}
		[SmokeMethod("setShapeMode", "(QGraphicsPixmapItem::ShapeMode)", "$")]
		public void SetShapeMode(QGraphicsPixmapItem.ShapeMode mode) {
			((QGraphicsPixmapItem) interceptor).SetShapeMode(mode);
		}
		[SmokeMethod("supportsExtension", "(QGraphicsItem::Extension) const", "$")]
		protected override bool SupportsExtension(QGraphicsItem.Extension extension) {
			return ((QGraphicsPixmapItem) interceptor).SupportsExtension(extension);
		}
		[SmokeMethod("setExtension", "(QGraphicsItem::Extension, const QVariant&)", "$#")]
		protected override void SetExtension(QGraphicsItem.Extension extension, QVariant variant) {
			((QGraphicsPixmapItem) interceptor).SetExtension(extension,variant);
		}
		[SmokeMethod("extension", "(const QVariant&) const", "#")]
		protected override QVariant extension(QVariant variant) {
			return ((QGraphicsPixmapItem) interceptor).extension(variant);
		}
		~QGraphicsPixmapItem() {
			DisposeQGraphicsPixmapItem();
		}
		public void Dispose() {
			DisposeQGraphicsPixmapItem();
		}
		[SmokeMethod("~QGraphicsPixmapItem", "()", "")]
		private void DisposeQGraphicsPixmapItem() {
			((QGraphicsPixmapItem) interceptor).DisposeQGraphicsPixmapItem();
		}
	}
}
