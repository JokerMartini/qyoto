//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	/// See <see cref="IQUndoGroupSignals"></see> for signals emitted by QUndoGroup
	[SmokeClass("QUndoGroup")]
	public class QUndoGroup : QObject, IDisposable {
 		protected QUndoGroup(Type dummy) : base((Type) null) {}
		[SmokeClass("QUndoGroup")]
		interface IQUndoGroupProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QUndoGroup), this);
			_interceptor = (QUndoGroup) realProxy.GetTransparentProxy();
		}
		private QUndoGroup ProxyQUndoGroup() {
			return (QUndoGroup) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QUndoGroup() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQUndoGroupProxy), null);
			_staticInterceptor = (IQUndoGroupProxy) realProxy.GetTransparentProxy();
		}
		private static IQUndoGroupProxy StaticQUndoGroup() {
			return (IQUndoGroupProxy) _staticInterceptor;
		}
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QUndoGroup(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQUndoGroup(parent);
		}
		[SmokeMethod("QUndoGroup", "(QObject*)", "#")]
		private void NewQUndoGroup(QObject parent) {
			ProxyQUndoGroup().NewQUndoGroup(parent);
		}
		public QUndoGroup() : this((Type) null) {
			CreateProxy();
			NewQUndoGroup();
		}
		[SmokeMethod("QUndoGroup", "()", "")]
		private void NewQUndoGroup() {
			ProxyQUndoGroup().NewQUndoGroup();
		}
		[SmokeMethod("addStack", "(QUndoStack*)", "#")]
		public void AddStack(QUndoStack stack) {
			ProxyQUndoGroup().AddStack(stack);
		}
		[SmokeMethod("removeStack", "(QUndoStack*)", "#")]
		public void RemoveStack(QUndoStack stack) {
			ProxyQUndoGroup().RemoveStack(stack);
		}
		[SmokeMethod("stacks", "() const", "")]
		public List<QUndoStack> Stacks() {
			return ProxyQUndoGroup().Stacks();
		}
		[SmokeMethod("activeStack", "() const", "")]
		public QUndoStack ActiveStack() {
			return ProxyQUndoGroup().ActiveStack();
		}
		[SmokeMethod("createUndoAction", "(QObject*, const QString&) const", "#$")]
		public QAction CreateUndoAction(QObject parent, string prefix) {
			return ProxyQUndoGroup().CreateUndoAction(parent,prefix);
		}
		[SmokeMethod("createUndoAction", "(QObject*) const", "#")]
		public QAction CreateUndoAction(QObject parent) {
			return ProxyQUndoGroup().CreateUndoAction(parent);
		}
		[SmokeMethod("createRedoAction", "(QObject*, const QString&) const", "#$")]
		public QAction CreateRedoAction(QObject parent, string prefix) {
			return ProxyQUndoGroup().CreateRedoAction(parent,prefix);
		}
		[SmokeMethod("createRedoAction", "(QObject*) const", "#")]
		public QAction CreateRedoAction(QObject parent) {
			return ProxyQUndoGroup().CreateRedoAction(parent);
		}
		[SmokeMethod("canUndo", "() const", "")]
		public bool CanUndo() {
			return ProxyQUndoGroup().CanUndo();
		}
		[SmokeMethod("canRedo", "() const", "")]
		public bool CanRedo() {
			return ProxyQUndoGroup().CanRedo();
		}
		[SmokeMethod("undoText", "() const", "")]
		public string UndoText() {
			return ProxyQUndoGroup().UndoText();
		}
		[SmokeMethod("redoText", "() const", "")]
		public string RedoText() {
			return ProxyQUndoGroup().RedoText();
		}
		[SmokeMethod("isClean", "() const", "")]
		public bool IsClean() {
			return ProxyQUndoGroup().IsClean();
		}
		[Q_SLOT("void undo()")]
		[SmokeMethod("undo", "()", "")]
		public void Undo() {
			ProxyQUndoGroup().Undo();
		}
		[Q_SLOT("void redo()")]
		[SmokeMethod("redo", "()", "")]
		public void Redo() {
			ProxyQUndoGroup().Redo();
		}
		[Q_SLOT("void setActiveStack(QUndoStack*)")]
		[SmokeMethod("setActiveStack", "(QUndoStack*)", "#")]
		public void SetActiveStack(QUndoStack stack) {
			ProxyQUndoGroup().SetActiveStack(stack);
		}
		public static new string Tr(string s, string c) {
			return StaticQUndoGroup().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQUndoGroup().Tr(s);
		}
		~QUndoGroup() {
			DisposeQUndoGroup();
		}
		public new void Dispose() {
			DisposeQUndoGroup();
		}
		[SmokeMethod("~QUndoGroup", "()", "")]
		private void DisposeQUndoGroup() {
			ProxyQUndoGroup().DisposeQUndoGroup();
		}
		protected new IQUndoGroupSignals Emit {
			get {
				return (IQUndoGroupSignals) Q_EMIT;
			}
		}
	}

	public interface IQUndoGroupSignals : IQObjectSignals {
		[Q_SIGNAL("void activeStackChanged(QUndoStack*)")]
		void ActiveStackChanged(QUndoStack stack);
		[Q_SIGNAL("void indexChanged(int)")]
		void IndexChanged(int idx);
		[Q_SIGNAL("void cleanChanged(bool)")]
		void CleanChanged(bool clean);
		[Q_SIGNAL("void canUndoChanged(bool)")]
		void CanUndoChanged(bool canUndo);
		[Q_SIGNAL("void canRedoChanged(bool)")]
		void CanRedoChanged(bool canRedo);
		[Q_SIGNAL("void undoTextChanged(const QString&)")]
		void UndoTextChanged(string undoText);
		[Q_SIGNAL("void redoTextChanged(const QString&)")]
		void RedoTextChanged(string redoText);
	}
}
