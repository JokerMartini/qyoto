//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	[SmokeClass("QAccessibleWidgetEx")]
	public abstract class QAccessibleWidgetEx : QAccessibleObjectEx {
 		protected QAccessibleWidgetEx(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QAccessibleWidgetEx), this);
			interceptor = (QAccessibleWidgetEx) realProxy.GetTransparentProxy();
		}
		public QAccessibleWidgetEx(QWidget o, QAccessible.Role r, string name) : this((Type) null) {
			CreateProxy();
			NewQAccessibleWidgetEx(o,r,name);
		}
		[SmokeMethod("QAccessibleWidgetEx", "(QWidget*, QAccessible::Role, const QString&)", "#$$")]
		private void NewQAccessibleWidgetEx(QWidget o, QAccessible.Role r, string name) {
			((QAccessibleWidgetEx) interceptor).NewQAccessibleWidgetEx(o,r,name);
		}
		public QAccessibleWidgetEx(QWidget o, QAccessible.Role r) : this((Type) null) {
			CreateProxy();
			NewQAccessibleWidgetEx(o,r);
		}
		[SmokeMethod("QAccessibleWidgetEx", "(QWidget*, QAccessible::Role)", "#$")]
		private void NewQAccessibleWidgetEx(QWidget o, QAccessible.Role r) {
			((QAccessibleWidgetEx) interceptor).NewQAccessibleWidgetEx(o,r);
		}
		public QAccessibleWidgetEx(QWidget o) : this((Type) null) {
			CreateProxy();
			NewQAccessibleWidgetEx(o);
		}
		[SmokeMethod("QAccessibleWidgetEx", "(QWidget*)", "#")]
		private void NewQAccessibleWidgetEx(QWidget o) {
			((QAccessibleWidgetEx) interceptor).NewQAccessibleWidgetEx(o);
		}
		[SmokeMethod("childCount", "() const", "")]
		public override int ChildCount() {
			return ((QAccessibleWidgetEx) interceptor).ChildCount();
		}
		[SmokeMethod("indexOfChild", "(const QAccessibleInterface*) const", "#")]
		public override int IndexOfChild(QAccessibleInterface child) {
			return ((QAccessibleWidgetEx) interceptor).IndexOfChild(child);
		}
		[SmokeMethod("relationTo", "(int, const QAccessibleInterface*, int) const", "$#$")]
		public override int RelationTo(int child, QAccessibleInterface other, int otherChild) {
			return ((QAccessibleWidgetEx) interceptor).RelationTo(child,other,otherChild);
		}
		[SmokeMethod("childAt", "(int, int) const", "$$")]
		public override int ChildAt(int x, int y) {
			return ((QAccessibleWidgetEx) interceptor).ChildAt(x,y);
		}
		[SmokeMethod("rect", "(int) const", "$")]
		public override QRect Rect(int child) {
			return ((QAccessibleWidgetEx) interceptor).Rect(child);
		}
		[SmokeMethod("navigate", "(QAccessible::RelationFlag, int, QAccessibleInterface**) const", "$$?")]
		public override int Navigate(QAccessible.RelationFlag rel, int entry, QAccessibleInterface target) {
			return ((QAccessibleWidgetEx) interceptor).Navigate(rel,entry,target);
		}
		[SmokeMethod("text", "(QAccessible::Text, int) const", "$$")]
		public override string Text(QAccessible.Text t, int child) {
			return ((QAccessibleWidgetEx) interceptor).Text(t,child);
		}
		[SmokeMethod("role", "(int) const", "$")]
		public override QAccessible.Role Role(int child) {
			return ((QAccessibleWidgetEx) interceptor).Role(child);
		}
		[SmokeMethod("state", "(int) const", "$")]
		public override int State(int child) {
			return ((QAccessibleWidgetEx) interceptor).State(child);
		}
		[SmokeMethod("actionText", "(int, QAccessible::Text, int) const", "$$$")]
		public override string ActionText(int action, QAccessible.Text t, int child) {
			return ((QAccessibleWidgetEx) interceptor).ActionText(action,t,child);
		}
		[SmokeMethod("doAction", "(int, int, const QVariantList&)", "$$?")]
		public override bool DoAction(int action, int child, List<QVariant> arg3) {
			return ((QAccessibleWidgetEx) interceptor).DoAction(action,child,arg3);
		}
		[SmokeMethod("widget", "() const", "")]
		protected QWidget Widget() {
			return ((QAccessibleWidgetEx) interceptor).Widget();
		}
		[SmokeMethod("parentObject", "() const", "")]
		protected QObject ParentObject() {
			return ((QAccessibleWidgetEx) interceptor).ParentObject();
		}
		[SmokeMethod("addControllingSignal", "(const QString&)", "$")]
		protected void AddControllingSignal(string signal) {
			((QAccessibleWidgetEx) interceptor).AddControllingSignal(signal);
		}
		[SmokeMethod("setValue", "(const QString&)", "$")]
		protected void SetValue(string value) {
			((QAccessibleWidgetEx) interceptor).SetValue(value);
		}
		[SmokeMethod("setDescription", "(const QString&)", "$")]
		protected void SetDescription(string desc) {
			((QAccessibleWidgetEx) interceptor).SetDescription(desc);
		}
		[SmokeMethod("setHelp", "(const QString&)", "$")]
		protected void SetHelp(string help) {
			((QAccessibleWidgetEx) interceptor).SetHelp(help);
		}
		[SmokeMethod("setAccelerator", "(const QString&)", "$")]
		protected void SetAccelerator(string accel) {
			((QAccessibleWidgetEx) interceptor).SetAccelerator(accel);
		}
	}
}
