//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QTextFrameFormat")]
	public class QTextFrameFormat : QTextFormat, IDisposable {
 		protected QTextFrameFormat(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTextFrameFormat), this);
			interceptor = (QTextFrameFormat) realProxy.GetTransparentProxy();
		}
		public enum Position {
			InFlow = 0,
			FloatLeft = 1,
			FloatRight = 2,
		}
		public QTextFrameFormat() : this((Type) null) {
			CreateProxy();
			NewQTextFrameFormat();
		}
		[SmokeMethod("QTextFrameFormat", "()", "")]
		private void NewQTextFrameFormat() {
			((QTextFrameFormat) interceptor).NewQTextFrameFormat();
		}
		[SmokeMethod("isValid", "() const", "")]
		public bool IsValid() {
			return ((QTextFrameFormat) interceptor).IsValid();
		}
		[SmokeMethod("setPosition", "(QTextFrameFormat::Position)", "$")]
		public void SetPosition(QTextFrameFormat.Position f) {
			((QTextFrameFormat) interceptor).SetPosition(f);
		}
		[SmokeMethod("position", "() const", "")]
		public QTextFrameFormat.Position position() {
			return ((QTextFrameFormat) interceptor).position();
		}
		[SmokeMethod("setBorder", "(qreal)", "$")]
		public void SetBorder(double border) {
			((QTextFrameFormat) interceptor).SetBorder(border);
		}
		[SmokeMethod("border", "() const", "")]
		public double Border() {
			return ((QTextFrameFormat) interceptor).Border();
		}
		[SmokeMethod("setMargin", "(qreal)", "$")]
		public void SetMargin(double margin) {
			((QTextFrameFormat) interceptor).SetMargin(margin);
		}
		[SmokeMethod("margin", "() const", "")]
		public double Margin() {
			return ((QTextFrameFormat) interceptor).Margin();
		}
		[SmokeMethod("setPadding", "(qreal)", "$")]
		public void SetPadding(double padding) {
			((QTextFrameFormat) interceptor).SetPadding(padding);
		}
		[SmokeMethod("padding", "() const", "")]
		public double Padding() {
			return ((QTextFrameFormat) interceptor).Padding();
		}
		[SmokeMethod("setWidth", "(qreal)", "$")]
		public void SetWidth(double width) {
			((QTextFrameFormat) interceptor).SetWidth(width);
		}
		[SmokeMethod("setWidth", "(const QTextLength&)", "#")]
		public void SetWidth(QTextLength length) {
			((QTextFrameFormat) interceptor).SetWidth(length);
		}
		[SmokeMethod("width", "() const", "")]
		public QTextLength Width() {
			return ((QTextFrameFormat) interceptor).Width();
		}
		[SmokeMethod("setHeight", "(qreal)", "$")]
		public void SetHeight(double height) {
			((QTextFrameFormat) interceptor).SetHeight(height);
		}
		[SmokeMethod("setHeight", "(const QTextLength&)", "#")]
		public void SetHeight(QTextLength height) {
			((QTextFrameFormat) interceptor).SetHeight(height);
		}
		[SmokeMethod("height", "() const", "")]
		public QTextLength Height() {
			return ((QTextFrameFormat) interceptor).Height();
		}
		[SmokeMethod("setPageBreakPolicy", "(PageBreakFlags)", "$")]
		public void SetPageBreakPolicy(int flags) {
			((QTextFrameFormat) interceptor).SetPageBreakPolicy(flags);
		}
		[SmokeMethod("pageBreakPolicy", "() const", "")]
		public int PageBreakPolicy() {
			return ((QTextFrameFormat) interceptor).PageBreakPolicy();
		}
		~QTextFrameFormat() {
			DisposeQTextFrameFormat();
		}
		public void Dispose() {
			DisposeQTextFrameFormat();
		}
		[SmokeMethod("~QTextFrameFormat", "()", "")]
		private void DisposeQTextFrameFormat() {
			((QTextFrameFormat) interceptor).DisposeQTextFrameFormat();
		}
	}
}
