//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QTextFrameFormat")]
	public class QTextFrameFormat : QTextFormat, IDisposable {
 		protected QTextFrameFormat(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(QTextFrameFormat), "QTextFrameFormat", this);
		}
		public enum Position {
			InFlow = 0,
			FloatLeft = 1,
			FloatRight = 2,
		}
		public QTextFrameFormat() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QTextFrameFormat", "QTextFrameFormat()", typeof(void));
		}
		public bool IsValid() {
			return (bool) interceptor.Invoke("isValid", "isValid() const", typeof(bool));
		}
		public void SetPosition(QTextFrameFormat.Position f) {
			interceptor.Invoke("setPosition$", "setPosition(QTextFrameFormat::Position)", typeof(void), typeof(QTextFrameFormat.Position), f);
		}
		public QTextFrameFormat.Position position() {
			return (QTextFrameFormat.Position) interceptor.Invoke("position", "position() const", typeof(QTextFrameFormat.Position));
		}
		public void SetBorder(double border) {
			interceptor.Invoke("setBorder$", "setBorder(qreal)", typeof(void), typeof(double), border);
		}
		public double Border() {
			return (double) interceptor.Invoke("border", "border() const", typeof(double));
		}
		public void SetMargin(double margin) {
			interceptor.Invoke("setMargin$", "setMargin(qreal)", typeof(void), typeof(double), margin);
		}
		public double Margin() {
			return (double) interceptor.Invoke("margin", "margin() const", typeof(double));
		}
		public void SetPadding(double padding) {
			interceptor.Invoke("setPadding$", "setPadding(qreal)", typeof(void), typeof(double), padding);
		}
		public double Padding() {
			return (double) interceptor.Invoke("padding", "padding() const", typeof(double));
		}
		public void SetWidth(double width) {
			interceptor.Invoke("setWidth$", "setWidth(qreal)", typeof(void), typeof(double), width);
		}
		public void SetWidth(QTextLength length) {
			interceptor.Invoke("setWidth#", "setWidth(const QTextLength&)", typeof(void), typeof(QTextLength), length);
		}
		public QTextLength Width() {
			return (QTextLength) interceptor.Invoke("width", "width() const", typeof(QTextLength));
		}
		public void SetHeight(double height) {
			interceptor.Invoke("setHeight$", "setHeight(qreal)", typeof(void), typeof(double), height);
		}
		public void SetHeight(QTextLength height) {
			interceptor.Invoke("setHeight#", "setHeight(const QTextLength&)", typeof(void), typeof(QTextLength), height);
		}
		public QTextLength Height() {
			return (QTextLength) interceptor.Invoke("height", "height() const", typeof(QTextLength));
		}
		public void SetPageBreakPolicy(int flags) {
			interceptor.Invoke("setPageBreakPolicy$", "setPageBreakPolicy(PageBreakFlags)", typeof(void), typeof(int), flags);
		}
		public int PageBreakPolicy() {
			return (int) interceptor.Invoke("pageBreakPolicy", "pageBreakPolicy() const", typeof(int));
		}
		~QTextFrameFormat() {
			interceptor.Invoke("~QTextFrameFormat", "~QTextFrameFormat()", typeof(void));
		}
		public void Dispose() {
			interceptor.Invoke("~QTextFrameFormat", "~QTextFrameFormat()", typeof(void));
		}
	}
}
