//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	/// See <see cref="IQLineEditSignals"></see> for signals emitted by QLineEdit
	[SmokeClass("QLineEdit")]
	public class QLineEdit : QWidget, IDisposable {
 		protected QLineEdit(Type dummy) : base((Type) null) {}
		[SmokeClass("QLineEdit")]
		interface IQLineEditProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QLineEdit), this);
			interceptor = (QLineEdit) realProxy.GetTransparentProxy();
		}
		private static IQLineEditProxy staticInterceptor = null;
		static QLineEdit() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQLineEditProxy), null);
			staticInterceptor = (IQLineEditProxy) realProxy.GetTransparentProxy();
		}
		public enum EchoMode {
			Normal = 0,
			NoEcho = 1,
			Password = 2,
			PasswordEchoOnEdit = 3,
		}
		[Q_PROPERTY("QString", "inputMask")]
		public string InputMask {
			[SmokeMethod("inputMask", "()", "")]
			get { return ((QLineEdit) interceptor).InputMask; }
			[SmokeMethod("setInputMask", "(QString)", "$")]
			set { ((QLineEdit) interceptor).InputMask = value; }
		}
		[Q_PROPERTY("QString", "text")]
		public string Text {
			[SmokeMethod("text", "()", "")]
			get { return ((QLineEdit) interceptor).Text; }
			[SmokeMethod("setText", "(QString)", "$")]
			set { ((QLineEdit) interceptor).Text = value; }
		}
		[Q_PROPERTY("int", "maxLength")]
		public int MaxLength {
			[SmokeMethod("maxLength", "()", "")]
			get { return ((QLineEdit) interceptor).MaxLength; }
			[SmokeMethod("setMaxLength", "(int)", "$")]
			set { ((QLineEdit) interceptor).MaxLength = value; }
		}
		[Q_PROPERTY("bool", "frame")]
		public bool Frame {
			[SmokeMethod("hasFrame", "()", "")]
			get { return ((QLineEdit) interceptor).Frame; }
			[SmokeMethod("setFrame", "(bool)", "$")]
			set { ((QLineEdit) interceptor).Frame = value; }
		}
		[Q_PROPERTY("QLineEdit::EchoMode", "echoMode")]
		public QLineEdit.EchoMode echoMode {
			[SmokeMethod("echoMode", "()", "")]
			get { return ((QLineEdit) interceptor).echoMode; }
			[SmokeMethod("setEchoMode", "(QLineEdit::EchoMode)", "$")]
			set { ((QLineEdit) interceptor).echoMode = value; }
		}
		[Q_PROPERTY("QString", "displayText")]
		public string DisplayText {
			[SmokeMethod("displayText", "()", "")]
			get { return ((QLineEdit) interceptor).DisplayText; }
		}
		[Q_PROPERTY("int", "cursorPosition")]
		public int CursorPosition {
			[SmokeMethod("cursorPosition", "()", "")]
			get { return ((QLineEdit) interceptor).CursorPosition; }
			[SmokeMethod("setCursorPosition", "(int)", "$")]
			set { ((QLineEdit) interceptor).CursorPosition = value; }
		}
		[Q_PROPERTY("Qt::Alignment", "alignment")]
		public int Alignment {
			[SmokeMethod("alignment", "()", "")]
			get { return ((QLineEdit) interceptor).Alignment; }
			[SmokeMethod("setAlignment", "(Qt::Alignment)", "$")]
			set { ((QLineEdit) interceptor).Alignment = value; }
		}
		[Q_PROPERTY("bool", "modified")]
		public bool Modified {
			[SmokeMethod("isModified", "()", "")]
			get { return ((QLineEdit) interceptor).Modified; }
			[SmokeMethod("setModified", "(bool)", "$")]
			set { ((QLineEdit) interceptor).Modified = value; }
		}
		[Q_PROPERTY("bool", "hasSelectedText")]
		public bool HasSelectedText {
			[SmokeMethod("hasSelectedText", "()", "")]
			get { return ((QLineEdit) interceptor).HasSelectedText; }
		}
		[Q_PROPERTY("QString", "selectedText")]
		public string SelectedText {
			[SmokeMethod("selectedText", "()", "")]
			get { return ((QLineEdit) interceptor).SelectedText; }
		}
		[Q_PROPERTY("bool", "dragEnabled")]
		public bool DragEnabled {
			[SmokeMethod("dragEnabled", "()", "")]
			get { return ((QLineEdit) interceptor).DragEnabled; }
			[SmokeMethod("setDragEnabled", "(bool)", "$")]
			set { ((QLineEdit) interceptor).DragEnabled = value; }
		}
		[Q_PROPERTY("bool", "readOnly")]
		public bool ReadOnly {
			[SmokeMethod("isReadOnly", "()", "")]
			get { return ((QLineEdit) interceptor).ReadOnly; }
			[SmokeMethod("setReadOnly", "(bool)", "$")]
			set { ((QLineEdit) interceptor).ReadOnly = value; }
		}
		[Q_PROPERTY("bool", "undoAvailable")]
		public bool UndoAvailable {
			[SmokeMethod("isUndoAvailable", "()", "")]
			get { return ((QLineEdit) interceptor).UndoAvailable; }
		}
		[Q_PROPERTY("bool", "redoAvailable")]
		public bool RedoAvailable {
			[SmokeMethod("isRedoAvailable", "()", "")]
			get { return ((QLineEdit) interceptor).RedoAvailable; }
		}
		[Q_PROPERTY("bool", "acceptableInput")]
		public bool AcceptableInput {
			[SmokeMethod("hasAcceptableInput", "()", "")]
			get { return ((QLineEdit) interceptor).AcceptableInput; }
		}
		public QLineEdit(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQLineEdit(parent);
		}
		[SmokeMethod("QLineEdit", "(QWidget*)", "#")]
		private void NewQLineEdit(QWidget parent) {
			((QLineEdit) interceptor).NewQLineEdit(parent);
		}
		public QLineEdit() : this((Type) null) {
			CreateProxy();
			NewQLineEdit();
		}
		[SmokeMethod("QLineEdit", "()", "")]
		private void NewQLineEdit() {
			((QLineEdit) interceptor).NewQLineEdit();
		}
		public QLineEdit(string arg1, QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQLineEdit(arg1,parent);
		}
		[SmokeMethod("QLineEdit", "(const QString&, QWidget*)", "$#")]
		private void NewQLineEdit(string arg1, QWidget parent) {
			((QLineEdit) interceptor).NewQLineEdit(arg1,parent);
		}
		public QLineEdit(string arg1) : this((Type) null) {
			CreateProxy();
			NewQLineEdit(arg1);
		}
		[SmokeMethod("QLineEdit", "(const QString&)", "$")]
		private void NewQLineEdit(string arg1) {
			((QLineEdit) interceptor).NewQLineEdit(arg1);
		}
		[SmokeMethod("hasFrame", "() const", "")]
		public bool HasFrame() {
			return ((QLineEdit) interceptor).HasFrame();
		}
		[SmokeMethod("isReadOnly", "() const", "")]
		public bool IsReadOnly() {
			return ((QLineEdit) interceptor).IsReadOnly();
		}
		[SmokeMethod("setValidator", "(const QValidator*)", "#")]
		public void SetValidator(QValidator arg1) {
			((QLineEdit) interceptor).SetValidator(arg1);
		}
		[SmokeMethod("validator", "() const", "")]
		public QValidator Validator() {
			return ((QLineEdit) interceptor).Validator();
		}
		[SmokeMethod("setCompleter", "(QCompleter*)", "#")]
		public void SetCompleter(QCompleter completer) {
			((QLineEdit) interceptor).SetCompleter(completer);
		}
		[SmokeMethod("completer", "() const", "")]
		public QCompleter Completer() {
			return ((QLineEdit) interceptor).Completer();
		}
		[SmokeMethod("sizeHint", "() const", "")]
		public override QSize SizeHint() {
			return ((QLineEdit) interceptor).SizeHint();
		}
		[SmokeMethod("minimumSizeHint", "() const", "")]
		public override QSize MinimumSizeHint() {
			return ((QLineEdit) interceptor).MinimumSizeHint();
		}
		[SmokeMethod("cursorPositionAt", "(const QPoint&)", "#")]
		public int CursorPositionAt(QPoint pos) {
			return ((QLineEdit) interceptor).CursorPositionAt(pos);
		}
		[SmokeMethod("cursorForward", "(bool, int)", "$$")]
		public void CursorForward(bool mark, int steps) {
			((QLineEdit) interceptor).CursorForward(mark,steps);
		}
		[SmokeMethod("cursorForward", "(bool)", "$")]
		public void CursorForward(bool mark) {
			((QLineEdit) interceptor).CursorForward(mark);
		}
		[SmokeMethod("cursorBackward", "(bool, int)", "$$")]
		public void CursorBackward(bool mark, int steps) {
			((QLineEdit) interceptor).CursorBackward(mark,steps);
		}
		[SmokeMethod("cursorBackward", "(bool)", "$")]
		public void CursorBackward(bool mark) {
			((QLineEdit) interceptor).CursorBackward(mark);
		}
		[SmokeMethod("cursorWordForward", "(bool)", "$")]
		public void CursorWordForward(bool mark) {
			((QLineEdit) interceptor).CursorWordForward(mark);
		}
		[SmokeMethod("cursorWordBackward", "(bool)", "$")]
		public void CursorWordBackward(bool mark) {
			((QLineEdit) interceptor).CursorWordBackward(mark);
		}
		[SmokeMethod("backspace", "()", "")]
		public void Backspace() {
			((QLineEdit) interceptor).Backspace();
		}
		[SmokeMethod("del", "()", "")]
		public void Del() {
			((QLineEdit) interceptor).Del();
		}
		[SmokeMethod("home", "(bool)", "$")]
		public void Home(bool mark) {
			((QLineEdit) interceptor).Home(mark);
		}
		[SmokeMethod("end", "(bool)", "$")]
		public void End(bool mark) {
			((QLineEdit) interceptor).End(mark);
		}
		[SmokeMethod("isModified", "() const", "")]
		public bool IsModified() {
			return ((QLineEdit) interceptor).IsModified();
		}
		[SmokeMethod("setSelection", "(int, int)", "$$")]
		public void SetSelection(int arg1, int arg2) {
			((QLineEdit) interceptor).SetSelection(arg1,arg2);
		}
		[SmokeMethod("selectionStart", "() const", "")]
		public int SelectionStart() {
			return ((QLineEdit) interceptor).SelectionStart();
		}
		[SmokeMethod("isUndoAvailable", "() const", "")]
		public bool IsUndoAvailable() {
			return ((QLineEdit) interceptor).IsUndoAvailable();
		}
		[SmokeMethod("isRedoAvailable", "() const", "")]
		public bool IsRedoAvailable() {
			return ((QLineEdit) interceptor).IsRedoAvailable();
		}
		[SmokeMethod("hasAcceptableInput", "() const", "")]
		public bool HasAcceptableInput() {
			return ((QLineEdit) interceptor).HasAcceptableInput();
		}
		[SmokeMethod("deselect", "()", "")]
		public void Deselect() {
			((QLineEdit) interceptor).Deselect();
		}
		[SmokeMethod("insert", "(const QString&)", "$")]
		public void Insert(string arg1) {
			((QLineEdit) interceptor).Insert(arg1);
		}
		[SmokeMethod("createStandardContextMenu", "()", "")]
		public QMenu CreateStandardContextMenu() {
			return ((QLineEdit) interceptor).CreateStandardContextMenu();
		}
		[SmokeMethod("inputMethodQuery", "(Qt::InputMethodQuery) const", "$")]
		public override QVariant InputMethodQuery(Qt.InputMethodQuery arg1) {
			return ((QLineEdit) interceptor).InputMethodQuery(arg1);
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		public new virtual bool Event(QEvent arg1) {
			return ((QLineEdit) interceptor).Event(arg1);
		}
		[Q_SLOT("void clear()")]
		[SmokeMethod("clear", "()", "")]
		public void Clear() {
			((QLineEdit) interceptor).Clear();
		}
		[Q_SLOT("void selectAll()")]
		[SmokeMethod("selectAll", "()", "")]
		public void SelectAll() {
			((QLineEdit) interceptor).SelectAll();
		}
		[Q_SLOT("void undo()")]
		[SmokeMethod("undo", "()", "")]
		public void Undo() {
			((QLineEdit) interceptor).Undo();
		}
		[Q_SLOT("void redo()")]
		[SmokeMethod("redo", "()", "")]
		public void Redo() {
			((QLineEdit) interceptor).Redo();
		}
		[Q_SLOT("void cut()")]
		[SmokeMethod("cut", "()", "")]
		public void Cut() {
			((QLineEdit) interceptor).Cut();
		}
		[Q_SLOT("void copy() const")]
		[SmokeMethod("copy", "() const", "")]
		public void Copy() {
			((QLineEdit) interceptor).Copy();
		}
		[Q_SLOT("void paste()")]
		[SmokeMethod("paste", "()", "")]
		public void Paste() {
			((QLineEdit) interceptor).Paste();
		}
		[SmokeMethod("mousePressEvent", "(QMouseEvent*)", "#")]
		protected override void MousePressEvent(QMouseEvent arg1) {
			((QLineEdit) interceptor).MousePressEvent(arg1);
		}
		[SmokeMethod("mouseMoveEvent", "(QMouseEvent*)", "#")]
		protected override void MouseMoveEvent(QMouseEvent arg1) {
			((QLineEdit) interceptor).MouseMoveEvent(arg1);
		}
		[SmokeMethod("mouseReleaseEvent", "(QMouseEvent*)", "#")]
		protected override void MouseReleaseEvent(QMouseEvent arg1) {
			((QLineEdit) interceptor).MouseReleaseEvent(arg1);
		}
		[SmokeMethod("mouseDoubleClickEvent", "(QMouseEvent*)", "#")]
		protected override void MouseDoubleClickEvent(QMouseEvent arg1) {
			((QLineEdit) interceptor).MouseDoubleClickEvent(arg1);
		}
		[SmokeMethod("keyPressEvent", "(QKeyEvent*)", "#")]
		protected override void KeyPressEvent(QKeyEvent arg1) {
			((QLineEdit) interceptor).KeyPressEvent(arg1);
		}
		[SmokeMethod("focusInEvent", "(QFocusEvent*)", "#")]
		protected override void FocusInEvent(QFocusEvent arg1) {
			((QLineEdit) interceptor).FocusInEvent(arg1);
		}
		[SmokeMethod("focusOutEvent", "(QFocusEvent*)", "#")]
		protected override void FocusOutEvent(QFocusEvent arg1) {
			((QLineEdit) interceptor).FocusOutEvent(arg1);
		}
		[SmokeMethod("paintEvent", "(QPaintEvent*)", "#")]
		protected override void PaintEvent(QPaintEvent arg1) {
			((QLineEdit) interceptor).PaintEvent(arg1);
		}
		[SmokeMethod("dragEnterEvent", "(QDragEnterEvent*)", "#")]
		protected override void DragEnterEvent(QDragEnterEvent arg1) {
			((QLineEdit) interceptor).DragEnterEvent(arg1);
		}
		[SmokeMethod("dragMoveEvent", "(QDragMoveEvent*)", "#")]
		protected override void DragMoveEvent(QDragMoveEvent e) {
			((QLineEdit) interceptor).DragMoveEvent(e);
		}
		[SmokeMethod("dragLeaveEvent", "(QDragLeaveEvent*)", "#")]
		protected override void DragLeaveEvent(QDragLeaveEvent e) {
			((QLineEdit) interceptor).DragLeaveEvent(e);
		}
		[SmokeMethod("dropEvent", "(QDropEvent*)", "#")]
		protected override void DropEvent(QDropEvent arg1) {
			((QLineEdit) interceptor).DropEvent(arg1);
		}
		[SmokeMethod("changeEvent", "(QEvent*)", "#")]
		protected override void ChangeEvent(QEvent arg1) {
			((QLineEdit) interceptor).ChangeEvent(arg1);
		}
		[SmokeMethod("contextMenuEvent", "(QContextMenuEvent*)", "#")]
		protected override void ContextMenuEvent(QContextMenuEvent arg1) {
			((QLineEdit) interceptor).ContextMenuEvent(arg1);
		}
		[SmokeMethod("inputMethodEvent", "(QInputMethodEvent*)", "#")]
		protected override void InputMethodEvent(QInputMethodEvent arg1) {
			((QLineEdit) interceptor).InputMethodEvent(arg1);
		}
		~QLineEdit() {
			DisposeQLineEdit();
		}
		public new void Dispose() {
			DisposeQLineEdit();
		}
		[SmokeMethod("~QLineEdit", "()", "")]
		private void DisposeQLineEdit() {
			((QLineEdit) interceptor).DisposeQLineEdit();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQLineEditSignals Emit {
			get { return (IQLineEditSignals) Q_EMIT; }
		}
	}

	public interface IQLineEditSignals : IQWidgetSignals {
		[Q_SIGNAL("void textChanged(const QString&)")]
		void TextChanged(string arg1);
		[Q_SIGNAL("void textEdited(const QString&)")]
		void TextEdited(string arg1);
		[Q_SIGNAL("void cursorPositionChanged(int, int)")]
		void CursorPositionChanged(int arg1, int arg2);
		[Q_SIGNAL("void returnPressed()")]
		void ReturnPressed();
		[Q_SIGNAL("void editingFinished()")]
		void EditingFinished();
		[Q_SIGNAL("void selectionChanged()")]
		void SelectionChanged();
	}
}
