//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;

	[SmokeClass("QDoubleValidator")]
	public class QDoubleValidator : QValidator, IDisposable {
 		protected QDoubleValidator(Type dummy) : base((Type) null) {}
		interface IQDoubleValidatorProxy {
			[SmokeMethod("tr$$", "(const char*, const char*)")]
			string Tr(string s, string c);
			[SmokeMethod("tr$", "(const char*)")]
			string Tr(string s);
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDoubleValidator), this);
			_interceptor = (QDoubleValidator) realProxy.GetTransparentProxy();
		}
		private QDoubleValidator ProxyQDoubleValidator() {
			return (QDoubleValidator) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QDoubleValidator() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDoubleValidatorProxy), null);
			_staticInterceptor = (IQDoubleValidatorProxy) realProxy.GetTransparentProxy();
		}
		private static IQDoubleValidatorProxy StaticQDoubleValidator() {
			return (IQDoubleValidatorProxy) _staticInterceptor;
		}

		[Q_PROPERTY("double", "bottom")]
		public double Bottom {
			get {
				return Property("bottom").Value<double>();
			}
			set {
				SetProperty("bottom", QVariant.FromValue<double>(value));
			}
		}
		[Q_PROPERTY("double", "top")]
		public double Top {
			get {
				return Property("top").Value<double>();
			}
			set {
				SetProperty("top", QVariant.FromValue<double>(value));
			}
		}
		[Q_PROPERTY("int", "decimals")]
		public int Decimals {
			get {
				return Property("decimals").Value<int>();
			}
			set {
				SetProperty("decimals", QVariant.FromValue<int>(value));
			}
		}
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QDoubleValidator(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQDoubleValidator(parent);
		}
		[SmokeMethod("QDoubleValidator#", "(QObject*)")]
		private void NewQDoubleValidator(QObject parent) {
			ProxyQDoubleValidator().NewQDoubleValidator(parent);
		}
		public QDoubleValidator(double bottom, double top, int decimals, QObject parent) : this((Type) null) {
			CreateProxy();
			NewQDoubleValidator(bottom,top,decimals,parent);
		}
		[SmokeMethod("QDoubleValidator$$$$", "(double, double, int, QObject*)")]
		private void NewQDoubleValidator(double bottom, double top, int decimals, QObject parent) {
			ProxyQDoubleValidator().NewQDoubleValidator(bottom,top,decimals,parent);
		}
		[SmokeMethod("validate$$", "(QString&, int&) const")]
		public new int Validate(StringBuilder arg1, out int arg2) {
			return ProxyQDoubleValidator().Validate(arg1,out arg2);
		}
		[SmokeMethod("setRange$$$", "(double, double, int)")]
		public virtual void SetRange(double bottom, double top, int decimals) {
			ProxyQDoubleValidator().SetRange(bottom,top,decimals);
		}
		[SmokeMethod("setRange$$", "(double, double)")]
		public virtual void SetRange(double bottom, double top) {
			ProxyQDoubleValidator().SetRange(bottom,top);
		}
		public static new string Tr(string s, string c) {
			return StaticQDoubleValidator().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQDoubleValidator().Tr(s);
		}
		~QDoubleValidator() {
			DisposeQDoubleValidator();
		}
		public new void Dispose() {
			DisposeQDoubleValidator();
		}
		[SmokeMethod("~QDoubleValidator", "()")]
		private void DisposeQDoubleValidator() {
			ProxyQDoubleValidator().DisposeQDoubleValidator();
		}
		protected new IQDoubleValidatorSignals Emit {
			get {
				return (IQDoubleValidatorSignals) Q_EMIT;
			}
		}
	}

	public interface IQDoubleValidatorSignals : IQValidatorSignals {
	}
}
