//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	/// See <see cref="IQProgressBarSignals"></see> for signals emitted by QProgressBar
	[SmokeClass("QProgressBar")]
	public class QProgressBar : QWidget, IDisposable {
 		protected QProgressBar(Type dummy) : base((Type) null) {}
		[SmokeClass("QProgressBar")]
		interface IQProgressBarProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QProgressBar), this);
			interceptor = (QProgressBar) realProxy.GetTransparentProxy();
		}
		private static IQProgressBarProxy staticInterceptor = null;
		static QProgressBar() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQProgressBarProxy), null);
			staticInterceptor = (IQProgressBarProxy) realProxy.GetTransparentProxy();
		}
		public enum Direction {
			TopToBottom = 0,
			BottomToTop = 1,
		}
		[Q_PROPERTY("int", "minimum")]
		public int Minimum {
			[SmokeMethod("minimum", "()", "")]
			get { return ((QProgressBar) interceptor).Minimum; }
			[SmokeMethod("setMinimum", "(int)", "$")]
			set { ((QProgressBar) interceptor).Minimum = value; }
		}
		[Q_PROPERTY("int", "maximum")]
		public int Maximum {
			[SmokeMethod("maximum", "()", "")]
			get { return ((QProgressBar) interceptor).Maximum; }
			[SmokeMethod("setMaximum", "(int)", "$")]
			set { ((QProgressBar) interceptor).Maximum = value; }
		}
		[Q_PROPERTY("QString", "text")]
		public string Text {
			[SmokeMethod("text", "()", "")]
			get { return ((QProgressBar) interceptor).Text; }
		}
		[Q_PROPERTY("int", "value")]
		public int Value {
			[SmokeMethod("value", "()", "")]
			get { return ((QProgressBar) interceptor).Value; }
			[SmokeMethod("setValue", "(int)", "$")]
			set { ((QProgressBar) interceptor).Value = value; }
		}
		[Q_PROPERTY("Qt::Alignment", "alignment")]
		public int Alignment {
			[SmokeMethod("alignment", "()", "")]
			get { return ((QProgressBar) interceptor).Alignment; }
			[SmokeMethod("setAlignment", "(Qt::Alignment)", "$")]
			set { ((QProgressBar) interceptor).Alignment = value; }
		}
		[Q_PROPERTY("bool", "textVisible")]
		public bool TextVisible {
			[SmokeMethod("isTextVisible", "()", "")]
			get { return ((QProgressBar) interceptor).TextVisible; }
			[SmokeMethod("setTextVisible", "(bool)", "$")]
			set { ((QProgressBar) interceptor).TextVisible = value; }
		}
		[Q_PROPERTY("Qt::Orientation", "orientation")]
		public Qt.Orientation Orientation {
			[SmokeMethod("orientation", "()", "")]
			get { return ((QProgressBar) interceptor).Orientation; }
			[SmokeMethod("setOrientation", "(Qt::Orientation)", "$")]
			set { ((QProgressBar) interceptor).Orientation = value; }
		}
		[Q_PROPERTY("bool", "invertedAppearance")]
		public bool InvertedAppearance {
			[SmokeMethod("invertedAppearance", "()", "")]
			get { return ((QProgressBar) interceptor).InvertedAppearance; }
			[SmokeMethod("setInvertedAppearance", "(bool)", "$")]
			set { ((QProgressBar) interceptor).InvertedAppearance = value; }
		}
		[Q_PROPERTY("QProgressBar::Direction", "textDirection")]
		public QProgressBar.Direction TextDirection {
			[SmokeMethod("textDirection", "()", "")]
			get { return ((QProgressBar) interceptor).TextDirection; }
			[SmokeMethod("setTextDirection", "(QProgressBar::Direction)", "$")]
			set { ((QProgressBar) interceptor).TextDirection = value; }
		}
		[Q_PROPERTY("QString", "format")]
		public string Format {
			[SmokeMethod("format", "()", "")]
			get { return ((QProgressBar) interceptor).Format; }
			[SmokeMethod("setFormat", "(QString)", "$")]
			set { ((QProgressBar) interceptor).Format = value; }
		}
		public QProgressBar(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQProgressBar(parent);
		}
		[SmokeMethod("QProgressBar", "(QWidget*)", "#")]
		private void NewQProgressBar(QWidget parent) {
			((QProgressBar) interceptor).NewQProgressBar(parent);
		}
		public QProgressBar() : this((Type) null) {
			CreateProxy();
			NewQProgressBar();
		}
		[SmokeMethod("QProgressBar", "()", "")]
		private void NewQProgressBar() {
			((QProgressBar) interceptor).NewQProgressBar();
		}
		[SmokeMethod("setRange", "(int, int)", "$$")]
		public void SetRange(int minimum, int maximum) {
			((QProgressBar) interceptor).SetRange(minimum,maximum);
		}
		[SmokeMethod("isTextVisible", "() const", "")]
		public bool IsTextVisible() {
			return ((QProgressBar) interceptor).IsTextVisible();
		}
		[SmokeMethod("sizeHint", "() const", "")]
		public override QSize SizeHint() {
			return ((QProgressBar) interceptor).SizeHint();
		}
		[SmokeMethod("minimumSizeHint", "() const", "")]
		public override QSize MinimumSizeHint() {
			return ((QProgressBar) interceptor).MinimumSizeHint();
		}
		[Q_SLOT("void reset()")]
		[SmokeMethod("reset", "()", "")]
		public void Reset() {
			((QProgressBar) interceptor).Reset();
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		protected override bool Event(QEvent e) {
			return ((QProgressBar) interceptor).Event(e);
		}
		[SmokeMethod("paintEvent", "(QPaintEvent*)", "#")]
		protected override void PaintEvent(QPaintEvent arg1) {
			((QProgressBar) interceptor).PaintEvent(arg1);
		}
		~QProgressBar() {
			DisposeQProgressBar();
		}
		public new void Dispose() {
			DisposeQProgressBar();
		}
		[SmokeMethod("~QProgressBar", "()", "")]
		private void DisposeQProgressBar() {
			((QProgressBar) interceptor).DisposeQProgressBar();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQProgressBarSignals Emit {
			get { return (IQProgressBarSignals) Q_EMIT; }
		}
	}

	public interface IQProgressBarSignals : IQWidgetSignals {
		[Q_SIGNAL("void valueChanged(int)")]
		void ValueChanged(int value);
	}
}
