//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	/// See <see cref="IQProgressBarSignals"></see> for signals emitted by QProgressBar
	[SmokeClass("QProgressBar")]
	public class QProgressBar : QWidget, IDisposable {
 		protected QProgressBar(Type dummy) : base((Type) null) {}
		[SmokeClass("QProgressBar")]
		interface IQProgressBarProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QProgressBar), this);
			_interceptor = (QProgressBar) realProxy.GetTransparentProxy();
		}
		private QProgressBar ProxyQProgressBar() {
			return (QProgressBar) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QProgressBar() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQProgressBarProxy), null);
			_staticInterceptor = (IQProgressBarProxy) realProxy.GetTransparentProxy();
		}
		private static IQProgressBarProxy StaticQProgressBar() {
			return (IQProgressBarProxy) _staticInterceptor;
		}
		public enum Direction {
			TopToBottom = 0,
			BottomToTop = 1,
		}
		[Q_PROPERTY("int", "minimum")]
		public int Minimum {
			get { return Property("minimum").Value<int>(); }
			set { SetProperty("minimum", QVariant.FromValue<int>(value)); }
		}
		[Q_PROPERTY("int", "maximum")]
		public int Maximum {
			get { return Property("maximum").Value<int>(); }
			set { SetProperty("maximum", QVariant.FromValue<int>(value)); }
		}
		[Q_PROPERTY("QString", "text")]
		public string Text {
			get { return Property("text").Value<string>(); }
		}
		[Q_PROPERTY("int", "value")]
		public int Value {
			get { return Property("value").Value<int>(); }
			set { SetProperty("value", QVariant.FromValue<int>(value)); }
		}
		[Q_PROPERTY("Qt::Alignment", "alignment")]
		public int Alignment {
			get { return Property("alignment").Value<int>(); }
			set { SetProperty("alignment", QVariant.FromValue<int>(value)); }
		}
		[Q_PROPERTY("bool", "textVisible")]
		public bool TextVisible {
			get { return Property("textVisible").Value<bool>(); }
			set { SetProperty("textVisible", QVariant.FromValue<bool>(value)); }
		}
		[Q_PROPERTY("Qt::Orientation", "orientation")]
		public Qt.Orientation Orientation {
			get { return Property("orientation").Value<Qt.Orientation>(); }
			set { SetProperty("orientation", QVariant.FromValue<Qt.Orientation>(value)); }
		}
		[Q_PROPERTY("bool", "invertedAppearance")]
		public bool InvertedAppearance {
			get { return Property("invertedAppearance").Value<bool>(); }
			set { SetProperty("invertedAppearance", QVariant.FromValue<bool>(value)); }
		}
		[Q_PROPERTY("QProgressBar::Direction", "textDirection")]
		public QProgressBar.Direction TextDirection {
			get { return Property("textDirection").Value<QProgressBar.Direction>(); }
			set { SetProperty("textDirection", QVariant.FromValue<QProgressBar.Direction>(value)); }
		}
		[Q_PROPERTY("QString", "format")]
		public string Format {
			get { return Property("format").Value<string>(); }
			set { SetProperty("format", QVariant.FromValue<string>(value)); }
		}
		public QProgressBar(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQProgressBar(parent);
		}
		[SmokeMethod("QProgressBar", "(QWidget*)", "#")]
		private void NewQProgressBar(QWidget parent) {
			ProxyQProgressBar().NewQProgressBar(parent);
		}
		public QProgressBar() : this((Type) null) {
			CreateProxy();
			NewQProgressBar();
		}
		[SmokeMethod("QProgressBar", "()", "")]
		private void NewQProgressBar() {
			ProxyQProgressBar().NewQProgressBar();
		}
		[SmokeMethod("setRange", "(int, int)", "$$")]
		public void SetRange(int minimum, int maximum) {
			ProxyQProgressBar().SetRange(minimum,maximum);
		}
		[SmokeMethod("isTextVisible", "() const", "")]
		public bool IsTextVisible() {
			return ProxyQProgressBar().IsTextVisible();
		}
		[SmokeMethod("sizeHint", "() const", "")]
		public override QSize SizeHint() {
			return ProxyQProgressBar().SizeHint();
		}
		[SmokeMethod("minimumSizeHint", "() const", "")]
		public override QSize MinimumSizeHint() {
			return ProxyQProgressBar().MinimumSizeHint();
		}
		[Q_SLOT("void reset()")]
		[SmokeMethod("reset", "()", "")]
		public void Reset() {
			ProxyQProgressBar().Reset();
		}
		public static string Tr(string s, string c) {
			return StaticQProgressBar().Tr(s,c);
		}
		public static string Tr(string s) {
			return StaticQProgressBar().Tr(s);
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		protected override bool Event(QEvent e) {
			return ProxyQProgressBar().Event(e);
		}
		[SmokeMethod("paintEvent", "(QPaintEvent*)", "#")]
		protected override void PaintEvent(QPaintEvent arg1) {
			ProxyQProgressBar().PaintEvent(arg1);
		}
		~QProgressBar() {
			DisposeQProgressBar();
		}
		public new void Dispose() {
			DisposeQProgressBar();
		}
		[SmokeMethod("~QProgressBar", "()", "")]
		private void DisposeQProgressBar() {
			ProxyQProgressBar().DisposeQProgressBar();
		}
		protected new IQProgressBarSignals Emit {
			get { return (IQProgressBarSignals) Q_EMIT; }
		}
	}

	public interface IQProgressBarSignals : IQWidgetSignals {
		[Q_SIGNAL("void valueChanged(int)")]
		void ValueChanged(int value);
	}
}
