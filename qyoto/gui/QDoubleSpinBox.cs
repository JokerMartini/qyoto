//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;

	/// See <see cref="IQDoubleSpinBoxSignals"></see> for signals emitted by QDoubleSpinBox
	[SmokeClass("QDoubleSpinBox")]
	public class QDoubleSpinBox : QAbstractSpinBox, IDisposable {
 		protected QDoubleSpinBox(Type dummy) : base((Type) null) {}
		[SmokeClass("QDoubleSpinBox")]
		interface IQDoubleSpinBoxProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDoubleSpinBox), this);
			interceptor = (QDoubleSpinBox) realProxy.GetTransparentProxy();
		}
		private static IQDoubleSpinBoxProxy staticInterceptor = null;
		static QDoubleSpinBox() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDoubleSpinBoxProxy), null);
			staticInterceptor = (IQDoubleSpinBoxProxy) realProxy.GetTransparentProxy();
		}
		[Q_PROPERTY("QString", "prefix")]
		public string Prefix {
			[SmokeMethod("prefix", "()", "")]
			get { return ((QDoubleSpinBox) interceptor).Prefix; }
			[SmokeMethod("setPrefix", "(QString)", "$")]
			set { ((QDoubleSpinBox) interceptor).Prefix = value; }
		}
		[Q_PROPERTY("QString", "suffix")]
		public string Suffix {
			[SmokeMethod("suffix", "()", "")]
			get { return ((QDoubleSpinBox) interceptor).Suffix; }
			[SmokeMethod("setSuffix", "(QString)", "$")]
			set { ((QDoubleSpinBox) interceptor).Suffix = value; }
		}
		[Q_PROPERTY("QString", "cleanText")]
		public string CleanText {
			[SmokeMethod("cleanText", "()", "")]
			get { return ((QDoubleSpinBox) interceptor).CleanText; }
		}
		[Q_PROPERTY("int", "decimals")]
		public int Decimals {
			[SmokeMethod("decimals", "()", "")]
			get { return ((QDoubleSpinBox) interceptor).Decimals; }
			[SmokeMethod("setDecimals", "(int)", "$")]
			set { ((QDoubleSpinBox) interceptor).Decimals = value; }
		}
		[Q_PROPERTY("double", "maximum")]
		public double Maximum {
			[SmokeMethod("maximum", "()", "")]
			get { return ((QDoubleSpinBox) interceptor).Maximum; }
			[SmokeMethod("setMaximum", "(double)", "$")]
			set { ((QDoubleSpinBox) interceptor).Maximum = value; }
		}
		[Q_PROPERTY("double", "minimum")]
		public double Minimum {
			[SmokeMethod("minimum", "()", "")]
			get { return ((QDoubleSpinBox) interceptor).Minimum; }
			[SmokeMethod("setMinimum", "(double)", "$")]
			set { ((QDoubleSpinBox) interceptor).Minimum = value; }
		}
		[Q_PROPERTY("double", "singleStep")]
		public double SingleStep {
			[SmokeMethod("singleStep", "()", "")]
			get { return ((QDoubleSpinBox) interceptor).SingleStep; }
			[SmokeMethod("setSingleStep", "(double)", "$")]
			set { ((QDoubleSpinBox) interceptor).SingleStep = value; }
		}
		[Q_PROPERTY("double", "value")]
		public double Value {
			[SmokeMethod("value", "()", "")]
			get { return ((QDoubleSpinBox) interceptor).Value; }
			[SmokeMethod("setValue", "(double)", "$")]
			set { ((QDoubleSpinBox) interceptor).Value = value; }
		}
		public QDoubleSpinBox(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQDoubleSpinBox(parent);
		}
		[SmokeMethod("QDoubleSpinBox", "(QWidget*)", "#")]
		private void NewQDoubleSpinBox(QWidget parent) {
			((QDoubleSpinBox) interceptor).NewQDoubleSpinBox(parent);
		}
		public QDoubleSpinBox() : this((Type) null) {
			CreateProxy();
			NewQDoubleSpinBox();
		}
		[SmokeMethod("QDoubleSpinBox", "()", "")]
		private void NewQDoubleSpinBox() {
			((QDoubleSpinBox) interceptor).NewQDoubleSpinBox();
		}
		[SmokeMethod("setRange", "(double, double)", "$$")]
		public void SetRange(double min, double max) {
			((QDoubleSpinBox) interceptor).SetRange(min,max);
		}
		[SmokeMethod("validate", "(QString&, int&) const", "$$")]
		public override int Validate(StringBuilder input, out int pos) {
			return ((QDoubleSpinBox) interceptor).Validate(input,out pos);
		}
		[SmokeMethod("valueFromText", "(const QString&) const", "$")]
		public virtual double ValueFromText(string text) {
			return ((QDoubleSpinBox) interceptor).ValueFromText(text);
		}
		[SmokeMethod("textFromValue", "(double) const", "$")]
		public virtual string TextFromValue(double val) {
			return ((QDoubleSpinBox) interceptor).TextFromValue(val);
		}
		[SmokeMethod("fixup", "(QString&) const", "$")]
		public override void Fixup(StringBuilder str) {
			((QDoubleSpinBox) interceptor).Fixup(str);
		}
		~QDoubleSpinBox() {
			DisposeQDoubleSpinBox();
		}
		public new void Dispose() {
			DisposeQDoubleSpinBox();
		}
		[SmokeMethod("~QDoubleSpinBox", "()", "")]
		private void DisposeQDoubleSpinBox() {
			((QDoubleSpinBox) interceptor).DisposeQDoubleSpinBox();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQDoubleSpinBoxSignals Emit {
			get { return (IQDoubleSpinBoxSignals) Q_EMIT; }
		}
	}

	public interface IQDoubleSpinBoxSignals : IQAbstractSpinBoxSignals {
		[Q_SIGNAL("void valueChanged(double)")]
		void ValueChanged(double arg1);
		[Q_SIGNAL("void valueChanged(const QString&)")]
		void ValueChanged(string arg1);
	}
}
