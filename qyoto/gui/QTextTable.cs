//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QTextTable")]
	public class QTextTable : QTextFrame, IDisposable {
 		protected QTextTable(Type dummy) : base((Type) null) {}
		[SmokeClass("QTextTable")]
		interface IQTextTableProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTextTable), this);
			interceptor = (QTextTable) realProxy.GetTransparentProxy();
		}
		private static IQTextTableProxy staticInterceptor = null;
		static QTextTable() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQTextTableProxy), null);
			staticInterceptor = (IQTextTableProxy) realProxy.GetTransparentProxy();
		}
		public QTextTable(QTextDocument doc) : this((Type) null) {
			CreateProxy();
			NewQTextTable(doc);
		}
		[SmokeMethod("QTextTable", "(QTextDocument*)", "#")]
		private void NewQTextTable(QTextDocument doc) {
			((QTextTable) interceptor).NewQTextTable(doc);
		}
		[SmokeMethod("resize", "(int, int)", "$$")]
		public void Resize(int rows, int cols) {
			((QTextTable) interceptor).Resize(rows,cols);
		}
		[SmokeMethod("insertRows", "(int, int)", "$$")]
		public void InsertRows(int pos, int num) {
			((QTextTable) interceptor).InsertRows(pos,num);
		}
		[SmokeMethod("insertColumns", "(int, int)", "$$")]
		public void InsertColumns(int pos, int num) {
			((QTextTable) interceptor).InsertColumns(pos,num);
		}
		[SmokeMethod("removeRows", "(int, int)", "$$")]
		public void RemoveRows(int pos, int num) {
			((QTextTable) interceptor).RemoveRows(pos,num);
		}
		[SmokeMethod("removeColumns", "(int, int)", "$$")]
		public void RemoveColumns(int pos, int num) {
			((QTextTable) interceptor).RemoveColumns(pos,num);
		}
		[SmokeMethod("mergeCells", "(int, int, int, int)", "$$$$")]
		public void MergeCells(int row, int col, int numRows, int numCols) {
			((QTextTable) interceptor).MergeCells(row,col,numRows,numCols);
		}
		[SmokeMethod("mergeCells", "(const QTextCursor&)", "#")]
		public void MergeCells(QTextCursor cursor) {
			((QTextTable) interceptor).MergeCells(cursor);
		}
		[SmokeMethod("splitCell", "(int, int, int, int)", "$$$$")]
		public void SplitCell(int row, int col, int numRows, int numCols) {
			((QTextTable) interceptor).SplitCell(row,col,numRows,numCols);
		}
		[SmokeMethod("rows", "() const", "")]
		public int Rows() {
			return ((QTextTable) interceptor).Rows();
		}
		[SmokeMethod("columns", "() const", "")]
		public int Columns() {
			return ((QTextTable) interceptor).Columns();
		}
		[SmokeMethod("cellAt", "(int, int) const", "$$")]
		public QTextTableCell CellAt(int row, int col) {
			return ((QTextTable) interceptor).CellAt(row,col);
		}
		[SmokeMethod("cellAt", "(int) const", "$")]
		public QTextTableCell CellAt(int position) {
			return ((QTextTable) interceptor).CellAt(position);
		}
		[SmokeMethod("cellAt", "(const QTextCursor&) const", "#")]
		public QTextTableCell CellAt(QTextCursor c) {
			return ((QTextTable) interceptor).CellAt(c);
		}
		[SmokeMethod("rowStart", "(const QTextCursor&) const", "#")]
		public QTextCursor RowStart(QTextCursor c) {
			return ((QTextTable) interceptor).RowStart(c);
		}
		[SmokeMethod("rowEnd", "(const QTextCursor&) const", "#")]
		public QTextCursor RowEnd(QTextCursor c) {
			return ((QTextTable) interceptor).RowEnd(c);
		}
		[SmokeMethod("setFormat", "(const QTextTableFormat&)", "#")]
		public void SetFormat(QTextTableFormat format) {
			((QTextTable) interceptor).SetFormat(format);
		}
		[SmokeMethod("format", "() const", "")]
		public QTextTableFormat Format() {
			return ((QTextTable) interceptor).Format();
		}
		~QTextTable() {
			DisposeQTextTable();
		}
		public new void Dispose() {
			DisposeQTextTable();
		}
		[SmokeMethod("~QTextTable", "()", "")]
		private void DisposeQTextTable() {
			((QTextTable) interceptor).DisposeQTextTable();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQTextTableSignals Emit {
			get { return (IQTextTableSignals) Q_EMIT; }
		}
	}

	public interface IQTextTableSignals : IQTextFrameSignals {
	}
}
