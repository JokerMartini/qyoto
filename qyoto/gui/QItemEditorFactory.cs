//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QItemEditorFactory")]
	public class QItemEditorFactory : MarshalByRefObject, IDisposable {
		protected QItemEditorFactory interceptor = null;
		private IntPtr smokeObject;
		protected QItemEditorFactory(Type dummy) {}
		[SmokeClass("QItemEditorFactory")]
		interface IQItemEditorFactoryProxy {
			[SmokeMethod("defaultFactory", "()", "")]
			QItemEditorFactory DefaultFactory();
			[SmokeMethod("setDefaultFactory", "(QItemEditorFactory*)", "#")]
			void SetDefaultFactory(QItemEditorFactory factory);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QItemEditorFactory), this);
			interceptor = (QItemEditorFactory) realProxy.GetTransparentProxy();
		}
		private static IQItemEditorFactoryProxy staticInterceptor = null;
		static QItemEditorFactory() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQItemEditorFactoryProxy), null);
			staticInterceptor = (IQItemEditorFactoryProxy) realProxy.GetTransparentProxy();
		}
		public QItemEditorFactory() : this((Type) null) {
			CreateProxy();
			NewQItemEditorFactory();
		}
		[SmokeMethod("QItemEditorFactory", "()", "")]
		private void NewQItemEditorFactory() {
			((QItemEditorFactory) interceptor).NewQItemEditorFactory();
		}
		[SmokeMethod("createEditor", "(QVariant::Type, QWidget*) const", "$#")]
		public virtual QWidget CreateEditor(QVariant.TypeOf type, QWidget parent) {
			return ((QItemEditorFactory) interceptor).CreateEditor(type,parent);
		}
		[SmokeMethod("valuePropertyName", "(QVariant::Type) const", "$")]
		public virtual QByteArray ValuePropertyName(QVariant.TypeOf type) {
			return ((QItemEditorFactory) interceptor).ValuePropertyName(type);
		}
		[SmokeMethod("registerEditor", "(QVariant::Type, QItemEditorCreatorBase*)", "$#")]
		public void RegisterEditor(QVariant.TypeOf type, QItemEditorCreatorBase creator) {
			((QItemEditorFactory) interceptor).RegisterEditor(type,creator);
		}
		~QItemEditorFactory() {
			DisposeQItemEditorFactory();
		}
		public void Dispose() {
			DisposeQItemEditorFactory();
		}
		[SmokeMethod("~QItemEditorFactory", "()", "")]
		private void DisposeQItemEditorFactory() {
			((QItemEditorFactory) interceptor).DisposeQItemEditorFactory();
		}
		public static QItemEditorFactory DefaultFactory() {
			return staticInterceptor.DefaultFactory();
		}
		public static void SetDefaultFactory(QItemEditorFactory factory) {
			staticInterceptor.SetDefaultFactory(factory);
		}
	}
}
