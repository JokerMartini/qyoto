//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QTextBlock")]
	public class QTextBlock : Object, IDisposable {
		protected SmokeInvocation interceptor = null;
		private IntPtr smokeObject;
		protected QTextBlock(Type dummy) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(QTextBlock), "QTextBlock", this);
		}
		private static SmokeInvocation staticInterceptor = null;
		static QTextBlock() {
			staticInterceptor = new SmokeInvocation(typeof(QTextBlock), "QTextBlock", null);
		}
		// QTextDocumentPrivate* docHandle(); >>>> NOT CONVERTED
		public QTextBlock() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QTextBlock", "QTextBlock()", typeof(void));
		}
		public QTextBlock(QTextBlock o) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QTextBlock#", "QTextBlock(const QTextBlock&)", typeof(void), typeof(QTextBlock), o);
		}
		public bool IsValid() {
			return (bool) interceptor.Invoke("isValid", "isValid() const", typeof(bool));
		}
		public override bool Equals(object o) {
			if (!(o is QTextBlock)) { return false; }
			return this == (QTextBlock) o;
		}
		public override int GetHashCode() {
			return interceptor.GetHashCode();
		}
		public int Position() {
			return (int) interceptor.Invoke("position", "position() const", typeof(int));
		}
		public int Length() {
			return (int) interceptor.Invoke("length", "length() const", typeof(int));
		}
		public bool Contains(int position) {
			return (bool) interceptor.Invoke("contains$", "contains(int) const", typeof(bool), typeof(int), position);
		}
		public QTextLayout Layout() {
			return (QTextLayout) interceptor.Invoke("layout", "layout() const", typeof(QTextLayout));
		}
		public QTextBlockFormat BlockFormat() {
			return (QTextBlockFormat) interceptor.Invoke("blockFormat", "blockFormat() const", typeof(QTextBlockFormat));
		}
		public int BlockFormatIndex() {
			return (int) interceptor.Invoke("blockFormatIndex", "blockFormatIndex() const", typeof(int));
		}
		public QTextCharFormat CharFormat() {
			return (QTextCharFormat) interceptor.Invoke("charFormat", "charFormat() const", typeof(QTextCharFormat));
		}
		public int CharFormatIndex() {
			return (int) interceptor.Invoke("charFormatIndex", "charFormatIndex() const", typeof(int));
		}
		public string Text() {
			return (string) interceptor.Invoke("text", "text() const", typeof(string));
		}
		public QTextDocument Document() {
			return (QTextDocument) interceptor.Invoke("document", "document() const", typeof(QTextDocument));
		}
		public QTextList TextList() {
			return (QTextList) interceptor.Invoke("textList", "textList() const", typeof(QTextList));
		}
		public QTextBlockUserData UserData() {
			return (QTextBlockUserData) interceptor.Invoke("userData", "userData() const", typeof(QTextBlockUserData));
		}
		public void SetUserData(QTextBlockUserData data) {
			interceptor.Invoke("setUserData#", "setUserData(QTextBlockUserData*)", typeof(void), typeof(QTextBlockUserData), data);
		}
		public int UserState() {
			return (int) interceptor.Invoke("userState", "userState() const", typeof(int));
		}
		public void SetUserState(int state) {
			interceptor.Invoke("setUserState$", "setUserState(int)", typeof(void), typeof(int), state);
		}
		public QTextBlock Next() {
			return (QTextBlock) interceptor.Invoke("next", "next() const", typeof(QTextBlock));
		}
		public QTextBlock Previous() {
			return (QTextBlock) interceptor.Invoke("previous", "previous() const", typeof(QTextBlock));
		}
		~QTextBlock() {
			interceptor.Invoke("~QTextBlock", "~QTextBlock()", typeof(void));
		}
		public void Dispose() {
			interceptor.Invoke("~QTextBlock", "~QTextBlock()", typeof(void));
		}
		public static bool operator==(QTextBlock lhs, QTextBlock o) {
			return (bool) staticInterceptor.Invoke("operator==#", "operator==(const QTextBlock&) const", typeof(bool), typeof(QTextBlock), lhs, typeof(QTextBlock), o);
		}
		public static bool operator!=(QTextBlock lhs, QTextBlock o) {
			return !(bool) staticInterceptor.Invoke("operator==#", "operator==(const QTextBlock&) const", typeof(bool), typeof(QTextBlock), lhs, typeof(QTextBlock), o);
		}
		public static bool operator<(QTextBlock lhs, QTextBlock o) {
			return (bool) staticInterceptor.Invoke("operator<#", "operator<(const QTextBlock&) const", typeof(bool), typeof(QTextBlock), lhs, typeof(QTextBlock), o);
		}
		public static bool operator>(QTextBlock lhs, QTextBlock o) {
			return !(bool) staticInterceptor.Invoke("operator<#", "operator<(const QTextBlock&) const", typeof(bool), typeof(QTextBlock), lhs, typeof(QTextBlock), o)
						&& !(bool) staticInterceptor.Invoke("operator==#", "operator==(const QTextBlock&) const", typeof(bool), typeof(QTextBlock), lhs, typeof(QTextBlock), o);
		}
	}
}
