//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QTextBlock")]
	public class QTextBlock : MarshalByRefObject, IDisposable {
		protected QTextBlock interceptor = null;
		private IntPtr smokeObject;
		protected QTextBlock(Type dummy) {}
		[SmokeClass("QTextBlock")]
		interface IQTextBlockProxy {
			[SmokeMethod("operator==", "(const QTextBlock&) const", "#")]
			bool op_equals(QTextBlock lhs, QTextBlock o);
			[SmokeMethod("operator<", "(const QTextBlock&) const", "#")]
			bool op_lt(QTextBlock lhs, QTextBlock o);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTextBlock), this);
			interceptor = (QTextBlock) realProxy.GetTransparentProxy();
		}
		private static IQTextBlockProxy staticInterceptor = null;
		static QTextBlock() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQTextBlockProxy), null);
			staticInterceptor = (IQTextBlockProxy) realProxy.GetTransparentProxy();
		}
		// QTextDocumentPrivate* docHandle(); >>>> NOT CONVERTED
		public QTextBlock() : this((Type) null) {
			CreateProxy();
			NewQTextBlock();
		}
		[SmokeMethod("QTextBlock", "()", "")]
		private void NewQTextBlock() {
			((QTextBlock) interceptor).NewQTextBlock();
		}
		public QTextBlock(QTextBlock o) : this((Type) null) {
			CreateProxy();
			NewQTextBlock(o);
		}
		[SmokeMethod("QTextBlock", "(const QTextBlock&)", "#")]
		private void NewQTextBlock(QTextBlock o) {
			((QTextBlock) interceptor).NewQTextBlock(o);
		}
		[SmokeMethod("isValid", "() const", "")]
		public bool IsValid() {
			return ((QTextBlock) interceptor).IsValid();
		}
		public override bool Equals(object o) {
			if (!(o is QTextBlock)) { return false; }
			return this == (QTextBlock) o;
		}
		public override int GetHashCode() {
			return ((QTextBlock) interceptor).GetHashCode();
		}
		[SmokeMethod("position", "() const", "")]
		public int Position() {
			return ((QTextBlock) interceptor).Position();
		}
		[SmokeMethod("length", "() const", "")]
		public int Length() {
			return ((QTextBlock) interceptor).Length();
		}
		[SmokeMethod("contains", "(int) const", "$")]
		public bool Contains(int position) {
			return ((QTextBlock) interceptor).Contains(position);
		}
		[SmokeMethod("layout", "() const", "")]
		public QTextLayout Layout() {
			return ((QTextBlock) interceptor).Layout();
		}
		[SmokeMethod("blockFormat", "() const", "")]
		public QTextBlockFormat BlockFormat() {
			return ((QTextBlock) interceptor).BlockFormat();
		}
		[SmokeMethod("blockFormatIndex", "() const", "")]
		public int BlockFormatIndex() {
			return ((QTextBlock) interceptor).BlockFormatIndex();
		}
		[SmokeMethod("charFormat", "() const", "")]
		public QTextCharFormat CharFormat() {
			return ((QTextBlock) interceptor).CharFormat();
		}
		[SmokeMethod("charFormatIndex", "() const", "")]
		public int CharFormatIndex() {
			return ((QTextBlock) interceptor).CharFormatIndex();
		}
		[SmokeMethod("text", "() const", "")]
		public string Text() {
			return ((QTextBlock) interceptor).Text();
		}
		[SmokeMethod("document", "() const", "")]
		public QTextDocument Document() {
			return ((QTextBlock) interceptor).Document();
		}
		[SmokeMethod("textList", "() const", "")]
		public QTextList TextList() {
			return ((QTextBlock) interceptor).TextList();
		}
		[SmokeMethod("userData", "() const", "")]
		public QTextBlockUserData UserData() {
			return ((QTextBlock) interceptor).UserData();
		}
		[SmokeMethod("setUserData", "(QTextBlockUserData*)", "#")]
		public void SetUserData(QTextBlockUserData data) {
			((QTextBlock) interceptor).SetUserData(data);
		}
		[SmokeMethod("userState", "() const", "")]
		public int UserState() {
			return ((QTextBlock) interceptor).UserState();
		}
		[SmokeMethod("setUserState", "(int)", "$")]
		public void SetUserState(int state) {
			((QTextBlock) interceptor).SetUserState(state);
		}
		[SmokeMethod("next", "() const", "")]
		public QTextBlock Next() {
			return ((QTextBlock) interceptor).Next();
		}
		[SmokeMethod("previous", "() const", "")]
		public QTextBlock Previous() {
			return ((QTextBlock) interceptor).Previous();
		}
		~QTextBlock() {
			DisposeQTextBlock();
		}
		public void Dispose() {
			DisposeQTextBlock();
		}
		[SmokeMethod("~QTextBlock", "()", "")]
		private void DisposeQTextBlock() {
			((QTextBlock) interceptor).DisposeQTextBlock();
		}
		public static bool operator==(QTextBlock lhs, QTextBlock o) {
			return staticInterceptor.op_equals(lhs,o);
		}
		public static bool operator!=(QTextBlock lhs, QTextBlock o) {
			return !staticInterceptor.op_equals(lhs,o);
		}
		public static bool operator<(QTextBlock lhs, QTextBlock o) {
			return staticInterceptor.op_lt(lhs,o);
		}
		public static bool operator>(QTextBlock lhs, QTextBlock o) {
			return !staticInterceptor.op_lt(lhs,o)
						&& !staticInterceptor.op_equals(lhs,o);
		}
	}
}
