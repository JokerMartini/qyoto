//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
	using System;
	[SmokeClass("QStyleOptionDockWidget")]
	public class QStyleOptionDockWidget : QStyleOption, IDisposable {
 		protected QStyleOptionDockWidget(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(QStyleOptionDockWidget), this);
		}
		public enum StyleOptionType {
			Type = QStyleOption.OptionType.SO_DockWidget,
		}
		public enum StyleOptionVersion {
			Version = 1,
		}
		public QStyleOptionDockWidget() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QStyleOptionDockWidget", "QStyleOptionDockWidget()", typeof(void));
		}
		public QStyleOptionDockWidget(QStyleOptionDockWidget other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QStyleOptionDockWidget#", "QStyleOptionDockWidget(const QStyleOptionDockWidget&)", typeof(void), typeof(QStyleOptionDockWidget), other);
		}
		public QStyleOptionDockWidget(int version) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QStyleOptionDockWidget$", "QStyleOptionDockWidget(int)", typeof(void), typeof(int), version);
		}
		~QStyleOptionDockWidget() {
			interceptor.Invoke("~QStyleOptionDockWidget", "~QStyleOptionDockWidget()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~QStyleOptionDockWidget", "~QStyleOptionDockWidget()", typeof(void));
		}
	}
}
