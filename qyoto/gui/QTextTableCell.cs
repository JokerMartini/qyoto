//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QTextTableCell")]
	public class QTextTableCell : MarshalByRefObject, IDisposable {
		protected QTextTableCell interceptor = null;
		private IntPtr smokeObject;
		protected QTextTableCell(Type dummy) {}
		[SmokeClass("QTextTableCell")]
		interface IQTextTableCellProxy {
			[SmokeMethod("operator==", "(const QTextTableCell&) const", "#")]
			bool op_equals(QTextTableCell lhs, QTextTableCell other);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTextTableCell), this);
			interceptor = (QTextTableCell) realProxy.GetTransparentProxy();
		}
		private static IQTextTableCellProxy staticInterceptor = null;
		static QTextTableCell() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQTextTableCellProxy), null);
			staticInterceptor = (IQTextTableCellProxy) realProxy.GetTransparentProxy();
		}
		public QTextTableCell() : this((Type) null) {
			CreateProxy();
			NewQTextTableCell();
		}
		[SmokeMethod("QTextTableCell", "()", "")]
		private void NewQTextTableCell() {
			((QTextTableCell) interceptor).NewQTextTableCell();
		}
		public QTextTableCell(QTextTableCell o) : this((Type) null) {
			CreateProxy();
			NewQTextTableCell(o);
		}
		[SmokeMethod("QTextTableCell", "(const QTextTableCell&)", "#")]
		private void NewQTextTableCell(QTextTableCell o) {
			((QTextTableCell) interceptor).NewQTextTableCell(o);
		}
		[SmokeMethod("setFormat", "(const QTextCharFormat&)", "#")]
		public void SetFormat(QTextCharFormat format) {
			((QTextTableCell) interceptor).SetFormat(format);
		}
		[SmokeMethod("format", "() const", "")]
		public QTextCharFormat Format() {
			return ((QTextTableCell) interceptor).Format();
		}
		[SmokeMethod("row", "() const", "")]
		public int Row() {
			return ((QTextTableCell) interceptor).Row();
		}
		[SmokeMethod("column", "() const", "")]
		public int Column() {
			return ((QTextTableCell) interceptor).Column();
		}
		[SmokeMethod("rowSpan", "() const", "")]
		public int RowSpan() {
			return ((QTextTableCell) interceptor).RowSpan();
		}
		[SmokeMethod("columnSpan", "() const", "")]
		public int ColumnSpan() {
			return ((QTextTableCell) interceptor).ColumnSpan();
		}
		[SmokeMethod("isValid", "() const", "")]
		public bool IsValid() {
			return ((QTextTableCell) interceptor).IsValid();
		}
		[SmokeMethod("firstCursorPosition", "() const", "")]
		public QTextCursor FirstCursorPosition() {
			return ((QTextTableCell) interceptor).FirstCursorPosition();
		}
		[SmokeMethod("lastCursorPosition", "() const", "")]
		public QTextCursor LastCursorPosition() {
			return ((QTextTableCell) interceptor).LastCursorPosition();
		}
		[SmokeMethod("firstPosition", "() const", "")]
		public int FirstPosition() {
			return ((QTextTableCell) interceptor).FirstPosition();
		}
		[SmokeMethod("lastPosition", "() const", "")]
		public int LastPosition() {
			return ((QTextTableCell) interceptor).LastPosition();
		}
		public override bool Equals(object o) {
			if (!(o is QTextTableCell)) { return false; }
			return this == (QTextTableCell) o;
		}
		public override int GetHashCode() {
			return ((QTextTableCell) interceptor).GetHashCode();
		}
		~QTextTableCell() {
			DisposeQTextTableCell();
		}
		public void Dispose() {
			DisposeQTextTableCell();
		}
		[SmokeMethod("~QTextTableCell", "()", "")]
		private void DisposeQTextTableCell() {
			((QTextTableCell) interceptor).DisposeQTextTableCell();
		}
		public static bool operator==(QTextTableCell lhs, QTextTableCell other) {
			return staticInterceptor.op_equals(lhs,other);
		}
		public static bool operator!=(QTextTableCell lhs, QTextTableCell other) {
			return !staticInterceptor.op_equals(lhs,other);
		}
	}
}
