//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	[SmokeClass("QDirModel")]
	public class QDirModel : QAbstractItemModel, IDisposable {
 		protected QDirModel(Type dummy) : base((Type) null) {}
		[SmokeClass("QDirModel")]
		interface IQDirModelProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDirModel), this);
			interceptor = (QDirModel) realProxy.GetTransparentProxy();
		}
		private static IQDirModelProxy staticInterceptor = null;
		static QDirModel() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDirModelProxy), null);
			staticInterceptor = (IQDirModelProxy) realProxy.GetTransparentProxy();
		}
		public enum Roles {
			FileIconRole = Qt.ItemDataRole.DecorationRole,
			FilePathRole = Qt.ItemDataRole.UserRole+1,
			FileNameRole = 0,
		}
		[Q_PROPERTY("bool", "resolveSymlinks")]
		public bool ResolveSymlinks {
			get { return Property("resolveSymlinks").Value<bool>(); }
			set { SetProperty("resolveSymlinks", QVariant.FromValue<bool>(value)); }
		}
		[Q_PROPERTY("bool", "readOnly")]
		public bool ReadOnly {
			get { return Property("readOnly").Value<bool>(); }
			set { SetProperty("readOnly", QVariant.FromValue<bool>(value)); }
		}
		[Q_PROPERTY("bool", "lazyChildCount")]
		public bool LazyChildCount {
			get { return Property("lazyChildCount").Value<bool>(); }
			set { SetProperty("lazyChildCount", QVariant.FromValue<bool>(value)); }
		}
		public QDirModel(List<string> nameFilters, int filters, int sort, QObject parent) : this((Type) null) {
			CreateProxy();
			NewQDirModel(nameFilters,filters,sort,parent);
		}
		[SmokeMethod("QDirModel", "(const QStringList&, QDir::Filters, QDir::SortFlags, QObject*)", "?$$#")]
		private void NewQDirModel(List<string> nameFilters, int filters, int sort, QObject parent) {
			((QDirModel) interceptor).NewQDirModel(nameFilters,filters,sort,parent);
		}
		public QDirModel(List<string> nameFilters, int filters, int sort) : this((Type) null) {
			CreateProxy();
			NewQDirModel(nameFilters,filters,sort);
		}
		[SmokeMethod("QDirModel", "(const QStringList&, QDir::Filters, QDir::SortFlags)", "?$$")]
		private void NewQDirModel(List<string> nameFilters, int filters, int sort) {
			((QDirModel) interceptor).NewQDirModel(nameFilters,filters,sort);
		}
		public QDirModel(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQDirModel(parent);
		}
		[SmokeMethod("QDirModel", "(QObject*)", "#")]
		private void NewQDirModel(QObject parent) {
			((QDirModel) interceptor).NewQDirModel(parent);
		}
		public QDirModel() : this((Type) null) {
			CreateProxy();
			NewQDirModel();
		}
		[SmokeMethod("QDirModel", "()", "")]
		private void NewQDirModel() {
			((QDirModel) interceptor).NewQDirModel();
		}
		[SmokeMethod("index", "(int, int, const QModelIndex&) const", "$$#")]
		public override QModelIndex Index(int row, int column, QModelIndex parent) {
			return ((QDirModel) interceptor).Index(row,column,parent);
		}
		[SmokeMethod("index", "(int, int) const", "$$")]
		public virtual QModelIndex Index(int row, int column) {
			return ((QDirModel) interceptor).Index(row,column);
		}
		[SmokeMethod("parent", "(const QModelIndex&) const", "#")]
		public override QModelIndex Parent(QModelIndex child) {
			return ((QDirModel) interceptor).Parent(child);
		}
		[SmokeMethod("rowCount", "(const QModelIndex&) const", "#")]
		public override int RowCount(QModelIndex parent) {
			return ((QDirModel) interceptor).RowCount(parent);
		}
		[SmokeMethod("rowCount", "() const", "")]
		public virtual int RowCount() {
			return ((QDirModel) interceptor).RowCount();
		}
		[SmokeMethod("columnCount", "(const QModelIndex&) const", "#")]
		public override int ColumnCount(QModelIndex parent) {
			return ((QDirModel) interceptor).ColumnCount(parent);
		}
		[SmokeMethod("columnCount", "() const", "")]
		public virtual int ColumnCount() {
			return ((QDirModel) interceptor).ColumnCount();
		}
		[SmokeMethod("data", "(const QModelIndex&, int) const", "#$")]
		public override QVariant Data(QModelIndex index, int role) {
			return ((QDirModel) interceptor).Data(index,role);
		}
		[SmokeMethod("data", "(const QModelIndex&) const", "#")]
		public virtual QVariant Data(QModelIndex index) {
			return ((QDirModel) interceptor).Data(index);
		}
		[SmokeMethod("setData", "(const QModelIndex&, const QVariant&, int)", "##$")]
		public override bool SetData(QModelIndex index, QVariant value, int role) {
			return ((QDirModel) interceptor).SetData(index,value,role);
		}
		[SmokeMethod("setData", "(const QModelIndex&, const QVariant&)", "##")]
		public override bool SetData(QModelIndex index, QVariant value) {
			return ((QDirModel) interceptor).SetData(index,value);
		}
		[SmokeMethod("headerData", "(int, Qt::Orientation, int) const", "$$$")]
		public override QVariant HeaderData(int section, Qt.Orientation orientation, int role) {
			return ((QDirModel) interceptor).HeaderData(section,orientation,role);
		}
		[SmokeMethod("headerData", "(int, Qt::Orientation) const", "$$")]
		public override QVariant HeaderData(int section, Qt.Orientation orientation) {
			return ((QDirModel) interceptor).HeaderData(section,orientation);
		}
		[SmokeMethod("hasChildren", "(const QModelIndex&) const", "#")]
		public override bool HasChildren(QModelIndex index) {
			return ((QDirModel) interceptor).HasChildren(index);
		}
		[SmokeMethod("hasChildren", "() const", "")]
		public override bool HasChildren() {
			return ((QDirModel) interceptor).HasChildren();
		}
		[SmokeMethod("flags", "(const QModelIndex&) const", "#")]
		public override int Flags(QModelIndex index) {
			return ((QDirModel) interceptor).Flags(index);
		}
		[SmokeMethod("sort", "(int, Qt::SortOrder)", "$$")]
		public override void Sort(int column, Qt.SortOrder order) {
			((QDirModel) interceptor).Sort(column,order);
		}
		[SmokeMethod("sort", "(int)", "$")]
		public override void Sort(int column) {
			((QDirModel) interceptor).Sort(column);
		}
		[SmokeMethod("mimeTypes", "() const", "")]
		public override List<string> MimeTypes() {
			return ((QDirModel) interceptor).MimeTypes();
		}
		[SmokeMethod("mimeData", "(const QModelIndexList&) const", "?")]
		public override QMimeData MimeData(List<QModelIndex> indexes) {
			return ((QDirModel) interceptor).MimeData(indexes);
		}
		[SmokeMethod("dropMimeData", "(const QMimeData*, Qt::DropAction, int, int, const QModelIndex&)", "#$$$#")]
		public override bool DropMimeData(QMimeData data, Qt.DropAction action, int row, int column, QModelIndex parent) {
			return ((QDirModel) interceptor).DropMimeData(data,action,row,column,parent);
		}
		[SmokeMethod("supportedDropActions", "() const", "")]
		public override int SupportedDropActions() {
			return ((QDirModel) interceptor).SupportedDropActions();
		}
		[SmokeMethod("setIconProvider", "(QFileIconProvider*)", "#")]
		public void SetIconProvider(QFileIconProvider provider) {
			((QDirModel) interceptor).SetIconProvider(provider);
		}
		[SmokeMethod("iconProvider", "() const", "")]
		public QFileIconProvider IconProvider() {
			return ((QDirModel) interceptor).IconProvider();
		}
		[SmokeMethod("setNameFilters", "(const QStringList&)", "?")]
		public void SetNameFilters(List<string> filters) {
			((QDirModel) interceptor).SetNameFilters(filters);
		}
		[SmokeMethod("nameFilters", "() const", "")]
		public List<string> NameFilters() {
			return ((QDirModel) interceptor).NameFilters();
		}
		[SmokeMethod("setFilter", "(QDir::Filters)", "$")]
		public void SetFilter(int filters) {
			((QDirModel) interceptor).SetFilter(filters);
		}
		[SmokeMethod("filter", "() const", "")]
		public int Filter() {
			return ((QDirModel) interceptor).Filter();
		}
		[SmokeMethod("setSorting", "(QDir::SortFlags)", "$")]
		public void SetSorting(int sort) {
			((QDirModel) interceptor).SetSorting(sort);
		}
		[SmokeMethod("sorting", "() const", "")]
		public int Sorting() {
			return ((QDirModel) interceptor).Sorting();
		}
		[SmokeMethod("isReadOnly", "() const", "")]
		public bool IsReadOnly() {
			return ((QDirModel) interceptor).IsReadOnly();
		}
		[SmokeMethod("refresh", "(const QModelIndex&)", "#")]
		public void Refresh(QModelIndex parent) {
			((QDirModel) interceptor).Refresh(parent);
		}
		[SmokeMethod("refresh", "()", "")]
		public void Refresh() {
			((QDirModel) interceptor).Refresh();
		}
		[SmokeMethod("index", "(const QString&, int) const", "$$")]
		public QModelIndex Index(string path, int column) {
			return ((QDirModel) interceptor).Index(path,column);
		}
		[SmokeMethod("index", "(const QString&) const", "$")]
		public QModelIndex Index(string path) {
			return ((QDirModel) interceptor).Index(path);
		}
		[SmokeMethod("isDir", "(const QModelIndex&) const", "#")]
		public bool IsDir(QModelIndex index) {
			return ((QDirModel) interceptor).IsDir(index);
		}
		[SmokeMethod("mkdir", "(const QModelIndex&, const QString&)", "#$")]
		public QModelIndex Mkdir(QModelIndex parent, string name) {
			return ((QDirModel) interceptor).Mkdir(parent,name);
		}
		[SmokeMethod("rmdir", "(const QModelIndex&)", "#")]
		public bool Rmdir(QModelIndex index) {
			return ((QDirModel) interceptor).Rmdir(index);
		}
		[SmokeMethod("remove", "(const QModelIndex&)", "#")]
		public bool Remove(QModelIndex index) {
			return ((QDirModel) interceptor).Remove(index);
		}
		[SmokeMethod("filePath", "(const QModelIndex&) const", "#")]
		public string FilePath(QModelIndex index) {
			return ((QDirModel) interceptor).FilePath(index);
		}
		[SmokeMethod("fileName", "(const QModelIndex&) const", "#")]
		public string FileName(QModelIndex index) {
			return ((QDirModel) interceptor).FileName(index);
		}
		[SmokeMethod("fileIcon", "(const QModelIndex&) const", "#")]
		public QIcon FileIcon(QModelIndex index) {
			return ((QDirModel) interceptor).FileIcon(index);
		}
		[SmokeMethod("fileInfo", "(const QModelIndex&) const", "#")]
		public QFileInfo FileInfo(QModelIndex index) {
			return ((QDirModel) interceptor).FileInfo(index);
		}
		[SmokeMethod("parent", "() const", "")]
		public QObject Parent() {
			return ((QDirModel) interceptor).Parent();
		}
		~QDirModel() {
			DisposeQDirModel();
		}
		public new void Dispose() {
			DisposeQDirModel();
		}
		[SmokeMethod("~QDirModel", "()", "")]
		private void DisposeQDirModel() {
			((QDirModel) interceptor).DisposeQDirModel();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQDirModelSignals Emit {
			get { return (IQDirModelSignals) Q_EMIT; }
		}
	}

	public interface IQDirModelSignals : IQAbstractItemModelSignals {
	}
}
