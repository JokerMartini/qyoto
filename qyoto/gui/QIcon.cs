//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QIcon")]
	public class QIcon : MarshalByRefObject, IDisposable {
		protected QIcon interceptor = null;
		private IntPtr smokeObject;
		protected QIcon(Type dummy) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QIcon), this);
			interceptor = (QIcon) realProxy.GetTransparentProxy();
		}
		public enum Mode {
			Normal = 0,
			Disabled = 1,
			Active = 2,
			Selected = 3,
		}
		public enum State {
			On = 0,
			Off = 1,
		}
		//  operator QVariant(); >>>> NOT CONVERTED
		public QIcon() : this((Type) null) {
			CreateProxy();
			NewQIcon();
		}
		[SmokeMethod("QIcon", "()", "")]
		private void NewQIcon() {
			((QIcon) interceptor).NewQIcon();
		}
		public QIcon(QPixmap pixmap) : this((Type) null) {
			CreateProxy();
			NewQIcon(pixmap);
		}
		[SmokeMethod("QIcon", "(const QPixmap&)", "#")]
		private void NewQIcon(QPixmap pixmap) {
			((QIcon) interceptor).NewQIcon(pixmap);
		}
		public QIcon(QIcon other) : this((Type) null) {
			CreateProxy();
			NewQIcon(other);
		}
		[SmokeMethod("QIcon", "(const QIcon&)", "#")]
		private void NewQIcon(QIcon other) {
			((QIcon) interceptor).NewQIcon(other);
		}
		public QIcon(string fileName) : this((Type) null) {
			CreateProxy();
			NewQIcon(fileName);
		}
		[SmokeMethod("QIcon", "(const QString&)", "$")]
		private void NewQIcon(string fileName) {
			((QIcon) interceptor).NewQIcon(fileName);
		}
		public QIcon(QIconEngine engine) : this((Type) null) {
			CreateProxy();
			NewQIcon(engine);
		}
		[SmokeMethod("QIcon", "(QIconEngine*)", "#")]
		private void NewQIcon(QIconEngine engine) {
			((QIcon) interceptor).NewQIcon(engine);
		}
		[SmokeMethod("pixmap", "(const QSize&, QIcon::Mode, QIcon::State) const", "#$$")]
		public QPixmap Pixmap(QSize size, QIcon.Mode mode, QIcon.State state) {
			return ((QIcon) interceptor).Pixmap(size,mode,state);
		}
		[SmokeMethod("pixmap", "(const QSize&, QIcon::Mode) const", "#$")]
		public QPixmap Pixmap(QSize size, QIcon.Mode mode) {
			return ((QIcon) interceptor).Pixmap(size,mode);
		}
		[SmokeMethod("pixmap", "(const QSize&) const", "#")]
		public QPixmap Pixmap(QSize size) {
			return ((QIcon) interceptor).Pixmap(size);
		}
		[SmokeMethod("pixmap", "(int, int, QIcon::Mode, QIcon::State) const", "$$$$")]
		public QPixmap Pixmap(int w, int h, QIcon.Mode mode, QIcon.State state) {
			return ((QIcon) interceptor).Pixmap(w,h,mode,state);
		}
		[SmokeMethod("pixmap", "(int, int, QIcon::Mode) const", "$$$")]
		public QPixmap Pixmap(int w, int h, QIcon.Mode mode) {
			return ((QIcon) interceptor).Pixmap(w,h,mode);
		}
		[SmokeMethod("pixmap", "(int, int) const", "$$")]
		public QPixmap Pixmap(int w, int h) {
			return ((QIcon) interceptor).Pixmap(w,h);
		}
		[SmokeMethod("pixmap", "(int, QIcon::Mode, QIcon::State) const", "$$$")]
		public QPixmap Pixmap(int extent, QIcon.Mode mode, QIcon.State state) {
			return ((QIcon) interceptor).Pixmap(extent,mode,state);
		}
		[SmokeMethod("pixmap", "(int, QIcon::Mode) const", "$$")]
		public QPixmap Pixmap(int extent, QIcon.Mode mode) {
			return ((QIcon) interceptor).Pixmap(extent,mode);
		}
		[SmokeMethod("pixmap", "(int) const", "$")]
		public QPixmap Pixmap(int extent) {
			return ((QIcon) interceptor).Pixmap(extent);
		}
		[SmokeMethod("actualSize", "(const QSize&, QIcon::Mode, QIcon::State) const", "#$$")]
		public QSize ActualSize(QSize size, QIcon.Mode mode, QIcon.State state) {
			return ((QIcon) interceptor).ActualSize(size,mode,state);
		}
		[SmokeMethod("actualSize", "(const QSize&, QIcon::Mode) const", "#$")]
		public QSize ActualSize(QSize size, QIcon.Mode mode) {
			return ((QIcon) interceptor).ActualSize(size,mode);
		}
		[SmokeMethod("actualSize", "(const QSize&) const", "#")]
		public QSize ActualSize(QSize size) {
			return ((QIcon) interceptor).ActualSize(size);
		}
		[SmokeMethod("paint", "(QPainter*, const QRect&, Qt::Alignment, QIcon::Mode, QIcon::State) const", "##$$$")]
		public void Paint(QPainter painter, QRect rect, int alignment, QIcon.Mode mode, QIcon.State state) {
			((QIcon) interceptor).Paint(painter,rect,alignment,mode,state);
		}
		[SmokeMethod("paint", "(QPainter*, const QRect&, Qt::Alignment, QIcon::Mode) const", "##$$")]
		public void Paint(QPainter painter, QRect rect, int alignment, QIcon.Mode mode) {
			((QIcon) interceptor).Paint(painter,rect,alignment,mode);
		}
		[SmokeMethod("paint", "(QPainter*, const QRect&, Qt::Alignment) const", "##$")]
		public void Paint(QPainter painter, QRect rect, int alignment) {
			((QIcon) interceptor).Paint(painter,rect,alignment);
		}
		[SmokeMethod("paint", "(QPainter*, const QRect&) const", "##")]
		public void Paint(QPainter painter, QRect rect) {
			((QIcon) interceptor).Paint(painter,rect);
		}
		[SmokeMethod("paint", "(QPainter*, int, int, int, int, Qt::Alignment, QIcon::Mode, QIcon::State) const", "#$$$$$$$")]
		public void Paint(QPainter painter, int x, int y, int w, int h, int alignment, QIcon.Mode mode, QIcon.State state) {
			((QIcon) interceptor).Paint(painter,x,y,w,h,alignment,mode,state);
		}
		[SmokeMethod("paint", "(QPainter*, int, int, int, int, Qt::Alignment, QIcon::Mode) const", "#$$$$$$")]
		public void Paint(QPainter painter, int x, int y, int w, int h, int alignment, QIcon.Mode mode) {
			((QIcon) interceptor).Paint(painter,x,y,w,h,alignment,mode);
		}
		[SmokeMethod("paint", "(QPainter*, int, int, int, int, Qt::Alignment) const", "#$$$$$")]
		public void Paint(QPainter painter, int x, int y, int w, int h, int alignment) {
			((QIcon) interceptor).Paint(painter,x,y,w,h,alignment);
		}
		[SmokeMethod("paint", "(QPainter*, int, int, int, int) const", "#$$$$")]
		public void Paint(QPainter painter, int x, int y, int w, int h) {
			((QIcon) interceptor).Paint(painter,x,y,w,h);
		}
		[SmokeMethod("isNull", "() const", "")]
		public bool IsNull() {
			return ((QIcon) interceptor).IsNull();
		}
		[SmokeMethod("isDetached", "() const", "")]
		public bool IsDetached() {
			return ((QIcon) interceptor).IsDetached();
		}
		[SmokeMethod("serialNumber", "() const", "")]
		public int SerialNumber() {
			return ((QIcon) interceptor).SerialNumber();
		}
		[SmokeMethod("addPixmap", "(const QPixmap&, QIcon::Mode, QIcon::State)", "#$$")]
		public void AddPixmap(QPixmap pixmap, QIcon.Mode mode, QIcon.State state) {
			((QIcon) interceptor).AddPixmap(pixmap,mode,state);
		}
		[SmokeMethod("addPixmap", "(const QPixmap&, QIcon::Mode)", "#$")]
		public void AddPixmap(QPixmap pixmap, QIcon.Mode mode) {
			((QIcon) interceptor).AddPixmap(pixmap,mode);
		}
		[SmokeMethod("addPixmap", "(const QPixmap&)", "#")]
		public void AddPixmap(QPixmap pixmap) {
			((QIcon) interceptor).AddPixmap(pixmap);
		}
		[SmokeMethod("addFile", "(const QString&, const QSize&, QIcon::Mode, QIcon::State)", "$#$$")]
		public void AddFile(string fileName, QSize size, QIcon.Mode mode, QIcon.State state) {
			((QIcon) interceptor).AddFile(fileName,size,mode,state);
		}
		[SmokeMethod("addFile", "(const QString&, const QSize&, QIcon::Mode)", "$#$")]
		public void AddFile(string fileName, QSize size, QIcon.Mode mode) {
			((QIcon) interceptor).AddFile(fileName,size,mode);
		}
		[SmokeMethod("addFile", "(const QString&, const QSize&)", "$#")]
		public void AddFile(string fileName, QSize size) {
			((QIcon) interceptor).AddFile(fileName,size);
		}
		[SmokeMethod("addFile", "(const QString&)", "$")]
		public void AddFile(string fileName) {
			((QIcon) interceptor).AddFile(fileName);
		}
		~QIcon() {
			DisposeQIcon();
		}
		public void Dispose() {
			DisposeQIcon();
		}
		[SmokeMethod("~QIcon", "()", "")]
		private void DisposeQIcon() {
			((QIcon) interceptor).DisposeQIcon();
		}
	}
}
