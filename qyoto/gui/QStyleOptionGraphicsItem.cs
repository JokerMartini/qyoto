//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QStyleOptionGraphicsItem")]
	public class QStyleOptionGraphicsItem : QStyleOption, IDisposable {
 		protected QStyleOptionGraphicsItem(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QStyleOptionGraphicsItem), this);
			_interceptor = (QStyleOptionGraphicsItem) realProxy.GetTransparentProxy();
		}
		private QStyleOptionGraphicsItem ProxyQStyleOptionGraphicsItem() {
			return (QStyleOptionGraphicsItem) _interceptor;
		}
		public enum StyleOptionType {
			Type = QStyleOption.OptionType.SO_GraphicsItem,
		}
		public enum StyleOptionVersion {
			Version = 1,
		}
		public QStyleOptionGraphicsItem() : this((Type) null) {
			CreateProxy();
			NewQStyleOptionGraphicsItem();
		}
		[SmokeMethod("QStyleOptionGraphicsItem", "()", "")]
		private void NewQStyleOptionGraphicsItem() {
			ProxyQStyleOptionGraphicsItem().NewQStyleOptionGraphicsItem();
		}
		public QStyleOptionGraphicsItem(QStyleOptionGraphicsItem other) : this((Type) null) {
			CreateProxy();
			NewQStyleOptionGraphicsItem(other);
		}
		[SmokeMethod("QStyleOptionGraphicsItem", "(const QStyleOptionGraphicsItem&)", "#")]
		private void NewQStyleOptionGraphicsItem(QStyleOptionGraphicsItem other) {
			ProxyQStyleOptionGraphicsItem().NewQStyleOptionGraphicsItem(other);
		}
		public QStyleOptionGraphicsItem(int version) : this((Type) null) {
			CreateProxy();
			NewQStyleOptionGraphicsItem(version);
		}
		[SmokeMethod("QStyleOptionGraphicsItem", "(int)", "$")]
		private void NewQStyleOptionGraphicsItem(int version) {
			ProxyQStyleOptionGraphicsItem().NewQStyleOptionGraphicsItem(version);
		}
		~QStyleOptionGraphicsItem() {
			DisposeQStyleOptionGraphicsItem();
		}
		public void Dispose() {
			DisposeQStyleOptionGraphicsItem();
		}
		[SmokeMethod("~QStyleOptionGraphicsItem", "()", "")]
		private void DisposeQStyleOptionGraphicsItem() {
			ProxyQStyleOptionGraphicsItem().DisposeQStyleOptionGraphicsItem();
		}
	}
}
