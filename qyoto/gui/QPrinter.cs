//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;
	using System.Collections.Generic;

	[SmokeClass("QPrinter")]
	public class QPrinter : QPaintDevice, IDisposable {
 		protected QPrinter(Type dummy) : base((Type) null) {}
		interface IQPrinterProxy {
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QPrinter), this);
			_interceptor = (QPrinter) realProxy.GetTransparentProxy();
		}
		private QPrinter ProxyQPrinter() {
			return (QPrinter) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QPrinter() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQPrinterProxy), null);
			_staticInterceptor = (IQPrinterProxy) realProxy.GetTransparentProxy();
		}
		private static IQPrinterProxy StaticQPrinter() {
			return (IQPrinterProxy) _staticInterceptor;
		}

		public enum PrinterMode {
			ScreenResolution = 0,
			PrinterResolution = 1,
			HighResolution = 2,
		}
		public enum Orientation {
			Portrait = 0,
			Landscape = 1,
		}
		public enum PageSize {
			A4 = 0,
			B5 = 1,
			Letter = 2,
			Legal = 3,
			Executive = 4,
			A0 = 5,
			A1 = 6,
			A2 = 7,
			A3 = 8,
			A5 = 9,
			A6 = 10,
			A7 = 11,
			A8 = 12,
			A9 = 13,
			B0 = 14,
			B1 = 15,
			B10 = 16,
			B2 = 17,
			B3 = 18,
			B4 = 19,
			B6 = 20,
			B7 = 21,
			B8 = 22,
			B9 = 23,
			C5E = 24,
			Comm10E = 25,
			DLE = 26,
			Folio = 27,
			Ledger = 28,
			Tabloid = 29,
			Custom = 30,
			NPageSize = Custom,
		}
		public enum PageOrder {
			FirstPageFirst = 0,
			LastPageFirst = 1,
		}
		public enum ColorMode {
			GrayScale = 0,
			Color = 1,
		}
		public enum PaperSource {
			OnlyOne = 0,
			Lower = 1,
			Middle = 2,
			Manual = 3,
			Envelope = 4,
			EnvelopeManual = 5,
			Auto = 6,
			Tractor = 7,
			SmallFormat = 8,
			LargeFormat = 9,
			LargeCapacity = 10,
			Cassette = 11,
			FormSource = 12,
		}
		public enum PrinterState {
			Idle = 0,
			Active = 1,
			Aborted = 2,
			Error = 3,
		}
		public enum OutputFormat {
			NativeFormat = 0,
			PdfFormat = 1,
			PostScriptFormat = 2,
		}
		public enum PrintRange {
			AllPages = 0,
			Selection = 1,
			PageRange = 2,
		}
		public QPrinter(QPrinter.PrinterMode mode) : this((Type) null) {
			CreateProxy();
			NewQPrinter(mode);
		}
		[SmokeMethod("QPrinter$", "(QPrinter::PrinterMode)")]
		private void NewQPrinter(QPrinter.PrinterMode mode) {
			ProxyQPrinter().NewQPrinter(mode);
		}
		public QPrinter() : this((Type) null) {
			CreateProxy();
			NewQPrinter();
		}
		[SmokeMethod("QPrinter", "()")]
		private void NewQPrinter() {
			ProxyQPrinter().NewQPrinter();
		}
		[SmokeMethod("devType", "() const")]
		public new int DevType() {
			return ProxyQPrinter().DevType();
		}
		[SmokeMethod("setOutputFormat$", "(QPrinter::OutputFormat)")]
		public void SetOutputFormat(QPrinter.OutputFormat format) {
			ProxyQPrinter().SetOutputFormat(format);
		}
		[SmokeMethod("outputFormat", "() const")]
		public QPrinter.OutputFormat outputFormat() {
			return ProxyQPrinter().outputFormat();
		}
		[SmokeMethod("setPrinterName$", "(const QString&)")]
		public void SetPrinterName(string arg1) {
			ProxyQPrinter().SetPrinterName(arg1);
		}
		[SmokeMethod("printerName", "() const")]
		public string PrinterName() {
			return ProxyQPrinter().PrinterName();
		}
		[SmokeMethod("setOutputFileName$", "(const QString&)")]
		public void SetOutputFileName(string arg1) {
			ProxyQPrinter().SetOutputFileName(arg1);
		}
		[SmokeMethod("outputFileName", "() const")]
		public string OutputFileName() {
			return ProxyQPrinter().OutputFileName();
		}
		[SmokeMethod("setPrintProgram$", "(const QString&)")]
		public void SetPrintProgram(string arg1) {
			ProxyQPrinter().SetPrintProgram(arg1);
		}
		[SmokeMethod("printProgram", "() const")]
		public string PrintProgram() {
			return ProxyQPrinter().PrintProgram();
		}
		[SmokeMethod("setDocName$", "(const QString&)")]
		public void SetDocName(string arg1) {
			ProxyQPrinter().SetDocName(arg1);
		}
		[SmokeMethod("docName", "() const")]
		public string DocName() {
			return ProxyQPrinter().DocName();
		}
		[SmokeMethod("setCreator$", "(const QString&)")]
		public void SetCreator(string arg1) {
			ProxyQPrinter().SetCreator(arg1);
		}
		[SmokeMethod("creator", "() const")]
		public string Creator() {
			return ProxyQPrinter().Creator();
		}
		[SmokeMethod("setOrientation$", "(QPrinter::Orientation)")]
		public void SetOrientation(QPrinter.Orientation arg1) {
			ProxyQPrinter().SetOrientation(arg1);
		}
		[SmokeMethod("orientation", "() const")]
		public QPrinter.Orientation orientation() {
			return ProxyQPrinter().orientation();
		}
		[SmokeMethod("setPageSize$", "(QPrinter::PageSize)")]
		public void SetPageSize(QPrinter.PageSize arg1) {
			ProxyQPrinter().SetPageSize(arg1);
		}
		[SmokeMethod("pageSize", "() const")]
		public QPrinter.PageSize pageSize() {
			return ProxyQPrinter().pageSize();
		}
		[SmokeMethod("setPageOrder$", "(QPrinter::PageOrder)")]
		public void SetPageOrder(QPrinter.PageOrder arg1) {
			ProxyQPrinter().SetPageOrder(arg1);
		}
		[SmokeMethod("pageOrder", "() const")]
		public QPrinter.PageOrder pageOrder() {
			return ProxyQPrinter().pageOrder();
		}
		[SmokeMethod("setResolution$", "(int)")]
		public void SetResolution(int arg1) {
			ProxyQPrinter().SetResolution(arg1);
		}
		[SmokeMethod("resolution", "() const")]
		public int Resolution() {
			return ProxyQPrinter().Resolution();
		}
		[SmokeMethod("setColorMode$", "(QPrinter::ColorMode)")]
		public void SetColorMode(QPrinter.ColorMode arg1) {
			ProxyQPrinter().SetColorMode(arg1);
		}
		[SmokeMethod("colorMode", "() const")]
		public QPrinter.ColorMode colorMode() {
			return ProxyQPrinter().colorMode();
		}
		[SmokeMethod("setCollateCopies$", "(bool)")]
		public void SetCollateCopies(bool collate) {
			ProxyQPrinter().SetCollateCopies(collate);
		}
		[SmokeMethod("collateCopies", "() const")]
		public bool CollateCopies() {
			return ProxyQPrinter().CollateCopies();
		}
		[SmokeMethod("setFullPage$", "(bool)")]
		public void SetFullPage(bool arg1) {
			ProxyQPrinter().SetFullPage(arg1);
		}
		[SmokeMethod("fullPage", "() const")]
		public bool FullPage() {
			return ProxyQPrinter().FullPage();
		}
		[SmokeMethod("setNumCopies$", "(int)")]
		public void SetNumCopies(int arg1) {
			ProxyQPrinter().SetNumCopies(arg1);
		}
		[SmokeMethod("numCopies", "() const")]
		public int NumCopies() {
			return ProxyQPrinter().NumCopies();
		}
		[SmokeMethod("setPaperSource$", "(QPrinter::PaperSource)")]
		public void SetPaperSource(QPrinter.PaperSource arg1) {
			ProxyQPrinter().SetPaperSource(arg1);
		}
		[SmokeMethod("paperSource", "() const")]
		public QPrinter.PaperSource paperSource() {
			return ProxyQPrinter().paperSource();
		}
		[SmokeMethod("supportedResolutions", "() const")]
		public List<int> SupportedResolutions() {
			return ProxyQPrinter().SupportedResolutions();
		}
		[SmokeMethod("setFontEmbeddingEnabled$", "(bool)")]
		public void SetFontEmbeddingEnabled(bool enable) {
			ProxyQPrinter().SetFontEmbeddingEnabled(enable);
		}
		[SmokeMethod("fontEmbeddingEnabled", "() const")]
		public bool FontEmbeddingEnabled() {
			return ProxyQPrinter().FontEmbeddingEnabled();
		}
		[SmokeMethod("setDoubleSidedPrinting$", "(bool)")]
		public void SetDoubleSidedPrinting(bool enable) {
			ProxyQPrinter().SetDoubleSidedPrinting(enable);
		}
		[SmokeMethod("doubleSidedPrinting", "() const")]
		public bool DoubleSidedPrinting() {
			return ProxyQPrinter().DoubleSidedPrinting();
		}
		[SmokeMethod("paperRect", "() const")]
		public QRect PaperRect() {
			return ProxyQPrinter().PaperRect();
		}
		[SmokeMethod("pageRect", "() const")]
		public QRect PageRect() {
			return ProxyQPrinter().PageRect();
		}
		[SmokeMethod("newPage", "()")]
		public bool NewPage() {
			return ProxyQPrinter().NewPage();
		}
		[SmokeMethod("abort", "()")]
		public bool Abort() {
			return ProxyQPrinter().Abort();
		}
		[SmokeMethod("printerState", "() const")]
		public QPrinter.PrinterState printerState() {
			return ProxyQPrinter().printerState();
		}
		[SmokeMethod("paintEngine", "() const")]
		public new QPaintEngine PaintEngine() {
			return ProxyQPrinter().PaintEngine();
		}
		[SmokeMethod("printEngine", "() const")]
		public QPrintEngine PrintEngine() {
			return ProxyQPrinter().PrintEngine();
		}
		[SmokeMethod("setFromTo$$", "(int, int)")]
		public void SetFromTo(int fromPage, int toPage) {
			ProxyQPrinter().SetFromTo(fromPage,toPage);
		}
		[SmokeMethod("fromPage", "() const")]
		public int FromPage() {
			return ProxyQPrinter().FromPage();
		}
		[SmokeMethod("toPage", "() const")]
		public int ToPage() {
			return ProxyQPrinter().ToPage();
		}
		[SmokeMethod("setPrintRange$", "(QPrinter::PrintRange)")]
		public void SetPrintRange(QPrinter.PrintRange range) {
			ProxyQPrinter().SetPrintRange(range);
		}
		[SmokeMethod("printRange", "() const")]
		public QPrinter.PrintRange printRange() {
			return ProxyQPrinter().printRange();
		}
		[SmokeMethod("metric$", "(QPaintDevice::PaintDeviceMetric) const")]
		protected new int Metric(IQPaintDevice arg1) {
			return ProxyQPrinter().Metric(arg1);
		}
		[SmokeMethod("setEngines##", "(QPrintEngine*, QPaintEngine*)")]
		protected void SetEngines(QPrintEngine printEngine, QPaintEngine paintEngine) {
			ProxyQPrinter().SetEngines(printEngine,paintEngine);
		}
		~QPrinter() {
			DisposeQPrinter();
		}
		public void Dispose() {
			DisposeQPrinter();
		}
		[SmokeMethod("~QPrinter", "()")]
		private void DisposeQPrinter() {
			ProxyQPrinter().DisposeQPrinter();
		}
	}
}
