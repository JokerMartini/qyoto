//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QGridLayout")]
	public class QGridLayout : QLayout, IDisposable {
 		protected QGridLayout(Type dummy) : base((Type) null) {}
		[SmokeClass("QGridLayout")]
		interface IQGridLayoutProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QGridLayout), this);
			interceptor = (QGridLayout) realProxy.GetTransparentProxy();
		}
		private static IQGridLayoutProxy staticInterceptor = null;
		static QGridLayout() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQGridLayoutProxy), null);
			staticInterceptor = (IQGridLayoutProxy) realProxy.GetTransparentProxy();
		}
		public QGridLayout(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQGridLayout(parent);
		}
		[SmokeMethod("QGridLayout", "(QWidget*)", "#")]
		private void NewQGridLayout(QWidget parent) {
			((QGridLayout) interceptor).NewQGridLayout(parent);
		}
		public QGridLayout() : this((Type) null) {
			CreateProxy();
			NewQGridLayout();
		}
		[SmokeMethod("QGridLayout", "()", "")]
		private void NewQGridLayout() {
			((QGridLayout) interceptor).NewQGridLayout();
		}
		[SmokeMethod("sizeHint", "() const", "")]
		public override QSize SizeHint() {
			return ((QGridLayout) interceptor).SizeHint();
		}
		[SmokeMethod("minimumSize", "() const", "")]
		public override QSize MinimumSize() {
			return ((QGridLayout) interceptor).MinimumSize();
		}
		[SmokeMethod("maximumSize", "() const", "")]
		public override QSize MaximumSize() {
			return ((QGridLayout) interceptor).MaximumSize();
		}
		[SmokeMethod("setRowStretch", "(int, int)", "$$")]
		public void SetRowStretch(int row, int stretch) {
			((QGridLayout) interceptor).SetRowStretch(row,stretch);
		}
		[SmokeMethod("setColumnStretch", "(int, int)", "$$")]
		public void SetColumnStretch(int column, int stretch) {
			((QGridLayout) interceptor).SetColumnStretch(column,stretch);
		}
		[SmokeMethod("rowStretch", "(int) const", "$")]
		public int RowStretch(int row) {
			return ((QGridLayout) interceptor).RowStretch(row);
		}
		[SmokeMethod("columnStretch", "(int) const", "$")]
		public int ColumnStretch(int column) {
			return ((QGridLayout) interceptor).ColumnStretch(column);
		}
		[SmokeMethod("setRowMinimumHeight", "(int, int)", "$$")]
		public void SetRowMinimumHeight(int row, int minSize) {
			((QGridLayout) interceptor).SetRowMinimumHeight(row,minSize);
		}
		[SmokeMethod("setColumnMinimumWidth", "(int, int)", "$$")]
		public void SetColumnMinimumWidth(int column, int minSize) {
			((QGridLayout) interceptor).SetColumnMinimumWidth(column,minSize);
		}
		[SmokeMethod("rowMinimumHeight", "(int) const", "$")]
		public int RowMinimumHeight(int row) {
			return ((QGridLayout) interceptor).RowMinimumHeight(row);
		}
		[SmokeMethod("columnMinimumWidth", "(int) const", "$")]
		public int ColumnMinimumWidth(int column) {
			return ((QGridLayout) interceptor).ColumnMinimumWidth(column);
		}
		[SmokeMethod("columnCount", "() const", "")]
		public int ColumnCount() {
			return ((QGridLayout) interceptor).ColumnCount();
		}
		[SmokeMethod("rowCount", "() const", "")]
		public int RowCount() {
			return ((QGridLayout) interceptor).RowCount();
		}
		[SmokeMethod("cellRect", "(int, int) const", "$$")]
		public QRect CellRect(int row, int column) {
			return ((QGridLayout) interceptor).CellRect(row,column);
		}
		[SmokeMethod("hasHeightForWidth", "() const", "")]
		public override bool HasHeightForWidth() {
			return ((QGridLayout) interceptor).HasHeightForWidth();
		}
		[SmokeMethod("heightForWidth", "(int) const", "$")]
		public override int HeightForWidth(int arg1) {
			return ((QGridLayout) interceptor).HeightForWidth(arg1);
		}
		[SmokeMethod("minimumHeightForWidth", "(int) const", "$")]
		public override int MinimumHeightForWidth(int arg1) {
			return ((QGridLayout) interceptor).MinimumHeightForWidth(arg1);
		}
		[SmokeMethod("expandingDirections", "() const", "")]
		public override int ExpandingDirections() {
			return ((QGridLayout) interceptor).ExpandingDirections();
		}
		[SmokeMethod("invalidate", "()", "")]
		public override void Invalidate() {
			((QGridLayout) interceptor).Invalidate();
		}
		[SmokeMethod("addWidget", "(QWidget*)", "#")]
		public void AddWidget(QWidget w) {
			((QGridLayout) interceptor).AddWidget(w);
		}
		[SmokeMethod("addWidget", "(QWidget*, int, int, Qt::Alignment)", "#$$$")]
		public void AddWidget(QWidget arg1, int row, int column, int arg4) {
			((QGridLayout) interceptor).AddWidget(arg1,row,column,arg4);
		}
		[SmokeMethod("addWidget", "(QWidget*, int, int)", "#$$")]
		public void AddWidget(QWidget arg1, int row, int column) {
			((QGridLayout) interceptor).AddWidget(arg1,row,column);
		}
		[SmokeMethod("addWidget", "(QWidget*, int, int, int, int, Qt::Alignment)", "#$$$$$")]
		public void AddWidget(QWidget arg1, int row, int column, int rowSpan, int columnSpan, int arg6) {
			((QGridLayout) interceptor).AddWidget(arg1,row,column,rowSpan,columnSpan,arg6);
		}
		[SmokeMethod("addWidget", "(QWidget*, int, int, int, int)", "#$$$$")]
		public void AddWidget(QWidget arg1, int row, int column, int rowSpan, int columnSpan) {
			((QGridLayout) interceptor).AddWidget(arg1,row,column,rowSpan,columnSpan);
		}
		[SmokeMethod("addLayout", "(QLayout*, int, int, Qt::Alignment)", "#$$$")]
		public void AddLayout(QLayout arg1, int row, int column, int arg4) {
			((QGridLayout) interceptor).AddLayout(arg1,row,column,arg4);
		}
		[SmokeMethod("addLayout", "(QLayout*, int, int)", "#$$")]
		public void AddLayout(QLayout arg1, int row, int column) {
			((QGridLayout) interceptor).AddLayout(arg1,row,column);
		}
		[SmokeMethod("addLayout", "(QLayout*, int, int, int, int, Qt::Alignment)", "#$$$$$")]
		public void AddLayout(QLayout arg1, int row, int column, int rowSpan, int columnSpan, int arg6) {
			((QGridLayout) interceptor).AddLayout(arg1,row,column,rowSpan,columnSpan,arg6);
		}
		[SmokeMethod("addLayout", "(QLayout*, int, int, int, int)", "#$$$$")]
		public void AddLayout(QLayout arg1, int row, int column, int rowSpan, int columnSpan) {
			((QGridLayout) interceptor).AddLayout(arg1,row,column,rowSpan,columnSpan);
		}
		[SmokeMethod("setOriginCorner", "(Qt::Corner)", "$")]
		public void SetOriginCorner(Qt.Corner arg1) {
			((QGridLayout) interceptor).SetOriginCorner(arg1);
		}
		[SmokeMethod("originCorner", "() const", "")]
		public Qt.Corner OriginCorner() {
			return ((QGridLayout) interceptor).OriginCorner();
		}
		[SmokeMethod("itemAt", "(int) const", "$")]
		public override IQLayoutItem ItemAt(int arg1) {
			return ((QGridLayout) interceptor).ItemAt(arg1);
		}
		[SmokeMethod("takeAt", "(int)", "$")]
		public override IQLayoutItem TakeAt(int arg1) {
			return ((QGridLayout) interceptor).TakeAt(arg1);
		}
		[SmokeMethod("count", "() const", "")]
		public override int Count() {
			return ((QGridLayout) interceptor).Count();
		}
		[SmokeMethod("setGeometry", "(const QRect&)", "#")]
		public override void SetGeometry(QRect arg1) {
			((QGridLayout) interceptor).SetGeometry(arg1);
		}
		[SmokeMethod("addItem", "(QLayoutItem*, int, int, int, int, Qt::Alignment)", "#$$$$$")]
		public void AddItem(IQLayoutItem item, int row, int column, int rowSpan, int columnSpan, int arg6) {
			((QGridLayout) interceptor).AddItem(item,row,column,rowSpan,columnSpan,arg6);
		}
		[SmokeMethod("addItem", "(QLayoutItem*, int, int, int, int)", "#$$$$")]
		public void AddItem(IQLayoutItem item, int row, int column, int rowSpan, int columnSpan) {
			((QGridLayout) interceptor).AddItem(item,row,column,rowSpan,columnSpan);
		}
		[SmokeMethod("addItem", "(QLayoutItem*, int, int, int)", "#$$$")]
		public void AddItem(IQLayoutItem item, int row, int column, int rowSpan) {
			((QGridLayout) interceptor).AddItem(item,row,column,rowSpan);
		}
		[SmokeMethod("addItem", "(QLayoutItem*, int, int)", "#$$")]
		public void AddItem(IQLayoutItem item, int row, int column) {
			((QGridLayout) interceptor).AddItem(item,row,column);
		}
		[SmokeMethod("setDefaultPositioning", "(int, Qt::Orientation)", "$$")]
		public void SetDefaultPositioning(int n, Qt.Orientation orient) {
			((QGridLayout) interceptor).SetDefaultPositioning(n,orient);
		}
		[SmokeMethod("getItemPosition", "(int, int*, int*, int*, int*)", "$$$$$")]
		public void GetItemPosition(int idx, out int row, out int column, out int rowSpan, out int columnSpan) {
			((QGridLayout) interceptor).GetItemPosition(idx,out row,out column,out rowSpan,out columnSpan);
		}
		[SmokeMethod("addItem", "(QLayoutItem*)", "#")]
		public override void AddItem(IQLayoutItem arg1) {
			((QGridLayout) interceptor).AddItem(arg1);
		}
		~QGridLayout() {
			DisposeQGridLayout();
		}
		public new void Dispose() {
			DisposeQGridLayout();
		}
		[SmokeMethod("~QGridLayout", "()", "")]
		private void DisposeQGridLayout() {
			((QGridLayout) interceptor).DisposeQGridLayout();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQGridLayoutSignals Emit {
			get { return (IQGridLayoutSignals) Q_EMIT; }
		}
	}

	public interface IQGridLayoutSignals : IQLayoutSignals {
	}
}
