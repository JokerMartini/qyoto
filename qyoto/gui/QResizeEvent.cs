//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QResizeEvent")]
	public class QResizeEvent : QEvent, IDisposable {
 		protected QResizeEvent(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QResizeEvent), this);
			interceptor = (QResizeEvent) realProxy.GetTransparentProxy();
		}
		public QResizeEvent(QSize size, QSize oldSize) : this((Type) null) {
			CreateProxy();
			NewQResizeEvent(size,oldSize);
		}
		[SmokeMethod("QResizeEvent", "(const QSize&, const QSize&)", "##")]
		private void NewQResizeEvent(QSize size, QSize oldSize) {
			((QResizeEvent) interceptor).NewQResizeEvent(size,oldSize);
		}
		[SmokeMethod("size", "() const", "")]
		public QSize Size() {
			return ((QResizeEvent) interceptor).Size();
		}
		[SmokeMethod("oldSize", "() const", "")]
		public QSize OldSize() {
			return ((QResizeEvent) interceptor).OldSize();
		}
		~QResizeEvent() {
			DisposeQResizeEvent();
		}
		public new void Dispose() {
			DisposeQResizeEvent();
		}
		[SmokeMethod("~QResizeEvent", "()", "")]
		private void DisposeQResizeEvent() {
			((QResizeEvent) interceptor).DisposeQResizeEvent();
		}
	}
}
