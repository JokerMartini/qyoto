//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	/// See <see cref="IQWidgetSignals"></see> for signals emitted by QWidget
	[SmokeClass("QWidget")]
	public class QWidget : QObject, IQPaintDevice, IDisposable {
 		protected QWidget(Type dummy) : base((Type) null) {}
		[SmokeClass("QWidget")]
		interface IQWidgetProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
			[SmokeMethod("setTabOrder", "(QWidget*, QWidget*)", "##")]
			void SetTabOrder(QWidget arg1, QWidget arg2);
			[SmokeMethod("mouseGrabber", "()", "")]
			QWidget MouseGrabber();
			[SmokeMethod("keyboardGrabber", "()", "")]
			QWidget KeyboardGrabber();
			[SmokeMethod("find", "(WId)", "$")]
			QWidget Find(ulong arg1);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QWidget), this);
			interceptor = (QWidget) realProxy.GetTransparentProxy();
		}
		private static IQWidgetProxy staticInterceptor = null;
		static QWidget() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQWidgetProxy), null);
			staticInterceptor = (IQWidgetProxy) realProxy.GetTransparentProxy();
		}
		[Q_PROPERTY("bool", "modal")]
		public bool Modal {
			get { return Property("modal").Value<bool>(); }
		}
		[Q_PROPERTY("Qt::WindowModality", "windowModality")]
		public Qt.WindowModality WindowModality {
			get { return Property("windowModality").Value<Qt.WindowModality>(); }
			set { SetProperty("windowModality", QVariant.FromValue<Qt.WindowModality>(value)); }
		}
		[Q_PROPERTY("bool", "enabled")]
		public bool Enabled {
			get { return Property("enabled").Value<bool>(); }
			set { SetProperty("enabled", QVariant.FromValue<bool>(value)); }
		}
		[Q_PROPERTY("QRect", "geometry")]
		public QRect Geometry {
			get { return Property("geometry").Value<QRect>(); }
			set { SetProperty("geometry", QVariant.FromValue<QRect>(value)); }
		}
		[Q_PROPERTY("QRect", "frameGeometry")]
		public QRect FrameGeometry {
			get { return Property("frameGeometry").Value<QRect>(); }
		}
		[Q_PROPERTY("QRect", "normalGeometry")]
		public QRect NormalGeometry {
			get { return Property("normalGeometry").Value<QRect>(); }
		}
		[Q_PROPERTY("int", "x")]
		public int X {
			get { return Property("x").Value<int>(); }
		}
		[Q_PROPERTY("int", "y")]
		public int Y {
			get { return Property("y").Value<int>(); }
		}
		[Q_PROPERTY("QPoint", "pos")]
		public QPoint Pos {
			get { return Property("pos").Value<QPoint>(); }
			set { SetProperty("pos", QVariant.FromValue<QPoint>(value)); }
		}
		[Q_PROPERTY("QSize", "frameSize")]
		public QSize FrameSize {
			get { return Property("frameSize").Value<QSize>(); }
		}
		[Q_PROPERTY("QSize", "size")]
		public QSize Size {
			get { return Property("size").Value<QSize>(); }
			set { SetProperty("size", QVariant.FromValue<QSize>(value)); }
		}
		[Q_PROPERTY("QRect", "rect")]
		public QRect Rect {
			get { return Property("rect").Value<QRect>(); }
		}
		[Q_PROPERTY("QRect", "childrenRect")]
		public QRect ChildrenRect {
			get { return Property("childrenRect").Value<QRect>(); }
		}
		[Q_PROPERTY("QRegion", "childrenRegion")]
		public QRegion ChildrenRegion {
			get { return Property("childrenRegion").Value<QRegion>(); }
		}
		[Q_PROPERTY("QSizePolicy", "sizePolicy")]
		public QSizePolicy SizePolicy {
			get { return Property("sizePolicy").Value<QSizePolicy>(); }
			set { SetProperty("sizePolicy", QVariant.FromValue<QSizePolicy>(value)); }
		}
		[Q_PROPERTY("QSize", "minimumSize")]
		public QSize MinimumSize {
			get { return Property("minimumSize").Value<QSize>(); }
			set { SetProperty("minimumSize", QVariant.FromValue<QSize>(value)); }
		}
		[Q_PROPERTY("QSize", "maximumSize")]
		public QSize MaximumSize {
			get { return Property("maximumSize").Value<QSize>(); }
			set { SetProperty("maximumSize", QVariant.FromValue<QSize>(value)); }
		}
		[Q_PROPERTY("int", "minimumWidth")]
		public int MinimumWidth {
			get { return Property("minimumWidth").Value<int>(); }
			set { SetProperty("minimumWidth", QVariant.FromValue<int>(value)); }
		}
		[Q_PROPERTY("int", "minimumHeight")]
		public int MinimumHeight {
			get { return Property("minimumHeight").Value<int>(); }
			set { SetProperty("minimumHeight", QVariant.FromValue<int>(value)); }
		}
		[Q_PROPERTY("int", "maximumWidth")]
		public int MaximumWidth {
			get { return Property("maximumWidth").Value<int>(); }
			set { SetProperty("maximumWidth", QVariant.FromValue<int>(value)); }
		}
		[Q_PROPERTY("int", "maximumHeight")]
		public int MaximumHeight {
			get { return Property("maximumHeight").Value<int>(); }
			set { SetProperty("maximumHeight", QVariant.FromValue<int>(value)); }
		}
		[Q_PROPERTY("QSize", "sizeIncrement")]
		public QSize SizeIncrement {
			get { return Property("sizeIncrement").Value<QSize>(); }
			set { SetProperty("sizeIncrement", QVariant.FromValue<QSize>(value)); }
		}
		[Q_PROPERTY("QSize", "baseSize")]
		public QSize BaseSize {
			get { return Property("baseSize").Value<QSize>(); }
			set { SetProperty("baseSize", QVariant.FromValue<QSize>(value)); }
		}
		[Q_PROPERTY("QPalette", "palette")]
		public QPalette Palette {
			get { return Property("palette").Value<QPalette>(); }
			set { SetProperty("palette", QVariant.FromValue<QPalette>(value)); }
		}
		[Q_PROPERTY("QFont", "font")]
		public QFont Font {
			get { return Property("font").Value<QFont>(); }
			set { SetProperty("font", QVariant.FromValue<QFont>(value)); }
		}
		[Q_PROPERTY("QCursor", "cursor")]
		public QCursor Cursor {
			get { return Property("cursor").Value<QCursor>(); }
			set { SetProperty("cursor", QVariant.FromValue<QCursor>(value)); }
		}
		[Q_PROPERTY("bool", "mouseTracking")]
		public bool MouseTracking {
			get { return Property("mouseTracking").Value<bool>(); }
			set { SetProperty("mouseTracking", QVariant.FromValue<bool>(value)); }
		}
		[Q_PROPERTY("bool", "isActiveWindow")]
		public bool IsActiveWindow {
			get { return Property("isActiveWindow").Value<bool>(); }
		}
		[Q_PROPERTY("Qt::FocusPolicy", "focusPolicy")]
		public Qt.FocusPolicy FocusPolicy {
			get { return Property("focusPolicy").Value<Qt.FocusPolicy>(); }
			set { SetProperty("focusPolicy", QVariant.FromValue<Qt.FocusPolicy>(value)); }
		}
		[Q_PROPERTY("bool", "focus")]
		public bool Focus {
			get { return Property("focus").Value<bool>(); }
		}
		[Q_PROPERTY("Qt::ContextMenuPolicy", "contextMenuPolicy")]
		public Qt.ContextMenuPolicy ContextMenuPolicy {
			get { return Property("contextMenuPolicy").Value<Qt.ContextMenuPolicy>(); }
			set { SetProperty("contextMenuPolicy", QVariant.FromValue<Qt.ContextMenuPolicy>(value)); }
		}
		[Q_PROPERTY("bool", "updatesEnabled")]
		public bool UpdatesEnabled {
			get { return Property("updatesEnabled").Value<bool>(); }
			set { SetProperty("updatesEnabled", QVariant.FromValue<bool>(value)); }
		}
		[Q_PROPERTY("bool", "minimized")]
		public bool Minimized {
			get { return Property("minimized").Value<bool>(); }
		}
		[Q_PROPERTY("bool", "maximized")]
		public bool Maximized {
			get { return Property("maximized").Value<bool>(); }
		}
		[Q_PROPERTY("bool", "fullScreen")]
		public bool FullScreen {
			get { return Property("fullScreen").Value<bool>(); }
		}
		[Q_PROPERTY("bool", "acceptDrops")]
		public bool AcceptDrops {
			get { return Property("acceptDrops").Value<bool>(); }
			set { SetProperty("acceptDrops", QVariant.FromValue<bool>(value)); }
		}
		[Q_PROPERTY("QString", "windowTitle")]
		public string WindowTitle {
			get { return Property("windowTitle").Value<string>(); }
			set { SetProperty("windowTitle", QVariant.FromValue<string>(value)); }
		}
		[Q_PROPERTY("QIcon", "windowIcon")]
		public QIcon WindowIcon {
			get { return Property("windowIcon").Value<QIcon>(); }
			set { SetProperty("windowIcon", QVariant.FromValue<QIcon>(value)); }
		}
		[Q_PROPERTY("QString", "windowIconText")]
		public string WindowIconText {
			get { return Property("windowIconText").Value<string>(); }
			set { SetProperty("windowIconText", QVariant.FromValue<string>(value)); }
		}
		[Q_PROPERTY("double", "windowOpacity")]
		public double WindowOpacity {
			get { return Property("windowOpacity").Value<double>(); }
			set { SetProperty("windowOpacity", QVariant.FromValue<double>(value)); }
		}
		[Q_PROPERTY("bool", "windowModified")]
		public bool WindowModified {
			get { return Property("windowModified").Value<bool>(); }
			set { SetProperty("windowModified", QVariant.FromValue<bool>(value)); }
		}
		[Q_PROPERTY("QString", "toolTip")]
		public string ToolTip {
			get { return Property("toolTip").Value<string>(); }
			set { SetProperty("toolTip", QVariant.FromValue<string>(value)); }
		}
		[Q_PROPERTY("QString", "statusTip")]
		public string StatusTip {
			get { return Property("statusTip").Value<string>(); }
			set { SetProperty("statusTip", QVariant.FromValue<string>(value)); }
		}
		[Q_PROPERTY("QString", "whatsThis")]
		public string WhatsThis {
			get { return Property("whatsThis").Value<string>(); }
			set { SetProperty("whatsThis", QVariant.FromValue<string>(value)); }
		}
		[Q_PROPERTY("QString", "accessibleName")]
		public string AccessibleName {
			get { return Property("accessibleName").Value<string>(); }
			set { SetProperty("accessibleName", QVariant.FromValue<string>(value)); }
		}
		[Q_PROPERTY("QString", "accessibleDescription")]
		public string AccessibleDescription {
			get { return Property("accessibleDescription").Value<string>(); }
			set { SetProperty("accessibleDescription", QVariant.FromValue<string>(value)); }
		}
		[Q_PROPERTY("Qt::LayoutDirection", "layoutDirection")]
		public Qt.LayoutDirection LayoutDirection {
			get { return Property("layoutDirection").Value<Qt.LayoutDirection>(); }
			set { SetProperty("layoutDirection", QVariant.FromValue<Qt.LayoutDirection>(value)); }
		}
		[Q_PROPERTY("bool", "autoFillBackground")]
		public bool AutoFillBackground {
			get { return Property("autoFillBackground").Value<bool>(); }
			set { SetProperty("autoFillBackground", QVariant.FromValue<bool>(value)); }
		}
		[Q_PROPERTY("QString", "styleSheet")]
		public string StyleSheet {
			get { return Property("styleSheet").Value<string>(); }
			set { SetProperty("styleSheet", QVariant.FromValue<string>(value)); }
		}
		// void setWindowSurface(QWindowSurface* arg1); >>>> NOT CONVERTED
		// QWindowSurface* windowSurface(); >>>> NOT CONVERTED
		public QWidget(QWidget parent, int f) : this((Type) null) {
			CreateProxy();
			NewQWidget(parent,f);
		}
		[SmokeMethod("QWidget", "(QWidget*, Qt::WindowFlags)", "#$")]
		private void NewQWidget(QWidget parent, int f) {
			((QWidget) interceptor).NewQWidget(parent,f);
		}
		public QWidget(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQWidget(parent);
		}
		[SmokeMethod("QWidget", "(QWidget*)", "#")]
		private void NewQWidget(QWidget parent) {
			((QWidget) interceptor).NewQWidget(parent);
		}
		public QWidget() : this((Type) null) {
			CreateProxy();
			NewQWidget();
		}
		[SmokeMethod("QWidget", "()", "")]
		private void NewQWidget() {
			((QWidget) interceptor).NewQWidget();
		}
		[SmokeMethod("devType", "() const", "")]
		public virtual int DevType() {
			return ((QWidget) interceptor).DevType();
		}
		[SmokeMethod("winId", "() const", "")]
		public ulong WinId() {
			return ((QWidget) interceptor).WinId();
		}
		[SmokeMethod("createWinId", "()", "")]
		public void CreateWinId() {
			((QWidget) interceptor).CreateWinId();
		}
		[SmokeMethod("internalWinId", "() const", "")]
		public ulong InternalWinId() {
			return ((QWidget) interceptor).InternalWinId();
		}
		[SmokeMethod("style", "() const", "")]
		public QStyle Style() {
			return ((QWidget) interceptor).Style();
		}
		[SmokeMethod("setStyle", "(QStyle*)", "#")]
		public void SetStyle(QStyle arg1) {
			((QWidget) interceptor).SetStyle(arg1);
		}
		[SmokeMethod("isTopLevel", "() const", "")]
		public bool IsTopLevel() {
			return ((QWidget) interceptor).IsTopLevel();
		}
		[SmokeMethod("isWindow", "() const", "")]
		public bool IsWindow() {
			return ((QWidget) interceptor).IsWindow();
		}
		[SmokeMethod("isModal", "() const", "")]
		public bool IsModal() {
			return ((QWidget) interceptor).IsModal();
		}
		[SmokeMethod("isEnabled", "() const", "")]
		public bool IsEnabled() {
			return ((QWidget) interceptor).IsEnabled();
		}
		[SmokeMethod("isEnabledTo", "(QWidget*) const", "#")]
		public bool IsEnabledTo(QWidget arg1) {
			return ((QWidget) interceptor).IsEnabledTo(arg1);
		}
		[SmokeMethod("isEnabledToTLW", "() const", "")]
		public bool IsEnabledToTLW() {
			return ((QWidget) interceptor).IsEnabledToTLW();
		}
		[SmokeMethod("width", "() const", "")]
		public int Width() {
			return ((QWidget) interceptor).Width();
		}
		[SmokeMethod("height", "() const", "")]
		public int Height() {
			return ((QWidget) interceptor).Height();
		}
		[SmokeMethod("setMinimumSize", "(int, int)", "$$")]
		public void SetMinimumSize(int minw, int minh) {
			((QWidget) interceptor).SetMinimumSize(minw,minh);
		}
		[SmokeMethod("setMaximumSize", "(int, int)", "$$")]
		public void SetMaximumSize(int maxw, int maxh) {
			((QWidget) interceptor).SetMaximumSize(maxw,maxh);
		}
		[SmokeMethod("setSizeIncrement", "(int, int)", "$$")]
		public void SetSizeIncrement(int w, int h) {
			((QWidget) interceptor).SetSizeIncrement(w,h);
		}
		[SmokeMethod("setBaseSize", "(int, int)", "$$")]
		public void SetBaseSize(int basew, int baseh) {
			((QWidget) interceptor).SetBaseSize(basew,baseh);
		}
		[SmokeMethod("setFixedSize", "(const QSize&)", "#")]
		public void SetFixedSize(QSize arg1) {
			((QWidget) interceptor).SetFixedSize(arg1);
		}
		[SmokeMethod("setFixedSize", "(int, int)", "$$")]
		public void SetFixedSize(int w, int h) {
			((QWidget) interceptor).SetFixedSize(w,h);
		}
		[SmokeMethod("setFixedWidth", "(int)", "$")]
		public void SetFixedWidth(int w) {
			((QWidget) interceptor).SetFixedWidth(w);
		}
		[SmokeMethod("setFixedHeight", "(int)", "$")]
		public void SetFixedHeight(int h) {
			((QWidget) interceptor).SetFixedHeight(h);
		}
		[SmokeMethod("mapToGlobal", "(const QPoint&) const", "#")]
		public QPoint MapToGlobal(QPoint arg1) {
			return ((QWidget) interceptor).MapToGlobal(arg1);
		}
		[SmokeMethod("mapFromGlobal", "(const QPoint&) const", "#")]
		public QPoint MapFromGlobal(QPoint arg1) {
			return ((QWidget) interceptor).MapFromGlobal(arg1);
		}
		[SmokeMethod("mapToParent", "(const QPoint&) const", "#")]
		public QPoint MapToParent(QPoint arg1) {
			return ((QWidget) interceptor).MapToParent(arg1);
		}
		[SmokeMethod("mapFromParent", "(const QPoint&) const", "#")]
		public QPoint MapFromParent(QPoint arg1) {
			return ((QWidget) interceptor).MapFromParent(arg1);
		}
		[SmokeMethod("mapTo", "(QWidget*, const QPoint&) const", "##")]
		public QPoint MapTo(QWidget arg1, QPoint arg2) {
			return ((QWidget) interceptor).MapTo(arg1,arg2);
		}
		[SmokeMethod("mapFrom", "(QWidget*, const QPoint&) const", "##")]
		public QPoint MapFrom(QWidget arg1, QPoint arg2) {
			return ((QWidget) interceptor).MapFrom(arg1,arg2);
		}
		[SmokeMethod("window", "() const", "")]
		public QWidget Window() {
			return ((QWidget) interceptor).Window();
		}
		[SmokeMethod("topLevelWidget", "() const", "")]
		public QWidget TopLevelWidget() {
			return ((QWidget) interceptor).TopLevelWidget();
		}
		[SmokeMethod("setBackgroundRole", "(QPalette::ColorRole)", "$")]
		public void SetBackgroundRole(QPalette.ColorRole arg1) {
			((QWidget) interceptor).SetBackgroundRole(arg1);
		}
		[SmokeMethod("backgroundRole", "() const", "")]
		public QPalette.ColorRole BackgroundRole() {
			return ((QWidget) interceptor).BackgroundRole();
		}
		[SmokeMethod("setForegroundRole", "(QPalette::ColorRole)", "$")]
		public void SetForegroundRole(QPalette.ColorRole arg1) {
			((QWidget) interceptor).SetForegroundRole(arg1);
		}
		[SmokeMethod("foregroundRole", "() const", "")]
		public QPalette.ColorRole ForegroundRole() {
			return ((QWidget) interceptor).ForegroundRole();
		}
		[SmokeMethod("fontMetrics", "() const", "")]
		public QFontMetrics FontMetrics() {
			return ((QWidget) interceptor).FontMetrics();
		}
		[SmokeMethod("fontInfo", "() const", "")]
		public QFontInfo FontInfo() {
			return ((QWidget) interceptor).FontInfo();
		}
		[SmokeMethod("unsetCursor", "()", "")]
		public void UnsetCursor() {
			((QWidget) interceptor).UnsetCursor();
		}
		[SmokeMethod("hasMouseTracking", "() const", "")]
		public bool HasMouseTracking() {
			return ((QWidget) interceptor).HasMouseTracking();
		}
		[SmokeMethod("underMouse", "() const", "")]
		public bool UnderMouse() {
			return ((QWidget) interceptor).UnderMouse();
		}
		[SmokeMethod("setMask", "(const QBitmap&)", "#")]
		public void SetMask(QBitmap arg1) {
			((QWidget) interceptor).SetMask(arg1);
		}
		[SmokeMethod("setMask", "(const QRegion&)", "#")]
		public void SetMask(QRegion arg1) {
			((QWidget) interceptor).SetMask(arg1);
		}
		[SmokeMethod("mask", "() const", "")]
		public QRegion Mask() {
			return ((QWidget) interceptor).Mask();
		}
		[SmokeMethod("clearMask", "()", "")]
		public void ClearMask() {
			((QWidget) interceptor).ClearMask();
		}
		[SmokeMethod("setWindowRole", "(const QString&)", "$")]
		public void SetWindowRole(string arg1) {
			((QWidget) interceptor).SetWindowRole(arg1);
		}
		[SmokeMethod("windowRole", "() const", "")]
		public string WindowRole() {
			return ((QWidget) interceptor).WindowRole();
		}
		[SmokeMethod("isWindowModified", "() const", "")]
		public bool IsWindowModified() {
			return ((QWidget) interceptor).IsWindowModified();
		}
		[SmokeMethod("unsetLayoutDirection", "()", "")]
		public void UnsetLayoutDirection() {
			((QWidget) interceptor).UnsetLayoutDirection();
		}
		[SmokeMethod("isRightToLeft", "() const", "")]
		public bool IsRightToLeft() {
			return ((QWidget) interceptor).IsRightToLeft();
		}
		[SmokeMethod("isLeftToRight", "() const", "")]
		public bool IsLeftToRight() {
			return ((QWidget) interceptor).IsLeftToRight();
		}
		[SmokeMethod("activateWindow", "()", "")]
		public void ActivateWindow() {
			((QWidget) interceptor).ActivateWindow();
		}
		[SmokeMethod("clearFocus", "()", "")]
		public void ClearFocus() {
			((QWidget) interceptor).ClearFocus();
		}
		[SmokeMethod("hasFocus", "() const", "")]
		public bool HasFocus() {
			return ((QWidget) interceptor).HasFocus();
		}
		[SmokeMethod("setFocusProxy", "(QWidget*)", "#")]
		public void SetFocusProxy(QWidget arg1) {
			((QWidget) interceptor).SetFocusProxy(arg1);
		}
		[SmokeMethod("focusProxy", "() const", "")]
		public QWidget FocusProxy() {
			return ((QWidget) interceptor).FocusProxy();
		}
		[SmokeMethod("grabMouse", "()", "")]
		public void GrabMouse() {
			((QWidget) interceptor).GrabMouse();
		}
		[SmokeMethod("grabMouse", "(const QCursor&)", "#")]
		public void GrabMouse(QCursor arg1) {
			((QWidget) interceptor).GrabMouse(arg1);
		}
		[SmokeMethod("releaseMouse", "()", "")]
		public void ReleaseMouse() {
			((QWidget) interceptor).ReleaseMouse();
		}
		[SmokeMethod("grabKeyboard", "()", "")]
		public void GrabKeyboard() {
			((QWidget) interceptor).GrabKeyboard();
		}
		[SmokeMethod("releaseKeyboard", "()", "")]
		public void ReleaseKeyboard() {
			((QWidget) interceptor).ReleaseKeyboard();
		}
		[SmokeMethod("grabShortcut", "(const QKeySequence&, Qt::ShortcutContext)", "#$")]
		public int GrabShortcut(QKeySequence key, Qt.ShortcutContext context) {
			return ((QWidget) interceptor).GrabShortcut(key,context);
		}
		[SmokeMethod("grabShortcut", "(const QKeySequence&)", "#")]
		public int GrabShortcut(QKeySequence key) {
			return ((QWidget) interceptor).GrabShortcut(key);
		}
		[SmokeMethod("releaseShortcut", "(int)", "$")]
		public void ReleaseShortcut(int id) {
			((QWidget) interceptor).ReleaseShortcut(id);
		}
		[SmokeMethod("setShortcutEnabled", "(int, bool)", "$$")]
		public void SetShortcutEnabled(int id, bool enable) {
			((QWidget) interceptor).SetShortcutEnabled(id,enable);
		}
		[SmokeMethod("setShortcutEnabled", "(int)", "$")]
		public void SetShortcutEnabled(int id) {
			((QWidget) interceptor).SetShortcutEnabled(id);
		}
		[SmokeMethod("setShortcutAutoRepeat", "(int, bool)", "$$")]
		public void SetShortcutAutoRepeat(int id, bool enable) {
			((QWidget) interceptor).SetShortcutAutoRepeat(id,enable);
		}
		[SmokeMethod("setShortcutAutoRepeat", "(int)", "$")]
		public void SetShortcutAutoRepeat(int id) {
			((QWidget) interceptor).SetShortcutAutoRepeat(id);
		}
		[SmokeMethod("update", "(int, int, int, int)", "$$$$")]
		public void Update(int x, int y, int w, int h) {
			((QWidget) interceptor).Update(x,y,w,h);
		}
		[SmokeMethod("update", "(const QRect&)", "#")]
		public void Update(QRect arg1) {
			((QWidget) interceptor).Update(arg1);
		}
		[SmokeMethod("update", "(const QRegion&)", "#")]
		public void Update(QRegion arg1) {
			((QWidget) interceptor).Update(arg1);
		}
		[SmokeMethod("repaint", "(int, int, int, int)", "$$$$")]
		public void Repaint(int x, int y, int w, int h) {
			((QWidget) interceptor).Repaint(x,y,w,h);
		}
		[SmokeMethod("repaint", "(const QRect&)", "#")]
		public void Repaint(QRect arg1) {
			((QWidget) interceptor).Repaint(arg1);
		}
		[SmokeMethod("repaint", "(const QRegion&)", "#")]
		public void Repaint(QRegion arg1) {
			((QWidget) interceptor).Repaint(arg1);
		}
		[SmokeMethod("stackUnder", "(QWidget*)", "#")]
		public void StackUnder(QWidget arg1) {
			((QWidget) interceptor).StackUnder(arg1);
		}
		[SmokeMethod("move", "(int, int)", "$$")]
		public void Move(int x, int y) {
			((QWidget) interceptor).Move(x,y);
		}
		[SmokeMethod("move", "(const QPoint&)", "#")]
		public void Move(QPoint arg1) {
			((QWidget) interceptor).Move(arg1);
		}
		[SmokeMethod("resize", "(int, int)", "$$")]
		public void Resize(int w, int h) {
			((QWidget) interceptor).Resize(w,h);
		}
		[SmokeMethod("resize", "(const QSize&)", "#")]
		public void Resize(QSize arg1) {
			((QWidget) interceptor).Resize(arg1);
		}
		[SmokeMethod("setGeometry", "(int, int, int, int)", "$$$$")]
		public void SetGeometry(int x, int y, int w, int h) {
			((QWidget) interceptor).SetGeometry(x,y,w,h);
		}
		[SmokeMethod("saveGeometry", "() const", "")]
		public QByteArray SaveGeometry() {
			return ((QWidget) interceptor).SaveGeometry();
		}
		[SmokeMethod("restoreGeometry", "(const QByteArray&)", "#")]
		public bool RestoreGeometry(QByteArray geometry) {
			return ((QWidget) interceptor).RestoreGeometry(geometry);
		}
		[SmokeMethod("adjustSize", "()", "")]
		public void AdjustSize() {
			((QWidget) interceptor).AdjustSize();
		}
		[SmokeMethod("isVisible", "() const", "")]
		public bool IsVisible() {
			return ((QWidget) interceptor).IsVisible();
		}
		[SmokeMethod("isVisibleTo", "(QWidget*) const", "#")]
		public bool IsVisibleTo(QWidget arg1) {
			return ((QWidget) interceptor).IsVisibleTo(arg1);
		}
		[SmokeMethod("isHidden", "() const", "")]
		public bool IsHidden() {
			return ((QWidget) interceptor).IsHidden();
		}
		[SmokeMethod("isMinimized", "() const", "")]
		public bool IsMinimized() {
			return ((QWidget) interceptor).IsMinimized();
		}
		[SmokeMethod("isMaximized", "() const", "")]
		public bool IsMaximized() {
			return ((QWidget) interceptor).IsMaximized();
		}
		[SmokeMethod("isFullScreen", "() const", "")]
		public bool IsFullScreen() {
			return ((QWidget) interceptor).IsFullScreen();
		}
		[SmokeMethod("windowState", "() const", "")]
		public int WindowState() {
			return ((QWidget) interceptor).WindowState();
		}
		[SmokeMethod("setWindowState", "(Qt::WindowStates)", "$")]
		public void SetWindowState(int state) {
			((QWidget) interceptor).SetWindowState(state);
		}
		[SmokeMethod("overrideWindowState", "(Qt::WindowStates)", "$")]
		public void OverrideWindowState(int state) {
			((QWidget) interceptor).OverrideWindowState(state);
		}
		[SmokeMethod("sizeHint", "() const", "")]
		public virtual QSize SizeHint() {
			return ((QWidget) interceptor).SizeHint();
		}
		[SmokeMethod("minimumSizeHint", "() const", "")]
		public virtual QSize MinimumSizeHint() {
			return ((QWidget) interceptor).MinimumSizeHint();
		}
		[SmokeMethod("setSizePolicy", "(QSizePolicy::Policy, QSizePolicy::Policy)", "$$")]
		public void SetSizePolicy(QSizePolicy.Policy horizontal, QSizePolicy.Policy vertical) {
			((QWidget) interceptor).SetSizePolicy(horizontal,vertical);
		}
		[SmokeMethod("heightForWidth", "(int) const", "$")]
		public virtual int HeightForWidth(int arg1) {
			return ((QWidget) interceptor).HeightForWidth(arg1);
		}
		[SmokeMethod("visibleRegion", "() const", "")]
		public QRegion VisibleRegion() {
			return ((QWidget) interceptor).VisibleRegion();
		}
		[SmokeMethod("setContentsMargins", "(int, int, int, int)", "$$$$")]
		public void SetContentsMargins(int left, int top, int right, int bottom) {
			((QWidget) interceptor).SetContentsMargins(left,top,right,bottom);
		}
		[SmokeMethod("getContentsMargins", "(int*, int*, int*, int*) const", "$$$$")]
		public void GetContentsMargins(out int left, out int top, out int right, out int bottom) {
			((QWidget) interceptor).GetContentsMargins(out left,out top,out right,out bottom);
		}
		[SmokeMethod("contentsRect", "() const", "")]
		public QRect ContentsRect() {
			return ((QWidget) interceptor).ContentsRect();
		}
		[SmokeMethod("layout", "() const", "")]
		public QLayout Layout() {
			return ((QWidget) interceptor).Layout();
		}
		[SmokeMethod("setLayout", "(QLayout*)", "#")]
		public void SetLayout(QLayout arg1) {
			((QWidget) interceptor).SetLayout(arg1);
		}
		[SmokeMethod("updateGeometry", "()", "")]
		public void UpdateGeometry() {
			((QWidget) interceptor).UpdateGeometry();
		}
		[SmokeMethod("setParent", "(QWidget*)", "#")]
		public void SetParent(QWidget parent) {
			((QWidget) interceptor).SetParent(parent);
		}
		[SmokeMethod("setParent", "(QWidget*, Qt::WindowFlags)", "#$")]
		public void SetParent(QWidget parent, int f) {
			((QWidget) interceptor).SetParent(parent,f);
		}
		[SmokeMethod("scroll", "(int, int)", "$$")]
		public void Scroll(int dx, int dy) {
			((QWidget) interceptor).Scroll(dx,dy);
		}
		[SmokeMethod("scroll", "(int, int, const QRect&)", "$$#")]
		public void Scroll(int dx, int dy, QRect arg3) {
			((QWidget) interceptor).Scroll(dx,dy,arg3);
		}
		[SmokeMethod("focusWidget", "() const", "")]
		public QWidget FocusWidget() {
			return ((QWidget) interceptor).FocusWidget();
		}
		[SmokeMethod("nextInFocusChain", "() const", "")]
		public QWidget NextInFocusChain() {
			return ((QWidget) interceptor).NextInFocusChain();
		}
		[SmokeMethod("addAction", "(QAction*)", "#")]
		public void AddAction(QAction action) {
			((QWidget) interceptor).AddAction(action);
		}
		[SmokeMethod("addActions", "(QList<QAction*>)", "?")]
		public void AddActions(List<QAction> actions) {
			((QWidget) interceptor).AddActions(actions);
		}
		[SmokeMethod("insertAction", "(QAction*, QAction*)", "##")]
		public void InsertAction(QAction before, QAction action) {
			((QWidget) interceptor).InsertAction(before,action);
		}
		[SmokeMethod("insertActions", "(QAction*, QList<QAction*>)", "#?")]
		public void InsertActions(QAction before, List<QAction> actions) {
			((QWidget) interceptor).InsertActions(before,actions);
		}
		[SmokeMethod("removeAction", "(QAction*)", "#")]
		public void RemoveAction(QAction action) {
			((QWidget) interceptor).RemoveAction(action);
		}
		[SmokeMethod("actions", "() const", "")]
		public List<QAction> Actions() {
			return ((QWidget) interceptor).Actions();
		}
		[SmokeMethod("parentWidget", "() const", "")]
		public QWidget ParentWidget() {
			return ((QWidget) interceptor).ParentWidget();
		}
		[SmokeMethod("setWindowFlags", "(Qt::WindowFlags)", "$")]
		public void SetWindowFlags(int type) {
			((QWidget) interceptor).SetWindowFlags(type);
		}
		[SmokeMethod("windowFlags", "() const", "")]
		public int WindowFlags() {
			return ((QWidget) interceptor).WindowFlags();
		}
		[SmokeMethod("overrideWindowFlags", "(Qt::WindowFlags)", "$")]
		public void OverrideWindowFlags(int type) {
			((QWidget) interceptor).OverrideWindowFlags(type);
		}
		[SmokeMethod("windowType", "() const", "")]
		public Qt.WindowType WindowType() {
			return ((QWidget) interceptor).WindowType();
		}
		[SmokeMethod("childAt", "(int, int) const", "$$")]
		public QWidget ChildAt(int x, int y) {
			return ((QWidget) interceptor).ChildAt(x,y);
		}
		[SmokeMethod("childAt", "(const QPoint&) const", "#")]
		public QWidget ChildAt(QPoint p) {
			return ((QWidget) interceptor).ChildAt(p);
		}
		[SmokeMethod("setAttribute", "(Qt::WidgetAttribute, bool)", "$$")]
		public void SetAttribute(Qt.WidgetAttribute arg1, bool on) {
			((QWidget) interceptor).SetAttribute(arg1,on);
		}
		[SmokeMethod("setAttribute", "(Qt::WidgetAttribute)", "$")]
		public void SetAttribute(Qt.WidgetAttribute arg1) {
			((QWidget) interceptor).SetAttribute(arg1);
		}
		[SmokeMethod("testAttribute", "(Qt::WidgetAttribute) const", "$")]
		public bool TestAttribute(Qt.WidgetAttribute arg1) {
			return ((QWidget) interceptor).TestAttribute(arg1);
		}
		[SmokeMethod("paintEngine", "() const", "")]
		public virtual QPaintEngine PaintEngine() {
			return ((QWidget) interceptor).PaintEngine();
		}
		[SmokeMethod("ensurePolished", "() const", "")]
		public void EnsurePolished() {
			((QWidget) interceptor).EnsurePolished();
		}
		[SmokeMethod("inputContext", "()", "")]
		public QInputContext InputContext() {
			return ((QWidget) interceptor).InputContext();
		}
		[SmokeMethod("setInputContext", "(QInputContext*)", "#")]
		public void SetInputContext(QInputContext arg1) {
			((QWidget) interceptor).SetInputContext(arg1);
		}
		[SmokeMethod("isAncestorOf", "(const QWidget*) const", "#")]
		public bool IsAncestorOf(QWidget child) {
			return ((QWidget) interceptor).IsAncestorOf(child);
		}
		[SmokeMethod("inputMethodQuery", "(Qt::InputMethodQuery) const", "$")]
		public virtual QVariant InputMethodQuery(Qt.InputMethodQuery arg1) {
			return ((QWidget) interceptor).InputMethodQuery(arg1);
		}
		[Q_SLOT("void setDisabled(bool)")]
		[SmokeMethod("setDisabled", "(bool)", "$")]
		public void SetDisabled(bool arg1) {
			((QWidget) interceptor).SetDisabled(arg1);
		}
		[Q_SLOT("void setFocus()")]
		[SmokeMethod("setFocus", "()", "")]
		public void SetFocus() {
			((QWidget) interceptor).SetFocus();
		}
		[Q_SLOT("void update()")]
		[SmokeMethod("update", "()", "")]
		public void Update() {
			((QWidget) interceptor).Update();
		}
		[Q_SLOT("void repaint()")]
		[SmokeMethod("repaint", "()", "")]
		public void Repaint() {
			((QWidget) interceptor).Repaint();
		}
		[Q_SLOT("void setVisible(bool)")]
		[SmokeMethod("setVisible", "(bool)", "$")]
		public virtual void SetVisible(bool visible) {
			((QWidget) interceptor).SetVisible(visible);
		}
		[Q_SLOT("void setHidden(bool)")]
		[SmokeMethod("setHidden", "(bool)", "$")]
		public void SetHidden(bool hidden) {
			((QWidget) interceptor).SetHidden(hidden);
		}
		[Q_SLOT("void show()")]
		[SmokeMethod("show", "()", "")]
		public void Show() {
			((QWidget) interceptor).Show();
		}
		[Q_SLOT("void hide()")]
		[SmokeMethod("hide", "()", "")]
		public void Hide() {
			((QWidget) interceptor).Hide();
		}
		[Q_SLOT("void setShown(bool)")]
		[SmokeMethod("setShown", "(bool)", "$")]
		public void SetShown(bool shown) {
			((QWidget) interceptor).SetShown(shown);
		}
		[Q_SLOT("void showMinimized()")]
		[SmokeMethod("showMinimized", "()", "")]
		public void ShowMinimized() {
			((QWidget) interceptor).ShowMinimized();
		}
		[Q_SLOT("void showMaximized()")]
		[SmokeMethod("showMaximized", "()", "")]
		public void ShowMaximized() {
			((QWidget) interceptor).ShowMaximized();
		}
		[Q_SLOT("void showFullScreen()")]
		[SmokeMethod("showFullScreen", "()", "")]
		public void ShowFullScreen() {
			((QWidget) interceptor).ShowFullScreen();
		}
		[Q_SLOT("void showNormal()")]
		[SmokeMethod("showNormal", "()", "")]
		public void ShowNormal() {
			((QWidget) interceptor).ShowNormal();
		}
		[Q_SLOT("bool close()")]
		[SmokeMethod("close", "()", "")]
		public bool Close() {
			return ((QWidget) interceptor).Close();
		}
		[Q_SLOT("void raise()")]
		[SmokeMethod("raise", "()", "")]
		public void Raise() {
			((QWidget) interceptor).Raise();
		}
		[Q_SLOT("void lower()")]
		[SmokeMethod("lower", "()", "")]
		public void Lower() {
			((QWidget) interceptor).Lower();
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		protected new virtual bool Event(QEvent arg1) {
			return ((QWidget) interceptor).Event(arg1);
		}
		[SmokeMethod("mousePressEvent", "(QMouseEvent*)", "#")]
		protected virtual void MousePressEvent(QMouseEvent arg1) {
			((QWidget) interceptor).MousePressEvent(arg1);
		}
		[SmokeMethod("mouseReleaseEvent", "(QMouseEvent*)", "#")]
		protected virtual void MouseReleaseEvent(QMouseEvent arg1) {
			((QWidget) interceptor).MouseReleaseEvent(arg1);
		}
		[SmokeMethod("mouseDoubleClickEvent", "(QMouseEvent*)", "#")]
		protected virtual void MouseDoubleClickEvent(QMouseEvent arg1) {
			((QWidget) interceptor).MouseDoubleClickEvent(arg1);
		}
		[SmokeMethod("mouseMoveEvent", "(QMouseEvent*)", "#")]
		protected virtual void MouseMoveEvent(QMouseEvent arg1) {
			((QWidget) interceptor).MouseMoveEvent(arg1);
		}
		[SmokeMethod("wheelEvent", "(QWheelEvent*)", "#")]
		protected virtual void WheelEvent(QWheelEvent arg1) {
			((QWidget) interceptor).WheelEvent(arg1);
		}
		[SmokeMethod("keyPressEvent", "(QKeyEvent*)", "#")]
		protected virtual void KeyPressEvent(QKeyEvent arg1) {
			((QWidget) interceptor).KeyPressEvent(arg1);
		}
		[SmokeMethod("keyReleaseEvent", "(QKeyEvent*)", "#")]
		protected virtual void KeyReleaseEvent(QKeyEvent arg1) {
			((QWidget) interceptor).KeyReleaseEvent(arg1);
		}
		[SmokeMethod("focusInEvent", "(QFocusEvent*)", "#")]
		protected virtual void FocusInEvent(QFocusEvent arg1) {
			((QWidget) interceptor).FocusInEvent(arg1);
		}
		[SmokeMethod("focusOutEvent", "(QFocusEvent*)", "#")]
		protected virtual void FocusOutEvent(QFocusEvent arg1) {
			((QWidget) interceptor).FocusOutEvent(arg1);
		}
		[SmokeMethod("enterEvent", "(QEvent*)", "#")]
		protected virtual void EnterEvent(QEvent arg1) {
			((QWidget) interceptor).EnterEvent(arg1);
		}
		[SmokeMethod("leaveEvent", "(QEvent*)", "#")]
		protected virtual void LeaveEvent(QEvent arg1) {
			((QWidget) interceptor).LeaveEvent(arg1);
		}
		[SmokeMethod("paintEvent", "(QPaintEvent*)", "#")]
		protected virtual void PaintEvent(QPaintEvent arg1) {
			((QWidget) interceptor).PaintEvent(arg1);
		}
		[SmokeMethod("moveEvent", "(QMoveEvent*)", "#")]
		protected virtual void MoveEvent(QMoveEvent arg1) {
			((QWidget) interceptor).MoveEvent(arg1);
		}
		[SmokeMethod("resizeEvent", "(QResizeEvent*)", "#")]
		protected virtual void ResizeEvent(QResizeEvent arg1) {
			((QWidget) interceptor).ResizeEvent(arg1);
		}
		[SmokeMethod("closeEvent", "(QCloseEvent*)", "#")]
		protected virtual void CloseEvent(QCloseEvent arg1) {
			((QWidget) interceptor).CloseEvent(arg1);
		}
		[SmokeMethod("contextMenuEvent", "(QContextMenuEvent*)", "#")]
		protected virtual void ContextMenuEvent(QContextMenuEvent arg1) {
			((QWidget) interceptor).ContextMenuEvent(arg1);
		}
		[SmokeMethod("tabletEvent", "(QTabletEvent*)", "#")]
		protected virtual void TabletEvent(QTabletEvent arg1) {
			((QWidget) interceptor).TabletEvent(arg1);
		}
		[SmokeMethod("actionEvent", "(QActionEvent*)", "#")]
		protected virtual void ActionEvent(QActionEvent arg1) {
			((QWidget) interceptor).ActionEvent(arg1);
		}
		[SmokeMethod("dragEnterEvent", "(QDragEnterEvent*)", "#")]
		protected virtual void DragEnterEvent(QDragEnterEvent arg1) {
			((QWidget) interceptor).DragEnterEvent(arg1);
		}
		[SmokeMethod("dragMoveEvent", "(QDragMoveEvent*)", "#")]
		protected virtual void DragMoveEvent(QDragMoveEvent arg1) {
			((QWidget) interceptor).DragMoveEvent(arg1);
		}
		[SmokeMethod("dragLeaveEvent", "(QDragLeaveEvent*)", "#")]
		protected virtual void DragLeaveEvent(QDragLeaveEvent arg1) {
			((QWidget) interceptor).DragLeaveEvent(arg1);
		}
		[SmokeMethod("dropEvent", "(QDropEvent*)", "#")]
		protected virtual void DropEvent(QDropEvent arg1) {
			((QWidget) interceptor).DropEvent(arg1);
		}
		[SmokeMethod("showEvent", "(QShowEvent*)", "#")]
		protected virtual void ShowEvent(QShowEvent arg1) {
			((QWidget) interceptor).ShowEvent(arg1);
		}
		[SmokeMethod("hideEvent", "(QHideEvent*)", "#")]
		protected virtual void HideEvent(QHideEvent arg1) {
			((QWidget) interceptor).HideEvent(arg1);
		}
		[SmokeMethod("changeEvent", "(QEvent*)", "#")]
		protected virtual void ChangeEvent(QEvent arg1) {
			((QWidget) interceptor).ChangeEvent(arg1);
		}
		[SmokeMethod("metric", "(QPaintDevice::PaintDeviceMetric) const", "$")]
		protected virtual int Metric(IQPaintDevice arg1) {
			return ((QWidget) interceptor).Metric(arg1);
		}
		[SmokeMethod("inputMethodEvent", "(QInputMethodEvent*)", "#")]
		protected virtual void InputMethodEvent(QInputMethodEvent arg1) {
			((QWidget) interceptor).InputMethodEvent(arg1);
		}
		[SmokeMethod("resetInputContext", "()", "")]
		protected void ResetInputContext() {
			((QWidget) interceptor).ResetInputContext();
		}
		[SmokeMethod("create", "(WId, bool, bool)", "$$$")]
		protected void Create(ulong arg1, bool initializeWindow, bool destroyOldWindow) {
			((QWidget) interceptor).Create(arg1,initializeWindow,destroyOldWindow);
		}
		[SmokeMethod("create", "(WId, bool)", "$$")]
		protected void Create(ulong arg1, bool initializeWindow) {
			((QWidget) interceptor).Create(arg1,initializeWindow);
		}
		[SmokeMethod("create", "(WId)", "$")]
		protected void Create(ulong arg1) {
			((QWidget) interceptor).Create(arg1);
		}
		[SmokeMethod("create", "()", "")]
		protected void Create() {
			((QWidget) interceptor).Create();
		}
		[SmokeMethod("destroy", "(bool, bool)", "$$")]
		protected void Destroy(bool destroyWindow, bool destroySubWindows) {
			((QWidget) interceptor).Destroy(destroyWindow,destroySubWindows);
		}
		[SmokeMethod("destroy", "(bool)", "$")]
		protected void Destroy(bool destroyWindow) {
			((QWidget) interceptor).Destroy(destroyWindow);
		}
		[SmokeMethod("destroy", "()", "")]
		protected void Destroy() {
			((QWidget) interceptor).Destroy();
		}
		[SmokeMethod("focusNextPrevChild", "(bool)", "$")]
		protected virtual bool FocusNextPrevChild(bool next) {
			return ((QWidget) interceptor).FocusNextPrevChild(next);
		}
		[SmokeMethod("focusNextChild", "()", "")]
		protected bool FocusNextChild() {
			return ((QWidget) interceptor).FocusNextChild();
		}
		[SmokeMethod("focusPreviousChild", "()", "")]
		protected bool FocusPreviousChild() {
			return ((QWidget) interceptor).FocusPreviousChild();
		}
		[SmokeMethod("styleChange", "(QStyle&)", "#")]
		protected virtual void StyleChange(QStyle arg1) {
			((QWidget) interceptor).StyleChange(arg1);
		}
		[SmokeMethod("enabledChange", "(bool)", "$")]
		protected virtual void EnabledChange(bool arg1) {
			((QWidget) interceptor).EnabledChange(arg1);
		}
		[SmokeMethod("paletteChange", "(const QPalette&)", "#")]
		protected virtual void PaletteChange(QPalette arg1) {
			((QWidget) interceptor).PaletteChange(arg1);
		}
		[SmokeMethod("fontChange", "(const QFont&)", "#")]
		protected virtual void FontChange(QFont arg1) {
			((QWidget) interceptor).FontChange(arg1);
		}
		[SmokeMethod("windowActivationChange", "(bool)", "$")]
		protected virtual void WindowActivationChange(bool arg1) {
			((QWidget) interceptor).WindowActivationChange(arg1);
		}
		[SmokeMethod("languageChange", "()", "")]
		protected virtual void LanguageChange() {
			((QWidget) interceptor).LanguageChange();
		}
		[Q_SLOT("void updateMicroFocus()")]
		[SmokeMethod("updateMicroFocus", "()", "")]
		protected void UpdateMicroFocus() {
			((QWidget) interceptor).UpdateMicroFocus();
		}
		~QWidget() {
			DisposeQWidget();
		}
		public new void Dispose() {
			DisposeQWidget();
		}
		[SmokeMethod("~QWidget", "()", "")]
		private void DisposeQWidget() {
			((QWidget) interceptor).DisposeQWidget();
		}
		[SmokeMethod("paintingActive", "() const", "")]
		public bool PaintingActive() {
			return ((QWidget) interceptor).PaintingActive();
		}
		[SmokeMethod("widthMM", "() const", "")]
		public int WidthMM() {
			return ((QWidget) interceptor).WidthMM();
		}
		[SmokeMethod("heightMM", "() const", "")]
		public int HeightMM() {
			return ((QWidget) interceptor).HeightMM();
		}
		[SmokeMethod("logicalDpiX", "() const", "")]
		public int LogicalDpiX() {
			return ((QWidget) interceptor).LogicalDpiX();
		}
		[SmokeMethod("logicalDpiY", "() const", "")]
		public int LogicalDpiY() {
			return ((QWidget) interceptor).LogicalDpiY();
		}
		[SmokeMethod("physicalDpiX", "() const", "")]
		public int PhysicalDpiX() {
			return ((QWidget) interceptor).PhysicalDpiX();
		}
		[SmokeMethod("physicalDpiY", "() const", "")]
		public int PhysicalDpiY() {
			return ((QWidget) interceptor).PhysicalDpiY();
		}
		[SmokeMethod("numColors", "() const", "")]
		public int NumColors() {
			return ((QWidget) interceptor).NumColors();
		}
		[SmokeMethod("depth", "() const", "")]
		public int Depth() {
			return ((QWidget) interceptor).Depth();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		public static void SetTabOrder(QWidget arg1, QWidget arg2) {
			staticInterceptor.SetTabOrder(arg1,arg2);
		}
		public static QWidget MouseGrabber() {
			return staticInterceptor.MouseGrabber();
		}
		public static QWidget KeyboardGrabber() {
			return staticInterceptor.KeyboardGrabber();
		}
		public static QWidget Find(ulong arg1) {
			return staticInterceptor.Find(arg1);
		}
		protected new IQWidgetSignals Emit {
			get { return (IQWidgetSignals) Q_EMIT; }
		}
	}

	public interface IQWidgetSignals : IQObjectSignals {
		[Q_SIGNAL("void customContextMenuRequested(const QPoint&)")]
		void CustomContextMenuRequested(QPoint pos);
	}
}
