//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	public interface IQLayoutItem {
		QSize SizeHint();
		QSize MinimumSize();
		QSize MaximumSize();
		int ExpandingDirections();
		void SetGeometry(QRect arg1);
		QRect Geometry();
		bool IsEmpty();
		bool HasHeightForWidth();
		int HeightForWidth(int arg1);
		int MinimumHeightForWidth(int arg1);
		void Invalidate();
		QWidget Widget();
		QLayout Layout();
		QSpacerItem SpacerItem();
		int Alignment();
		void SetAlignment(int a);
	}

	[SmokeClass("QLayoutItem")]
	public abstract class QLayoutItem : MarshalByRefObject, IQLayoutItem {
		protected QLayoutItem interceptor = null;
		private IntPtr smokeObject;
		protected QLayoutItem(Type dummy) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QLayoutItem), this);
			interceptor = (QLayoutItem) realProxy.GetTransparentProxy();
		}
		public QLayoutItem(int alignment) : this((Type) null) {
			CreateProxy();
			NewQLayoutItem(alignment);
		}
		[SmokeMethod("QLayoutItem", "(Qt::Alignment)", "$")]
		private void NewQLayoutItem(int alignment) {
			((QLayoutItem) interceptor).NewQLayoutItem(alignment);
		}
		public QLayoutItem() : this((Type) null) {
			CreateProxy();
			NewQLayoutItem();
		}
		[SmokeMethod("QLayoutItem", "()", "")]
		private void NewQLayoutItem() {
			((QLayoutItem) interceptor).NewQLayoutItem();
		}
		[SmokeMethod("sizeHint", "() const", "")]
		public abstract QSize SizeHint();
		[SmokeMethod("minimumSize", "() const", "")]
		public abstract QSize MinimumSize();
		[SmokeMethod("maximumSize", "() const", "")]
		public abstract QSize MaximumSize();
		[SmokeMethod("expandingDirections", "() const", "")]
		public abstract int ExpandingDirections();
		[SmokeMethod("setGeometry", "(const QRect&)", "#")]
		public abstract void SetGeometry(QRect arg1);
		[SmokeMethod("geometry", "() const", "")]
		public abstract QRect Geometry();
		[SmokeMethod("isEmpty", "() const", "")]
		public abstract bool IsEmpty();
		[SmokeMethod("hasHeightForWidth", "() const", "")]
		public virtual bool HasHeightForWidth() {
			return ((QLayoutItem) interceptor).HasHeightForWidth();
		}
		[SmokeMethod("heightForWidth", "(int) const", "$")]
		public virtual int HeightForWidth(int arg1) {
			return ((QLayoutItem) interceptor).HeightForWidth(arg1);
		}
		[SmokeMethod("minimumHeightForWidth", "(int) const", "$")]
		public virtual int MinimumHeightForWidth(int arg1) {
			return ((QLayoutItem) interceptor).MinimumHeightForWidth(arg1);
		}
		[SmokeMethod("invalidate", "()", "")]
		public virtual void Invalidate() {
			((QLayoutItem) interceptor).Invalidate();
		}
		[SmokeMethod("widget", "()", "")]
		public virtual QWidget Widget() {
			return ((QLayoutItem) interceptor).Widget();
		}
		[SmokeMethod("layout", "()", "")]
		public virtual QLayout Layout() {
			return ((QLayoutItem) interceptor).Layout();
		}
		[SmokeMethod("spacerItem", "()", "")]
		public virtual QSpacerItem SpacerItem() {
			return ((QLayoutItem) interceptor).SpacerItem();
		}
		[SmokeMethod("alignment", "() const", "")]
		public int Alignment() {
			return ((QLayoutItem) interceptor).Alignment();
		}
		[SmokeMethod("setAlignment", "(Qt::Alignment)", "$")]
		public void SetAlignment(int a) {
			((QLayoutItem) interceptor).SetAlignment(a);
		}
	}
}
