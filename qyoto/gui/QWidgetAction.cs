//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	[SmokeClass("QWidgetAction")]
	public class QWidgetAction : QAction, IDisposable {
 		protected QWidgetAction(Type dummy) : base((Type) null) {}
		[SmokeClass("QWidgetAction")]
		interface IQWidgetActionProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QWidgetAction), this);
			interceptor = (QWidgetAction) realProxy.GetTransparentProxy();
		}
		private static IQWidgetActionProxy staticInterceptor = null;
		static QWidgetAction() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQWidgetActionProxy), null);
			staticInterceptor = (IQWidgetActionProxy) realProxy.GetTransparentProxy();
		}
		public QWidgetAction(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQWidgetAction(parent);
		}
		[SmokeMethod("QWidgetAction", "(QObject*)", "#")]
		private void NewQWidgetAction(QObject parent) {
			((QWidgetAction) interceptor).NewQWidgetAction(parent);
		}
		[SmokeMethod("setDefaultWidget", "(QWidget*)", "#")]
		public void SetDefaultWidget(QWidget w) {
			((QWidgetAction) interceptor).SetDefaultWidget(w);
		}
		[SmokeMethod("defaultWidget", "() const", "")]
		public QWidget DefaultWidget() {
			return ((QWidgetAction) interceptor).DefaultWidget();
		}
		[SmokeMethod("requestWidget", "(QWidget*)", "#")]
		public QWidget RequestWidget(QWidget parent) {
			return ((QWidgetAction) interceptor).RequestWidget(parent);
		}
		[SmokeMethod("releaseWidget", "(QWidget*)", "#")]
		public void ReleaseWidget(QWidget widget) {
			((QWidgetAction) interceptor).ReleaseWidget(widget);
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		protected override bool Event(QEvent arg1) {
			return ((QWidgetAction) interceptor).Event(arg1);
		}
		[SmokeMethod("createWidget", "(QWidget*)", "#")]
		protected virtual QWidget CreateWidget(QWidget parent) {
			return ((QWidgetAction) interceptor).CreateWidget(parent);
		}
		[SmokeMethod("deleteWidget", "(QWidget*)", "#")]
		protected virtual void DeleteWidget(QWidget widget) {
			((QWidgetAction) interceptor).DeleteWidget(widget);
		}
		[SmokeMethod("createdWidgets", "() const", "")]
		protected List<QWidget> CreatedWidgets() {
			return ((QWidgetAction) interceptor).CreatedWidgets();
		}
		~QWidgetAction() {
			DisposeQWidgetAction();
		}
		public new void Dispose() {
			DisposeQWidgetAction();
		}
		[SmokeMethod("~QWidgetAction", "()", "")]
		private void DisposeQWidgetAction() {
			((QWidgetAction) interceptor).DisposeQWidgetAction();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQWidgetActionSignals Emit {
			get { return (IQWidgetActionSignals) Q_EMIT; }
		}
	}

	public interface IQWidgetActionSignals : IQActionSignals {
	}
}
