//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QMoveEvent")]
	public class QMoveEvent : QEvent, IDisposable {
 		protected QMoveEvent(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QMoveEvent), this);
			interceptor = (QMoveEvent) realProxy.GetTransparentProxy();
		}
		public QMoveEvent(QPoint pos, QPoint oldPos) : this((Type) null) {
			CreateProxy();
			NewQMoveEvent(pos,oldPos);
		}
		[SmokeMethod("QMoveEvent", "(const QPoint&, const QPoint&)", "##")]
		private void NewQMoveEvent(QPoint pos, QPoint oldPos) {
			((QMoveEvent) interceptor).NewQMoveEvent(pos,oldPos);
		}
		[SmokeMethod("pos", "() const", "")]
		public QPoint Pos() {
			return ((QMoveEvent) interceptor).Pos();
		}
		[SmokeMethod("oldPos", "() const", "")]
		public QPoint OldPos() {
			return ((QMoveEvent) interceptor).OldPos();
		}
		~QMoveEvent() {
			DisposeQMoveEvent();
		}
		public new void Dispose() {
			DisposeQMoveEvent();
		}
		[SmokeMethod("~QMoveEvent", "()", "")]
		private void DisposeQMoveEvent() {
			((QMoveEvent) interceptor).DisposeQMoveEvent();
		}
	}
}
