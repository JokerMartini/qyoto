//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QStyleOptionTab")]
	public class QStyleOptionTab : QStyleOption, IDisposable {
 		protected QStyleOptionTab(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QStyleOptionTab), this);
			_interceptor = (QStyleOptionTab) realProxy.GetTransparentProxy();
		}
		private QStyleOptionTab ProxyQStyleOptionTab() {
			return (QStyleOptionTab) _interceptor;
		}
		public enum StyleOptionType {
			Type = QStyleOption.OptionType.SO_Tab,
		}
		public enum StyleOptionVersion {
			Version = 1,
		}
		public enum TabPosition {
			Beginning = 0,
			Middle = 1,
			End = 2,
			OnlyOneTab = 3,
		}
		public enum SelectedPosition {
			NotAdjacent = 0,
			NextIsSelected = 1,
			PreviousIsSelected = 2,
		}
		public enum CornerWidget {
			NoCornerWidgets = 0x00,
			LeftCornerWidget = 0x01,
			RightCornerWidget = 0x02,
		}
		public QStyleOptionTab() : this((Type) null) {
			CreateProxy();
			NewQStyleOptionTab();
		}
		[SmokeMethod("QStyleOptionTab", "()", "")]
		private void NewQStyleOptionTab() {
			ProxyQStyleOptionTab().NewQStyleOptionTab();
		}
		public QStyleOptionTab(QStyleOptionTab other) : this((Type) null) {
			CreateProxy();
			NewQStyleOptionTab(other);
		}
		[SmokeMethod("QStyleOptionTab", "(const QStyleOptionTab&)", "#")]
		private void NewQStyleOptionTab(QStyleOptionTab other) {
			ProxyQStyleOptionTab().NewQStyleOptionTab(other);
		}
		public QStyleOptionTab(int version) : this((Type) null) {
			CreateProxy();
			NewQStyleOptionTab(version);
		}
		[SmokeMethod("QStyleOptionTab", "(int)", "$")]
		private void NewQStyleOptionTab(int version) {
			ProxyQStyleOptionTab().NewQStyleOptionTab(version);
		}
		~QStyleOptionTab() {
			DisposeQStyleOptionTab();
		}
		public void Dispose() {
			DisposeQStyleOptionTab();
		}
		[SmokeMethod("~QStyleOptionTab", "()", "")]
		private void DisposeQStyleOptionTab() {
			ProxyQStyleOptionTab().DisposeQStyleOptionTab();
		}
	}
}
