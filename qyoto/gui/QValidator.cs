//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;

	[SmokeClass("QValidator")]
	public abstract class QValidator : QObject, IDisposable {
 		protected QValidator(Type dummy) : base((Type) null) {}
		[SmokeClass("QValidator")]
		interface IQValidatorProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QValidator), this);
			interceptor = (QValidator) realProxy.GetTransparentProxy();
		}
		private static IQValidatorProxy staticInterceptor = null;
		static QValidator() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQValidatorProxy), null);
			staticInterceptor = (IQValidatorProxy) realProxy.GetTransparentProxy();
		}
		public enum State {
			Invalid = 0,
			Intermediate = 1,
			Acceptable = 2,
		}
		public QValidator(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQValidator(parent);
		}
		[SmokeMethod("QValidator", "(QObject*)", "#")]
		private void NewQValidator(QObject parent) {
			((QValidator) interceptor).NewQValidator(parent);
		}
		[SmokeMethod("validate", "(QString&, int&) const", "$$")]
		public abstract int Validate(StringBuilder arg1, out int arg2);
		[SmokeMethod("fixup", "(QString&) const", "$")]
		public virtual void Fixup(StringBuilder arg1) {
			((QValidator) interceptor).Fixup(arg1);
		}
		~QValidator() {
			DisposeQValidator();
		}
		public new void Dispose() {
			DisposeQValidator();
		}
		[SmokeMethod("~QValidator", "()", "")]
		private void DisposeQValidator() {
			((QValidator) interceptor).DisposeQValidator();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQValidatorSignals Emit {
			get { return (IQValidatorSignals) Q_EMIT; }
		}
	}

	public interface IQValidatorSignals : IQObjectSignals {
	}
}
