//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QFontMetricsF")]
	public class QFontMetricsF : MarshalByRefObject, IDisposable {
		protected QFontMetricsF interceptor = null;
		private IntPtr smokeObject;
		protected QFontMetricsF(Type dummy) {}
		[SmokeClass("QFontMetricsF")]
		interface IQFontMetricsFProxy {
			[SmokeMethod("operator==", "(const QFontMetricsF&)", "#")]
			bool op_equals(QFontMetricsF lhs, QFontMetricsF other);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QFontMetricsF), this);
			interceptor = (QFontMetricsF) realProxy.GetTransparentProxy();
		}
		private static IQFontMetricsFProxy staticInterceptor = null;
		static QFontMetricsF() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQFontMetricsFProxy), null);
			staticInterceptor = (IQFontMetricsFProxy) realProxy.GetTransparentProxy();
		}
		public QFontMetricsF(QFont arg1) : this((Type) null) {
			CreateProxy();
			NewQFontMetricsF(arg1);
		}
		[SmokeMethod("QFontMetricsF", "(const QFont&)", "#")]
		private void NewQFontMetricsF(QFont arg1) {
			((QFontMetricsF) interceptor).NewQFontMetricsF(arg1);
		}
		public QFontMetricsF(QFont arg1, IQPaintDevice pd) : this((Type) null) {
			CreateProxy();
			NewQFontMetricsF(arg1,pd);
		}
		[SmokeMethod("QFontMetricsF", "(const QFont&, QPaintDevice*)", "##")]
		private void NewQFontMetricsF(QFont arg1, IQPaintDevice pd) {
			((QFontMetricsF) interceptor).NewQFontMetricsF(arg1,pd);
		}
		public QFontMetricsF(QFontMetricsF arg1) : this((Type) null) {
			CreateProxy();
			NewQFontMetricsF(arg1);
		}
		[SmokeMethod("QFontMetricsF", "(const QFontMetricsF&)", "#")]
		private void NewQFontMetricsF(QFontMetricsF arg1) {
			((QFontMetricsF) interceptor).NewQFontMetricsF(arg1);
		}
		[SmokeMethod("ascent", "() const", "")]
		public double Ascent() {
			return ((QFontMetricsF) interceptor).Ascent();
		}
		[SmokeMethod("descent", "() const", "")]
		public double Descent() {
			return ((QFontMetricsF) interceptor).Descent();
		}
		[SmokeMethod("height", "() const", "")]
		public double Height() {
			return ((QFontMetricsF) interceptor).Height();
		}
		[SmokeMethod("leading", "() const", "")]
		public double Leading() {
			return ((QFontMetricsF) interceptor).Leading();
		}
		[SmokeMethod("lineSpacing", "() const", "")]
		public double LineSpacing() {
			return ((QFontMetricsF) interceptor).LineSpacing();
		}
		[SmokeMethod("minLeftBearing", "() const", "")]
		public double MinLeftBearing() {
			return ((QFontMetricsF) interceptor).MinLeftBearing();
		}
		[SmokeMethod("minRightBearing", "() const", "")]
		public double MinRightBearing() {
			return ((QFontMetricsF) interceptor).MinRightBearing();
		}
		[SmokeMethod("maxWidth", "() const", "")]
		public double MaxWidth() {
			return ((QFontMetricsF) interceptor).MaxWidth();
		}
		[SmokeMethod("xHeight", "() const", "")]
		public double XHeight() {
			return ((QFontMetricsF) interceptor).XHeight();
		}
		[SmokeMethod("averageCharWidth", "() const", "")]
		public double AverageCharWidth() {
			return ((QFontMetricsF) interceptor).AverageCharWidth();
		}
		[SmokeMethod("inFont", "(QChar) const", "#")]
		public bool InFont(char arg1) {
			return ((QFontMetricsF) interceptor).InFont(arg1);
		}
		[SmokeMethod("leftBearing", "(QChar) const", "#")]
		public double LeftBearing(char arg1) {
			return ((QFontMetricsF) interceptor).LeftBearing(arg1);
		}
		[SmokeMethod("rightBearing", "(QChar) const", "#")]
		public double RightBearing(char arg1) {
			return ((QFontMetricsF) interceptor).RightBearing(arg1);
		}
		[SmokeMethod("width", "(const QString&) const", "$")]
		public double Width(string arg1) {
			return ((QFontMetricsF) interceptor).Width(arg1);
		}
		[SmokeMethod("width", "(QChar) const", "#")]
		public double Width(char arg1) {
			return ((QFontMetricsF) interceptor).Width(arg1);
		}
		[SmokeMethod("boundingRect", "(const QString&) const", "$")]
		public QRectF BoundingRect(string arg1) {
			return ((QFontMetricsF) interceptor).BoundingRect(arg1);
		}
		[SmokeMethod("boundingRect", "(QChar) const", "#")]
		public QRectF BoundingRect(char arg1) {
			return ((QFontMetricsF) interceptor).BoundingRect(arg1);
		}
		[SmokeMethod("boundingRect", "(const QRectF&, int, const QString&, int, int*) const", "#$$$$")]
		public QRectF BoundingRect(QRectF r, int flags, string arg3, int tabstops, out int tabarray) {
			return ((QFontMetricsF) interceptor).BoundingRect(r,flags,arg3,tabstops,out tabarray);
		}
		[SmokeMethod("boundingRect", "(const QRectF&, int, const QString&, int) const", "#$$$")]
		public QRectF BoundingRect(QRectF r, int flags, string arg3, int tabstops) {
			return ((QFontMetricsF) interceptor).BoundingRect(r,flags,arg3,tabstops);
		}
		[SmokeMethod("boundingRect", "(const QRectF&, int, const QString&) const", "#$$")]
		public QRectF BoundingRect(QRectF r, int flags, string arg3) {
			return ((QFontMetricsF) interceptor).BoundingRect(r,flags,arg3);
		}
		[SmokeMethod("size", "(int, const QString&, int, int*) const", "$$$$")]
		public QSizeF Size(int flags, string str, int tabstops, out int tabarray) {
			return ((QFontMetricsF) interceptor).Size(flags,str,tabstops,out tabarray);
		}
		[SmokeMethod("size", "(int, const QString&, int) const", "$$$")]
		public QSizeF Size(int flags, string str, int tabstops) {
			return ((QFontMetricsF) interceptor).Size(flags,str,tabstops);
		}
		[SmokeMethod("size", "(int, const QString&) const", "$$")]
		public QSizeF Size(int flags, string str) {
			return ((QFontMetricsF) interceptor).Size(flags,str);
		}
		[SmokeMethod("elidedText", "(const QString&, Qt::TextElideMode, qreal, int) const", "$$$$")]
		public string ElidedText(string text, Qt.TextElideMode mode, double width, int flags) {
			return ((QFontMetricsF) interceptor).ElidedText(text,mode,width,flags);
		}
		[SmokeMethod("elidedText", "(const QString&, Qt::TextElideMode, qreal) const", "$$$")]
		public string ElidedText(string text, Qt.TextElideMode mode, double width) {
			return ((QFontMetricsF) interceptor).ElidedText(text,mode,width);
		}
		[SmokeMethod("underlinePos", "() const", "")]
		public double UnderlinePos() {
			return ((QFontMetricsF) interceptor).UnderlinePos();
		}
		[SmokeMethod("overlinePos", "() const", "")]
		public double OverlinePos() {
			return ((QFontMetricsF) interceptor).OverlinePos();
		}
		[SmokeMethod("strikeOutPos", "() const", "")]
		public double StrikeOutPos() {
			return ((QFontMetricsF) interceptor).StrikeOutPos();
		}
		[SmokeMethod("lineWidth", "() const", "")]
		public double LineWidth() {
			return ((QFontMetricsF) interceptor).LineWidth();
		}
		public override bool Equals(object o) {
			if (!(o is QFontMetricsF)) { return false; }
			return this == (QFontMetricsF) o;
		}
		public override int GetHashCode() {
			return ((QFontMetricsF) interceptor).GetHashCode();
		}
		~QFontMetricsF() {
			DisposeQFontMetricsF();
		}
		public void Dispose() {
			DisposeQFontMetricsF();
		}
		[SmokeMethod("~QFontMetricsF", "()", "")]
		private void DisposeQFontMetricsF() {
			((QFontMetricsF) interceptor).DisposeQFontMetricsF();
		}
		public static bool operator==(QFontMetricsF lhs, QFontMetricsF other) {
			return staticInterceptor.op_equals(lhs,other);
		}
		public static bool operator!=(QFontMetricsF lhs, QFontMetricsF other) {
			return !staticInterceptor.op_equals(lhs,other);
		}
	}
}
