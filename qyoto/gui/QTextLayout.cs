//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QTextLayout")]
	public class QTextLayout : MarshalByRefObject, IDisposable {
		protected QTextLayout interceptor = null;
		private IntPtr smokeObject;
		protected QTextLayout(Type dummy) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTextLayout), this);
			interceptor = (QTextLayout) realProxy.GetTransparentProxy();
		}
		public enum CursorMode {
			SkipCharacters = 0,
			SkipWords = 1,
		}
		// void setAdditionalFormats(const QList<QTextLayout::FormatRange>& arg1); >>>> NOT CONVERTED
		// QList<QTextLayout::FormatRange> additionalFormats(); >>>> NOT CONVERTED
		// void draw(QPainter* arg1,const QPointF& arg2,const QVector<QTextLayout::FormatRange>& arg3,const QRectF& arg4); >>>> NOT CONVERTED
		// void draw(QPainter* arg1,const QPointF& arg2,const QVector<QTextLayout::FormatRange>& arg3); >>>> NOT CONVERTED
		// QTextEngine* engine(); >>>> NOT CONVERTED
		public QTextLayout() : this((Type) null) {
			CreateProxy();
			NewQTextLayout();
		}
		[SmokeMethod("QTextLayout", "()", "")]
		private void NewQTextLayout() {
			((QTextLayout) interceptor).NewQTextLayout();
		}
		public QTextLayout(string text) : this((Type) null) {
			CreateProxy();
			NewQTextLayout(text);
		}
		[SmokeMethod("QTextLayout", "(const QString&)", "$")]
		private void NewQTextLayout(string text) {
			((QTextLayout) interceptor).NewQTextLayout(text);
		}
		public QTextLayout(string text, QFont font, IQPaintDevice paintdevice) : this((Type) null) {
			CreateProxy();
			NewQTextLayout(text,font,paintdevice);
		}
		[SmokeMethod("QTextLayout", "(const QString&, const QFont&, QPaintDevice*)", "$##")]
		private void NewQTextLayout(string text, QFont font, IQPaintDevice paintdevice) {
			((QTextLayout) interceptor).NewQTextLayout(text,font,paintdevice);
		}
		public QTextLayout(string text, QFont font) : this((Type) null) {
			CreateProxy();
			NewQTextLayout(text,font);
		}
		[SmokeMethod("QTextLayout", "(const QString&, const QFont&)", "$#")]
		private void NewQTextLayout(string text, QFont font) {
			((QTextLayout) interceptor).NewQTextLayout(text,font);
		}
		public QTextLayout(QTextBlock b) : this((Type) null) {
			CreateProxy();
			NewQTextLayout(b);
		}
		[SmokeMethod("QTextLayout", "(const QTextBlock&)", "#")]
		private void NewQTextLayout(QTextBlock b) {
			((QTextLayout) interceptor).NewQTextLayout(b);
		}
		[SmokeMethod("setFont", "(const QFont&)", "#")]
		public void SetFont(QFont f) {
			((QTextLayout) interceptor).SetFont(f);
		}
		[SmokeMethod("font", "() const", "")]
		public QFont Font() {
			return ((QTextLayout) interceptor).Font();
		}
		[SmokeMethod("setText", "(const QString&)", "$")]
		public void SetText(string arg1) {
			((QTextLayout) interceptor).SetText(arg1);
		}
		[SmokeMethod("text", "() const", "")]
		public string Text() {
			return ((QTextLayout) interceptor).Text();
		}
		[SmokeMethod("setTextOption", "(const QTextOption&)", "#")]
		public void SetTextOption(QTextOption option) {
			((QTextLayout) interceptor).SetTextOption(option);
		}
		[SmokeMethod("textOption", "() const", "")]
		public QTextOption TextOption() {
			return ((QTextLayout) interceptor).TextOption();
		}
		[SmokeMethod("setPreeditArea", "(int, const QString&)", "$$")]
		public void SetPreeditArea(int position, string text) {
			((QTextLayout) interceptor).SetPreeditArea(position,text);
		}
		[SmokeMethod("preeditAreaPosition", "() const", "")]
		public int PreeditAreaPosition() {
			return ((QTextLayout) interceptor).PreeditAreaPosition();
		}
		[SmokeMethod("preeditAreaText", "() const", "")]
		public string PreeditAreaText() {
			return ((QTextLayout) interceptor).PreeditAreaText();
		}
		[SmokeMethod("clearAdditionalFormats", "()", "")]
		public void ClearAdditionalFormats() {
			((QTextLayout) interceptor).ClearAdditionalFormats();
		}
		[SmokeMethod("setCacheEnabled", "(bool)", "$")]
		public void SetCacheEnabled(bool enable) {
			((QTextLayout) interceptor).SetCacheEnabled(enable);
		}
		[SmokeMethod("cacheEnabled", "() const", "")]
		public bool CacheEnabled() {
			return ((QTextLayout) interceptor).CacheEnabled();
		}
		[SmokeMethod("beginLayout", "()", "")]
		public void BeginLayout() {
			((QTextLayout) interceptor).BeginLayout();
		}
		[SmokeMethod("endLayout", "()", "")]
		public void EndLayout() {
			((QTextLayout) interceptor).EndLayout();
		}
		[SmokeMethod("createLine", "()", "")]
		public QTextLine CreateLine() {
			return ((QTextLayout) interceptor).CreateLine();
		}
		[SmokeMethod("lineCount", "() const", "")]
		public int LineCount() {
			return ((QTextLayout) interceptor).LineCount();
		}
		[SmokeMethod("lineAt", "(int) const", "$")]
		public QTextLine LineAt(int i) {
			return ((QTextLayout) interceptor).LineAt(i);
		}
		[SmokeMethod("lineForTextPosition", "(int) const", "$")]
		public QTextLine LineForTextPosition(int pos) {
			return ((QTextLayout) interceptor).LineForTextPosition(pos);
		}
		[SmokeMethod("isValidCursorPosition", "(int) const", "$")]
		public bool IsValidCursorPosition(int pos) {
			return ((QTextLayout) interceptor).IsValidCursorPosition(pos);
		}
		[SmokeMethod("nextCursorPosition", "(int, QTextLayout::CursorMode) const", "$$")]
		public int NextCursorPosition(int oldPos, QTextLayout.CursorMode mode) {
			return ((QTextLayout) interceptor).NextCursorPosition(oldPos,mode);
		}
		[SmokeMethod("nextCursorPosition", "(int) const", "$")]
		public int NextCursorPosition(int oldPos) {
			return ((QTextLayout) interceptor).NextCursorPosition(oldPos);
		}
		[SmokeMethod("previousCursorPosition", "(int, QTextLayout::CursorMode) const", "$$")]
		public int PreviousCursorPosition(int oldPos, QTextLayout.CursorMode mode) {
			return ((QTextLayout) interceptor).PreviousCursorPosition(oldPos,mode);
		}
		[SmokeMethod("previousCursorPosition", "(int) const", "$")]
		public int PreviousCursorPosition(int oldPos) {
			return ((QTextLayout) interceptor).PreviousCursorPosition(oldPos);
		}
		[SmokeMethod("draw", "(QPainter*, const QPointF&) const", "##")]
		public void Draw(QPainter p, QPointF pos) {
			((QTextLayout) interceptor).Draw(p,pos);
		}
		[SmokeMethod("drawCursor", "(QPainter*, const QPointF&, int) const", "##$")]
		public void DrawCursor(QPainter p, QPointF pos, int cursorPosition) {
			((QTextLayout) interceptor).DrawCursor(p,pos,cursorPosition);
		}
		[SmokeMethod("drawCursor", "(QPainter*, const QPointF&, int, int) const", "##$$")]
		public void DrawCursor(QPainter p, QPointF pos, int cursorPosition, int width) {
			((QTextLayout) interceptor).DrawCursor(p,pos,cursorPosition,width);
		}
		[SmokeMethod("position", "() const", "")]
		public QPointF Position() {
			return ((QTextLayout) interceptor).Position();
		}
		[SmokeMethod("setPosition", "(const QPointF&)", "#")]
		public void SetPosition(QPointF p) {
			((QTextLayout) interceptor).SetPosition(p);
		}
		[SmokeMethod("boundingRect", "() const", "")]
		public QRectF BoundingRect() {
			return ((QTextLayout) interceptor).BoundingRect();
		}
		[SmokeMethod("minimumWidth", "() const", "")]
		public double MinimumWidth() {
			return ((QTextLayout) interceptor).MinimumWidth();
		}
		[SmokeMethod("maximumWidth", "() const", "")]
		public double MaximumWidth() {
			return ((QTextLayout) interceptor).MaximumWidth();
		}
		~QTextLayout() {
			DisposeQTextLayout();
		}
		public void Dispose() {
			DisposeQTextLayout();
		}
		[SmokeMethod("~QTextLayout", "()", "")]
		private void DisposeQTextLayout() {
			((QTextLayout) interceptor).DisposeQTextLayout();
		}
	}
}
