//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QAccessibleBridge")]
	public abstract class QAccessibleBridge : MarshalByRefObject {
		protected Object _interceptor = null;
		private IntPtr _smokeObject;
		protected QAccessibleBridge(Type dummy) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QAccessibleBridge), this);
			_interceptor = (QAccessibleBridge) realProxy.GetTransparentProxy();
		}
		private QAccessibleBridge ProxyQAccessibleBridge() {
			return (QAccessibleBridge) _interceptor;
		}
		public abstract void SetRootObject(QAccessibleInterface arg1);
		public abstract void NotifyAccessibilityUpdate(int arg1, QAccessibleInterface arg2, int arg3);
		public QAccessibleBridge() : this((Type) null) {
			CreateProxy();
			NewQAccessibleBridge();
		}
		[SmokeMethod("QAccessibleBridge", "()", "")]
		private void NewQAccessibleBridge() {
			ProxyQAccessibleBridge().NewQAccessibleBridge();
		}
	}
}
