//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QAccessibleBridge")]
	public class QAccessibleBridge : MarshalByRefObject {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
		protected QAccessibleBridge(Type dummy) {}
		interface IQAccessibleBridgeProxy {
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QAccessibleBridge), this);
			_interceptor = (QAccessibleBridge) realProxy.GetTransparentProxy();
		}
		private QAccessibleBridge ProxyQAccessibleBridge() {
			return (QAccessibleBridge) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QAccessibleBridge() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQAccessibleBridgeProxy), null);
			_staticInterceptor = (IQAccessibleBridgeProxy) realProxy.GetTransparentProxy();
		}
		private static IQAccessibleBridgeProxy StaticQAccessibleBridge() {
			return (IQAccessibleBridgeProxy) _staticInterceptor;
		}

		[SmokeMethod("setRootObject#", "(QAccessibleInterface*)")]
		public virtual void SetRootObject(QAccessibleInterface arg1) {
			ProxyQAccessibleBridge().SetRootObject(arg1);
		}
		[SmokeMethod("notifyAccessibilityUpdate$$$", "(int, QAccessibleInterface*, int)")]
		public virtual void NotifyAccessibilityUpdate(int arg1, QAccessibleInterface arg2, int arg3) {
			ProxyQAccessibleBridge().NotifyAccessibilityUpdate(arg1,arg2,arg3);
		}
		public QAccessibleBridge() : this((Type) null) {
			CreateProxy();
			NewQAccessibleBridge();
		}
		[SmokeMethod("QAccessibleBridge", "()")]
		private void NewQAccessibleBridge() {
			ProxyQAccessibleBridge().NewQAccessibleBridge();
		}
		~QAccessibleBridge() {
			DisposeQAccessibleBridge();
		}
		public void Dispose() {
			DisposeQAccessibleBridge();
		}
		[SmokeMethod("~QAccessibleBridge", "()")]
		private void DisposeQAccessibleBridge() {
			ProxyQAccessibleBridge().DisposeQAccessibleBridge();
		}
	}
}
