//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	[SmokeClass("QPolygon")]
	public class QPolygon : MarshalByRefObject, IDisposable {
		protected QPolygon interceptor = null;
		private IntPtr smokeObject;
		protected QPolygon(Type dummy) {}
		[SmokeClass("QPolygon")]
		interface IQPolygonProxy {
			[SmokeMethod("operator*", "(const QPolygon&, const QMatrix&)", "##")]
			QPolygon op_mult(QPolygon a, QMatrix m);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QPolygon), this);
			interceptor = (QPolygon) realProxy.GetTransparentProxy();
		}
		private static IQPolygonProxy staticInterceptor = null;
		static QPolygon() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQPolygonProxy), null);
			staticInterceptor = (IQPolygonProxy) realProxy.GetTransparentProxy();
		}
		//  operator QVariant(); >>>> NOT CONVERTED
		public QPolygon() : this((Type) null) {
			CreateProxy();
			NewQPolygon();
		}
		[SmokeMethod("QPolygon", "()", "")]
		private void NewQPolygon() {
			((QPolygon) interceptor).NewQPolygon();
		}
		public QPolygon(int size) : this((Type) null) {
			CreateProxy();
			NewQPolygon(size);
		}
		[SmokeMethod("QPolygon", "(int)", "$")]
		private void NewQPolygon(int size) {
			((QPolygon) interceptor).NewQPolygon(size);
		}
		public QPolygon(QPolygon a) : this((Type) null) {
			CreateProxy();
			NewQPolygon(a);
		}
		[SmokeMethod("QPolygon", "(const QPolygon&)", "#")]
		private void NewQPolygon(QPolygon a) {
			((QPolygon) interceptor).NewQPolygon(a);
		}
		public QPolygon(List<QPoint> v) : this((Type) null) {
			CreateProxy();
			NewQPolygon(v);
		}
		[SmokeMethod("QPolygon", "(const QVector<QPoint>&)", "?")]
		private void NewQPolygon(List<QPoint> v) {
			((QPolygon) interceptor).NewQPolygon(v);
		}
		public QPolygon(QRect r, bool closed) : this((Type) null) {
			CreateProxy();
			NewQPolygon(r,closed);
		}
		[SmokeMethod("QPolygon", "(const QRect&, bool)", "#$")]
		private void NewQPolygon(QRect r, bool closed) {
			((QPolygon) interceptor).NewQPolygon(r,closed);
		}
		public QPolygon(QRect r) : this((Type) null) {
			CreateProxy();
			NewQPolygon(r);
		}
		[SmokeMethod("QPolygon", "(const QRect&)", "#")]
		private void NewQPolygon(QRect r) {
			((QPolygon) interceptor).NewQPolygon(r);
		}
		public QPolygon(int nPoints, out int points) : this((Type) null) {
			CreateProxy();
			NewQPolygon(nPoints,out points);
		}
		[SmokeMethod("QPolygon", "(int, const int*)", "$$")]
		private void NewQPolygon(int nPoints, out int points) {
			((QPolygon) interceptor).NewQPolygon(nPoints,out points);
		}
		[SmokeMethod("translate", "(int, int)", "$$")]
		public void Translate(int dx, int dy) {
			((QPolygon) interceptor).Translate(dx,dy);
		}
		[SmokeMethod("translate", "(const QPoint&)", "#")]
		public void Translate(QPoint offset) {
			((QPolygon) interceptor).Translate(offset);
		}
		[SmokeMethod("boundingRect", "() const", "")]
		public QRect BoundingRect() {
			return ((QPolygon) interceptor).BoundingRect();
		}
		[SmokeMethod("point", "(int, int*, int*) const", "$$$")]
		public void Point(int i, out int x, out int y) {
			((QPolygon) interceptor).Point(i,out x,out y);
		}
		[SmokeMethod("point", "(int) const", "$")]
		public QPoint Point(int i) {
			return ((QPolygon) interceptor).Point(i);
		}
		[SmokeMethod("setPoint", "(int, int, int)", "$$$")]
		public void SetPoint(int index, int x, int y) {
			((QPolygon) interceptor).SetPoint(index,x,y);
		}
		[SmokeMethod("setPoint", "(int, const QPoint&)", "$#")]
		public void SetPoint(int index, QPoint p) {
			((QPolygon) interceptor).SetPoint(index,p);
		}
		[SmokeMethod("setPoints", "(int, const int*)", "$$")]
		public void SetPoints(int nPoints, out int points) {
			((QPolygon) interceptor).SetPoints(nPoints,out points);
		}
		[SmokeMethod("putPoints", "(int, int, const int*)", "$$$")]
		public void PutPoints(int index, int nPoints, out int points) {
			((QPolygon) interceptor).PutPoints(index,nPoints,out points);
		}
		[SmokeMethod("putPoints", "(int, int, const QPolygon&, int)", "$$#$")]
		public void PutPoints(int index, int nPoints, QPolygon from, int fromIndex) {
			((QPolygon) interceptor).PutPoints(index,nPoints,from,fromIndex);
		}
		[SmokeMethod("putPoints", "(int, int, const QPolygon&)", "$$#")]
		public void PutPoints(int index, int nPoints, QPolygon from) {
			((QPolygon) interceptor).PutPoints(index,nPoints,from);
		}
		~QPolygon() {
			DisposeQPolygon();
		}
		public void Dispose() {
			DisposeQPolygon();
		}
		[SmokeMethod("~QPolygon", "()", "")]
		private void DisposeQPolygon() {
			((QPolygon) interceptor).DisposeQPolygon();
		}
		public static QPolygon operator*(QPolygon a, QMatrix m) {
			return staticInterceptor.op_mult(a,m);
		}
	}
}
