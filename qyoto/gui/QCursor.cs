//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QCursor")]
	public class QCursor : MarshalByRefObject, IDisposable {
		protected QCursor interceptor = null;
		private IntPtr smokeObject;
		protected QCursor(Type dummy) {}
		[SmokeClass("QCursor")]
		interface IQCursorProxy {
			[SmokeMethod("pos", "()", "")]
			QPoint Pos();
			[SmokeMethod("setPos", "(int, int)", "$$")]
			void SetPos(int x, int y);
			[SmokeMethod("setPos", "(const QPoint&)", "#")]
			void SetPos(QPoint p);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QCursor), this);
			interceptor = (QCursor) realProxy.GetTransparentProxy();
		}
		private static IQCursorProxy staticInterceptor = null;
		static QCursor() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQCursorProxy), null);
			staticInterceptor = (IQCursorProxy) realProxy.GetTransparentProxy();
		}
		//  operator QVariant(); >>>> NOT CONVERTED
		public QCursor() : this((Type) null) {
			CreateProxy();
			NewQCursor();
		}
		[SmokeMethod("QCursor", "()", "")]
		private void NewQCursor() {
			((QCursor) interceptor).NewQCursor();
		}
		public QCursor(Qt.CursorShape shape) : this((Type) null) {
			CreateProxy();
			NewQCursor(shape);
		}
		[SmokeMethod("QCursor", "(Qt::CursorShape)", "$")]
		private void NewQCursor(Qt.CursorShape shape) {
			((QCursor) interceptor).NewQCursor(shape);
		}
		public QCursor(QBitmap bitmap, QBitmap mask, int hotX, int hotY) : this((Type) null) {
			CreateProxy();
			NewQCursor(bitmap,mask,hotX,hotY);
		}
		[SmokeMethod("QCursor", "(const QBitmap&, const QBitmap&, int, int)", "##$$")]
		private void NewQCursor(QBitmap bitmap, QBitmap mask, int hotX, int hotY) {
			((QCursor) interceptor).NewQCursor(bitmap,mask,hotX,hotY);
		}
		public QCursor(QBitmap bitmap, QBitmap mask, int hotX) : this((Type) null) {
			CreateProxy();
			NewQCursor(bitmap,mask,hotX);
		}
		[SmokeMethod("QCursor", "(const QBitmap&, const QBitmap&, int)", "##$")]
		private void NewQCursor(QBitmap bitmap, QBitmap mask, int hotX) {
			((QCursor) interceptor).NewQCursor(bitmap,mask,hotX);
		}
		public QCursor(QBitmap bitmap, QBitmap mask) : this((Type) null) {
			CreateProxy();
			NewQCursor(bitmap,mask);
		}
		[SmokeMethod("QCursor", "(const QBitmap&, const QBitmap&)", "##")]
		private void NewQCursor(QBitmap bitmap, QBitmap mask) {
			((QCursor) interceptor).NewQCursor(bitmap,mask);
		}
		public QCursor(QPixmap pixmap, int hotX, int hotY) : this((Type) null) {
			CreateProxy();
			NewQCursor(pixmap,hotX,hotY);
		}
		[SmokeMethod("QCursor", "(const QPixmap&, int, int)", "#$$")]
		private void NewQCursor(QPixmap pixmap, int hotX, int hotY) {
			((QCursor) interceptor).NewQCursor(pixmap,hotX,hotY);
		}
		public QCursor(QPixmap pixmap, int hotX) : this((Type) null) {
			CreateProxy();
			NewQCursor(pixmap,hotX);
		}
		[SmokeMethod("QCursor", "(const QPixmap&, int)", "#$")]
		private void NewQCursor(QPixmap pixmap, int hotX) {
			((QCursor) interceptor).NewQCursor(pixmap,hotX);
		}
		public QCursor(QPixmap pixmap) : this((Type) null) {
			CreateProxy();
			NewQCursor(pixmap);
		}
		[SmokeMethod("QCursor", "(const QPixmap&)", "#")]
		private void NewQCursor(QPixmap pixmap) {
			((QCursor) interceptor).NewQCursor(pixmap);
		}
		public QCursor(QCursor cursor) : this((Type) null) {
			CreateProxy();
			NewQCursor(cursor);
		}
		[SmokeMethod("QCursor", "(const QCursor&)", "#")]
		private void NewQCursor(QCursor cursor) {
			((QCursor) interceptor).NewQCursor(cursor);
		}
		[SmokeMethod("shape", "() const", "")]
		public Qt.CursorShape Shape() {
			return ((QCursor) interceptor).Shape();
		}
		[SmokeMethod("setShape", "(Qt::CursorShape)", "$")]
		public void SetShape(Qt.CursorShape newShape) {
			((QCursor) interceptor).SetShape(newShape);
		}
		[SmokeMethod("bitmap", "() const", "")]
		public QBitmap Bitmap() {
			return ((QCursor) interceptor).Bitmap();
		}
		[SmokeMethod("mask", "() const", "")]
		public QBitmap Mask() {
			return ((QCursor) interceptor).Mask();
		}
		[SmokeMethod("pixmap", "() const", "")]
		public QPixmap Pixmap() {
			return ((QCursor) interceptor).Pixmap();
		}
		[SmokeMethod("hotSpot", "() const", "")]
		public QPoint HotSpot() {
			return ((QCursor) interceptor).HotSpot();
		}
		~QCursor() {
			DisposeQCursor();
		}
		public void Dispose() {
			DisposeQCursor();
		}
		[SmokeMethod("~QCursor", "()", "")]
		private void DisposeQCursor() {
			((QCursor) interceptor).DisposeQCursor();
		}
		public static QPoint Pos() {
			return staticInterceptor.Pos();
		}
		public static void SetPos(int x, int y) {
			staticInterceptor.SetPos(x,y);
		}
		public static void SetPos(QPoint p) {
			staticInterceptor.SetPos(p);
		}
	}
}
