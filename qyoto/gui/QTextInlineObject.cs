//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QTextInlineObject")]
	public class QTextInlineObject : MarshalByRefObject, IDisposable {
		protected QTextInlineObject interceptor = null;
		private IntPtr smokeObject;
		protected QTextInlineObject(Type dummy) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTextInlineObject), this);
			interceptor = (QTextInlineObject) realProxy.GetTransparentProxy();
		}
		// QTextInlineObject* QTextInlineObject(int arg1,QTextEngine* arg2); >>>> NOT CONVERTED
		public QTextInlineObject() : this((Type) null) {
			CreateProxy();
			NewQTextInlineObject();
		}
		[SmokeMethod("QTextInlineObject", "()", "")]
		private void NewQTextInlineObject() {
			((QTextInlineObject) interceptor).NewQTextInlineObject();
		}
		[SmokeMethod("isValid", "() const", "")]
		public bool IsValid() {
			return ((QTextInlineObject) interceptor).IsValid();
		}
		[SmokeMethod("rect", "() const", "")]
		public QRectF Rect() {
			return ((QTextInlineObject) interceptor).Rect();
		}
		[SmokeMethod("width", "() const", "")]
		public double Width() {
			return ((QTextInlineObject) interceptor).Width();
		}
		[SmokeMethod("ascent", "() const", "")]
		public double Ascent() {
			return ((QTextInlineObject) interceptor).Ascent();
		}
		[SmokeMethod("descent", "() const", "")]
		public double Descent() {
			return ((QTextInlineObject) interceptor).Descent();
		}
		[SmokeMethod("height", "() const", "")]
		public double Height() {
			return ((QTextInlineObject) interceptor).Height();
		}
		[SmokeMethod("textDirection", "() const", "")]
		public Qt.LayoutDirection TextDirection() {
			return ((QTextInlineObject) interceptor).TextDirection();
		}
		[SmokeMethod("setWidth", "(qreal)", "$")]
		public void SetWidth(double w) {
			((QTextInlineObject) interceptor).SetWidth(w);
		}
		[SmokeMethod("setAscent", "(qreal)", "$")]
		public void SetAscent(double a) {
			((QTextInlineObject) interceptor).SetAscent(a);
		}
		[SmokeMethod("setDescent", "(qreal)", "$")]
		public void SetDescent(double d) {
			((QTextInlineObject) interceptor).SetDescent(d);
		}
		[SmokeMethod("textPosition", "() const", "")]
		public int TextPosition() {
			return ((QTextInlineObject) interceptor).TextPosition();
		}
		[SmokeMethod("formatIndex", "() const", "")]
		public int FormatIndex() {
			return ((QTextInlineObject) interceptor).FormatIndex();
		}
		[SmokeMethod("format", "() const", "")]
		public QTextFormat Format() {
			return ((QTextInlineObject) interceptor).Format();
		}
		~QTextInlineObject() {
			DisposeQTextInlineObject();
		}
		public void Dispose() {
			DisposeQTextInlineObject();
		}
		[SmokeMethod("~QTextInlineObject", "()", "")]
		private void DisposeQTextInlineObject() {
			((QTextInlineObject) interceptor).DisposeQTextInlineObject();
		}
	}
}
