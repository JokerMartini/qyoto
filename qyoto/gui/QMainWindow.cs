//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	/// See <see cref="IQMainWindowSignals"></see> for signals emitted by QMainWindow
	[SmokeClass("QMainWindow")]
	public class QMainWindow : QWidget, IDisposable {
 		protected QMainWindow(Type dummy) : base((Type) null) {}
		[SmokeClass("QMainWindow")]
		interface IQMainWindowProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QMainWindow), this);
			interceptor = (QMainWindow) realProxy.GetTransparentProxy();
		}
		private static IQMainWindowProxy staticInterceptor = null;
		static QMainWindow() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQMainWindowProxy), null);
			staticInterceptor = (IQMainWindowProxy) realProxy.GetTransparentProxy();
		}
		[Q_PROPERTY("QSize", "iconSize")]
		public QSize IconSize {
			get { return Property("iconSize").Value<QSize>(); }
			set { SetProperty("iconSize", QVariant.FromValue<QSize>(value)); }
		}
		[Q_PROPERTY("Qt::ToolButtonStyle", "toolButtonStyle")]
		public Qt.ToolButtonStyle ToolButtonStyle {
			get { return Property("toolButtonStyle").Value<Qt.ToolButtonStyle>(); }
			set { SetProperty("toolButtonStyle", QVariant.FromValue<Qt.ToolButtonStyle>(value)); }
		}
		[Q_PROPERTY("bool", "animated")]
		public bool Animated {
			get { return Property("animated").Value<bool>(); }
			set { SetProperty("animated", QVariant.FromValue<bool>(value)); }
		}
		[Q_PROPERTY("bool", "dockNestingEnabled")]
		public bool DockNestingEnabled {
			get { return Property("dockNestingEnabled").Value<bool>(); }
			set { SetProperty("dockNestingEnabled", QVariant.FromValue<bool>(value)); }
		}
		public QMainWindow(QWidget parent, int flags) : this((Type) null) {
			CreateProxy();
			NewQMainWindow(parent,flags);
		}
		[SmokeMethod("QMainWindow", "(QWidget*, Qt::WindowFlags)", "#$")]
		private void NewQMainWindow(QWidget parent, int flags) {
			((QMainWindow) interceptor).NewQMainWindow(parent,flags);
		}
		public QMainWindow(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQMainWindow(parent);
		}
		[SmokeMethod("QMainWindow", "(QWidget*)", "#")]
		private void NewQMainWindow(QWidget parent) {
			((QMainWindow) interceptor).NewQMainWindow(parent);
		}
		public QMainWindow() : this((Type) null) {
			CreateProxy();
			NewQMainWindow();
		}
		[SmokeMethod("QMainWindow", "()", "")]
		private void NewQMainWindow() {
			((QMainWindow) interceptor).NewQMainWindow();
		}
		[SmokeMethod("isAnimated", "() const", "")]
		public bool IsAnimated() {
			return ((QMainWindow) interceptor).IsAnimated();
		}
		[SmokeMethod("isDockNestingEnabled", "() const", "")]
		public bool IsDockNestingEnabled() {
			return ((QMainWindow) interceptor).IsDockNestingEnabled();
		}
		[SmokeMethod("isSeparator", "(const QPoint&) const", "#")]
		public bool IsSeparator(QPoint pos) {
			return ((QMainWindow) interceptor).IsSeparator(pos);
		}
		[SmokeMethod("menuBar", "() const", "")]
		public QMenuBar MenuBar() {
			return ((QMainWindow) interceptor).MenuBar();
		}
		[SmokeMethod("setMenuBar", "(QMenuBar*)", "#")]
		public void SetMenuBar(QMenuBar menubar) {
			((QMainWindow) interceptor).SetMenuBar(menubar);
		}
		[SmokeMethod("menuWidget", "() const", "")]
		public QWidget MenuWidget() {
			return ((QMainWindow) interceptor).MenuWidget();
		}
		[SmokeMethod("setMenuWidget", "(QWidget*)", "#")]
		public void SetMenuWidget(QWidget menubar) {
			((QMainWindow) interceptor).SetMenuWidget(menubar);
		}
		[SmokeMethod("statusBar", "() const", "")]
		public QStatusBar StatusBar() {
			return ((QMainWindow) interceptor).StatusBar();
		}
		[SmokeMethod("setStatusBar", "(QStatusBar*)", "#")]
		public void SetStatusBar(QStatusBar statusbar) {
			((QMainWindow) interceptor).SetStatusBar(statusbar);
		}
		[SmokeMethod("centralWidget", "() const", "")]
		public QWidget CentralWidget() {
			return ((QMainWindow) interceptor).CentralWidget();
		}
		[SmokeMethod("setCentralWidget", "(QWidget*)", "#")]
		public void SetCentralWidget(QWidget widget) {
			((QMainWindow) interceptor).SetCentralWidget(widget);
		}
		[SmokeMethod("setCorner", "(Qt::Corner, Qt::DockWidgetArea)", "$$")]
		public void SetCorner(Qt.Corner corner, Qt.DockWidgetArea area) {
			((QMainWindow) interceptor).SetCorner(corner,area);
		}
		[SmokeMethod("corner", "(Qt::Corner) const", "$")]
		public Qt.DockWidgetArea Corner(Qt.Corner corner) {
			return ((QMainWindow) interceptor).Corner(corner);
		}
		[SmokeMethod("addToolBarBreak", "(Qt::ToolBarArea)", "$")]
		public void AddToolBarBreak(Qt.ToolBarArea area) {
			((QMainWindow) interceptor).AddToolBarBreak(area);
		}
		[SmokeMethod("addToolBarBreak", "()", "")]
		public void AddToolBarBreak() {
			((QMainWindow) interceptor).AddToolBarBreak();
		}
		[SmokeMethod("insertToolBarBreak", "(QToolBar*)", "#")]
		public void InsertToolBarBreak(QToolBar before) {
			((QMainWindow) interceptor).InsertToolBarBreak(before);
		}
		[SmokeMethod("addToolBar", "(Qt::ToolBarArea, QToolBar*)", "$#")]
		public void AddToolBar(Qt.ToolBarArea area, QToolBar toolbar) {
			((QMainWindow) interceptor).AddToolBar(area,toolbar);
		}
		[SmokeMethod("addToolBar", "(QToolBar*)", "#")]
		public void AddToolBar(QToolBar toolbar) {
			((QMainWindow) interceptor).AddToolBar(toolbar);
		}
		[SmokeMethod("addToolBar", "(const QString&)", "$")]
		public QToolBar AddToolBar(string title) {
			return ((QMainWindow) interceptor).AddToolBar(title);
		}
		[SmokeMethod("insertToolBar", "(QToolBar*, QToolBar*)", "##")]
		public void InsertToolBar(QToolBar before, QToolBar toolbar) {
			((QMainWindow) interceptor).InsertToolBar(before,toolbar);
		}
		[SmokeMethod("removeToolBar", "(QToolBar*)", "#")]
		public void RemoveToolBar(QToolBar toolbar) {
			((QMainWindow) interceptor).RemoveToolBar(toolbar);
		}
		[SmokeMethod("toolBarArea", "(QToolBar*) const", "#")]
		public Qt.ToolBarArea ToolBarArea(QToolBar toolbar) {
			return ((QMainWindow) interceptor).ToolBarArea(toolbar);
		}
		[SmokeMethod("addDockWidget", "(Qt::DockWidgetArea, QDockWidget*)", "$#")]
		public void AddDockWidget(Qt.DockWidgetArea area, QDockWidget dockwidget) {
			((QMainWindow) interceptor).AddDockWidget(area,dockwidget);
		}
		[SmokeMethod("addDockWidget", "(Qt::DockWidgetArea, QDockWidget*, Qt::Orientation)", "$#$")]
		public void AddDockWidget(Qt.DockWidgetArea area, QDockWidget dockwidget, Qt.Orientation orientation) {
			((QMainWindow) interceptor).AddDockWidget(area,dockwidget,orientation);
		}
		[SmokeMethod("splitDockWidget", "(QDockWidget*, QDockWidget*, Qt::Orientation)", "##$")]
		public void SplitDockWidget(QDockWidget after, QDockWidget dockwidget, Qt.Orientation orientation) {
			((QMainWindow) interceptor).SplitDockWidget(after,dockwidget,orientation);
		}
		[SmokeMethod("tabifyDockWidget", "(QDockWidget*, QDockWidget*)", "##")]
		public void TabifyDockWidget(QDockWidget first, QDockWidget second) {
			((QMainWindow) interceptor).TabifyDockWidget(first,second);
		}
		[SmokeMethod("removeDockWidget", "(QDockWidget*)", "#")]
		public void RemoveDockWidget(QDockWidget dockwidget) {
			((QMainWindow) interceptor).RemoveDockWidget(dockwidget);
		}
		[SmokeMethod("dockWidgetArea", "(QDockWidget*) const", "#")]
		public Qt.DockWidgetArea DockWidgetArea(QDockWidget dockwidget) {
			return ((QMainWindow) interceptor).DockWidgetArea(dockwidget);
		}
		[SmokeMethod("saveState", "(int) const", "$")]
		public QByteArray SaveState(int version) {
			return ((QMainWindow) interceptor).SaveState(version);
		}
		[SmokeMethod("saveState", "() const", "")]
		public QByteArray SaveState() {
			return ((QMainWindow) interceptor).SaveState();
		}
		[SmokeMethod("restoreState", "(const QByteArray&, int)", "#$")]
		public bool RestoreState(QByteArray state, int version) {
			return ((QMainWindow) interceptor).RestoreState(state,version);
		}
		[SmokeMethod("restoreState", "(const QByteArray&)", "#")]
		public bool RestoreState(QByteArray state) {
			return ((QMainWindow) interceptor).RestoreState(state);
		}
		[SmokeMethod("createPopupMenu", "()", "")]
		public virtual QMenu CreatePopupMenu() {
			return ((QMainWindow) interceptor).CreatePopupMenu();
		}
		[SmokeMethod("contextMenuEvent", "(QContextMenuEvent*)", "#")]
		protected override void ContextMenuEvent(QContextMenuEvent arg1) {
			((QMainWindow) interceptor).ContextMenuEvent(arg1);
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		protected override bool Event(QEvent arg1) {
			return ((QMainWindow) interceptor).Event(arg1);
		}
		~QMainWindow() {
			DisposeQMainWindow();
		}
		public new void Dispose() {
			DisposeQMainWindow();
		}
		[SmokeMethod("~QMainWindow", "()", "")]
		private void DisposeQMainWindow() {
			((QMainWindow) interceptor).DisposeQMainWindow();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQMainWindowSignals Emit {
			get { return (IQMainWindowSignals) Q_EMIT; }
		}
	}

	public interface IQMainWindowSignals : IQWidgetSignals {
		[Q_SIGNAL("void iconSizeChanged(const QSize&)")]
		void IconSizeChanged(QSize iconSize);
		[Q_SIGNAL("void toolButtonStyleChanged(Qt::ToolButtonStyle)")]
		void ToolButtonStyleChanged(Qt.ToolButtonStyle toolButtonStyle);
	}
}
