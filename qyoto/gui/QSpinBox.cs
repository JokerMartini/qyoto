//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;

	/// See <see cref="IQSpinBoxSignals"></see> for signals emitted by QSpinBox
	[SmokeClass("QSpinBox")]
	public class QSpinBox : QAbstractSpinBox, IDisposable {
 		protected QSpinBox(Type dummy) : base((Type) null) {}
		[SmokeClass("QSpinBox")]
		interface IQSpinBoxProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSpinBox), this);
			interceptor = (QSpinBox) realProxy.GetTransparentProxy();
		}
		private static IQSpinBoxProxy staticInterceptor = null;
		static QSpinBox() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSpinBoxProxy), null);
			staticInterceptor = (IQSpinBoxProxy) realProxy.GetTransparentProxy();
		}
		[Q_PROPERTY("QString", "suffix")]
		public string Suffix {
			[SmokeMethod("suffix", "()", "")]
			get { return ((QSpinBox) interceptor).Suffix; }
			[SmokeMethod("setSuffix", "(QString)", "$")]
			set { ((QSpinBox) interceptor).Suffix = value; }
		}
		[Q_PROPERTY("QString", "prefix")]
		public string Prefix {
			[SmokeMethod("prefix", "()", "")]
			get { return ((QSpinBox) interceptor).Prefix; }
			[SmokeMethod("setPrefix", "(QString)", "$")]
			set { ((QSpinBox) interceptor).Prefix = value; }
		}
		[Q_PROPERTY("QString", "cleanText")]
		public string CleanText {
			[SmokeMethod("cleanText", "()", "")]
			get { return ((QSpinBox) interceptor).CleanText; }
		}
		[Q_PROPERTY("int", "maximum")]
		public int Maximum {
			[SmokeMethod("maximum", "()", "")]
			get { return ((QSpinBox) interceptor).Maximum; }
			[SmokeMethod("setMaximum", "(int)", "$")]
			set { ((QSpinBox) interceptor).Maximum = value; }
		}
		[Q_PROPERTY("int", "minimum")]
		public int Minimum {
			[SmokeMethod("minimum", "()", "")]
			get { return ((QSpinBox) interceptor).Minimum; }
			[SmokeMethod("setMinimum", "(int)", "$")]
			set { ((QSpinBox) interceptor).Minimum = value; }
		}
		[Q_PROPERTY("int", "singleStep")]
		public int SingleStep {
			[SmokeMethod("singleStep", "()", "")]
			get { return ((QSpinBox) interceptor).SingleStep; }
			[SmokeMethod("setSingleStep", "(int)", "$")]
			set { ((QSpinBox) interceptor).SingleStep = value; }
		}
		[Q_PROPERTY("int", "value")]
		public int Value {
			[SmokeMethod("value", "()", "")]
			get { return ((QSpinBox) interceptor).Value; }
			[SmokeMethod("setValue", "(int)", "$")]
			set { ((QSpinBox) interceptor).Value = value; }
		}
		public QSpinBox(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQSpinBox(parent);
		}
		[SmokeMethod("QSpinBox", "(QWidget*)", "#")]
		private void NewQSpinBox(QWidget parent) {
			((QSpinBox) interceptor).NewQSpinBox(parent);
		}
		public QSpinBox() : this((Type) null) {
			CreateProxy();
			NewQSpinBox();
		}
		[SmokeMethod("QSpinBox", "()", "")]
		private void NewQSpinBox() {
			((QSpinBox) interceptor).NewQSpinBox();
		}
		[SmokeMethod("setRange", "(int, int)", "$$")]
		public void SetRange(int min, int max) {
			((QSpinBox) interceptor).SetRange(min,max);
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		protected new virtual bool Event(QEvent arg1) {
			return ((QSpinBox) interceptor).Event(arg1);
		}
		[SmokeMethod("validate", "(QString&, int&) const", "$$")]
		protected new virtual int Validate(StringBuilder input, out int pos) {
			return ((QSpinBox) interceptor).Validate(input,out pos);
		}
		[SmokeMethod("valueFromText", "(const QString&) const", "$")]
		protected virtual int ValueFromText(string text) {
			return ((QSpinBox) interceptor).ValueFromText(text);
		}
		[SmokeMethod("textFromValue", "(int) const", "$")]
		protected virtual string TextFromValue(int val) {
			return ((QSpinBox) interceptor).TextFromValue(val);
		}
		[SmokeMethod("fixup", "(QString&) const", "$")]
		protected new virtual void Fixup(StringBuilder str) {
			((QSpinBox) interceptor).Fixup(str);
		}
		~QSpinBox() {
			DisposeQSpinBox();
		}
		public new void Dispose() {
			DisposeQSpinBox();
		}
		[SmokeMethod("~QSpinBox", "()", "")]
		private void DisposeQSpinBox() {
			((QSpinBox) interceptor).DisposeQSpinBox();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQSpinBoxSignals Emit {
			get { return (IQSpinBoxSignals) Q_EMIT; }
		}
	}

	public interface IQSpinBoxSignals : IQAbstractSpinBoxSignals {
		[Q_SIGNAL("void valueChanged(int)")]
		void ValueChanged(int arg1);
		[Q_SIGNAL("void valueChanged(const QString&)")]
		void ValueChanged(string arg1);
	}
}
