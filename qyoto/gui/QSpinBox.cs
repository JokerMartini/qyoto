//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;

	/// See <see cref="IQSpinBoxSignals"></see> for signals emitted by QSpinBox
	[SmokeClass("QSpinBox")]
	public class QSpinBox : QAbstractSpinBox, IDisposable {
 		protected QSpinBox(Type dummy) : base((Type) null) {}
		interface IQSpinBoxProxy {
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSpinBox), this);
			_interceptor = (QSpinBox) realProxy.GetTransparentProxy();
		}
		private QSpinBox ProxyQSpinBox() {
			return (QSpinBox) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QSpinBox() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSpinBoxProxy), null);
			_staticInterceptor = (IQSpinBoxProxy) realProxy.GetTransparentProxy();
		}
		private static IQSpinBoxProxy StaticQSpinBox() {
			return (IQSpinBoxProxy) _staticInterceptor;
		}

		[Q_PROPERTY("QString", "suffix")]
		public string Suffix {
			get {
				return Property("suffix").Value<string>();
			}
			set {
				SetProperty("suffix", QVariant.FromValue<string>(value));
			}
		}
		[Q_PROPERTY("QString", "prefix")]
		public string Prefix {
			get {
				return Property("prefix").Value<string>();
			}
			set {
				SetProperty("prefix", QVariant.FromValue<string>(value));
			}
		}
		[Q_PROPERTY("QString", "cleanText")]
		public string CleanText {
			get {
				return Property("cleanText").Value<string>();
			}
		}
		[Q_PROPERTY("int", "maximum")]
		public int Maximum {
			get {
				return Property("maximum").Value<int>();
			}
			set {
				SetProperty("maximum", QVariant.FromValue<int>(value));
			}
		}
		[Q_PROPERTY("int", "minimum")]
		public int Minimum {
			get {
				return Property("minimum").Value<int>();
			}
			set {
				SetProperty("minimum", QVariant.FromValue<int>(value));
			}
		}
		[Q_PROPERTY("int", "singleStep")]
		public int SingleStep {
			get {
				return Property("singleStep").Value<int>();
			}
			set {
				SetProperty("singleStep", QVariant.FromValue<int>(value));
			}
		}
		[Q_PROPERTY("int", "value")]
		public int Value {
			get {
				return Property("value").Value<int>();
			}
			set {
				SetProperty("value", QVariant.FromValue<int>(value));
			}
		}
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QSpinBox(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQSpinBox(parent);
		}
		[SmokeMethod("QSpinBox(QWidget*)")]
		private void NewQSpinBox(QWidget parent) {
			ProxyQSpinBox().NewQSpinBox(parent);
		}
		public QSpinBox() : this((Type) null) {
			CreateProxy();
			NewQSpinBox();
		}
		[SmokeMethod("QSpinBox()")]
		private void NewQSpinBox() {
			ProxyQSpinBox().NewQSpinBox();
		}
		[SmokeMethod("setRange(int, int)")]
		public void SetRange(int min, int max) {
			ProxyQSpinBox().SetRange(min,max);
		}
		[SmokeMethod("tr(const char*, const char*)")]
		public static new string Tr(string s, string c) {
			return StaticQSpinBox().Tr(s,c);
		}
		[SmokeMethod("tr(const char*)")]
		public static new string Tr(string s) {
			return StaticQSpinBox().Tr(s);
		}
		[SmokeMethod("event(QEvent*)")]
		public new bool Event(QEvent arg1) {
			return ProxyQSpinBox().Event(arg1);
		}
		[SmokeMethod("validate(QString&, int&) const")]
		protected new virtual int Validate(StringBuilder input, out int pos) {
			return ProxyQSpinBox().Validate(input,out pos);
		}
		[SmokeMethod("valueFromText(const QString&) const")]
		protected virtual int ValueFromText(string text) {
			return ProxyQSpinBox().ValueFromText(text);
		}
		[SmokeMethod("textFromValue(int) const")]
		protected virtual string TextFromValue(int val) {
			return ProxyQSpinBox().TextFromValue(val);
		}
		[SmokeMethod("fixup(QString&) const")]
		protected new virtual void Fixup(StringBuilder str) {
			ProxyQSpinBox().Fixup(str);
		}
		~QSpinBox() {
			DisposeQSpinBox();
		}
		public new void Dispose() {
			DisposeQSpinBox();
		}
		[SmokeMethod("~QSpinBox()")]
		private void DisposeQSpinBox() {
			ProxyQSpinBox().DisposeQSpinBox();
		}
		protected new IQSpinBoxSignals Emit {
			get {
				return (IQSpinBoxSignals) Q_EMIT;
			}
		}
	}

	public interface IQSpinBoxSignals : IQAbstractSpinBoxSignals {
		[Q_SIGNAL("void valueChanged(int)")]
		void ValueChanged(int arg1);
		[Q_SIGNAL("void valueChanged(const QString&)")]
		void ValueChanged(string arg1);
	}
}
