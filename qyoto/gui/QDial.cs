//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QDial")]
	public class QDial : QAbstractSlider, IDisposable {
 		protected QDial(Type dummy) : base((Type) null) {}
		[SmokeClass("QDial")]
		interface IQDialProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDial), this);
			_interceptor = (QDial) realProxy.GetTransparentProxy();
		}
		private QDial ProxyQDial() {
			return (QDial) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QDial() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDialProxy), null);
			_staticInterceptor = (IQDialProxy) realProxy.GetTransparentProxy();
		}
		private static IQDialProxy StaticQDial() {
			return (IQDialProxy) _staticInterceptor;
		}
		[Q_PROPERTY("bool", "wrapping")]
		public bool Wrapping {
			get { return Property("wrapping").Value<bool>(); }
			set { SetProperty("wrapping", QVariant.FromValue<bool>(value)); }
		}
		[Q_PROPERTY("int", "notchSize")]
		public int NotchSize {
			get { return Property("notchSize").Value<int>(); }
		}
		[Q_PROPERTY("qreal", "notchTarget")]
		public double NotchTarget {
			get { return Property("notchTarget").Value<double>(); }
			set { SetProperty("notchTarget", QVariant.FromValue<double>(value)); }
		}
		[Q_PROPERTY("bool", "notchesVisible")]
		public bool NotchesVisible {
			get { return Property("notchesVisible").Value<bool>(); }
			set { SetProperty("notchesVisible", QVariant.FromValue<bool>(value)); }
		}
		public QDial(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQDial(parent);
		}
		[SmokeMethod("QDial", "(QWidget*)", "#")]
		private void NewQDial(QWidget parent) {
			ProxyQDial().NewQDial(parent);
		}
		public QDial() : this((Type) null) {
			CreateProxy();
			NewQDial();
		}
		[SmokeMethod("QDial", "()", "")]
		private void NewQDial() {
			ProxyQDial().NewQDial();
		}
		[SmokeMethod("sizeHint", "() const", "")]
		public override QSize SizeHint() {
			return ProxyQDial().SizeHint();
		}
		[SmokeMethod("minimumSizeHint", "() const", "")]
		public override QSize MinimumSizeHint() {
			return ProxyQDial().MinimumSizeHint();
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		protected override bool Event(QEvent e) {
			return ProxyQDial().Event(e);
		}
		[SmokeMethod("resizeEvent", "(QResizeEvent*)", "#")]
		protected override void ResizeEvent(QResizeEvent re) {
			ProxyQDial().ResizeEvent(re);
		}
		[SmokeMethod("paintEvent", "(QPaintEvent*)", "#")]
		protected override void PaintEvent(QPaintEvent pe) {
			ProxyQDial().PaintEvent(pe);
		}
		[SmokeMethod("mousePressEvent", "(QMouseEvent*)", "#")]
		protected override void MousePressEvent(QMouseEvent me) {
			ProxyQDial().MousePressEvent(me);
		}
		[SmokeMethod("mouseReleaseEvent", "(QMouseEvent*)", "#")]
		protected override void MouseReleaseEvent(QMouseEvent me) {
			ProxyQDial().MouseReleaseEvent(me);
		}
		[SmokeMethod("mouseMoveEvent", "(QMouseEvent*)", "#")]
		protected override void MouseMoveEvent(QMouseEvent me) {
			ProxyQDial().MouseMoveEvent(me);
		}
		[SmokeMethod("sliderChange", "(QAbstractSlider::SliderChange)", "$")]
		protected override void sliderChange(QAbstractSlider.SliderChange change) {
			ProxyQDial().sliderChange(change);
		}
		~QDial() {
			DisposeQDial();
		}
		public new void Dispose() {
			DisposeQDial();
		}
		[SmokeMethod("~QDial", "()", "")]
		private void DisposeQDial() {
			ProxyQDial().DisposeQDial();
		}
		public static string Tr(string s, string c) {
			return StaticQDial().Tr(s,c);
		}
		public static string Tr(string s) {
			return StaticQDial().Tr(s);
		}
		protected new IQDialSignals Emit {
			get { return (IQDialSignals) Q_EMIT; }
		}
	}

	public interface IQDialSignals : IQAbstractSliderSignals {
	}
}
