//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QImageIOHandler")]
	public abstract class QImageIOHandler : MarshalByRefObject {
		protected QImageIOHandler interceptor = null;
		private IntPtr smokeObject;
		protected QImageIOHandler(Type dummy) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QImageIOHandler), this);
			interceptor = (QImageIOHandler) realProxy.GetTransparentProxy();
		}
		public enum ImageOption {
			Size = 0,
			ClipRect = 1,
			Description = 2,
			ScaledClipRect = 3,
			ScaledSize = 4,
			CompressionRatio = 5,
			Gamma = 6,
			Quality = 7,
			Name = 8,
			SubType = 9,
			IncrementalReading = 10,
			Endianness = 11,
			Animation = 12,
			BackgroundColor = 13,
		}
		// QImageIOHandler* QImageIOHandler(QImageIOHandlerPrivate& arg1); >>>> NOT CONVERTED
		public QImageIOHandler() : this((Type) null) {
			CreateProxy();
			NewQImageIOHandler();
		}
		[SmokeMethod("QImageIOHandler", "()", "")]
		private void NewQImageIOHandler() {
			((QImageIOHandler) interceptor).NewQImageIOHandler();
		}
		[SmokeMethod("setDevice", "(QIODevice*)", "#")]
		public void SetDevice(QIODevice device) {
			((QImageIOHandler) interceptor).SetDevice(device);
		}
		[SmokeMethod("device", "() const", "")]
		public QIODevice Device() {
			return ((QImageIOHandler) interceptor).Device();
		}
		[SmokeMethod("setFormat", "(const QByteArray&)", "#")]
		public void SetFormat(QByteArray format) {
			((QImageIOHandler) interceptor).SetFormat(format);
		}
		[SmokeMethod("format", "() const", "")]
		public QByteArray Format() {
			return ((QImageIOHandler) interceptor).Format();
		}
		[SmokeMethod("name", "() const", "")]
		public virtual QByteArray Name() {
			return ((QImageIOHandler) interceptor).Name();
		}
		[SmokeMethod("canRead", "() const", "")]
		public abstract bool CanRead();
		[SmokeMethod("read", "(QImage*)", "#")]
		public abstract bool Read(QImage image);
		[SmokeMethod("write", "(const QImage&)", "#")]
		public virtual bool Write(QImage image) {
			return ((QImageIOHandler) interceptor).Write(image);
		}
		[SmokeMethod("option", "(QImageIOHandler::ImageOption) const", "$")]
		public virtual QVariant Option(QImageIOHandler.ImageOption option) {
			return ((QImageIOHandler) interceptor).Option(option);
		}
		[SmokeMethod("setOption", "(QImageIOHandler::ImageOption, const QVariant&)", "$#")]
		public virtual void SetOption(QImageIOHandler.ImageOption option, QVariant value) {
			((QImageIOHandler) interceptor).SetOption(option,value);
		}
		[SmokeMethod("supportsOption", "(QImageIOHandler::ImageOption) const", "$")]
		public virtual bool SupportsOption(QImageIOHandler.ImageOption option) {
			return ((QImageIOHandler) interceptor).SupportsOption(option);
		}
		[SmokeMethod("jumpToNextImage", "()", "")]
		public virtual bool JumpToNextImage() {
			return ((QImageIOHandler) interceptor).JumpToNextImage();
		}
		[SmokeMethod("jumpToImage", "(int)", "$")]
		public virtual bool JumpToImage(int imageNumber) {
			return ((QImageIOHandler) interceptor).JumpToImage(imageNumber);
		}
		[SmokeMethod("loopCount", "() const", "")]
		public virtual int LoopCount() {
			return ((QImageIOHandler) interceptor).LoopCount();
		}
		[SmokeMethod("imageCount", "() const", "")]
		public virtual int ImageCount() {
			return ((QImageIOHandler) interceptor).ImageCount();
		}
		[SmokeMethod("nextImageDelay", "() const", "")]
		public virtual int NextImageDelay() {
			return ((QImageIOHandler) interceptor).NextImageDelay();
		}
		[SmokeMethod("currentImageNumber", "() const", "")]
		public virtual int CurrentImageNumber() {
			return ((QImageIOHandler) interceptor).CurrentImageNumber();
		}
		[SmokeMethod("currentImageRect", "() const", "")]
		public virtual QRect CurrentImageRect() {
			return ((QImageIOHandler) interceptor).CurrentImageRect();
		}
	}
}
