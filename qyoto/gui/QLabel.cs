//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;

	/// See <see cref="IQLabelSignals"></see> for signals emitted by QLabel
	[SmokeClass("QLabel")]
	public class QLabel : QFrame, IDisposable {
 		protected QLabel(Type dummy) : base((Type) null) {}
		[SmokeClass("QLabel")]
		interface IQLabelProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QLabel), this);
			_interceptor = (QLabel) realProxy.GetTransparentProxy();
		}
		private QLabel ProxyQLabel() {
			return (QLabel) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QLabel() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQLabelProxy), null);
			_staticInterceptor = (IQLabelProxy) realProxy.GetTransparentProxy();
		}
		private static IQLabelProxy StaticQLabel() {
			return (IQLabelProxy) _staticInterceptor;
		}
		[Q_PROPERTY("QString", "text")]
		public string Text {
			get {
				return Property("text").Value<string>();
			}
			set {
				SetProperty("text", QVariant.FromValue<string>(value));
			}
		}
		[Q_PROPERTY("Qt::TextFormat", "textFormat")]
		public Qt.TextFormat TextFormat {
			get {
				return Property("textFormat").Value<Qt.TextFormat>();
			}
			set {
				SetProperty("textFormat", QVariant.FromValue<Qt.TextFormat>(value));
			}
		}
		[Q_PROPERTY("QPixmap", "pixmap")]
		public QPixmap Pixmap {
			get {
				return Property("pixmap").Value<QPixmap>();
			}
			set {
				SetProperty("pixmap", QVariant.FromValue<QPixmap>(value));
			}
		}
		[Q_PROPERTY("bool", "scaledContents")]
		public bool ScaledContents {
			get {
				return Property("scaledContents").Value<bool>();
			}
			set {
				SetProperty("scaledContents", QVariant.FromValue<bool>(value));
			}
		}
		[Q_PROPERTY("Qt::Alignment", "alignment")]
		public int Alignment {
			get {
				return Property("alignment").Value<int>();
			}
			set {
				SetProperty("alignment", QVariant.FromValue<int>(value));
			}
		}
		[Q_PROPERTY("bool", "wordWrap")]
		public bool WordWrap {
			get {
				return Property("wordWrap").Value<bool>();
			}
			set {
				SetProperty("wordWrap", QVariant.FromValue<bool>(value));
			}
		}
		[Q_PROPERTY("int", "margin")]
		public int Margin {
			get {
				return Property("margin").Value<int>();
			}
			set {
				SetProperty("margin", QVariant.FromValue<int>(value));
			}
		}
		[Q_PROPERTY("int", "indent")]
		public int Indent {
			get {
				return Property("indent").Value<int>();
			}
			set {
				SetProperty("indent", QVariant.FromValue<int>(value));
			}
		}
		[Q_PROPERTY("bool", "openExternalLinks")]
		public bool OpenExternalLinks {
			get {
				return Property("openExternalLinks").Value<bool>();
			}
			set {
				SetProperty("openExternalLinks", QVariant.FromValue<bool>(value));
			}
		}
		[Q_PROPERTY("Qt::TextInteractionFlags", "textInteractionFlags")]
		public int TextInteractionFlags {
			get {
				return Property("textInteractionFlags").Value<int>();
			}
			set {
				SetProperty("textInteractionFlags", QVariant.FromValue<int>(value));
			}
		}
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QLabel(QWidget parent, int f) : this((Type) null) {
			CreateProxy();
			NewQLabel(parent,f);
		}
		[SmokeMethod("QLabel", "(QWidget*, Qt::WindowFlags)", "#$")]
		private void NewQLabel(QWidget parent, int f) {
			ProxyQLabel().NewQLabel(parent,f);
		}
		public QLabel(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQLabel(parent);
		}
		[SmokeMethod("QLabel", "(QWidget*)", "#")]
		private void NewQLabel(QWidget parent) {
			ProxyQLabel().NewQLabel(parent);
		}
		public QLabel() : this((Type) null) {
			CreateProxy();
			NewQLabel();
		}
		[SmokeMethod("QLabel", "()", "")]
		private void NewQLabel() {
			ProxyQLabel().NewQLabel();
		}
		public QLabel(string text, QWidget parent, int f) : this((Type) null) {
			CreateProxy();
			NewQLabel(text,parent,f);
		}
		[SmokeMethod("QLabel", "(const QString&, QWidget*, Qt::WindowFlags)", "$#$")]
		private void NewQLabel(string text, QWidget parent, int f) {
			ProxyQLabel().NewQLabel(text,parent,f);
		}
		public QLabel(string text, QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQLabel(text,parent);
		}
		[SmokeMethod("QLabel", "(const QString&, QWidget*)", "$#")]
		private void NewQLabel(string text, QWidget parent) {
			ProxyQLabel().NewQLabel(text,parent);
		}
		public QLabel(string text) : this((Type) null) {
			CreateProxy();
			NewQLabel(text);
		}
		[SmokeMethod("QLabel", "(const QString&)", "$")]
		private void NewQLabel(string text) {
			ProxyQLabel().NewQLabel(text);
		}
		[SmokeMethod("picture", "() const", "")]
		public QPicture Picture() {
			return ProxyQLabel().Picture();
		}
		[SmokeMethod("movie", "() const", "")]
		public QMovie Movie() {
			return ProxyQLabel().Movie();
		}
		[SmokeMethod("hasScaledContents", "() const", "")]
		public bool HasScaledContents() {
			return ProxyQLabel().HasScaledContents();
		}
		[SmokeMethod("sizeHint", "() const", "")]
		public new QSize SizeHint() {
			return ProxyQLabel().SizeHint();
		}
		[SmokeMethod("minimumSizeHint", "() const", "")]
		public new QSize MinimumSizeHint() {
			return ProxyQLabel().MinimumSizeHint();
		}
		[SmokeMethod("setBuddy", "(QWidget*)", "#")]
		public void SetBuddy(QWidget arg1) {
			ProxyQLabel().SetBuddy(arg1);
		}
		[SmokeMethod("buddy", "() const", "")]
		public QWidget Buddy() {
			return ProxyQLabel().Buddy();
		}
		[SmokeMethod("heightForWidth", "(int) const", "$")]
		public new int HeightForWidth(int arg1) {
			return ProxyQLabel().HeightForWidth(arg1);
		}
		[Q_SLOT("void setPicture(const QPicture&)")]
		[SmokeMethod("setPicture", "(const QPicture&)", "#")]
		public void SetPicture(QPicture arg1) {
			ProxyQLabel().SetPicture(arg1);
		}
		[Q_SLOT("void setMovie(QMovie*)")]
		[SmokeMethod("setMovie", "(QMovie*)", "#")]
		public void SetMovie(QMovie movie) {
			ProxyQLabel().SetMovie(movie);
		}
		[Q_SLOT("void setNum(int)")]
		[SmokeMethod("setNum", "(int)", "$")]
		public void SetNum(int arg1) {
			ProxyQLabel().SetNum(arg1);
		}
		[Q_SLOT("void setNum(double)")]
		[SmokeMethod("setNum", "(double)", "$")]
		public void SetNum(double arg1) {
			ProxyQLabel().SetNum(arg1);
		}
		[Q_SLOT("void clear()")]
		[SmokeMethod("clear", "()", "")]
		public void Clear() {
			ProxyQLabel().Clear();
		}
		public static new string Tr(string s, string c) {
			return StaticQLabel().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQLabel().Tr(s);
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		public new bool Event(QEvent e) {
			return ProxyQLabel().Event(e);
		}
		[SmokeMethod("keyPressEvent", "(QKeyEvent*)", "#")]
		protected new void KeyPressEvent(QKeyEvent ev) {
			ProxyQLabel().KeyPressEvent(ev);
		}
		[SmokeMethod("paintEvent", "(QPaintEvent*)", "#")]
		protected new void PaintEvent(QPaintEvent arg1) {
			ProxyQLabel().PaintEvent(arg1);
		}
		[SmokeMethod("changeEvent", "(QEvent*)", "#")]
		protected new void ChangeEvent(QEvent arg1) {
			ProxyQLabel().ChangeEvent(arg1);
		}
		[SmokeMethod("mousePressEvent", "(QMouseEvent*)", "#")]
		protected new void MousePressEvent(QMouseEvent ev) {
			ProxyQLabel().MousePressEvent(ev);
		}
		[SmokeMethod("mouseMoveEvent", "(QMouseEvent*)", "#")]
		protected new void MouseMoveEvent(QMouseEvent ev) {
			ProxyQLabel().MouseMoveEvent(ev);
		}
		[SmokeMethod("mouseReleaseEvent", "(QMouseEvent*)", "#")]
		protected new void MouseReleaseEvent(QMouseEvent ev) {
			ProxyQLabel().MouseReleaseEvent(ev);
		}
		[SmokeMethod("contextMenuEvent", "(QContextMenuEvent*)", "#")]
		protected new void ContextMenuEvent(QContextMenuEvent ev) {
			ProxyQLabel().ContextMenuEvent(ev);
		}
		[SmokeMethod("focusInEvent", "(QFocusEvent*)", "#")]
		protected new void FocusInEvent(QFocusEvent ev) {
			ProxyQLabel().FocusInEvent(ev);
		}
		[SmokeMethod("focusOutEvent", "(QFocusEvent*)", "#")]
		protected new void FocusOutEvent(QFocusEvent ev) {
			ProxyQLabel().FocusOutEvent(ev);
		}
		[SmokeMethod("focusNextPrevChild", "(bool)", "$")]
		protected new bool FocusNextPrevChild(bool next) {
			return ProxyQLabel().FocusNextPrevChild(next);
		}
		~QLabel() {
			DisposeQLabel();
		}
		public new void Dispose() {
			DisposeQLabel();
		}
		[SmokeMethod("~QLabel", "()", "")]
		private void DisposeQLabel() {
			ProxyQLabel().DisposeQLabel();
		}
		protected new IQLabelSignals Emit {
			get {
				return (IQLabelSignals) Q_EMIT;
			}
		}
	}

	public interface IQLabelSignals : IQFrameSignals {
		[Q_SIGNAL("void linkActivated(const QString&)")]
		void LinkActivated(string link);
		[Q_SIGNAL("void linkHovered(const QString&)")]
		void LinkHovered(string link);
	}
}
