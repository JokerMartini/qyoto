//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	/// See <see cref="IQLabelSignals"></see> for signals emitted by QLabel
	[SmokeClass("QLabel")]
	public class QLabel : QFrame, IDisposable {
 		protected QLabel(Type dummy) : base((Type) null) {}
		[SmokeClass("QLabel")]
		interface IQLabelProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QLabel), this);
			interceptor = (QLabel) realProxy.GetTransparentProxy();
		}
		private static IQLabelProxy staticInterceptor = null;
		static QLabel() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQLabelProxy), null);
			staticInterceptor = (IQLabelProxy) realProxy.GetTransparentProxy();
		}
		[Q_PROPERTY("QString", "text")]
		public string Text {
			[SmokeMethod("text", "()", "")]
			get { return ((QLabel) interceptor).Text; }
			[SmokeMethod("setText", "(QString)", "$")]
			set { ((QLabel) interceptor).Text = value; }
		}
		[Q_PROPERTY("Qt::TextFormat", "textFormat")]
		public Qt.TextFormat TextFormat {
			[SmokeMethod("textFormat", "()", "")]
			get { return ((QLabel) interceptor).TextFormat; }
			[SmokeMethod("setTextFormat", "(Qt::TextFormat)", "$")]
			set { ((QLabel) interceptor).TextFormat = value; }
		}
		[Q_PROPERTY("QPixmap", "pixmap")]
		public QPixmap Pixmap {
			[SmokeMethod("pixmap", "()", "")]
			get { return ((QLabel) interceptor).Pixmap; }
			[SmokeMethod("setPixmap", "(QPixmap)", "#")]
			set { ((QLabel) interceptor).Pixmap = value; }
		}
		[Q_PROPERTY("bool", "scaledContents")]
		public bool ScaledContents {
			[SmokeMethod("hasScaledContents", "()", "")]
			get { return ((QLabel) interceptor).ScaledContents; }
			[SmokeMethod("setScaledContents", "(bool)", "$")]
			set { ((QLabel) interceptor).ScaledContents = value; }
		}
		[Q_PROPERTY("Qt::Alignment", "alignment")]
		public int Alignment {
			[SmokeMethod("alignment", "()", "")]
			get { return ((QLabel) interceptor).Alignment; }
			[SmokeMethod("setAlignment", "(Qt::Alignment)", "$")]
			set { ((QLabel) interceptor).Alignment = value; }
		}
		[Q_PROPERTY("bool", "wordWrap")]
		public bool WordWrap {
			[SmokeMethod("wordWrap", "()", "")]
			get { return ((QLabel) interceptor).WordWrap; }
			[SmokeMethod("setWordWrap", "(bool)", "$")]
			set { ((QLabel) interceptor).WordWrap = value; }
		}
		[Q_PROPERTY("int", "margin")]
		public int Margin {
			[SmokeMethod("margin", "()", "")]
			get { return ((QLabel) interceptor).Margin; }
			[SmokeMethod("setMargin", "(int)", "$")]
			set { ((QLabel) interceptor).Margin = value; }
		}
		[Q_PROPERTY("int", "indent")]
		public int Indent {
			[SmokeMethod("indent", "()", "")]
			get { return ((QLabel) interceptor).Indent; }
			[SmokeMethod("setIndent", "(int)", "$")]
			set { ((QLabel) interceptor).Indent = value; }
		}
		[Q_PROPERTY("bool", "openExternalLinks")]
		public bool OpenExternalLinks {
			[SmokeMethod("openExternalLinks", "()", "")]
			get { return ((QLabel) interceptor).OpenExternalLinks; }
			[SmokeMethod("setOpenExternalLinks", "(bool)", "$")]
			set { ((QLabel) interceptor).OpenExternalLinks = value; }
		}
		[Q_PROPERTY("Qt::TextInteractionFlags", "textInteractionFlags")]
		public int TextInteractionFlags {
			[SmokeMethod("textInteractionFlags", "()", "")]
			get { return ((QLabel) interceptor).TextInteractionFlags; }
			[SmokeMethod("setTextInteractionFlags", "(Qt::TextInteractionFlags)", "$")]
			set { ((QLabel) interceptor).TextInteractionFlags = value; }
		}
		public QLabel(QWidget parent, int f) : this((Type) null) {
			CreateProxy();
			NewQLabel(parent,f);
		}
		[SmokeMethod("QLabel", "(QWidget*, Qt::WindowFlags)", "#$")]
		private void NewQLabel(QWidget parent, int f) {
			((QLabel) interceptor).NewQLabel(parent,f);
		}
		public QLabel(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQLabel(parent);
		}
		[SmokeMethod("QLabel", "(QWidget*)", "#")]
		private void NewQLabel(QWidget parent) {
			((QLabel) interceptor).NewQLabel(parent);
		}
		public QLabel() : this((Type) null) {
			CreateProxy();
			NewQLabel();
		}
		[SmokeMethod("QLabel", "()", "")]
		private void NewQLabel() {
			((QLabel) interceptor).NewQLabel();
		}
		public QLabel(string text, QWidget parent, int f) : this((Type) null) {
			CreateProxy();
			NewQLabel(text,parent,f);
		}
		[SmokeMethod("QLabel", "(const QString&, QWidget*, Qt::WindowFlags)", "$#$")]
		private void NewQLabel(string text, QWidget parent, int f) {
			((QLabel) interceptor).NewQLabel(text,parent,f);
		}
		public QLabel(string text, QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQLabel(text,parent);
		}
		[SmokeMethod("QLabel", "(const QString&, QWidget*)", "$#")]
		private void NewQLabel(string text, QWidget parent) {
			((QLabel) interceptor).NewQLabel(text,parent);
		}
		public QLabel(string text) : this((Type) null) {
			CreateProxy();
			NewQLabel(text);
		}
		[SmokeMethod("QLabel", "(const QString&)", "$")]
		private void NewQLabel(string text) {
			((QLabel) interceptor).NewQLabel(text);
		}
		[SmokeMethod("picture", "() const", "")]
		public QPicture Picture() {
			return ((QLabel) interceptor).Picture();
		}
		[SmokeMethod("movie", "() const", "")]
		public QMovie Movie() {
			return ((QLabel) interceptor).Movie();
		}
		[SmokeMethod("hasScaledContents", "() const", "")]
		public bool HasScaledContents() {
			return ((QLabel) interceptor).HasScaledContents();
		}
		[SmokeMethod("sizeHint", "() const", "")]
		public override QSize SizeHint() {
			return ((QLabel) interceptor).SizeHint();
		}
		[SmokeMethod("minimumSizeHint", "() const", "")]
		public override QSize MinimumSizeHint() {
			return ((QLabel) interceptor).MinimumSizeHint();
		}
		[SmokeMethod("setBuddy", "(QWidget*)", "#")]
		public void SetBuddy(QWidget arg1) {
			((QLabel) interceptor).SetBuddy(arg1);
		}
		[SmokeMethod("buddy", "() const", "")]
		public QWidget Buddy() {
			return ((QLabel) interceptor).Buddy();
		}
		[SmokeMethod("heightForWidth", "(int) const", "$")]
		public override int HeightForWidth(int arg1) {
			return ((QLabel) interceptor).HeightForWidth(arg1);
		}
		[Q_SLOT("void setPicture(const QPicture&)")]
		[SmokeMethod("setPicture", "(const QPicture&)", "#")]
		public void SetPicture(QPicture arg1) {
			((QLabel) interceptor).SetPicture(arg1);
		}
		[Q_SLOT("void setMovie(QMovie*)")]
		[SmokeMethod("setMovie", "(QMovie*)", "#")]
		public void SetMovie(QMovie movie) {
			((QLabel) interceptor).SetMovie(movie);
		}
		[Q_SLOT("void setNum(int)")]
		[SmokeMethod("setNum", "(int)", "$")]
		public void SetNum(int arg1) {
			((QLabel) interceptor).SetNum(arg1);
		}
		[Q_SLOT("void setNum(double)")]
		[SmokeMethod("setNum", "(double)", "$")]
		public void SetNum(double arg1) {
			((QLabel) interceptor).SetNum(arg1);
		}
		[Q_SLOT("void clear()")]
		[SmokeMethod("clear", "()", "")]
		public void Clear() {
			((QLabel) interceptor).Clear();
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		protected override bool Event(QEvent e) {
			return ((QLabel) interceptor).Event(e);
		}
		[SmokeMethod("keyPressEvent", "(QKeyEvent*)", "#")]
		protected override void KeyPressEvent(QKeyEvent ev) {
			((QLabel) interceptor).KeyPressEvent(ev);
		}
		[SmokeMethod("paintEvent", "(QPaintEvent*)", "#")]
		protected override void PaintEvent(QPaintEvent arg1) {
			((QLabel) interceptor).PaintEvent(arg1);
		}
		[SmokeMethod("changeEvent", "(QEvent*)", "#")]
		protected override void ChangeEvent(QEvent arg1) {
			((QLabel) interceptor).ChangeEvent(arg1);
		}
		[SmokeMethod("mousePressEvent", "(QMouseEvent*)", "#")]
		protected override void MousePressEvent(QMouseEvent ev) {
			((QLabel) interceptor).MousePressEvent(ev);
		}
		[SmokeMethod("mouseMoveEvent", "(QMouseEvent*)", "#")]
		protected override void MouseMoveEvent(QMouseEvent ev) {
			((QLabel) interceptor).MouseMoveEvent(ev);
		}
		[SmokeMethod("mouseReleaseEvent", "(QMouseEvent*)", "#")]
		protected override void MouseReleaseEvent(QMouseEvent ev) {
			((QLabel) interceptor).MouseReleaseEvent(ev);
		}
		[SmokeMethod("contextMenuEvent", "(QContextMenuEvent*)", "#")]
		protected override void ContextMenuEvent(QContextMenuEvent ev) {
			((QLabel) interceptor).ContextMenuEvent(ev);
		}
		[SmokeMethod("focusInEvent", "(QFocusEvent*)", "#")]
		protected override void FocusInEvent(QFocusEvent ev) {
			((QLabel) interceptor).FocusInEvent(ev);
		}
		[SmokeMethod("focusOutEvent", "(QFocusEvent*)", "#")]
		protected override void FocusOutEvent(QFocusEvent ev) {
			((QLabel) interceptor).FocusOutEvent(ev);
		}
		[SmokeMethod("focusNextPrevChild", "(bool)", "$")]
		protected override bool FocusNextPrevChild(bool next) {
			return ((QLabel) interceptor).FocusNextPrevChild(next);
		}
		~QLabel() {
			DisposeQLabel();
		}
		public new void Dispose() {
			DisposeQLabel();
		}
		[SmokeMethod("~QLabel", "()", "")]
		private void DisposeQLabel() {
			((QLabel) interceptor).DisposeQLabel();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQLabelSignals Emit {
			get { return (IQLabelSignals) Q_EMIT; }
		}
	}

	public interface IQLabelSignals : IQFrameSignals {
		[Q_SIGNAL("void linkActivated(const QString&)")]
		void LinkActivated(string link);
		[Q_SIGNAL("void linkHovered(const QString&)")]
		void LinkHovered(string link);
	}
}
