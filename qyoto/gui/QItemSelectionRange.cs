//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	[SmokeClass("QItemSelectionRange")]
	public class QItemSelectionRange : MarshalByRefObject, IDisposable {
		protected QItemSelectionRange interceptor = null;
		private IntPtr smokeObject;
		protected QItemSelectionRange(Type dummy) {}
		[SmokeClass("QItemSelectionRange")]
		interface IQItemSelectionRangeProxy {
			[SmokeMethod("operator==", "(const QItemSelectionRange&) const", "#")]
			bool op_equals(QItemSelectionRange lhs, QItemSelectionRange other);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QItemSelectionRange), this);
			interceptor = (QItemSelectionRange) realProxy.GetTransparentProxy();
		}
		private static IQItemSelectionRangeProxy staticInterceptor = null;
		static QItemSelectionRange() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQItemSelectionRangeProxy), null);
			staticInterceptor = (IQItemSelectionRangeProxy) realProxy.GetTransparentProxy();
		}
		public QItemSelectionRange() : this((Type) null) {
			CreateProxy();
			NewQItemSelectionRange();
		}
		[SmokeMethod("QItemSelectionRange", "()", "")]
		private void NewQItemSelectionRange() {
			((QItemSelectionRange) interceptor).NewQItemSelectionRange();
		}
		public QItemSelectionRange(QItemSelectionRange other) : this((Type) null) {
			CreateProxy();
			NewQItemSelectionRange(other);
		}
		[SmokeMethod("QItemSelectionRange", "(const QItemSelectionRange&)", "#")]
		private void NewQItemSelectionRange(QItemSelectionRange other) {
			((QItemSelectionRange) interceptor).NewQItemSelectionRange(other);
		}
		public QItemSelectionRange(QModelIndex topLeft, QModelIndex bottomRight) : this((Type) null) {
			CreateProxy();
			NewQItemSelectionRange(topLeft,bottomRight);
		}
		[SmokeMethod("QItemSelectionRange", "(const QModelIndex&, const QModelIndex&)", "##")]
		private void NewQItemSelectionRange(QModelIndex topLeft, QModelIndex bottomRight) {
			((QItemSelectionRange) interceptor).NewQItemSelectionRange(topLeft,bottomRight);
		}
		public QItemSelectionRange(QModelIndex index) : this((Type) null) {
			CreateProxy();
			NewQItemSelectionRange(index);
		}
		[SmokeMethod("QItemSelectionRange", "(const QModelIndex&)", "#")]
		private void NewQItemSelectionRange(QModelIndex index) {
			((QItemSelectionRange) interceptor).NewQItemSelectionRange(index);
		}
		[SmokeMethod("top", "() const", "")]
		public int Top() {
			return ((QItemSelectionRange) interceptor).Top();
		}
		[SmokeMethod("left", "() const", "")]
		public int Left() {
			return ((QItemSelectionRange) interceptor).Left();
		}
		[SmokeMethod("bottom", "() const", "")]
		public int Bottom() {
			return ((QItemSelectionRange) interceptor).Bottom();
		}
		[SmokeMethod("right", "() const", "")]
		public int Right() {
			return ((QItemSelectionRange) interceptor).Right();
		}
		[SmokeMethod("width", "() const", "")]
		public int Width() {
			return ((QItemSelectionRange) interceptor).Width();
		}
		[SmokeMethod("height", "() const", "")]
		public int Height() {
			return ((QItemSelectionRange) interceptor).Height();
		}
		[SmokeMethod("topLeft", "() const", "")]
		public QModelIndex TopLeft() {
			return ((QItemSelectionRange) interceptor).TopLeft();
		}
		[SmokeMethod("bottomRight", "() const", "")]
		public QModelIndex BottomRight() {
			return ((QItemSelectionRange) interceptor).BottomRight();
		}
		[SmokeMethod("parent", "() const", "")]
		public QModelIndex Parent() {
			return ((QItemSelectionRange) interceptor).Parent();
		}
		[SmokeMethod("model", "() const", "")]
		public QAbstractItemModel Model() {
			return ((QItemSelectionRange) interceptor).Model();
		}
		[SmokeMethod("contains", "(const QModelIndex&) const", "#")]
		public bool Contains(QModelIndex index) {
			return ((QItemSelectionRange) interceptor).Contains(index);
		}
		[SmokeMethod("contains", "(int, int, const QModelIndex&) const", "$$#")]
		public bool Contains(int row, int column, QModelIndex parentIndex) {
			return ((QItemSelectionRange) interceptor).Contains(row,column,parentIndex);
		}
		[SmokeMethod("intersects", "(const QItemSelectionRange&) const", "#")]
		public bool Intersects(QItemSelectionRange other) {
			return ((QItemSelectionRange) interceptor).Intersects(other);
		}
		[SmokeMethod("intersect", "(const QItemSelectionRange&) const", "#")]
		public QItemSelectionRange Intersect(QItemSelectionRange other) {
			return ((QItemSelectionRange) interceptor).Intersect(other);
		}
		[SmokeMethod("intersected", "(const QItemSelectionRange&) const", "#")]
		public QItemSelectionRange Intersected(QItemSelectionRange other) {
			return ((QItemSelectionRange) interceptor).Intersected(other);
		}
		public override bool Equals(object o) {
			if (!(o is QItemSelectionRange)) { return false; }
			return this == (QItemSelectionRange) o;
		}
		public override int GetHashCode() {
			return ((QItemSelectionRange) interceptor).GetHashCode();
		}
		[SmokeMethod("isValid", "() const", "")]
		public bool IsValid() {
			return ((QItemSelectionRange) interceptor).IsValid();
		}
		[SmokeMethod("indexes", "() const", "")]
		public List<QModelIndex> Indexes() {
			return ((QItemSelectionRange) interceptor).Indexes();
		}
		~QItemSelectionRange() {
			DisposeQItemSelectionRange();
		}
		public void Dispose() {
			DisposeQItemSelectionRange();
		}
		[SmokeMethod("~QItemSelectionRange", "()", "")]
		private void DisposeQItemSelectionRange() {
			((QItemSelectionRange) interceptor).DisposeQItemSelectionRange();
		}
		public static bool operator==(QItemSelectionRange lhs, QItemSelectionRange other) {
			return staticInterceptor.op_equals(lhs,other);
		}
		public static bool operator!=(QItemSelectionRange lhs, QItemSelectionRange other) {
			return !staticInterceptor.op_equals(lhs,other);
		}
	}
}
