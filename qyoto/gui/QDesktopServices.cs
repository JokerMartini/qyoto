//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QDesktopServices")]
	public class QDesktopServices : MarshalByRefObject, IDisposable {
		protected QDesktopServices interceptor = null;
		private IntPtr smokeObject;
		protected QDesktopServices(Type dummy) {}
		[SmokeClass("QDesktopServices")]
		interface IQDesktopServicesProxy {
			[SmokeMethod("openUrl", "(const QUrl&)", "#")]
			bool OpenUrl(IQUrl url);
			[SmokeMethod("setUrlHandler", "(const QString&, QObject*, const char*)", "$#$")]
			void SetUrlHandler(string scheme, QObject receiver, string method);
			[SmokeMethod("unsetUrlHandler", "(const QString&)", "$")]
			void UnsetUrlHandler(string scheme);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDesktopServices), this);
			interceptor = (QDesktopServices) realProxy.GetTransparentProxy();
		}
		private static IQDesktopServicesProxy staticInterceptor = null;
		static QDesktopServices() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDesktopServicesProxy), null);
			staticInterceptor = (IQDesktopServicesProxy) realProxy.GetTransparentProxy();
		}
		public QDesktopServices() : this((Type) null) {
			CreateProxy();
			NewQDesktopServices();
		}
		[SmokeMethod("QDesktopServices", "()", "")]
		private void NewQDesktopServices() {
			((QDesktopServices) interceptor).NewQDesktopServices();
		}
		~QDesktopServices() {
			DisposeQDesktopServices();
		}
		public void Dispose() {
			DisposeQDesktopServices();
		}
		[SmokeMethod("~QDesktopServices", "()", "")]
		private void DisposeQDesktopServices() {
			((QDesktopServices) interceptor).DisposeQDesktopServices();
		}
		public static bool OpenUrl(IQUrl url) {
			return staticInterceptor.OpenUrl(url);
		}
		public static void SetUrlHandler(string scheme, QObject receiver, string method) {
			staticInterceptor.SetUrlHandler(scheme,receiver,method);
		}
		public static void UnsetUrlHandler(string scheme) {
			staticInterceptor.UnsetUrlHandler(scheme);
		}
	}
}
