//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;

	[SmokeClass("QDesktopServices")]
	public class QDesktopServices : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
		protected QDesktopServices(Type dummy) {}
		interface IQDesktopServicesProxy {
			bool OpenUrl(IQUrl url);
			void SetUrlHandler(string scheme, QObject receiver, string method);
			void UnsetUrlHandler(string scheme);
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDesktopServices), this);
			_interceptor = (QDesktopServices) realProxy.GetTransparentProxy();
		}
		private QDesktopServices ProxyQDesktopServices() {
			return (QDesktopServices) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QDesktopServices() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDesktopServicesProxy), null);
			_staticInterceptor = (IQDesktopServicesProxy) realProxy.GetTransparentProxy();
		}
		private static IQDesktopServicesProxy StaticQDesktopServices() {
			return (IQDesktopServicesProxy) _staticInterceptor;
		}

		public QDesktopServices() : this((Type) null) {
			CreateProxy();
			NewQDesktopServices();
		}
		[SmokeMethod("QDesktopServices()")]
		private void NewQDesktopServices() {
			ProxyQDesktopServices().NewQDesktopServices();
		}
		[SmokeMethod("openUrl(const QUrl&)")]
		public static bool OpenUrl(IQUrl url) {
			return StaticQDesktopServices().OpenUrl(url);
		}
		[SmokeMethod("setUrlHandler(const QString&, QObject*, const char*)")]
		public static void SetUrlHandler(string scheme, QObject receiver, string method) {
			StaticQDesktopServices().SetUrlHandler(scheme,receiver,method);
		}
		[SmokeMethod("unsetUrlHandler(const QString&)")]
		public static void UnsetUrlHandler(string scheme) {
			StaticQDesktopServices().UnsetUrlHandler(scheme);
		}
		~QDesktopServices() {
			DisposeQDesktopServices();
		}
		public void Dispose() {
			DisposeQDesktopServices();
		}
		[SmokeMethod("~QDesktopServices()")]
		private void DisposeQDesktopServices() {
			ProxyQDesktopServices().DisposeQDesktopServices();
		}
	}
}
