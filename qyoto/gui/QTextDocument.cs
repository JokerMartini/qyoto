//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	/// See <see cref="IQTextDocumentSignals"></see> for signals emitted by QTextDocument
	[SmokeClass("QTextDocument")]
	public class QTextDocument : QObject, IDisposable {
 		protected QTextDocument(Type dummy) : base((Type) null) {}
		[SmokeClass("QTextDocument")]
		interface IQTextDocumentProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTextDocument), this);
			interceptor = (QTextDocument) realProxy.GetTransparentProxy();
		}
		private static IQTextDocumentProxy staticInterceptor = null;
		static QTextDocument() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQTextDocumentProxy), null);
			staticInterceptor = (IQTextDocumentProxy) realProxy.GetTransparentProxy();
		}
		public enum MetaInformation {
			DocumentTitle = 0,
		}
		public enum FindFlag {
			FindBackward = 0x00001,
			FindCaseSensitively = 0x00002,
			FindWholeWords = 0x00004,
		}
		public enum ResourceType {
			HtmlResource = 1,
			ImageResource = 2,
			StyleSheetResource = 3,
			UserResource = 100,
		}
		[Q_PROPERTY("bool", "undoRedoEnabled")]
		public bool UndoRedoEnabled {
			get { return Property("undoRedoEnabled").Value<bool>(); }
			set { SetProperty("undoRedoEnabled", QVariant.FromValue<bool>(value)); }
		}
		[Q_PROPERTY("bool", "modified")]
		public bool Modified {
			get { return Property("modified").Value<bool>(); }
			set { SetProperty("modified", QVariant.FromValue<bool>(value)); }
		}
		[Q_PROPERTY("QSizeF", "pageSize")]
		public QSizeF PageSize {
			get { return Property("pageSize").Value<QSizeF>(); }
			set { SetProperty("pageSize", QVariant.FromValue<QSizeF>(value)); }
		}
		[Q_PROPERTY("QFont", "defaultFont")]
		public QFont DefaultFont {
			get { return Property("defaultFont").Value<QFont>(); }
			set { SetProperty("defaultFont", QVariant.FromValue<QFont>(value)); }
		}
		[Q_PROPERTY("bool", "useDesignMetrics")]
		public bool UseDesignMetrics {
			get { return Property("useDesignMetrics").Value<bool>(); }
			set { SetProperty("useDesignMetrics", QVariant.FromValue<bool>(value)); }
		}
		[Q_PROPERTY("QSizeF", "size")]
		public QSizeF Size {
			get { return Property("size").Value<QSizeF>(); }
		}
		[Q_PROPERTY("qreal", "textWidth")]
		public double TextWidth {
			get { return Property("textWidth").Value<double>(); }
			set { SetProperty("textWidth", QVariant.FromValue<double>(value)); }
		}
		[Q_PROPERTY("int", "blockCount")]
		public int BlockCount {
			get { return Property("blockCount").Value<int>(); }
		}
		[Q_PROPERTY("QString", "defaultStyleSheet")]
		public string DefaultStyleSheet {
			get { return Property("defaultStyleSheet").Value<string>(); }
			set { SetProperty("defaultStyleSheet", QVariant.FromValue<string>(value)); }
		}
		[Q_PROPERTY("int", "maximumBlockCount")]
		public int MaximumBlockCount {
			get { return Property("maximumBlockCount").Value<int>(); }
			set { SetProperty("maximumBlockCount", QVariant.FromValue<int>(value)); }
		}
		// QTextDocumentPrivate* docHandle(); >>>> NOT CONVERTED
		// void appendUndoItem(QAbstractUndoItem* arg1); >>>> NOT CONVERTED
		public QTextDocument(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQTextDocument(parent);
		}
		[SmokeMethod("QTextDocument", "(QObject*)", "#")]
		private void NewQTextDocument(QObject parent) {
			((QTextDocument) interceptor).NewQTextDocument(parent);
		}
		public QTextDocument() : this((Type) null) {
			CreateProxy();
			NewQTextDocument();
		}
		[SmokeMethod("QTextDocument", "()", "")]
		private void NewQTextDocument() {
			((QTextDocument) interceptor).NewQTextDocument();
		}
		public QTextDocument(string text, QObject parent) : this((Type) null) {
			CreateProxy();
			NewQTextDocument(text,parent);
		}
		[SmokeMethod("QTextDocument", "(const QString&, QObject*)", "$#")]
		private void NewQTextDocument(string text, QObject parent) {
			((QTextDocument) interceptor).NewQTextDocument(text,parent);
		}
		public QTextDocument(string text) : this((Type) null) {
			CreateProxy();
			NewQTextDocument(text);
		}
		[SmokeMethod("QTextDocument", "(const QString&)", "$")]
		private void NewQTextDocument(string text) {
			((QTextDocument) interceptor).NewQTextDocument(text);
		}
		[SmokeMethod("clone", "(QObject*) const", "#")]
		public QTextDocument Clone(QObject parent) {
			return ((QTextDocument) interceptor).Clone(parent);
		}
		[SmokeMethod("clone", "() const", "")]
		public QTextDocument Clone() {
			return ((QTextDocument) interceptor).Clone();
		}
		[SmokeMethod("isEmpty", "() const", "")]
		public bool IsEmpty() {
			return ((QTextDocument) interceptor).IsEmpty();
		}
		[SmokeMethod("clear", "()", "")]
		public virtual void Clear() {
			((QTextDocument) interceptor).Clear();
		}
		[SmokeMethod("isUndoRedoEnabled", "() const", "")]
		public bool IsUndoRedoEnabled() {
			return ((QTextDocument) interceptor).IsUndoRedoEnabled();
		}
		[SmokeMethod("isUndoAvailable", "() const", "")]
		public bool IsUndoAvailable() {
			return ((QTextDocument) interceptor).IsUndoAvailable();
		}
		[SmokeMethod("isRedoAvailable", "() const", "")]
		public bool IsRedoAvailable() {
			return ((QTextDocument) interceptor).IsRedoAvailable();
		}
		[SmokeMethod("setDocumentLayout", "(QAbstractTextDocumentLayout*)", "#")]
		public void SetDocumentLayout(QAbstractTextDocumentLayout layout) {
			((QTextDocument) interceptor).SetDocumentLayout(layout);
		}
		[SmokeMethod("documentLayout", "() const", "")]
		public QAbstractTextDocumentLayout DocumentLayout() {
			return ((QTextDocument) interceptor).DocumentLayout();
		}
		[SmokeMethod("setMetaInformation", "(QTextDocument::MetaInformation, const QString&)", "$$")]
		public void SetMetaInformation(QTextDocument.MetaInformation info, string arg2) {
			((QTextDocument) interceptor).SetMetaInformation(info,arg2);
		}
		[SmokeMethod("metaInformation", "(QTextDocument::MetaInformation) const", "$")]
		public string metaInformation(QTextDocument.MetaInformation info) {
			return ((QTextDocument) interceptor).metaInformation(info);
		}
		[SmokeMethod("toHtml", "(const QByteArray&) const", "#")]
		public string ToHtml(QByteArray encoding) {
			return ((QTextDocument) interceptor).ToHtml(encoding);
		}
		[SmokeMethod("toHtml", "() const", "")]
		public string ToHtml() {
			return ((QTextDocument) interceptor).ToHtml();
		}
		[SmokeMethod("setHtml", "(const QString&)", "$")]
		public void SetHtml(string html) {
			((QTextDocument) interceptor).SetHtml(html);
		}
		[SmokeMethod("toPlainText", "() const", "")]
		public string ToPlainText() {
			return ((QTextDocument) interceptor).ToPlainText();
		}
		[SmokeMethod("setPlainText", "(const QString&)", "$")]
		public void SetPlainText(string text) {
			((QTextDocument) interceptor).SetPlainText(text);
		}
		[SmokeMethod("find", "(const QString&, int, FindFlags) const", "$$$")]
		public QTextCursor Find(string subString, int from, int options) {
			return ((QTextDocument) interceptor).Find(subString,from,options);
		}
		[SmokeMethod("find", "(const QString&, int) const", "$$")]
		public QTextCursor Find(string subString, int from) {
			return ((QTextDocument) interceptor).Find(subString,from);
		}
		[SmokeMethod("find", "(const QString&) const", "$")]
		public QTextCursor Find(string subString) {
			return ((QTextDocument) interceptor).Find(subString);
		}
		[SmokeMethod("find", "(const QString&, const QTextCursor&, FindFlags) const", "$#$")]
		public QTextCursor Find(string subString, QTextCursor from, int options) {
			return ((QTextDocument) interceptor).Find(subString,from,options);
		}
		[SmokeMethod("find", "(const QString&, const QTextCursor&) const", "$#")]
		public QTextCursor Find(string subString, QTextCursor from) {
			return ((QTextDocument) interceptor).Find(subString,from);
		}
		[SmokeMethod("find", "(const QRegExp&, int, FindFlags) const", "#$$")]
		public QTextCursor Find(QRegExp expr, int from, int options) {
			return ((QTextDocument) interceptor).Find(expr,from,options);
		}
		[SmokeMethod("find", "(const QRegExp&, int) const", "#$")]
		public QTextCursor Find(QRegExp expr, int from) {
			return ((QTextDocument) interceptor).Find(expr,from);
		}
		[SmokeMethod("find", "(const QRegExp&) const", "#")]
		public QTextCursor Find(QRegExp expr) {
			return ((QTextDocument) interceptor).Find(expr);
		}
		[SmokeMethod("find", "(const QRegExp&, const QTextCursor&, FindFlags) const", "##$")]
		public QTextCursor Find(QRegExp expr, QTextCursor from, int options) {
			return ((QTextDocument) interceptor).Find(expr,from,options);
		}
		[SmokeMethod("find", "(const QRegExp&, const QTextCursor&) const", "##")]
		public QTextCursor Find(QRegExp expr, QTextCursor from) {
			return ((QTextDocument) interceptor).Find(expr,from);
		}
		[SmokeMethod("frameAt", "(int) const", "$")]
		public QTextFrame FrameAt(int pos) {
			return ((QTextDocument) interceptor).FrameAt(pos);
		}
		[SmokeMethod("rootFrame", "() const", "")]
		public QTextFrame RootFrame() {
			return ((QTextDocument) interceptor).RootFrame();
		}
		[SmokeMethod("object", "(int) const", "$")]
		public QTextObject Object(int objectIndex) {
			return ((QTextDocument) interceptor).Object(objectIndex);
		}
		[SmokeMethod("objectForFormat", "(const QTextFormat&) const", "#")]
		public QTextObject ObjectForFormat(QTextFormat arg1) {
			return ((QTextDocument) interceptor).ObjectForFormat(arg1);
		}
		[SmokeMethod("findBlock", "(int) const", "$")]
		public QTextBlock FindBlock(int pos) {
			return ((QTextDocument) interceptor).FindBlock(pos);
		}
		[SmokeMethod("begin", "() const", "")]
		public QTextBlock Begin() {
			return ((QTextDocument) interceptor).Begin();
		}
		[SmokeMethod("end", "() const", "")]
		public QTextBlock End() {
			return ((QTextDocument) interceptor).End();
		}
		[SmokeMethod("pageCount", "() const", "")]
		public int PageCount() {
			return ((QTextDocument) interceptor).PageCount();
		}
		[SmokeMethod("isModified", "() const", "")]
		public bool IsModified() {
			return ((QTextDocument) interceptor).IsModified();
		}
		[SmokeMethod("print", "(QPrinter*) const", "#")]
		public void Print(QPrinter printer) {
			((QTextDocument) interceptor).Print(printer);
		}
		[SmokeMethod("resource", "(int, const QUrl&) const", "$#")]
		public QVariant Resource(int type, IQUrl name) {
			return ((QTextDocument) interceptor).Resource(type,name);
		}
		[SmokeMethod("addResource", "(int, const QUrl&, const QVariant&)", "$##")]
		public void AddResource(int type, IQUrl name, QVariant resource) {
			((QTextDocument) interceptor).AddResource(type,name,resource);
		}
		[SmokeMethod("allFormats", "() const", "")]
		public List<QTextFormat> AllFormats() {
			return ((QTextDocument) interceptor).AllFormats();
		}
		[SmokeMethod("markContentsDirty", "(int, int)", "$$")]
		public void MarkContentsDirty(int from, int length) {
			((QTextDocument) interceptor).MarkContentsDirty(from,length);
		}
		[SmokeMethod("drawContents", "(QPainter*, const QRectF&)", "##")]
		public void DrawContents(QPainter painter, QRectF rect) {
			((QTextDocument) interceptor).DrawContents(painter,rect);
		}
		[SmokeMethod("drawContents", "(QPainter*)", "#")]
		public void DrawContents(QPainter painter) {
			((QTextDocument) interceptor).DrawContents(painter);
		}
		[SmokeMethod("idealWidth", "() const", "")]
		public double IdealWidth() {
			return ((QTextDocument) interceptor).IdealWidth();
		}
		[SmokeMethod("adjustSize", "()", "")]
		public void AdjustSize() {
			((QTextDocument) interceptor).AdjustSize();
		}
		[SmokeMethod("undo", "(QTextCursor*)", "#")]
		public void Undo(QTextCursor cursor) {
			((QTextDocument) interceptor).Undo(cursor);
		}
		[SmokeMethod("redo", "(QTextCursor*)", "#")]
		public void Redo(QTextCursor cursor) {
			((QTextDocument) interceptor).Redo(cursor);
		}
		[Q_SLOT("void undo()")]
		[SmokeMethod("undo", "()", "")]
		public void Undo() {
			((QTextDocument) interceptor).Undo();
		}
		[Q_SLOT("void redo()")]
		[SmokeMethod("redo", "()", "")]
		public void Redo() {
			((QTextDocument) interceptor).Redo();
		}
		[SmokeMethod("createObject", "(const QTextFormat&)", "#")]
		protected virtual QTextObject CreateObject(QTextFormat f) {
			return ((QTextDocument) interceptor).CreateObject(f);
		}
		[SmokeMethod("loadResource", "(int, const QUrl&)", "$#")]
		protected virtual QVariant LoadResource(int type, IQUrl name) {
			return ((QTextDocument) interceptor).LoadResource(type,name);
		}
		~QTextDocument() {
			DisposeQTextDocument();
		}
		public new void Dispose() {
			DisposeQTextDocument();
		}
		[SmokeMethod("~QTextDocument", "()", "")]
		private void DisposeQTextDocument() {
			((QTextDocument) interceptor).DisposeQTextDocument();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQTextDocumentSignals Emit {
			get { return (IQTextDocumentSignals) Q_EMIT; }
		}
	}

	public interface IQTextDocumentSignals : IQObjectSignals {
		[Q_SIGNAL("void contentsChange(int, int, int)")]
		void ContentsChange(int from, int charsRemoves, int charsAdded);
		[Q_SIGNAL("void contentsChanged()")]
		void ContentsChanged();
		[Q_SIGNAL("void undoAvailable(bool)")]
		void UndoAvailable(bool arg1);
		[Q_SIGNAL("void redoAvailable(bool)")]
		void RedoAvailable(bool arg1);
		[Q_SIGNAL("void modificationChanged(bool)")]
		void ModificationChanged(bool m);
		[Q_SIGNAL("void cursorPositionChanged(const QTextCursor&)")]
		void CursorPositionChanged(QTextCursor cursor);
	}
}
