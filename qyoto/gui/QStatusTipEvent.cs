//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QStatusTipEvent")]
	public class QStatusTipEvent : QEvent, IDisposable {
 		protected QStatusTipEvent(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QStatusTipEvent), this);
			interceptor = (QStatusTipEvent) realProxy.GetTransparentProxy();
		}
		public QStatusTipEvent(string tip) : this((Type) null) {
			CreateProxy();
			NewQStatusTipEvent(tip);
		}
		[SmokeMethod("QStatusTipEvent", "(const QString&)", "$")]
		private void NewQStatusTipEvent(string tip) {
			((QStatusTipEvent) interceptor).NewQStatusTipEvent(tip);
		}
		[SmokeMethod("tip", "() const", "")]
		public string Tip() {
			return ((QStatusTipEvent) interceptor).Tip();
		}
		~QStatusTipEvent() {
			DisposeQStatusTipEvent();
		}
		public new void Dispose() {
			DisposeQStatusTipEvent();
		}
		[SmokeMethod("~QStatusTipEvent", "()", "")]
		private void DisposeQStatusTipEvent() {
			((QStatusTipEvent) interceptor).DisposeQStatusTipEvent();
		}
	}
}
