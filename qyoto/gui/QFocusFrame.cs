//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QFocusFrame")]
	public class QFocusFrame : QWidget, IDisposable {
 		protected QFocusFrame(Type dummy) : base((Type) null) {}
		[SmokeClass("QFocusFrame")]
		interface IQFocusFrameProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QFocusFrame), this);
			interceptor = (QFocusFrame) realProxy.GetTransparentProxy();
		}
		private static IQFocusFrameProxy staticInterceptor = null;
		static QFocusFrame() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQFocusFrameProxy), null);
			staticInterceptor = (IQFocusFrameProxy) realProxy.GetTransparentProxy();
		}
		public QFocusFrame(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQFocusFrame(parent);
		}
		[SmokeMethod("QFocusFrame", "(QWidget*)", "#")]
		private void NewQFocusFrame(QWidget parent) {
			((QFocusFrame) interceptor).NewQFocusFrame(parent);
		}
		public QFocusFrame() : this((Type) null) {
			CreateProxy();
			NewQFocusFrame();
		}
		[SmokeMethod("QFocusFrame", "()", "")]
		private void NewQFocusFrame() {
			((QFocusFrame) interceptor).NewQFocusFrame();
		}
		[SmokeMethod("setWidget", "(QWidget*)", "#")]
		public void SetWidget(QWidget widget) {
			((QFocusFrame) interceptor).SetWidget(widget);
		}
		[SmokeMethod("widget", "() const", "")]
		public QWidget Widget() {
			return ((QFocusFrame) interceptor).Widget();
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		protected override bool Event(QEvent e) {
			return ((QFocusFrame) interceptor).Event(e);
		}
		[SmokeMethod("eventFilter", "(QObject*, QEvent*)", "##")]
		protected new virtual bool EventFilter(QObject arg1, QEvent arg2) {
			return ((QFocusFrame) interceptor).EventFilter(arg1,arg2);
		}
		[SmokeMethod("paintEvent", "(QPaintEvent*)", "#")]
		protected override void PaintEvent(QPaintEvent arg1) {
			((QFocusFrame) interceptor).PaintEvent(arg1);
		}
		~QFocusFrame() {
			DisposeQFocusFrame();
		}
		public new void Dispose() {
			DisposeQFocusFrame();
		}
		[SmokeMethod("~QFocusFrame", "()", "")]
		private void DisposeQFocusFrame() {
			((QFocusFrame) interceptor).DisposeQFocusFrame();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQFocusFrameSignals Emit {
			get { return (IQFocusFrameSignals) Q_EMIT; }
		}
	}

	public interface IQFocusFrameSignals : IQWidgetSignals {
	}
}
