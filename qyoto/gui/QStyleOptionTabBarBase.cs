//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QStyleOptionTabBarBase")]
	public class QStyleOptionTabBarBase : QStyleOption, IDisposable {
 		protected QStyleOptionTabBarBase(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QStyleOptionTabBarBase), this);
			interceptor = (QStyleOptionTabBarBase) realProxy.GetTransparentProxy();
		}
		public enum StyleOptionType {
			Type = QStyleOption.OptionType.SO_TabBarBase,
		}
		public enum StyleOptionVersion {
			Version = 1,
		}
		public QStyleOptionTabBarBase() : this((Type) null) {
			CreateProxy();
			NewQStyleOptionTabBarBase();
		}
		[SmokeMethod("QStyleOptionTabBarBase", "()", "")]
		private void NewQStyleOptionTabBarBase() {
			((QStyleOptionTabBarBase) interceptor).NewQStyleOptionTabBarBase();
		}
		public QStyleOptionTabBarBase(QStyleOptionTabBarBase other) : this((Type) null) {
			CreateProxy();
			NewQStyleOptionTabBarBase(other);
		}
		[SmokeMethod("QStyleOptionTabBarBase", "(const QStyleOptionTabBarBase&)", "#")]
		private void NewQStyleOptionTabBarBase(QStyleOptionTabBarBase other) {
			((QStyleOptionTabBarBase) interceptor).NewQStyleOptionTabBarBase(other);
		}
		public QStyleOptionTabBarBase(int version) : this((Type) null) {
			CreateProxy();
			NewQStyleOptionTabBarBase(version);
		}
		[SmokeMethod("QStyleOptionTabBarBase", "(int)", "$")]
		private void NewQStyleOptionTabBarBase(int version) {
			((QStyleOptionTabBarBase) interceptor).NewQStyleOptionTabBarBase(version);
		}
		~QStyleOptionTabBarBase() {
			DisposeQStyleOptionTabBarBase();
		}
		public void Dispose() {
			DisposeQStyleOptionTabBarBase();
		}
		[SmokeMethod("~QStyleOptionTabBarBase", "()", "")]
		private void DisposeQStyleOptionTabBarBase() {
			((QStyleOptionTabBarBase) interceptor).DisposeQStyleOptionTabBarBase();
		}
	}
}
