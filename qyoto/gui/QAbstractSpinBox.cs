//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;

	/// See <see cref="IQAbstractSpinBoxSignals"></see> for signals emitted by QAbstractSpinBox
	[SmokeClass("QAbstractSpinBox")]
	public abstract class QAbstractSpinBox : QWidget, IDisposable {
 		protected QAbstractSpinBox(Type dummy) : base((Type) null) {}
		[SmokeClass("QAbstractSpinBox")]
		interface IQAbstractSpinBoxProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QAbstractSpinBox), this);
			_interceptor = (QAbstractSpinBox) realProxy.GetTransparentProxy();
		}
		private QAbstractSpinBox ProxyQAbstractSpinBox() {
			return (QAbstractSpinBox) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QAbstractSpinBox() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQAbstractSpinBoxProxy), null);
			_staticInterceptor = (IQAbstractSpinBoxProxy) realProxy.GetTransparentProxy();
		}
		private static IQAbstractSpinBoxProxy StaticQAbstractSpinBox() {
			return (IQAbstractSpinBoxProxy) _staticInterceptor;
		}
		public enum StepEnabledFlag {
			StepNone = 0x00,
			StepUpEnabled = 0x01,
			StepDownEnabled = 0x02,
		}
		public enum ButtonSymbols {
			UpDownArrows = 0,
			PlusMinus = 1,
		}
		public enum CorrectionMode {
			CorrectToPreviousValue = 0,
			CorrectToNearestValue = 1,
		}
		[Q_PROPERTY("bool", "wrapping")]
		public bool Wrapping {
			get { return Property("wrapping").Value<bool>(); }
			set { SetProperty("wrapping", QVariant.FromValue<bool>(value)); }
		}
		[Q_PROPERTY("bool", "frame")]
		public bool Frame {
			get { return Property("frame").Value<bool>(); }
			set { SetProperty("frame", QVariant.FromValue<bool>(value)); }
		}
		[Q_PROPERTY("Qt::Alignment", "alignment")]
		public int Alignment {
			get { return Property("alignment").Value<int>(); }
			set { SetProperty("alignment", QVariant.FromValue<int>(value)); }
		}
		[Q_PROPERTY("bool", "readOnly")]
		public bool ReadOnly {
			get { return Property("readOnly").Value<bool>(); }
			set { SetProperty("readOnly", QVariant.FromValue<bool>(value)); }
		}
		[Q_PROPERTY("QAbstractSpinBox::ButtonSymbols", "buttonSymbols")]
		public QAbstractSpinBox.ButtonSymbols buttonSymbols {
			get { return Property("buttonSymbols").Value<QAbstractSpinBox.ButtonSymbols>(); }
			set { SetProperty("buttonSymbols", QVariant.FromValue<QAbstractSpinBox.ButtonSymbols>(value)); }
		}
		[Q_PROPERTY("QString", "specialValueText")]
		public string SpecialValueText {
			get { return Property("specialValueText").Value<string>(); }
			set { SetProperty("specialValueText", QVariant.FromValue<string>(value)); }
		}
		[Q_PROPERTY("QString", "text")]
		public string Text {
			get { return Property("text").Value<string>(); }
		}
		[Q_PROPERTY("bool", "accelerated")]
		public bool Accelerated {
			get { return Property("accelerated").Value<bool>(); }
			set { SetProperty("accelerated", QVariant.FromValue<bool>(value)); }
		}
		[Q_PROPERTY("QAbstractSpinBox::CorrectionMode", "correctionMode")]
		public QAbstractSpinBox.CorrectionMode correctionMode {
			get { return Property("correctionMode").Value<QAbstractSpinBox.CorrectionMode>(); }
			set { SetProperty("correctionMode", QVariant.FromValue<QAbstractSpinBox.CorrectionMode>(value)); }
		}
		[Q_PROPERTY("bool", "acceptableInput")]
		public bool AcceptableInput {
			get { return Property("acceptableInput").Value<bool>(); }
		}
		public QAbstractSpinBox(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQAbstractSpinBox(parent);
		}
		[SmokeMethod("QAbstractSpinBox", "(QWidget*)", "#")]
		private void NewQAbstractSpinBox(QWidget parent) {
			ProxyQAbstractSpinBox().NewQAbstractSpinBox(parent);
		}
		public QAbstractSpinBox() : this((Type) null) {
			CreateProxy();
			NewQAbstractSpinBox();
		}
		[SmokeMethod("QAbstractSpinBox", "()", "")]
		private void NewQAbstractSpinBox() {
			ProxyQAbstractSpinBox().NewQAbstractSpinBox();
		}
		[SmokeMethod("hasAcceptableInput", "() const", "")]
		public bool HasAcceptableInput() {
			return ProxyQAbstractSpinBox().HasAcceptableInput();
		}
		[SmokeMethod("isReadOnly", "() const", "")]
		public bool IsReadOnly() {
			return ProxyQAbstractSpinBox().IsReadOnly();
		}
		[SmokeMethod("hasFrame", "() const", "")]
		public bool HasFrame() {
			return ProxyQAbstractSpinBox().HasFrame();
		}
		[SmokeMethod("isAccelerated", "() const", "")]
		public bool IsAccelerated() {
			return ProxyQAbstractSpinBox().IsAccelerated();
		}
		[SmokeMethod("sizeHint", "() const", "")]
		public override QSize SizeHint() {
			return ProxyQAbstractSpinBox().SizeHint();
		}
		[SmokeMethod("minimumSizeHint", "() const", "")]
		public override QSize MinimumSizeHint() {
			return ProxyQAbstractSpinBox().MinimumSizeHint();
		}
		[SmokeMethod("interpretText", "()", "")]
		public void InterpretText() {
			ProxyQAbstractSpinBox().InterpretText();
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		public new virtual bool Event(QEvent arg1) {
			return ProxyQAbstractSpinBox().Event(arg1);
		}
		[SmokeMethod("validate", "(QString&, int&) const", "$$")]
		public virtual int Validate(StringBuilder input, out int pos) {
			return ProxyQAbstractSpinBox().Validate(input,out pos);
		}
		[SmokeMethod("fixup", "(QString&) const", "$")]
		public virtual void Fixup(StringBuilder input) {
			ProxyQAbstractSpinBox().Fixup(input);
		}
		[SmokeMethod("stepBy", "(int)", "$")]
		public virtual void StepBy(int steps) {
			ProxyQAbstractSpinBox().StepBy(steps);
		}
		[Q_SLOT("void stepUp()")]
		[SmokeMethod("stepUp", "()", "")]
		public void StepUp() {
			ProxyQAbstractSpinBox().StepUp();
		}
		[Q_SLOT("void stepDown()")]
		[SmokeMethod("stepDown", "()", "")]
		public void StepDown() {
			ProxyQAbstractSpinBox().StepDown();
		}
		[Q_SLOT("void selectAll()")]
		[SmokeMethod("selectAll", "()", "")]
		public void SelectAll() {
			ProxyQAbstractSpinBox().SelectAll();
		}
		[Q_SLOT("void clear()")]
		[SmokeMethod("clear", "()", "")]
		public virtual void Clear() {
			ProxyQAbstractSpinBox().Clear();
		}
		public static string Tr(string s, string c) {
			return StaticQAbstractSpinBox().Tr(s,c);
		}
		public static string Tr(string s) {
			return StaticQAbstractSpinBox().Tr(s);
		}
		[SmokeMethod("resizeEvent", "(QResizeEvent*)", "#")]
		protected override void ResizeEvent(QResizeEvent arg1) {
			ProxyQAbstractSpinBox().ResizeEvent(arg1);
		}
		[SmokeMethod("keyPressEvent", "(QKeyEvent*)", "#")]
		protected override void KeyPressEvent(QKeyEvent arg1) {
			ProxyQAbstractSpinBox().KeyPressEvent(arg1);
		}
		[SmokeMethod("keyReleaseEvent", "(QKeyEvent*)", "#")]
		protected override void KeyReleaseEvent(QKeyEvent arg1) {
			ProxyQAbstractSpinBox().KeyReleaseEvent(arg1);
		}
		[SmokeMethod("wheelEvent", "(QWheelEvent*)", "#")]
		protected override void WheelEvent(QWheelEvent arg1) {
			ProxyQAbstractSpinBox().WheelEvent(arg1);
		}
		[SmokeMethod("focusInEvent", "(QFocusEvent*)", "#")]
		protected override void FocusInEvent(QFocusEvent arg1) {
			ProxyQAbstractSpinBox().FocusInEvent(arg1);
		}
		[SmokeMethod("focusOutEvent", "(QFocusEvent*)", "#")]
		protected override void FocusOutEvent(QFocusEvent arg1) {
			ProxyQAbstractSpinBox().FocusOutEvent(arg1);
		}
		[SmokeMethod("contextMenuEvent", "(QContextMenuEvent*)", "#")]
		protected override void ContextMenuEvent(QContextMenuEvent arg1) {
			ProxyQAbstractSpinBox().ContextMenuEvent(arg1);
		}
		[SmokeMethod("changeEvent", "(QEvent*)", "#")]
		protected override void ChangeEvent(QEvent arg1) {
			ProxyQAbstractSpinBox().ChangeEvent(arg1);
		}
		[SmokeMethod("closeEvent", "(QCloseEvent*)", "#")]
		protected override void CloseEvent(QCloseEvent arg1) {
			ProxyQAbstractSpinBox().CloseEvent(arg1);
		}
		[SmokeMethod("hideEvent", "(QHideEvent*)", "#")]
		protected override void HideEvent(QHideEvent arg1) {
			ProxyQAbstractSpinBox().HideEvent(arg1);
		}
		[SmokeMethod("mousePressEvent", "(QMouseEvent*)", "#")]
		protected override void MousePressEvent(QMouseEvent arg1) {
			ProxyQAbstractSpinBox().MousePressEvent(arg1);
		}
		[SmokeMethod("mouseReleaseEvent", "(QMouseEvent*)", "#")]
		protected override void MouseReleaseEvent(QMouseEvent arg1) {
			ProxyQAbstractSpinBox().MouseReleaseEvent(arg1);
		}
		[SmokeMethod("mouseMoveEvent", "(QMouseEvent*)", "#")]
		protected override void MouseMoveEvent(QMouseEvent arg1) {
			ProxyQAbstractSpinBox().MouseMoveEvent(arg1);
		}
		[SmokeMethod("timerEvent", "(QTimerEvent*)", "#")]
		protected override void TimerEvent(QTimerEvent arg1) {
			ProxyQAbstractSpinBox().TimerEvent(arg1);
		}
		[SmokeMethod("paintEvent", "(QPaintEvent*)", "#")]
		protected override void PaintEvent(QPaintEvent arg1) {
			ProxyQAbstractSpinBox().PaintEvent(arg1);
		}
		[SmokeMethod("showEvent", "(QShowEvent*)", "#")]
		protected override void ShowEvent(QShowEvent arg1) {
			ProxyQAbstractSpinBox().ShowEvent(arg1);
		}
		[SmokeMethod("lineEdit", "() const", "")]
		protected QLineEdit LineEdit() {
			return ProxyQAbstractSpinBox().LineEdit();
		}
		[SmokeMethod("setLineEdit", "(QLineEdit*)", "#")]
		protected void SetLineEdit(QLineEdit edit) {
			ProxyQAbstractSpinBox().SetLineEdit(edit);
		}
		[SmokeMethod("stepEnabled", "() const", "")]
		protected virtual int StepEnabled() {
			return ProxyQAbstractSpinBox().StepEnabled();
		}
		~QAbstractSpinBox() {
			DisposeQAbstractSpinBox();
		}
		public new void Dispose() {
			DisposeQAbstractSpinBox();
		}
		[SmokeMethod("~QAbstractSpinBox", "()", "")]
		private void DisposeQAbstractSpinBox() {
			ProxyQAbstractSpinBox().DisposeQAbstractSpinBox();
		}
		protected new IQAbstractSpinBoxSignals Emit {
			get { return (IQAbstractSpinBoxSignals) Q_EMIT; }
		}
	}

	public interface IQAbstractSpinBoxSignals : IQWidgetSignals {
		[Q_SIGNAL("void editingFinished()")]
		void EditingFinished();
	}
}
