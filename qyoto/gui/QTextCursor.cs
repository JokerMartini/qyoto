//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QTextCursor")]
	public class QTextCursor : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
		private IntPtr _smokeObject;
		protected QTextCursor(Type dummy) {}
		[SmokeClass("QTextCursor")]
		interface IQTextCursorProxy {
			[SmokeMethod("operator<", "(const QTextCursor&) const", "#")]
			bool op_lt(QTextCursor lhs, QTextCursor rhs);
			[SmokeMethod("operator<=", "(const QTextCursor&) const", "#")]
			bool op_lte(QTextCursor lhs, QTextCursor rhs);
			[SmokeMethod("operator==", "(const QTextCursor&) const", "#")]
			bool op_equals(QTextCursor lhs, QTextCursor rhs);
			[SmokeMethod("operator>=", "(const QTextCursor&) const", "#")]
			bool op_gte(QTextCursor lhs, QTextCursor rhs);
			[SmokeMethod("operator>", "(const QTextCursor&) const", "#")]
			bool op_gt(QTextCursor lhs, QTextCursor rhs);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTextCursor), this);
			_interceptor = (QTextCursor) realProxy.GetTransparentProxy();
		}
		private QTextCursor ProxyQTextCursor() {
			return (QTextCursor) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QTextCursor() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQTextCursorProxy), null);
			_staticInterceptor = (IQTextCursorProxy) realProxy.GetTransparentProxy();
		}
		private static IQTextCursorProxy StaticQTextCursor() {
			return (IQTextCursorProxy) _staticInterceptor;
		}
		public enum MoveMode {
			MoveAnchor = 0,
			KeepAnchor = 1,
		}
		public enum MoveOperation {
			NoMove = 0,
			Start = 1,
			Up = 2,
			StartOfLine = 3,
			StartOfBlock = 4,
			StartOfWord = 5,
			PreviousBlock = 6,
			PreviousCharacter = 7,
			PreviousWord = 8,
			Left = 9,
			WordLeft = 10,
			End = 11,
			Down = 12,
			EndOfLine = 13,
			EndOfWord = 14,
			EndOfBlock = 15,
			NextBlock = 16,
			NextCharacter = 17,
			NextWord = 18,
			Right = 19,
			WordRight = 20,
		}
		public enum SelectionType {
			WordUnderCursor = 0,
			LineUnderCursor = 1,
			BlockUnderCursor = 2,
			Document = 3,
		}
		public QTextCursor() : this((Type) null) {
			CreateProxy();
			NewQTextCursor();
		}
		[SmokeMethod("QTextCursor", "()", "")]
		private void NewQTextCursor() {
			ProxyQTextCursor().NewQTextCursor();
		}
		public QTextCursor(QTextDocument document) : this((Type) null) {
			CreateProxy();
			NewQTextCursor(document);
		}
		[SmokeMethod("QTextCursor", "(QTextDocument*)", "#")]
		private void NewQTextCursor(QTextDocument document) {
			ProxyQTextCursor().NewQTextCursor(document);
		}
		public QTextCursor(QTextFrame frame) : this((Type) null) {
			CreateProxy();
			NewQTextCursor(frame);
		}
		[SmokeMethod("QTextCursor", "(QTextFrame*)", "#")]
		private void NewQTextCursor(QTextFrame frame) {
			ProxyQTextCursor().NewQTextCursor(frame);
		}
		public QTextCursor(QTextBlock block) : this((Type) null) {
			CreateProxy();
			NewQTextCursor(block);
		}
		[SmokeMethod("QTextCursor", "(const QTextBlock&)", "#")]
		private void NewQTextCursor(QTextBlock block) {
			ProxyQTextCursor().NewQTextCursor(block);
		}
		// QTextCursor* QTextCursor(QTextCursorPrivate* arg1); >>>> NOT CONVERTED
		public QTextCursor(QTextCursor cursor) : this((Type) null) {
			CreateProxy();
			NewQTextCursor(cursor);
		}
		[SmokeMethod("QTextCursor", "(const QTextCursor&)", "#")]
		private void NewQTextCursor(QTextCursor cursor) {
			ProxyQTextCursor().NewQTextCursor(cursor);
		}
		[SmokeMethod("isNull", "() const", "")]
		public bool IsNull() {
			return ProxyQTextCursor().IsNull();
		}
		[SmokeMethod("setPosition", "(int, QTextCursor::MoveMode)", "$$")]
		public void SetPosition(int pos, QTextCursor.MoveMode mode) {
			ProxyQTextCursor().SetPosition(pos,mode);
		}
		[SmokeMethod("setPosition", "(int)", "$")]
		public void SetPosition(int pos) {
			ProxyQTextCursor().SetPosition(pos);
		}
		[SmokeMethod("position", "() const", "")]
		public int Position() {
			return ProxyQTextCursor().Position();
		}
		[SmokeMethod("anchor", "() const", "")]
		public int Anchor() {
			return ProxyQTextCursor().Anchor();
		}
		[SmokeMethod("insertText", "(const QString&)", "$")]
		public void InsertText(string text) {
			ProxyQTextCursor().InsertText(text);
		}
		[SmokeMethod("insertText", "(const QString&, const QTextCharFormat&)", "$#")]
		public void InsertText(string text, QTextCharFormat format) {
			ProxyQTextCursor().InsertText(text,format);
		}
		[SmokeMethod("movePosition", "(QTextCursor::MoveOperation, QTextCursor::MoveMode, int)", "$$$")]
		public bool MovePosition(QTextCursor.MoveOperation op, QTextCursor.MoveMode arg2, int n) {
			return ProxyQTextCursor().MovePosition(op,arg2,n);
		}
		[SmokeMethod("movePosition", "(QTextCursor::MoveOperation, QTextCursor::MoveMode)", "$$")]
		public bool MovePosition(QTextCursor.MoveOperation op, QTextCursor.MoveMode arg2) {
			return ProxyQTextCursor().MovePosition(op,arg2);
		}
		[SmokeMethod("movePosition", "(QTextCursor::MoveOperation)", "$")]
		public bool MovePosition(QTextCursor.MoveOperation op) {
			return ProxyQTextCursor().MovePosition(op);
		}
		[SmokeMethod("deleteChar", "()", "")]
		public void DeleteChar() {
			ProxyQTextCursor().DeleteChar();
		}
		[SmokeMethod("deletePreviousChar", "()", "")]
		public void DeletePreviousChar() {
			ProxyQTextCursor().DeletePreviousChar();
		}
		[SmokeMethod("select", "(QTextCursor::SelectionType)", "$")]
		public void Select(QTextCursor.SelectionType selection) {
			ProxyQTextCursor().Select(selection);
		}
		[SmokeMethod("hasSelection", "() const", "")]
		public bool HasSelection() {
			return ProxyQTextCursor().HasSelection();
		}
		[SmokeMethod("hasComplexSelection", "() const", "")]
		public bool HasComplexSelection() {
			return ProxyQTextCursor().HasComplexSelection();
		}
		[SmokeMethod("removeSelectedText", "()", "")]
		public void RemoveSelectedText() {
			ProxyQTextCursor().RemoveSelectedText();
		}
		[SmokeMethod("clearSelection", "()", "")]
		public void ClearSelection() {
			ProxyQTextCursor().ClearSelection();
		}
		[SmokeMethod("selectionStart", "() const", "")]
		public int SelectionStart() {
			return ProxyQTextCursor().SelectionStart();
		}
		[SmokeMethod("selectionEnd", "() const", "")]
		public int SelectionEnd() {
			return ProxyQTextCursor().SelectionEnd();
		}
		[SmokeMethod("selectedText", "() const", "")]
		public string SelectedText() {
			return ProxyQTextCursor().SelectedText();
		}
		[SmokeMethod("selection", "() const", "")]
		public QTextDocumentFragment Selection() {
			return ProxyQTextCursor().Selection();
		}
		[SmokeMethod("selectedTableCells", "(int*, int*, int*, int*) const", "$$$$")]
		public void SelectedTableCells(out int firstRow, out int numRows, out int firstColumn, out int numColumns) {
			ProxyQTextCursor().SelectedTableCells(out firstRow,out numRows,out firstColumn,out numColumns);
		}
		[SmokeMethod("block", "() const", "")]
		public QTextBlock Block() {
			return ProxyQTextCursor().Block();
		}
		[SmokeMethod("charFormat", "() const", "")]
		public QTextCharFormat CharFormat() {
			return ProxyQTextCursor().CharFormat();
		}
		[SmokeMethod("setCharFormat", "(const QTextCharFormat&)", "#")]
		public void SetCharFormat(QTextCharFormat format) {
			ProxyQTextCursor().SetCharFormat(format);
		}
		[SmokeMethod("mergeCharFormat", "(const QTextCharFormat&)", "#")]
		public void MergeCharFormat(QTextCharFormat modifier) {
			ProxyQTextCursor().MergeCharFormat(modifier);
		}
		[SmokeMethod("blockFormat", "() const", "")]
		public QTextBlockFormat BlockFormat() {
			return ProxyQTextCursor().BlockFormat();
		}
		[SmokeMethod("setBlockFormat", "(const QTextBlockFormat&)", "#")]
		public void SetBlockFormat(QTextBlockFormat format) {
			ProxyQTextCursor().SetBlockFormat(format);
		}
		[SmokeMethod("mergeBlockFormat", "(const QTextBlockFormat&)", "#")]
		public void MergeBlockFormat(QTextBlockFormat modifier) {
			ProxyQTextCursor().MergeBlockFormat(modifier);
		}
		[SmokeMethod("blockCharFormat", "() const", "")]
		public QTextCharFormat BlockCharFormat() {
			return ProxyQTextCursor().BlockCharFormat();
		}
		[SmokeMethod("setBlockCharFormat", "(const QTextCharFormat&)", "#")]
		public void SetBlockCharFormat(QTextCharFormat format) {
			ProxyQTextCursor().SetBlockCharFormat(format);
		}
		[SmokeMethod("mergeBlockCharFormat", "(const QTextCharFormat&)", "#")]
		public void MergeBlockCharFormat(QTextCharFormat modifier) {
			ProxyQTextCursor().MergeBlockCharFormat(modifier);
		}
		[SmokeMethod("atBlockStart", "() const", "")]
		public bool AtBlockStart() {
			return ProxyQTextCursor().AtBlockStart();
		}
		[SmokeMethod("atBlockEnd", "() const", "")]
		public bool AtBlockEnd() {
			return ProxyQTextCursor().AtBlockEnd();
		}
		[SmokeMethod("atStart", "() const", "")]
		public bool AtStart() {
			return ProxyQTextCursor().AtStart();
		}
		[SmokeMethod("atEnd", "() const", "")]
		public bool AtEnd() {
			return ProxyQTextCursor().AtEnd();
		}
		[SmokeMethod("insertBlock", "()", "")]
		public void InsertBlock() {
			ProxyQTextCursor().InsertBlock();
		}
		[SmokeMethod("insertBlock", "(const QTextBlockFormat&)", "#")]
		public void InsertBlock(QTextBlockFormat format) {
			ProxyQTextCursor().InsertBlock(format);
		}
		[SmokeMethod("insertBlock", "(const QTextBlockFormat&, const QTextCharFormat&)", "##")]
		public void InsertBlock(QTextBlockFormat format, QTextCharFormat charFormat) {
			ProxyQTextCursor().InsertBlock(format,charFormat);
		}
		[SmokeMethod("insertList", "(const QTextListFormat&)", "#")]
		public QTextList InsertList(QTextListFormat format) {
			return ProxyQTextCursor().InsertList(format);
		}
		[SmokeMethod("insertList", "(QTextListFormat::Style)", "$")]
		public QTextList InsertList(QTextListFormat.Style style) {
			return ProxyQTextCursor().InsertList(style);
		}
		[SmokeMethod("createList", "(const QTextListFormat&)", "#")]
		public QTextList CreateList(QTextListFormat format) {
			return ProxyQTextCursor().CreateList(format);
		}
		[SmokeMethod("createList", "(QTextListFormat::Style)", "$")]
		public QTextList CreateList(QTextListFormat.Style style) {
			return ProxyQTextCursor().CreateList(style);
		}
		[SmokeMethod("currentList", "() const", "")]
		public QTextList CurrentList() {
			return ProxyQTextCursor().CurrentList();
		}
		[SmokeMethod("insertTable", "(int, int, const QTextTableFormat&)", "$$#")]
		public QTextTable InsertTable(int rows, int cols, QTextTableFormat format) {
			return ProxyQTextCursor().InsertTable(rows,cols,format);
		}
		[SmokeMethod("insertTable", "(int, int)", "$$")]
		public QTextTable InsertTable(int rows, int cols) {
			return ProxyQTextCursor().InsertTable(rows,cols);
		}
		[SmokeMethod("currentTable", "() const", "")]
		public QTextTable CurrentTable() {
			return ProxyQTextCursor().CurrentTable();
		}
		[SmokeMethod("insertFrame", "(const QTextFrameFormat&)", "#")]
		public QTextFrame InsertFrame(QTextFrameFormat format) {
			return ProxyQTextCursor().InsertFrame(format);
		}
		[SmokeMethod("currentFrame", "() const", "")]
		public QTextFrame CurrentFrame() {
			return ProxyQTextCursor().CurrentFrame();
		}
		[SmokeMethod("insertFragment", "(const QTextDocumentFragment&)", "#")]
		public void InsertFragment(QTextDocumentFragment fragment) {
			ProxyQTextCursor().InsertFragment(fragment);
		}
		[SmokeMethod("insertHtml", "(const QString&)", "$")]
		public void InsertHtml(string html) {
			ProxyQTextCursor().InsertHtml(html);
		}
		[SmokeMethod("insertImage", "(const QTextImageFormat&, QTextFrameFormat::Position)", "#$")]
		public void InsertImage(QTextImageFormat format, QTextFrameFormat.Position alignment) {
			ProxyQTextCursor().InsertImage(format,alignment);
		}
		[SmokeMethod("insertImage", "(const QTextImageFormat&)", "#")]
		public void InsertImage(QTextImageFormat format) {
			ProxyQTextCursor().InsertImage(format);
		}
		[SmokeMethod("insertImage", "(const QString&)", "$")]
		public void InsertImage(string name) {
			ProxyQTextCursor().InsertImage(name);
		}
		[SmokeMethod("beginEditBlock", "()", "")]
		public void BeginEditBlock() {
			ProxyQTextCursor().BeginEditBlock();
		}
		[SmokeMethod("joinPreviousEditBlock", "()", "")]
		public void JoinPreviousEditBlock() {
			ProxyQTextCursor().JoinPreviousEditBlock();
		}
		[SmokeMethod("endEditBlock", "()", "")]
		public void EndEditBlock() {
			ProxyQTextCursor().EndEditBlock();
		}
		public static bool operator<(QTextCursor lhs, QTextCursor rhs) {
			return StaticQTextCursor().op_lt(lhs,rhs);
		}
		public static bool operator<=(QTextCursor lhs, QTextCursor rhs) {
			return StaticQTextCursor().op_lte(lhs,rhs);
		}
		public static bool operator==(QTextCursor lhs, QTextCursor rhs) {
			return StaticQTextCursor().op_equals(lhs,rhs);
		}
		public static bool operator!=(QTextCursor lhs, QTextCursor rhs) {
			return !StaticQTextCursor().op_equals(lhs,rhs);
		}
		public override bool Equals(object o) {
			if (!(o is QTextCursor)) { return false; }
			return this == (QTextCursor) o;
		}
		public override int GetHashCode() {
			return ProxyQTextCursor().GetHashCode();
		}
		public static bool operator>=(QTextCursor lhs, QTextCursor rhs) {
			return StaticQTextCursor().op_gte(lhs,rhs);
		}
		public static bool operator>(QTextCursor lhs, QTextCursor rhs) {
			return StaticQTextCursor().op_gt(lhs,rhs);
		}
		[SmokeMethod("isCopyOf", "(const QTextCursor&) const", "#")]
		public bool IsCopyOf(QTextCursor other) {
			return ProxyQTextCursor().IsCopyOf(other);
		}
		[SmokeMethod("blockNumber", "() const", "")]
		public int BlockNumber() {
			return ProxyQTextCursor().BlockNumber();
		}
		[SmokeMethod("columnNumber", "() const", "")]
		public int ColumnNumber() {
			return ProxyQTextCursor().ColumnNumber();
		}
		~QTextCursor() {
			DisposeQTextCursor();
		}
		public void Dispose() {
			DisposeQTextCursor();
		}
		[SmokeMethod("~QTextCursor", "()", "")]
		private void DisposeQTextCursor() {
			ProxyQTextCursor().DisposeQTextCursor();
		}
	}
}
