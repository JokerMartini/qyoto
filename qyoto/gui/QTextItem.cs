//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;

	[SmokeClass("QTextItem")]
	public class QTextItem : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
		private IntPtr _smokeObject;
		protected QTextItem(Type dummy) {}
		[SmokeClass("QTextItem")]
		interface IQTextItemProxy {
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTextItem), this);
			_interceptor = (QTextItem) realProxy.GetTransparentProxy();
		}
		private QTextItem ProxyQTextItem() {
			return (QTextItem) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QTextItem() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQTextItemProxy), null);
			_staticInterceptor = (IQTextItemProxy) realProxy.GetTransparentProxy();
		}
		private static IQTextItemProxy StaticQTextItem() {
			return (IQTextItemProxy) _staticInterceptor;
		}
		public enum RenderFlag : uint {
			RightToLeft = 0x1,
			Overline = 0x10,
			Underline = 0x20,
			StrikeOut = 0x40,
			Dummy = 0xffffffff,
		}
		[SmokeMethod("descent", "() const", "")]
		public double Descent() {
			return ProxyQTextItem().Descent();
		}
		[SmokeMethod("ascent", "() const", "")]
		public double Ascent() {
			return ProxyQTextItem().Ascent();
		}
		[SmokeMethod("width", "() const", "")]
		public double Width() {
			return ProxyQTextItem().Width();
		}
		[SmokeMethod("renderFlags", "() const", "")]
		public int RenderFlags() {
			return ProxyQTextItem().RenderFlags();
		}
		[SmokeMethod("text", "() const", "")]
		public string Text() {
			return ProxyQTextItem().Text();
		}
		[SmokeMethod("font", "() const", "")]
		public QFont Font() {
			return ProxyQTextItem().Font();
		}
		public QTextItem() : this((Type) null) {
			CreateProxy();
			NewQTextItem();
		}
		[SmokeMethod("QTextItem", "()", "")]
		private void NewQTextItem() {
			ProxyQTextItem().NewQTextItem();
		}
		~QTextItem() {
			DisposeQTextItem();
		}
		public void Dispose() {
			DisposeQTextItem();
		}
		[SmokeMethod("~QTextItem", "()", "")]
		private void DisposeQTextItem() {
			ProxyQTextItem().DisposeQTextItem();
		}
	}
}
