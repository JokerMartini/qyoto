//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections;
	using System.Text;

	[SmokeClass("QAccessibleObject")]
	public class QAccessibleObject : QAccessibleInterface {
 		protected QAccessibleObject(Type dummy) : base((Type) null) {}
		interface IQAccessibleObjectProxy {
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QAccessibleObject), this);
			_interceptor = (QAccessibleObject) realProxy.GetTransparentProxy();
		}
		private QAccessibleObject ProxyQAccessibleObject() {
			return (QAccessibleObject) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QAccessibleObject() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQAccessibleObjectProxy), null);
			_staticInterceptor = (IQAccessibleObjectProxy) realProxy.GetTransparentProxy();
		}
		private static IQAccessibleObjectProxy StaticQAccessibleObject() {
			return (IQAccessibleObjectProxy) _staticInterceptor;
		}

		public QAccessibleObject(QObject arg1) : this((Type) null) {
			CreateProxy();
			NewQAccessibleObject(arg1);
		}
		[SmokeMethod("QAccessibleObject(QObject*)")]
		private void NewQAccessibleObject(QObject arg1) {
			ProxyQAccessibleObject().NewQAccessibleObject(arg1);
		}
		[SmokeMethod("isValid() const")]
		public new bool IsValid() {
			return ProxyQAccessibleObject().IsValid();
		}
		[SmokeMethod("object() const")]
		public new QObject Object() {
			return ProxyQAccessibleObject().Object();
		}
		[SmokeMethod("rect(int) const")]
		public new QRect Rect(int child) {
			return ProxyQAccessibleObject().Rect(child);
		}
		[SmokeMethod("setText(QAccessible::Text, int, const QString&)")]
		public new void SetText(QAccessible.Text t, int child, string text) {
			ProxyQAccessibleObject().SetText(t,child,text);
		}
		[SmokeMethod("userActionCount(int) const")]
		public new int UserActionCount(int child) {
			return ProxyQAccessibleObject().UserActionCount(child);
		}
		[SmokeMethod("doAction(int, int, const QVariantList&)")]
		public new bool DoAction(int action, int child, ArrayList arg3) {
			return ProxyQAccessibleObject().DoAction(action,child,arg3);
		}
		[SmokeMethod("actionText(int, QAccessible::Text, int) const")]
		public new string ActionText(int action, QAccessible.Text t, int child) {
			return ProxyQAccessibleObject().ActionText(action,t,child);
		}
	}
}
