//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;
	using System.Collections.Generic;

	/// See <see cref="IQFileDialogSignals"></see> for signals emitted by QFileDialog
	[SmokeClass("QFileDialog")]
	public class QFileDialog : QDialog, IDisposable {
 		protected QFileDialog(Type dummy) : base((Type) null) {}
		[SmokeClass("QFileDialog")]
		interface IQFileDialogProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
			[SmokeMethod("getOpenFileName", "(QWidget*, const QString&, const QString&, const QString&, QString*, Options)", "#$$$$$")]
			string GetOpenFileName(QWidget parent, string caption, string dir, string filter, StringBuilder selectedFilter, int options);
			[SmokeMethod("getOpenFileName", "(QWidget*, const QString&, const QString&, const QString&, QString*)", "#$$$$")]
			string GetOpenFileName(QWidget parent, string caption, string dir, string filter, StringBuilder selectedFilter);
			[SmokeMethod("getOpenFileName", "(QWidget*, const QString&, const QString&, const QString&)", "#$$$")]
			string GetOpenFileName(QWidget parent, string caption, string dir, string filter);
			[SmokeMethod("getOpenFileName", "(QWidget*, const QString&, const QString&)", "#$$")]
			string GetOpenFileName(QWidget parent, string caption, string dir);
			[SmokeMethod("getOpenFileName", "(QWidget*, const QString&)", "#$")]
			string GetOpenFileName(QWidget parent, string caption);
			[SmokeMethod("getOpenFileName", "(QWidget*)", "#")]
			string GetOpenFileName(QWidget parent);
			[SmokeMethod("getOpenFileName", "()", "")]
			string GetOpenFileName();
			[SmokeMethod("getSaveFileName", "(QWidget*, const QString&, const QString&, const QString&, QString*, Options)", "#$$$$$")]
			string GetSaveFileName(QWidget parent, string caption, string dir, string filter, StringBuilder selectedFilter, int options);
			[SmokeMethod("getSaveFileName", "(QWidget*, const QString&, const QString&, const QString&, QString*)", "#$$$$")]
			string GetSaveFileName(QWidget parent, string caption, string dir, string filter, StringBuilder selectedFilter);
			[SmokeMethod("getSaveFileName", "(QWidget*, const QString&, const QString&, const QString&)", "#$$$")]
			string GetSaveFileName(QWidget parent, string caption, string dir, string filter);
			[SmokeMethod("getSaveFileName", "(QWidget*, const QString&, const QString&)", "#$$")]
			string GetSaveFileName(QWidget parent, string caption, string dir);
			[SmokeMethod("getSaveFileName", "(QWidget*, const QString&)", "#$")]
			string GetSaveFileName(QWidget parent, string caption);
			[SmokeMethod("getSaveFileName", "(QWidget*)", "#")]
			string GetSaveFileName(QWidget parent);
			[SmokeMethod("getSaveFileName", "()", "")]
			string GetSaveFileName();
			[SmokeMethod("getExistingDirectory", "(QWidget*, const QString&, const QString&, Options)", "#$$$")]
			string GetExistingDirectory(QWidget parent, string caption, string dir, int options);
			[SmokeMethod("getExistingDirectory", "(QWidget*, const QString&, const QString&)", "#$$")]
			string GetExistingDirectory(QWidget parent, string caption, string dir);
			[SmokeMethod("getExistingDirectory", "(QWidget*, const QString&)", "#$")]
			string GetExistingDirectory(QWidget parent, string caption);
			[SmokeMethod("getExistingDirectory", "(QWidget*)", "#")]
			string GetExistingDirectory(QWidget parent);
			[SmokeMethod("getExistingDirectory", "()", "")]
			string GetExistingDirectory();
			[SmokeMethod("getOpenFileNames", "(QWidget*, const QString&, const QString&, const QString&, QString*, Options)", "#$$$$$")]
			List<string> GetOpenFileNames(QWidget parent, string caption, string dir, string filter, StringBuilder selectedFilter, int options);
			[SmokeMethod("getOpenFileNames", "(QWidget*, const QString&, const QString&, const QString&, QString*)", "#$$$$")]
			List<string> GetOpenFileNames(QWidget parent, string caption, string dir, string filter, StringBuilder selectedFilter);
			[SmokeMethod("getOpenFileNames", "(QWidget*, const QString&, const QString&, const QString&)", "#$$$")]
			List<string> GetOpenFileNames(QWidget parent, string caption, string dir, string filter);
			[SmokeMethod("getOpenFileNames", "(QWidget*, const QString&, const QString&)", "#$$")]
			List<string> GetOpenFileNames(QWidget parent, string caption, string dir);
			[SmokeMethod("getOpenFileNames", "(QWidget*, const QString&)", "#$")]
			List<string> GetOpenFileNames(QWidget parent, string caption);
			[SmokeMethod("getOpenFileNames", "(QWidget*)", "#")]
			List<string> GetOpenFileNames(QWidget parent);
			[SmokeMethod("getOpenFileNames", "()", "")]
			List<string> GetOpenFileNames();
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QFileDialog), this);
			interceptor = (QFileDialog) realProxy.GetTransparentProxy();
		}
		private static IQFileDialogProxy staticInterceptor = null;
		static QFileDialog() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQFileDialogProxy), null);
			staticInterceptor = (IQFileDialogProxy) realProxy.GetTransparentProxy();
		}
		public enum ViewMode {
			Detail = 0,
			List = 1,
		}
		public enum FileMode {
			AnyFile = 0,
			ExistingFile = 1,
			Directory = 2,
			ExistingFiles = 3,
			DirectoryOnly = 4,
		}
		public enum AcceptMode {
			AcceptOpen = 0,
			AcceptSave = 1,
		}
		public enum DialogLabel {
			LookIn = 0,
			FileName = 1,
			FileType = 2,
			Accept = 3,
			Reject = 4,
		}
		public enum Option {
			ShowDirsOnly = 0x01,
			DontResolveSymlinks = 0x02,
			DontConfirmOverwrite = 0x04,
			DontUseSheet = 0x08,
			DontUseNativeDialog = 0x10,
		}
		[Q_PROPERTY("QFileDialog::ViewMode", "viewMode")]
		public QFileDialog.ViewMode viewMode {
			get { return Property("viewMode").Value<QFileDialog.ViewMode>(); }
			set { SetProperty("viewMode", QVariant.FromValue<QFileDialog.ViewMode>(value)); }
		}
		[Q_PROPERTY("QFileDialog::FileMode", "fileMode")]
		public QFileDialog.FileMode fileMode {
			get { return Property("fileMode").Value<QFileDialog.FileMode>(); }
			set { SetProperty("fileMode", QVariant.FromValue<QFileDialog.FileMode>(value)); }
		}
		[Q_PROPERTY("QFileDialog::AcceptMode", "acceptMode")]
		public QFileDialog.AcceptMode acceptMode {
			get { return Property("acceptMode").Value<QFileDialog.AcceptMode>(); }
			set { SetProperty("acceptMode", QVariant.FromValue<QFileDialog.AcceptMode>(value)); }
		}
		[Q_PROPERTY("bool", "readOnly")]
		public bool ReadOnly {
			get { return Property("readOnly").Value<bool>(); }
			set { SetProperty("readOnly", QVariant.FromValue<bool>(value)); }
		}
		[Q_PROPERTY("bool", "resolveSymlinks")]
		public bool ResolveSymlinks {
			get { return Property("resolveSymlinks").Value<bool>(); }
			set { SetProperty("resolveSymlinks", QVariant.FromValue<bool>(value)); }
		}
		[Q_PROPERTY("bool", "confirmOverwrite")]
		public bool ConfirmOverwrite {
			get { return Property("confirmOverwrite").Value<bool>(); }
			set { SetProperty("confirmOverwrite", QVariant.FromValue<bool>(value)); }
		}
		[Q_PROPERTY("QString", "defaultSuffix")]
		public string DefaultSuffix {
			get { return Property("defaultSuffix").Value<string>(); }
			set { SetProperty("defaultSuffix", QVariant.FromValue<string>(value)); }
		}
		// QFileDialog* QFileDialog(const QFileDialogArgs& arg1); >>>> NOT CONVERTED
		public QFileDialog(QWidget parent, int f) : this((Type) null) {
			CreateProxy();
			NewQFileDialog(parent,f);
		}
		[SmokeMethod("QFileDialog", "(QWidget*, Qt::WindowFlags)", "#$")]
		private void NewQFileDialog(QWidget parent, int f) {
			((QFileDialog) interceptor).NewQFileDialog(parent,f);
		}
		public QFileDialog(QWidget parent, string caption, string directory, string filter) : this((Type) null) {
			CreateProxy();
			NewQFileDialog(parent,caption,directory,filter);
		}
		[SmokeMethod("QFileDialog", "(QWidget*, const QString&, const QString&, const QString&)", "#$$$")]
		private void NewQFileDialog(QWidget parent, string caption, string directory, string filter) {
			((QFileDialog) interceptor).NewQFileDialog(parent,caption,directory,filter);
		}
		public QFileDialog(QWidget parent, string caption, string directory) : this((Type) null) {
			CreateProxy();
			NewQFileDialog(parent,caption,directory);
		}
		[SmokeMethod("QFileDialog", "(QWidget*, const QString&, const QString&)", "#$$")]
		private void NewQFileDialog(QWidget parent, string caption, string directory) {
			((QFileDialog) interceptor).NewQFileDialog(parent,caption,directory);
		}
		public QFileDialog(QWidget parent, string caption) : this((Type) null) {
			CreateProxy();
			NewQFileDialog(parent,caption);
		}
		[SmokeMethod("QFileDialog", "(QWidget*, const QString&)", "#$")]
		private void NewQFileDialog(QWidget parent, string caption) {
			((QFileDialog) interceptor).NewQFileDialog(parent,caption);
		}
		public QFileDialog(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQFileDialog(parent);
		}
		[SmokeMethod("QFileDialog", "(QWidget*)", "#")]
		private void NewQFileDialog(QWidget parent) {
			((QFileDialog) interceptor).NewQFileDialog(parent);
		}
		public QFileDialog() : this((Type) null) {
			CreateProxy();
			NewQFileDialog();
		}
		[SmokeMethod("QFileDialog", "()", "")]
		private void NewQFileDialog() {
			((QFileDialog) interceptor).NewQFileDialog();
		}
		[SmokeMethod("setDirectory", "(const QString&)", "$")]
		public void SetDirectory(string directory) {
			((QFileDialog) interceptor).SetDirectory(directory);
		}
		[SmokeMethod("setDirectory", "(const QDir&)", "#")]
		public void SetDirectory(QDir directory) {
			((QFileDialog) interceptor).SetDirectory(directory);
		}
		[SmokeMethod("directory", "() const", "")]
		public QDir Directory() {
			return ((QFileDialog) interceptor).Directory();
		}
		[SmokeMethod("selectFile", "(const QString&)", "$")]
		public void SelectFile(string filename) {
			((QFileDialog) interceptor).SelectFile(filename);
		}
		[SmokeMethod("selectedFiles", "() const", "")]
		public List<string> SelectedFiles() {
			return ((QFileDialog) interceptor).SelectedFiles();
		}
		[SmokeMethod("setFilter", "(const QString&)", "$")]
		public void SetFilter(string filter) {
			((QFileDialog) interceptor).SetFilter(filter);
		}
		[SmokeMethod("setFilters", "(const QStringList&)", "?")]
		public void SetFilters(List<string> filters) {
			((QFileDialog) interceptor).SetFilters(filters);
		}
		[SmokeMethod("filters", "() const", "")]
		public List<string> Filters() {
			return ((QFileDialog) interceptor).Filters();
		}
		[SmokeMethod("selectFilter", "(const QString&)", "$")]
		public void SelectFilter(string filter) {
			((QFileDialog) interceptor).SelectFilter(filter);
		}
		[SmokeMethod("selectedFilter", "() const", "")]
		public string SelectedFilter() {
			return ((QFileDialog) interceptor).SelectedFilter();
		}
		[SmokeMethod("isReadOnly", "() const", "")]
		public bool IsReadOnly() {
			return ((QFileDialog) interceptor).IsReadOnly();
		}
		[SmokeMethod("setHistory", "(const QStringList&)", "?")]
		public void SetHistory(List<string> paths) {
			((QFileDialog) interceptor).SetHistory(paths);
		}
		[SmokeMethod("history", "() const", "")]
		public List<string> History() {
			return ((QFileDialog) interceptor).History();
		}
		[SmokeMethod("setItemDelegate", "(QAbstractItemDelegate*)", "#")]
		public void SetItemDelegate(QAbstractItemDelegate arg1) {
			((QFileDialog) interceptor).SetItemDelegate(arg1);
		}
		[SmokeMethod("itemDelegate", "() const", "")]
		public QAbstractItemDelegate ItemDelegate() {
			return ((QFileDialog) interceptor).ItemDelegate();
		}
		[SmokeMethod("setIconProvider", "(QFileIconProvider*)", "#")]
		public void SetIconProvider(QFileIconProvider provider) {
			((QFileDialog) interceptor).SetIconProvider(provider);
		}
		[SmokeMethod("iconProvider", "() const", "")]
		public QFileIconProvider IconProvider() {
			return ((QFileDialog) interceptor).IconProvider();
		}
		[SmokeMethod("setLabelText", "(QFileDialog::DialogLabel, const QString&)", "$$")]
		public void SetLabelText(QFileDialog.DialogLabel label, string text) {
			((QFileDialog) interceptor).SetLabelText(label,text);
		}
		[SmokeMethod("labelText", "(QFileDialog::DialogLabel) const", "$")]
		public string LabelText(QFileDialog.DialogLabel label) {
			return ((QFileDialog) interceptor).LabelText(label);
		}
		[SmokeMethod("done", "(int)", "$")]
		protected new virtual void Done(int result) {
			((QFileDialog) interceptor).Done(result);
		}
		[SmokeMethod("accept", "()", "")]
		protected new virtual void Accept() {
			((QFileDialog) interceptor).Accept();
		}
		~QFileDialog() {
			DisposeQFileDialog();
		}
		public new void Dispose() {
			DisposeQFileDialog();
		}
		[SmokeMethod("~QFileDialog", "()", "")]
		private void DisposeQFileDialog() {
			((QFileDialog) interceptor).DisposeQFileDialog();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		public static string GetOpenFileName(QWidget parent, string caption, string dir, string filter, StringBuilder selectedFilter, int options) {
			return staticInterceptor.GetOpenFileName(parent,caption,dir,filter,selectedFilter,options);
		}
		public static string GetOpenFileName(QWidget parent, string caption, string dir, string filter, StringBuilder selectedFilter) {
			return staticInterceptor.GetOpenFileName(parent,caption,dir,filter,selectedFilter);
		}
		public static string GetOpenFileName(QWidget parent, string caption, string dir, string filter) {
			return staticInterceptor.GetOpenFileName(parent,caption,dir,filter);
		}
		public static string GetOpenFileName(QWidget parent, string caption, string dir) {
			return staticInterceptor.GetOpenFileName(parent,caption,dir);
		}
		public static string GetOpenFileName(QWidget parent, string caption) {
			return staticInterceptor.GetOpenFileName(parent,caption);
		}
		public static string GetOpenFileName(QWidget parent) {
			return staticInterceptor.GetOpenFileName(parent);
		}
		public static string GetOpenFileName() {
			return staticInterceptor.GetOpenFileName();
		}
		public static string GetSaveFileName(QWidget parent, string caption, string dir, string filter, StringBuilder selectedFilter, int options) {
			return staticInterceptor.GetSaveFileName(parent,caption,dir,filter,selectedFilter,options);
		}
		public static string GetSaveFileName(QWidget parent, string caption, string dir, string filter, StringBuilder selectedFilter) {
			return staticInterceptor.GetSaveFileName(parent,caption,dir,filter,selectedFilter);
		}
		public static string GetSaveFileName(QWidget parent, string caption, string dir, string filter) {
			return staticInterceptor.GetSaveFileName(parent,caption,dir,filter);
		}
		public static string GetSaveFileName(QWidget parent, string caption, string dir) {
			return staticInterceptor.GetSaveFileName(parent,caption,dir);
		}
		public static string GetSaveFileName(QWidget parent, string caption) {
			return staticInterceptor.GetSaveFileName(parent,caption);
		}
		public static string GetSaveFileName(QWidget parent) {
			return staticInterceptor.GetSaveFileName(parent);
		}
		public static string GetSaveFileName() {
			return staticInterceptor.GetSaveFileName();
		}
		public static string GetExistingDirectory(QWidget parent, string caption, string dir, int options) {
			return staticInterceptor.GetExistingDirectory(parent,caption,dir,options);
		}
		public static string GetExistingDirectory(QWidget parent, string caption, string dir) {
			return staticInterceptor.GetExistingDirectory(parent,caption,dir);
		}
		public static string GetExistingDirectory(QWidget parent, string caption) {
			return staticInterceptor.GetExistingDirectory(parent,caption);
		}
		public static string GetExistingDirectory(QWidget parent) {
			return staticInterceptor.GetExistingDirectory(parent);
		}
		public static string GetExistingDirectory() {
			return staticInterceptor.GetExistingDirectory();
		}
		public static List<string> GetOpenFileNames(QWidget parent, string caption, string dir, string filter, StringBuilder selectedFilter, int options) {
			return staticInterceptor.GetOpenFileNames(parent,caption,dir,filter,selectedFilter,options);
		}
		public static List<string> GetOpenFileNames(QWidget parent, string caption, string dir, string filter, StringBuilder selectedFilter) {
			return staticInterceptor.GetOpenFileNames(parent,caption,dir,filter,selectedFilter);
		}
		public static List<string> GetOpenFileNames(QWidget parent, string caption, string dir, string filter) {
			return staticInterceptor.GetOpenFileNames(parent,caption,dir,filter);
		}
		public static List<string> GetOpenFileNames(QWidget parent, string caption, string dir) {
			return staticInterceptor.GetOpenFileNames(parent,caption,dir);
		}
		public static List<string> GetOpenFileNames(QWidget parent, string caption) {
			return staticInterceptor.GetOpenFileNames(parent,caption);
		}
		public static List<string> GetOpenFileNames(QWidget parent) {
			return staticInterceptor.GetOpenFileNames(parent);
		}
		public static List<string> GetOpenFileNames() {
			return staticInterceptor.GetOpenFileNames();
		}
		protected new IQFileDialogSignals Emit {
			get { return (IQFileDialogSignals) Q_EMIT; }
		}
	}

	public interface IQFileDialogSignals : IQDialogSignals {
		[Q_SIGNAL("void filesSelected(const QStringList&)")]
		void FilesSelected(List<string> files);
		[Q_SIGNAL("void currentChanged(const QString&)")]
		void CurrentChanged(string path);
	}
}
