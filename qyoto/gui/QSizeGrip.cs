//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QSizeGrip")]
	public class QSizeGrip : QWidget, IDisposable {
 		protected QSizeGrip(Type dummy) : base((Type) null) {}
		[SmokeClass("QSizeGrip")]
		interface IQSizeGripProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSizeGrip), this);
			_interceptor = (QSizeGrip) realProxy.GetTransparentProxy();
		}
		private QSizeGrip ProxyQSizeGrip() {
			return (QSizeGrip) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QSizeGrip() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSizeGripProxy), null);
			_staticInterceptor = (IQSizeGripProxy) realProxy.GetTransparentProxy();
		}
		private static IQSizeGripProxy StaticQSizeGrip() {
			return (IQSizeGripProxy) _staticInterceptor;
		}
		public QSizeGrip(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQSizeGrip(parent);
		}
		[SmokeMethod("QSizeGrip", "(QWidget*)", "#")]
		private void NewQSizeGrip(QWidget parent) {
			ProxyQSizeGrip().NewQSizeGrip(parent);
		}
		[SmokeMethod("sizeHint", "() const", "")]
		public override QSize SizeHint() {
			return ProxyQSizeGrip().SizeHint();
		}
		[SmokeMethod("setVisible", "(bool)", "$")]
		public override void SetVisible(bool arg1) {
			ProxyQSizeGrip().SetVisible(arg1);
		}
		[SmokeMethod("paintEvent", "(QPaintEvent*)", "#")]
		protected override void PaintEvent(QPaintEvent arg1) {
			ProxyQSizeGrip().PaintEvent(arg1);
		}
		[SmokeMethod("mousePressEvent", "(QMouseEvent*)", "#")]
		protected override void MousePressEvent(QMouseEvent arg1) {
			ProxyQSizeGrip().MousePressEvent(arg1);
		}
		[SmokeMethod("mouseMoveEvent", "(QMouseEvent*)", "#")]
		protected override void MouseMoveEvent(QMouseEvent arg1) {
			ProxyQSizeGrip().MouseMoveEvent(arg1);
		}
		[SmokeMethod("eventFilter", "(QObject*, QEvent*)", "##")]
		protected new virtual bool EventFilter(QObject arg1, QEvent arg2) {
			return ProxyQSizeGrip().EventFilter(arg1,arg2);
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		protected override bool Event(QEvent arg1) {
			return ProxyQSizeGrip().Event(arg1);
		}
		~QSizeGrip() {
			DisposeQSizeGrip();
		}
		public new void Dispose() {
			DisposeQSizeGrip();
		}
		[SmokeMethod("~QSizeGrip", "()", "")]
		private void DisposeQSizeGrip() {
			ProxyQSizeGrip().DisposeQSizeGrip();
		}
		public static string Tr(string s, string c) {
			return StaticQSizeGrip().Tr(s,c);
		}
		public static string Tr(string s) {
			return StaticQSizeGrip().Tr(s);
		}
		protected new IQSizeGripSignals Emit {
			get { return (IQSizeGripSignals) Q_EMIT; }
		}
	}

	public interface IQSizeGripSignals : IQWidgetSignals {
	}
}
