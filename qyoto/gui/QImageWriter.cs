//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	[SmokeClass("QImageWriter")]
	public class QImageWriter : MarshalByRefObject, IDisposable {
		protected QImageWriter interceptor = null;
		private IntPtr smokeObject;
		protected QImageWriter(Type dummy) {}
		[SmokeClass("QImageWriter")]
		interface IQImageWriterProxy {
			[SmokeMethod("supportedImageFormats", "()", "")]
			List<QByteArray> SupportedImageFormats();
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QImageWriter), this);
			interceptor = (QImageWriter) realProxy.GetTransparentProxy();
		}
		private static IQImageWriterProxy staticInterceptor = null;
		static QImageWriter() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQImageWriterProxy), null);
			staticInterceptor = (IQImageWriterProxy) realProxy.GetTransparentProxy();
		}
		public enum ImageWriterError {
			UnknownError = 0,
			DeviceError = 1,
			UnsupportedFormatError = 2,
		}
		public QImageWriter() : this((Type) null) {
			CreateProxy();
			NewQImageWriter();
		}
		[SmokeMethod("QImageWriter", "()", "")]
		private void NewQImageWriter() {
			((QImageWriter) interceptor).NewQImageWriter();
		}
		public QImageWriter(QIODevice device, QByteArray format) : this((Type) null) {
			CreateProxy();
			NewQImageWriter(device,format);
		}
		[SmokeMethod("QImageWriter", "(QIODevice*, const QByteArray&)", "##")]
		private void NewQImageWriter(QIODevice device, QByteArray format) {
			((QImageWriter) interceptor).NewQImageWriter(device,format);
		}
		public QImageWriter(string fileName, QByteArray format) : this((Type) null) {
			CreateProxy();
			NewQImageWriter(fileName,format);
		}
		[SmokeMethod("QImageWriter", "(const QString&, const QByteArray&)", "$#")]
		private void NewQImageWriter(string fileName, QByteArray format) {
			((QImageWriter) interceptor).NewQImageWriter(fileName,format);
		}
		public QImageWriter(string fileName) : this((Type) null) {
			CreateProxy();
			NewQImageWriter(fileName);
		}
		[SmokeMethod("QImageWriter", "(const QString&)", "$")]
		private void NewQImageWriter(string fileName) {
			((QImageWriter) interceptor).NewQImageWriter(fileName);
		}
		[SmokeMethod("setFormat", "(const QByteArray&)", "#")]
		public void SetFormat(QByteArray format) {
			((QImageWriter) interceptor).SetFormat(format);
		}
		[SmokeMethod("format", "() const", "")]
		public QByteArray Format() {
			return ((QImageWriter) interceptor).Format();
		}
		[SmokeMethod("setDevice", "(QIODevice*)", "#")]
		public void SetDevice(QIODevice device) {
			((QImageWriter) interceptor).SetDevice(device);
		}
		[SmokeMethod("device", "() const", "")]
		public QIODevice Device() {
			return ((QImageWriter) interceptor).Device();
		}
		[SmokeMethod("setFileName", "(const QString&)", "$")]
		public void SetFileName(string fileName) {
			((QImageWriter) interceptor).SetFileName(fileName);
		}
		[SmokeMethod("fileName", "() const", "")]
		public string FileName() {
			return ((QImageWriter) interceptor).FileName();
		}
		[SmokeMethod("setQuality", "(int)", "$")]
		public void SetQuality(int quality) {
			((QImageWriter) interceptor).SetQuality(quality);
		}
		[SmokeMethod("quality", "() const", "")]
		public int Quality() {
			return ((QImageWriter) interceptor).Quality();
		}
		[SmokeMethod("setGamma", "(float)", "$")]
		public void SetGamma(float gamma) {
			((QImageWriter) interceptor).SetGamma(gamma);
		}
		[SmokeMethod("gamma", "() const", "")]
		public float Gamma() {
			return ((QImageWriter) interceptor).Gamma();
		}
		[SmokeMethod("setDescription", "(const QString&)", "$")]
		public void SetDescription(string description) {
			((QImageWriter) interceptor).SetDescription(description);
		}
		[SmokeMethod("description", "() const", "")]
		public string Description() {
			return ((QImageWriter) interceptor).Description();
		}
		[SmokeMethod("setText", "(const QString&, const QString&)", "$$")]
		public void SetText(string key, string text) {
			((QImageWriter) interceptor).SetText(key,text);
		}
		[SmokeMethod("canWrite", "() const", "")]
		public bool CanWrite() {
			return ((QImageWriter) interceptor).CanWrite();
		}
		[SmokeMethod("write", "(const QImage&)", "#")]
		public bool Write(QImage image) {
			return ((QImageWriter) interceptor).Write(image);
		}
		[SmokeMethod("error", "() const", "")]
		public QImageWriter.ImageWriterError Error() {
			return ((QImageWriter) interceptor).Error();
		}
		[SmokeMethod("errorString", "() const", "")]
		public string ErrorString() {
			return ((QImageWriter) interceptor).ErrorString();
		}
		[SmokeMethod("supportsOption", "(QImageIOHandler::ImageOption) const", "$")]
		public bool SupportsOption(QImageIOHandler.ImageOption option) {
			return ((QImageWriter) interceptor).SupportsOption(option);
		}
		~QImageWriter() {
			DisposeQImageWriter();
		}
		public void Dispose() {
			DisposeQImageWriter();
		}
		[SmokeMethod("~QImageWriter", "()", "")]
		private void DisposeQImageWriter() {
			((QImageWriter) interceptor).DisposeQImageWriter();
		}
		public static List<QByteArray> SupportedImageFormats() {
			return staticInterceptor.SupportedImageFormats();
		}
	}
}
