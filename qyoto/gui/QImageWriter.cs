//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;
	using System.Collections.Generic;

	[SmokeClass("QImageWriter")]
	public class QImageWriter : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
		protected QImageWriter(Type dummy) {}
		interface IQImageWriterProxy {
			List<QByteArray> SupportedImageFormats();
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QImageWriter), this);
			_interceptor = (QImageWriter) realProxy.GetTransparentProxy();
		}
		private QImageWriter ProxyQImageWriter() {
			return (QImageWriter) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QImageWriter() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQImageWriterProxy), null);
			_staticInterceptor = (IQImageWriterProxy) realProxy.GetTransparentProxy();
		}
		private static IQImageWriterProxy StaticQImageWriter() {
			return (IQImageWriterProxy) _staticInterceptor;
		}

		public enum ImageWriterError {
			UnknownError = 0,
			DeviceError = 1,
			UnsupportedFormatError = 2,
		}
		public QImageWriter() : this((Type) null) {
			CreateProxy();
			NewQImageWriter();
		}
		[SmokeMethod("QImageWriter()")]
		private void NewQImageWriter() {
			ProxyQImageWriter().NewQImageWriter();
		}
		public QImageWriter(IQIODevice device, QByteArray format) : this((Type) null) {
			CreateProxy();
			NewQImageWriter(device,format);
		}
		[SmokeMethod("QImageWriter(QIODevice*, const QByteArray&)")]
		private void NewQImageWriter(IQIODevice device, QByteArray format) {
			ProxyQImageWriter().NewQImageWriter(device,format);
		}
		public QImageWriter(string fileName, QByteArray format) : this((Type) null) {
			CreateProxy();
			NewQImageWriter(fileName,format);
		}
		[SmokeMethod("QImageWriter(const QString&, const QByteArray&)")]
		private void NewQImageWriter(string fileName, QByteArray format) {
			ProxyQImageWriter().NewQImageWriter(fileName,format);
		}
		public QImageWriter(string fileName) : this((Type) null) {
			CreateProxy();
			NewQImageWriter(fileName);
		}
		[SmokeMethod("QImageWriter(const QString&)")]
		private void NewQImageWriter(string fileName) {
			ProxyQImageWriter().NewQImageWriter(fileName);
		}
		[SmokeMethod("setFormat(const QByteArray&)")]
		public void SetFormat(QByteArray format) {
			ProxyQImageWriter().SetFormat(format);
		}
		[SmokeMethod("format() const")]
		public QByteArray Format() {
			return ProxyQImageWriter().Format();
		}
		[SmokeMethod("setDevice(QIODevice*)")]
		public void SetDevice(IQIODevice device) {
			ProxyQImageWriter().SetDevice(device);
		}
		[SmokeMethod("device() const")]
		public IQIODevice Device() {
			return ProxyQImageWriter().Device();
		}
		[SmokeMethod("setFileName(const QString&)")]
		public void SetFileName(string fileName) {
			ProxyQImageWriter().SetFileName(fileName);
		}
		[SmokeMethod("fileName() const")]
		public string FileName() {
			return ProxyQImageWriter().FileName();
		}
		[SmokeMethod("setQuality(int)")]
		public void SetQuality(int quality) {
			ProxyQImageWriter().SetQuality(quality);
		}
		[SmokeMethod("quality() const")]
		public int Quality() {
			return ProxyQImageWriter().Quality();
		}
		[SmokeMethod("setGamma(float)")]
		public void SetGamma(float gamma) {
			ProxyQImageWriter().SetGamma(gamma);
		}
		[SmokeMethod("gamma() const")]
		public float Gamma() {
			return ProxyQImageWriter().Gamma();
		}
		[SmokeMethod("setDescription(const QString&)")]
		public void SetDescription(string description) {
			ProxyQImageWriter().SetDescription(description);
		}
		[SmokeMethod("description() const")]
		public string Description() {
			return ProxyQImageWriter().Description();
		}
		[SmokeMethod("setText(const QString&, const QString&)")]
		public void SetText(string key, string text) {
			ProxyQImageWriter().SetText(key,text);
		}
		[SmokeMethod("canWrite() const")]
		public bool CanWrite() {
			return ProxyQImageWriter().CanWrite();
		}
		[SmokeMethod("write(const QImage&)")]
		public bool Write(QImage image) {
			return ProxyQImageWriter().Write(image);
		}
		[SmokeMethod("error() const")]
		public QImageWriter.ImageWriterError Error() {
			return ProxyQImageWriter().Error();
		}
		[SmokeMethod("errorString() const")]
		public string ErrorString() {
			return ProxyQImageWriter().ErrorString();
		}
		[SmokeMethod("supportsOption(QImageIOHandler::ImageOption) const")]
		public bool SupportsOption(QImageIOHandler.ImageOption option) {
			return ProxyQImageWriter().SupportsOption(option);
		}
		[SmokeMethod("supportedImageFormats()")]
		public static List<QByteArray> SupportedImageFormats() {
			return StaticQImageWriter().SupportedImageFormats();
		}
		~QImageWriter() {
			DisposeQImageWriter();
		}
		public void Dispose() {
			DisposeQImageWriter();
		}
		[SmokeMethod("~QImageWriter()")]
		private void DisposeQImageWriter() {
			ProxyQImageWriter().DisposeQImageWriter();
		}
	}
}
