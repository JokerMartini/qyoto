//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;

	[SmokeClass("QAccessibleEvent")]
	public class QAccessibleEvent : QEvent, IDisposable {
 		protected QAccessibleEvent(Type dummy) : base((Type) null) {}
		interface IQAccessibleEventProxy {
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QAccessibleEvent), this);
			_interceptor = (QAccessibleEvent) realProxy.GetTransparentProxy();
		}
		private QAccessibleEvent ProxyQAccessibleEvent() {
			return (QAccessibleEvent) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QAccessibleEvent() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQAccessibleEventProxy), null);
			_staticInterceptor = (IQAccessibleEventProxy) realProxy.GetTransparentProxy();
		}
		private static IQAccessibleEventProxy StaticQAccessibleEvent() {
			return (IQAccessibleEventProxy) _staticInterceptor;
		}

		public QAccessibleEvent(QEvent.TypeOf type, int child) : this((Type) null) {
			CreateProxy();
			NewQAccessibleEvent(type,child);
		}
		[SmokeMethod("QAccessibleEvent", "(QEvent::Type, int)", "$$")]
		private void NewQAccessibleEvent(QEvent.TypeOf type, int child) {
			ProxyQAccessibleEvent().NewQAccessibleEvent(type,child);
		}
		[SmokeMethod("child", "() const", "")]
		public int Child() {
			return ProxyQAccessibleEvent().Child();
		}
		[SmokeMethod("value", "() const", "")]
		public string Value() {
			return ProxyQAccessibleEvent().Value();
		}
		[SmokeMethod("setValue", "(const QString&)", "$")]
		public void SetValue(string aText) {
			ProxyQAccessibleEvent().SetValue(aText);
		}
		~QAccessibleEvent() {
			DisposeQAccessibleEvent();
		}
		public new void Dispose() {
			DisposeQAccessibleEvent();
		}
		[SmokeMethod("~QAccessibleEvent", "()", "")]
		private void DisposeQAccessibleEvent() {
			ProxyQAccessibleEvent().DisposeQAccessibleEvent();
		}
	}
}
