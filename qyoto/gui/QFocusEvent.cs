//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QFocusEvent")]
	public class QFocusEvent : QEvent, IDisposable {
 		protected QFocusEvent(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QFocusEvent), this);
			interceptor = (QFocusEvent) realProxy.GetTransparentProxy();
		}
		public QFocusEvent(QEvent.TypeOf type, Qt.FocusReason reason) : this((Type) null) {
			CreateProxy();
			NewQFocusEvent(type,reason);
		}
		[SmokeMethod("QFocusEvent", "(QEvent::Type, Qt::FocusReason)", "$$")]
		private void NewQFocusEvent(QEvent.TypeOf type, Qt.FocusReason reason) {
			((QFocusEvent) interceptor).NewQFocusEvent(type,reason);
		}
		public QFocusEvent(QEvent.TypeOf type) : this((Type) null) {
			CreateProxy();
			NewQFocusEvent(type);
		}
		[SmokeMethod("QFocusEvent", "(QEvent::Type)", "$")]
		private void NewQFocusEvent(QEvent.TypeOf type) {
			((QFocusEvent) interceptor).NewQFocusEvent(type);
		}
		[SmokeMethod("gotFocus", "() const", "")]
		public bool GotFocus() {
			return ((QFocusEvent) interceptor).GotFocus();
		}
		[SmokeMethod("lostFocus", "() const", "")]
		public bool LostFocus() {
			return ((QFocusEvent) interceptor).LostFocus();
		}
		[SmokeMethod("reason", "()", "")]
		public Qt.FocusReason Reason() {
			return ((QFocusEvent) interceptor).Reason();
		}
		~QFocusEvent() {
			DisposeQFocusEvent();
		}
		public new void Dispose() {
			DisposeQFocusEvent();
		}
		[SmokeMethod("~QFocusEvent", "()", "")]
		private void DisposeQFocusEvent() {
			((QFocusEvent) interceptor).DisposeQFocusEvent();
		}
	}
}
