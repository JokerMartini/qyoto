//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	/// See <see cref="IQListWidgetSignals"></see> for signals emitted by QListWidget
	[SmokeClass("QListWidget")]
	public class QListWidget : QListView, IDisposable {
 		protected QListWidget(Type dummy) : base((Type) null) {}
		[SmokeClass("QListWidget")]
		interface IQListWidgetProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QListWidget), this);
			interceptor = (QListWidget) realProxy.GetTransparentProxy();
		}
		private static IQListWidgetProxy staticInterceptor = null;
		static QListWidget() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQListWidgetProxy), null);
			staticInterceptor = (IQListWidgetProxy) realProxy.GetTransparentProxy();
		}
		[Q_PROPERTY("int", "count")]
		public int Count {
			[SmokeMethod("count", "()", "")]
			get { return ((QListWidget) interceptor).Count; }
		}
		[Q_PROPERTY("int", "currentRow")]
		public int CurrentRow {
			[SmokeMethod("currentRow", "()", "")]
			get { return ((QListWidget) interceptor).CurrentRow; }
			[SmokeMethod("setCurrentRow", "(int)", "$")]
			set { ((QListWidget) interceptor).CurrentRow = value; }
		}
		[Q_PROPERTY("bool", "sortingEnabled")]
		public bool SortingEnabled {
			[SmokeMethod("isSortingEnabled", "()", "")]
			get { return ((QListWidget) interceptor).SortingEnabled; }
			[SmokeMethod("setSortingEnabled", "(bool)", "$")]
			set { ((QListWidget) interceptor).SortingEnabled = value; }
		}
		public QListWidget(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQListWidget(parent);
		}
		[SmokeMethod("QListWidget", "(QWidget*)", "#")]
		private void NewQListWidget(QWidget parent) {
			((QListWidget) interceptor).NewQListWidget(parent);
		}
		public QListWidget() : this((Type) null) {
			CreateProxy();
			NewQListWidget();
		}
		[SmokeMethod("QListWidget", "()", "")]
		private void NewQListWidget() {
			((QListWidget) interceptor).NewQListWidget();
		}
		[SmokeMethod("item", "(int) const", "$")]
		public QListWidgetItem Item(int row) {
			return ((QListWidget) interceptor).Item(row);
		}
		[SmokeMethod("row", "(const QListWidgetItem*) const", "#")]
		public int Row(QListWidgetItem item) {
			return ((QListWidget) interceptor).Row(item);
		}
		[SmokeMethod("insertItem", "(int, QListWidgetItem*)", "$#")]
		public void InsertItem(int row, QListWidgetItem item) {
			((QListWidget) interceptor).InsertItem(row,item);
		}
		[SmokeMethod("insertItem", "(int, const QString&)", "$$")]
		public void InsertItem(int row, string label) {
			((QListWidget) interceptor).InsertItem(row,label);
		}
		[SmokeMethod("insertItems", "(int, const QStringList&)", "$?")]
		public void InsertItems(int row, List<string> labels) {
			((QListWidget) interceptor).InsertItems(row,labels);
		}
		[SmokeMethod("addItem", "(const QString&)", "$")]
		public void AddItem(string label) {
			((QListWidget) interceptor).AddItem(label);
		}
		[SmokeMethod("addItem", "(QListWidgetItem*)", "#")]
		public void AddItem(QListWidgetItem item) {
			((QListWidget) interceptor).AddItem(item);
		}
		[SmokeMethod("addItems", "(const QStringList&)", "?")]
		public void AddItems(List<string> labels) {
			((QListWidget) interceptor).AddItems(labels);
		}
		[SmokeMethod("takeItem", "(int)", "$")]
		public QListWidgetItem TakeItem(int row) {
			return ((QListWidget) interceptor).TakeItem(row);
		}
		[SmokeMethod("currentItem", "() const", "")]
		public QListWidgetItem CurrentItem() {
			return ((QListWidget) interceptor).CurrentItem();
		}
		[SmokeMethod("setCurrentItem", "(QListWidgetItem*)", "#")]
		public void SetCurrentItem(QListWidgetItem item) {
			((QListWidget) interceptor).SetCurrentItem(item);
		}
		[SmokeMethod("itemAt", "(const QPoint&) const", "#")]
		public QListWidgetItem ItemAt(QPoint p) {
			return ((QListWidget) interceptor).ItemAt(p);
		}
		[SmokeMethod("itemAt", "(int, int) const", "$$")]
		public QListWidgetItem ItemAt(int x, int y) {
			return ((QListWidget) interceptor).ItemAt(x,y);
		}
		[SmokeMethod("visualItemRect", "(const QListWidgetItem*) const", "#")]
		public QRect VisualItemRect(QListWidgetItem item) {
			return ((QListWidget) interceptor).VisualItemRect(item);
		}
		[SmokeMethod("sortItems", "(Qt::SortOrder)", "$")]
		public void SortItems(Qt.SortOrder order) {
			((QListWidget) interceptor).SortItems(order);
		}
		[SmokeMethod("sortItems", "()", "")]
		public void SortItems() {
			((QListWidget) interceptor).SortItems();
		}
		[SmokeMethod("isSortingEnabled", "() const", "")]
		public bool IsSortingEnabled() {
			return ((QListWidget) interceptor).IsSortingEnabled();
		}
		[SmokeMethod("editItem", "(QListWidgetItem*)", "#")]
		public void EditItem(QListWidgetItem item) {
			((QListWidget) interceptor).EditItem(item);
		}
		[SmokeMethod("openPersistentEditor", "(QListWidgetItem*)", "#")]
		public void OpenPersistentEditor(QListWidgetItem item) {
			((QListWidget) interceptor).OpenPersistentEditor(item);
		}
		[SmokeMethod("closePersistentEditor", "(QListWidgetItem*)", "#")]
		public void ClosePersistentEditor(QListWidgetItem item) {
			((QListWidget) interceptor).ClosePersistentEditor(item);
		}
		[SmokeMethod("itemWidget", "(QListWidgetItem*) const", "#")]
		public QWidget ItemWidget(QListWidgetItem item) {
			return ((QListWidget) interceptor).ItemWidget(item);
		}
		[SmokeMethod("setItemWidget", "(QListWidgetItem*, QWidget*)", "##")]
		public void SetItemWidget(QListWidgetItem item, QWidget widget) {
			((QListWidget) interceptor).SetItemWidget(item,widget);
		}
		[SmokeMethod("isItemSelected", "(const QListWidgetItem*) const", "#")]
		public bool IsItemSelected(QListWidgetItem item) {
			return ((QListWidget) interceptor).IsItemSelected(item);
		}
		[SmokeMethod("setItemSelected", "(const QListWidgetItem*, bool)", "#$")]
		public void SetItemSelected(QListWidgetItem item, bool select) {
			((QListWidget) interceptor).SetItemSelected(item,select);
		}
		[SmokeMethod("selectedItems", "() const", "")]
		public List<QListWidgetItem> SelectedItems() {
			return ((QListWidget) interceptor).SelectedItems();
		}
		[SmokeMethod("findItems", "(const QString&, Qt::MatchFlags) const", "$$")]
		public List<QListWidgetItem> FindItems(string text, int flags) {
			return ((QListWidget) interceptor).FindItems(text,flags);
		}
		[SmokeMethod("isItemHidden", "(const QListWidgetItem*) const", "#")]
		public bool IsItemHidden(QListWidgetItem item) {
			return ((QListWidget) interceptor).IsItemHidden(item);
		}
		[SmokeMethod("setItemHidden", "(const QListWidgetItem*, bool)", "#$")]
		public void SetItemHidden(QListWidgetItem item, bool hide) {
			((QListWidget) interceptor).SetItemHidden(item,hide);
		}
		[SmokeMethod("dropEvent", "(QDropEvent*)", "#")]
		public new virtual void DropEvent(QDropEvent arg1) {
			((QListWidget) interceptor).DropEvent(arg1);
		}
		[Q_SLOT("void scrollToItem(const QListWidgetItem*, QAbstractItemView::ScrollHint)")]
		[SmokeMethod("scrollToItem", "(const QListWidgetItem*, QAbstractItemView::ScrollHint)", "#$")]
		public void ScrollToItem(QListWidgetItem item, QAbstractItemView.ScrollHint hint) {
			((QListWidget) interceptor).ScrollToItem(item,hint);
		}
		[Q_SLOT("void scrollToItem(const QListWidgetItem*)")]
		[SmokeMethod("scrollToItem", "(const QListWidgetItem*)", "#")]
		public void ScrollToItem(QListWidgetItem item) {
			((QListWidget) interceptor).ScrollToItem(item);
		}
		[Q_SLOT("void clear()")]
		[SmokeMethod("clear", "()", "")]
		public void Clear() {
			((QListWidget) interceptor).Clear();
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		protected override bool Event(QEvent e) {
			return ((QListWidget) interceptor).Event(e);
		}
		[SmokeMethod("mimeTypes", "() const", "")]
		protected virtual List<string> MimeTypes() {
			return ((QListWidget) interceptor).MimeTypes();
		}
		[SmokeMethod("mimeData", "(const QList<QListWidgetItem*>) const", "?")]
		protected virtual QMimeData MimeData(List<QListWidgetItem> items) {
			return ((QListWidget) interceptor).MimeData(items);
		}
		[SmokeMethod("dropMimeData", "(int, const QMimeData*, Qt::DropAction)", "$#$")]
		protected virtual bool DropMimeData(int index, QMimeData data, Qt.DropAction action) {
			return ((QListWidget) interceptor).DropMimeData(index,data,action);
		}
		[SmokeMethod("supportedDropActions", "() const", "")]
		protected virtual int SupportedDropActions() {
			return ((QListWidget) interceptor).SupportedDropActions();
		}
		[SmokeMethod("items", "(const QMimeData*) const", "#")]
		protected List<QListWidgetItem> Items(QMimeData data) {
			return ((QListWidget) interceptor).Items(data);
		}
		[SmokeMethod("indexFromItem", "(QListWidgetItem*) const", "#")]
		protected QModelIndex IndexFromItem(QListWidgetItem item) {
			return ((QListWidget) interceptor).IndexFromItem(item);
		}
		[SmokeMethod("itemFromIndex", "(const QModelIndex&) const", "#")]
		protected QListWidgetItem ItemFromIndex(QModelIndex index) {
			return ((QListWidget) interceptor).ItemFromIndex(index);
		}
		~QListWidget() {
			DisposeQListWidget();
		}
		public new void Dispose() {
			DisposeQListWidget();
		}
		[SmokeMethod("~QListWidget", "()", "")]
		private void DisposeQListWidget() {
			((QListWidget) interceptor).DisposeQListWidget();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQListWidgetSignals Emit {
			get { return (IQListWidgetSignals) Q_EMIT; }
		}
	}

	public interface IQListWidgetSignals : IQListViewSignals {
		[Q_SIGNAL("void itemPressed(QListWidgetItem*)")]
		void ItemPressed(QListWidgetItem item);
		[Q_SIGNAL("void itemClicked(QListWidgetItem*)")]
		void ItemClicked(QListWidgetItem item);
		[Q_SIGNAL("void itemDoubleClicked(QListWidgetItem*)")]
		void ItemDoubleClicked(QListWidgetItem item);
		[Q_SIGNAL("void itemActivated(QListWidgetItem*)")]
		void ItemActivated(QListWidgetItem item);
		[Q_SIGNAL("void itemEntered(QListWidgetItem*)")]
		void ItemEntered(QListWidgetItem item);
		[Q_SIGNAL("void itemChanged(QListWidgetItem*)")]
		void ItemChanged(QListWidgetItem item);
		[Q_SIGNAL("void currentItemChanged(QListWidgetItem*, QListWidgetItem*)")]
		void CurrentItemChanged(QListWidgetItem current, QListWidgetItem previous);
		[Q_SIGNAL("void currentTextChanged(const QString&)")]
		void CurrentTextChanged(string currentText);
		[Q_SIGNAL("void currentRowChanged(int)")]
		void CurrentRowChanged(int currentRow);
		[Q_SIGNAL("void itemSelectionChanged()")]
		void ItemSelectionChanged();
	}
}
