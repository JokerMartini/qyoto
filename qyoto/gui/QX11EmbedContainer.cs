//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	/// See <see cref="IQX11EmbedContainerSignals"></see> for signals emitted by QX11EmbedContainer
	[SmokeClass("QX11EmbedContainer")]
	public class QX11EmbedContainer : QWidget, IDisposable {
 		protected QX11EmbedContainer(Type dummy) : base((Type) null) {}
		[SmokeClass("QX11EmbedContainer")]
		interface IQX11EmbedContainerProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QX11EmbedContainer), this);
			interceptor = (QX11EmbedContainer) realProxy.GetTransparentProxy();
		}
		private static IQX11EmbedContainerProxy staticInterceptor = null;
		static QX11EmbedContainer() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQX11EmbedContainerProxy), null);
			staticInterceptor = (IQX11EmbedContainerProxy) realProxy.GetTransparentProxy();
		}
		public enum Error {
			Unknown = 0,
			Internal = 1,
			InvalidWindowID = 2,
		}
		// bool x11Event(XEvent* arg1); >>>> NOT CONVERTED
		public QX11EmbedContainer(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQX11EmbedContainer(parent);
		}
		[SmokeMethod("QX11EmbedContainer", "(QWidget*)", "#")]
		private void NewQX11EmbedContainer(QWidget parent) {
			((QX11EmbedContainer) interceptor).NewQX11EmbedContainer(parent);
		}
		public QX11EmbedContainer() : this((Type) null) {
			CreateProxy();
			NewQX11EmbedContainer();
		}
		[SmokeMethod("QX11EmbedContainer", "()", "")]
		private void NewQX11EmbedContainer() {
			((QX11EmbedContainer) interceptor).NewQX11EmbedContainer();
		}
		[SmokeMethod("embedClient", "(WId)", "$")]
		public void EmbedClient(ulong id) {
			((QX11EmbedContainer) interceptor).EmbedClient(id);
		}
		[SmokeMethod("discardClient", "()", "")]
		public void DiscardClient() {
			((QX11EmbedContainer) interceptor).DiscardClient();
		}
		[SmokeMethod("clientWinId", "() const", "")]
		public ulong ClientWinId() {
			return ((QX11EmbedContainer) interceptor).ClientWinId();
		}
		[SmokeMethod("minimumSizeHint", "() const", "")]
		public override QSize MinimumSizeHint() {
			return ((QX11EmbedContainer) interceptor).MinimumSizeHint();
		}
		[SmokeMethod("error", "() const", "")]
		public QX11EmbedContainer.Error error() {
			return ((QX11EmbedContainer) interceptor).error();
		}
		[SmokeMethod("eventFilter", "(QObject*, QEvent*)", "##")]
		protected new virtual bool EventFilter(QObject arg1, QEvent arg2) {
			return ((QX11EmbedContainer) interceptor).EventFilter(arg1,arg2);
		}
		[SmokeMethod("paintEvent", "(QPaintEvent*)", "#")]
		protected override void PaintEvent(QPaintEvent e) {
			((QX11EmbedContainer) interceptor).PaintEvent(e);
		}
		[SmokeMethod("resizeEvent", "(QResizeEvent*)", "#")]
		protected override void ResizeEvent(QResizeEvent arg1) {
			((QX11EmbedContainer) interceptor).ResizeEvent(arg1);
		}
		[SmokeMethod("showEvent", "(QShowEvent*)", "#")]
		protected override void ShowEvent(QShowEvent arg1) {
			((QX11EmbedContainer) interceptor).ShowEvent(arg1);
		}
		[SmokeMethod("hideEvent", "(QHideEvent*)", "#")]
		protected override void HideEvent(QHideEvent arg1) {
			((QX11EmbedContainer) interceptor).HideEvent(arg1);
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		protected override bool Event(QEvent arg1) {
			return ((QX11EmbedContainer) interceptor).Event(arg1);
		}
		~QX11EmbedContainer() {
			DisposeQX11EmbedContainer();
		}
		public new void Dispose() {
			DisposeQX11EmbedContainer();
		}
		[SmokeMethod("~QX11EmbedContainer", "()", "")]
		private void DisposeQX11EmbedContainer() {
			((QX11EmbedContainer) interceptor).DisposeQX11EmbedContainer();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQX11EmbedContainerSignals Emit {
			get { return (IQX11EmbedContainerSignals) Q_EMIT; }
		}
	}

	public interface IQX11EmbedContainerSignals : IQWidgetSignals {
		[Q_SIGNAL("void clientIsEmbedded()")]
		void ClientIsEmbedded();
		[Q_SIGNAL("void clientClosed()")]
		void ClientClosed();
		[Q_SIGNAL("void error(QX11EmbedContainer::Error)")]
		void Error(QX11EmbedContainer.Error arg1);
	}
}
