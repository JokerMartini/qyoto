//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	/// See <see cref="IQButtonGroupSignals"></see> for signals emitted by QButtonGroup
	[SmokeClass("QButtonGroup")]
	public class QButtonGroup : QObject, IDisposable {
 		protected QButtonGroup(Type dummy) : base((Type) null) {}
		[SmokeClass("QButtonGroup")]
		interface IQButtonGroupProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QButtonGroup), this);
			interceptor = (QButtonGroup) realProxy.GetTransparentProxy();
		}
		private static IQButtonGroupProxy staticInterceptor = null;
		static QButtonGroup() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQButtonGroupProxy), null);
			staticInterceptor = (IQButtonGroupProxy) realProxy.GetTransparentProxy();
		}
		[Q_PROPERTY("bool", "exclusive")]
		public bool Exclusive {
			get { return Property("exclusive").Value<bool>(); }
			set { SetProperty("exclusive", QVariant.FromValue<bool>(value)); }
		}
		public QButtonGroup(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQButtonGroup(parent);
		}
		[SmokeMethod("QButtonGroup", "(QObject*)", "#")]
		private void NewQButtonGroup(QObject parent) {
			((QButtonGroup) interceptor).NewQButtonGroup(parent);
		}
		public QButtonGroup() : this((Type) null) {
			CreateProxy();
			NewQButtonGroup();
		}
		[SmokeMethod("QButtonGroup", "()", "")]
		private void NewQButtonGroup() {
			((QButtonGroup) interceptor).NewQButtonGroup();
		}
		[SmokeMethod("addButton", "(QAbstractButton*)", "#")]
		public void AddButton(QAbstractButton arg1) {
			((QButtonGroup) interceptor).AddButton(arg1);
		}
		[SmokeMethod("addButton", "(QAbstractButton*, int)", "#$")]
		public void AddButton(QAbstractButton arg1, int id) {
			((QButtonGroup) interceptor).AddButton(arg1,id);
		}
		[SmokeMethod("removeButton", "(QAbstractButton*)", "#")]
		public void RemoveButton(QAbstractButton arg1) {
			((QButtonGroup) interceptor).RemoveButton(arg1);
		}
		[SmokeMethod("buttons", "() const", "")]
		public List<QAbstractButton> Buttons() {
			return ((QButtonGroup) interceptor).Buttons();
		}
		[SmokeMethod("checkedButton", "() const", "")]
		public QAbstractButton CheckedButton() {
			return ((QButtonGroup) interceptor).CheckedButton();
		}
		[SmokeMethod("button", "(int) const", "$")]
		public QAbstractButton Button(int id) {
			return ((QButtonGroup) interceptor).Button(id);
		}
		[SmokeMethod("setId", "(QAbstractButton*, int)", "#$")]
		public void SetId(QAbstractButton button, int id) {
			((QButtonGroup) interceptor).SetId(button,id);
		}
		[SmokeMethod("id", "(QAbstractButton*) const", "#")]
		public int Id(QAbstractButton button) {
			return ((QButtonGroup) interceptor).Id(button);
		}
		[SmokeMethod("checkedId", "() const", "")]
		public int CheckedId() {
			return ((QButtonGroup) interceptor).CheckedId();
		}
		~QButtonGroup() {
			DisposeQButtonGroup();
		}
		public new void Dispose() {
			DisposeQButtonGroup();
		}
		[SmokeMethod("~QButtonGroup", "()", "")]
		private void DisposeQButtonGroup() {
			((QButtonGroup) interceptor).DisposeQButtonGroup();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQButtonGroupSignals Emit {
			get { return (IQButtonGroupSignals) Q_EMIT; }
		}
	}

	public interface IQButtonGroupSignals : IQObjectSignals {
		[Q_SIGNAL("void buttonClicked(QAbstractButton*)")]
		void ButtonClicked(QAbstractButton arg1);
		[Q_SIGNAL("void buttonClicked(int)")]
		void ButtonClicked(int arg1);
		[Q_SIGNAL("void buttonPressed(QAbstractButton*)")]
		void ButtonPressed(QAbstractButton arg1);
		[Q_SIGNAL("void buttonPressed(int)")]
		void ButtonPressed(int arg1);
		[Q_SIGNAL("void buttonReleased(QAbstractButton*)")]
		void ButtonReleased(QAbstractButton arg1);
		[Q_SIGNAL("void buttonReleased(int)")]
		void ButtonReleased(int arg1);
	}
}
