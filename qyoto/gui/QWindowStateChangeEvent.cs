//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QWindowStateChangeEvent")]
	public class QWindowStateChangeEvent : QEvent, IDisposable {
 		protected QWindowStateChangeEvent(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(QWindowStateChangeEvent), "QWindowStateChangeEvent", this);
		}
		public QWindowStateChangeEvent(int aOldState) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QWindowStateChangeEvent$", "QWindowStateChangeEvent(Qt::WindowStates)", typeof(void), typeof(int), aOldState);
		}
		public QWindowStateChangeEvent(int aOldState, bool isOverride) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QWindowStateChangeEvent$$", "QWindowStateChangeEvent(Qt::WindowStates, bool)", typeof(void), typeof(int), aOldState, typeof(bool), isOverride);
		}
		public int OldState() {
			return (int) interceptor.Invoke("oldState", "oldState() const", typeof(int));
		}
		public bool IsOverride() {
			return (bool) interceptor.Invoke("isOverride", "isOverride() const", typeof(bool));
		}
		~QWindowStateChangeEvent() {
			interceptor.Invoke("~QWindowStateChangeEvent", "~QWindowStateChangeEvent()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~QWindowStateChangeEvent", "~QWindowStateChangeEvent()", typeof(void));
		}
	}
}
