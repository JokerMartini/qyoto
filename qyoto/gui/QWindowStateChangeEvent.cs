//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QWindowStateChangeEvent")]
	public class QWindowStateChangeEvent : QEvent, IDisposable {
 		protected QWindowStateChangeEvent(Type dummy) : base((Type) null) {}
		interface IQWindowStateChangeEventProxy {
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QWindowStateChangeEvent), this);
			_interceptor = (QWindowStateChangeEvent) realProxy.GetTransparentProxy();
		}
		private QWindowStateChangeEvent ProxyQWindowStateChangeEvent() {
			return (QWindowStateChangeEvent) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QWindowStateChangeEvent() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQWindowStateChangeEventProxy), null);
			_staticInterceptor = (IQWindowStateChangeEventProxy) realProxy.GetTransparentProxy();
		}
		private static IQWindowStateChangeEventProxy StaticQWindowStateChangeEvent() {
			return (IQWindowStateChangeEventProxy) _staticInterceptor;
		}

		public QWindowStateChangeEvent(int aOldState) : this((Type) null) {
			CreateProxy();
			NewQWindowStateChangeEvent(aOldState);
		}
		[SmokeMethod("QWindowStateChangeEvent$", "(Qt::WindowStates)")]
		private void NewQWindowStateChangeEvent(int aOldState) {
			ProxyQWindowStateChangeEvent().NewQWindowStateChangeEvent(aOldState);
		}
		public QWindowStateChangeEvent(int aOldState, bool isOverride) : this((Type) null) {
			CreateProxy();
			NewQWindowStateChangeEvent(aOldState,isOverride);
		}
		[SmokeMethod("QWindowStateChangeEvent$$", "(Qt::WindowStates, bool)")]
		private void NewQWindowStateChangeEvent(int aOldState, bool isOverride) {
			ProxyQWindowStateChangeEvent().NewQWindowStateChangeEvent(aOldState,isOverride);
		}
		[SmokeMethod("oldState", "() const")]
		public int OldState() {
			return ProxyQWindowStateChangeEvent().OldState();
		}
		[SmokeMethod("isOverride", "() const")]
		public bool IsOverride() {
			return ProxyQWindowStateChangeEvent().IsOverride();
		}
		~QWindowStateChangeEvent() {
			DisposeQWindowStateChangeEvent();
		}
		public new void Dispose() {
			DisposeQWindowStateChangeEvent();
		}
		[SmokeMethod("~QWindowStateChangeEvent", "()")]
		private void DisposeQWindowStateChangeEvent() {
			ProxyQWindowStateChangeEvent().DisposeQWindowStateChangeEvent();
		}
	}
}
