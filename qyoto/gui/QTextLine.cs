//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QTextLine")]
	public class QTextLine : MarshalByRefObject, IDisposable {
		protected QTextLine interceptor = null;
		private IntPtr smokeObject;
		protected QTextLine(Type dummy) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTextLine), this);
			interceptor = (QTextLine) realProxy.GetTransparentProxy();
		}
		public enum Edge {
			Leading = 0,
			Trailing = 1,
		}
		public enum CursorPosition {
			CursorBetweenCharacters = 0,
			CursorOnCharacter = 1,
		}
		// void draw(QPainter* arg1,const QPointF& arg2,const QTextLayout::FormatRange* arg3); >>>> NOT CONVERTED
		public QTextLine() : this((Type) null) {
			CreateProxy();
			NewQTextLine();
		}
		[SmokeMethod("QTextLine", "()", "")]
		private void NewQTextLine() {
			((QTextLine) interceptor).NewQTextLine();
		}
		[SmokeMethod("isValid", "() const", "")]
		public bool IsValid() {
			return ((QTextLine) interceptor).IsValid();
		}
		[SmokeMethod("rect", "() const", "")]
		public QRectF Rect() {
			return ((QTextLine) interceptor).Rect();
		}
		[SmokeMethod("x", "() const", "")]
		public double X() {
			return ((QTextLine) interceptor).X();
		}
		[SmokeMethod("y", "() const", "")]
		public double Y() {
			return ((QTextLine) interceptor).Y();
		}
		[SmokeMethod("width", "() const", "")]
		public double Width() {
			return ((QTextLine) interceptor).Width();
		}
		[SmokeMethod("ascent", "() const", "")]
		public double Ascent() {
			return ((QTextLine) interceptor).Ascent();
		}
		[SmokeMethod("descent", "() const", "")]
		public double Descent() {
			return ((QTextLine) interceptor).Descent();
		}
		[SmokeMethod("height", "() const", "")]
		public double Height() {
			return ((QTextLine) interceptor).Height();
		}
		[SmokeMethod("naturalTextWidth", "() const", "")]
		public double NaturalTextWidth() {
			return ((QTextLine) interceptor).NaturalTextWidth();
		}
		[SmokeMethod("naturalTextRect", "() const", "")]
		public QRectF NaturalTextRect() {
			return ((QTextLine) interceptor).NaturalTextRect();
		}
		[SmokeMethod("cursorToX", "(int*, QTextLine::Edge) const", "$$")]
		public double CursorToX(out int cursorPos, QTextLine.Edge edge) {
			return ((QTextLine) interceptor).CursorToX(out cursorPos,edge);
		}
		[SmokeMethod("cursorToX", "(int*) const", "$")]
		public double CursorToX(out int cursorPos) {
			return ((QTextLine) interceptor).CursorToX(out cursorPos);
		}
		[SmokeMethod("cursorToX", "(int, QTextLine::Edge) const", "$$")]
		public double CursorToX(int cursorPos, QTextLine.Edge edge) {
			return ((QTextLine) interceptor).CursorToX(cursorPos,edge);
		}
		[SmokeMethod("cursorToX", "(int) const", "$")]
		public double CursorToX(int cursorPos) {
			return ((QTextLine) interceptor).CursorToX(cursorPos);
		}
		[SmokeMethod("xToCursor", "(qreal, QTextLine::CursorPosition) const", "$$")]
		public int XToCursor(double x, QTextLine.CursorPosition arg2) {
			return ((QTextLine) interceptor).XToCursor(x,arg2);
		}
		[SmokeMethod("xToCursor", "(qreal) const", "$")]
		public int XToCursor(double x) {
			return ((QTextLine) interceptor).XToCursor(x);
		}
		[SmokeMethod("setLineWidth", "(qreal)", "$")]
		public void SetLineWidth(double width) {
			((QTextLine) interceptor).SetLineWidth(width);
		}
		[SmokeMethod("setNumColumns", "(int)", "$")]
		public void SetNumColumns(int columns) {
			((QTextLine) interceptor).SetNumColumns(columns);
		}
		[SmokeMethod("setPosition", "(const QPointF&)", "#")]
		public void SetPosition(QPointF pos) {
			((QTextLine) interceptor).SetPosition(pos);
		}
		[SmokeMethod("position", "() const", "")]
		public QPointF Position() {
			return ((QTextLine) interceptor).Position();
		}
		[SmokeMethod("textStart", "() const", "")]
		public int TextStart() {
			return ((QTextLine) interceptor).TextStart();
		}
		[SmokeMethod("textLength", "() const", "")]
		public int TextLength() {
			return ((QTextLine) interceptor).TextLength();
		}
		[SmokeMethod("lineNumber", "() const", "")]
		public int LineNumber() {
			return ((QTextLine) interceptor).LineNumber();
		}
		[SmokeMethod("draw", "(QPainter*, const QPointF&) const", "##")]
		public void Draw(QPainter p, QPointF point) {
			((QTextLine) interceptor).Draw(p,point);
		}
		~QTextLine() {
			DisposeQTextLine();
		}
		public void Dispose() {
			DisposeQTextLine();
		}
		[SmokeMethod("~QTextLine", "()", "")]
		private void DisposeQTextLine() {
			((QTextLine) interceptor).DisposeQTextLine();
		}
	}
}
