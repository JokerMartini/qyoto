//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QWheelEvent")]
	public class QWheelEvent : QInputEvent, IDisposable {
 		protected QWheelEvent(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(QWheelEvent), "QWheelEvent", this);
		}
		public QWheelEvent(QPoint pos, int delta, int buttons, int modifiers, Qt.Orientation orient) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QWheelEvent#$$$$", "QWheelEvent(const QPoint&, int, Qt::MouseButtons, Qt::KeyboardModifiers, Qt::Orientation)", typeof(void), typeof(QPoint), pos, typeof(int), delta, typeof(int), buttons, typeof(int), modifiers, typeof(Qt.Orientation), orient);
		}
		public QWheelEvent(QPoint pos, int delta, int buttons, int modifiers) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QWheelEvent#$$$", "QWheelEvent(const QPoint&, int, Qt::MouseButtons, Qt::KeyboardModifiers)", typeof(void), typeof(QPoint), pos, typeof(int), delta, typeof(int), buttons, typeof(int), modifiers);
		}
		public QWheelEvent(QPoint pos, QPoint globalPos, int delta, int buttons, int modifiers, Qt.Orientation orient) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QWheelEvent##$$$$", "QWheelEvent(const QPoint&, const QPoint&, int, Qt::MouseButtons, Qt::KeyboardModifiers, Qt::Orientation)", typeof(void), typeof(QPoint), pos, typeof(QPoint), globalPos, typeof(int), delta, typeof(int), buttons, typeof(int), modifiers, typeof(Qt.Orientation), orient);
		}
		public QWheelEvent(QPoint pos, QPoint globalPos, int delta, int buttons, int modifiers) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QWheelEvent##$$$", "QWheelEvent(const QPoint&, const QPoint&, int, Qt::MouseButtons, Qt::KeyboardModifiers)", typeof(void), typeof(QPoint), pos, typeof(QPoint), globalPos, typeof(int), delta, typeof(int), buttons, typeof(int), modifiers);
		}
		public int Delta() {
			return (int) interceptor.Invoke("delta", "delta() const", typeof(int));
		}
		public QPoint Pos() {
			return (QPoint) interceptor.Invoke("pos", "pos() const", typeof(QPoint));
		}
		public QPoint GlobalPos() {
			return (QPoint) interceptor.Invoke("globalPos", "globalPos() const", typeof(QPoint));
		}
		public int X() {
			return (int) interceptor.Invoke("x", "x() const", typeof(int));
		}
		public int Y() {
			return (int) interceptor.Invoke("y", "y() const", typeof(int));
		}
		public int GlobalX() {
			return (int) interceptor.Invoke("globalX", "globalX() const", typeof(int));
		}
		public int GlobalY() {
			return (int) interceptor.Invoke("globalY", "globalY() const", typeof(int));
		}
		public int Buttons() {
			return (int) interceptor.Invoke("buttons", "buttons() const", typeof(int));
		}
		public Qt.Orientation Orientation() {
			return (Qt.Orientation) interceptor.Invoke("orientation", "orientation() const", typeof(Qt.Orientation));
		}
		~QWheelEvent() {
			interceptor.Invoke("~QWheelEvent", "~QWheelEvent()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~QWheelEvent", "~QWheelEvent()", typeof(void));
		}
	}
}
