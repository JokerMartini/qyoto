//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	[SmokeClass("QTableView")]
	public class QTableView : QAbstractItemView, IDisposable {
 		protected QTableView(Type dummy) : base((Type) null) {}
		[SmokeClass("QTableView")]
		interface IQTableViewProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTableView), this);
			interceptor = (QTableView) realProxy.GetTransparentProxy();
		}
		private static IQTableViewProxy staticInterceptor = null;
		static QTableView() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQTableViewProxy), null);
			staticInterceptor = (IQTableViewProxy) realProxy.GetTransparentProxy();
		}
		[Q_PROPERTY("bool", "showGrid")]
		public bool ShowGrid {
			[SmokeMethod("showGrid", "()", "")]
			get { return ((QTableView) interceptor).ShowGrid; }
			[SmokeMethod("setShowGrid", "(bool)", "$")]
			set { ((QTableView) interceptor).ShowGrid = value; }
		}
		[Q_PROPERTY("Qt::PenStyle", "gridStyle")]
		public Qt.PenStyle GridStyle {
			[SmokeMethod("gridStyle", "()", "")]
			get { return ((QTableView) interceptor).GridStyle; }
			[SmokeMethod("setGridStyle", "(Qt::PenStyle)", "$")]
			set { ((QTableView) interceptor).GridStyle = value; }
		}
		[Q_PROPERTY("bool", "sortingEnabled")]
		public bool SortingEnabled {
			[SmokeMethod("isSortingEnabled", "()", "")]
			get { return ((QTableView) interceptor).SortingEnabled; }
			[SmokeMethod("setSortingEnabled", "(bool)", "$")]
			set { ((QTableView) interceptor).SortingEnabled = value; }
		}
		public QTableView(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQTableView(parent);
		}
		[SmokeMethod("QTableView", "(QWidget*)", "#")]
		private void NewQTableView(QWidget parent) {
			((QTableView) interceptor).NewQTableView(parent);
		}
		public QTableView() : this((Type) null) {
			CreateProxy();
			NewQTableView();
		}
		[SmokeMethod("QTableView", "()", "")]
		private void NewQTableView() {
			((QTableView) interceptor).NewQTableView();
		}
		[SmokeMethod("setModel", "(QAbstractItemModel*)", "#")]
		public override void SetModel(QAbstractItemModel model) {
			((QTableView) interceptor).SetModel(model);
		}
		[SmokeMethod("setRootIndex", "(const QModelIndex&)", "#")]
		public override void SetRootIndex(QModelIndex index) {
			((QTableView) interceptor).SetRootIndex(index);
		}
		[SmokeMethod("setSelectionModel", "(QItemSelectionModel*)", "#")]
		public override void SetSelectionModel(QItemSelectionModel selectionModel) {
			((QTableView) interceptor).SetSelectionModel(selectionModel);
		}
		[SmokeMethod("horizontalHeader", "() const", "")]
		public QHeaderView HorizontalHeader() {
			return ((QTableView) interceptor).HorizontalHeader();
		}
		[SmokeMethod("verticalHeader", "() const", "")]
		public QHeaderView VerticalHeader() {
			return ((QTableView) interceptor).VerticalHeader();
		}
		[SmokeMethod("setHorizontalHeader", "(QHeaderView*)", "#")]
		public void SetHorizontalHeader(QHeaderView header) {
			((QTableView) interceptor).SetHorizontalHeader(header);
		}
		[SmokeMethod("setVerticalHeader", "(QHeaderView*)", "#")]
		public void SetVerticalHeader(QHeaderView header) {
			((QTableView) interceptor).SetVerticalHeader(header);
		}
		[SmokeMethod("rowViewportPosition", "(int) const", "$")]
		public int RowViewportPosition(int row) {
			return ((QTableView) interceptor).RowViewportPosition(row);
		}
		[SmokeMethod("rowAt", "(int) const", "$")]
		public int RowAt(int y) {
			return ((QTableView) interceptor).RowAt(y);
		}
		[SmokeMethod("setRowHeight", "(int, int)", "$$")]
		public void SetRowHeight(int row, int height) {
			((QTableView) interceptor).SetRowHeight(row,height);
		}
		[SmokeMethod("rowHeight", "(int) const", "$")]
		public int RowHeight(int row) {
			return ((QTableView) interceptor).RowHeight(row);
		}
		[SmokeMethod("columnViewportPosition", "(int) const", "$")]
		public int ColumnViewportPosition(int column) {
			return ((QTableView) interceptor).ColumnViewportPosition(column);
		}
		[SmokeMethod("columnAt", "(int) const", "$")]
		public int ColumnAt(int x) {
			return ((QTableView) interceptor).ColumnAt(x);
		}
		[SmokeMethod("setColumnWidth", "(int, int)", "$$")]
		public void SetColumnWidth(int column, int width) {
			((QTableView) interceptor).SetColumnWidth(column,width);
		}
		[SmokeMethod("columnWidth", "(int) const", "$")]
		public int ColumnWidth(int column) {
			return ((QTableView) interceptor).ColumnWidth(column);
		}
		[SmokeMethod("isRowHidden", "(int) const", "$")]
		public bool IsRowHidden(int row) {
			return ((QTableView) interceptor).IsRowHidden(row);
		}
		[SmokeMethod("setRowHidden", "(int, bool)", "$$")]
		public void SetRowHidden(int row, bool hide) {
			((QTableView) interceptor).SetRowHidden(row,hide);
		}
		[SmokeMethod("isColumnHidden", "(int) const", "$")]
		public bool IsColumnHidden(int column) {
			return ((QTableView) interceptor).IsColumnHidden(column);
		}
		[SmokeMethod("setColumnHidden", "(int, bool)", "$$")]
		public void SetColumnHidden(int column, bool hide) {
			((QTableView) interceptor).SetColumnHidden(column,hide);
		}
		[SmokeMethod("isSortingEnabled", "() const", "")]
		public bool IsSortingEnabled() {
			return ((QTableView) interceptor).IsSortingEnabled();
		}
		[SmokeMethod("visualRect", "(const QModelIndex&) const", "#")]
		public override QRect VisualRect(QModelIndex index) {
			return ((QTableView) interceptor).VisualRect(index);
		}
		[SmokeMethod("scrollTo", "(const QModelIndex&, QAbstractItemView::ScrollHint)", "#$")]
		public override void ScrollTo(QModelIndex index, QAbstractItemView.ScrollHint hint) {
			((QTableView) interceptor).ScrollTo(index,hint);
		}
		[SmokeMethod("scrollTo", "(const QModelIndex&)", "#")]
		public virtual void ScrollTo(QModelIndex index) {
			((QTableView) interceptor).ScrollTo(index);
		}
		[SmokeMethod("indexAt", "(const QPoint&) const", "#")]
		public override QModelIndex IndexAt(QPoint p) {
			return ((QTableView) interceptor).IndexAt(p);
		}
		[SmokeMethod("setSpan", "(int, int, int, int)", "$$$$")]
		public void SetSpan(int row, int column, int rowSpan, int columnSpan) {
			((QTableView) interceptor).SetSpan(row,column,rowSpan,columnSpan);
		}
		[SmokeMethod("rowSpan", "(int, int) const", "$$")]
		public int RowSpan(int row, int column) {
			return ((QTableView) interceptor).RowSpan(row,column);
		}
		[SmokeMethod("columnSpan", "(int, int) const", "$$")]
		public int ColumnSpan(int row, int column) {
			return ((QTableView) interceptor).ColumnSpan(row,column);
		}
		[SmokeMethod("sortByColumn", "(int, Qt::SortOrder)", "$$")]
		public void SortByColumn(int column, Qt.SortOrder order) {
			((QTableView) interceptor).SortByColumn(column,order);
		}
		[Q_SLOT("void selectRow(int)")]
		[SmokeMethod("selectRow", "(int)", "$")]
		public void SelectRow(int row) {
			((QTableView) interceptor).SelectRow(row);
		}
		[Q_SLOT("void selectColumn(int)")]
		[SmokeMethod("selectColumn", "(int)", "$")]
		public void SelectColumn(int column) {
			((QTableView) interceptor).SelectColumn(column);
		}
		[Q_SLOT("void hideRow(int)")]
		[SmokeMethod("hideRow", "(int)", "$")]
		public void HideRow(int row) {
			((QTableView) interceptor).HideRow(row);
		}
		[Q_SLOT("void hideColumn(int)")]
		[SmokeMethod("hideColumn", "(int)", "$")]
		public void HideColumn(int column) {
			((QTableView) interceptor).HideColumn(column);
		}
		[Q_SLOT("void showRow(int)")]
		[SmokeMethod("showRow", "(int)", "$")]
		public void ShowRow(int row) {
			((QTableView) interceptor).ShowRow(row);
		}
		[Q_SLOT("void showColumn(int)")]
		[SmokeMethod("showColumn", "(int)", "$")]
		public void ShowColumn(int column) {
			((QTableView) interceptor).ShowColumn(column);
		}
		[Q_SLOT("void resizeRowToContents(int)")]
		[SmokeMethod("resizeRowToContents", "(int)", "$")]
		public void ResizeRowToContents(int row) {
			((QTableView) interceptor).ResizeRowToContents(row);
		}
		[Q_SLOT("void resizeRowsToContents()")]
		[SmokeMethod("resizeRowsToContents", "()", "")]
		public void ResizeRowsToContents() {
			((QTableView) interceptor).ResizeRowsToContents();
		}
		[Q_SLOT("void resizeColumnToContents(int)")]
		[SmokeMethod("resizeColumnToContents", "(int)", "$")]
		public void ResizeColumnToContents(int column) {
			((QTableView) interceptor).ResizeColumnToContents(column);
		}
		[Q_SLOT("void resizeColumnsToContents()")]
		[SmokeMethod("resizeColumnsToContents", "()", "")]
		public void ResizeColumnsToContents() {
			((QTableView) interceptor).ResizeColumnsToContents();
		}
		[Q_SLOT("void sortByColumn(int)")]
		[SmokeMethod("sortByColumn", "(int)", "$")]
		public void SortByColumn(int column) {
			((QTableView) interceptor).SortByColumn(column);
		}
		[SmokeMethod("scrollContentsBy", "(int, int)", "$$")]
		protected override void ScrollContentsBy(int dx, int dy) {
			((QTableView) interceptor).ScrollContentsBy(dx,dy);
		}
		[SmokeMethod("viewOptions", "() const", "")]
		protected override QStyleOptionViewItem ViewOptions() {
			return ((QTableView) interceptor).ViewOptions();
		}
		[SmokeMethod("paintEvent", "(QPaintEvent*)", "#")]
		protected override void PaintEvent(QPaintEvent e) {
			((QTableView) interceptor).PaintEvent(e);
		}
		[SmokeMethod("timerEvent", "(QTimerEvent*)", "#")]
		protected override void TimerEvent(QTimerEvent arg1) {
			((QTableView) interceptor).TimerEvent(arg1);
		}
		[SmokeMethod("horizontalOffset", "() const", "")]
		protected override int HorizontalOffset() {
			return ((QTableView) interceptor).HorizontalOffset();
		}
		[SmokeMethod("verticalOffset", "() const", "")]
		protected override int VerticalOffset() {
			return ((QTableView) interceptor).VerticalOffset();
		}
		[SmokeMethod("moveCursor", "(QAbstractItemView::CursorAction, Qt::KeyboardModifiers)", "$$")]
		protected override QModelIndex MoveCursor(QAbstractItemView.CursorAction cursorAction, int modifiers) {
			return ((QTableView) interceptor).MoveCursor(cursorAction,modifiers);
		}
		[SmokeMethod("setSelection", "(const QRect&, QItemSelectionModel::SelectionFlags)", "#$")]
		protected override void SetSelection(QRect rect, int command) {
			((QTableView) interceptor).SetSelection(rect,command);
		}
		[SmokeMethod("visualRegionForSelection", "(const QItemSelection&) const", "#")]
		protected override QRegion VisualRegionForSelection(QItemSelection selection) {
			return ((QTableView) interceptor).VisualRegionForSelection(selection);
		}
		[SmokeMethod("selectedIndexes", "() const", "")]
		protected override List<QModelIndex> SelectedIndexes() {
			return ((QTableView) interceptor).SelectedIndexes();
		}
		[SmokeMethod("updateGeometries", "()", "")]
		protected override void UpdateGeometries() {
			((QTableView) interceptor).UpdateGeometries();
		}
		[SmokeMethod("sizeHintForRow", "(int) const", "$")]
		protected new virtual int SizeHintForRow(int row) {
			return ((QTableView) interceptor).SizeHintForRow(row);
		}
		[SmokeMethod("sizeHintForColumn", "(int) const", "$")]
		protected new virtual int SizeHintForColumn(int column) {
			return ((QTableView) interceptor).SizeHintForColumn(column);
		}
		[SmokeMethod("verticalScrollbarAction", "(int)", "$")]
		protected override void VerticalScrollbarAction(int action) {
			((QTableView) interceptor).VerticalScrollbarAction(action);
		}
		[SmokeMethod("horizontalScrollbarAction", "(int)", "$")]
		protected override void HorizontalScrollbarAction(int action) {
			((QTableView) interceptor).HorizontalScrollbarAction(action);
		}
		[SmokeMethod("isIndexHidden", "(const QModelIndex&) const", "#")]
		protected override bool IsIndexHidden(QModelIndex index) {
			return ((QTableView) interceptor).IsIndexHidden(index);
		}
		[Q_SLOT("void rowMoved(int, int, int)")]
		[SmokeMethod("rowMoved", "(int, int, int)", "$$$")]
		protected void RowMoved(int row, int oldIndex, int newIndex) {
			((QTableView) interceptor).RowMoved(row,oldIndex,newIndex);
		}
		[Q_SLOT("void columnMoved(int, int, int)")]
		[SmokeMethod("columnMoved", "(int, int, int)", "$$$")]
		protected void ColumnMoved(int column, int oldIndex, int newIndex) {
			((QTableView) interceptor).ColumnMoved(column,oldIndex,newIndex);
		}
		[Q_SLOT("void rowResized(int, int, int)")]
		[SmokeMethod("rowResized", "(int, int, int)", "$$$")]
		protected void RowResized(int row, int oldHeight, int newHeight) {
			((QTableView) interceptor).RowResized(row,oldHeight,newHeight);
		}
		[Q_SLOT("void columnResized(int, int, int)")]
		[SmokeMethod("columnResized", "(int, int, int)", "$$$")]
		protected void ColumnResized(int column, int oldWidth, int newWidth) {
			((QTableView) interceptor).ColumnResized(column,oldWidth,newWidth);
		}
		[Q_SLOT("void rowCountChanged(int, int)")]
		[SmokeMethod("rowCountChanged", "(int, int)", "$$")]
		protected void RowCountChanged(int oldCount, int newCount) {
			((QTableView) interceptor).RowCountChanged(oldCount,newCount);
		}
		[Q_SLOT("void columnCountChanged(int, int)")]
		[SmokeMethod("columnCountChanged", "(int, int)", "$$")]
		protected void ColumnCountChanged(int oldCount, int newCount) {
			((QTableView) interceptor).ColumnCountChanged(oldCount,newCount);
		}
		~QTableView() {
			DisposeQTableView();
		}
		public new void Dispose() {
			DisposeQTableView();
		}
		[SmokeMethod("~QTableView", "()", "")]
		private void DisposeQTableView() {
			((QTableView) interceptor).DisposeQTableView();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQTableViewSignals Emit {
			get { return (IQTableViewSignals) Q_EMIT; }
		}
	}

	public interface IQTableViewSignals : IQAbstractItemViewSignals {
	}
}
