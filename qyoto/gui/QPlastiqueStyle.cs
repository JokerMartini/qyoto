//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QPlastiqueStyle")]
	public class QPlastiqueStyle : QWindowsStyle, IDisposable {
 		protected QPlastiqueStyle(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(QPlastiqueStyle), "QPlastiqueStyle", this);
		}
		private static SmokeInvocation staticInterceptor = null;
		static QPlastiqueStyle() {
			staticInterceptor = new SmokeInvocation(typeof(QPlastiqueStyle), "QPlastiqueStyle", null);
		}
		public QPlastiqueStyle() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QPlastiqueStyle", "QPlastiqueStyle()", typeof(void));
		}
		[SmokeMethod("drawPrimitive(QStyle::PrimitiveElement, const QStyleOption*, QPainter*, const QWidget*) const")]
		public override void DrawPrimitive(QStyle.PrimitiveElement element, int option, QPainter painter, QWidget widget) {
			interceptor.Invoke("drawPrimitive$###", "drawPrimitive(QStyle::PrimitiveElement, const QStyleOption*, QPainter*, const QWidget*) const", typeof(void), typeof(QStyle.PrimitiveElement), element, typeof(int), option, typeof(QPainter), painter, typeof(QWidget), widget);
		}
		[SmokeMethod("drawPrimitive(QStyle::PrimitiveElement, const QStyleOption*, QPainter*) const")]
		public override void DrawPrimitive(QStyle.PrimitiveElement element, int option, QPainter painter) {
			interceptor.Invoke("drawPrimitive$##", "drawPrimitive(QStyle::PrimitiveElement, const QStyleOption*, QPainter*) const", typeof(void), typeof(QStyle.PrimitiveElement), element, typeof(int), option, typeof(QPainter), painter);
		}
		[SmokeMethod("drawControl(QStyle::ControlElement, const QStyleOption*, QPainter*, const QWidget*) const")]
		public override void DrawControl(QStyle.ControlElement element, int option, QPainter painter, QWidget widget) {
			interceptor.Invoke("drawControl$###", "drawControl(QStyle::ControlElement, const QStyleOption*, QPainter*, const QWidget*) const", typeof(void), typeof(QStyle.ControlElement), element, typeof(int), option, typeof(QPainter), painter, typeof(QWidget), widget);
		}
		[SmokeMethod("drawComplexControl(QStyle::ComplexControl, const QStyleOptionComplex*, QPainter*, const QWidget*) const")]
		public override void DrawComplexControl(QStyle.ComplexControl control, QStyleOptionComplex option, QPainter painter, QWidget widget) {
			interceptor.Invoke("drawComplexControl$###", "drawComplexControl(QStyle::ComplexControl, const QStyleOptionComplex*, QPainter*, const QWidget*) const", typeof(void), typeof(QStyle.ComplexControl), control, typeof(QStyleOptionComplex), option, typeof(QPainter), painter, typeof(QWidget), widget);
		}
		[SmokeMethod("sizeFromContents(QStyle::ContentsType, const QStyleOption*, const QSize&, const QWidget*) const")]
		public override QSize SizeFromContents(QStyle.ContentsType type, int option, QSize size, QWidget widget) {
			return (QSize) interceptor.Invoke("sizeFromContents$###", "sizeFromContents(QStyle::ContentsType, const QStyleOption*, const QSize&, const QWidget*) const", typeof(QSize), typeof(QStyle.ContentsType), type, typeof(int), option, typeof(QSize), size, typeof(QWidget), widget);
		}
		[SmokeMethod("subElementRect(QStyle::SubElement, const QStyleOption*, const QWidget*) const")]
		public override QRect SubElementRect(QStyle.SubElement element, int option, QWidget widget) {
			return (QRect) interceptor.Invoke("subElementRect$##", "subElementRect(QStyle::SubElement, const QStyleOption*, const QWidget*) const", typeof(QRect), typeof(QStyle.SubElement), element, typeof(int), option, typeof(QWidget), widget);
		}
		[SmokeMethod("subControlRect(QStyle::ComplexControl, const QStyleOptionComplex*, QStyle::SubControl, const QWidget*) const")]
		public override QRect SubControlRect(QStyle.ComplexControl cc, QStyleOptionComplex opt, QStyle.SubControl sc, QWidget widget) {
			return (QRect) interceptor.Invoke("subControlRect$#$#", "subControlRect(QStyle::ComplexControl, const QStyleOptionComplex*, QStyle::SubControl, const QWidget*) const", typeof(QRect), typeof(QStyle.ComplexControl), cc, typeof(QStyleOptionComplex), opt, typeof(QStyle.SubControl), sc, typeof(QWidget), widget);
		}
		[SmokeMethod("styleHint(QStyle::StyleHint, const QStyleOption*, const QWidget*, QStyleHintReturn*) const")]
		public override int styleHint(QStyle.StyleHint hint, int option, QWidget widget, QStyleHintReturn returnData) {
			return (int) interceptor.Invoke("styleHint$###", "styleHint(QStyle::StyleHint, const QStyleOption*, const QWidget*, QStyleHintReturn*) const", typeof(int), typeof(QStyle.StyleHint), hint, typeof(int), option, typeof(QWidget), widget, typeof(QStyleHintReturn), returnData);
		}
		[SmokeMethod("styleHint(QStyle::StyleHint, const QStyleOption*, const QWidget*) const")]
		public override int styleHint(QStyle.StyleHint hint, int option, QWidget widget) {
			return (int) interceptor.Invoke("styleHint$##", "styleHint(QStyle::StyleHint, const QStyleOption*, const QWidget*) const", typeof(int), typeof(QStyle.StyleHint), hint, typeof(int), option, typeof(QWidget), widget);
		}
		[SmokeMethod("styleHint(QStyle::StyleHint, const QStyleOption*) const")]
		public override int styleHint(QStyle.StyleHint hint, int option) {
			return (int) interceptor.Invoke("styleHint$#", "styleHint(QStyle::StyleHint, const QStyleOption*) const", typeof(int), typeof(QStyle.StyleHint), hint, typeof(int), option);
		}
		[SmokeMethod("styleHint(QStyle::StyleHint) const")]
		public override int styleHint(QStyle.StyleHint hint) {
			return (int) interceptor.Invoke("styleHint$", "styleHint(QStyle::StyleHint) const", typeof(int), typeof(QStyle.StyleHint), hint);
		}
		[SmokeMethod("hitTestComplexControl(QStyle::ComplexControl, const QStyleOptionComplex*, const QPoint&, const QWidget*) const")]
		public override QStyle.SubControl HitTestComplexControl(QStyle.ComplexControl control, QStyleOptionComplex option, QPoint pos, QWidget widget) {
			return (QStyle.SubControl) interceptor.Invoke("hitTestComplexControl$###", "hitTestComplexControl(QStyle::ComplexControl, const QStyleOptionComplex*, const QPoint&, const QWidget*) const", typeof(QStyle.SubControl), typeof(QStyle.ComplexControl), control, typeof(QStyleOptionComplex), option, typeof(QPoint), pos, typeof(QWidget), widget);
		}
		[SmokeMethod("hitTestComplexControl(QStyle::ComplexControl, const QStyleOptionComplex*, const QPoint&) const")]
		public override QStyle.SubControl HitTestComplexControl(QStyle.ComplexControl control, QStyleOptionComplex option, QPoint pos) {
			return (QStyle.SubControl) interceptor.Invoke("hitTestComplexControl$##", "hitTestComplexControl(QStyle::ComplexControl, const QStyleOptionComplex*, const QPoint&) const", typeof(QStyle.SubControl), typeof(QStyle.ComplexControl), control, typeof(QStyleOptionComplex), option, typeof(QPoint), pos);
		}
		[SmokeMethod("pixelMetric(QStyle::PixelMetric, const QStyleOption*, const QWidget*) const")]
		public override int pixelMetric(QStyle.PixelMetric metric, int option, QWidget widget) {
			return (int) interceptor.Invoke("pixelMetric$##", "pixelMetric(QStyle::PixelMetric, const QStyleOption*, const QWidget*) const", typeof(int), typeof(QStyle.PixelMetric), metric, typeof(int), option, typeof(QWidget), widget);
		}
		[SmokeMethod("pixelMetric(QStyle::PixelMetric, const QStyleOption*) const")]
		public override int pixelMetric(QStyle.PixelMetric metric, int option) {
			return (int) interceptor.Invoke("pixelMetric$#", "pixelMetric(QStyle::PixelMetric, const QStyleOption*) const", typeof(int), typeof(QStyle.PixelMetric), metric, typeof(int), option);
		}
		[SmokeMethod("pixelMetric(QStyle::PixelMetric) const")]
		public override int pixelMetric(QStyle.PixelMetric metric) {
			return (int) interceptor.Invoke("pixelMetric$", "pixelMetric(QStyle::PixelMetric) const", typeof(int), typeof(QStyle.PixelMetric), metric);
		}
		[SmokeMethod("standardPixmap(QStyle::StandardPixmap, const QStyleOption*, const QWidget*) const")]
		public override QPixmap standardPixmap(QStyle.StandardPixmap standardPixmap, int opt, QWidget widget) {
			return (QPixmap) interceptor.Invoke("standardPixmap$##", "standardPixmap(QStyle::StandardPixmap, const QStyleOption*, const QWidget*) const", typeof(QPixmap), typeof(QStyle.StandardPixmap), standardPixmap, typeof(int), opt, typeof(QWidget), widget);
		}
		[SmokeMethod("standardPixmap(QStyle::StandardPixmap, const QStyleOption*) const")]
		public override QPixmap standardPixmap(QStyle.StandardPixmap standardPixmap, int opt) {
			return (QPixmap) interceptor.Invoke("standardPixmap$#", "standardPixmap(QStyle::StandardPixmap, const QStyleOption*) const", typeof(QPixmap), typeof(QStyle.StandardPixmap), standardPixmap, typeof(int), opt);
		}
		[SmokeMethod("polish(QWidget*)")]
		public override void Polish(QWidget widget) {
			interceptor.Invoke("polish#", "polish(QWidget*)", typeof(void), typeof(QWidget), widget);
		}
		[SmokeMethod("polish(QApplication*)")]
		public override void Polish(QApplication app) {
			interceptor.Invoke("polish#", "polish(QApplication*)", typeof(void), typeof(QApplication), app);
		}
		[SmokeMethod("polish(QPalette&)")]
		public override void Polish(QPalette pal) {
			interceptor.Invoke("polish#", "polish(QPalette&)", typeof(void), typeof(QPalette), pal);
		}
		[SmokeMethod("unpolish(QWidget*)")]
		public override void Unpolish(QWidget widget) {
			interceptor.Invoke("unpolish#", "unpolish(QWidget*)", typeof(void), typeof(QWidget), widget);
		}
		[SmokeMethod("unpolish(QApplication*)")]
		public override void Unpolish(QApplication app) {
			interceptor.Invoke("unpolish#", "unpolish(QApplication*)", typeof(void), typeof(QApplication), app);
		}
		[SmokeMethod("standardPalette() const")]
		public override QPalette StandardPalette() {
			return (QPalette) interceptor.Invoke("standardPalette", "standardPalette() const", typeof(QPalette));
		}
		[SmokeMethod("eventFilter(QObject*, QEvent*)")]
		protected override bool EventFilter(QObject watched, QEvent arg2) {
			return (bool) interceptor.Invoke("eventFilter##", "eventFilter(QObject*, QEvent*)", typeof(bool), typeof(QObject), watched, typeof(QEvent), arg2);
		}
		[SmokeMethod("timerEvent(QTimerEvent*)")]
		protected override void TimerEvent(QTimerEvent arg1) {
			interceptor.Invoke("timerEvent#", "timerEvent(QTimerEvent*)", typeof(void), typeof(QTimerEvent), arg1);
		}
		[Q_SLOT("QIcon standardIconImplementation(QStyle::StandardPixmap, const QStyleOption*, const QWidget*) const")]
		protected QIcon StandardIconImplementation(QStyle.StandardPixmap standardIcon, int opt, QWidget widget) {
			return (QIcon) interceptor.Invoke("standardIconImplementation$##", "standardIconImplementation(QStyle::StandardPixmap, const QStyleOption*, const QWidget*) const", typeof(QIcon), typeof(QStyle.StandardPixmap), standardIcon, typeof(int), opt, typeof(QWidget), widget);
		}
		[Q_SLOT("QIcon standardIconImplementation(QStyle::StandardPixmap, const QStyleOption*) const")]
		protected QIcon StandardIconImplementation(QStyle.StandardPixmap standardIcon, int opt) {
			return (QIcon) interceptor.Invoke("standardIconImplementation$#", "standardIconImplementation(QStyle::StandardPixmap, const QStyleOption*) const", typeof(QIcon), typeof(QStyle.StandardPixmap), standardIcon, typeof(int), opt);
		}
		[Q_SLOT("QIcon standardIconImplementation(QStyle::StandardPixmap) const")]
		protected QIcon StandardIconImplementation(QStyle.StandardPixmap standardIcon) {
			return (QIcon) interceptor.Invoke("standardIconImplementation$", "standardIconImplementation(QStyle::StandardPixmap) const", typeof(QIcon), typeof(QStyle.StandardPixmap), standardIcon);
		}
		~QPlastiqueStyle() {
			interceptor.Invoke("~QPlastiqueStyle", "~QPlastiqueStyle()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~QPlastiqueStyle", "~QPlastiqueStyle()", typeof(void));
		}
		public static string Tr(string s, string c) {
			return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
		}
		public static string Tr(string s) {
			return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
		}
		protected new IQPlastiqueStyleSignals Emit {
			get { return (IQPlastiqueStyleSignals) Q_EMIT; }
		}
	}

	public interface IQPlastiqueStyleSignals : IQWindowsStyleSignals {
	}
}
