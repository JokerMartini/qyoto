//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	[SmokeClass("QAbstractScrollArea")]
	public abstract class QAbstractScrollArea : QFrame, IDisposable {
 		protected QAbstractScrollArea(Type dummy) : base((Type) null) {}
		[SmokeClass("QAbstractScrollArea")]
		interface IQAbstractScrollAreaProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QAbstractScrollArea), this);
			interceptor = (QAbstractScrollArea) realProxy.GetTransparentProxy();
		}
		private static IQAbstractScrollAreaProxy staticInterceptor = null;
		static QAbstractScrollArea() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQAbstractScrollAreaProxy), null);
			staticInterceptor = (IQAbstractScrollAreaProxy) realProxy.GetTransparentProxy();
		}
		[Q_PROPERTY("Qt::ScrollBarPolicy", "verticalScrollBarPolicy")]
		public Qt.ScrollBarPolicy VerticalScrollBarPolicy {
			[SmokeMethod("verticalScrollBarPolicy", "()", "")]
			get { return ((QAbstractScrollArea) interceptor).VerticalScrollBarPolicy; }
			[SmokeMethod("setVerticalScrollBarPolicy", "(Qt::ScrollBarPolicy)", "$")]
			set { ((QAbstractScrollArea) interceptor).VerticalScrollBarPolicy = value; }
		}
		[Q_PROPERTY("Qt::ScrollBarPolicy", "horizontalScrollBarPolicy")]
		public Qt.ScrollBarPolicy HorizontalScrollBarPolicy {
			[SmokeMethod("horizontalScrollBarPolicy", "()", "")]
			get { return ((QAbstractScrollArea) interceptor).HorizontalScrollBarPolicy; }
			[SmokeMethod("setHorizontalScrollBarPolicy", "(Qt::ScrollBarPolicy)", "$")]
			set { ((QAbstractScrollArea) interceptor).HorizontalScrollBarPolicy = value; }
		}
		public QAbstractScrollArea(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQAbstractScrollArea(parent);
		}
		[SmokeMethod("QAbstractScrollArea", "(QWidget*)", "#")]
		private void NewQAbstractScrollArea(QWidget parent) {
			((QAbstractScrollArea) interceptor).NewQAbstractScrollArea(parent);
		}
		public QAbstractScrollArea() : this((Type) null) {
			CreateProxy();
			NewQAbstractScrollArea();
		}
		[SmokeMethod("QAbstractScrollArea", "()", "")]
		private void NewQAbstractScrollArea() {
			((QAbstractScrollArea) interceptor).NewQAbstractScrollArea();
		}
		[SmokeMethod("verticalScrollBar", "() const", "")]
		public QScrollBar VerticalScrollBar() {
			return ((QAbstractScrollArea) interceptor).VerticalScrollBar();
		}
		[SmokeMethod("setVerticalScrollBar", "(QScrollBar*)", "#")]
		public void SetVerticalScrollBar(QScrollBar scrollbar) {
			((QAbstractScrollArea) interceptor).SetVerticalScrollBar(scrollbar);
		}
		[SmokeMethod("horizontalScrollBar", "() const", "")]
		public QScrollBar HorizontalScrollBar() {
			return ((QAbstractScrollArea) interceptor).HorizontalScrollBar();
		}
		[SmokeMethod("setHorizontalScrollBar", "(QScrollBar*)", "#")]
		public void SetHorizontalScrollBar(QScrollBar scrollbar) {
			((QAbstractScrollArea) interceptor).SetHorizontalScrollBar(scrollbar);
		}
		[SmokeMethod("cornerWidget", "() const", "")]
		public QWidget CornerWidget() {
			return ((QAbstractScrollArea) interceptor).CornerWidget();
		}
		[SmokeMethod("setCornerWidget", "(QWidget*)", "#")]
		public void SetCornerWidget(QWidget widget) {
			((QAbstractScrollArea) interceptor).SetCornerWidget(widget);
		}
		[SmokeMethod("addScrollBarWidget", "(QWidget*, Qt::Alignment)", "#$")]
		public void AddScrollBarWidget(QWidget widget, int alignment) {
			((QAbstractScrollArea) interceptor).AddScrollBarWidget(widget,alignment);
		}
		[SmokeMethod("scrollBarWidgets", "(Qt::Alignment)", "$")]
		public List<QWidget> ScrollBarWidgets(int alignment) {
			return ((QAbstractScrollArea) interceptor).ScrollBarWidgets(alignment);
		}
		[SmokeMethod("viewport", "() const", "")]
		public QWidget Viewport() {
			return ((QAbstractScrollArea) interceptor).Viewport();
		}
		[SmokeMethod("setViewport", "(QWidget*)", "#")]
		public void SetViewport(QWidget widget) {
			((QAbstractScrollArea) interceptor).SetViewport(widget);
		}
		[SmokeMethod("maximumViewportSize", "() const", "")]
		public QSize MaximumViewportSize() {
			return ((QAbstractScrollArea) interceptor).MaximumViewportSize();
		}
		[SmokeMethod("minimumSizeHint", "() const", "")]
		public override QSize MinimumSizeHint() {
			return ((QAbstractScrollArea) interceptor).MinimumSizeHint();
		}
		[SmokeMethod("sizeHint", "() const", "")]
		public override QSize SizeHint() {
			return ((QAbstractScrollArea) interceptor).SizeHint();
		}
		[SmokeMethod("setViewportMargins", "(int, int, int, int)", "$$$$")]
		protected void SetViewportMargins(int left, int top, int right, int bottom) {
			((QAbstractScrollArea) interceptor).SetViewportMargins(left,top,right,bottom);
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		protected override bool Event(QEvent arg1) {
			return ((QAbstractScrollArea) interceptor).Event(arg1);
		}
		[SmokeMethod("viewportEvent", "(QEvent*)", "#")]
		protected virtual bool ViewportEvent(QEvent arg1) {
			return ((QAbstractScrollArea) interceptor).ViewportEvent(arg1);
		}
		[SmokeMethod("resizeEvent", "(QResizeEvent*)", "#")]
		protected override void ResizeEvent(QResizeEvent arg1) {
			((QAbstractScrollArea) interceptor).ResizeEvent(arg1);
		}
		[SmokeMethod("paintEvent", "(QPaintEvent*)", "#")]
		protected override void PaintEvent(QPaintEvent arg1) {
			((QAbstractScrollArea) interceptor).PaintEvent(arg1);
		}
		[SmokeMethod("mousePressEvent", "(QMouseEvent*)", "#")]
		protected override void MousePressEvent(QMouseEvent arg1) {
			((QAbstractScrollArea) interceptor).MousePressEvent(arg1);
		}
		[SmokeMethod("mouseReleaseEvent", "(QMouseEvent*)", "#")]
		protected override void MouseReleaseEvent(QMouseEvent arg1) {
			((QAbstractScrollArea) interceptor).MouseReleaseEvent(arg1);
		}
		[SmokeMethod("mouseDoubleClickEvent", "(QMouseEvent*)", "#")]
		protected override void MouseDoubleClickEvent(QMouseEvent arg1) {
			((QAbstractScrollArea) interceptor).MouseDoubleClickEvent(arg1);
		}
		[SmokeMethod("mouseMoveEvent", "(QMouseEvent*)", "#")]
		protected override void MouseMoveEvent(QMouseEvent arg1) {
			((QAbstractScrollArea) interceptor).MouseMoveEvent(arg1);
		}
		[SmokeMethod("wheelEvent", "(QWheelEvent*)", "#")]
		protected override void WheelEvent(QWheelEvent arg1) {
			((QAbstractScrollArea) interceptor).WheelEvent(arg1);
		}
		[SmokeMethod("contextMenuEvent", "(QContextMenuEvent*)", "#")]
		protected override void ContextMenuEvent(QContextMenuEvent arg1) {
			((QAbstractScrollArea) interceptor).ContextMenuEvent(arg1);
		}
		[SmokeMethod("dragEnterEvent", "(QDragEnterEvent*)", "#")]
		protected override void DragEnterEvent(QDragEnterEvent arg1) {
			((QAbstractScrollArea) interceptor).DragEnterEvent(arg1);
		}
		[SmokeMethod("dragMoveEvent", "(QDragMoveEvent*)", "#")]
		protected override void DragMoveEvent(QDragMoveEvent arg1) {
			((QAbstractScrollArea) interceptor).DragMoveEvent(arg1);
		}
		[SmokeMethod("dragLeaveEvent", "(QDragLeaveEvent*)", "#")]
		protected override void DragLeaveEvent(QDragLeaveEvent arg1) {
			((QAbstractScrollArea) interceptor).DragLeaveEvent(arg1);
		}
		[SmokeMethod("dropEvent", "(QDropEvent*)", "#")]
		protected override void DropEvent(QDropEvent arg1) {
			((QAbstractScrollArea) interceptor).DropEvent(arg1);
		}
		[SmokeMethod("keyPressEvent", "(QKeyEvent*)", "#")]
		protected override void KeyPressEvent(QKeyEvent arg1) {
			((QAbstractScrollArea) interceptor).KeyPressEvent(arg1);
		}
		[SmokeMethod("scrollContentsBy", "(int, int)", "$$")]
		protected virtual void ScrollContentsBy(int dx, int dy) {
			((QAbstractScrollArea) interceptor).ScrollContentsBy(dx,dy);
		}
		[Q_SLOT("void setupViewport(QWidget*)")]
		[SmokeMethod("setupViewport", "(QWidget*)", "#")]
		protected void SetupViewport(QWidget viewport) {
			((QAbstractScrollArea) interceptor).SetupViewport(viewport);
		}
		~QAbstractScrollArea() {
			DisposeQAbstractScrollArea();
		}
		public new void Dispose() {
			DisposeQAbstractScrollArea();
		}
		[SmokeMethod("~QAbstractScrollArea", "()", "")]
		private void DisposeQAbstractScrollArea() {
			((QAbstractScrollArea) interceptor).DisposeQAbstractScrollArea();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQAbstractScrollAreaSignals Emit {
			get { return (IQAbstractScrollAreaSignals) Q_EMIT; }
		}
	}

	public interface IQAbstractScrollAreaSignals : IQFrameSignals {
	}
}
