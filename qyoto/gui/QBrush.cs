//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QBrush")]
	public class QBrush : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
		protected QBrush(Type dummy) {}
		interface IQBrushProxy {
			bool op_equals(QBrush lhs, QBrush b);
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QBrush), this);
			_interceptor = (QBrush) realProxy.GetTransparentProxy();
		}
		private QBrush ProxyQBrush() {
			return (QBrush) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QBrush() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQBrushProxy), null);
			_staticInterceptor = (IQBrushProxy) realProxy.GetTransparentProxy();
		}
		private static IQBrushProxy StaticQBrush() {
			return (IQBrushProxy) _staticInterceptor;
		}

		public QBrush() : this((Type) null) {
			CreateProxy();
			NewQBrush();
		}
		[SmokeMethod("QBrush()")]
		private void NewQBrush() {
			ProxyQBrush().NewQBrush();
		}
		public QBrush(Qt.BrushStyle bs) : this((Type) null) {
			CreateProxy();
			NewQBrush(bs);
		}
		[SmokeMethod("QBrush(Qt::BrushStyle)")]
		private void NewQBrush(Qt.BrushStyle bs) {
			ProxyQBrush().NewQBrush(bs);
		}
		public QBrush(QColor color, Qt.BrushStyle bs) : this((Type) null) {
			CreateProxy();
			NewQBrush(color,bs);
		}
		[SmokeMethod("QBrush(const QColor&, Qt::BrushStyle)")]
		private void NewQBrush(QColor color, Qt.BrushStyle bs) {
			ProxyQBrush().NewQBrush(color,bs);
		}
		public QBrush(QColor color) : this((Type) null) {
			CreateProxy();
			NewQBrush(color);
		}
		[SmokeMethod("QBrush(const QColor&)")]
		private void NewQBrush(QColor color) {
			ProxyQBrush().NewQBrush(color);
		}
		public QBrush(Qt.GlobalColor color, Qt.BrushStyle bs) : this((Type) null) {
			CreateProxy();
			NewQBrush(color,bs);
		}
		[SmokeMethod("QBrush(Qt::GlobalColor, Qt::BrushStyle)")]
		private void NewQBrush(Qt.GlobalColor color, Qt.BrushStyle bs) {
			ProxyQBrush().NewQBrush(color,bs);
		}
		public QBrush(Qt.GlobalColor color) : this((Type) null) {
			CreateProxy();
			NewQBrush(color);
		}
		[SmokeMethod("QBrush(Qt::GlobalColor)")]
		private void NewQBrush(Qt.GlobalColor color) {
			ProxyQBrush().NewQBrush(color);
		}
		public QBrush(QColor color, QPixmap pixmap) : this((Type) null) {
			CreateProxy();
			NewQBrush(color,pixmap);
		}
		[SmokeMethod("QBrush(const QColor&, const QPixmap&)")]
		private void NewQBrush(QColor color, QPixmap pixmap) {
			ProxyQBrush().NewQBrush(color,pixmap);
		}
		public QBrush(Qt.GlobalColor color, QPixmap pixmap) : this((Type) null) {
			CreateProxy();
			NewQBrush(color,pixmap);
		}
		[SmokeMethod("QBrush(Qt::GlobalColor, const QPixmap&)")]
		private void NewQBrush(Qt.GlobalColor color, QPixmap pixmap) {
			ProxyQBrush().NewQBrush(color,pixmap);
		}
		public QBrush(QPixmap pixmap) : this((Type) null) {
			CreateProxy();
			NewQBrush(pixmap);
		}
		[SmokeMethod("QBrush(const QPixmap&)")]
		private void NewQBrush(QPixmap pixmap) {
			ProxyQBrush().NewQBrush(pixmap);
		}
		public QBrush(QImage image) : this((Type) null) {
			CreateProxy();
			NewQBrush(image);
		}
		[SmokeMethod("QBrush(const QImage&)")]
		private void NewQBrush(QImage image) {
			ProxyQBrush().NewQBrush(image);
		}
		public QBrush(QBrush brush) : this((Type) null) {
			CreateProxy();
			NewQBrush(brush);
		}
		[SmokeMethod("QBrush(const QBrush&)")]
		private void NewQBrush(QBrush brush) {
			ProxyQBrush().NewQBrush(brush);
		}
		public QBrush(QGradient gradient) : this((Type) null) {
			CreateProxy();
			NewQBrush(gradient);
		}
		[SmokeMethod("QBrush(const QGradient&)")]
		private void NewQBrush(QGradient gradient) {
			ProxyQBrush().NewQBrush(gradient);
		}
		//  operator QVariant(); >>>> NOT CONVERTED
		[SmokeMethod("style() const")]
		public Qt.BrushStyle Style() {
			return ProxyQBrush().Style();
		}
		[SmokeMethod("setStyle(Qt::BrushStyle)")]
		public void SetStyle(Qt.BrushStyle arg1) {
			ProxyQBrush().SetStyle(arg1);
		}
		[SmokeMethod("matrix() const")]
		public QMatrix Matrix() {
			return ProxyQBrush().Matrix();
		}
		[SmokeMethod("setMatrix(const QMatrix&)")]
		public void SetMatrix(QMatrix mat) {
			ProxyQBrush().SetMatrix(mat);
		}
		[SmokeMethod("texture() const")]
		public QPixmap Texture() {
			return ProxyQBrush().Texture();
		}
		[SmokeMethod("setTexture(const QPixmap&)")]
		public void SetTexture(QPixmap pixmap) {
			ProxyQBrush().SetTexture(pixmap);
		}
		[SmokeMethod("textureImage() const")]
		public QImage TextureImage() {
			return ProxyQBrush().TextureImage();
		}
		[SmokeMethod("setTextureImage(const QImage&)")]
		public void SetTextureImage(QImage image) {
			ProxyQBrush().SetTextureImage(image);
		}
		[SmokeMethod("color() const")]
		public QColor Color() {
			return ProxyQBrush().Color();
		}
		[SmokeMethod("setColor(const QColor&)")]
		public void SetColor(QColor color) {
			ProxyQBrush().SetColor(color);
		}
		[SmokeMethod("setColor(Qt::GlobalColor)")]
		public void SetColor(Qt.GlobalColor color) {
			ProxyQBrush().SetColor(color);
		}
		[SmokeMethod("gradient() const")]
		public QGradient Gradient() {
			return ProxyQBrush().Gradient();
		}
		[SmokeMethod("isOpaque() const")]
		public bool IsOpaque() {
			return ProxyQBrush().IsOpaque();
		}
		[SmokeMethod("operator==(const QBrush&) const")]
		public static bool operator==(QBrush lhs, QBrush b) {
			return StaticQBrush().op_equals(lhs,b);
		}
		public static bool operator!=(QBrush lhs, QBrush b) {
			return !StaticQBrush().op_equals(lhs,b);
		}
		public override bool Equals(object o) {
			if (!(o is QBrush)) { return false; }
			return this == (QBrush) o;
		}
		public override int GetHashCode() {
			return ProxyQBrush().GetHashCode();
		}
		~QBrush() {
			DisposeQBrush();
		}
		public void Dispose() {
			DisposeQBrush();
		}
		[SmokeMethod("~QBrush()")]
		private void DisposeQBrush() {
			ProxyQBrush().DisposeQBrush();
		}
	}
}
