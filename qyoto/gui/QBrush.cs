//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QBrush")]
	public class QBrush : MarshalByRefObject, IDisposable {
		protected QBrush interceptor = null;
		private IntPtr smokeObject;
		protected QBrush(Type dummy) {}
		[SmokeClass("QBrush")]
		interface IQBrushProxy {
			[SmokeMethod("operator==", "(const QBrush&) const", "#")]
			bool op_equals(QBrush lhs, QBrush b);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QBrush), this);
			interceptor = (QBrush) realProxy.GetTransparentProxy();
		}
		private static IQBrushProxy staticInterceptor = null;
		static QBrush() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQBrushProxy), null);
			staticInterceptor = (IQBrushProxy) realProxy.GetTransparentProxy();
		}
		//  operator QVariant(); >>>> NOT CONVERTED
		public QBrush() : this((Type) null) {
			CreateProxy();
			NewQBrush();
		}
		[SmokeMethod("QBrush", "()", "")]
		private void NewQBrush() {
			((QBrush) interceptor).NewQBrush();
		}
		public QBrush(Qt.BrushStyle bs) : this((Type) null) {
			CreateProxy();
			NewQBrush(bs);
		}
		[SmokeMethod("QBrush", "(Qt::BrushStyle)", "$")]
		private void NewQBrush(Qt.BrushStyle bs) {
			((QBrush) interceptor).NewQBrush(bs);
		}
		public QBrush(QColor color, Qt.BrushStyle bs) : this((Type) null) {
			CreateProxy();
			NewQBrush(color,bs);
		}
		[SmokeMethod("QBrush", "(const QColor&, Qt::BrushStyle)", "#$")]
		private void NewQBrush(QColor color, Qt.BrushStyle bs) {
			((QBrush) interceptor).NewQBrush(color,bs);
		}
		public QBrush(QColor color) : this((Type) null) {
			CreateProxy();
			NewQBrush(color);
		}
		[SmokeMethod("QBrush", "(const QColor&)", "#")]
		private void NewQBrush(QColor color) {
			((QBrush) interceptor).NewQBrush(color);
		}
		public QBrush(Qt.GlobalColor color, Qt.BrushStyle bs) : this((Type) null) {
			CreateProxy();
			NewQBrush(color,bs);
		}
		[SmokeMethod("QBrush", "(Qt::GlobalColor, Qt::BrushStyle)", "$$")]
		private void NewQBrush(Qt.GlobalColor color, Qt.BrushStyle bs) {
			((QBrush) interceptor).NewQBrush(color,bs);
		}
		public QBrush(Qt.GlobalColor color) : this((Type) null) {
			CreateProxy();
			NewQBrush(color);
		}
		[SmokeMethod("QBrush", "(Qt::GlobalColor)", "$")]
		private void NewQBrush(Qt.GlobalColor color) {
			((QBrush) interceptor).NewQBrush(color);
		}
		public QBrush(QColor color, QPixmap pixmap) : this((Type) null) {
			CreateProxy();
			NewQBrush(color,pixmap);
		}
		[SmokeMethod("QBrush", "(const QColor&, const QPixmap&)", "##")]
		private void NewQBrush(QColor color, QPixmap pixmap) {
			((QBrush) interceptor).NewQBrush(color,pixmap);
		}
		public QBrush(Qt.GlobalColor color, QPixmap pixmap) : this((Type) null) {
			CreateProxy();
			NewQBrush(color,pixmap);
		}
		[SmokeMethod("QBrush", "(Qt::GlobalColor, const QPixmap&)", "$#")]
		private void NewQBrush(Qt.GlobalColor color, QPixmap pixmap) {
			((QBrush) interceptor).NewQBrush(color,pixmap);
		}
		public QBrush(QPixmap pixmap) : this((Type) null) {
			CreateProxy();
			NewQBrush(pixmap);
		}
		[SmokeMethod("QBrush", "(const QPixmap&)", "#")]
		private void NewQBrush(QPixmap pixmap) {
			((QBrush) interceptor).NewQBrush(pixmap);
		}
		public QBrush(QImage image) : this((Type) null) {
			CreateProxy();
			NewQBrush(image);
		}
		[SmokeMethod("QBrush", "(const QImage&)", "#")]
		private void NewQBrush(QImage image) {
			((QBrush) interceptor).NewQBrush(image);
		}
		public QBrush(QBrush brush) : this((Type) null) {
			CreateProxy();
			NewQBrush(brush);
		}
		[SmokeMethod("QBrush", "(const QBrush&)", "#")]
		private void NewQBrush(QBrush brush) {
			((QBrush) interceptor).NewQBrush(brush);
		}
		public QBrush(QGradient gradient) : this((Type) null) {
			CreateProxy();
			NewQBrush(gradient);
		}
		[SmokeMethod("QBrush", "(const QGradient&)", "#")]
		private void NewQBrush(QGradient gradient) {
			((QBrush) interceptor).NewQBrush(gradient);
		}
		[SmokeMethod("style", "() const", "")]
		public Qt.BrushStyle Style() {
			return ((QBrush) interceptor).Style();
		}
		[SmokeMethod("setStyle", "(Qt::BrushStyle)", "$")]
		public void SetStyle(Qt.BrushStyle arg1) {
			((QBrush) interceptor).SetStyle(arg1);
		}
		[SmokeMethod("matrix", "() const", "")]
		public QMatrix Matrix() {
			return ((QBrush) interceptor).Matrix();
		}
		[SmokeMethod("setMatrix", "(const QMatrix&)", "#")]
		public void SetMatrix(QMatrix mat) {
			((QBrush) interceptor).SetMatrix(mat);
		}
		[SmokeMethod("texture", "() const", "")]
		public QPixmap Texture() {
			return ((QBrush) interceptor).Texture();
		}
		[SmokeMethod("setTexture", "(const QPixmap&)", "#")]
		public void SetTexture(QPixmap pixmap) {
			((QBrush) interceptor).SetTexture(pixmap);
		}
		[SmokeMethod("textureImage", "() const", "")]
		public QImage TextureImage() {
			return ((QBrush) interceptor).TextureImage();
		}
		[SmokeMethod("setTextureImage", "(const QImage&)", "#")]
		public void SetTextureImage(QImage image) {
			((QBrush) interceptor).SetTextureImage(image);
		}
		[SmokeMethod("color", "() const", "")]
		public QColor Color() {
			return ((QBrush) interceptor).Color();
		}
		[SmokeMethod("setColor", "(const QColor&)", "#")]
		public void SetColor(QColor color) {
			((QBrush) interceptor).SetColor(color);
		}
		[SmokeMethod("setColor", "(Qt::GlobalColor)", "$")]
		public void SetColor(Qt.GlobalColor color) {
			((QBrush) interceptor).SetColor(color);
		}
		[SmokeMethod("gradient", "() const", "")]
		public QGradient Gradient() {
			return ((QBrush) interceptor).Gradient();
		}
		[SmokeMethod("isOpaque", "() const", "")]
		public bool IsOpaque() {
			return ((QBrush) interceptor).IsOpaque();
		}
		public override bool Equals(object o) {
			if (!(o is QBrush)) { return false; }
			return this == (QBrush) o;
		}
		public override int GetHashCode() {
			return ((QBrush) interceptor).GetHashCode();
		}
		~QBrush() {
			DisposeQBrush();
		}
		public void Dispose() {
			DisposeQBrush();
		}
		[SmokeMethod("~QBrush", "()", "")]
		private void DisposeQBrush() {
			((QBrush) interceptor).DisposeQBrush();
		}
		public static bool operator==(QBrush lhs, QBrush b) {
			return staticInterceptor.op_equals(lhs,b);
		}
		public static bool operator!=(QBrush lhs, QBrush b) {
			return !staticInterceptor.op_equals(lhs,b);
		}
	}
}
