//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QDragMoveEvent")]
	public class QDragMoveEvent : QDropEvent, IDisposable {
 		protected QDragMoveEvent(Type dummy) : base((Type) null) {}
		[SmokeClass("QDragMoveEvent")]
		interface IQDragMoveEventProxy {
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDragMoveEvent), this);
			_interceptor = (QDragMoveEvent) realProxy.GetTransparentProxy();
		}
		private QDragMoveEvent ProxyQDragMoveEvent() {
			return (QDragMoveEvent) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QDragMoveEvent() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDragMoveEventProxy), null);
			_staticInterceptor = (IQDragMoveEventProxy) realProxy.GetTransparentProxy();
		}
		private static IQDragMoveEventProxy StaticQDragMoveEvent() {
			return (IQDragMoveEventProxy) _staticInterceptor;
		}
		public QDragMoveEvent(QPoint pos, int actions, QMimeData data, int buttons, int modifiers, QEvent.TypeOf type) : this((Type) null) {
			CreateProxy();
			NewQDragMoveEvent(pos,actions,data,buttons,modifiers,type);
		}
		[SmokeMethod("QDragMoveEvent", "(const QPoint&, Qt::DropActions, const QMimeData*, Qt::MouseButtons, Qt::KeyboardModifiers, QEvent::Type)", "#$#$$$")]
		private void NewQDragMoveEvent(QPoint pos, int actions, QMimeData data, int buttons, int modifiers, QEvent.TypeOf type) {
			ProxyQDragMoveEvent().NewQDragMoveEvent(pos,actions,data,buttons,modifiers,type);
		}
		public QDragMoveEvent(QPoint pos, int actions, QMimeData data, int buttons, int modifiers) : this((Type) null) {
			CreateProxy();
			NewQDragMoveEvent(pos,actions,data,buttons,modifiers);
		}
		[SmokeMethod("QDragMoveEvent", "(const QPoint&, Qt::DropActions, const QMimeData*, Qt::MouseButtons, Qt::KeyboardModifiers)", "#$#$$")]
		private void NewQDragMoveEvent(QPoint pos, int actions, QMimeData data, int buttons, int modifiers) {
			ProxyQDragMoveEvent().NewQDragMoveEvent(pos,actions,data,buttons,modifiers);
		}
		[SmokeMethod("answerRect", "() const", "")]
		public QRect AnswerRect() {
			return ProxyQDragMoveEvent().AnswerRect();
		}
		[SmokeMethod("accept", "()", "")]
		public void Accept() {
			ProxyQDragMoveEvent().Accept();
		}
		[SmokeMethod("ignore", "()", "")]
		public void Ignore() {
			ProxyQDragMoveEvent().Ignore();
		}
		[SmokeMethod("accept", "(const QRect&)", "#")]
		public void Accept(QRect r) {
			ProxyQDragMoveEvent().Accept(r);
		}
		[SmokeMethod("ignore", "(const QRect&)", "#")]
		public void Ignore(QRect r) {
			ProxyQDragMoveEvent().Ignore(r);
		}
		~QDragMoveEvent() {
			DisposeQDragMoveEvent();
		}
		public new void Dispose() {
			DisposeQDragMoveEvent();
		}
		[SmokeMethod("~QDragMoveEvent", "()", "")]
		private void DisposeQDragMoveEvent() {
			ProxyQDragMoveEvent().DisposeQDragMoveEvent();
		}
	}
}
