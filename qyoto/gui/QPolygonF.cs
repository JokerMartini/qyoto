//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	[SmokeClass("QPolygonF")]
	public class QPolygonF : MarshalByRefObject, IDisposable {
		protected QPolygonF interceptor = null;
		private IntPtr smokeObject;
		protected QPolygonF(Type dummy) {}
		[SmokeClass("QPolygonF")]
		interface IQPolygonFProxy {
			[SmokeMethod("operator*", "(const QPolygonF&, const QMatrix&)", "##")]
			QPolygonF op_mult(QPolygonF a, QMatrix m);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QPolygonF), this);
			interceptor = (QPolygonF) realProxy.GetTransparentProxy();
		}
		private static IQPolygonFProxy staticInterceptor = null;
		static QPolygonF() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQPolygonFProxy), null);
			staticInterceptor = (IQPolygonFProxy) realProxy.GetTransparentProxy();
		}
		public QPolygonF() : this((Type) null) {
			CreateProxy();
			NewQPolygonF();
		}
		[SmokeMethod("QPolygonF", "()", "")]
		private void NewQPolygonF() {
			((QPolygonF) interceptor).NewQPolygonF();
		}
		public QPolygonF(int size) : this((Type) null) {
			CreateProxy();
			NewQPolygonF(size);
		}
		[SmokeMethod("QPolygonF", "(int)", "$")]
		private void NewQPolygonF(int size) {
			((QPolygonF) interceptor).NewQPolygonF(size);
		}
		public QPolygonF(QPolygonF a) : this((Type) null) {
			CreateProxy();
			NewQPolygonF(a);
		}
		[SmokeMethod("QPolygonF", "(const QPolygonF&)", "#")]
		private void NewQPolygonF(QPolygonF a) {
			((QPolygonF) interceptor).NewQPolygonF(a);
		}
		public QPolygonF(List<QPointF> v) : this((Type) null) {
			CreateProxy();
			NewQPolygonF(v);
		}
		[SmokeMethod("QPolygonF", "(const QVector<QPointF>&)", "?")]
		private void NewQPolygonF(List<QPointF> v) {
			((QPolygonF) interceptor).NewQPolygonF(v);
		}
		public QPolygonF(QRectF r) : this((Type) null) {
			CreateProxy();
			NewQPolygonF(r);
		}
		[SmokeMethod("QPolygonF", "(const QRectF&)", "#")]
		private void NewQPolygonF(QRectF r) {
			((QPolygonF) interceptor).NewQPolygonF(r);
		}
		public QPolygonF(QPolygon a) : this((Type) null) {
			CreateProxy();
			NewQPolygonF(a);
		}
		[SmokeMethod("QPolygonF", "(const QPolygon&)", "#")]
		private void NewQPolygonF(QPolygon a) {
			((QPolygonF) interceptor).NewQPolygonF(a);
		}
		[SmokeMethod("translate", "(qreal, qreal)", "$$")]
		public void Translate(double dx, double dy) {
			((QPolygonF) interceptor).Translate(dx,dy);
		}
		[SmokeMethod("translate", "(const QPointF&)", "#")]
		public void Translate(QPointF offset) {
			((QPolygonF) interceptor).Translate(offset);
		}
		[SmokeMethod("toPolygon", "() const", "")]
		public QPolygon ToPolygon() {
			return ((QPolygonF) interceptor).ToPolygon();
		}
		[SmokeMethod("isClosed", "() const", "")]
		public bool IsClosed() {
			return ((QPolygonF) interceptor).IsClosed();
		}
		[SmokeMethod("boundingRect", "() const", "")]
		public QRectF BoundingRect() {
			return ((QPolygonF) interceptor).BoundingRect();
		}
		~QPolygonF() {
			DisposeQPolygonF();
		}
		public void Dispose() {
			DisposeQPolygonF();
		}
		[SmokeMethod("~QPolygonF", "()", "")]
		private void DisposeQPolygonF() {
			((QPolygonF) interceptor).DisposeQPolygonF();
		}
		public static QPolygonF operator*(QPolygonF a, QMatrix m) {
			return staticInterceptor.op_mult(a,m);
		}
	}
}
