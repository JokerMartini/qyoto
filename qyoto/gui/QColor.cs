//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	[SmokeClass("QColor")]
	public class QColor : MarshalByRefObject, IDisposable {
		protected QColor interceptor = null;
		private IntPtr smokeObject;
		protected QColor(Type dummy) {}
		[SmokeClass("QColor")]
		interface IQColorProxy {
			[SmokeMethod("operator==", "(const QColor&) const", "#")]
			bool op_equals(QColor lhs, QColor c);
			[SmokeMethod("colorNames", "()", "")]
			List<string> ColorNames();
			[SmokeMethod("fromRgb", "(QRgb)", "$")]
			QColor FromRgb(uint rgb);
			[SmokeMethod("fromRgba", "(QRgb)", "$")]
			QColor FromRgba(uint rgba);
			[SmokeMethod("fromRgb", "(int, int, int, int)", "$$$$")]
			QColor FromRgb(int r, int g, int b, int a);
			[SmokeMethod("fromRgb", "(int, int, int)", "$$$")]
			QColor FromRgb(int r, int g, int b);
			[SmokeMethod("fromRgbF", "(qreal, qreal, qreal, qreal)", "$$$$")]
			QColor FromRgbF(double r, double g, double b, double a);
			[SmokeMethod("fromRgbF", "(qreal, qreal, qreal)", "$$$")]
			QColor FromRgbF(double r, double g, double b);
			[SmokeMethod("fromHsv", "(int, int, int, int)", "$$$$")]
			QColor FromHsv(int h, int s, int v, int a);
			[SmokeMethod("fromHsv", "(int, int, int)", "$$$")]
			QColor FromHsv(int h, int s, int v);
			[SmokeMethod("fromHsvF", "(qreal, qreal, qreal, qreal)", "$$$$")]
			QColor FromHsvF(double h, double s, double v, double a);
			[SmokeMethod("fromHsvF", "(qreal, qreal, qreal)", "$$$")]
			QColor FromHsvF(double h, double s, double v);
			[SmokeMethod("fromCmyk", "(int, int, int, int, int)", "$$$$$")]
			QColor FromCmyk(int c, int m, int y, int k, int a);
			[SmokeMethod("fromCmyk", "(int, int, int, int)", "$$$$")]
			QColor FromCmyk(int c, int m, int y, int k);
			[SmokeMethod("fromCmykF", "(qreal, qreal, qreal, qreal, qreal)", "$$$$$")]
			QColor FromCmykF(double c, double m, double y, double k, double a);
			[SmokeMethod("fromCmykF", "(qreal, qreal, qreal, qreal)", "$$$$")]
			QColor FromCmykF(double c, double m, double y, double k);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QColor), this);
			interceptor = (QColor) realProxy.GetTransparentProxy();
		}
		private static IQColorProxy staticInterceptor = null;
		static QColor() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQColorProxy), null);
			staticInterceptor = (IQColorProxy) realProxy.GetTransparentProxy();
		}
		public enum Spec {
			Invalid = 0,
			Rgb = 1,
			Hsv = 2,
			Cmyk = 3,
		}
		//  operator QVariant(); >>>> NOT CONVERTED
		public QColor() : this((Type) null) {
			CreateProxy();
			NewQColor();
		}
		[SmokeMethod("QColor", "()", "")]
		private void NewQColor() {
			((QColor) interceptor).NewQColor();
		}
		public QColor(Qt.GlobalColor color) : this((Type) null) {
			CreateProxy();
			NewQColor(color);
		}
		[SmokeMethod("QColor", "(Qt::GlobalColor)", "$")]
		private void NewQColor(Qt.GlobalColor color) {
			((QColor) interceptor).NewQColor(color);
		}
		public QColor(int r, int g, int b, int a) : this((Type) null) {
			CreateProxy();
			NewQColor(r,g,b,a);
		}
		[SmokeMethod("QColor", "(int, int, int, int)", "$$$$")]
		private void NewQColor(int r, int g, int b, int a) {
			((QColor) interceptor).NewQColor(r,g,b,a);
		}
		public QColor(int r, int g, int b) : this((Type) null) {
			CreateProxy();
			NewQColor(r,g,b);
		}
		[SmokeMethod("QColor", "(int, int, int)", "$$$")]
		private void NewQColor(int r, int g, int b) {
			((QColor) interceptor).NewQColor(r,g,b);
		}
		public QColor(uint rgb) : this((Type) null) {
			CreateProxy();
			NewQColor(rgb);
		}
		[SmokeMethod("QColor", "(QRgb)", "$")]
		private void NewQColor(uint rgb) {
			((QColor) interceptor).NewQColor(rgb);
		}
		public QColor(string name) : this((Type) null) {
			CreateProxy();
			NewQColor(name);
		}
		[SmokeMethod("QColor", "(const QString&)", "$")]
		private void NewQColor(string name) {
			((QColor) interceptor).NewQColor(name);
		}
		public QColor(QColor color) : this((Type) null) {
			CreateProxy();
			NewQColor(color);
		}
		[SmokeMethod("QColor", "(const QColor&)", "#")]
		private void NewQColor(QColor color) {
			((QColor) interceptor).NewQColor(color);
		}
		public QColor(QColor.Spec spec) : this((Type) null) {
			CreateProxy();
			NewQColor(spec);
		}
		[SmokeMethod("QColor", "(QColor::Spec)", "$")]
		private void NewQColor(QColor.Spec spec) {
			((QColor) interceptor).NewQColor(spec);
		}
		[SmokeMethod("isValid", "() const", "")]
		public bool IsValid() {
			return ((QColor) interceptor).IsValid();
		}
		[SmokeMethod("name", "() const", "")]
		public string Name() {
			return ((QColor) interceptor).Name();
		}
		[SmokeMethod("setNamedColor", "(const QString&)", "$")]
		public void SetNamedColor(string name) {
			((QColor) interceptor).SetNamedColor(name);
		}
		[SmokeMethod("spec", "() const", "")]
		public QColor.Spec spec() {
			return ((QColor) interceptor).spec();
		}
		[SmokeMethod("alpha", "() const", "")]
		public int Alpha() {
			return ((QColor) interceptor).Alpha();
		}
		[SmokeMethod("setAlpha", "(int)", "$")]
		public void SetAlpha(int alpha) {
			((QColor) interceptor).SetAlpha(alpha);
		}
		[SmokeMethod("alphaF", "() const", "")]
		public double AlphaF() {
			return ((QColor) interceptor).AlphaF();
		}
		[SmokeMethod("setAlphaF", "(qreal)", "$")]
		public void SetAlphaF(double alpha) {
			((QColor) interceptor).SetAlphaF(alpha);
		}
		[SmokeMethod("red", "() const", "")]
		public int Red() {
			return ((QColor) interceptor).Red();
		}
		[SmokeMethod("green", "() const", "")]
		public int Green() {
			return ((QColor) interceptor).Green();
		}
		[SmokeMethod("blue", "() const", "")]
		public int Blue() {
			return ((QColor) interceptor).Blue();
		}
		[SmokeMethod("setRed", "(int)", "$")]
		public void SetRed(int red) {
			((QColor) interceptor).SetRed(red);
		}
		[SmokeMethod("setGreen", "(int)", "$")]
		public void SetGreen(int green) {
			((QColor) interceptor).SetGreen(green);
		}
		[SmokeMethod("setBlue", "(int)", "$")]
		public void SetBlue(int blue) {
			((QColor) interceptor).SetBlue(blue);
		}
		[SmokeMethod("redF", "() const", "")]
		public double RedF() {
			return ((QColor) interceptor).RedF();
		}
		[SmokeMethod("greenF", "() const", "")]
		public double GreenF() {
			return ((QColor) interceptor).GreenF();
		}
		[SmokeMethod("blueF", "() const", "")]
		public double BlueF() {
			return ((QColor) interceptor).BlueF();
		}
		[SmokeMethod("setRedF", "(qreal)", "$")]
		public void SetRedF(double red) {
			((QColor) interceptor).SetRedF(red);
		}
		[SmokeMethod("setGreenF", "(qreal)", "$")]
		public void SetGreenF(double green) {
			((QColor) interceptor).SetGreenF(green);
		}
		[SmokeMethod("setBlueF", "(qreal)", "$")]
		public void SetBlueF(double blue) {
			((QColor) interceptor).SetBlueF(blue);
		}
		[SmokeMethod("getRgb", "(int*, int*, int*, int*) const", "$$$$")]
		public void GetRgb(out int r, out int g, out int b, out int a) {
			((QColor) interceptor).GetRgb(out r,out g,out b,out a);
		}
		[SmokeMethod("getRgb", "(int*, int*, int*) const", "$$$")]
		public void GetRgb(out int r, out int g, out int b) {
			((QColor) interceptor).GetRgb(out r,out g,out b);
		}
		[SmokeMethod("setRgb", "(int, int, int, int)", "$$$$")]
		public void SetRgb(int r, int g, int b, int a) {
			((QColor) interceptor).SetRgb(r,g,b,a);
		}
		[SmokeMethod("setRgb", "(int, int, int)", "$$$")]
		public void SetRgb(int r, int g, int b) {
			((QColor) interceptor).SetRgb(r,g,b);
		}
		[SmokeMethod("getRgbF", "(qreal*, qreal*, qreal*, qreal*) const", "$$$$")]
		public void GetRgbF(out double r, out double g, out double b, out double a) {
			((QColor) interceptor).GetRgbF(out r,out g,out b,out a);
		}
		[SmokeMethod("getRgbF", "(qreal*, qreal*, qreal*) const", "$$$")]
		public void GetRgbF(out double r, out double g, out double b) {
			((QColor) interceptor).GetRgbF(out r,out g,out b);
		}
		[SmokeMethod("setRgbF", "(qreal, qreal, qreal, qreal)", "$$$$")]
		public void SetRgbF(double r, double g, double b, double a) {
			((QColor) interceptor).SetRgbF(r,g,b,a);
		}
		[SmokeMethod("setRgbF", "(qreal, qreal, qreal)", "$$$")]
		public void SetRgbF(double r, double g, double b) {
			((QColor) interceptor).SetRgbF(r,g,b);
		}
		[SmokeMethod("rgba", "() const", "")]
		public uint Rgba() {
			return ((QColor) interceptor).Rgba();
		}
		[SmokeMethod("setRgba", "(QRgb)", "$")]
		public void SetRgba(uint rgba) {
			((QColor) interceptor).SetRgba(rgba);
		}
		[SmokeMethod("rgb", "() const", "")]
		public uint Rgb() {
			return ((QColor) interceptor).Rgb();
		}
		[SmokeMethod("setRgb", "(QRgb)", "$")]
		public void SetRgb(uint rgb) {
			((QColor) interceptor).SetRgb(rgb);
		}
		[SmokeMethod("hue", "() const", "")]
		public int Hue() {
			return ((QColor) interceptor).Hue();
		}
		[SmokeMethod("saturation", "() const", "")]
		public int Saturation() {
			return ((QColor) interceptor).Saturation();
		}
		[SmokeMethod("value", "() const", "")]
		public int Value() {
			return ((QColor) interceptor).Value();
		}
		[SmokeMethod("hueF", "() const", "")]
		public double HueF() {
			return ((QColor) interceptor).HueF();
		}
		[SmokeMethod("saturationF", "() const", "")]
		public double SaturationF() {
			return ((QColor) interceptor).SaturationF();
		}
		[SmokeMethod("valueF", "() const", "")]
		public double ValueF() {
			return ((QColor) interceptor).ValueF();
		}
		[SmokeMethod("getHsv", "(int*, int*, int*, int*) const", "$$$$")]
		public void GetHsv(out int h, out int s, out int v, out int a) {
			((QColor) interceptor).GetHsv(out h,out s,out v,out a);
		}
		[SmokeMethod("getHsv", "(int*, int*, int*) const", "$$$")]
		public void GetHsv(out int h, out int s, out int v) {
			((QColor) interceptor).GetHsv(out h,out s,out v);
		}
		[SmokeMethod("setHsv", "(int, int, int, int)", "$$$$")]
		public void SetHsv(int h, int s, int v, int a) {
			((QColor) interceptor).SetHsv(h,s,v,a);
		}
		[SmokeMethod("setHsv", "(int, int, int)", "$$$")]
		public void SetHsv(int h, int s, int v) {
			((QColor) interceptor).SetHsv(h,s,v);
		}
		[SmokeMethod("getHsvF", "(qreal*, qreal*, qreal*, qreal*) const", "$$$$")]
		public void GetHsvF(out double h, out double s, out double v, out double a) {
			((QColor) interceptor).GetHsvF(out h,out s,out v,out a);
		}
		[SmokeMethod("getHsvF", "(qreal*, qreal*, qreal*) const", "$$$")]
		public void GetHsvF(out double h, out double s, out double v) {
			((QColor) interceptor).GetHsvF(out h,out s,out v);
		}
		[SmokeMethod("setHsvF", "(qreal, qreal, qreal, qreal)", "$$$$")]
		public void SetHsvF(double h, double s, double v, double a) {
			((QColor) interceptor).SetHsvF(h,s,v,a);
		}
		[SmokeMethod("setHsvF", "(qreal, qreal, qreal)", "$$$")]
		public void SetHsvF(double h, double s, double v) {
			((QColor) interceptor).SetHsvF(h,s,v);
		}
		[SmokeMethod("cyan", "() const", "")]
		public int Cyan() {
			return ((QColor) interceptor).Cyan();
		}
		[SmokeMethod("magenta", "() const", "")]
		public int Magenta() {
			return ((QColor) interceptor).Magenta();
		}
		[SmokeMethod("yellow", "() const", "")]
		public int Yellow() {
			return ((QColor) interceptor).Yellow();
		}
		[SmokeMethod("black", "() const", "")]
		public int Black() {
			return ((QColor) interceptor).Black();
		}
		[SmokeMethod("cyanF", "() const", "")]
		public double CyanF() {
			return ((QColor) interceptor).CyanF();
		}
		[SmokeMethod("magentaF", "() const", "")]
		public double MagentaF() {
			return ((QColor) interceptor).MagentaF();
		}
		[SmokeMethod("yellowF", "() const", "")]
		public double YellowF() {
			return ((QColor) interceptor).YellowF();
		}
		[SmokeMethod("blackF", "() const", "")]
		public double BlackF() {
			return ((QColor) interceptor).BlackF();
		}
		[SmokeMethod("getCmyk", "(int*, int*, int*, int*, int*)", "$$$$$")]
		public void GetCmyk(out int c, out int m, out int y, out int k, out int a) {
			((QColor) interceptor).GetCmyk(out c,out m,out y,out k,out a);
		}
		[SmokeMethod("getCmyk", "(int*, int*, int*, int*)", "$$$$")]
		public void GetCmyk(out int c, out int m, out int y, out int k) {
			((QColor) interceptor).GetCmyk(out c,out m,out y,out k);
		}
		[SmokeMethod("setCmyk", "(int, int, int, int, int)", "$$$$$")]
		public void SetCmyk(int c, int m, int y, int k, int a) {
			((QColor) interceptor).SetCmyk(c,m,y,k,a);
		}
		[SmokeMethod("setCmyk", "(int, int, int, int)", "$$$$")]
		public void SetCmyk(int c, int m, int y, int k) {
			((QColor) interceptor).SetCmyk(c,m,y,k);
		}
		[SmokeMethod("getCmykF", "(qreal*, qreal*, qreal*, qreal*, qreal*)", "$$$$$")]
		public void GetCmykF(out double c, out double m, out double y, out double k, out double a) {
			((QColor) interceptor).GetCmykF(out c,out m,out y,out k,out a);
		}
		[SmokeMethod("getCmykF", "(qreal*, qreal*, qreal*, qreal*)", "$$$$")]
		public void GetCmykF(out double c, out double m, out double y, out double k) {
			((QColor) interceptor).GetCmykF(out c,out m,out y,out k);
		}
		[SmokeMethod("setCmykF", "(qreal, qreal, qreal, qreal, qreal)", "$$$$$")]
		public void SetCmykF(double c, double m, double y, double k, double a) {
			((QColor) interceptor).SetCmykF(c,m,y,k,a);
		}
		[SmokeMethod("setCmykF", "(qreal, qreal, qreal, qreal)", "$$$$")]
		public void SetCmykF(double c, double m, double y, double k) {
			((QColor) interceptor).SetCmykF(c,m,y,k);
		}
		[SmokeMethod("toRgb", "() const", "")]
		public QColor ToRgb() {
			return ((QColor) interceptor).ToRgb();
		}
		[SmokeMethod("toHsv", "() const", "")]
		public QColor ToHsv() {
			return ((QColor) interceptor).ToHsv();
		}
		[SmokeMethod("toCmyk", "() const", "")]
		public QColor ToCmyk() {
			return ((QColor) interceptor).ToCmyk();
		}
		[SmokeMethod("convertTo", "(QColor::Spec) const", "$")]
		public QColor ConvertTo(QColor.Spec colorSpec) {
			return ((QColor) interceptor).ConvertTo(colorSpec);
		}
		[SmokeMethod("light", "(int) const", "$")]
		public QColor Light(int f) {
			return ((QColor) interceptor).Light(f);
		}
		[SmokeMethod("light", "() const", "")]
		public QColor Light() {
			return ((QColor) interceptor).Light();
		}
		[SmokeMethod("dark", "(int) const", "$")]
		public QColor Dark(int f) {
			return ((QColor) interceptor).Dark(f);
		}
		[SmokeMethod("dark", "() const", "")]
		public QColor Dark() {
			return ((QColor) interceptor).Dark();
		}
		public override bool Equals(object o) {
			if (!(o is QColor)) { return false; }
			return this == (QColor) o;
		}
		public override int GetHashCode() {
			return ((QColor) interceptor).GetHashCode();
		}
		~QColor() {
			DisposeQColor();
		}
		public void Dispose() {
			DisposeQColor();
		}
		[SmokeMethod("~QColor", "()", "")]
		private void DisposeQColor() {
			((QColor) interceptor).DisposeQColor();
		}
		public static bool operator==(QColor lhs, QColor c) {
			return staticInterceptor.op_equals(lhs,c);
		}
		public static bool operator!=(QColor lhs, QColor c) {
			return !staticInterceptor.op_equals(lhs,c);
		}
		public static List<string> ColorNames() {
			return staticInterceptor.ColorNames();
		}
		public static QColor FromRgb(uint rgb) {
			return staticInterceptor.FromRgb(rgb);
		}
		public static QColor FromRgba(uint rgba) {
			return staticInterceptor.FromRgba(rgba);
		}
		public static QColor FromRgb(int r, int g, int b, int a) {
			return staticInterceptor.FromRgb(r,g,b,a);
		}
		public static QColor FromRgb(int r, int g, int b) {
			return staticInterceptor.FromRgb(r,g,b);
		}
		public static QColor FromRgbF(double r, double g, double b, double a) {
			return staticInterceptor.FromRgbF(r,g,b,a);
		}
		public static QColor FromRgbF(double r, double g, double b) {
			return staticInterceptor.FromRgbF(r,g,b);
		}
		public static QColor FromHsv(int h, int s, int v, int a) {
			return staticInterceptor.FromHsv(h,s,v,a);
		}
		public static QColor FromHsv(int h, int s, int v) {
			return staticInterceptor.FromHsv(h,s,v);
		}
		public static QColor FromHsvF(double h, double s, double v, double a) {
			return staticInterceptor.FromHsvF(h,s,v,a);
		}
		public static QColor FromHsvF(double h, double s, double v) {
			return staticInterceptor.FromHsvF(h,s,v);
		}
		public static QColor FromCmyk(int c, int m, int y, int k, int a) {
			return staticInterceptor.FromCmyk(c,m,y,k,a);
		}
		public static QColor FromCmyk(int c, int m, int y, int k) {
			return staticInterceptor.FromCmyk(c,m,y,k);
		}
		public static QColor FromCmykF(double c, double m, double y, double k, double a) {
			return staticInterceptor.FromCmykF(c,m,y,k,a);
		}
		public static QColor FromCmykF(double c, double m, double y, double k) {
			return staticInterceptor.FromCmykF(c,m,y,k);
		}
	}
}
