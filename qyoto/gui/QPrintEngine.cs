//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QPrintEngine")]
	public abstract class QPrintEngine : MarshalByRefObject {
		protected Object _interceptor = null;
		private IntPtr _smokeObject;
		protected QPrintEngine(Type dummy) {}
		[SmokeClass("QPrintEngine")]
		interface IQPrintEngineProxy {
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QPrintEngine), this);
			_interceptor = (QPrintEngine) realProxy.GetTransparentProxy();
		}
		private QPrintEngine ProxyQPrintEngine() {
			return (QPrintEngine) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QPrintEngine() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQPrintEngineProxy), null);
			_staticInterceptor = (IQPrintEngineProxy) realProxy.GetTransparentProxy();
		}
		private static IQPrintEngineProxy StaticQPrintEngine() {
			return (IQPrintEngineProxy) _staticInterceptor;
		}
		public enum PrintEnginePropertyKey {
			PPK_CollateCopies = 0,
			PPK_ColorMode = 1,
			PPK_Creator = 2,
			PPK_DocumentName = 3,
			PPK_FullPage = 4,
			PPK_NumberOfCopies = 5,
			PPK_Orientation = 6,
			PPK_OutputFileName = 7,
			PPK_PageOrder = 8,
			PPK_PageRect = 9,
			PPK_PageSize = 10,
			PPK_PaperRect = 11,
			PPK_PaperSource = 12,
			PPK_PrinterName = 13,
			PPK_PrinterProgram = 14,
			PPK_Resolution = 15,
			PPK_SelectionOption = 16,
			PPK_SupportedResolutions = 17,
			PPK_WindowsPageSize = 18,
			PPK_FontEmbedding = 19,
			PPK_SuppressSystemPrintStatus = 20,
			PPK_Duplex = 21,
			PPK_CustomBase = 0xff00,
		}
		public abstract void SetProperty(QPrintEngine.PrintEnginePropertyKey key, QVariant value);
		public abstract QVariant Property(QPrintEngine.PrintEnginePropertyKey key);
		public abstract bool NewPage();
		public abstract bool Abort();
		public abstract int Metric(IQPaintDevice arg1);
		public abstract QPrinter.PrinterState PrinterState();
		public QPrintEngine() : this((Type) null) {
			CreateProxy();
			NewQPrintEngine();
		}
		[SmokeMethod("QPrintEngine", "()", "")]
		private void NewQPrintEngine() {
			ProxyQPrintEngine().NewQPrintEngine();
		}
		~QPrintEngine() {
			DisposeQPrintEngine();
		}
		public void Dispose() {
			DisposeQPrintEngine();
		}
		[SmokeMethod("~QPrintEngine", "()", "")]
		private void DisposeQPrintEngine() {
			ProxyQPrintEngine().DisposeQPrintEngine();
		}
	}
}
