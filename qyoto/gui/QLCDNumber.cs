//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	/// See <see cref="IQLCDNumberSignals"></see> for signals emitted by QLCDNumber
	[SmokeClass("QLCDNumber")]
	public class QLCDNumber : QFrame, IDisposable {
 		protected QLCDNumber(Type dummy) : base((Type) null) {}
		[SmokeClass("QLCDNumber")]
		interface IQLCDNumberProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QLCDNumber), this);
			interceptor = (QLCDNumber) realProxy.GetTransparentProxy();
		}
		private static IQLCDNumberProxy staticInterceptor = null;
		static QLCDNumber() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQLCDNumberProxy), null);
			staticInterceptor = (IQLCDNumberProxy) realProxy.GetTransparentProxy();
		}
		public enum Mode {
			Hex = 0,
			Dec = 1,
			Oct = 2,
			Bin = 3,
		}
		public enum SegmentStyle {
			Outline = 0,
			Filled = 1,
			Flat = 2,
		}
		[Q_PROPERTY("bool", "smallDecimalPoint")]
		public bool SmallDecimalPoint {
			[SmokeMethod("smallDecimalPoint", "()", "")]
			get { return ((QLCDNumber) interceptor).SmallDecimalPoint; }
			[SmokeMethod("setSmallDecimalPoint", "(bool)", "$")]
			set { ((QLCDNumber) interceptor).SmallDecimalPoint = value; }
		}
		[Q_PROPERTY("int", "numDigits")]
		public int NumDigits {
			[SmokeMethod("numDigits", "()", "")]
			get { return ((QLCDNumber) interceptor).NumDigits; }
			[SmokeMethod("setNumDigits", "(int)", "$")]
			set { ((QLCDNumber) interceptor).NumDigits = value; }
		}
		[Q_PROPERTY("QLCDNumber::Mode", "mode")]
		public QLCDNumber.Mode mode {
			[SmokeMethod("mode", "()", "")]
			get { return ((QLCDNumber) interceptor).mode; }
			[SmokeMethod("setMode", "(QLCDNumber::Mode)", "$")]
			set { ((QLCDNumber) interceptor).mode = value; }
		}
		[Q_PROPERTY("QLCDNumber::SegmentStyle", "segmentStyle")]
		public QLCDNumber.SegmentStyle segmentStyle {
			[SmokeMethod("segmentStyle", "()", "")]
			get { return ((QLCDNumber) interceptor).segmentStyle; }
			[SmokeMethod("setSegmentStyle", "(QLCDNumber::SegmentStyle)", "$")]
			set { ((QLCDNumber) interceptor).segmentStyle = value; }
		}
		[Q_PROPERTY("double", "value")]
		public double Value {
			[SmokeMethod("value", "()", "")]
			get { return ((QLCDNumber) interceptor).Value; }
			[SmokeMethod("display", "(double)", "$")]
			set { ((QLCDNumber) interceptor).Value = value; }
		}
		[Q_PROPERTY("int", "intValue")]
		public int IntValue {
			[SmokeMethod("intValue", "()", "")]
			get { return ((QLCDNumber) interceptor).IntValue; }
			[SmokeMethod("display", "(int)", "$")]
			set { ((QLCDNumber) interceptor).IntValue = value; }
		}
		public QLCDNumber(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQLCDNumber(parent);
		}
		[SmokeMethod("QLCDNumber", "(QWidget*)", "#")]
		private void NewQLCDNumber(QWidget parent) {
			((QLCDNumber) interceptor).NewQLCDNumber(parent);
		}
		public QLCDNumber() : this((Type) null) {
			CreateProxy();
			NewQLCDNumber();
		}
		[SmokeMethod("QLCDNumber", "()", "")]
		private void NewQLCDNumber() {
			((QLCDNumber) interceptor).NewQLCDNumber();
		}
		public QLCDNumber(uint numDigits, QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQLCDNumber(numDigits,parent);
		}
		[SmokeMethod("QLCDNumber", "(uint, QWidget*)", "$#")]
		private void NewQLCDNumber(uint numDigits, QWidget parent) {
			((QLCDNumber) interceptor).NewQLCDNumber(numDigits,parent);
		}
		public QLCDNumber(uint numDigits) : this((Type) null) {
			CreateProxy();
			NewQLCDNumber(numDigits);
		}
		[SmokeMethod("QLCDNumber", "(uint)", "$")]
		private void NewQLCDNumber(uint numDigits) {
			((QLCDNumber) interceptor).NewQLCDNumber(numDigits);
		}
		[SmokeMethod("checkOverflow", "(double) const", "$")]
		public bool CheckOverflow(double num) {
			return ((QLCDNumber) interceptor).CheckOverflow(num);
		}
		[SmokeMethod("checkOverflow", "(int) const", "$")]
		public bool CheckOverflow(int num) {
			return ((QLCDNumber) interceptor).CheckOverflow(num);
		}
		[SmokeMethod("sizeHint", "() const", "")]
		public override QSize SizeHint() {
			return ((QLCDNumber) interceptor).SizeHint();
		}
		[Q_SLOT("void display(const QString&)")]
		[SmokeMethod("display", "(const QString&)", "$")]
		public void Display(string str) {
			((QLCDNumber) interceptor).Display(str);
		}
		[Q_SLOT("void display(int)")]
		[SmokeMethod("display", "(int)", "$")]
		public void Display(int num) {
			((QLCDNumber) interceptor).Display(num);
		}
		[Q_SLOT("void display(double)")]
		[SmokeMethod("display", "(double)", "$")]
		public void Display(double num) {
			((QLCDNumber) interceptor).Display(num);
		}
		[Q_SLOT("void setHexMode()")]
		[SmokeMethod("setHexMode", "()", "")]
		public void SetHexMode() {
			((QLCDNumber) interceptor).SetHexMode();
		}
		[Q_SLOT("void setDecMode()")]
		[SmokeMethod("setDecMode", "()", "")]
		public void SetDecMode() {
			((QLCDNumber) interceptor).SetDecMode();
		}
		[Q_SLOT("void setOctMode()")]
		[SmokeMethod("setOctMode", "()", "")]
		public void SetOctMode() {
			((QLCDNumber) interceptor).SetOctMode();
		}
		[Q_SLOT("void setBinMode()")]
		[SmokeMethod("setBinMode", "()", "")]
		public void SetBinMode() {
			((QLCDNumber) interceptor).SetBinMode();
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		protected override bool Event(QEvent e) {
			return ((QLCDNumber) interceptor).Event(e);
		}
		[SmokeMethod("paintEvent", "(QPaintEvent*)", "#")]
		protected override void PaintEvent(QPaintEvent arg1) {
			((QLCDNumber) interceptor).PaintEvent(arg1);
		}
		~QLCDNumber() {
			DisposeQLCDNumber();
		}
		public new void Dispose() {
			DisposeQLCDNumber();
		}
		[SmokeMethod("~QLCDNumber", "()", "")]
		private void DisposeQLCDNumber() {
			((QLCDNumber) interceptor).DisposeQLCDNumber();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQLCDNumberSignals Emit {
			get { return (IQLCDNumberSignals) Q_EMIT; }
		}
	}

	public interface IQLCDNumberSignals : IQFrameSignals {
		[Q_SIGNAL("void overflow()")]
		void Overflow();
	}
}
