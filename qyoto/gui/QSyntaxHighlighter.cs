//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QSyntaxHighlighter")]
	public abstract class QSyntaxHighlighter : QObject {
 		protected QSyntaxHighlighter(Type dummy) : base((Type) null) {}
		[SmokeClass("QSyntaxHighlighter")]
		interface IQSyntaxHighlighterProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSyntaxHighlighter), this);
			interceptor = (QSyntaxHighlighter) realProxy.GetTransparentProxy();
		}
		private static IQSyntaxHighlighterProxy staticInterceptor = null;
		static QSyntaxHighlighter() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSyntaxHighlighterProxy), null);
			staticInterceptor = (IQSyntaxHighlighterProxy) realProxy.GetTransparentProxy();
		}
		public QSyntaxHighlighter(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQSyntaxHighlighter(parent);
		}
		[SmokeMethod("QSyntaxHighlighter", "(QObject*)", "#")]
		private void NewQSyntaxHighlighter(QObject parent) {
			((QSyntaxHighlighter) interceptor).NewQSyntaxHighlighter(parent);
		}
		public QSyntaxHighlighter(QTextDocument parent) : this((Type) null) {
			CreateProxy();
			NewQSyntaxHighlighter(parent);
		}
		[SmokeMethod("QSyntaxHighlighter", "(QTextDocument*)", "#")]
		private void NewQSyntaxHighlighter(QTextDocument parent) {
			((QSyntaxHighlighter) interceptor).NewQSyntaxHighlighter(parent);
		}
		public QSyntaxHighlighter(QTextEdit parent) : this((Type) null) {
			CreateProxy();
			NewQSyntaxHighlighter(parent);
		}
		[SmokeMethod("QSyntaxHighlighter", "(QTextEdit*)", "#")]
		private void NewQSyntaxHighlighter(QTextEdit parent) {
			((QSyntaxHighlighter) interceptor).NewQSyntaxHighlighter(parent);
		}
		[SmokeMethod("setDocument", "(QTextDocument*)", "#")]
		public void SetDocument(QTextDocument doc) {
			((QSyntaxHighlighter) interceptor).SetDocument(doc);
		}
		[SmokeMethod("document", "() const", "")]
		public QTextDocument Document() {
			return ((QSyntaxHighlighter) interceptor).Document();
		}
		[Q_SLOT("void rehighlight()")]
		[SmokeMethod("rehighlight", "()", "")]
		public void Rehighlight() {
			((QSyntaxHighlighter) interceptor).Rehighlight();
		}
		[SmokeMethod("highlightBlock", "(const QString&)", "$")]
		protected abstract void HighlightBlock(string text);
		[SmokeMethod("setFormat", "(int, int, const QTextCharFormat&)", "$$#")]
		protected void SetFormat(int start, int count, QTextCharFormat format) {
			((QSyntaxHighlighter) interceptor).SetFormat(start,count,format);
		}
		[SmokeMethod("setFormat", "(int, int, const QColor&)", "$$#")]
		protected void SetFormat(int start, int count, QColor color) {
			((QSyntaxHighlighter) interceptor).SetFormat(start,count,color);
		}
		[SmokeMethod("setFormat", "(int, int, const QFont&)", "$$#")]
		protected void SetFormat(int start, int count, QFont font) {
			((QSyntaxHighlighter) interceptor).SetFormat(start,count,font);
		}
		[SmokeMethod("format", "(int) const", "$")]
		protected QTextCharFormat Format(int pos) {
			return ((QSyntaxHighlighter) interceptor).Format(pos);
		}
		[SmokeMethod("previousBlockState", "() const", "")]
		protected int PreviousBlockState() {
			return ((QSyntaxHighlighter) interceptor).PreviousBlockState();
		}
		[SmokeMethod("currentBlockState", "() const", "")]
		protected int CurrentBlockState() {
			return ((QSyntaxHighlighter) interceptor).CurrentBlockState();
		}
		[SmokeMethod("setCurrentBlockState", "(int)", "$")]
		protected void SetCurrentBlockState(int newState) {
			((QSyntaxHighlighter) interceptor).SetCurrentBlockState(newState);
		}
		[SmokeMethod("setCurrentBlockUserData", "(QTextBlockUserData*)", "#")]
		protected void SetCurrentBlockUserData(QTextBlockUserData data) {
			((QSyntaxHighlighter) interceptor).SetCurrentBlockUserData(data);
		}
		[SmokeMethod("currentBlockUserData", "() const", "")]
		protected QTextBlockUserData CurrentBlockUserData() {
			return ((QSyntaxHighlighter) interceptor).CurrentBlockUserData();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQSyntaxHighlighterSignals Emit {
			get { return (IQSyntaxHighlighterSignals) Q_EMIT; }
		}
	}

	public interface IQSyntaxHighlighterSignals : IQObjectSignals {
	}
}
