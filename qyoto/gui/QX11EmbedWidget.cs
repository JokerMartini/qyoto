//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	/// See <see cref="IQX11EmbedWidgetSignals"></see> for signals emitted by QX11EmbedWidget
	[SmokeClass("QX11EmbedWidget")]
	public class QX11EmbedWidget : QWidget, IDisposable {
 		protected QX11EmbedWidget(Type dummy) : base((Type) null) {}
		[SmokeClass("QX11EmbedWidget")]
		interface IQX11EmbedWidgetProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QX11EmbedWidget), this);
			interceptor = (QX11EmbedWidget) realProxy.GetTransparentProxy();
		}
		private static IQX11EmbedWidgetProxy staticInterceptor = null;
		static QX11EmbedWidget() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQX11EmbedWidgetProxy), null);
			staticInterceptor = (IQX11EmbedWidgetProxy) realProxy.GetTransparentProxy();
		}
		public enum Error {
			Unknown = 0,
			Internal = 1,
			InvalidWindowID = 2,
		}
		// bool x11Event(XEvent* arg1); >>>> NOT CONVERTED
		public QX11EmbedWidget(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQX11EmbedWidget(parent);
		}
		[SmokeMethod("QX11EmbedWidget", "(QWidget*)", "#")]
		private void NewQX11EmbedWidget(QWidget parent) {
			((QX11EmbedWidget) interceptor).NewQX11EmbedWidget(parent);
		}
		public QX11EmbedWidget() : this((Type) null) {
			CreateProxy();
			NewQX11EmbedWidget();
		}
		[SmokeMethod("QX11EmbedWidget", "()", "")]
		private void NewQX11EmbedWidget() {
			((QX11EmbedWidget) interceptor).NewQX11EmbedWidget();
		}
		[SmokeMethod("embedInto", "(WId)", "$")]
		public void EmbedInto(ulong id) {
			((QX11EmbedWidget) interceptor).EmbedInto(id);
		}
		[SmokeMethod("containerWinId", "() const", "")]
		public ulong ContainerWinId() {
			return ((QX11EmbedWidget) interceptor).ContainerWinId();
		}
		[SmokeMethod("error", "() const", "")]
		public QX11EmbedWidget.Error error() {
			return ((QX11EmbedWidget) interceptor).error();
		}
		[SmokeMethod("eventFilter", "(QObject*, QEvent*)", "##")]
		protected new virtual bool EventFilter(QObject arg1, QEvent arg2) {
			return ((QX11EmbedWidget) interceptor).EventFilter(arg1,arg2);
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		protected override bool Event(QEvent arg1) {
			return ((QX11EmbedWidget) interceptor).Event(arg1);
		}
		[SmokeMethod("resizeEvent", "(QResizeEvent*)", "#")]
		protected override void ResizeEvent(QResizeEvent arg1) {
			((QX11EmbedWidget) interceptor).ResizeEvent(arg1);
		}
		~QX11EmbedWidget() {
			DisposeQX11EmbedWidget();
		}
		public new void Dispose() {
			DisposeQX11EmbedWidget();
		}
		[SmokeMethod("~QX11EmbedWidget", "()", "")]
		private void DisposeQX11EmbedWidget() {
			((QX11EmbedWidget) interceptor).DisposeQX11EmbedWidget();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQX11EmbedWidgetSignals Emit {
			get { return (IQX11EmbedWidgetSignals) Q_EMIT; }
		}
	}

	public interface IQX11EmbedWidgetSignals : IQWidgetSignals {
		[Q_SIGNAL("void embedded()")]
		void Embedded();
		[Q_SIGNAL("void containerClosed()")]
		void ContainerClosed();
		[Q_SIGNAL("void error(QX11EmbedWidget::Error)")]
		void Error(QX11EmbedWidget.Error error);
	}
}
