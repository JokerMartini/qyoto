//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QRubberBand")]
	public class QRubberBand : QWidget, IDisposable {
 		protected QRubberBand(Type dummy) : base((Type) null) {}
		[SmokeClass("QRubberBand")]
		interface IQRubberBandProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QRubberBand), this);
			_interceptor = (QRubberBand) realProxy.GetTransparentProxy();
		}
		private QRubberBand ProxyQRubberBand() {
			return (QRubberBand) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QRubberBand() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQRubberBandProxy), null);
			_staticInterceptor = (IQRubberBandProxy) realProxy.GetTransparentProxy();
		}
		private static IQRubberBandProxy StaticQRubberBand() {
			return (IQRubberBandProxy) _staticInterceptor;
		}
		public enum Shape {
			Line = 0,
			Rectangle = 1,
		}
		public QRubberBand(QRubberBand.Shape arg1, QWidget arg2) : this((Type) null) {
			CreateProxy();
			NewQRubberBand(arg1,arg2);
		}
		[SmokeMethod("QRubberBand", "(QRubberBand::Shape, QWidget*)", "$#")]
		private void NewQRubberBand(QRubberBand.Shape arg1, QWidget arg2) {
			ProxyQRubberBand().NewQRubberBand(arg1,arg2);
		}
		public QRubberBand(QRubberBand.Shape arg1) : this((Type) null) {
			CreateProxy();
			NewQRubberBand(arg1);
		}
		[SmokeMethod("QRubberBand", "(QRubberBand::Shape)", "$")]
		private void NewQRubberBand(QRubberBand.Shape arg1) {
			ProxyQRubberBand().NewQRubberBand(arg1);
		}
		[SmokeMethod("shape", "() const", "")]
		public QRubberBand.Shape shape() {
			return ProxyQRubberBand().shape();
		}
		[SmokeMethod("setGeometry", "(const QRect&)", "#")]
		public void SetGeometry(QRect r) {
			ProxyQRubberBand().SetGeometry(r);
		}
		[SmokeMethod("setGeometry", "(int, int, int, int)", "$$$$")]
		public void SetGeometry(int x, int y, int w, int h) {
			ProxyQRubberBand().SetGeometry(x,y,w,h);
		}
		[SmokeMethod("move", "(int, int)", "$$")]
		public void Move(int x, int y) {
			ProxyQRubberBand().Move(x,y);
		}
		[SmokeMethod("move", "(const QPoint&)", "#")]
		public void Move(QPoint p) {
			ProxyQRubberBand().Move(p);
		}
		[SmokeMethod("resize", "(int, int)", "$$")]
		public void Resize(int w, int h) {
			ProxyQRubberBand().Resize(w,h);
		}
		[SmokeMethod("resize", "(const QSize&)", "#")]
		public void Resize(QSize s) {
			ProxyQRubberBand().Resize(s);
		}
		public static string Tr(string s, string c) {
			return StaticQRubberBand().Tr(s,c);
		}
		public static string Tr(string s) {
			return StaticQRubberBand().Tr(s);
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		protected override bool Event(QEvent e) {
			return ProxyQRubberBand().Event(e);
		}
		[SmokeMethod("paintEvent", "(QPaintEvent*)", "#")]
		protected override void PaintEvent(QPaintEvent arg1) {
			ProxyQRubberBand().PaintEvent(arg1);
		}
		[SmokeMethod("changeEvent", "(QEvent*)", "#")]
		protected override void ChangeEvent(QEvent arg1) {
			ProxyQRubberBand().ChangeEvent(arg1);
		}
		[SmokeMethod("showEvent", "(QShowEvent*)", "#")]
		protected override void ShowEvent(QShowEvent arg1) {
			ProxyQRubberBand().ShowEvent(arg1);
		}
		[SmokeMethod("resizeEvent", "(QResizeEvent*)", "#")]
		protected override void ResizeEvent(QResizeEvent arg1) {
			ProxyQRubberBand().ResizeEvent(arg1);
		}
		[SmokeMethod("moveEvent", "(QMoveEvent*)", "#")]
		protected override void MoveEvent(QMoveEvent arg1) {
			ProxyQRubberBand().MoveEvent(arg1);
		}
		~QRubberBand() {
			DisposeQRubberBand();
		}
		public new void Dispose() {
			DisposeQRubberBand();
		}
		[SmokeMethod("~QRubberBand", "()", "")]
		private void DisposeQRubberBand() {
			ProxyQRubberBand().DisposeQRubberBand();
		}
		protected new IQRubberBandSignals Emit {
			get { return (IQRubberBandSignals) Q_EMIT; }
		}
	}

	public interface IQRubberBandSignals : IQWidgetSignals {
	}
}
