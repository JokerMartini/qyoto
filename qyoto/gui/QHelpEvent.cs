//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QHelpEvent")]
	public class QHelpEvent : QEvent, IDisposable {
 		protected QHelpEvent(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QHelpEvent), this);
			interceptor = (QHelpEvent) realProxy.GetTransparentProxy();
		}
		public QHelpEvent(QEvent.TypeOf type, QPoint pos, QPoint globalPos) : this((Type) null) {
			CreateProxy();
			NewQHelpEvent(type,pos,globalPos);
		}
		[SmokeMethod("QHelpEvent", "(QEvent::Type, const QPoint&, const QPoint&)", "$##")]
		private void NewQHelpEvent(QEvent.TypeOf type, QPoint pos, QPoint globalPos) {
			((QHelpEvent) interceptor).NewQHelpEvent(type,pos,globalPos);
		}
		[SmokeMethod("x", "() const", "")]
		public int X() {
			return ((QHelpEvent) interceptor).X();
		}
		[SmokeMethod("y", "() const", "")]
		public int Y() {
			return ((QHelpEvent) interceptor).Y();
		}
		[SmokeMethod("globalX", "() const", "")]
		public int GlobalX() {
			return ((QHelpEvent) interceptor).GlobalX();
		}
		[SmokeMethod("globalY", "() const", "")]
		public int GlobalY() {
			return ((QHelpEvent) interceptor).GlobalY();
		}
		[SmokeMethod("pos", "() const", "")]
		public QPoint Pos() {
			return ((QHelpEvent) interceptor).Pos();
		}
		[SmokeMethod("globalPos", "() const", "")]
		public QPoint GlobalPos() {
			return ((QHelpEvent) interceptor).GlobalPos();
		}
		~QHelpEvent() {
			DisposeQHelpEvent();
		}
		public new void Dispose() {
			DisposeQHelpEvent();
		}
		[SmokeMethod("~QHelpEvent", "()", "")]
		private void DisposeQHelpEvent() {
			((QHelpEvent) interceptor).DisposeQHelpEvent();
		}
	}
}
