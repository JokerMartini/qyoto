//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QTextLength")]
	public class QTextLength : MarshalByRefObject, IDisposable {
		protected QTextLength interceptor = null;
		private IntPtr smokeObject;
		protected QTextLength(Type dummy) {}
		[SmokeClass("QTextLength")]
		interface IQTextLengthProxy {
			[SmokeMethod("operator==", "(const QTextLength&) const", "#")]
			bool op_equals(QTextLength lhs, QTextLength other);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTextLength), this);
			interceptor = (QTextLength) realProxy.GetTransparentProxy();
		}
		private static IQTextLengthProxy staticInterceptor = null;
		static QTextLength() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQTextLengthProxy), null);
			staticInterceptor = (IQTextLengthProxy) realProxy.GetTransparentProxy();
		}
		public enum TypeOf {
			VariableLength = 0,
			FixedLength = 1,
			PercentageLength = 2,
		}
		//  operator QVariant(); >>>> NOT CONVERTED
		public QTextLength() : this((Type) null) {
			CreateProxy();
			NewQTextLength();
		}
		[SmokeMethod("QTextLength", "()", "")]
		private void NewQTextLength() {
			((QTextLength) interceptor).NewQTextLength();
		}
		public QTextLength(QTextLength.TypeOf type, double value) : this((Type) null) {
			CreateProxy();
			NewQTextLength(type,value);
		}
		[SmokeMethod("QTextLength", "(QTextLength::Type, qreal)", "$$")]
		private void NewQTextLength(QTextLength.TypeOf type, double value) {
			((QTextLength) interceptor).NewQTextLength(type,value);
		}
		[SmokeMethod("type", "() const", "")]
		public QTextLength.TypeOf type() {
			return ((QTextLength) interceptor).type();
		}
		[SmokeMethod("value", "(qreal) const", "$")]
		public double Value(double maximumLength) {
			return ((QTextLength) interceptor).Value(maximumLength);
		}
		[SmokeMethod("rawValue", "() const", "")]
		public double RawValue() {
			return ((QTextLength) interceptor).RawValue();
		}
		public override bool Equals(object o) {
			if (!(o is QTextLength)) { return false; }
			return this == (QTextLength) o;
		}
		public override int GetHashCode() {
			return ((QTextLength) interceptor).GetHashCode();
		}
		~QTextLength() {
			DisposeQTextLength();
		}
		public void Dispose() {
			DisposeQTextLength();
		}
		[SmokeMethod("~QTextLength", "()", "")]
		private void DisposeQTextLength() {
			((QTextLength) interceptor).DisposeQTextLength();
		}
		public static bool operator==(QTextLength lhs, QTextLength other) {
			return staticInterceptor.op_equals(lhs,other);
		}
		public static bool operator!=(QTextLength lhs, QTextLength other) {
			return !staticInterceptor.op_equals(lhs,other);
		}
	}
}
