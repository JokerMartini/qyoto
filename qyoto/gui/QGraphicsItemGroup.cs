//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QGraphicsItemGroup")]
	public class QGraphicsItemGroup : QGraphicsItem, IDisposable {
 		protected QGraphicsItemGroup(Type dummy) : base((Type) null) {}
		[SmokeClass("QGraphicsItemGroup")]
		interface IQGraphicsItemGroupProxy {
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QGraphicsItemGroup), this);
			_interceptor = (QGraphicsItemGroup) realProxy.GetTransparentProxy();
		}
		private QGraphicsItemGroup ProxyQGraphicsItemGroup() {
			return (QGraphicsItemGroup) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QGraphicsItemGroup() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQGraphicsItemGroupProxy), null);
			_staticInterceptor = (IQGraphicsItemGroupProxy) realProxy.GetTransparentProxy();
		}
		private static IQGraphicsItemGroupProxy StaticQGraphicsItemGroup() {
			return (IQGraphicsItemGroupProxy) _staticInterceptor;
		}
		public const int Type = 10;

		public QGraphicsItemGroup(QGraphicsItem parent, QGraphicsScene scene) : this((Type) null) {
			CreateProxy();
			NewQGraphicsItemGroup(parent,scene);
		}
		[SmokeMethod("QGraphicsItemGroup", "(QGraphicsItem*, QGraphicsScene*)", "##")]
		private void NewQGraphicsItemGroup(QGraphicsItem parent, QGraphicsScene scene) {
			ProxyQGraphicsItemGroup().NewQGraphicsItemGroup(parent,scene);
		}
		public QGraphicsItemGroup(QGraphicsItem parent) : this((Type) null) {
			CreateProxy();
			NewQGraphicsItemGroup(parent);
		}
		[SmokeMethod("QGraphicsItemGroup", "(QGraphicsItem*)", "#")]
		private void NewQGraphicsItemGroup(QGraphicsItem parent) {
			ProxyQGraphicsItemGroup().NewQGraphicsItemGroup(parent);
		}
		public QGraphicsItemGroup() : this((Type) null) {
			CreateProxy();
			NewQGraphicsItemGroup();
		}
		[SmokeMethod("QGraphicsItemGroup", "()", "")]
		private void NewQGraphicsItemGroup() {
			ProxyQGraphicsItemGroup().NewQGraphicsItemGroup();
		}
		[SmokeMethod("addToGroup", "(QGraphicsItem*)", "#")]
		public void AddToGroup(QGraphicsItem item) {
			ProxyQGraphicsItemGroup().AddToGroup(item);
		}
		[SmokeMethod("removeFromGroup", "(QGraphicsItem*)", "#")]
		public void RemoveFromGroup(QGraphicsItem item) {
			ProxyQGraphicsItemGroup().RemoveFromGroup(item);
		}
		[SmokeMethod("boundingRect", "() const", "")]
		public override QRectF BoundingRect() {
			return ProxyQGraphicsItemGroup().BoundingRect();
		}
		[SmokeMethod("paint", "(QPainter*, const QStyleOptionGraphicsItem*, QWidget*)", "###")]
		public override void Paint(QPainter painter, QStyleOptionGraphicsItem option, QWidget widget) {
			ProxyQGraphicsItemGroup().Paint(painter,option,widget);
		}
		[SmokeMethod("paint", "(QPainter*, const QStyleOptionGraphicsItem*)", "##")]
		public override void Paint(QPainter painter, QStyleOptionGraphicsItem option) {
			ProxyQGraphicsItemGroup().Paint(painter,option);
		}
		[SmokeMethod("isObscuredBy", "(const QGraphicsItem*) const", "#")]
		public override bool IsObscuredBy(QGraphicsItem item) {
			return ProxyQGraphicsItemGroup().IsObscuredBy(item);
		}
		[SmokeMethod("opaqueArea", "() const", "")]
		public override QPainterPath OpaqueArea() {
			return ProxyQGraphicsItemGroup().OpaqueArea();
		}
		[SmokeMethod("type", "() const", "")]
		public override int type() {
			return ProxyQGraphicsItemGroup().type();
		}
		~QGraphicsItemGroup() {
			DisposeQGraphicsItemGroup();
		}
		public void Dispose() {
			DisposeQGraphicsItemGroup();
		}
		[SmokeMethod("~QGraphicsItemGroup", "()", "")]
		private void DisposeQGraphicsItemGroup() {
			ProxyQGraphicsItemGroup().DisposeQGraphicsItemGroup();
		}
	}
}
