//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;

	[SmokeClass("QRegExpValidator")]
	public class QRegExpValidator : QValidator, IDisposable {
 		protected QRegExpValidator(Type dummy) : base((Type) null) {}
		[SmokeClass("QRegExpValidator")]
		interface IQRegExpValidatorProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QRegExpValidator), this);
			interceptor = (QRegExpValidator) realProxy.GetTransparentProxy();
		}
		private static IQRegExpValidatorProxy staticInterceptor = null;
		static QRegExpValidator() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQRegExpValidatorProxy), null);
			staticInterceptor = (IQRegExpValidatorProxy) realProxy.GetTransparentProxy();
		}
		[Q_PROPERTY("QRegExp", "regExp")]
		public QRegExp RegExp {
			get { return Property("regExp").Value<QRegExp>(); }
			set { SetProperty("regExp", QVariant.FromValue<QRegExp>(value)); }
		}
		public QRegExpValidator(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQRegExpValidator(parent);
		}
		[SmokeMethod("QRegExpValidator", "(QObject*)", "#")]
		private void NewQRegExpValidator(QObject parent) {
			((QRegExpValidator) interceptor).NewQRegExpValidator(parent);
		}
		public QRegExpValidator(QRegExp rx, QObject parent) : this((Type) null) {
			CreateProxy();
			NewQRegExpValidator(rx,parent);
		}
		[SmokeMethod("QRegExpValidator", "(const QRegExp&, QObject*)", "##")]
		private void NewQRegExpValidator(QRegExp rx, QObject parent) {
			((QRegExpValidator) interceptor).NewQRegExpValidator(rx,parent);
		}
		[SmokeMethod("validate", "(QString&, int&) const", "$$")]
		public override int Validate(StringBuilder input, out int pos) {
			return ((QRegExpValidator) interceptor).Validate(input,out pos);
		}
		~QRegExpValidator() {
			DisposeQRegExpValidator();
		}
		public new void Dispose() {
			DisposeQRegExpValidator();
		}
		[SmokeMethod("~QRegExpValidator", "()", "")]
		private void DisposeQRegExpValidator() {
			((QRegExpValidator) interceptor).DisposeQRegExpValidator();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQRegExpValidatorSignals Emit {
			get { return (IQRegExpValidatorSignals) Q_EMIT; }
		}
	}

	public interface IQRegExpValidatorSignals : IQValidatorSignals {
	}
}
