//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;

	[SmokeClass("QRegExpValidator")]
	public class QRegExpValidator : QValidator, IDisposable {
 		protected QRegExpValidator(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(QRegExpValidator), this);
		}
		private static SmokeInvocation staticInterceptor = null;
		static QRegExpValidator() {
			staticInterceptor = new SmokeInvocation(typeof(QRegExpValidator), null);
		}
		[Q_PROPERTY("QRegExp", "regExp")]
		public QRegExp RegExp {
			get { return (QRegExp) interceptor.Invoke("regExp", "regExp()", typeof(QRegExp)); }
			set { interceptor.Invoke("setRegExp#", "setRegExp(QRegExp)", typeof(void), typeof(QRegExp), value); }
		}
		public QRegExpValidator(QObject parent) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QRegExpValidator#", "QRegExpValidator(QObject*)", typeof(void), typeof(QObject), parent);
		}
		public QRegExpValidator(QRegExp rx, QObject parent) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QRegExpValidator##", "QRegExpValidator(const QRegExp&, QObject*)", typeof(void), typeof(QRegExp), rx, typeof(QObject), parent);
		}
		[SmokeMethod("validate(QString&, int&) const")]
		public override int Validate(StringBuilder input, int pos) {
			return (int) interceptor.Invoke("validate$$", "validate(QString&, int&) const", typeof(int), typeof(StringBuilder), input, typeof(int), pos);
		}
		~QRegExpValidator() {
			interceptor.Invoke("~QRegExpValidator", "~QRegExpValidator()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~QRegExpValidator", "~QRegExpValidator()", typeof(void));
		}
		public static string Tr(string s, string c) {
			return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
		}
		public static string Tr(string s) {
			return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
		}
		protected new IQRegExpValidatorSignals Emit {
			get { return (IQRegExpValidatorSignals) Q_EMIT; }
		}
	}

	public interface IQRegExpValidatorSignals : IQValidatorSignals {
	}
}
