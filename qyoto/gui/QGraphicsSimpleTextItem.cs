//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QGraphicsSimpleTextItem")]
	public abstract class QGraphicsSimpleTextItem : QAbstractGraphicsShapeItem, IDisposable {
 		protected QGraphicsSimpleTextItem(Type dummy) : base((Type) null) {}
		[SmokeClass("QGraphicsSimpleTextItem")]
		interface IQGraphicsSimpleTextItemProxy {
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QGraphicsSimpleTextItem), this);
			_interceptor = (QGraphicsSimpleTextItem) realProxy.GetTransparentProxy();
		}
		private QGraphicsSimpleTextItem ProxyQGraphicsSimpleTextItem() {
			return (QGraphicsSimpleTextItem) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QGraphicsSimpleTextItem() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQGraphicsSimpleTextItemProxy), null);
			_staticInterceptor = (IQGraphicsSimpleTextItemProxy) realProxy.GetTransparentProxy();
		}
		private static IQGraphicsSimpleTextItemProxy StaticQGraphicsSimpleTextItem() {
			return (IQGraphicsSimpleTextItemProxy) _staticInterceptor;
		}
		public const int Type = 9;

		public QGraphicsSimpleTextItem(QGraphicsItem parent, QGraphicsScene scene) : this((Type) null) {
			CreateProxy();
			NewQGraphicsSimpleTextItem(parent,scene);
		}
		[SmokeMethod("QGraphicsSimpleTextItem", "(QGraphicsItem*, QGraphicsScene*)", "##")]
		private void NewQGraphicsSimpleTextItem(QGraphicsItem parent, QGraphicsScene scene) {
			ProxyQGraphicsSimpleTextItem().NewQGraphicsSimpleTextItem(parent,scene);
		}
		public QGraphicsSimpleTextItem(QGraphicsItem parent) : this((Type) null) {
			CreateProxy();
			NewQGraphicsSimpleTextItem(parent);
		}
		[SmokeMethod("QGraphicsSimpleTextItem", "(QGraphicsItem*)", "#")]
		private void NewQGraphicsSimpleTextItem(QGraphicsItem parent) {
			ProxyQGraphicsSimpleTextItem().NewQGraphicsSimpleTextItem(parent);
		}
		public QGraphicsSimpleTextItem() : this((Type) null) {
			CreateProxy();
			NewQGraphicsSimpleTextItem();
		}
		[SmokeMethod("QGraphicsSimpleTextItem", "()", "")]
		private void NewQGraphicsSimpleTextItem() {
			ProxyQGraphicsSimpleTextItem().NewQGraphicsSimpleTextItem();
		}
		public QGraphicsSimpleTextItem(string text, QGraphicsItem parent, QGraphicsScene scene) : this((Type) null) {
			CreateProxy();
			NewQGraphicsSimpleTextItem(text,parent,scene);
		}
		[SmokeMethod("QGraphicsSimpleTextItem", "(const QString&, QGraphicsItem*, QGraphicsScene*)", "$##")]
		private void NewQGraphicsSimpleTextItem(string text, QGraphicsItem parent, QGraphicsScene scene) {
			ProxyQGraphicsSimpleTextItem().NewQGraphicsSimpleTextItem(text,parent,scene);
		}
		public QGraphicsSimpleTextItem(string text, QGraphicsItem parent) : this((Type) null) {
			CreateProxy();
			NewQGraphicsSimpleTextItem(text,parent);
		}
		[SmokeMethod("QGraphicsSimpleTextItem", "(const QString&, QGraphicsItem*)", "$#")]
		private void NewQGraphicsSimpleTextItem(string text, QGraphicsItem parent) {
			ProxyQGraphicsSimpleTextItem().NewQGraphicsSimpleTextItem(text,parent);
		}
		public QGraphicsSimpleTextItem(string text) : this((Type) null) {
			CreateProxy();
			NewQGraphicsSimpleTextItem(text);
		}
		[SmokeMethod("QGraphicsSimpleTextItem", "(const QString&)", "$")]
		private void NewQGraphicsSimpleTextItem(string text) {
			ProxyQGraphicsSimpleTextItem().NewQGraphicsSimpleTextItem(text);
		}
		[SmokeMethod("setText", "(const QString&)", "$")]
		public void SetText(string text) {
			ProxyQGraphicsSimpleTextItem().SetText(text);
		}
		[SmokeMethod("text", "() const", "")]
		public string Text() {
			return ProxyQGraphicsSimpleTextItem().Text();
		}
		[SmokeMethod("setFont", "(const QFont&)", "#")]
		public void SetFont(QFont font) {
			ProxyQGraphicsSimpleTextItem().SetFont(font);
		}
		[SmokeMethod("font", "() const", "")]
		public QFont Font() {
			return ProxyQGraphicsSimpleTextItem().Font();
		}
		[SmokeMethod("boundingRect", "() const", "")]
		public override QRectF BoundingRect() {
			return ProxyQGraphicsSimpleTextItem().BoundingRect();
		}
		[SmokeMethod("shape", "() const", "")]
		public override QPainterPath Shape() {
			return ProxyQGraphicsSimpleTextItem().Shape();
		}
		[SmokeMethod("contains", "(const QPointF&) const", "#")]
		public override bool Contains(QPointF point) {
			return ProxyQGraphicsSimpleTextItem().Contains(point);
		}
		[SmokeMethod("paint", "(QPainter*, const QStyleOptionGraphicsItem*, QWidget*)", "###")]
		public override void Paint(QPainter painter, QStyleOptionGraphicsItem option, QWidget widget) {
			ProxyQGraphicsSimpleTextItem().Paint(painter,option,widget);
		}
		[SmokeMethod("isObscuredBy", "(const QGraphicsItem*) const", "#")]
		public override bool IsObscuredBy(QGraphicsItem item) {
			return ProxyQGraphicsSimpleTextItem().IsObscuredBy(item);
		}
		[SmokeMethod("opaqueArea", "() const", "")]
		public override QPainterPath OpaqueArea() {
			return ProxyQGraphicsSimpleTextItem().OpaqueArea();
		}
		[SmokeMethod("type", "() const", "")]
		public override int type() {
			return ProxyQGraphicsSimpleTextItem().type();
		}
		[SmokeMethod("supportsExtension", "(QGraphicsItem::Extension) const", "$")]
		protected override bool SupportsExtension(QGraphicsItem.Extension extension) {
			return ProxyQGraphicsSimpleTextItem().SupportsExtension(extension);
		}
		[SmokeMethod("setExtension", "(QGraphicsItem::Extension, const QVariant&)", "$#")]
		protected override void SetExtension(QGraphicsItem.Extension extension, QVariant variant) {
			ProxyQGraphicsSimpleTextItem().SetExtension(extension,variant);
		}
		[SmokeMethod("extension", "(const QVariant&) const", "#")]
		protected override QVariant extension(QVariant variant) {
			return ProxyQGraphicsSimpleTextItem().extension(variant);
		}
		~QGraphicsSimpleTextItem() {
			DisposeQGraphicsSimpleTextItem();
		}
		public void Dispose() {
			DisposeQGraphicsSimpleTextItem();
		}
		[SmokeMethod("~QGraphicsSimpleTextItem", "()", "")]
		private void DisposeQGraphicsSimpleTextItem() {
			ProxyQGraphicsSimpleTextItem().DisposeQGraphicsSimpleTextItem();
		}
	}
}
