//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QActionEvent")]
	public class QActionEvent : QEvent, IDisposable {
 		protected QActionEvent(Type dummy) : base((Type) null) {}
		interface IQActionEventProxy {
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QActionEvent), this);
			_interceptor = (QActionEvent) realProxy.GetTransparentProxy();
		}
		private QActionEvent ProxyQActionEvent() {
			return (QActionEvent) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QActionEvent() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQActionEventProxy), null);
			_staticInterceptor = (IQActionEventProxy) realProxy.GetTransparentProxy();
		}
		private static IQActionEventProxy StaticQActionEvent() {
			return (IQActionEventProxy) _staticInterceptor;
		}

		public QActionEvent(int type, QAction action, QAction before) : this((Type) null) {
			CreateProxy();
			NewQActionEvent(type,action,before);
		}
		[SmokeMethod("QActionEvent$$$", "(int, QAction*, QAction*)")]
		private void NewQActionEvent(int type, QAction action, QAction before) {
			ProxyQActionEvent().NewQActionEvent(type,action,before);
		}
		public QActionEvent(int type, QAction action) : this((Type) null) {
			CreateProxy();
			NewQActionEvent(type,action);
		}
		[SmokeMethod("QActionEvent$$", "(int, QAction*)")]
		private void NewQActionEvent(int type, QAction action) {
			ProxyQActionEvent().NewQActionEvent(type,action);
		}
		[SmokeMethod("action", "() const")]
		public QAction Action() {
			return ProxyQActionEvent().Action();
		}
		[SmokeMethod("before", "() const")]
		public QAction Before() {
			return ProxyQActionEvent().Before();
		}
		~QActionEvent() {
			DisposeQActionEvent();
		}
		public new void Dispose() {
			DisposeQActionEvent();
		}
		[SmokeMethod("~QActionEvent", "()")]
		private void DisposeQActionEvent() {
			ProxyQActionEvent().DisposeQActionEvent();
		}
	}
}
