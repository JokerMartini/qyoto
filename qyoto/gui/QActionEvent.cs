//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QActionEvent")]
	public class QActionEvent : QEvent, IDisposable {
 		protected QActionEvent(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QActionEvent), this);
			interceptor = (QActionEvent) realProxy.GetTransparentProxy();
		}
		public QActionEvent(int type, QAction action, QAction before) : this((Type) null) {
			CreateProxy();
			NewQActionEvent(type,action,before);
		}
		[SmokeMethod("QActionEvent", "(int, QAction*, QAction*)", "$##")]
		private void NewQActionEvent(int type, QAction action, QAction before) {
			((QActionEvent) interceptor).NewQActionEvent(type,action,before);
		}
		public QActionEvent(int type, QAction action) : this((Type) null) {
			CreateProxy();
			NewQActionEvent(type,action);
		}
		[SmokeMethod("QActionEvent", "(int, QAction*)", "$#")]
		private void NewQActionEvent(int type, QAction action) {
			((QActionEvent) interceptor).NewQActionEvent(type,action);
		}
		[SmokeMethod("action", "() const", "")]
		public QAction Action() {
			return ((QActionEvent) interceptor).Action();
		}
		[SmokeMethod("before", "() const", "")]
		public QAction Before() {
			return ((QActionEvent) interceptor).Before();
		}
		~QActionEvent() {
			DisposeQActionEvent();
		}
		public new void Dispose() {
			DisposeQActionEvent();
		}
		[SmokeMethod("~QActionEvent", "()", "")]
		private void DisposeQActionEvent() {
			((QActionEvent) interceptor).DisposeQActionEvent();
		}
	}
}
