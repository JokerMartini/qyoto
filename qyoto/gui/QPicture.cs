//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	[SmokeClass("QPicture")]
	public class QPicture : QPaintDevice, IDisposable {
 		protected QPicture(Type dummy) : base((Type) null) {}
		[SmokeClass("QPicture")]
		interface IQPictureProxy {
			[SmokeMethod("pictureFormat", "(const QString&)", "$")]
			string PictureFormat(string fileName);
			[SmokeMethod("inputFormats", "()", "")]
			List<QByteArray> InputFormats();
			[SmokeMethod("outputFormats", "()", "")]
			List<QByteArray> OutputFormats();
			[SmokeMethod("inputFormatList", "()", "")]
			List<string> InputFormatList();
			[SmokeMethod("outputFormatList", "()", "")]
			List<string> OutputFormatList();
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QPicture), this);
			interceptor = (QPicture) realProxy.GetTransparentProxy();
		}
		private static IQPictureProxy staticInterceptor = null;
		static QPicture() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQPictureProxy), null);
			staticInterceptor = (IQPictureProxy) realProxy.GetTransparentProxy();
		}
		// QPicture* QPicture(QPicturePrivate& arg1); >>>> NOT CONVERTED
		public QPicture(int formatVersion) : this((Type) null) {
			CreateProxy();
			NewQPicture(formatVersion);
		}
		[SmokeMethod("QPicture", "(int)", "$")]
		private void NewQPicture(int formatVersion) {
			((QPicture) interceptor).NewQPicture(formatVersion);
		}
		public QPicture() : this((Type) null) {
			CreateProxy();
			NewQPicture();
		}
		[SmokeMethod("QPicture", "()", "")]
		private void NewQPicture() {
			((QPicture) interceptor).NewQPicture();
		}
		public QPicture(QPicture arg1) : this((Type) null) {
			CreateProxy();
			NewQPicture(arg1);
		}
		[SmokeMethod("QPicture", "(const QPicture&)", "#")]
		private void NewQPicture(QPicture arg1) {
			((QPicture) interceptor).NewQPicture(arg1);
		}
		[SmokeMethod("isNull", "() const", "")]
		public bool IsNull() {
			return ((QPicture) interceptor).IsNull();
		}
		[SmokeMethod("devType", "() const", "")]
		public override int DevType() {
			return ((QPicture) interceptor).DevType();
		}
		[SmokeMethod("size", "() const", "")]
		public uint Size() {
			return ((QPicture) interceptor).Size();
		}
		[SmokeMethod("data", "() const", "")]
		public string Data() {
			return ((QPicture) interceptor).Data();
		}
		[SmokeMethod("setData", "(const char*, uint)", "$$")]
		public virtual void SetData(string data, uint size) {
			((QPicture) interceptor).SetData(data,size);
		}
		[SmokeMethod("play", "(QPainter*)", "#")]
		public bool Play(QPainter p) {
			return ((QPicture) interceptor).Play(p);
		}
		[SmokeMethod("load", "(QIODevice*, const char*)", "#$")]
		public bool Load(QIODevice dev, string format) {
			return ((QPicture) interceptor).Load(dev,format);
		}
		[SmokeMethod("load", "(QIODevice*)", "#")]
		public bool Load(QIODevice dev) {
			return ((QPicture) interceptor).Load(dev);
		}
		[SmokeMethod("load", "(const QString&, const char*)", "$$")]
		public bool Load(string fileName, string format) {
			return ((QPicture) interceptor).Load(fileName,format);
		}
		[SmokeMethod("load", "(const QString&)", "$")]
		public bool Load(string fileName) {
			return ((QPicture) interceptor).Load(fileName);
		}
		[SmokeMethod("save", "(QIODevice*, const char*)", "#$")]
		public bool Save(QIODevice dev, string format) {
			return ((QPicture) interceptor).Save(dev,format);
		}
		[SmokeMethod("save", "(QIODevice*)", "#")]
		public bool Save(QIODevice dev) {
			return ((QPicture) interceptor).Save(dev);
		}
		[SmokeMethod("save", "(const QString&, const char*)", "$$")]
		public bool Save(string fileName, string format) {
			return ((QPicture) interceptor).Save(fileName,format);
		}
		[SmokeMethod("save", "(const QString&)", "$")]
		public bool Save(string fileName) {
			return ((QPicture) interceptor).Save(fileName);
		}
		[SmokeMethod("boundingRect", "() const", "")]
		public QRect BoundingRect() {
			return ((QPicture) interceptor).BoundingRect();
		}
		[SmokeMethod("setBoundingRect", "(const QRect&)", "#")]
		public void SetBoundingRect(QRect r) {
			((QPicture) interceptor).SetBoundingRect(r);
		}
		[SmokeMethod("detach", "()", "")]
		public void Detach() {
			((QPicture) interceptor).Detach();
		}
		[SmokeMethod("isDetached", "() const", "")]
		public bool IsDetached() {
			return ((QPicture) interceptor).IsDetached();
		}
		[SmokeMethod("paintEngine", "() const", "")]
		public override QPaintEngine PaintEngine() {
			return ((QPicture) interceptor).PaintEngine();
		}
		[SmokeMethod("metric", "(QPaintDevice::PaintDeviceMetric) const", "$")]
		protected override int Metric(IQPaintDevice m) {
			return ((QPicture) interceptor).Metric(m);
		}
		~QPicture() {
			DisposeQPicture();
		}
		public void Dispose() {
			DisposeQPicture();
		}
		[SmokeMethod("~QPicture", "()", "")]
		private void DisposeQPicture() {
			((QPicture) interceptor).DisposeQPicture();
		}
		public static string PictureFormat(string fileName) {
			return staticInterceptor.PictureFormat(fileName);
		}
		public static List<QByteArray> InputFormats() {
			return staticInterceptor.InputFormats();
		}
		public static List<QByteArray> OutputFormats() {
			return staticInterceptor.OutputFormats();
		}
		public static List<string> InputFormatList() {
			return staticInterceptor.InputFormatList();
		}
		public static List<string> OutputFormatList() {
			return staticInterceptor.OutputFormatList();
		}
	}
}
