//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QAccessibleBridgeFactoryInterface")]
	public abstract class QAccessibleBridgeFactoryInterface : QFactoryInterface {
 		protected QAccessibleBridgeFactoryInterface(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QAccessibleBridgeFactoryInterface), this);
			_interceptor = (QAccessibleBridgeFactoryInterface) realProxy.GetTransparentProxy();
		}
		private QAccessibleBridgeFactoryInterface ProxyQAccessibleBridgeFactoryInterface() {
			return (QAccessibleBridgeFactoryInterface) _interceptor;
		}
		[SmokeMethod("create", "(const QString&)", "$")]
		public abstract QAccessibleBridge Create(string name);
		public QAccessibleBridgeFactoryInterface() : this((Type) null) {
			CreateProxy();
			NewQAccessibleBridgeFactoryInterface();
		}
		[SmokeMethod("QAccessibleBridgeFactoryInterface", "()", "")]
		private void NewQAccessibleBridgeFactoryInterface() {
			ProxyQAccessibleBridgeFactoryInterface().NewQAccessibleBridgeFactoryInterface();
		}
	}
}
