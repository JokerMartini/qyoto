//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;

	[SmokeClass("QAccessibleBridgeFactoryInterface")]
	public class QAccessibleBridgeFactoryInterface : QFactoryInterface {
 		protected QAccessibleBridgeFactoryInterface(Type dummy) : base((Type) null) {}
		interface IQAccessibleBridgeFactoryInterfaceProxy {
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QAccessibleBridgeFactoryInterface), this);
			_interceptor = (QAccessibleBridgeFactoryInterface) realProxy.GetTransparentProxy();
		}
		private QAccessibleBridgeFactoryInterface ProxyQAccessibleBridgeFactoryInterface() {
			return (QAccessibleBridgeFactoryInterface) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QAccessibleBridgeFactoryInterface() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQAccessibleBridgeFactoryInterfaceProxy), null);
			_staticInterceptor = (IQAccessibleBridgeFactoryInterfaceProxy) realProxy.GetTransparentProxy();
		}
		private static IQAccessibleBridgeFactoryInterfaceProxy StaticQAccessibleBridgeFactoryInterface() {
			return (IQAccessibleBridgeFactoryInterfaceProxy) _staticInterceptor;
		}

		[SmokeMethod("create(const QString&)")]
		public virtual QAccessibleBridge Create(string name) {
			return ProxyQAccessibleBridgeFactoryInterface().Create(name);
		}
		public QAccessibleBridgeFactoryInterface() : this((Type) null) {
			CreateProxy();
			NewQAccessibleBridgeFactoryInterface();
		}
		[SmokeMethod("QAccessibleBridgeFactoryInterface()")]
		private void NewQAccessibleBridgeFactoryInterface() {
			ProxyQAccessibleBridgeFactoryInterface().NewQAccessibleBridgeFactoryInterface();
		}
		~QAccessibleBridgeFactoryInterface() {
			DisposeQAccessibleBridgeFactoryInterface();
		}
		public new void Dispose() {
			DisposeQAccessibleBridgeFactoryInterface();
		}
		[SmokeMethod("~QAccessibleBridgeFactoryInterface()")]
		private void DisposeQAccessibleBridgeFactoryInterface() {
			ProxyQAccessibleBridgeFactoryInterface().DisposeQAccessibleBridgeFactoryInterface();
		}
	}
}
