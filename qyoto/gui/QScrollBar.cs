//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QScrollBar")]
	public class QScrollBar : QAbstractSlider, IDisposable {
 		protected QScrollBar(Type dummy) : base((Type) null) {}
		[SmokeClass("QScrollBar")]
		interface IQScrollBarProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QScrollBar), this);
			interceptor = (QScrollBar) realProxy.GetTransparentProxy();
		}
		private static IQScrollBarProxy staticInterceptor = null;
		static QScrollBar() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQScrollBarProxy), null);
			staticInterceptor = (IQScrollBarProxy) realProxy.GetTransparentProxy();
		}
		public QScrollBar(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQScrollBar(parent);
		}
		[SmokeMethod("QScrollBar", "(QWidget*)", "#")]
		private void NewQScrollBar(QWidget parent) {
			((QScrollBar) interceptor).NewQScrollBar(parent);
		}
		public QScrollBar() : this((Type) null) {
			CreateProxy();
			NewQScrollBar();
		}
		[SmokeMethod("QScrollBar", "()", "")]
		private void NewQScrollBar() {
			((QScrollBar) interceptor).NewQScrollBar();
		}
		public QScrollBar(Qt.Orientation arg1, QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQScrollBar(arg1,parent);
		}
		[SmokeMethod("QScrollBar", "(Qt::Orientation, QWidget*)", "$#")]
		private void NewQScrollBar(Qt.Orientation arg1, QWidget parent) {
			((QScrollBar) interceptor).NewQScrollBar(arg1,parent);
		}
		public QScrollBar(Qt.Orientation arg1) : this((Type) null) {
			CreateProxy();
			NewQScrollBar(arg1);
		}
		[SmokeMethod("QScrollBar", "(Qt::Orientation)", "$")]
		private void NewQScrollBar(Qt.Orientation arg1) {
			((QScrollBar) interceptor).NewQScrollBar(arg1);
		}
		[SmokeMethod("sizeHint", "() const", "")]
		public override QSize SizeHint() {
			return ((QScrollBar) interceptor).SizeHint();
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		public new virtual bool Event(QEvent arg1) {
			return ((QScrollBar) interceptor).Event(arg1);
		}
		[SmokeMethod("paintEvent", "(QPaintEvent*)", "#")]
		protected override void PaintEvent(QPaintEvent arg1) {
			((QScrollBar) interceptor).PaintEvent(arg1);
		}
		[SmokeMethod("mousePressEvent", "(QMouseEvent*)", "#")]
		protected override void MousePressEvent(QMouseEvent arg1) {
			((QScrollBar) interceptor).MousePressEvent(arg1);
		}
		[SmokeMethod("mouseReleaseEvent", "(QMouseEvent*)", "#")]
		protected override void MouseReleaseEvent(QMouseEvent arg1) {
			((QScrollBar) interceptor).MouseReleaseEvent(arg1);
		}
		[SmokeMethod("mouseMoveEvent", "(QMouseEvent*)", "#")]
		protected override void MouseMoveEvent(QMouseEvent arg1) {
			((QScrollBar) interceptor).MouseMoveEvent(arg1);
		}
		[SmokeMethod("hideEvent", "(QHideEvent*)", "#")]
		protected override void HideEvent(QHideEvent arg1) {
			((QScrollBar) interceptor).HideEvent(arg1);
		}
		[SmokeMethod("sliderChange", "(QAbstractSlider::SliderChange)", "$")]
		protected override void sliderChange(QAbstractSlider.SliderChange change) {
			((QScrollBar) interceptor).sliderChange(change);
		}
		[SmokeMethod("contextMenuEvent", "(QContextMenuEvent*)", "#")]
		protected override void ContextMenuEvent(QContextMenuEvent arg1) {
			((QScrollBar) interceptor).ContextMenuEvent(arg1);
		}
		~QScrollBar() {
			DisposeQScrollBar();
		}
		public new void Dispose() {
			DisposeQScrollBar();
		}
		[SmokeMethod("~QScrollBar", "()", "")]
		private void DisposeQScrollBar() {
			((QScrollBar) interceptor).DisposeQScrollBar();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQScrollBarSignals Emit {
			get { return (IQScrollBarSignals) Q_EMIT; }
		}
	}

	public interface IQScrollBarSignals : IQAbstractSliderSignals {
	}
}
