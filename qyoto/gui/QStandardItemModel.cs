//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	/// See <see cref="IQStandardItemModelSignals"></see> for signals emitted by QStandardItemModel
	[SmokeClass("QStandardItemModel")]
	public class QStandardItemModel : QAbstractItemModel, IDisposable {
 		protected QStandardItemModel(Type dummy) : base((Type) null) {}
		[SmokeClass("QStandardItemModel")]
		interface IQStandardItemModelProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QStandardItemModel), this);
			interceptor = (QStandardItemModel) realProxy.GetTransparentProxy();
		}
		private static IQStandardItemModelProxy staticInterceptor = null;
		static QStandardItemModel() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQStandardItemModelProxy), null);
			staticInterceptor = (IQStandardItemModelProxy) realProxy.GetTransparentProxy();
		}
		[Q_PROPERTY("int", "sortRole")]
		public int SortRole {
			get { return Property("sortRole").Value<int>(); }
			set { SetProperty("sortRole", QVariant.FromValue<int>(value)); }
		}
		public QStandardItemModel(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQStandardItemModel(parent);
		}
		[SmokeMethod("QStandardItemModel", "(QObject*)", "#")]
		private void NewQStandardItemModel(QObject parent) {
			((QStandardItemModel) interceptor).NewQStandardItemModel(parent);
		}
		public QStandardItemModel() : this((Type) null) {
			CreateProxy();
			NewQStandardItemModel();
		}
		[SmokeMethod("QStandardItemModel", "()", "")]
		private void NewQStandardItemModel() {
			((QStandardItemModel) interceptor).NewQStandardItemModel();
		}
		public QStandardItemModel(int rows, int columns, QObject parent) : this((Type) null) {
			CreateProxy();
			NewQStandardItemModel(rows,columns,parent);
		}
		[SmokeMethod("QStandardItemModel", "(int, int, QObject*)", "$$#")]
		private void NewQStandardItemModel(int rows, int columns, QObject parent) {
			((QStandardItemModel) interceptor).NewQStandardItemModel(rows,columns,parent);
		}
		public QStandardItemModel(int rows, int columns) : this((Type) null) {
			CreateProxy();
			NewQStandardItemModel(rows,columns);
		}
		[SmokeMethod("QStandardItemModel", "(int, int)", "$$")]
		private void NewQStandardItemModel(int rows, int columns) {
			((QStandardItemModel) interceptor).NewQStandardItemModel(rows,columns);
		}
		[SmokeMethod("index", "(int, int, const QModelIndex&) const", "$$#")]
		public override QModelIndex Index(int row, int column, QModelIndex parent) {
			return ((QStandardItemModel) interceptor).Index(row,column,parent);
		}
		[SmokeMethod("index", "(int, int) const", "$$")]
		public virtual QModelIndex Index(int row, int column) {
			return ((QStandardItemModel) interceptor).Index(row,column);
		}
		[SmokeMethod("parent", "(const QModelIndex&) const", "#")]
		public override QModelIndex Parent(QModelIndex child) {
			return ((QStandardItemModel) interceptor).Parent(child);
		}
		[SmokeMethod("rowCount", "(const QModelIndex&) const", "#")]
		public override int RowCount(QModelIndex parent) {
			return ((QStandardItemModel) interceptor).RowCount(parent);
		}
		[SmokeMethod("rowCount", "() const", "")]
		public virtual int RowCount() {
			return ((QStandardItemModel) interceptor).RowCount();
		}
		[SmokeMethod("columnCount", "(const QModelIndex&) const", "#")]
		public override int ColumnCount(QModelIndex parent) {
			return ((QStandardItemModel) interceptor).ColumnCount(parent);
		}
		[SmokeMethod("columnCount", "() const", "")]
		public virtual int ColumnCount() {
			return ((QStandardItemModel) interceptor).ColumnCount();
		}
		[SmokeMethod("hasChildren", "(const QModelIndex&) const", "#")]
		public override bool HasChildren(QModelIndex parent) {
			return ((QStandardItemModel) interceptor).HasChildren(parent);
		}
		[SmokeMethod("hasChildren", "() const", "")]
		public override bool HasChildren() {
			return ((QStandardItemModel) interceptor).HasChildren();
		}
		[SmokeMethod("data", "(const QModelIndex&, int) const", "#$")]
		public override QVariant Data(QModelIndex index, int role) {
			return ((QStandardItemModel) interceptor).Data(index,role);
		}
		[SmokeMethod("data", "(const QModelIndex&) const", "#")]
		public virtual QVariant Data(QModelIndex index) {
			return ((QStandardItemModel) interceptor).Data(index);
		}
		[SmokeMethod("setData", "(const QModelIndex&, const QVariant&, int)", "##$")]
		public override bool SetData(QModelIndex index, QVariant value, int role) {
			return ((QStandardItemModel) interceptor).SetData(index,value,role);
		}
		[SmokeMethod("setData", "(const QModelIndex&, const QVariant&)", "##")]
		public override bool SetData(QModelIndex index, QVariant value) {
			return ((QStandardItemModel) interceptor).SetData(index,value);
		}
		[SmokeMethod("headerData", "(int, Qt::Orientation, int) const", "$$$")]
		public override QVariant HeaderData(int section, Qt.Orientation orientation, int role) {
			return ((QStandardItemModel) interceptor).HeaderData(section,orientation,role);
		}
		[SmokeMethod("headerData", "(int, Qt::Orientation) const", "$$")]
		public override QVariant HeaderData(int section, Qt.Orientation orientation) {
			return ((QStandardItemModel) interceptor).HeaderData(section,orientation);
		}
		[SmokeMethod("setHeaderData", "(int, Qt::Orientation, const QVariant&, int)", "$$#$")]
		public override bool SetHeaderData(int section, Qt.Orientation orientation, QVariant value, int role) {
			return ((QStandardItemModel) interceptor).SetHeaderData(section,orientation,value,role);
		}
		[SmokeMethod("setHeaderData", "(int, Qt::Orientation, const QVariant&)", "$$#")]
		public override bool SetHeaderData(int section, Qt.Orientation orientation, QVariant value) {
			return ((QStandardItemModel) interceptor).SetHeaderData(section,orientation,value);
		}
		[SmokeMethod("insertRows", "(int, int, const QModelIndex&)", "$$#")]
		public override bool InsertRows(int row, int count, QModelIndex parent) {
			return ((QStandardItemModel) interceptor).InsertRows(row,count,parent);
		}
		[SmokeMethod("insertRows", "(int, int)", "$$")]
		public override bool InsertRows(int row, int count) {
			return ((QStandardItemModel) interceptor).InsertRows(row,count);
		}
		[SmokeMethod("insertColumns", "(int, int, const QModelIndex&)", "$$#")]
		public override bool InsertColumns(int column, int count, QModelIndex parent) {
			return ((QStandardItemModel) interceptor).InsertColumns(column,count,parent);
		}
		[SmokeMethod("insertColumns", "(int, int)", "$$")]
		public override bool InsertColumns(int column, int count) {
			return ((QStandardItemModel) interceptor).InsertColumns(column,count);
		}
		[SmokeMethod("removeRows", "(int, int, const QModelIndex&)", "$$#")]
		public override bool RemoveRows(int row, int count, QModelIndex parent) {
			return ((QStandardItemModel) interceptor).RemoveRows(row,count,parent);
		}
		[SmokeMethod("removeRows", "(int, int)", "$$")]
		public override bool RemoveRows(int row, int count) {
			return ((QStandardItemModel) interceptor).RemoveRows(row,count);
		}
		[SmokeMethod("removeColumns", "(int, int, const QModelIndex&)", "$$#")]
		public override bool RemoveColumns(int column, int count, QModelIndex parent) {
			return ((QStandardItemModel) interceptor).RemoveColumns(column,count,parent);
		}
		[SmokeMethod("removeColumns", "(int, int)", "$$")]
		public override bool RemoveColumns(int column, int count) {
			return ((QStandardItemModel) interceptor).RemoveColumns(column,count);
		}
		[SmokeMethod("flags", "(const QModelIndex&) const", "#")]
		public override int Flags(QModelIndex index) {
			return ((QStandardItemModel) interceptor).Flags(index);
		}
		[SmokeMethod("supportedDropActions", "() const", "")]
		public override int SupportedDropActions() {
			return ((QStandardItemModel) interceptor).SupportedDropActions();
		}
		[SmokeMethod("itemData", "(const QModelIndex&) const", "#")]
		public override Dictionary<int, QVariant> ItemData(QModelIndex index) {
			return ((QStandardItemModel) interceptor).ItemData(index);
		}
		[SmokeMethod("setItemData", "(const QModelIndex&, const QMap<int, QVariant>&)", "#?")]
		public override bool SetItemData(QModelIndex index, Dictionary<int, QVariant> roles) {
			return ((QStandardItemModel) interceptor).SetItemData(index,roles);
		}
		[SmokeMethod("clear", "()", "")]
		public void Clear() {
			((QStandardItemModel) interceptor).Clear();
		}
		[SmokeMethod("parent", "() const", "")]
		public QObject Parent() {
			return ((QStandardItemModel) interceptor).Parent();
		}
		[SmokeMethod("sort", "(int, Qt::SortOrder)", "$$")]
		public override void Sort(int column, Qt.SortOrder order) {
			((QStandardItemModel) interceptor).Sort(column,order);
		}
		[SmokeMethod("sort", "(int)", "$")]
		public override void Sort(int column) {
			((QStandardItemModel) interceptor).Sort(column);
		}
		[SmokeMethod("itemFromIndex", "(const QModelIndex&) const", "#")]
		public QStandardItem ItemFromIndex(QModelIndex index) {
			return ((QStandardItemModel) interceptor).ItemFromIndex(index);
		}
		[SmokeMethod("indexFromItem", "(const QStandardItem*) const", "#")]
		public QModelIndex IndexFromItem(QStandardItem item) {
			return ((QStandardItemModel) interceptor).IndexFromItem(item);
		}
		[SmokeMethod("item", "(int, int) const", "$$")]
		public QStandardItem Item(int row, int column) {
			return ((QStandardItemModel) interceptor).Item(row,column);
		}
		[SmokeMethod("item", "(int) const", "$")]
		public QStandardItem Item(int row) {
			return ((QStandardItemModel) interceptor).Item(row);
		}
		[SmokeMethod("setItem", "(int, int, QStandardItem*)", "$$#")]
		public void SetItem(int row, int column, QStandardItem item) {
			((QStandardItemModel) interceptor).SetItem(row,column,item);
		}
		[SmokeMethod("setItem", "(int, QStandardItem*)", "$#")]
		public void SetItem(int row, QStandardItem item) {
			((QStandardItemModel) interceptor).SetItem(row,item);
		}
		[SmokeMethod("invisibleRootItem", "() const", "")]
		public QStandardItem InvisibleRootItem() {
			return ((QStandardItemModel) interceptor).InvisibleRootItem();
		}
		[SmokeMethod("horizontalHeaderItem", "(int) const", "$")]
		public QStandardItem HorizontalHeaderItem(int column) {
			return ((QStandardItemModel) interceptor).HorizontalHeaderItem(column);
		}
		[SmokeMethod("setHorizontalHeaderItem", "(int, QStandardItem*)", "$#")]
		public void SetHorizontalHeaderItem(int column, QStandardItem item) {
			((QStandardItemModel) interceptor).SetHorizontalHeaderItem(column,item);
		}
		[SmokeMethod("verticalHeaderItem", "(int) const", "$")]
		public QStandardItem VerticalHeaderItem(int row) {
			return ((QStandardItemModel) interceptor).VerticalHeaderItem(row);
		}
		[SmokeMethod("setVerticalHeaderItem", "(int, QStandardItem*)", "$#")]
		public void SetVerticalHeaderItem(int row, QStandardItem item) {
			((QStandardItemModel) interceptor).SetVerticalHeaderItem(row,item);
		}
		[SmokeMethod("setHorizontalHeaderLabels", "(const QStringList&)", "?")]
		public void SetHorizontalHeaderLabels(List<string> labels) {
			((QStandardItemModel) interceptor).SetHorizontalHeaderLabels(labels);
		}
		[SmokeMethod("setVerticalHeaderLabels", "(const QStringList&)", "?")]
		public void SetVerticalHeaderLabels(List<string> labels) {
			((QStandardItemModel) interceptor).SetVerticalHeaderLabels(labels);
		}
		[SmokeMethod("setRowCount", "(int)", "$")]
		public void SetRowCount(int rows) {
			((QStandardItemModel) interceptor).SetRowCount(rows);
		}
		[SmokeMethod("setColumnCount", "(int)", "$")]
		public void SetColumnCount(int columns) {
			((QStandardItemModel) interceptor).SetColumnCount(columns);
		}
		[SmokeMethod("appendRow", "(const QList<QStandardItem*>&)", "?")]
		public void AppendRow(List<QStandardItem> items) {
			((QStandardItemModel) interceptor).AppendRow(items);
		}
		[SmokeMethod("appendColumn", "(const QList<QStandardItem*>&)", "?")]
		public void AppendColumn(List<QStandardItem> items) {
			((QStandardItemModel) interceptor).AppendColumn(items);
		}
		[SmokeMethod("appendRow", "(QStandardItem*)", "#")]
		public void AppendRow(QStandardItem item) {
			((QStandardItemModel) interceptor).AppendRow(item);
		}
		[SmokeMethod("insertRow", "(int, const QList<QStandardItem*>&)", "$?")]
		public void InsertRow(int row, List<QStandardItem> items) {
			((QStandardItemModel) interceptor).InsertRow(row,items);
		}
		[SmokeMethod("insertColumn", "(int, const QList<QStandardItem*>&)", "$?")]
		public void InsertColumn(int column, List<QStandardItem> items) {
			((QStandardItemModel) interceptor).InsertColumn(column,items);
		}
		[SmokeMethod("insertRow", "(int, QStandardItem*)", "$#")]
		public void InsertRow(int row, QStandardItem item) {
			((QStandardItemModel) interceptor).InsertRow(row,item);
		}
		[SmokeMethod("insertRow", "(int, const QModelIndex&)", "$#")]
		public bool InsertRow(int row, QModelIndex parent) {
			return ((QStandardItemModel) interceptor).InsertRow(row,parent);
		}
		[SmokeMethod("insertRow", "(int)", "$")]
		public bool InsertRow(int row) {
			return ((QStandardItemModel) interceptor).InsertRow(row);
		}
		[SmokeMethod("insertColumn", "(int, const QModelIndex&)", "$#")]
		public bool InsertColumn(int column, QModelIndex parent) {
			return ((QStandardItemModel) interceptor).InsertColumn(column,parent);
		}
		[SmokeMethod("insertColumn", "(int)", "$")]
		public bool InsertColumn(int column) {
			return ((QStandardItemModel) interceptor).InsertColumn(column);
		}
		[SmokeMethod("takeItem", "(int, int)", "$$")]
		public QStandardItem TakeItem(int row, int column) {
			return ((QStandardItemModel) interceptor).TakeItem(row,column);
		}
		[SmokeMethod("takeItem", "(int)", "$")]
		public QStandardItem TakeItem(int row) {
			return ((QStandardItemModel) interceptor).TakeItem(row);
		}
		[SmokeMethod("takeRow", "(int)", "$")]
		public List<QStandardItem> TakeRow(int row) {
			return ((QStandardItemModel) interceptor).TakeRow(row);
		}
		[SmokeMethod("takeColumn", "(int)", "$")]
		public List<QStandardItem> TakeColumn(int column) {
			return ((QStandardItemModel) interceptor).TakeColumn(column);
		}
		[SmokeMethod("takeHorizontalHeaderItem", "(int)", "$")]
		public QStandardItem TakeHorizontalHeaderItem(int column) {
			return ((QStandardItemModel) interceptor).TakeHorizontalHeaderItem(column);
		}
		[SmokeMethod("takeVerticalHeaderItem", "(int)", "$")]
		public QStandardItem TakeVerticalHeaderItem(int row) {
			return ((QStandardItemModel) interceptor).TakeVerticalHeaderItem(row);
		}
		[SmokeMethod("itemPrototype", "() const", "")]
		public QStandardItem ItemPrototype() {
			return ((QStandardItemModel) interceptor).ItemPrototype();
		}
		[SmokeMethod("setItemPrototype", "(const QStandardItem*)", "#")]
		public void SetItemPrototype(QStandardItem item) {
			((QStandardItemModel) interceptor).SetItemPrototype(item);
		}
		[SmokeMethod("findItems", "(const QString&, Qt::MatchFlags, int) const", "$$$")]
		public List<QStandardItem> FindItems(string text, int flags, int column) {
			return ((QStandardItemModel) interceptor).FindItems(text,flags,column);
		}
		[SmokeMethod("findItems", "(const QString&, Qt::MatchFlags) const", "$$")]
		public List<QStandardItem> FindItems(string text, int flags) {
			return ((QStandardItemModel) interceptor).FindItems(text,flags);
		}
		[SmokeMethod("findItems", "(const QString&) const", "$")]
		public List<QStandardItem> FindItems(string text) {
			return ((QStandardItemModel) interceptor).FindItems(text);
		}
		~QStandardItemModel() {
			DisposeQStandardItemModel();
		}
		public new void Dispose() {
			DisposeQStandardItemModel();
		}
		[SmokeMethod("~QStandardItemModel", "()", "")]
		private void DisposeQStandardItemModel() {
			((QStandardItemModel) interceptor).DisposeQStandardItemModel();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQStandardItemModelSignals Emit {
			get { return (IQStandardItemModelSignals) Q_EMIT; }
		}
	}

	public interface IQStandardItemModelSignals : IQAbstractItemModelSignals {
		[Q_SIGNAL("void itemChanged(QStandardItem*)")]
		void ItemChanged(QStandardItem item);
	}
}
