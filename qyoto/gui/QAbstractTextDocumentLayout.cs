//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	/// See <see cref="IQAbstractTextDocumentLayoutSignals"></see> for signals emitted by QAbstractTextDocumentLayout
	[SmokeClass("QAbstractTextDocumentLayout")]
	public abstract class QAbstractTextDocumentLayout : QObject {
 		protected QAbstractTextDocumentLayout(Type dummy) : base((Type) null) {}
		[SmokeClass("QAbstractTextDocumentLayout")]
		interface IQAbstractTextDocumentLayoutProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QAbstractTextDocumentLayout), this);
			interceptor = (QAbstractTextDocumentLayout) realProxy.GetTransparentProxy();
		}
		private static IQAbstractTextDocumentLayoutProxy staticInterceptor = null;
		static QAbstractTextDocumentLayout() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQAbstractTextDocumentLayoutProxy), null);
			staticInterceptor = (IQAbstractTextDocumentLayoutProxy) realProxy.GetTransparentProxy();
		}
		// void draw(QPainter* arg1,const QAbstractTextDocumentLayout::PaintContext& arg2); >>>> NOT CONVERTED
		public QAbstractTextDocumentLayout(QTextDocument doc) : this((Type) null) {
			CreateProxy();
			NewQAbstractTextDocumentLayout(doc);
		}
		[SmokeMethod("QAbstractTextDocumentLayout", "(QTextDocument*)", "#")]
		private void NewQAbstractTextDocumentLayout(QTextDocument doc) {
			((QAbstractTextDocumentLayout) interceptor).NewQAbstractTextDocumentLayout(doc);
		}
		[SmokeMethod("hitTest", "(const QPointF&, Qt::HitTestAccuracy) const", "#$")]
		public abstract int HitTest(QPointF point, Qt.HitTestAccuracy accuracy);
		[SmokeMethod("anchorAt", "(const QPointF&) const", "#")]
		public string AnchorAt(QPointF pos) {
			return ((QAbstractTextDocumentLayout) interceptor).AnchorAt(pos);
		}
		[SmokeMethod("pageCount", "() const", "")]
		public abstract int PageCount();
		[SmokeMethod("documentSize", "() const", "")]
		public abstract QSizeF DocumentSize();
		[SmokeMethod("frameBoundingRect", "(QTextFrame*) const", "#")]
		public abstract QRectF FrameBoundingRect(QTextFrame frame);
		[SmokeMethod("blockBoundingRect", "(const QTextBlock&) const", "#")]
		public abstract QRectF BlockBoundingRect(QTextBlock block);
		[SmokeMethod("setPaintDevice", "(QPaintDevice*)", "#")]
		public void SetPaintDevice(IQPaintDevice device) {
			((QAbstractTextDocumentLayout) interceptor).SetPaintDevice(device);
		}
		[SmokeMethod("paintDevice", "() const", "")]
		public IQPaintDevice PaintDevice() {
			return ((QAbstractTextDocumentLayout) interceptor).PaintDevice();
		}
		[SmokeMethod("document", "() const", "")]
		public QTextDocument Document() {
			return ((QAbstractTextDocumentLayout) interceptor).Document();
		}
		[SmokeMethod("registerHandler", "(int, QObject*)", "$#")]
		public void RegisterHandler(int objectType, QObject component) {
			((QAbstractTextDocumentLayout) interceptor).RegisterHandler(objectType,component);
		}
		[SmokeMethod("handlerForObject", "(int) const", "$")]
		public QTextObjectInterface HandlerForObject(int objectType) {
			return ((QAbstractTextDocumentLayout) interceptor).HandlerForObject(objectType);
		}
		[SmokeMethod("documentChanged", "(int, int, int)", "$$$")]
		protected abstract void DocumentChanged(int from, int charsRemoved, int charsAdded);
		[SmokeMethod("resizeInlineObject", "(QTextInlineObject, int, const QTextFormat&)", "#$#")]
		protected virtual void ResizeInlineObject(QTextInlineObject item, int posInDocument, QTextFormat format) {
			((QAbstractTextDocumentLayout) interceptor).ResizeInlineObject(item,posInDocument,format);
		}
		[SmokeMethod("positionInlineObject", "(QTextInlineObject, int, const QTextFormat&)", "#$#")]
		protected virtual void PositionInlineObject(QTextInlineObject item, int posInDocument, QTextFormat format) {
			((QAbstractTextDocumentLayout) interceptor).PositionInlineObject(item,posInDocument,format);
		}
		[SmokeMethod("drawInlineObject", "(QPainter*, const QRectF&, QTextInlineObject, int, const QTextFormat&)", "###$#")]
		protected virtual void DrawInlineObject(QPainter painter, QRectF rect, QTextInlineObject arg3, int posInDocument, QTextFormat format) {
			((QAbstractTextDocumentLayout) interceptor).DrawInlineObject(painter,rect,arg3,posInDocument,format);
		}
		[SmokeMethod("formatIndex", "(int)", "$")]
		protected int FormatIndex(int pos) {
			return ((QAbstractTextDocumentLayout) interceptor).FormatIndex(pos);
		}
		[SmokeMethod("format", "(int)", "$")]
		protected QTextCharFormat Format(int pos) {
			return ((QAbstractTextDocumentLayout) interceptor).Format(pos);
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQAbstractTextDocumentLayoutSignals Emit {
			get { return (IQAbstractTextDocumentLayoutSignals) Q_EMIT; }
		}
	}

	public interface IQAbstractTextDocumentLayoutSignals : IQObjectSignals {
		[Q_SIGNAL("void update(const QRectF&)")]
		void Update(QRectF arg1);
		[Q_SIGNAL("void update()")]
		void Update();
		[Q_SIGNAL("void documentSizeChanged(const QSizeF&)")]
		void DocumentSizeChanged(QSizeF newSize);
		[Q_SIGNAL("void pageCountChanged(int)")]
		void PageCountChanged(int newPages);
	}
}
