//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QPalette")]
	public class QPalette : MarshalByRefObject, IDisposable {
		protected QPalette interceptor = null;
		private IntPtr smokeObject;
		protected QPalette(Type dummy) {}
		[SmokeClass("QPalette")]
		interface IQPaletteProxy {
			[SmokeMethod("operator==", "(const QPalette&) const", "#")]
			bool op_equals(QPalette lhs, QPalette p);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QPalette), this);
			interceptor = (QPalette) realProxy.GetTransparentProxy();
		}
		private static IQPaletteProxy staticInterceptor = null;
		static QPalette() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQPaletteProxy), null);
			staticInterceptor = (IQPaletteProxy) realProxy.GetTransparentProxy();
		}
		public enum ColorGroup {
			Active = 0,
			Disabled = 1,
			Inactive = 2,
			NColorGroups = 3,
			Current = 4,
			All = 5,
			Normal = Active,
		}
		public enum ColorRole {
			WindowText = 0,
			Button = 1,
			Light = 2,
			Midlight = 3,
			Dark = 4,
			Mid = 5,
			Text = 6,
			BrightText = 7,
			ButtonText = 8,
			Base = 9,
			Window = 10,
			Shadow = 11,
			Highlight = 12,
			HighlightedText = 13,
			Link = 14,
			LinkVisited = 15,
			AlternateBase = 16,
			NoRole = 17,
			NColorRoles = NoRole,
			Foreground = WindowText,
			Background = Window,
		}
		//  operator QVariant(); >>>> NOT CONVERTED
		public QPalette() : this((Type) null) {
			CreateProxy();
			NewQPalette();
		}
		[SmokeMethod("QPalette", "()", "")]
		private void NewQPalette() {
			((QPalette) interceptor).NewQPalette();
		}
		public QPalette(QColor button) : this((Type) null) {
			CreateProxy();
			NewQPalette(button);
		}
		[SmokeMethod("QPalette", "(const QColor&)", "#")]
		private void NewQPalette(QColor button) {
			((QPalette) interceptor).NewQPalette(button);
		}
		public QPalette(Qt.GlobalColor button) : this((Type) null) {
			CreateProxy();
			NewQPalette(button);
		}
		[SmokeMethod("QPalette", "(Qt::GlobalColor)", "$")]
		private void NewQPalette(Qt.GlobalColor button) {
			((QPalette) interceptor).NewQPalette(button);
		}
		public QPalette(QColor button, QColor window) : this((Type) null) {
			CreateProxy();
			NewQPalette(button,window);
		}
		[SmokeMethod("QPalette", "(const QColor&, const QColor&)", "##")]
		private void NewQPalette(QColor button, QColor window) {
			((QPalette) interceptor).NewQPalette(button,window);
		}
		public QPalette(QBrush windowText, QBrush button, QBrush light, QBrush dark, QBrush mid, QBrush text, QBrush bright_text, QBrush arg8, QBrush window) : this((Type) null) {
			CreateProxy();
			NewQPalette(windowText,button,light,dark,mid,text,bright_text,arg8,window);
		}
		[SmokeMethod("QPalette", "(const QBrush&, const QBrush&, const QBrush&, const QBrush&, const QBrush&, const QBrush&, const QBrush&, const QBrush&, const QBrush&)", "#########")]
		private void NewQPalette(QBrush windowText, QBrush button, QBrush light, QBrush dark, QBrush mid, QBrush text, QBrush bright_text, QBrush arg8, QBrush window) {
			((QPalette) interceptor).NewQPalette(windowText,button,light,dark,mid,text,bright_text,arg8,window);
		}
		public QPalette(QColor windowText, QColor window, QColor light, QColor dark, QColor mid, QColor text, QColor arg7) : this((Type) null) {
			CreateProxy();
			NewQPalette(windowText,window,light,dark,mid,text,arg7);
		}
		[SmokeMethod("QPalette", "(const QColor&, const QColor&, const QColor&, const QColor&, const QColor&, const QColor&, const QColor&)", "#######")]
		private void NewQPalette(QColor windowText, QColor window, QColor light, QColor dark, QColor mid, QColor text, QColor arg7) {
			((QPalette) interceptor).NewQPalette(windowText,window,light,dark,mid,text,arg7);
		}
		public QPalette(QPalette palette) : this((Type) null) {
			CreateProxy();
			NewQPalette(palette);
		}
		[SmokeMethod("QPalette", "(const QPalette&)", "#")]
		private void NewQPalette(QPalette palette) {
			((QPalette) interceptor).NewQPalette(palette);
		}
		[SmokeMethod("currentColorGroup", "() const", "")]
		public QPalette.ColorGroup CurrentColorGroup() {
			return ((QPalette) interceptor).CurrentColorGroup();
		}
		[SmokeMethod("setCurrentColorGroup", "(QPalette::ColorGroup)", "$")]
		public void SetCurrentColorGroup(QPalette.ColorGroup cg) {
			((QPalette) interceptor).SetCurrentColorGroup(cg);
		}
		[SmokeMethod("color", "(QPalette::ColorGroup, QPalette::ColorRole) const", "$$")]
		public QColor Color(QPalette.ColorGroup cg, QPalette.ColorRole cr) {
			return ((QPalette) interceptor).Color(cg,cr);
		}
		[SmokeMethod("brush", "(QPalette::ColorGroup, QPalette::ColorRole) const", "$$")]
		public QBrush Brush(QPalette.ColorGroup cg, QPalette.ColorRole cr) {
			return ((QPalette) interceptor).Brush(cg,cr);
		}
		[SmokeMethod("setColor", "(QPalette::ColorGroup, QPalette::ColorRole, const QColor&)", "$$#")]
		public void SetColor(QPalette.ColorGroup cg, QPalette.ColorRole cr, QColor color) {
			((QPalette) interceptor).SetColor(cg,cr,color);
		}
		[SmokeMethod("setColor", "(QPalette::ColorRole, const QColor&)", "$#")]
		public void SetColor(QPalette.ColorRole cr, QColor color) {
			((QPalette) interceptor).SetColor(cr,color);
		}
		[SmokeMethod("setBrush", "(QPalette::ColorRole, const QBrush&)", "$#")]
		public void SetBrush(QPalette.ColorRole cr, QBrush brush) {
			((QPalette) interceptor).SetBrush(cr,brush);
		}
		[SmokeMethod("isBrushSet", "(QPalette::ColorGroup, QPalette::ColorRole) const", "$$")]
		public bool IsBrushSet(QPalette.ColorGroup cg, QPalette.ColorRole cr) {
			return ((QPalette) interceptor).IsBrushSet(cg,cr);
		}
		[SmokeMethod("setBrush", "(QPalette::ColorGroup, QPalette::ColorRole, const QBrush&)", "$$#")]
		public void SetBrush(QPalette.ColorGroup cg, QPalette.ColorRole cr, QBrush brush) {
			((QPalette) interceptor).SetBrush(cg,cr,brush);
		}
		[SmokeMethod("setColorGroup", "(QPalette::ColorGroup, const QBrush&, const QBrush&, const QBrush&, const QBrush&, const QBrush&, const QBrush&, const QBrush&, const QBrush&, const QBrush&)", "$#########")]
		public void SetColorGroup(QPalette.ColorGroup cr, QBrush windowText, QBrush button, QBrush light, QBrush dark, QBrush mid, QBrush text, QBrush bright_text, QBrush arg9, QBrush window) {
			((QPalette) interceptor).SetColorGroup(cr,windowText,button,light,dark,mid,text,bright_text,arg9,window);
		}
		[SmokeMethod("isEqual", "(QPalette::ColorGroup, QPalette::ColorGroup) const", "$$")]
		public bool IsEqual(QPalette.ColorGroup cr1, QPalette.ColorGroup cr2) {
			return ((QPalette) interceptor).IsEqual(cr1,cr2);
		}
		[SmokeMethod("color", "(QPalette::ColorRole) const", "$")]
		public QColor Color(QPalette.ColorRole cr) {
			return ((QPalette) interceptor).Color(cr);
		}
		[SmokeMethod("brush", "(QPalette::ColorRole) const", "$")]
		public QBrush Brush(QPalette.ColorRole cr) {
			return ((QPalette) interceptor).Brush(cr);
		}
		[SmokeMethod("foreground", "() const", "")]
		public QBrush Foreground() {
			return ((QPalette) interceptor).Foreground();
		}
		[SmokeMethod("windowText", "() const", "")]
		public QBrush WindowText() {
			return ((QPalette) interceptor).WindowText();
		}
		[SmokeMethod("button", "() const", "")]
		public QBrush Button() {
			return ((QPalette) interceptor).Button();
		}
		[SmokeMethod("light", "() const", "")]
		public QBrush Light() {
			return ((QPalette) interceptor).Light();
		}
		[SmokeMethod("dark", "() const", "")]
		public QBrush Dark() {
			return ((QPalette) interceptor).Dark();
		}
		[SmokeMethod("mid", "() const", "")]
		public QBrush Mid() {
			return ((QPalette) interceptor).Mid();
		}
		[SmokeMethod("text", "() const", "")]
		public QBrush Text() {
			return ((QPalette) interceptor).Text();
		}
		[SmokeMethod("base", "() const", "")]
		public QBrush Base() {
			return ((QPalette) interceptor).Base();
		}
		[SmokeMethod("alternateBase", "() const", "")]
		public QBrush AlternateBase() {
			return ((QPalette) interceptor).AlternateBase();
		}
		[SmokeMethod("background", "() const", "")]
		public QBrush Background() {
			return ((QPalette) interceptor).Background();
		}
		[SmokeMethod("window", "() const", "")]
		public QBrush Window() {
			return ((QPalette) interceptor).Window();
		}
		[SmokeMethod("midlight", "() const", "")]
		public QBrush Midlight() {
			return ((QPalette) interceptor).Midlight();
		}
		[SmokeMethod("brightText", "() const", "")]
		public QBrush BrightText() {
			return ((QPalette) interceptor).BrightText();
		}
		[SmokeMethod("buttonText", "() const", "")]
		public QBrush ButtonText() {
			return ((QPalette) interceptor).ButtonText();
		}
		[SmokeMethod("shadow", "() const", "")]
		public QBrush Shadow() {
			return ((QPalette) interceptor).Shadow();
		}
		[SmokeMethod("highlight", "() const", "")]
		public QBrush Highlight() {
			return ((QPalette) interceptor).Highlight();
		}
		[SmokeMethod("highlightedText", "() const", "")]
		public QBrush HighlightedText() {
			return ((QPalette) interceptor).HighlightedText();
		}
		[SmokeMethod("link", "() const", "")]
		public QBrush Link() {
			return ((QPalette) interceptor).Link();
		}
		[SmokeMethod("linkVisited", "() const", "")]
		public QBrush LinkVisited() {
			return ((QPalette) interceptor).LinkVisited();
		}
		public override bool Equals(object o) {
			if (!(o is QPalette)) { return false; }
			return this == (QPalette) o;
		}
		public override int GetHashCode() {
			return ((QPalette) interceptor).GetHashCode();
		}
		[SmokeMethod("isCopyOf", "(const QPalette&) const", "#")]
		public bool IsCopyOf(QPalette p) {
			return ((QPalette) interceptor).IsCopyOf(p);
		}
		[SmokeMethod("serialNumber", "() const", "")]
		public int SerialNumber() {
			return ((QPalette) interceptor).SerialNumber();
		}
		[SmokeMethod("resolve", "(const QPalette&) const", "#")]
		public QPalette Resolve(QPalette arg1) {
			return ((QPalette) interceptor).Resolve(arg1);
		}
		[SmokeMethod("resolve", "() const", "")]
		public uint Resolve() {
			return ((QPalette) interceptor).Resolve();
		}
		[SmokeMethod("resolve", "(uint)", "$")]
		public void Resolve(uint mask) {
			((QPalette) interceptor).Resolve(mask);
		}
		~QPalette() {
			DisposeQPalette();
		}
		public void Dispose() {
			DisposeQPalette();
		}
		[SmokeMethod("~QPalette", "()", "")]
		private void DisposeQPalette() {
			((QPalette) interceptor).DisposeQPalette();
		}
		public static bool operator==(QPalette lhs, QPalette p) {
			return staticInterceptor.op_equals(lhs,p);
		}
		public static bool operator!=(QPalette lhs, QPalette p) {
			return !staticInterceptor.op_equals(lhs,p);
		}
	}
}
