//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QSplitterHandle")]
	public class QSplitterHandle : QWidget, IDisposable {
 		protected QSplitterHandle(Type dummy) : base((Type) null) {}
		[SmokeClass("QSplitterHandle")]
		interface IQSplitterHandleProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSplitterHandle), this);
			interceptor = (QSplitterHandle) realProxy.GetTransparentProxy();
		}
		private static IQSplitterHandleProxy staticInterceptor = null;
		static QSplitterHandle() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSplitterHandleProxy), null);
			staticInterceptor = (IQSplitterHandleProxy) realProxy.GetTransparentProxy();
		}
		public QSplitterHandle(Qt.Orientation o, QSplitter parent) : this((Type) null) {
			CreateProxy();
			NewQSplitterHandle(o,parent);
		}
		[SmokeMethod("QSplitterHandle", "(Qt::Orientation, QSplitter*)", "$#")]
		private void NewQSplitterHandle(Qt.Orientation o, QSplitter parent) {
			((QSplitterHandle) interceptor).NewQSplitterHandle(o,parent);
		}
		[SmokeMethod("setOrientation", "(Qt::Orientation)", "$")]
		public void SetOrientation(Qt.Orientation o) {
			((QSplitterHandle) interceptor).SetOrientation(o);
		}
		[SmokeMethod("orientation", "() const", "")]
		public Qt.Orientation Orientation() {
			return ((QSplitterHandle) interceptor).Orientation();
		}
		[SmokeMethod("opaqueResize", "() const", "")]
		public bool OpaqueResize() {
			return ((QSplitterHandle) interceptor).OpaqueResize();
		}
		[SmokeMethod("splitter", "() const", "")]
		public QSplitter Splitter() {
			return ((QSplitterHandle) interceptor).Splitter();
		}
		[SmokeMethod("sizeHint", "() const", "")]
		public override QSize SizeHint() {
			return ((QSplitterHandle) interceptor).SizeHint();
		}
		[SmokeMethod("paintEvent", "(QPaintEvent*)", "#")]
		protected override void PaintEvent(QPaintEvent arg1) {
			((QSplitterHandle) interceptor).PaintEvent(arg1);
		}
		[SmokeMethod("mouseMoveEvent", "(QMouseEvent*)", "#")]
		protected override void MouseMoveEvent(QMouseEvent arg1) {
			((QSplitterHandle) interceptor).MouseMoveEvent(arg1);
		}
		[SmokeMethod("mousePressEvent", "(QMouseEvent*)", "#")]
		protected override void MousePressEvent(QMouseEvent arg1) {
			((QSplitterHandle) interceptor).MousePressEvent(arg1);
		}
		[SmokeMethod("mouseReleaseEvent", "(QMouseEvent*)", "#")]
		protected override void MouseReleaseEvent(QMouseEvent arg1) {
			((QSplitterHandle) interceptor).MouseReleaseEvent(arg1);
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		protected override bool Event(QEvent arg1) {
			return ((QSplitterHandle) interceptor).Event(arg1);
		}
		[SmokeMethod("moveSplitter", "(int)", "$")]
		protected void MoveSplitter(int p) {
			((QSplitterHandle) interceptor).MoveSplitter(p);
		}
		[SmokeMethod("closestLegalPosition", "(int)", "$")]
		protected int ClosestLegalPosition(int p) {
			return ((QSplitterHandle) interceptor).ClosestLegalPosition(p);
		}
		~QSplitterHandle() {
			DisposeQSplitterHandle();
		}
		public new void Dispose() {
			DisposeQSplitterHandle();
		}
		[SmokeMethod("~QSplitterHandle", "()", "")]
		private void DisposeQSplitterHandle() {
			((QSplitterHandle) interceptor).DisposeQSplitterHandle();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQSplitterHandleSignals Emit {
			get { return (IQSplitterHandleSignals) Q_EMIT; }
		}
	}

	public interface IQSplitterHandleSignals : IQWidgetSignals {
	}
}
