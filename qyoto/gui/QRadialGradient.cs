//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QRadialGradient")]
	public class QRadialGradient : QGradient, IDisposable {
 		protected QRadialGradient(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QRadialGradient), this);
			interceptor = (QRadialGradient) realProxy.GetTransparentProxy();
		}
		public QRadialGradient() : this((Type) null) {
			CreateProxy();
			NewQRadialGradient();
		}
		[SmokeMethod("QRadialGradient", "()", "")]
		private void NewQRadialGradient() {
			((QRadialGradient) interceptor).NewQRadialGradient();
		}
		public QRadialGradient(QPointF center, double radius, QPointF focalPoint) : this((Type) null) {
			CreateProxy();
			NewQRadialGradient(center,radius,focalPoint);
		}
		[SmokeMethod("QRadialGradient", "(const QPointF&, qreal, const QPointF&)", "#$#")]
		private void NewQRadialGradient(QPointF center, double radius, QPointF focalPoint) {
			((QRadialGradient) interceptor).NewQRadialGradient(center,radius,focalPoint);
		}
		public QRadialGradient(double cx, double cy, double radius, double fx, double fy) : this((Type) null) {
			CreateProxy();
			NewQRadialGradient(cx,cy,radius,fx,fy);
		}
		[SmokeMethod("QRadialGradient", "(qreal, qreal, qreal, qreal, qreal)", "$$$$$")]
		private void NewQRadialGradient(double cx, double cy, double radius, double fx, double fy) {
			((QRadialGradient) interceptor).NewQRadialGradient(cx,cy,radius,fx,fy);
		}
		public QRadialGradient(QPointF center, double radius) : this((Type) null) {
			CreateProxy();
			NewQRadialGradient(center,radius);
		}
		[SmokeMethod("QRadialGradient", "(const QPointF&, qreal)", "#$")]
		private void NewQRadialGradient(QPointF center, double radius) {
			((QRadialGradient) interceptor).NewQRadialGradient(center,radius);
		}
		public QRadialGradient(double cx, double cy, double radius) : this((Type) null) {
			CreateProxy();
			NewQRadialGradient(cx,cy,radius);
		}
		[SmokeMethod("QRadialGradient", "(qreal, qreal, qreal)", "$$$")]
		private void NewQRadialGradient(double cx, double cy, double radius) {
			((QRadialGradient) interceptor).NewQRadialGradient(cx,cy,radius);
		}
		[SmokeMethod("center", "() const", "")]
		public QPointF Center() {
			return ((QRadialGradient) interceptor).Center();
		}
		[SmokeMethod("setCenter", "(const QPointF&)", "#")]
		public void SetCenter(QPointF center) {
			((QRadialGradient) interceptor).SetCenter(center);
		}
		[SmokeMethod("setCenter", "(qreal, qreal)", "$$")]
		public void SetCenter(double x, double y) {
			((QRadialGradient) interceptor).SetCenter(x,y);
		}
		[SmokeMethod("focalPoint", "() const", "")]
		public QPointF FocalPoint() {
			return ((QRadialGradient) interceptor).FocalPoint();
		}
		[SmokeMethod("setFocalPoint", "(const QPointF&)", "#")]
		public void SetFocalPoint(QPointF focalPoint) {
			((QRadialGradient) interceptor).SetFocalPoint(focalPoint);
		}
		[SmokeMethod("setFocalPoint", "(qreal, qreal)", "$$")]
		public void SetFocalPoint(double x, double y) {
			((QRadialGradient) interceptor).SetFocalPoint(x,y);
		}
		[SmokeMethod("radius", "() const", "")]
		public double Radius() {
			return ((QRadialGradient) interceptor).Radius();
		}
		[SmokeMethod("setRadius", "(qreal)", "$")]
		public void SetRadius(double radius) {
			((QRadialGradient) interceptor).SetRadius(radius);
		}
		~QRadialGradient() {
			DisposeQRadialGradient();
		}
		public void Dispose() {
			DisposeQRadialGradient();
		}
		[SmokeMethod("~QRadialGradient", "()", "")]
		private void DisposeQRadialGradient() {
			((QRadialGradient) interceptor).DisposeQRadialGradient();
		}
	}
}
