//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QFontMetrics")]
	public class QFontMetrics : MarshalByRefObject, IDisposable {
		protected QFontMetrics interceptor = null;
		private IntPtr smokeObject;
		protected QFontMetrics(Type dummy) {}
		[SmokeClass("QFontMetrics")]
		interface IQFontMetricsProxy {
			[SmokeMethod("operator==", "(const QFontMetrics&)", "#")]
			bool op_equals(QFontMetrics lhs, QFontMetrics other);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QFontMetrics), this);
			interceptor = (QFontMetrics) realProxy.GetTransparentProxy();
		}
		private static IQFontMetricsProxy staticInterceptor = null;
		static QFontMetrics() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQFontMetricsProxy), null);
			staticInterceptor = (IQFontMetricsProxy) realProxy.GetTransparentProxy();
		}
		public QFontMetrics(QFont arg1) : this((Type) null) {
			CreateProxy();
			NewQFontMetrics(arg1);
		}
		[SmokeMethod("QFontMetrics", "(const QFont&)", "#")]
		private void NewQFontMetrics(QFont arg1) {
			((QFontMetrics) interceptor).NewQFontMetrics(arg1);
		}
		public QFontMetrics(QFont arg1, IQPaintDevice pd) : this((Type) null) {
			CreateProxy();
			NewQFontMetrics(arg1,pd);
		}
		[SmokeMethod("QFontMetrics", "(const QFont&, QPaintDevice*)", "##")]
		private void NewQFontMetrics(QFont arg1, IQPaintDevice pd) {
			((QFontMetrics) interceptor).NewQFontMetrics(arg1,pd);
		}
		public QFontMetrics(QFontMetrics arg1) : this((Type) null) {
			CreateProxy();
			NewQFontMetrics(arg1);
		}
		[SmokeMethod("QFontMetrics", "(const QFontMetrics&)", "#")]
		private void NewQFontMetrics(QFontMetrics arg1) {
			((QFontMetrics) interceptor).NewQFontMetrics(arg1);
		}
		[SmokeMethod("ascent", "() const", "")]
		public int Ascent() {
			return ((QFontMetrics) interceptor).Ascent();
		}
		[SmokeMethod("descent", "() const", "")]
		public int Descent() {
			return ((QFontMetrics) interceptor).Descent();
		}
		[SmokeMethod("height", "() const", "")]
		public int Height() {
			return ((QFontMetrics) interceptor).Height();
		}
		[SmokeMethod("leading", "() const", "")]
		public int Leading() {
			return ((QFontMetrics) interceptor).Leading();
		}
		[SmokeMethod("lineSpacing", "() const", "")]
		public int LineSpacing() {
			return ((QFontMetrics) interceptor).LineSpacing();
		}
		[SmokeMethod("minLeftBearing", "() const", "")]
		public int MinLeftBearing() {
			return ((QFontMetrics) interceptor).MinLeftBearing();
		}
		[SmokeMethod("minRightBearing", "() const", "")]
		public int MinRightBearing() {
			return ((QFontMetrics) interceptor).MinRightBearing();
		}
		[SmokeMethod("maxWidth", "() const", "")]
		public int MaxWidth() {
			return ((QFontMetrics) interceptor).MaxWidth();
		}
		[SmokeMethod("xHeight", "() const", "")]
		public int XHeight() {
			return ((QFontMetrics) interceptor).XHeight();
		}
		[SmokeMethod("averageCharWidth", "() const", "")]
		public int AverageCharWidth() {
			return ((QFontMetrics) interceptor).AverageCharWidth();
		}
		[SmokeMethod("inFont", "(QChar) const", "#")]
		public bool InFont(char arg1) {
			return ((QFontMetrics) interceptor).InFont(arg1);
		}
		[SmokeMethod("leftBearing", "(QChar) const", "#")]
		public int LeftBearing(char arg1) {
			return ((QFontMetrics) interceptor).LeftBearing(arg1);
		}
		[SmokeMethod("rightBearing", "(QChar) const", "#")]
		public int RightBearing(char arg1) {
			return ((QFontMetrics) interceptor).RightBearing(arg1);
		}
		[SmokeMethod("width", "(const QString&, int) const", "$$")]
		public int Width(string arg1, int len) {
			return ((QFontMetrics) interceptor).Width(arg1,len);
		}
		[SmokeMethod("width", "(const QString&) const", "$")]
		public int Width(string arg1) {
			return ((QFontMetrics) interceptor).Width(arg1);
		}
		[SmokeMethod("width", "(QChar) const", "#")]
		public int Width(char arg1) {
			return ((QFontMetrics) interceptor).Width(arg1);
		}
		[SmokeMethod("charWidth", "(const QString&, int) const", "$$")]
		public int CharWidth(string str, int pos) {
			return ((QFontMetrics) interceptor).CharWidth(str,pos);
		}
		[SmokeMethod("boundingRect", "(QChar) const", "#")]
		public QRect BoundingRect(char arg1) {
			return ((QFontMetrics) interceptor).BoundingRect(arg1);
		}
		[SmokeMethod("boundingRect", "(const QString&) const", "$")]
		public QRect BoundingRect(string text) {
			return ((QFontMetrics) interceptor).BoundingRect(text);
		}
		[SmokeMethod("boundingRect", "(const QRect&, int, const QString&, int, int*) const", "#$$$$")]
		public QRect BoundingRect(QRect r, int flags, string text, int tabstops, out int tabarray) {
			return ((QFontMetrics) interceptor).BoundingRect(r,flags,text,tabstops,out tabarray);
		}
		[SmokeMethod("boundingRect", "(const QRect&, int, const QString&, int) const", "#$$$")]
		public QRect BoundingRect(QRect r, int flags, string text, int tabstops) {
			return ((QFontMetrics) interceptor).BoundingRect(r,flags,text,tabstops);
		}
		[SmokeMethod("boundingRect", "(const QRect&, int, const QString&) const", "#$$")]
		public QRect BoundingRect(QRect r, int flags, string text) {
			return ((QFontMetrics) interceptor).BoundingRect(r,flags,text);
		}
		[SmokeMethod("boundingRect", "(int, int, int, int, int, const QString&, int, int*) const", "$$$$$$$$")]
		public QRect BoundingRect(int x, int y, int w, int h, int flags, string text, int tabstops, out int tabarray) {
			return ((QFontMetrics) interceptor).BoundingRect(x,y,w,h,flags,text,tabstops,out tabarray);
		}
		[SmokeMethod("boundingRect", "(int, int, int, int, int, const QString&, int) const", "$$$$$$$")]
		public QRect BoundingRect(int x, int y, int w, int h, int flags, string text, int tabstops) {
			return ((QFontMetrics) interceptor).BoundingRect(x,y,w,h,flags,text,tabstops);
		}
		[SmokeMethod("boundingRect", "(int, int, int, int, int, const QString&) const", "$$$$$$")]
		public QRect BoundingRect(int x, int y, int w, int h, int flags, string text) {
			return ((QFontMetrics) interceptor).BoundingRect(x,y,w,h,flags,text);
		}
		[SmokeMethod("size", "(int, const QString&, int, int*) const", "$$$$")]
		public QSize Size(int flags, string str, int tabstops, out int tabarray) {
			return ((QFontMetrics) interceptor).Size(flags,str,tabstops,out tabarray);
		}
		[SmokeMethod("size", "(int, const QString&, int) const", "$$$")]
		public QSize Size(int flags, string str, int tabstops) {
			return ((QFontMetrics) interceptor).Size(flags,str,tabstops);
		}
		[SmokeMethod("size", "(int, const QString&) const", "$$")]
		public QSize Size(int flags, string str) {
			return ((QFontMetrics) interceptor).Size(flags,str);
		}
		[SmokeMethod("elidedText", "(const QString&, Qt::TextElideMode, int, int) const", "$$$$")]
		public string ElidedText(string text, Qt.TextElideMode mode, int width, int flags) {
			return ((QFontMetrics) interceptor).ElidedText(text,mode,width,flags);
		}
		[SmokeMethod("elidedText", "(const QString&, Qt::TextElideMode, int) const", "$$$")]
		public string ElidedText(string text, Qt.TextElideMode mode, int width) {
			return ((QFontMetrics) interceptor).ElidedText(text,mode,width);
		}
		[SmokeMethod("underlinePos", "() const", "")]
		public int UnderlinePos() {
			return ((QFontMetrics) interceptor).UnderlinePos();
		}
		[SmokeMethod("overlinePos", "() const", "")]
		public int OverlinePos() {
			return ((QFontMetrics) interceptor).OverlinePos();
		}
		[SmokeMethod("strikeOutPos", "() const", "")]
		public int StrikeOutPos() {
			return ((QFontMetrics) interceptor).StrikeOutPos();
		}
		[SmokeMethod("lineWidth", "() const", "")]
		public int LineWidth() {
			return ((QFontMetrics) interceptor).LineWidth();
		}
		public override bool Equals(object o) {
			if (!(o is QFontMetrics)) { return false; }
			return this == (QFontMetrics) o;
		}
		public override int GetHashCode() {
			return ((QFontMetrics) interceptor).GetHashCode();
		}
		~QFontMetrics() {
			DisposeQFontMetrics();
		}
		public void Dispose() {
			DisposeQFontMetrics();
		}
		[SmokeMethod("~QFontMetrics", "()", "")]
		private void DisposeQFontMetrics() {
			((QFontMetrics) interceptor).DisposeQFontMetrics();
		}
		public static bool operator==(QFontMetrics lhs, QFontMetrics other) {
			return staticInterceptor.op_equals(lhs,other);
		}
		public static bool operator!=(QFontMetrics lhs, QFontMetrics other) {
			return !staticInterceptor.op_equals(lhs,other);
		}
	}
}
