//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	/// See <see cref="IQAbstractButtonSignals"></see> for signals emitted by QAbstractButton
	[SmokeClass("QAbstractButton")]
	public abstract class QAbstractButton : QWidget {
 		protected QAbstractButton(Type dummy) : base((Type) null) {}
		[SmokeClass("QAbstractButton")]
		interface IQAbstractButtonProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QAbstractButton), this);
			interceptor = (QAbstractButton) realProxy.GetTransparentProxy();
		}
		private static IQAbstractButtonProxy staticInterceptor = null;
		static QAbstractButton() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQAbstractButtonProxy), null);
			staticInterceptor = (IQAbstractButtonProxy) realProxy.GetTransparentProxy();
		}
		[Q_PROPERTY("QString", "text")]
		public string Text {
			[SmokeMethod("text", "()", "")]
			get { return ((QAbstractButton) interceptor).Text; }
			[SmokeMethod("setText", "(QString)", "$")]
			set { ((QAbstractButton) interceptor).Text = value; }
		}
		[Q_PROPERTY("QIcon", "icon")]
		public QIcon Icon {
			[SmokeMethod("icon", "()", "")]
			get { return ((QAbstractButton) interceptor).Icon; }
			[SmokeMethod("setIcon", "(QIcon)", "#")]
			set { ((QAbstractButton) interceptor).Icon = value; }
		}
		[Q_PROPERTY("QSize", "iconSize")]
		public QSize IconSize {
			[SmokeMethod("iconSize", "()", "")]
			get { return ((QAbstractButton) interceptor).IconSize; }
			[SmokeMethod("setIconSize", "(QSize)", "#")]
			set { ((QAbstractButton) interceptor).IconSize = value; }
		}
		[Q_PROPERTY("QKeySequence", "shortcut")]
		public QKeySequence Shortcut {
			[SmokeMethod("shortcut", "()", "")]
			get { return ((QAbstractButton) interceptor).Shortcut; }
			[SmokeMethod("setShortcut", "(QKeySequence)", "#")]
			set { ((QAbstractButton) interceptor).Shortcut = value; }
		}
		[Q_PROPERTY("bool", "checkable")]
		public bool Checkable {
			[SmokeMethod("isCheckable", "()", "")]
			get { return ((QAbstractButton) interceptor).Checkable; }
			[SmokeMethod("setCheckable", "(bool)", "$")]
			set { ((QAbstractButton) interceptor).Checkable = value; }
		}
		[Q_PROPERTY("bool", "checked")]
		public bool Checked {
			[SmokeMethod("isChecked", "()", "")]
			get { return ((QAbstractButton) interceptor).Checked; }
			[SmokeMethod("setChecked", "(bool)", "$")]
			set { ((QAbstractButton) interceptor).Checked = value; }
		}
		[Q_PROPERTY("bool", "autoRepeat")]
		public bool AutoRepeat {
			[SmokeMethod("autoRepeat", "()", "")]
			get { return ((QAbstractButton) interceptor).AutoRepeat; }
			[SmokeMethod("setAutoRepeat", "(bool)", "$")]
			set { ((QAbstractButton) interceptor).AutoRepeat = value; }
		}
		[Q_PROPERTY("bool", "autoExclusive")]
		public bool AutoExclusive {
			[SmokeMethod("autoExclusive", "()", "")]
			get { return ((QAbstractButton) interceptor).AutoExclusive; }
			[SmokeMethod("setAutoExclusive", "(bool)", "$")]
			set { ((QAbstractButton) interceptor).AutoExclusive = value; }
		}
		[Q_PROPERTY("int", "autoRepeatDelay")]
		public int AutoRepeatDelay {
			[SmokeMethod("autoRepeatDelay", "()", "")]
			get { return ((QAbstractButton) interceptor).AutoRepeatDelay; }
			[SmokeMethod("setAutoRepeatDelay", "(int)", "$")]
			set { ((QAbstractButton) interceptor).AutoRepeatDelay = value; }
		}
		[Q_PROPERTY("int", "autoRepeatInterval")]
		public int AutoRepeatInterval {
			[SmokeMethod("autoRepeatInterval", "()", "")]
			get { return ((QAbstractButton) interceptor).AutoRepeatInterval; }
			[SmokeMethod("setAutoRepeatInterval", "(int)", "$")]
			set { ((QAbstractButton) interceptor).AutoRepeatInterval = value; }
		}
		[Q_PROPERTY("bool", "down")]
		public bool Down {
			[SmokeMethod("isDown", "()", "")]
			get { return ((QAbstractButton) interceptor).Down; }
			[SmokeMethod("setDown", "(bool)", "$")]
			set { ((QAbstractButton) interceptor).Down = value; }
		}
		public QAbstractButton(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQAbstractButton(parent);
		}
		[SmokeMethod("QAbstractButton", "(QWidget*)", "#")]
		private void NewQAbstractButton(QWidget parent) {
			((QAbstractButton) interceptor).NewQAbstractButton(parent);
		}
		public QAbstractButton() : this((Type) null) {
			CreateProxy();
			NewQAbstractButton();
		}
		[SmokeMethod("QAbstractButton", "()", "")]
		private void NewQAbstractButton() {
			((QAbstractButton) interceptor).NewQAbstractButton();
		}
		[SmokeMethod("isCheckable", "() const", "")]
		public bool IsCheckable() {
			return ((QAbstractButton) interceptor).IsCheckable();
		}
		[SmokeMethod("isChecked", "() const", "")]
		public bool IsChecked() {
			return ((QAbstractButton) interceptor).IsChecked();
		}
		[SmokeMethod("isDown", "() const", "")]
		public bool IsDown() {
			return ((QAbstractButton) interceptor).IsDown();
		}
		[SmokeMethod("group", "() const", "")]
		public QButtonGroup Group() {
			return ((QAbstractButton) interceptor).Group();
		}
		[Q_SLOT("void animateClick(int)")]
		[SmokeMethod("animateClick", "(int)", "$")]
		public void AnimateClick(int msec) {
			((QAbstractButton) interceptor).AnimateClick(msec);
		}
		[Q_SLOT("void animateClick()")]
		[SmokeMethod("animateClick", "()", "")]
		public void AnimateClick() {
			((QAbstractButton) interceptor).AnimateClick();
		}
		[Q_SLOT("void click()")]
		[SmokeMethod("click", "()", "")]
		public void Click() {
			((QAbstractButton) interceptor).Click();
		}
		[Q_SLOT("void toggle()")]
		[SmokeMethod("toggle", "()", "")]
		public void Toggle() {
			((QAbstractButton) interceptor).Toggle();
		}
		[SmokeMethod("paintEvent", "(QPaintEvent*)", "#")]
		protected abstract void PaintEvent(QPaintEvent e);
		[SmokeMethod("hitButton", "(const QPoint&) const", "#")]
		protected virtual bool HitButton(QPoint pos) {
			return ((QAbstractButton) interceptor).HitButton(pos);
		}
		[SmokeMethod("checkStateSet", "()", "")]
		protected virtual void CheckStateSet() {
			((QAbstractButton) interceptor).CheckStateSet();
		}
		[SmokeMethod("nextCheckState", "()", "")]
		protected virtual void NextCheckState() {
			((QAbstractButton) interceptor).NextCheckState();
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		protected override bool Event(QEvent e) {
			return ((QAbstractButton) interceptor).Event(e);
		}
		[SmokeMethod("keyPressEvent", "(QKeyEvent*)", "#")]
		protected override void KeyPressEvent(QKeyEvent e) {
			((QAbstractButton) interceptor).KeyPressEvent(e);
		}
		[SmokeMethod("keyReleaseEvent", "(QKeyEvent*)", "#")]
		protected override void KeyReleaseEvent(QKeyEvent e) {
			((QAbstractButton) interceptor).KeyReleaseEvent(e);
		}
		[SmokeMethod("mousePressEvent", "(QMouseEvent*)", "#")]
		protected override void MousePressEvent(QMouseEvent e) {
			((QAbstractButton) interceptor).MousePressEvent(e);
		}
		[SmokeMethod("mouseReleaseEvent", "(QMouseEvent*)", "#")]
		protected override void MouseReleaseEvent(QMouseEvent e) {
			((QAbstractButton) interceptor).MouseReleaseEvent(e);
		}
		[SmokeMethod("mouseMoveEvent", "(QMouseEvent*)", "#")]
		protected override void MouseMoveEvent(QMouseEvent e) {
			((QAbstractButton) interceptor).MouseMoveEvent(e);
		}
		[SmokeMethod("focusInEvent", "(QFocusEvent*)", "#")]
		protected override void FocusInEvent(QFocusEvent e) {
			((QAbstractButton) interceptor).FocusInEvent(e);
		}
		[SmokeMethod("focusOutEvent", "(QFocusEvent*)", "#")]
		protected override void FocusOutEvent(QFocusEvent e) {
			((QAbstractButton) interceptor).FocusOutEvent(e);
		}
		[SmokeMethod("changeEvent", "(QEvent*)", "#")]
		protected override void ChangeEvent(QEvent e) {
			((QAbstractButton) interceptor).ChangeEvent(e);
		}
		[SmokeMethod("timerEvent", "(QTimerEvent*)", "#")]
		protected override void TimerEvent(QTimerEvent e) {
			((QAbstractButton) interceptor).TimerEvent(e);
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQAbstractButtonSignals Emit {
			get { return (IQAbstractButtonSignals) Q_EMIT; }
		}
	}

	public interface IQAbstractButtonSignals : IQWidgetSignals {
		[Q_SIGNAL("void pressed()")]
		void Pressed();
		[Q_SIGNAL("void released()")]
		void Released();
		[Q_SIGNAL("void clicked(bool)")]
		void Clicked(bool arg1);
		[Q_SIGNAL("void clicked()")]
		void Clicked();
		[Q_SIGNAL("void toggled(bool)")]
		void Toggled(bool arg1);
	}
}
