//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	/// See <see cref="IQAbstractButtonSignals"></see> for signals emitted by QAbstractButton
	[SmokeClass("QAbstractButton")]
	public abstract class QAbstractButton : QWidget {
 		protected QAbstractButton(Type dummy) : base((Type) null) {}
		[SmokeClass("QAbstractButton")]
		interface IQAbstractButtonProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QAbstractButton), this);
			_interceptor = (QAbstractButton) realProxy.GetTransparentProxy();
		}
		private QAbstractButton ProxyQAbstractButton() {
			return (QAbstractButton) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QAbstractButton() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQAbstractButtonProxy), null);
			_staticInterceptor = (IQAbstractButtonProxy) realProxy.GetTransparentProxy();
		}
		private static IQAbstractButtonProxy StaticQAbstractButton() {
			return (IQAbstractButtonProxy) _staticInterceptor;
		}
		[Q_PROPERTY("QString", "text")]
		public string Text {
			get { return Property("text").Value<string>(); }
			set { SetProperty("text", QVariant.FromValue<string>(value)); }
		}
		[Q_PROPERTY("QIcon", "icon")]
		public QIcon Icon {
			get { return Property("icon").Value<QIcon>(); }
			set { SetProperty("icon", QVariant.FromValue<QIcon>(value)); }
		}
		[Q_PROPERTY("QSize", "iconSize")]
		public QSize IconSize {
			get { return Property("iconSize").Value<QSize>(); }
			set { SetProperty("iconSize", QVariant.FromValue<QSize>(value)); }
		}
		[Q_PROPERTY("QKeySequence", "shortcut")]
		public QKeySequence Shortcut {
			get { return Property("shortcut").Value<QKeySequence>(); }
			set { SetProperty("shortcut", QVariant.FromValue<QKeySequence>(value)); }
		}
		[Q_PROPERTY("bool", "checkable")]
		public bool Checkable {
			get { return Property("checkable").Value<bool>(); }
			set { SetProperty("checkable", QVariant.FromValue<bool>(value)); }
		}
		[Q_PROPERTY("bool", "checked")]
		public bool Checked {
			get { return Property("checked").Value<bool>(); }
			set { SetProperty("checked", QVariant.FromValue<bool>(value)); }
		}
		[Q_PROPERTY("bool", "autoRepeat")]
		public bool AutoRepeat {
			get { return Property("autoRepeat").Value<bool>(); }
			set { SetProperty("autoRepeat", QVariant.FromValue<bool>(value)); }
		}
		[Q_PROPERTY("bool", "autoExclusive")]
		public bool AutoExclusive {
			get { return Property("autoExclusive").Value<bool>(); }
			set { SetProperty("autoExclusive", QVariant.FromValue<bool>(value)); }
		}
		[Q_PROPERTY("int", "autoRepeatDelay")]
		public int AutoRepeatDelay {
			get { return Property("autoRepeatDelay").Value<int>(); }
			set { SetProperty("autoRepeatDelay", QVariant.FromValue<int>(value)); }
		}
		[Q_PROPERTY("int", "autoRepeatInterval")]
		public int AutoRepeatInterval {
			get { return Property("autoRepeatInterval").Value<int>(); }
			set { SetProperty("autoRepeatInterval", QVariant.FromValue<int>(value)); }
		}
		[Q_PROPERTY("bool", "down")]
		public bool Down {
			get { return Property("down").Value<bool>(); }
			set { SetProperty("down", QVariant.FromValue<bool>(value)); }
		}
		public QAbstractButton(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQAbstractButton(parent);
		}
		[SmokeMethod("QAbstractButton", "(QWidget*)", "#")]
		private void NewQAbstractButton(QWidget parent) {
			ProxyQAbstractButton().NewQAbstractButton(parent);
		}
		public QAbstractButton() : this((Type) null) {
			CreateProxy();
			NewQAbstractButton();
		}
		[SmokeMethod("QAbstractButton", "()", "")]
		private void NewQAbstractButton() {
			ProxyQAbstractButton().NewQAbstractButton();
		}
		[SmokeMethod("isCheckable", "() const", "")]
		public bool IsCheckable() {
			return ProxyQAbstractButton().IsCheckable();
		}
		[SmokeMethod("isChecked", "() const", "")]
		public bool IsChecked() {
			return ProxyQAbstractButton().IsChecked();
		}
		[SmokeMethod("isDown", "() const", "")]
		public bool IsDown() {
			return ProxyQAbstractButton().IsDown();
		}
		[SmokeMethod("group", "() const", "")]
		public QButtonGroup Group() {
			return ProxyQAbstractButton().Group();
		}
		[Q_SLOT("void animateClick(int)")]
		[SmokeMethod("animateClick", "(int)", "$")]
		public void AnimateClick(int msec) {
			ProxyQAbstractButton().AnimateClick(msec);
		}
		[Q_SLOT("void animateClick()")]
		[SmokeMethod("animateClick", "()", "")]
		public void AnimateClick() {
			ProxyQAbstractButton().AnimateClick();
		}
		[Q_SLOT("void click()")]
		[SmokeMethod("click", "()", "")]
		public void Click() {
			ProxyQAbstractButton().Click();
		}
		[Q_SLOT("void toggle()")]
		[SmokeMethod("toggle", "()", "")]
		public void Toggle() {
			ProxyQAbstractButton().Toggle();
		}
		protected abstract void PaintEvent(QPaintEvent e);
		[SmokeMethod("hitButton", "(const QPoint&) const", "#")]
		protected virtual bool HitButton(QPoint pos) {
			return ProxyQAbstractButton().HitButton(pos);
		}
		[SmokeMethod("checkStateSet", "()", "")]
		protected virtual void CheckStateSet() {
			ProxyQAbstractButton().CheckStateSet();
		}
		[SmokeMethod("nextCheckState", "()", "")]
		protected virtual void NextCheckState() {
			ProxyQAbstractButton().NextCheckState();
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		protected override bool Event(QEvent e) {
			return ProxyQAbstractButton().Event(e);
		}
		[SmokeMethod("keyPressEvent", "(QKeyEvent*)", "#")]
		protected override void KeyPressEvent(QKeyEvent e) {
			ProxyQAbstractButton().KeyPressEvent(e);
		}
		[SmokeMethod("keyReleaseEvent", "(QKeyEvent*)", "#")]
		protected override void KeyReleaseEvent(QKeyEvent e) {
			ProxyQAbstractButton().KeyReleaseEvent(e);
		}
		[SmokeMethod("mousePressEvent", "(QMouseEvent*)", "#")]
		protected override void MousePressEvent(QMouseEvent e) {
			ProxyQAbstractButton().MousePressEvent(e);
		}
		[SmokeMethod("mouseReleaseEvent", "(QMouseEvent*)", "#")]
		protected override void MouseReleaseEvent(QMouseEvent e) {
			ProxyQAbstractButton().MouseReleaseEvent(e);
		}
		[SmokeMethod("mouseMoveEvent", "(QMouseEvent*)", "#")]
		protected override void MouseMoveEvent(QMouseEvent e) {
			ProxyQAbstractButton().MouseMoveEvent(e);
		}
		[SmokeMethod("focusInEvent", "(QFocusEvent*)", "#")]
		protected override void FocusInEvent(QFocusEvent e) {
			ProxyQAbstractButton().FocusInEvent(e);
		}
		[SmokeMethod("focusOutEvent", "(QFocusEvent*)", "#")]
		protected override void FocusOutEvent(QFocusEvent e) {
			ProxyQAbstractButton().FocusOutEvent(e);
		}
		[SmokeMethod("changeEvent", "(QEvent*)", "#")]
		protected override void ChangeEvent(QEvent e) {
			ProxyQAbstractButton().ChangeEvent(e);
		}
		[SmokeMethod("timerEvent", "(QTimerEvent*)", "#")]
		protected override void TimerEvent(QTimerEvent e) {
			ProxyQAbstractButton().TimerEvent(e);
		}
		public static string Tr(string s, string c) {
			return StaticQAbstractButton().Tr(s,c);
		}
		public static string Tr(string s) {
			return StaticQAbstractButton().Tr(s);
		}
		protected new IQAbstractButtonSignals Emit {
			get { return (IQAbstractButtonSignals) Q_EMIT; }
		}
	}

	public interface IQAbstractButtonSignals : IQWidgetSignals {
		[Q_SIGNAL("void pressed()")]
		void Pressed();
		[Q_SIGNAL("void released()")]
		void Released();
		[Q_SIGNAL("void clicked(bool)")]
		void Clicked(bool arg1);
		[Q_SIGNAL("void clicked()")]
		void Clicked();
		[Q_SIGNAL("void toggled(bool)")]
		void Toggled(bool arg1);
	}
}
