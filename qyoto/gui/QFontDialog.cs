//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QFontDialog")]
	public class QFontDialog : QDialog {
 		protected QFontDialog(Type dummy) : base((Type) null) {}
		private static SmokeInvocation staticInterceptor = null;
		static QFontDialog() {
			staticInterceptor = new SmokeInvocation(typeof(QFontDialog), null);
		}
		public static new string Tr(string s, string c) {
			return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
		}
		public static new string Tr(string s) {
			return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
		}
		public static QFont GetFont(bool ok, QFont def, QWidget parent, string caption) {
			return (QFont) staticInterceptor.Invoke("getFont$##$", "getFont(bool*, const QFont&, QWidget*, const QString&)", typeof(QFont), typeof(bool), ok, typeof(QFont), def, typeof(QWidget), parent, typeof(string), caption);
		}
		public static QFont GetFont(bool ok, QFont def, QWidget parent) {
			return (QFont) staticInterceptor.Invoke("getFont$##", "getFont(bool*, const QFont&, QWidget*)", typeof(QFont), typeof(bool), ok, typeof(QFont), def, typeof(QWidget), parent);
		}
		public static QFont GetFont(bool ok, QFont def) {
			return (QFont) staticInterceptor.Invoke("getFont$#", "getFont(bool*, const QFont&)", typeof(QFont), typeof(bool), ok, typeof(QFont), def);
		}
		public static QFont GetFont(bool ok, QWidget parent) {
			return (QFont) staticInterceptor.Invoke("getFont$#", "getFont(bool*, QWidget*)", typeof(QFont), typeof(bool), ok, typeof(QWidget), parent);
		}
		public static QFont GetFont(bool ok) {
			return (QFont) staticInterceptor.Invoke("getFont$", "getFont(bool*)", typeof(QFont), typeof(bool), ok);
		}
		protected new IQFontDialogSignals Emit {
			get { return (IQFontDialogSignals) Q_EMIT; }
		}
	}

	public interface IQFontDialogSignals : IQDialogSignals {
	}
}
