//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QFontDialog")]
	public class QFontDialog : QDialog {
 		protected QFontDialog(Type dummy) : base((Type) null) {}
		[SmokeClass("QFontDialog")]
		interface IQFontDialogProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
			[SmokeMethod("getFont", "(bool*, const QFont&, QWidget*, const QString&)", "$##$")]
			QFont GetFont(out bool ok, QFont def, QWidget parent, string caption);
			[SmokeMethod("getFont", "(bool*, const QFont&, QWidget*)", "$##")]
			QFont GetFont(out bool ok, QFont def, QWidget parent);
			[SmokeMethod("getFont", "(bool*, const QFont&)", "$#")]
			QFont GetFont(out bool ok, QFont def);
			[SmokeMethod("getFont", "(bool*, QWidget*)", "$#")]
			QFont GetFont(out bool ok, QWidget parent);
			[SmokeMethod("getFont", "(bool*)", "$")]
			QFont GetFont(out bool ok);
		}
		private static IQFontDialogProxy staticInterceptor = null;
		static QFontDialog() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQFontDialogProxy), null);
			staticInterceptor = (IQFontDialogProxy) realProxy.GetTransparentProxy();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		public static QFont GetFont(out bool ok, QFont def, QWidget parent, string caption) {
			return staticInterceptor.GetFont(out ok,def,parent,caption);
		}
		public static QFont GetFont(out bool ok, QFont def, QWidget parent) {
			return staticInterceptor.GetFont(out ok,def,parent);
		}
		public static QFont GetFont(out bool ok, QFont def) {
			return staticInterceptor.GetFont(out ok,def);
		}
		public static QFont GetFont(out bool ok, QWidget parent) {
			return staticInterceptor.GetFont(out ok,parent);
		}
		public static QFont GetFont(out bool ok) {
			return staticInterceptor.GetFont(out ok);
		}
		protected new IQFontDialogSignals Emit {
			get { return (IQFontDialogSignals) Q_EMIT; }
		}
	}

	public interface IQFontDialogSignals : IQDialogSignals {
	}
}
