//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	[SmokeClass("QRegion")]
	public class QRegion : MarshalByRefObject, IDisposable {
		protected QRegion interceptor = null;
		private IntPtr smokeObject;
		protected QRegion(Type dummy) {}
		[SmokeClass("QRegion")]
		interface IQRegionProxy {
			[SmokeMethod("operator|", "(const QRegion&) const", "#")]
			QRegion op_or(QRegion lhs, QRegion r);
			[SmokeMethod("operator+", "(const QRegion&) const", "#")]
			QRegion op_plus(QRegion lhs, QRegion r);
			[SmokeMethod("operator&", "(const QRegion&) const", "#")]
			QRegion op_and(QRegion lhs, QRegion r);
			[SmokeMethod("operator-", "(const QRegion&) const", "#")]
			QRegion op_minus(QRegion lhs, QRegion r);
			[SmokeMethod("operator^", "(const QRegion&) const", "#")]
			QRegion op_xor(QRegion lhs, QRegion r);
			[SmokeMethod("operator==", "(const QRegion&) const", "#")]
			bool op_equals(QRegion lhs, QRegion r);
			[SmokeMethod("operator*", "(const QRegion&, const QMatrix&)", "##")]
			QRegion op_mult(QRegion r, QMatrix m);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QRegion), this);
			interceptor = (QRegion) realProxy.GetTransparentProxy();
		}
		private static IQRegionProxy staticInterceptor = null;
		static QRegion() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQRegionProxy), null);
			staticInterceptor = (IQRegionProxy) realProxy.GetTransparentProxy();
		}
		public enum RegionType {
			Rectangle = 0,
			Ellipse = 1,
		}
		//  operator QVariant(); >>>> NOT CONVERTED
		public QRegion() : this((Type) null) {
			CreateProxy();
			NewQRegion();
		}
		[SmokeMethod("QRegion", "()", "")]
		private void NewQRegion() {
			((QRegion) interceptor).NewQRegion();
		}
		public QRegion(int x, int y, int w, int h, QRegion.RegionType t) : this((Type) null) {
			CreateProxy();
			NewQRegion(x,y,w,h,t);
		}
		[SmokeMethod("QRegion", "(int, int, int, int, QRegion::RegionType)", "$$$$$")]
		private void NewQRegion(int x, int y, int w, int h, QRegion.RegionType t) {
			((QRegion) interceptor).NewQRegion(x,y,w,h,t);
		}
		public QRegion(int x, int y, int w, int h) : this((Type) null) {
			CreateProxy();
			NewQRegion(x,y,w,h);
		}
		[SmokeMethod("QRegion", "(int, int, int, int)", "$$$$")]
		private void NewQRegion(int x, int y, int w, int h) {
			((QRegion) interceptor).NewQRegion(x,y,w,h);
		}
		public QRegion(QRect r, QRegion.RegionType t) : this((Type) null) {
			CreateProxy();
			NewQRegion(r,t);
		}
		[SmokeMethod("QRegion", "(const QRect&, QRegion::RegionType)", "#$")]
		private void NewQRegion(QRect r, QRegion.RegionType t) {
			((QRegion) interceptor).NewQRegion(r,t);
		}
		public QRegion(QRect r) : this((Type) null) {
			CreateProxy();
			NewQRegion(r);
		}
		[SmokeMethod("QRegion", "(const QRect&)", "#")]
		private void NewQRegion(QRect r) {
			((QRegion) interceptor).NewQRegion(r);
		}
		public QRegion(QPolygon pa, Qt.FillRule fillRule) : this((Type) null) {
			CreateProxy();
			NewQRegion(pa,fillRule);
		}
		[SmokeMethod("QRegion", "(const QPolygon&, Qt::FillRule)", "#$")]
		private void NewQRegion(QPolygon pa, Qt.FillRule fillRule) {
			((QRegion) interceptor).NewQRegion(pa,fillRule);
		}
		public QRegion(QPolygon pa) : this((Type) null) {
			CreateProxy();
			NewQRegion(pa);
		}
		[SmokeMethod("QRegion", "(const QPolygon&)", "#")]
		private void NewQRegion(QPolygon pa) {
			((QRegion) interceptor).NewQRegion(pa);
		}
		public QRegion(QRegion region) : this((Type) null) {
			CreateProxy();
			NewQRegion(region);
		}
		[SmokeMethod("QRegion", "(const QRegion&)", "#")]
		private void NewQRegion(QRegion region) {
			((QRegion) interceptor).NewQRegion(region);
		}
		public QRegion(QBitmap bitmap) : this((Type) null) {
			CreateProxy();
			NewQRegion(bitmap);
		}
		[SmokeMethod("QRegion", "(const QBitmap&)", "#")]
		private void NewQRegion(QBitmap bitmap) {
			((QRegion) interceptor).NewQRegion(bitmap);
		}
		[SmokeMethod("isEmpty", "() const", "")]
		public bool IsEmpty() {
			return ((QRegion) interceptor).IsEmpty();
		}
		[SmokeMethod("contains", "(const QPoint&) const", "#")]
		public bool Contains(QPoint p) {
			return ((QRegion) interceptor).Contains(p);
		}
		[SmokeMethod("contains", "(const QRect&) const", "#")]
		public bool Contains(QRect r) {
			return ((QRegion) interceptor).Contains(r);
		}
		[SmokeMethod("translate", "(int, int)", "$$")]
		public void Translate(int dx, int dy) {
			((QRegion) interceptor).Translate(dx,dy);
		}
		[SmokeMethod("translate", "(const QPoint&)", "#")]
		public void Translate(QPoint p) {
			((QRegion) interceptor).Translate(p);
		}
		[SmokeMethod("translated", "(int, int) const", "$$")]
		public QRegion Translated(int dx, int dy) {
			return ((QRegion) interceptor).Translated(dx,dy);
		}
		[SmokeMethod("translated", "(const QPoint&) const", "#")]
		public QRegion Translated(QPoint p) {
			return ((QRegion) interceptor).Translated(p);
		}
		[SmokeMethod("unite", "(const QRegion&) const", "#")]
		public QRegion Unite(QRegion r) {
			return ((QRegion) interceptor).Unite(r);
		}
		[SmokeMethod("intersect", "(const QRegion&) const", "#")]
		public QRegion Intersect(QRegion r) {
			return ((QRegion) interceptor).Intersect(r);
		}
		[SmokeMethod("subtract", "(const QRegion&) const", "#")]
		public QRegion Subtract(QRegion r) {
			return ((QRegion) interceptor).Subtract(r);
		}
		[SmokeMethod("eor", "(const QRegion&) const", "#")]
		public QRegion Eor(QRegion r) {
			return ((QRegion) interceptor).Eor(r);
		}
		[SmokeMethod("united", "(const QRegion&) const", "#")]
		public QRegion United(QRegion r) {
			return ((QRegion) interceptor).United(r);
		}
		[SmokeMethod("intersected", "(const QRegion&) const", "#")]
		public QRegion Intersected(QRegion r) {
			return ((QRegion) interceptor).Intersected(r);
		}
		[SmokeMethod("subtracted", "(const QRegion&) const", "#")]
		public QRegion Subtracted(QRegion r) {
			return ((QRegion) interceptor).Subtracted(r);
		}
		[SmokeMethod("xored", "(const QRegion&) const", "#")]
		public QRegion Xored(QRegion r) {
			return ((QRegion) interceptor).Xored(r);
		}
		[SmokeMethod("intersects", "(const QRegion&) const", "#")]
		public bool Intersects(QRegion r) {
			return ((QRegion) interceptor).Intersects(r);
		}
		[SmokeMethod("intersects", "(const QRect&) const", "#")]
		public bool Intersects(QRect r) {
			return ((QRegion) interceptor).Intersects(r);
		}
		[SmokeMethod("boundingRect", "() const", "")]
		public QRect BoundingRect() {
			return ((QRegion) interceptor).BoundingRect();
		}
		[SmokeMethod("rects", "() const", "")]
		public List<QRect> Rects() {
			return ((QRegion) interceptor).Rects();
		}
		[SmokeMethod("setRects", "(const QRect*, int)", "#$")]
		public void SetRects(QRect rect, int num) {
			((QRegion) interceptor).SetRects(rect,num);
		}
		public override bool Equals(object o) {
			if (!(o is QRegion)) { return false; }
			return this == (QRegion) o;
		}
		public override int GetHashCode() {
			return ((QRegion) interceptor).GetHashCode();
		}
		~QRegion() {
			DisposeQRegion();
		}
		public void Dispose() {
			DisposeQRegion();
		}
		[SmokeMethod("~QRegion", "()", "")]
		private void DisposeQRegion() {
			((QRegion) interceptor).DisposeQRegion();
		}
		public static QRegion operator|(QRegion lhs, QRegion r) {
			return staticInterceptor.op_or(lhs,r);
		}
		public static QRegion operator+(QRegion lhs, QRegion r) {
			return staticInterceptor.op_plus(lhs,r);
		}
		public static QRegion operator&(QRegion lhs, QRegion r) {
			return staticInterceptor.op_and(lhs,r);
		}
		public static QRegion operator-(QRegion lhs, QRegion r) {
			return staticInterceptor.op_minus(lhs,r);
		}
		public static QRegion operator^(QRegion lhs, QRegion r) {
			return staticInterceptor.op_xor(lhs,r);
		}
		public static bool operator==(QRegion lhs, QRegion r) {
			return staticInterceptor.op_equals(lhs,r);
		}
		public static bool operator!=(QRegion lhs, QRegion r) {
			return !staticInterceptor.op_equals(lhs,r);
		}
		public static QRegion operator*(QRegion r, QMatrix m) {
			return staticInterceptor.op_mult(r,m);
		}
	}
}
