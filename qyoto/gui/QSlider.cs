//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QSlider")]
	public class QSlider : QAbstractSlider, IDisposable {
 		protected QSlider(Type dummy) : base((Type) null) {}
		[SmokeClass("QSlider")]
		interface IQSliderProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSlider), this);
			interceptor = (QSlider) realProxy.GetTransparentProxy();
		}
		private static IQSliderProxy staticInterceptor = null;
		static QSlider() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSliderProxy), null);
			staticInterceptor = (IQSliderProxy) realProxy.GetTransparentProxy();
		}
		public enum TickPosition {
			NoTicks = 0,
			TicksAbove = 1,
			TicksLeft = TicksAbove,
			TicksBelow = 2,
			TicksRight = TicksBelow,
			TicksBothSides = 3,
		}
		[Q_PROPERTY("QSlider::TickPosition", "tickPosition")]
		public QSlider.TickPosition tickPosition {
			[SmokeMethod("tickPosition", "()", "")]
			get { return ((QSlider) interceptor).tickPosition; }
			[SmokeMethod("setTickPosition", "(QSlider::TickPosition)", "$")]
			set { ((QSlider) interceptor).tickPosition = value; }
		}
		[Q_PROPERTY("int", "tickInterval")]
		public int TickInterval {
			[SmokeMethod("tickInterval", "()", "")]
			get { return ((QSlider) interceptor).TickInterval; }
			[SmokeMethod("setTickInterval", "(int)", "$")]
			set { ((QSlider) interceptor).TickInterval = value; }
		}
		public QSlider(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQSlider(parent);
		}
		[SmokeMethod("QSlider", "(QWidget*)", "#")]
		private void NewQSlider(QWidget parent) {
			((QSlider) interceptor).NewQSlider(parent);
		}
		public QSlider() : this((Type) null) {
			CreateProxy();
			NewQSlider();
		}
		[SmokeMethod("QSlider", "()", "")]
		private void NewQSlider() {
			((QSlider) interceptor).NewQSlider();
		}
		public QSlider(Qt.Orientation orientation, QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQSlider(orientation,parent);
		}
		[SmokeMethod("QSlider", "(Qt::Orientation, QWidget*)", "$#")]
		private void NewQSlider(Qt.Orientation orientation, QWidget parent) {
			((QSlider) interceptor).NewQSlider(orientation,parent);
		}
		public QSlider(Qt.Orientation orientation) : this((Type) null) {
			CreateProxy();
			NewQSlider(orientation);
		}
		[SmokeMethod("QSlider", "(Qt::Orientation)", "$")]
		private void NewQSlider(Qt.Orientation orientation) {
			((QSlider) interceptor).NewQSlider(orientation);
		}
		[SmokeMethod("sizeHint", "() const", "")]
		public override QSize SizeHint() {
			return ((QSlider) interceptor).SizeHint();
		}
		[SmokeMethod("minimumSizeHint", "() const", "")]
		public override QSize MinimumSizeHint() {
			return ((QSlider) interceptor).MinimumSizeHint();
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		public new virtual bool Event(QEvent arg1) {
			return ((QSlider) interceptor).Event(arg1);
		}
		[SmokeMethod("paintEvent", "(QPaintEvent*)", "#")]
		protected override void PaintEvent(QPaintEvent ev) {
			((QSlider) interceptor).PaintEvent(ev);
		}
		[SmokeMethod("mousePressEvent", "(QMouseEvent*)", "#")]
		protected override void MousePressEvent(QMouseEvent ev) {
			((QSlider) interceptor).MousePressEvent(ev);
		}
		[SmokeMethod("mouseReleaseEvent", "(QMouseEvent*)", "#")]
		protected override void MouseReleaseEvent(QMouseEvent ev) {
			((QSlider) interceptor).MouseReleaseEvent(ev);
		}
		[SmokeMethod("mouseMoveEvent", "(QMouseEvent*)", "#")]
		protected override void MouseMoveEvent(QMouseEvent ev) {
			((QSlider) interceptor).MouseMoveEvent(ev);
		}
		~QSlider() {
			DisposeQSlider();
		}
		public new void Dispose() {
			DisposeQSlider();
		}
		[SmokeMethod("~QSlider", "()", "")]
		private void DisposeQSlider() {
			((QSlider) interceptor).DisposeQSlider();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQSliderSignals Emit {
			get { return (IQSliderSignals) Q_EMIT; }
		}
	}

	public interface IQSliderSignals : IQAbstractSliderSignals {
	}
}
