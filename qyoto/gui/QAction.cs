//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	/// See <see cref="IQActionSignals"></see> for signals emitted by QAction
	[SmokeClass("QAction")]
	public class QAction : QObject, IDisposable {
 		protected QAction(Type dummy) : base((Type) null) {}
		[SmokeClass("QAction")]
		interface IQActionProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QAction), this);
			interceptor = (QAction) realProxy.GetTransparentProxy();
		}
		private static IQActionProxy staticInterceptor = null;
		static QAction() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQActionProxy), null);
			staticInterceptor = (IQActionProxy) realProxy.GetTransparentProxy();
		}
		public enum MenuRole {
			NoRole = 0,
			TextHeuristicRole = 1,
			ApplicationSpecificRole = 2,
			AboutQtRole = 3,
			AboutRole = 4,
			PreferencesRole = 5,
			QuitRole = 6,
		}
		public enum ActionEvent {
			Trigger = 0,
			Hover = 1,
		}
		[Q_PROPERTY("bool", "checkable")]
		public bool Checkable {
			get { return Property("checkable").Value<bool>(); }
			set { SetProperty("checkable", QVariant.FromValue<bool>(value)); }
		}
		[Q_PROPERTY("bool", "checked")]
		public bool Checked {
			get { return Property("checked").Value<bool>(); }
			set { SetProperty("checked", QVariant.FromValue<bool>(value)); }
		}
		[Q_PROPERTY("bool", "enabled")]
		public bool Enabled {
			get { return Property("enabled").Value<bool>(); }
			set { SetProperty("enabled", QVariant.FromValue<bool>(value)); }
		}
		[Q_PROPERTY("QIcon", "icon")]
		public QIcon Icon {
			get { return Property("icon").Value<QIcon>(); }
			set { SetProperty("icon", QVariant.FromValue<QIcon>(value)); }
		}
		[Q_PROPERTY("QString", "text")]
		public string Text {
			get { return Property("text").Value<string>(); }
			set { SetProperty("text", QVariant.FromValue<string>(value)); }
		}
		[Q_PROPERTY("QString", "iconText")]
		public string IconText {
			get { return Property("iconText").Value<string>(); }
			set { SetProperty("iconText", QVariant.FromValue<string>(value)); }
		}
		[Q_PROPERTY("QString", "toolTip")]
		public string ToolTip {
			get { return Property("toolTip").Value<string>(); }
			set { SetProperty("toolTip", QVariant.FromValue<string>(value)); }
		}
		[Q_PROPERTY("QString", "statusTip")]
		public string StatusTip {
			get { return Property("statusTip").Value<string>(); }
			set { SetProperty("statusTip", QVariant.FromValue<string>(value)); }
		}
		[Q_PROPERTY("QString", "whatsThis")]
		public string WhatsThis {
			get { return Property("whatsThis").Value<string>(); }
			set { SetProperty("whatsThis", QVariant.FromValue<string>(value)); }
		}
		[Q_PROPERTY("QFont", "font")]
		public QFont Font {
			get { return Property("font").Value<QFont>(); }
			set { SetProperty("font", QVariant.FromValue<QFont>(value)); }
		}
		[Q_PROPERTY("QKeySequence", "shortcut")]
		public QKeySequence Shortcut {
			get { return Property("shortcut").Value<QKeySequence>(); }
			set { SetProperty("shortcut", QVariant.FromValue<QKeySequence>(value)); }
		}
		[Q_PROPERTY("Qt::ShortcutContext", "shortcutContext")]
		public Qt.ShortcutContext ShortcutContext {
			get { return Property("shortcutContext").Value<Qt.ShortcutContext>(); }
			set { SetProperty("shortcutContext", QVariant.FromValue<Qt.ShortcutContext>(value)); }
		}
		[Q_PROPERTY("bool", "autoRepeat")]
		public bool AutoRepeat {
			get { return Property("autoRepeat").Value<bool>(); }
			set { SetProperty("autoRepeat", QVariant.FromValue<bool>(value)); }
		}
		[Q_PROPERTY("bool", "visible")]
		public bool Visible {
			get { return Property("visible").Value<bool>(); }
			set { SetProperty("visible", QVariant.FromValue<bool>(value)); }
		}
		[Q_PROPERTY("QAction::MenuRole", "menuRole")]
		public QAction.MenuRole menuRole {
			get { return Property("menuRole").Value<QAction.MenuRole>(); }
			set { SetProperty("menuRole", QVariant.FromValue<QAction.MenuRole>(value)); }
		}
		public QAction(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQAction(parent);
		}
		[SmokeMethod("QAction", "(QObject*)", "#")]
		private void NewQAction(QObject parent) {
			((QAction) interceptor).NewQAction(parent);
		}
		public QAction(string text, QObject parent) : this((Type) null) {
			CreateProxy();
			NewQAction(text,parent);
		}
		[SmokeMethod("QAction", "(const QString&, QObject*)", "$#")]
		private void NewQAction(string text, QObject parent) {
			((QAction) interceptor).NewQAction(text,parent);
		}
		public QAction(QIcon icon, string text, QObject parent) : this((Type) null) {
			CreateProxy();
			NewQAction(icon,text,parent);
		}
		[SmokeMethod("QAction", "(const QIcon&, const QString&, QObject*)", "#$#")]
		private void NewQAction(QIcon icon, string text, QObject parent) {
			((QAction) interceptor).NewQAction(icon,text,parent);
		}
		[SmokeMethod("setActionGroup", "(QActionGroup*)", "#")]
		public void SetActionGroup(QActionGroup group) {
			((QAction) interceptor).SetActionGroup(group);
		}
		[SmokeMethod("actionGroup", "() const", "")]
		public QActionGroup ActionGroup() {
			return ((QAction) interceptor).ActionGroup();
		}
		[SmokeMethod("menu", "() const", "")]
		public QMenu Menu() {
			return ((QAction) interceptor).Menu();
		}
		[SmokeMethod("setMenu", "(QMenu*)", "#")]
		public void SetMenu(QMenu menu) {
			((QAction) interceptor).SetMenu(menu);
		}
		[SmokeMethod("setSeparator", "(bool)", "$")]
		public void SetSeparator(bool b) {
			((QAction) interceptor).SetSeparator(b);
		}
		[SmokeMethod("isSeparator", "() const", "")]
		public bool IsSeparator() {
			return ((QAction) interceptor).IsSeparator();
		}
		[SmokeMethod("setShortcuts", "(const QList<QKeySequence>&)", "?")]
		public void SetShortcuts(List<QKeySequence> shortcuts) {
			((QAction) interceptor).SetShortcuts(shortcuts);
		}
		[SmokeMethod("setShortcuts", "(QKeySequence::StandardKey)", "$")]
		public void SetShortcuts(QKeySequence.StandardKey arg1) {
			((QAction) interceptor).SetShortcuts(arg1);
		}
		[SmokeMethod("shortcuts", "() const", "")]
		public List<QKeySequence> Shortcuts() {
			return ((QAction) interceptor).Shortcuts();
		}
		[SmokeMethod("isCheckable", "() const", "")]
		public bool IsCheckable() {
			return ((QAction) interceptor).IsCheckable();
		}
		[SmokeMethod("data", "() const", "")]
		public QVariant Data() {
			return ((QAction) interceptor).Data();
		}
		[SmokeMethod("setData", "(const QVariant&)", "#")]
		public void SetData(QVariant var) {
			((QAction) interceptor).SetData(var);
		}
		[SmokeMethod("isChecked", "() const", "")]
		public bool IsChecked() {
			return ((QAction) interceptor).IsChecked();
		}
		[SmokeMethod("isEnabled", "() const", "")]
		public bool IsEnabled() {
			return ((QAction) interceptor).IsEnabled();
		}
		[SmokeMethod("isVisible", "() const", "")]
		public bool IsVisible() {
			return ((QAction) interceptor).IsVisible();
		}
		[SmokeMethod("activate", "(QAction::ActionEvent)", "$")]
		public void Activate(QAction.ActionEvent arg1) {
			((QAction) interceptor).Activate(arg1);
		}
		[SmokeMethod("showStatusText", "(QWidget*)", "#")]
		public bool ShowStatusText(QWidget widget) {
			return ((QAction) interceptor).ShowStatusText(widget);
		}
		[SmokeMethod("showStatusText", "()", "")]
		public bool ShowStatusText() {
			return ((QAction) interceptor).ShowStatusText();
		}
		[SmokeMethod("parentWidget", "() const", "")]
		public QWidget ParentWidget() {
			return ((QAction) interceptor).ParentWidget();
		}
		[SmokeMethod("associatedWidgets", "() const", "")]
		public List<QWidget> AssociatedWidgets() {
			return ((QAction) interceptor).AssociatedWidgets();
		}
		[Q_SLOT("void trigger()")]
		[SmokeMethod("trigger", "()", "")]
		public void Trigger() {
			((QAction) interceptor).Trigger();
		}
		[Q_SLOT("void hover()")]
		[SmokeMethod("hover", "()", "")]
		public void Hover() {
			((QAction) interceptor).Hover();
		}
		[Q_SLOT("void toggle()")]
		[SmokeMethod("toggle", "()", "")]
		public void Toggle() {
			((QAction) interceptor).Toggle();
		}
		[Q_SLOT("void setDisabled(bool)")]
		[SmokeMethod("setDisabled", "(bool)", "$")]
		public void SetDisabled(bool b) {
			((QAction) interceptor).SetDisabled(b);
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		protected new virtual bool Event(QEvent arg1) {
			return ((QAction) interceptor).Event(arg1);
		}
		~QAction() {
			DisposeQAction();
		}
		public new void Dispose() {
			DisposeQAction();
		}
		[SmokeMethod("~QAction", "()", "")]
		private void DisposeQAction() {
			((QAction) interceptor).DisposeQAction();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQActionSignals Emit {
			get { return (IQActionSignals) Q_EMIT; }
		}
	}

	public interface IQActionSignals : IQObjectSignals {
		[Q_SIGNAL("void changed()")]
		void Changed();
		[Q_SIGNAL("void triggered(bool)")]
		void Triggered(bool arg1);
		[Q_SIGNAL("void triggered()")]
		void Triggered();
		[Q_SIGNAL("void hovered()")]
		void Hovered();
		[Q_SIGNAL("void toggled(bool)")]
		void Toggled(bool arg1);
	}
}
