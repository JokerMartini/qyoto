//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;
	using System.Collections.Generic;

	/// See <see cref="IQActionSignals"></see> for signals emitted by QAction
	[SmokeClass("QAction")]
	public class QAction : QObject, IDisposable {
 		protected QAction(Type dummy) : base((Type) null) {}
		interface IQActionProxy {
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QAction), this);
			_interceptor = (QAction) realProxy.GetTransparentProxy();
		}
		private QAction ProxyQAction() {
			return (QAction) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QAction() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQActionProxy), null);
			_staticInterceptor = (IQActionProxy) realProxy.GetTransparentProxy();
		}
		private static IQActionProxy StaticQAction() {
			return (IQActionProxy) _staticInterceptor;
		}

		public enum MenuRole {
			NoRole = 0,
			TextHeuristicRole = 1,
			ApplicationSpecificRole = 2,
			AboutQtRole = 3,
			AboutRole = 4,
			PreferencesRole = 5,
			QuitRole = 6,
		}
		public enum ActionEvent {
			Trigger = 0,
			Hover = 1,
		}
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QAction(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQAction(parent);
		}
		[SmokeMethod("QAction(QObject*)")]
		private void NewQAction(QObject parent) {
			ProxyQAction().NewQAction(parent);
		}
		public QAction(string text, QObject parent) : this((Type) null) {
			CreateProxy();
			NewQAction(text,parent);
		}
		[SmokeMethod("QAction(const QString&, QObject*)")]
		private void NewQAction(string text, QObject parent) {
			ProxyQAction().NewQAction(text,parent);
		}
		public QAction(QIcon icon, string text, QObject parent) : this((Type) null) {
			CreateProxy();
			NewQAction(icon,text,parent);
		}
		[SmokeMethod("QAction(const QIcon&, const QString&, QObject*)")]
		private void NewQAction(QIcon icon, string text, QObject parent) {
			ProxyQAction().NewQAction(icon,text,parent);
		}
		[SmokeMethod("setActionGroup(QActionGroup*)")]
		public void SetActionGroup(QActionGroup group) {
			ProxyQAction().SetActionGroup(group);
		}
		[SmokeMethod("actionGroup() const")]
		public QActionGroup ActionGroup() {
			return ProxyQAction().ActionGroup();
		}
		[SmokeMethod("setIcon(const QIcon&)")]
		public void SetIcon(QIcon icon) {
			ProxyQAction().SetIcon(icon);
		}
		[SmokeMethod("icon() const")]
		public QIcon Icon() {
			return ProxyQAction().Icon();
		}
		[SmokeMethod("setText(const QString&)")]
		public void SetText(string text) {
			ProxyQAction().SetText(text);
		}
		[SmokeMethod("text() const")]
		public string Text() {
			return ProxyQAction().Text();
		}
		[SmokeMethod("setIconText(const QString&)")]
		public void SetIconText(string text) {
			ProxyQAction().SetIconText(text);
		}
		[SmokeMethod("iconText() const")]
		public string IconText() {
			return ProxyQAction().IconText();
		}
		[SmokeMethod("setToolTip(const QString&)")]
		public void SetToolTip(string tip) {
			ProxyQAction().SetToolTip(tip);
		}
		[SmokeMethod("toolTip() const")]
		public string ToolTip() {
			return ProxyQAction().ToolTip();
		}
		[SmokeMethod("setStatusTip(const QString&)")]
		public void SetStatusTip(string statusTip) {
			ProxyQAction().SetStatusTip(statusTip);
		}
		[SmokeMethod("statusTip() const")]
		public string StatusTip() {
			return ProxyQAction().StatusTip();
		}
		[SmokeMethod("setWhatsThis(const QString&)")]
		public void SetWhatsThis(string what) {
			ProxyQAction().SetWhatsThis(what);
		}
		[SmokeMethod("whatsThis() const")]
		public string WhatsThis() {
			return ProxyQAction().WhatsThis();
		}
		[SmokeMethod("menu() const")]
		public QMenu Menu() {
			return ProxyQAction().Menu();
		}
		[SmokeMethod("setMenu(QMenu*)")]
		public void SetMenu(QMenu menu) {
			ProxyQAction().SetMenu(menu);
		}
		[SmokeMethod("setSeparator(bool)")]
		public void SetSeparator(bool b) {
			ProxyQAction().SetSeparator(b);
		}
		[SmokeMethod("isSeparator() const")]
		public bool IsSeparator() {
			return ProxyQAction().IsSeparator();
		}
		[SmokeMethod("setShortcut(const QKeySequence&)")]
		public void SetShortcut(QKeySequence shortcut) {
			ProxyQAction().SetShortcut(shortcut);
		}
		[SmokeMethod("shortcut() const")]
		public QKeySequence Shortcut() {
			return ProxyQAction().Shortcut();
		}
		[SmokeMethod("setShortcuts(const QList<QKeySequence>&)")]
		public void SetShortcuts(List<QKeySequence> shortcuts) {
			ProxyQAction().SetShortcuts(shortcuts);
		}
		[SmokeMethod("setShortcuts(QKeySequence::StandardKey)")]
		public void SetShortcuts(QKeySequence.StandardKey arg1) {
			ProxyQAction().SetShortcuts(arg1);
		}
		[SmokeMethod("shortcuts() const")]
		public List<QKeySequence> Shortcuts() {
			return ProxyQAction().Shortcuts();
		}
		[SmokeMethod("setShortcutContext(Qt::ShortcutContext)")]
		public void SetShortcutContext(Qt.ShortcutContext context) {
			ProxyQAction().SetShortcutContext(context);
		}
		[SmokeMethod("shortcutContext() const")]
		public Qt.ShortcutContext ShortcutContext() {
			return ProxyQAction().ShortcutContext();
		}
		[SmokeMethod("setAutoRepeat(bool)")]
		public void SetAutoRepeat(bool arg1) {
			ProxyQAction().SetAutoRepeat(arg1);
		}
		[SmokeMethod("autoRepeat() const")]
		public bool AutoRepeat() {
			return ProxyQAction().AutoRepeat();
		}
		[SmokeMethod("setFont(const QFont&)")]
		public void SetFont(QFont font) {
			ProxyQAction().SetFont(font);
		}
		[SmokeMethod("font() const")]
		public QFont Font() {
			return ProxyQAction().Font();
		}
		[SmokeMethod("setCheckable(bool)")]
		public void SetCheckable(bool arg1) {
			ProxyQAction().SetCheckable(arg1);
		}
		[SmokeMethod("isCheckable() const")]
		public bool IsCheckable() {
			return ProxyQAction().IsCheckable();
		}
		[SmokeMethod("data() const")]
		public QVariant Data() {
			return ProxyQAction().Data();
		}
		[SmokeMethod("setData(const QVariant&)")]
		public void SetData(QVariant var) {
			ProxyQAction().SetData(var);
		}
		[SmokeMethod("isChecked() const")]
		public bool IsChecked() {
			return ProxyQAction().IsChecked();
		}
		[SmokeMethod("isEnabled() const")]
		public bool IsEnabled() {
			return ProxyQAction().IsEnabled();
		}
		[SmokeMethod("isVisible() const")]
		public bool IsVisible() {
			return ProxyQAction().IsVisible();
		}
		[SmokeMethod("activate(QAction::ActionEvent)")]
		public void Activate(QAction.ActionEvent arg1) {
			ProxyQAction().Activate(arg1);
		}
		[SmokeMethod("showStatusText(QWidget*)")]
		public bool ShowStatusText(QWidget widget) {
			return ProxyQAction().ShowStatusText(widget);
		}
		[SmokeMethod("showStatusText()")]
		public bool ShowStatusText() {
			return ProxyQAction().ShowStatusText();
		}
		[SmokeMethod("setMenuRole(QAction::MenuRole)")]
		public void SetMenuRole(QAction.MenuRole menuRole) {
			ProxyQAction().SetMenuRole(menuRole);
		}
		[SmokeMethod("menuRole() const")]
		public QAction.MenuRole menuRole() {
			return ProxyQAction().menuRole();
		}
		[SmokeMethod("parentWidget() const")]
		public QWidget ParentWidget() {
			return ProxyQAction().ParentWidget();
		}
		[SmokeMethod("associatedWidgets() const")]
		public List<QWidget> AssociatedWidgets() {
			return ProxyQAction().AssociatedWidgets();
		}
		[SmokeMethod("trigger()")]
		public void Trigger() {
			ProxyQAction().Trigger();
		}
		[SmokeMethod("hover()")]
		public void Hover() {
			ProxyQAction().Hover();
		}
		[SmokeMethod("setChecked(bool)")]
		public void SetChecked(bool arg1) {
			ProxyQAction().SetChecked(arg1);
		}
		[SmokeMethod("toggle()")]
		public void Toggle() {
			ProxyQAction().Toggle();
		}
		[SmokeMethod("setEnabled(bool)")]
		public void SetEnabled(bool arg1) {
			ProxyQAction().SetEnabled(arg1);
		}
		[SmokeMethod("setDisabled(bool)")]
		public void SetDisabled(bool b) {
			ProxyQAction().SetDisabled(b);
		}
		[SmokeMethod("setVisible(bool)")]
		public void SetVisible(bool arg1) {
			ProxyQAction().SetVisible(arg1);
		}
		[SmokeMethod("tr(const char*, const char*)")]
		public static new string Tr(string s, string c) {
			return StaticQAction().Tr(s,c);
		}
		[SmokeMethod("tr(const char*)")]
		public static new string Tr(string s) {
			return StaticQAction().Tr(s);
		}
		[SmokeMethod("event(QEvent*)")]
		public new bool Event(QEvent arg1) {
			return ProxyQAction().Event(arg1);
		}
		~QAction() {
			DisposeQAction();
		}
		public new void Dispose() {
			DisposeQAction();
		}
		[SmokeMethod("~QAction()")]
		private void DisposeQAction() {
			ProxyQAction().DisposeQAction();
		}
		protected new IQActionSignals Emit() {
			return (IQActionSignals) Q_EMIT;
		}
	}

	public interface IQActionSignals : IQObjectSignals {
		[Q_SIGNAL("void changed()")]
		void Changed();
		[Q_SIGNAL("void triggered(bool)")]
		void Triggered(bool arg1);
		[Q_SIGNAL("void triggered()")]
		void Triggered();
		[Q_SIGNAL("void hovered()")]
		void Hovered();
		[Q_SIGNAL("void toggled(bool)")]
		void Toggled(bool arg1);
	}
}
