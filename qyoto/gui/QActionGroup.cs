//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	/// See <see cref="IQActionGroupSignals"></see> for signals emitted by QActionGroup
	[SmokeClass("QActionGroup")]
	public class QActionGroup : QObject, IDisposable {
 		protected QActionGroup(Type dummy) : base((Type) null) {}
		[SmokeClass("QActionGroup")]
		interface IQActionGroupProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QActionGroup), this);
			interceptor = (QActionGroup) realProxy.GetTransparentProxy();
		}
		private static IQActionGroupProxy staticInterceptor = null;
		static QActionGroup() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQActionGroupProxy), null);
			staticInterceptor = (IQActionGroupProxy) realProxy.GetTransparentProxy();
		}
		[Q_PROPERTY("bool", "exclusive")]
		public bool Exclusive {
			[SmokeMethod("isExclusive", "()", "")]
			get { return ((QActionGroup) interceptor).Exclusive; }
			[SmokeMethod("setExclusive", "(bool)", "$")]
			set { ((QActionGroup) interceptor).Exclusive = value; }
		}
		[Q_PROPERTY("bool", "enabled")]
		public bool Enabled {
			[SmokeMethod("isEnabled", "()", "")]
			get { return ((QActionGroup) interceptor).Enabled; }
			[SmokeMethod("setEnabled", "(bool)", "$")]
			set { ((QActionGroup) interceptor).Enabled = value; }
		}
		[Q_PROPERTY("bool", "visible")]
		public bool Visible {
			[SmokeMethod("isVisible", "()", "")]
			get { return ((QActionGroup) interceptor).Visible; }
			[SmokeMethod("setVisible", "(bool)", "$")]
			set { ((QActionGroup) interceptor).Visible = value; }
		}
		public QActionGroup(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQActionGroup(parent);
		}
		[SmokeMethod("QActionGroup", "(QObject*)", "#")]
		private void NewQActionGroup(QObject parent) {
			((QActionGroup) interceptor).NewQActionGroup(parent);
		}
		[SmokeMethod("addAction", "(QAction*)", "#")]
		public QAction AddAction(QAction a) {
			return ((QActionGroup) interceptor).AddAction(a);
		}
		[SmokeMethod("addAction", "(const QString&)", "$")]
		public QAction AddAction(string text) {
			return ((QActionGroup) interceptor).AddAction(text);
		}
		[SmokeMethod("addAction", "(const QIcon&, const QString&)", "#$")]
		public QAction AddAction(QIcon icon, string text) {
			return ((QActionGroup) interceptor).AddAction(icon,text);
		}
		[SmokeMethod("removeAction", "(QAction*)", "#")]
		public void RemoveAction(QAction a) {
			((QActionGroup) interceptor).RemoveAction(a);
		}
		[SmokeMethod("actions", "() const", "")]
		public List<QAction> Actions() {
			return ((QActionGroup) interceptor).Actions();
		}
		[SmokeMethod("checkedAction", "() const", "")]
		public QAction CheckedAction() {
			return ((QActionGroup) interceptor).CheckedAction();
		}
		[SmokeMethod("isExclusive", "() const", "")]
		public bool IsExclusive() {
			return ((QActionGroup) interceptor).IsExclusive();
		}
		[SmokeMethod("isEnabled", "() const", "")]
		public bool IsEnabled() {
			return ((QActionGroup) interceptor).IsEnabled();
		}
		[SmokeMethod("isVisible", "() const", "")]
		public bool IsVisible() {
			return ((QActionGroup) interceptor).IsVisible();
		}
		[Q_SLOT("void setDisabled(bool)")]
		[SmokeMethod("setDisabled", "(bool)", "$")]
		public void SetDisabled(bool b) {
			((QActionGroup) interceptor).SetDisabled(b);
		}
		~QActionGroup() {
			DisposeQActionGroup();
		}
		public new void Dispose() {
			DisposeQActionGroup();
		}
		[SmokeMethod("~QActionGroup", "()", "")]
		private void DisposeQActionGroup() {
			((QActionGroup) interceptor).DisposeQActionGroup();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQActionGroupSignals Emit {
			get { return (IQActionGroupSignals) Q_EMIT; }
		}
	}

	public interface IQActionGroupSignals : IQObjectSignals {
		[Q_SIGNAL("void triggered(QAction*)")]
		void Triggered(QAction arg1);
		[Q_SIGNAL("void selected(QAction*)")]
		void Selected(QAction arg1);
		[Q_SIGNAL("void hovered(QAction*)")]
		void Hovered(QAction arg1);
	}
}
