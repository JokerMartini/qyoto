//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;
	using System.Collections.Generic;

	/// See <see cref="IQActionGroupSignals"></see> for signals emitted by QActionGroup
	[SmokeClass("QActionGroup")]
	public class QActionGroup : QObject, IDisposable {
 		protected QActionGroup(Type dummy) : base((Type) null) {}
		interface IQActionGroupProxy {
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QActionGroup), this);
			_interceptor = (QActionGroup) realProxy.GetTransparentProxy();
		}
		private QActionGroup ProxyQActionGroup() {
			return (QActionGroup) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QActionGroup() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQActionGroupProxy), null);
			_staticInterceptor = (IQActionGroupProxy) realProxy.GetTransparentProxy();
		}
		private static IQActionGroupProxy StaticQActionGroup() {
			return (IQActionGroupProxy) _staticInterceptor;
		}

		public bool Exclusive {
			get {
				return Property("exclusive").Value<bool>();
			}
			set {
				SetProperty("exclusive", QVariant.FromValue<bool>(value));
			}
		}
		public bool Enabled {
			get {
				return Property("enabled").Value<bool>();
			}
			set {
				SetProperty("enabled", QVariant.FromValue<bool>(value));
			}
		}
		public bool Visible {
			get {
				return Property("visible").Value<bool>();
			}
			set {
				SetProperty("visible", QVariant.FromValue<bool>(value));
			}
		}
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QActionGroup(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQActionGroup(parent);
		}
		[SmokeMethod("QActionGroup(QObject*)")]
		private void NewQActionGroup(QObject parent) {
			ProxyQActionGroup().NewQActionGroup(parent);
		}
		[SmokeMethod("addAction(QAction*)")]
		public QAction AddAction(QAction a) {
			return ProxyQActionGroup().AddAction(a);
		}
		[SmokeMethod("addAction(const QString&)")]
		public QAction AddAction(string text) {
			return ProxyQActionGroup().AddAction(text);
		}
		[SmokeMethod("addAction(const QIcon&, const QString&)")]
		public QAction AddAction(QIcon icon, string text) {
			return ProxyQActionGroup().AddAction(icon,text);
		}
		[SmokeMethod("removeAction(QAction*)")]
		public void RemoveAction(QAction a) {
			ProxyQActionGroup().RemoveAction(a);
		}
		[SmokeMethod("actions() const")]
		public List<QAction> Actions() {
			return ProxyQActionGroup().Actions();
		}
		[SmokeMethod("checkedAction() const")]
		public QAction CheckedAction() {
			return ProxyQActionGroup().CheckedAction();
		}
		[SmokeMethod("isExclusive() const")]
		public bool IsExclusive() {
			return ProxyQActionGroup().IsExclusive();
		}
		[SmokeMethod("isEnabled() const")]
		public bool IsEnabled() {
			return ProxyQActionGroup().IsEnabled();
		}
		[SmokeMethod("isVisible() const")]
		public bool IsVisible() {
			return ProxyQActionGroup().IsVisible();
		}
		[SmokeMethod("setDisabled(bool)")]
		public void SetDisabled(bool b) {
			ProxyQActionGroup().SetDisabled(b);
		}
		[SmokeMethod("tr(const char*, const char*)")]
		public static new string Tr(string s, string c) {
			return StaticQActionGroup().Tr(s,c);
		}
		[SmokeMethod("tr(const char*)")]
		public static new string Tr(string s) {
			return StaticQActionGroup().Tr(s);
		}
		~QActionGroup() {
			DisposeQActionGroup();
		}
		public new void Dispose() {
			DisposeQActionGroup();
		}
		[SmokeMethod("~QActionGroup()")]
		private void DisposeQActionGroup() {
			ProxyQActionGroup().DisposeQActionGroup();
		}
		protected new IQActionGroupSignals Emit {
			get {
				return (IQActionGroupSignals) Q_EMIT;
			}
		}
	}

	public interface IQActionGroupSignals : IQObjectSignals {
		[Q_SIGNAL("void triggered(QAction*)")]
		void Triggered(QAction arg1);
		[Q_SIGNAL("void selected(QAction*)")]
		void Selected(QAction arg1);
		[Q_SIGNAL("void hovered(QAction*)")]
		void Hovered(QAction arg1);
	}
}
