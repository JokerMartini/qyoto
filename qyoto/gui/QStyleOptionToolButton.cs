//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QStyleOptionToolButton")]
	public class QStyleOptionToolButton : QStyleOptionComplex, IDisposable {
 		protected QStyleOptionToolButton(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(QStyleOptionToolButton), "QStyleOptionToolButton", this);
		}
		public enum StyleOptionType {
			Type = QStyleOption.OptionType.SO_ToolButton,
		}
		public enum StyleOptionVersion {
			Version = 1,
		}
		public enum ToolButtonFeature {
			None = 0x00,
			Arrow = 0x01,
			Menu = 0x04,
			PopupDelay = 0x08,
		}
		public QStyleOptionToolButton() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QStyleOptionToolButton", "QStyleOptionToolButton()", typeof(void));
		}
		public QStyleOptionToolButton(QStyleOptionToolButton other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QStyleOptionToolButton#", "QStyleOptionToolButton(const QStyleOptionToolButton&)", typeof(void), typeof(QStyleOptionToolButton), other);
		}
		public QStyleOptionToolButton(int version) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QStyleOptionToolButton$", "QStyleOptionToolButton(int)", typeof(void), typeof(int), version);
		}
		~QStyleOptionToolButton() {
			interceptor.Invoke("~QStyleOptionToolButton", "~QStyleOptionToolButton()", typeof(void));
		}
		public void Dispose() {
			interceptor.Invoke("~QStyleOptionToolButton", "~QStyleOptionToolButton()", typeof(void));
		}
	}
}
