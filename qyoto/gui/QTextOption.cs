//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	[SmokeClass("QTextOption")]
	public class QTextOption : MarshalByRefObject, IDisposable {
		protected QTextOption interceptor = null;
		private IntPtr smokeObject;
		protected QTextOption(Type dummy) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTextOption), this);
			interceptor = (QTextOption) realProxy.GetTransparentProxy();
		}
		public enum WrapMode {
			NoWrap = 0,
			WordWrap = 1,
			ManualWrap = 2,
			WrapAnywhere = 3,
			WrapAtWordBoundaryOrAnywhere = 4,
		}
		public enum Flag : long {
			IncludeTrailingSpaces = 0x80000000,
		}
		public QTextOption() : this((Type) null) {
			CreateProxy();
			NewQTextOption();
		}
		[SmokeMethod("QTextOption", "()", "")]
		private void NewQTextOption() {
			((QTextOption) interceptor).NewQTextOption();
		}
		public QTextOption(int alignment) : this((Type) null) {
			CreateProxy();
			NewQTextOption(alignment);
		}
		[SmokeMethod("QTextOption", "(Qt::Alignment)", "$")]
		private void NewQTextOption(int alignment) {
			((QTextOption) interceptor).NewQTextOption(alignment);
		}
		public QTextOption(QTextOption o) : this((Type) null) {
			CreateProxy();
			NewQTextOption(o);
		}
		[SmokeMethod("QTextOption", "(const QTextOption&)", "#")]
		private void NewQTextOption(QTextOption o) {
			((QTextOption) interceptor).NewQTextOption(o);
		}
		[SmokeMethod("setAlignment", "(Qt::Alignment)", "$")]
		public void SetAlignment(int alignment) {
			((QTextOption) interceptor).SetAlignment(alignment);
		}
		[SmokeMethod("alignment", "() const", "")]
		public int Alignment() {
			return ((QTextOption) interceptor).Alignment();
		}
		[SmokeMethod("setTextDirection", "(Qt::LayoutDirection)", "$")]
		public void SetTextDirection(Qt.LayoutDirection aDirection) {
			((QTextOption) interceptor).SetTextDirection(aDirection);
		}
		[SmokeMethod("textDirection", "() const", "")]
		public Qt.LayoutDirection TextDirection() {
			return ((QTextOption) interceptor).TextDirection();
		}
		[SmokeMethod("setWrapMode", "(QTextOption::WrapMode)", "$")]
		public void SetWrapMode(QTextOption.WrapMode wrap) {
			((QTextOption) interceptor).SetWrapMode(wrap);
		}
		[SmokeMethod("wrapMode", "() const", "")]
		public QTextOption.WrapMode wrapMode() {
			return ((QTextOption) interceptor).wrapMode();
		}
		[SmokeMethod("setFlags", "(Flags)", "$")]
		public void SetFlags(int flags) {
			((QTextOption) interceptor).SetFlags(flags);
		}
		[SmokeMethod("flags", "() const", "")]
		public int Flags() {
			return ((QTextOption) interceptor).Flags();
		}
		[SmokeMethod("setTabStop", "(qreal)", "$")]
		public void SetTabStop(double tabStop) {
			((QTextOption) interceptor).SetTabStop(tabStop);
		}
		[SmokeMethod("tabStop", "() const", "")]
		public double TabStop() {
			return ((QTextOption) interceptor).TabStop();
		}
		[SmokeMethod("setTabArray", "(QList<qreal>)", "?")]
		public void SetTabArray(List<double> tabStops) {
			((QTextOption) interceptor).SetTabArray(tabStops);
		}
		[SmokeMethod("tabArray", "() const", "")]
		public List<double> TabArray() {
			return ((QTextOption) interceptor).TabArray();
		}
		[SmokeMethod("setUseDesignMetrics", "(bool)", "$")]
		public void SetUseDesignMetrics(bool b) {
			((QTextOption) interceptor).SetUseDesignMetrics(b);
		}
		[SmokeMethod("useDesignMetrics", "() const", "")]
		public bool UseDesignMetrics() {
			return ((QTextOption) interceptor).UseDesignMetrics();
		}
		~QTextOption() {
			DisposeQTextOption();
		}
		public void Dispose() {
			DisposeQTextOption();
		}
		[SmokeMethod("~QTextOption", "()", "")]
		private void DisposeQTextOption() {
			((QTextOption) interceptor).DisposeQTextOption();
		}
	}
}
