//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;

	[SmokeClass("QWhatsThisClickedEvent")]
	public class QWhatsThisClickedEvent : QEvent, IDisposable {
 		protected QWhatsThisClickedEvent(Type dummy) : base((Type) null) {}
		[SmokeClass("QWhatsThisClickedEvent")]
		interface IQWhatsThisClickedEventProxy {
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QWhatsThisClickedEvent), this);
			_interceptor = (QWhatsThisClickedEvent) realProxy.GetTransparentProxy();
		}
		private QWhatsThisClickedEvent ProxyQWhatsThisClickedEvent() {
			return (QWhatsThisClickedEvent) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QWhatsThisClickedEvent() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQWhatsThisClickedEventProxy), null);
			_staticInterceptor = (IQWhatsThisClickedEventProxy) realProxy.GetTransparentProxy();
		}
		private static IQWhatsThisClickedEventProxy StaticQWhatsThisClickedEvent() {
			return (IQWhatsThisClickedEventProxy) _staticInterceptor;
		}

		public QWhatsThisClickedEvent(string href) : this((Type) null) {
			CreateProxy();
			NewQWhatsThisClickedEvent(href);
		}
		[SmokeMethod("QWhatsThisClickedEvent", "(const QString&)", "$")]
		private void NewQWhatsThisClickedEvent(string href) {
			ProxyQWhatsThisClickedEvent().NewQWhatsThisClickedEvent(href);
		}
		[SmokeMethod("href", "() const", "")]
		public string Href() {
			return ProxyQWhatsThisClickedEvent().Href();
		}
		~QWhatsThisClickedEvent() {
			DisposeQWhatsThisClickedEvent();
		}
		public new void Dispose() {
			DisposeQWhatsThisClickedEvent();
		}
		[SmokeMethod("~QWhatsThisClickedEvent", "()", "")]
		private void DisposeQWhatsThisClickedEvent() {
			ProxyQWhatsThisClickedEvent().DisposeQWhatsThisClickedEvent();
		}
	}
}
