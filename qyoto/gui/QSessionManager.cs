//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	[SmokeClass("QSessionManager")]
	public class QSessionManager : QObject {
 		protected QSessionManager(Type dummy) : base((Type) null) {}
		[SmokeClass("QSessionManager")]
		interface IQSessionManagerProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSessionManager), this);
			interceptor = (QSessionManager) realProxy.GetTransparentProxy();
		}
		private static IQSessionManagerProxy staticInterceptor = null;
		static QSessionManager() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSessionManagerProxy), null);
			staticInterceptor = (IQSessionManagerProxy) realProxy.GetTransparentProxy();
		}
		public enum RestartHint {
			RestartIfRunning = 0,
			RestartAnyway = 1,
			RestartImmediately = 2,
			RestartNever = 3,
		}
		[SmokeMethod("sessionId", "() const", "")]
		public string SessionId() {
			return ((QSessionManager) interceptor).SessionId();
		}
		[SmokeMethod("sessionKey", "() const", "")]
		public string SessionKey() {
			return ((QSessionManager) interceptor).SessionKey();
		}
		[SmokeMethod("allowsInteraction", "()", "")]
		public bool AllowsInteraction() {
			return ((QSessionManager) interceptor).AllowsInteraction();
		}
		[SmokeMethod("allowsErrorInteraction", "()", "")]
		public bool AllowsErrorInteraction() {
			return ((QSessionManager) interceptor).AllowsErrorInteraction();
		}
		[SmokeMethod("release", "()", "")]
		public void Release() {
			((QSessionManager) interceptor).Release();
		}
		[SmokeMethod("cancel", "()", "")]
		public void Cancel() {
			((QSessionManager) interceptor).Cancel();
		}
		[SmokeMethod("setRestartHint", "(QSessionManager::RestartHint)", "$")]
		public void SetRestartHint(QSessionManager.RestartHint arg1) {
			((QSessionManager) interceptor).SetRestartHint(arg1);
		}
		[SmokeMethod("restartHint", "() const", "")]
		public QSessionManager.RestartHint restartHint() {
			return ((QSessionManager) interceptor).restartHint();
		}
		[SmokeMethod("setRestartCommand", "(const QStringList&)", "?")]
		public void SetRestartCommand(List<string> arg1) {
			((QSessionManager) interceptor).SetRestartCommand(arg1);
		}
		[SmokeMethod("restartCommand", "() const", "")]
		public List<string> RestartCommand() {
			return ((QSessionManager) interceptor).RestartCommand();
		}
		[SmokeMethod("setDiscardCommand", "(const QStringList&)", "?")]
		public void SetDiscardCommand(List<string> arg1) {
			((QSessionManager) interceptor).SetDiscardCommand(arg1);
		}
		[SmokeMethod("discardCommand", "() const", "")]
		public List<string> DiscardCommand() {
			return ((QSessionManager) interceptor).DiscardCommand();
		}
		[SmokeMethod("setManagerProperty", "(const QString&, const QString&)", "$$")]
		public void SetManagerProperty(string name, string value) {
			((QSessionManager) interceptor).SetManagerProperty(name,value);
		}
		[SmokeMethod("setManagerProperty", "(const QString&, const QStringList&)", "$?")]
		public void SetManagerProperty(string name, List<string> value) {
			((QSessionManager) interceptor).SetManagerProperty(name,value);
		}
		[SmokeMethod("isPhase2", "() const", "")]
		public bool IsPhase2() {
			return ((QSessionManager) interceptor).IsPhase2();
		}
		[SmokeMethod("requestPhase2", "()", "")]
		public void RequestPhase2() {
			((QSessionManager) interceptor).RequestPhase2();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQSessionManagerSignals Emit {
			get { return (IQSessionManagerSignals) Q_EMIT; }
		}
	}

	public interface IQSessionManagerSignals : IQObjectSignals {
	}
}
