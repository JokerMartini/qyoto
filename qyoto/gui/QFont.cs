//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	[SmokeClass("QFont")]
	public class QFont : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
		private IntPtr _smokeObject;
		protected QFont(Type dummy) {}
		[SmokeClass("QFont")]
		interface IQFontProxy {
			[SmokeMethod("operator==", "(const QFont&) const", "#")]
			bool op_equals(QFont lhs, QFont arg1);
			[SmokeMethod("operator<", "(const QFont&) const", "#")]
			bool op_lt(QFont lhs, QFont arg1);
			[SmokeMethod("substitute", "(const QString&)", "$")]
			string Substitute(string arg1);
			[SmokeMethod("substitutes", "(const QString&)", "$")]
			List<string> Substitutes(string arg1);
			[SmokeMethod("substitutions", "()", "")]
			List<string> Substitutions();
			[SmokeMethod("insertSubstitution", "(const QString&, const QString&)", "$$")]
			void InsertSubstitution(string arg1, string arg2);
			[SmokeMethod("insertSubstitutions", "(const QString&, const QStringList&)", "$?")]
			void InsertSubstitutions(string arg1, List<string> arg2);
			[SmokeMethod("removeSubstitution", "(const QString&)", "$")]
			void RemoveSubstitution(string arg1);
			[SmokeMethod("initialize", "()", "")]
			void Initialize();
			[SmokeMethod("cleanup", "()", "")]
			void Cleanup();
			[SmokeMethod("cacheStatistics", "()", "")]
			void CacheStatistics();
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QFont), this);
			_interceptor = (QFont) realProxy.GetTransparentProxy();
		}
		private QFont ProxyQFont() {
			return (QFont) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QFont() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQFontProxy), null);
			_staticInterceptor = (IQFontProxy) realProxy.GetTransparentProxy();
		}
		private static IQFontProxy StaticQFont() {
			return (IQFontProxy) _staticInterceptor;
		}
		public enum StyleHint {
			Helvetica = 0,
			SansSerif = Helvetica,
			Times = 1,
			Serif = Times,
			Courier = 2,
			TypeWriter = Courier,
			OldEnglish = 3,
			Decorative = OldEnglish,
			System = 4,
			AnyStyle = 5,
		}
		public enum StyleStrategy {
			PreferDefault = 0x0001,
			PreferBitmap = 0x0002,
			PreferDevice = 0x0004,
			PreferOutline = 0x0008,
			ForceOutline = 0x0010,
			PreferMatch = 0x0020,
			PreferQuality = 0x0040,
			PreferAntialias = 0x0080,
			NoAntialias = 0x0100,
			OpenGLCompatible = 0x0200,
			NoFontMerging = 0x8000,
		}
		public enum Weight {
			Light = 25,
			Normal = 50,
			DemiBold = 63,
			Bold = 75,
			Black = 87,
		}
		public enum Style {
			StyleNormal = 0,
			StyleItalic = 1,
			StyleOblique = 2,
		}
		public enum Stretch {
			UltraCondensed = 50,
			ExtraCondensed = 62,
			Condensed = 75,
			SemiCondensed = 87,
			Unstretched = 100,
			SemiExpanded = 112,
			Expanded = 125,
			ExtraExpanded = 150,
			UltraExpanded = 200,
		}
		public QFont() : this((Type) null) {
			CreateProxy();
			NewQFont();
		}
		[SmokeMethod("QFont", "()", "")]
		private void NewQFont() {
			ProxyQFont().NewQFont();
		}
		public QFont(string family, int pointSize, int weight, bool italic) : this((Type) null) {
			CreateProxy();
			NewQFont(family,pointSize,weight,italic);
		}
		[SmokeMethod("QFont", "(const QString&, int, int, bool)", "$$$$")]
		private void NewQFont(string family, int pointSize, int weight, bool italic) {
			ProxyQFont().NewQFont(family,pointSize,weight,italic);
		}
		public QFont(string family, int pointSize, int weight) : this((Type) null) {
			CreateProxy();
			NewQFont(family,pointSize,weight);
		}
		[SmokeMethod("QFont", "(const QString&, int, int)", "$$$")]
		private void NewQFont(string family, int pointSize, int weight) {
			ProxyQFont().NewQFont(family,pointSize,weight);
		}
		public QFont(string family, int pointSize) : this((Type) null) {
			CreateProxy();
			NewQFont(family,pointSize);
		}
		[SmokeMethod("QFont", "(const QString&, int)", "$$")]
		private void NewQFont(string family, int pointSize) {
			ProxyQFont().NewQFont(family,pointSize);
		}
		public QFont(string family) : this((Type) null) {
			CreateProxy();
			NewQFont(family);
		}
		[SmokeMethod("QFont", "(const QString&)", "$")]
		private void NewQFont(string family) {
			ProxyQFont().NewQFont(family);
		}
		public QFont(QFont arg1, IQPaintDevice pd) : this((Type) null) {
			CreateProxy();
			NewQFont(arg1,pd);
		}
		[SmokeMethod("QFont", "(const QFont&, QPaintDevice*)", "##")]
		private void NewQFont(QFont arg1, IQPaintDevice pd) {
			ProxyQFont().NewQFont(arg1,pd);
		}
		public QFont(QFont arg1) : this((Type) null) {
			CreateProxy();
			NewQFont(arg1);
		}
		[SmokeMethod("QFont", "(const QFont&)", "#")]
		private void NewQFont(QFont arg1) {
			ProxyQFont().NewQFont(arg1);
		}
		[SmokeMethod("family", "() const", "")]
		public string Family() {
			return ProxyQFont().Family();
		}
		[SmokeMethod("setFamily", "(const QString&)", "$")]
		public void SetFamily(string arg1) {
			ProxyQFont().SetFamily(arg1);
		}
		[SmokeMethod("pointSize", "() const", "")]
		public int PointSize() {
			return ProxyQFont().PointSize();
		}
		[SmokeMethod("setPointSize", "(int)", "$")]
		public void SetPointSize(int arg1) {
			ProxyQFont().SetPointSize(arg1);
		}
		[SmokeMethod("pointSizeF", "() const", "")]
		public double PointSizeF() {
			return ProxyQFont().PointSizeF();
		}
		[SmokeMethod("setPointSizeF", "(qreal)", "$")]
		public void SetPointSizeF(double arg1) {
			ProxyQFont().SetPointSizeF(arg1);
		}
		[SmokeMethod("pixelSize", "() const", "")]
		public int PixelSize() {
			return ProxyQFont().PixelSize();
		}
		[SmokeMethod("setPixelSize", "(int)", "$")]
		public void SetPixelSize(int arg1) {
			ProxyQFont().SetPixelSize(arg1);
		}
		[SmokeMethod("weight", "() const", "")]
		public int weight() {
			return ProxyQFont().weight();
		}
		[SmokeMethod("setWeight", "(int)", "$")]
		public void SetWeight(int arg1) {
			ProxyQFont().SetWeight(arg1);
		}
		[SmokeMethod("bold", "() const", "")]
		public bool Bold() {
			return ProxyQFont().Bold();
		}
		[SmokeMethod("setBold", "(bool)", "$")]
		public void SetBold(bool arg1) {
			ProxyQFont().SetBold(arg1);
		}
		[SmokeMethod("setStyle", "(QFont::Style)", "$")]
		public void SetStyle(QFont.Style style) {
			ProxyQFont().SetStyle(style);
		}
		[SmokeMethod("style", "() const", "")]
		public QFont.Style style() {
			return ProxyQFont().style();
		}
		[SmokeMethod("italic", "() const", "")]
		public bool Italic() {
			return ProxyQFont().Italic();
		}
		[SmokeMethod("setItalic", "(bool)", "$")]
		public void SetItalic(bool b) {
			ProxyQFont().SetItalic(b);
		}
		[SmokeMethod("underline", "() const", "")]
		public bool Underline() {
			return ProxyQFont().Underline();
		}
		[SmokeMethod("setUnderline", "(bool)", "$")]
		public void SetUnderline(bool arg1) {
			ProxyQFont().SetUnderline(arg1);
		}
		[SmokeMethod("overline", "() const", "")]
		public bool Overline() {
			return ProxyQFont().Overline();
		}
		[SmokeMethod("setOverline", "(bool)", "$")]
		public void SetOverline(bool arg1) {
			ProxyQFont().SetOverline(arg1);
		}
		[SmokeMethod("strikeOut", "() const", "")]
		public bool StrikeOut() {
			return ProxyQFont().StrikeOut();
		}
		[SmokeMethod("setStrikeOut", "(bool)", "$")]
		public void SetStrikeOut(bool arg1) {
			ProxyQFont().SetStrikeOut(arg1);
		}
		[SmokeMethod("fixedPitch", "() const", "")]
		public bool FixedPitch() {
			return ProxyQFont().FixedPitch();
		}
		[SmokeMethod("setFixedPitch", "(bool)", "$")]
		public void SetFixedPitch(bool arg1) {
			ProxyQFont().SetFixedPitch(arg1);
		}
		[SmokeMethod("kerning", "() const", "")]
		public bool Kerning() {
			return ProxyQFont().Kerning();
		}
		[SmokeMethod("setKerning", "(bool)", "$")]
		public void SetKerning(bool arg1) {
			ProxyQFont().SetKerning(arg1);
		}
		[SmokeMethod("styleHint", "() const", "")]
		public QFont.StyleHint styleHint() {
			return ProxyQFont().styleHint();
		}
		[SmokeMethod("styleStrategy", "() const", "")]
		public QFont.StyleStrategy styleStrategy() {
			return ProxyQFont().styleStrategy();
		}
		[SmokeMethod("setStyleHint", "(QFont::StyleHint, QFont::StyleStrategy)", "$$")]
		public void SetStyleHint(QFont.StyleHint arg1, QFont.StyleStrategy arg2) {
			ProxyQFont().SetStyleHint(arg1,arg2);
		}
		[SmokeMethod("setStyleHint", "(QFont::StyleHint)", "$")]
		public void SetStyleHint(QFont.StyleHint arg1) {
			ProxyQFont().SetStyleHint(arg1);
		}
		[SmokeMethod("setStyleStrategy", "(QFont::StyleStrategy)", "$")]
		public void SetStyleStrategy(QFont.StyleStrategy s) {
			ProxyQFont().SetStyleStrategy(s);
		}
		[SmokeMethod("stretch", "() const", "")]
		public int stretch() {
			return ProxyQFont().stretch();
		}
		[SmokeMethod("setStretch", "(int)", "$")]
		public void SetStretch(int arg1) {
			ProxyQFont().SetStretch(arg1);
		}
		[SmokeMethod("rawMode", "() const", "")]
		public bool RawMode() {
			return ProxyQFont().RawMode();
		}
		[SmokeMethod("setRawMode", "(bool)", "$")]
		public void SetRawMode(bool arg1) {
			ProxyQFont().SetRawMode(arg1);
		}
		[SmokeMethod("exactMatch", "() const", "")]
		public bool ExactMatch() {
			return ProxyQFont().ExactMatch();
		}
		public static bool operator==(QFont lhs, QFont arg1) {
			return StaticQFont().op_equals(lhs,arg1);
		}
		public static bool operator!=(QFont lhs, QFont arg1) {
			return !StaticQFont().op_equals(lhs,arg1);
		}
		public override bool Equals(object o) {
			if (!(o is QFont)) { return false; }
			return this == (QFont) o;
		}
		public override int GetHashCode() {
			return ProxyQFont().GetHashCode();
		}
		public static bool operator<(QFont lhs, QFont arg1) {
			return StaticQFont().op_lt(lhs,arg1);
		}
		public static bool operator>(QFont lhs, QFont arg1) {
			return !StaticQFont().op_lt(lhs,arg1)
						&& !StaticQFont().op_equals(lhs,arg1);
		}
		//  operator QVariant(); >>>> NOT CONVERTED
		[SmokeMethod("isCopyOf", "(const QFont&) const", "#")]
		public bool IsCopyOf(QFont arg1) {
			return ProxyQFont().IsCopyOf(arg1);
		}
		[SmokeMethod("setRawName", "(const QString&)", "$")]
		public void SetRawName(string arg1) {
			ProxyQFont().SetRawName(arg1);
		}
		[SmokeMethod("rawName", "() const", "")]
		public string RawName() {
			return ProxyQFont().RawName();
		}
		[SmokeMethod("key", "() const", "")]
		public string Key() {
			return ProxyQFont().Key();
		}
		[SmokeMethod("toString", "() const", "")]
		public string ToString() {
			return ProxyQFont().ToString();
		}
		[SmokeMethod("fromString", "(const QString&)", "$")]
		public bool FromString(string arg1) {
			return ProxyQFont().FromString(arg1);
		}
		[SmokeMethod("defaultFamily", "() const", "")]
		public string DefaultFamily() {
			return ProxyQFont().DefaultFamily();
		}
		[SmokeMethod("lastResortFamily", "() const", "")]
		public string LastResortFamily() {
			return ProxyQFont().LastResortFamily();
		}
		[SmokeMethod("lastResortFont", "() const", "")]
		public string LastResortFont() {
			return ProxyQFont().LastResortFont();
		}
		[SmokeMethod("resolve", "(const QFont&) const", "#")]
		public QFont Resolve(QFont arg1) {
			return ProxyQFont().Resolve(arg1);
		}
		[SmokeMethod("resolve", "() const", "")]
		public uint Resolve() {
			return ProxyQFont().Resolve();
		}
		[SmokeMethod("resolve", "(uint)", "$")]
		public void Resolve(uint mask) {
			ProxyQFont().Resolve(mask);
		}
		public static string Substitute(string arg1) {
			return StaticQFont().Substitute(arg1);
		}
		public static List<string> Substitutes(string arg1) {
			return StaticQFont().Substitutes(arg1);
		}
		public static List<string> Substitutions() {
			return StaticQFont().Substitutions();
		}
		public static void InsertSubstitution(string arg1, string arg2) {
			StaticQFont().InsertSubstitution(arg1,arg2);
		}
		public static void InsertSubstitutions(string arg1, List<string> arg2) {
			StaticQFont().InsertSubstitutions(arg1,arg2);
		}
		public static void RemoveSubstitution(string arg1) {
			StaticQFont().RemoveSubstitution(arg1);
		}
		public static void Initialize() {
			StaticQFont().Initialize();
		}
		public static void Cleanup() {
			StaticQFont().Cleanup();
		}
		public static void CacheStatistics() {
			StaticQFont().CacheStatistics();
		}
		~QFont() {
			DisposeQFont();
		}
		public void Dispose() {
			DisposeQFont();
		}
		[SmokeMethod("~QFont", "()", "")]
		private void DisposeQFont() {
			ProxyQFont().DisposeQFont();
		}
	}
}
