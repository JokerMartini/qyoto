//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;

	[SmokeClass("QScrollArea")]
	public class QScrollArea : QAbstractScrollArea, IDisposable {
 		protected QScrollArea(Type dummy) : base((Type) null) {}
		interface IQScrollAreaProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QScrollArea), this);
			_interceptor = (QScrollArea) realProxy.GetTransparentProxy();
		}
		private QScrollArea ProxyQScrollArea() {
			return (QScrollArea) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QScrollArea() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQScrollAreaProxy), null);
			_staticInterceptor = (IQScrollAreaProxy) realProxy.GetTransparentProxy();
		}
		private static IQScrollAreaProxy StaticQScrollArea() {
			return (IQScrollAreaProxy) _staticInterceptor;
		}

		[Q_PROPERTY("bool", "widgetResizable")]
		public bool WidgetResizable {
			get {
				return Property("widgetResizable").Value<bool>();
			}
			set {
				SetProperty("widgetResizable", QVariant.FromValue<bool>(value));
			}
		}
		[Q_PROPERTY("Qt::Alignment", "alignment")]
		public int Alignment {
			get {
				return Property("alignment").Value<int>();
			}
			set {
				SetProperty("alignment", QVariant.FromValue<int>(value));
			}
		}
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QScrollArea(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQScrollArea(parent);
		}
		[SmokeMethod("QScrollArea", "(QWidget*)", "#")]
		private void NewQScrollArea(QWidget parent) {
			ProxyQScrollArea().NewQScrollArea(parent);
		}
		public QScrollArea() : this((Type) null) {
			CreateProxy();
			NewQScrollArea();
		}
		[SmokeMethod("QScrollArea", "()", "")]
		private void NewQScrollArea() {
			ProxyQScrollArea().NewQScrollArea();
		}
		[SmokeMethod("widget", "() const", "")]
		public QWidget Widget() {
			return ProxyQScrollArea().Widget();
		}
		[SmokeMethod("setWidget", "(QWidget*)", "#")]
		public void SetWidget(QWidget widget) {
			ProxyQScrollArea().SetWidget(widget);
		}
		[SmokeMethod("takeWidget", "()", "")]
		public QWidget TakeWidget() {
			return ProxyQScrollArea().TakeWidget();
		}
		[SmokeMethod("sizeHint", "() const", "")]
		public new QSize SizeHint() {
			return ProxyQScrollArea().SizeHint();
		}
		[SmokeMethod("focusNextPrevChild", "(bool)", "$")]
		public new bool FocusNextPrevChild(bool next) {
			return ProxyQScrollArea().FocusNextPrevChild(next);
		}
		[SmokeMethod("ensureVisible", "(int, int, int, int)", "$$$$")]
		public void EnsureVisible(int x, int y, int xmargin, int ymargin) {
			ProxyQScrollArea().EnsureVisible(x,y,xmargin,ymargin);
		}
		[SmokeMethod("ensureVisible", "(int, int, int)", "$$$")]
		public void EnsureVisible(int x, int y, int xmargin) {
			ProxyQScrollArea().EnsureVisible(x,y,xmargin);
		}
		[SmokeMethod("ensureVisible", "(int, int)", "$$")]
		public void EnsureVisible(int x, int y) {
			ProxyQScrollArea().EnsureVisible(x,y);
		}
		[SmokeMethod("ensureWidgetVisible", "(QWidget*, int, int)", "#$$")]
		public void EnsureWidgetVisible(QWidget childWidget, int xmargin, int ymargin) {
			ProxyQScrollArea().EnsureWidgetVisible(childWidget,xmargin,ymargin);
		}
		[SmokeMethod("ensureWidgetVisible", "(QWidget*, int)", "#$")]
		public void EnsureWidgetVisible(QWidget childWidget, int xmargin) {
			ProxyQScrollArea().EnsureWidgetVisible(childWidget,xmargin);
		}
		[SmokeMethod("ensureWidgetVisible", "(QWidget*)", "#")]
		public void EnsureWidgetVisible(QWidget childWidget) {
			ProxyQScrollArea().EnsureWidgetVisible(childWidget);
		}
		public static new string Tr(string s, string c) {
			return StaticQScrollArea().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQScrollArea().Tr(s);
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		public new bool Event(QEvent arg1) {
			return ProxyQScrollArea().Event(arg1);
		}
		[SmokeMethod("eventFilter", "(QObject*, QEvent*)", "##")]
		public new bool EventFilter(QObject arg1, QEvent arg2) {
			return ProxyQScrollArea().EventFilter(arg1,arg2);
		}
		[SmokeMethod("resizeEvent", "(QResizeEvent*)", "#")]
		protected new void ResizeEvent(QResizeEvent arg1) {
			ProxyQScrollArea().ResizeEvent(arg1);
		}
		[SmokeMethod("scrollContentsBy", "(int, int)", "$$")]
		protected new void ScrollContentsBy(int dx, int dy) {
			ProxyQScrollArea().ScrollContentsBy(dx,dy);
		}
		~QScrollArea() {
			DisposeQScrollArea();
		}
		public new void Dispose() {
			DisposeQScrollArea();
		}
		[SmokeMethod("~QScrollArea", "()", "")]
		private void DisposeQScrollArea() {
			ProxyQScrollArea().DisposeQScrollArea();
		}
		protected new IQScrollAreaSignals Emit {
			get {
				return (IQScrollAreaSignals) Q_EMIT;
			}
		}
	}

	public interface IQScrollAreaSignals : IQAbstractScrollAreaSignals {
	}
}
