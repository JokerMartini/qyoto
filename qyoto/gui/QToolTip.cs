//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QToolTip")]
	public class QToolTip : MarshalByRefObject {
		protected QToolTip interceptor = null;
		private IntPtr smokeObject;
		protected QToolTip(Type dummy) {}
		[SmokeClass("QToolTip")]
		interface IQToolTipProxy {
			[SmokeMethod("showText", "(const QPoint&, const QString&, QWidget*)", "#$#")]
			void ShowText(QPoint pos, string text, QWidget w);
			[SmokeMethod("showText", "(const QPoint&, const QString&)", "#$")]
			void ShowText(QPoint pos, string text);
			[SmokeMethod("showText", "(const QPoint&, const QString&, QWidget*, const QRect&)", "#$##")]
			void ShowText(QPoint pos, string text, QWidget w, QRect rect);
			[SmokeMethod("hideText", "()", "")]
			void HideText();
			[SmokeMethod("palette", "()", "")]
			QPalette Palette();
			[SmokeMethod("setPalette", "(const QPalette&)", "#")]
			void SetPalette(QPalette arg1);
			[SmokeMethod("font", "()", "")]
			QFont Font();
			[SmokeMethod("setFont", "(const QFont&)", "#")]
			void SetFont(QFont arg1);
		}
		private static IQToolTipProxy staticInterceptor = null;
		static QToolTip() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQToolTipProxy), null);
			staticInterceptor = (IQToolTipProxy) realProxy.GetTransparentProxy();
		}
		public static void ShowText(QPoint pos, string text, QWidget w) {
			staticInterceptor.ShowText(pos,text,w);
		}
		public static void ShowText(QPoint pos, string text) {
			staticInterceptor.ShowText(pos,text);
		}
		public static void ShowText(QPoint pos, string text, QWidget w, QRect rect) {
			staticInterceptor.ShowText(pos,text,w,rect);
		}
		public static void HideText() {
			staticInterceptor.HideText();
		}
		public static QPalette Palette() {
			return staticInterceptor.Palette();
		}
		public static void SetPalette(QPalette arg1) {
			staticInterceptor.SetPalette(arg1);
		}
		public static QFont Font() {
			return staticInterceptor.Font();
		}
		public static void SetFont(QFont arg1) {
			staticInterceptor.SetFont(arg1);
		}
	}
}
