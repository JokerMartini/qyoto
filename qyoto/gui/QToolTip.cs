//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;

	[SmokeClass("QToolTip")]
	public class QToolTip : MarshalByRefObject {
		protected Object _interceptor = null;
		private IntPtr _smokeObject;
		protected QToolTip(Type dummy) {}
		[SmokeClass("QToolTip")]
		interface IQToolTipProxy {
			[SmokeMethod("showText", "(const QPoint&, const QString&, QWidget*)", "#$#")]
			void ShowText(QPoint pos, string text, QWidget w);
			[SmokeMethod("showText", "(const QPoint&, const QString&)", "#$")]
			void ShowText(QPoint pos, string text);
			[SmokeMethod("showText", "(const QPoint&, const QString&, QWidget*, const QRect&)", "#$##")]
			void ShowText(QPoint pos, string text, QWidget w, QRect rect);
			[SmokeMethod("hideText", "()", "")]
			void HideText();
			[SmokeMethod("palette", "()", "")]
			QPalette Palette();
			[SmokeMethod("setPalette", "(const QPalette&)", "#")]
			void SetPalette(QPalette arg1);
			[SmokeMethod("font", "()", "")]
			QFont Font();
			[SmokeMethod("setFont", "(const QFont&)", "#")]
			void SetFont(QFont arg1);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QToolTip), this);
			_interceptor = (QToolTip) realProxy.GetTransparentProxy();
		}
		private QToolTip ProxyQToolTip() {
			return (QToolTip) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QToolTip() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQToolTipProxy), null);
			_staticInterceptor = (IQToolTipProxy) realProxy.GetTransparentProxy();
		}
		private static IQToolTipProxy StaticQToolTip() {
			return (IQToolTipProxy) _staticInterceptor;
		}
		public static void ShowText(QPoint pos, string text, QWidget w) {
			StaticQToolTip().ShowText(pos,text,w);
		}
		public static void ShowText(QPoint pos, string text) {
			StaticQToolTip().ShowText(pos,text);
		}
		public static void ShowText(QPoint pos, string text, QWidget w, QRect rect) {
			StaticQToolTip().ShowText(pos,text,w,rect);
		}
		public static void HideText() {
			StaticQToolTip().HideText();
		}
		public static QPalette Palette() {
			return StaticQToolTip().Palette();
		}
		public static void SetPalette(QPalette arg1) {
			StaticQToolTip().SetPalette(arg1);
		}
		public static QFont Font() {
			return StaticQToolTip().Font();
		}
		public static void SetFont(QFont arg1) {
			StaticQToolTip().SetFont(arg1);
		}
		~QToolTip() {
			DisposeQToolTip();
		}
		public void Dispose() {
			DisposeQToolTip();
		}
		[SmokeMethod("~QToolTip", "()", "")]
		private void DisposeQToolTip() {
			ProxyQToolTip().DisposeQToolTip();
		}
	}
}
