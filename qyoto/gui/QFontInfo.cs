//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QFontInfo")]
	public class QFontInfo : MarshalByRefObject, IDisposable {
		protected QFontInfo interceptor = null;
		private IntPtr smokeObject;
		protected QFontInfo(Type dummy) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QFontInfo), this);
			interceptor = (QFontInfo) realProxy.GetTransparentProxy();
		}
		public QFontInfo(QFont arg1) : this((Type) null) {
			CreateProxy();
			NewQFontInfo(arg1);
		}
		[SmokeMethod("QFontInfo", "(const QFont&)", "#")]
		private void NewQFontInfo(QFont arg1) {
			((QFontInfo) interceptor).NewQFontInfo(arg1);
		}
		public QFontInfo(QFontInfo arg1) : this((Type) null) {
			CreateProxy();
			NewQFontInfo(arg1);
		}
		[SmokeMethod("QFontInfo", "(const QFontInfo&)", "#")]
		private void NewQFontInfo(QFontInfo arg1) {
			((QFontInfo) interceptor).NewQFontInfo(arg1);
		}
		[SmokeMethod("family", "() const", "")]
		public string Family() {
			return ((QFontInfo) interceptor).Family();
		}
		[SmokeMethod("pixelSize", "() const", "")]
		public int PixelSize() {
			return ((QFontInfo) interceptor).PixelSize();
		}
		[SmokeMethod("pointSize", "() const", "")]
		public int PointSize() {
			return ((QFontInfo) interceptor).PointSize();
		}
		[SmokeMethod("pointSizeF", "() const", "")]
		public double PointSizeF() {
			return ((QFontInfo) interceptor).PointSizeF();
		}
		[SmokeMethod("italic", "() const", "")]
		public bool Italic() {
			return ((QFontInfo) interceptor).Italic();
		}
		[SmokeMethod("style", "() const", "")]
		public QFont.Style Style() {
			return ((QFontInfo) interceptor).Style();
		}
		[SmokeMethod("weight", "() const", "")]
		public int Weight() {
			return ((QFontInfo) interceptor).Weight();
		}
		[SmokeMethod("bold", "() const", "")]
		public bool Bold() {
			return ((QFontInfo) interceptor).Bold();
		}
		[SmokeMethod("underline", "() const", "")]
		public bool Underline() {
			return ((QFontInfo) interceptor).Underline();
		}
		[SmokeMethod("overline", "() const", "")]
		public bool Overline() {
			return ((QFontInfo) interceptor).Overline();
		}
		[SmokeMethod("strikeOut", "() const", "")]
		public bool StrikeOut() {
			return ((QFontInfo) interceptor).StrikeOut();
		}
		[SmokeMethod("fixedPitch", "() const", "")]
		public bool FixedPitch() {
			return ((QFontInfo) interceptor).FixedPitch();
		}
		[SmokeMethod("styleHint", "() const", "")]
		public QFont.StyleHint StyleHint() {
			return ((QFontInfo) interceptor).StyleHint();
		}
		[SmokeMethod("rawMode", "() const", "")]
		public bool RawMode() {
			return ((QFontInfo) interceptor).RawMode();
		}
		[SmokeMethod("exactMatch", "() const", "")]
		public bool ExactMatch() {
			return ((QFontInfo) interceptor).ExactMatch();
		}
		~QFontInfo() {
			DisposeQFontInfo();
		}
		public void Dispose() {
			DisposeQFontInfo();
		}
		[SmokeMethod("~QFontInfo", "()", "")]
		private void DisposeQFontInfo() {
			((QFontInfo) interceptor).DisposeQFontInfo();
		}
	}
}
