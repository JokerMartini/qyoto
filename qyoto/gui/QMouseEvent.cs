//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QMouseEvent")]
	public class QMouseEvent : QInputEvent, IDisposable {
 		protected QMouseEvent(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QMouseEvent), this);
			interceptor = (QMouseEvent) realProxy.GetTransparentProxy();
		}
		public QMouseEvent(QEvent.TypeOf type, QPoint pos, Qt.MouseButton button, int buttons, int modifiers) : this((Type) null) {
			CreateProxy();
			NewQMouseEvent(type,pos,button,buttons,modifiers);
		}
		[SmokeMethod("QMouseEvent", "(QEvent::Type, const QPoint&, Qt::MouseButton, Qt::MouseButtons, Qt::KeyboardModifiers)", "$#$$$")]
		private void NewQMouseEvent(QEvent.TypeOf type, QPoint pos, Qt.MouseButton button, int buttons, int modifiers) {
			((QMouseEvent) interceptor).NewQMouseEvent(type,pos,button,buttons,modifiers);
		}
		public QMouseEvent(QEvent.TypeOf type, QPoint pos, QPoint globalPos, Qt.MouseButton button, int buttons, int modifiers) : this((Type) null) {
			CreateProxy();
			NewQMouseEvent(type,pos,globalPos,button,buttons,modifiers);
		}
		[SmokeMethod("QMouseEvent", "(QEvent::Type, const QPoint&, const QPoint&, Qt::MouseButton, Qt::MouseButtons, Qt::KeyboardModifiers)", "$##$$$")]
		private void NewQMouseEvent(QEvent.TypeOf type, QPoint pos, QPoint globalPos, Qt.MouseButton button, int buttons, int modifiers) {
			((QMouseEvent) interceptor).NewQMouseEvent(type,pos,globalPos,button,buttons,modifiers);
		}
		[SmokeMethod("pos", "() const", "")]
		public QPoint Pos() {
			return ((QMouseEvent) interceptor).Pos();
		}
		[SmokeMethod("globalPos", "() const", "")]
		public QPoint GlobalPos() {
			return ((QMouseEvent) interceptor).GlobalPos();
		}
		[SmokeMethod("x", "() const", "")]
		public int X() {
			return ((QMouseEvent) interceptor).X();
		}
		[SmokeMethod("y", "() const", "")]
		public int Y() {
			return ((QMouseEvent) interceptor).Y();
		}
		[SmokeMethod("globalX", "() const", "")]
		public int GlobalX() {
			return ((QMouseEvent) interceptor).GlobalX();
		}
		[SmokeMethod("globalY", "() const", "")]
		public int GlobalY() {
			return ((QMouseEvent) interceptor).GlobalY();
		}
		[SmokeMethod("button", "() const", "")]
		public Qt.MouseButton Button() {
			return ((QMouseEvent) interceptor).Button();
		}
		[SmokeMethod("buttons", "() const", "")]
		public int Buttons() {
			return ((QMouseEvent) interceptor).Buttons();
		}
		~QMouseEvent() {
			DisposeQMouseEvent();
		}
		public new void Dispose() {
			DisposeQMouseEvent();
		}
		[SmokeMethod("~QMouseEvent", "()", "")]
		private void DisposeQMouseEvent() {
			((QMouseEvent) interceptor).DisposeQMouseEvent();
		}
	}
}
