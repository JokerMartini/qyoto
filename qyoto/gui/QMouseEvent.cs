//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QMouseEvent")]
	public class QMouseEvent : QInputEvent, IDisposable {
 		protected QMouseEvent(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(QMouseEvent), "QMouseEvent", this);
		}
		public QMouseEvent(QEvent.TypeOf type, QPoint pos, Qt.MouseButton button, int buttons, int modifiers) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QMouseEvent$#$$$", "QMouseEvent(QEvent::Type, const QPoint&, Qt::MouseButton, Qt::MouseButtons, Qt::KeyboardModifiers)", typeof(void), typeof(QEvent.TypeOf), type, typeof(QPoint), pos, typeof(Qt.MouseButton), button, typeof(int), buttons, typeof(int), modifiers);
		}
		public QMouseEvent(QEvent.TypeOf type, QPoint pos, QPoint globalPos, Qt.MouseButton button, int buttons, int modifiers) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QMouseEvent$##$$$", "QMouseEvent(QEvent::Type, const QPoint&, const QPoint&, Qt::MouseButton, Qt::MouseButtons, Qt::KeyboardModifiers)", typeof(void), typeof(QEvent.TypeOf), type, typeof(QPoint), pos, typeof(QPoint), globalPos, typeof(Qt.MouseButton), button, typeof(int), buttons, typeof(int), modifiers);
		}
		public QPoint Pos() {
			return (QPoint) interceptor.Invoke("pos", "pos() const", typeof(QPoint));
		}
		public QPoint GlobalPos() {
			return (QPoint) interceptor.Invoke("globalPos", "globalPos() const", typeof(QPoint));
		}
		public int X() {
			return (int) interceptor.Invoke("x", "x() const", typeof(int));
		}
		public int Y() {
			return (int) interceptor.Invoke("y", "y() const", typeof(int));
		}
		public int GlobalX() {
			return (int) interceptor.Invoke("globalX", "globalX() const", typeof(int));
		}
		public int GlobalY() {
			return (int) interceptor.Invoke("globalY", "globalY() const", typeof(int));
		}
		public Qt.MouseButton Button() {
			return (Qt.MouseButton) interceptor.Invoke("button", "button() const", typeof(Qt.MouseButton));
		}
		public int Buttons() {
			return (int) interceptor.Invoke("buttons", "buttons() const", typeof(int));
		}
		~QMouseEvent() {
			interceptor.Invoke("~QMouseEvent", "~QMouseEvent()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~QMouseEvent", "~QMouseEvent()", typeof(void));
		}
	}
}
