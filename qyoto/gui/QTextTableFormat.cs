//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	[SmokeClass("QTextTableFormat")]
	public class QTextTableFormat : QTextFrameFormat, IDisposable {
 		protected QTextTableFormat(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTextTableFormat), this);
			interceptor = (QTextTableFormat) realProxy.GetTransparentProxy();
		}
		public QTextTableFormat() : this((Type) null) {
			CreateProxy();
			NewQTextTableFormat();
		}
		[SmokeMethod("QTextTableFormat", "()", "")]
		private void NewQTextTableFormat() {
			((QTextTableFormat) interceptor).NewQTextTableFormat();
		}
		[SmokeMethod("isValid", "() const", "")]
		public bool IsValid() {
			return ((QTextTableFormat) interceptor).IsValid();
		}
		[SmokeMethod("columns", "() const", "")]
		public int Columns() {
			return ((QTextTableFormat) interceptor).Columns();
		}
		[SmokeMethod("setColumns", "(int)", "$")]
		public void SetColumns(int columns) {
			((QTextTableFormat) interceptor).SetColumns(columns);
		}
		[SmokeMethod("setColumnWidthConstraints", "(const QVector<QTextLength>&)", "?")]
		public void SetColumnWidthConstraints(List<QTextLength> constraints) {
			((QTextTableFormat) interceptor).SetColumnWidthConstraints(constraints);
		}
		[SmokeMethod("columnWidthConstraints", "() const", "")]
		public List<QTextLength> ColumnWidthConstraints() {
			return ((QTextTableFormat) interceptor).ColumnWidthConstraints();
		}
		[SmokeMethod("clearColumnWidthConstraints", "()", "")]
		public void ClearColumnWidthConstraints() {
			((QTextTableFormat) interceptor).ClearColumnWidthConstraints();
		}
		[SmokeMethod("cellSpacing", "() const", "")]
		public double CellSpacing() {
			return ((QTextTableFormat) interceptor).CellSpacing();
		}
		[SmokeMethod("setCellSpacing", "(qreal)", "$")]
		public void SetCellSpacing(double spacing) {
			((QTextTableFormat) interceptor).SetCellSpacing(spacing);
		}
		[SmokeMethod("cellPadding", "() const", "")]
		public double CellPadding() {
			return ((QTextTableFormat) interceptor).CellPadding();
		}
		[SmokeMethod("setCellPadding", "(qreal)", "$")]
		public void SetCellPadding(double padding) {
			((QTextTableFormat) interceptor).SetCellPadding(padding);
		}
		[SmokeMethod("setAlignment", "(Qt::Alignment)", "$")]
		public void SetAlignment(int alignment) {
			((QTextTableFormat) interceptor).SetAlignment(alignment);
		}
		[SmokeMethod("alignment", "() const", "")]
		public int Alignment() {
			return ((QTextTableFormat) interceptor).Alignment();
		}
		[SmokeMethod("setHeaderRowCount", "(int)", "$")]
		public void SetHeaderRowCount(int count) {
			((QTextTableFormat) interceptor).SetHeaderRowCount(count);
		}
		[SmokeMethod("headerRowCount", "() const", "")]
		public int HeaderRowCount() {
			return ((QTextTableFormat) interceptor).HeaderRowCount();
		}
		~QTextTableFormat() {
			DisposeQTextTableFormat();
		}
		public void Dispose() {
			DisposeQTextTableFormat();
		}
		[SmokeMethod("~QTextTableFormat", "()", "")]
		private void DisposeQTextTableFormat() {
			((QTextTableFormat) interceptor).DisposeQTextTableFormat();
		}
	}
}
