//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	/// See <see cref="IQDockWidgetSignals"></see> for signals emitted by QDockWidget
	[SmokeClass("QDockWidget")]
	public class QDockWidget : QWidget, IDisposable {
 		protected QDockWidget(Type dummy) : base((Type) null) {}
		[SmokeClass("QDockWidget")]
		interface IQDockWidgetProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDockWidget), this);
			interceptor = (QDockWidget) realProxy.GetTransparentProxy();
		}
		private static IQDockWidgetProxy staticInterceptor = null;
		static QDockWidget() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDockWidgetProxy), null);
			staticInterceptor = (IQDockWidgetProxy) realProxy.GetTransparentProxy();
		}
		public enum DockWidgetFeature {
			DockWidgetClosable = 0x01,
			DockWidgetMovable = 0x02,
			DockWidgetFloatable = 0x04,
			DockWidgetFeatureMask = 0x07,
			AllDockWidgetFeatures = DockWidgetFeatureMask,
			NoDockWidgetFeatures = 0x00,
			Reserved = 0xff,
		}
		[Q_PROPERTY("bool", "floating")]
		public bool Floating {
			[SmokeMethod("isFloating", "()", "")]
			get { return ((QDockWidget) interceptor).Floating; }
			[SmokeMethod("setFloating", "(bool)", "$")]
			set { ((QDockWidget) interceptor).Floating = value; }
		}
		[Q_PROPERTY("DockWidgetFeatures", "features")]
		public int Features {
			[SmokeMethod("features", "()", "")]
			get { return ((QDockWidget) interceptor).Features; }
			[SmokeMethod("setFeatures", "(DockWidgetFeatures)", "$")]
			set { ((QDockWidget) interceptor).Features = value; }
		}
		[Q_PROPERTY("Qt::DockWidgetAreas", "allowedAreas")]
		public int AllowedAreas {
			[SmokeMethod("allowedAreas", "()", "")]
			get { return ((QDockWidget) interceptor).AllowedAreas; }
			[SmokeMethod("", "(Qt::DockWidgetAreas)", "$")]
			set { ((QDockWidget) interceptor).AllowedAreas = value; }
		}
		[Q_PROPERTY("QString", "windowTitle")]
		public string WindowTitle {
			[SmokeMethod("windowTitle", "()", "")]
			get { return ((QDockWidget) interceptor).WindowTitle; }
			[SmokeMethod("setWindowTitle", "(QString)", "$")]
			set { ((QDockWidget) interceptor).WindowTitle = value; }
		}
		public QDockWidget(string title, QWidget parent, int flags) : this((Type) null) {
			CreateProxy();
			NewQDockWidget(title,parent,flags);
		}
		[SmokeMethod("QDockWidget", "(const QString&, QWidget*, Qt::WindowFlags)", "$#$")]
		private void NewQDockWidget(string title, QWidget parent, int flags) {
			((QDockWidget) interceptor).NewQDockWidget(title,parent,flags);
		}
		public QDockWidget(string title, QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQDockWidget(title,parent);
		}
		[SmokeMethod("QDockWidget", "(const QString&, QWidget*)", "$#")]
		private void NewQDockWidget(string title, QWidget parent) {
			((QDockWidget) interceptor).NewQDockWidget(title,parent);
		}
		public QDockWidget(string title) : this((Type) null) {
			CreateProxy();
			NewQDockWidget(title);
		}
		[SmokeMethod("QDockWidget", "(const QString&)", "$")]
		private void NewQDockWidget(string title) {
			((QDockWidget) interceptor).NewQDockWidget(title);
		}
		public QDockWidget(QWidget parent, int flags) : this((Type) null) {
			CreateProxy();
			NewQDockWidget(parent,flags);
		}
		[SmokeMethod("QDockWidget", "(QWidget*, Qt::WindowFlags)", "#$")]
		private void NewQDockWidget(QWidget parent, int flags) {
			((QDockWidget) interceptor).NewQDockWidget(parent,flags);
		}
		public QDockWidget(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQDockWidget(parent);
		}
		[SmokeMethod("QDockWidget", "(QWidget*)", "#")]
		private void NewQDockWidget(QWidget parent) {
			((QDockWidget) interceptor).NewQDockWidget(parent);
		}
		public QDockWidget() : this((Type) null) {
			CreateProxy();
			NewQDockWidget();
		}
		[SmokeMethod("QDockWidget", "()", "")]
		private void NewQDockWidget() {
			((QDockWidget) interceptor).NewQDockWidget();
		}
		[SmokeMethod("widget", "() const", "")]
		public QWidget Widget() {
			return ((QDockWidget) interceptor).Widget();
		}
		[SmokeMethod("setWidget", "(QWidget*)", "#")]
		public void SetWidget(QWidget widget) {
			((QDockWidget) interceptor).SetWidget(widget);
		}
		[SmokeMethod("isFloating", "() const", "")]
		public bool IsFloating() {
			return ((QDockWidget) interceptor).IsFloating();
		}
		[SmokeMethod("isAreaAllowed", "(Qt::DockWidgetArea) const", "$")]
		public bool IsAreaAllowed(Qt.DockWidgetArea area) {
			return ((QDockWidget) interceptor).IsAreaAllowed(area);
		}
		[SmokeMethod("toggleViewAction", "() const", "")]
		public QAction ToggleViewAction() {
			return ((QDockWidget) interceptor).ToggleViewAction();
		}
		[SmokeMethod("changeEvent", "(QEvent*)", "#")]
		protected override void ChangeEvent(QEvent arg1) {
			((QDockWidget) interceptor).ChangeEvent(arg1);
		}
		[SmokeMethod("closeEvent", "(QCloseEvent*)", "#")]
		protected override void CloseEvent(QCloseEvent arg1) {
			((QDockWidget) interceptor).CloseEvent(arg1);
		}
		[SmokeMethod("paintEvent", "(QPaintEvent*)", "#")]
		protected override void PaintEvent(QPaintEvent arg1) {
			((QDockWidget) interceptor).PaintEvent(arg1);
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		protected override bool Event(QEvent arg1) {
			return ((QDockWidget) interceptor).Event(arg1);
		}
		~QDockWidget() {
			DisposeQDockWidget();
		}
		public new void Dispose() {
			DisposeQDockWidget();
		}
		[SmokeMethod("~QDockWidget", "()", "")]
		private void DisposeQDockWidget() {
			((QDockWidget) interceptor).DisposeQDockWidget();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQDockWidgetSignals Emit {
			get { return (IQDockWidgetSignals) Q_EMIT; }
		}
	}

	public interface IQDockWidgetSignals : IQWidgetSignals {
		[Q_SIGNAL("void featuresChanged(QDockWidget::DockWidgetFeatures)")]
		void FeaturesChanged(int features);
		[Q_SIGNAL("void topLevelChanged(bool)")]
		void TopLevelChanged(bool topLevel);
		[Q_SIGNAL("void allowedAreasChanged(Qt::DockWidgetAreas)")]
		void AllowedAreasChanged(int allowedAreas);
	}
}
