//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	/// See <see cref="IQTabBarSignals"></see> for signals emitted by QTabBar
	[SmokeClass("QTabBar")]
	public class QTabBar : QWidget, IDisposable {
 		protected QTabBar(Type dummy) : base((Type) null) {}
		[SmokeClass("QTabBar")]
		interface IQTabBarProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTabBar), this);
			interceptor = (QTabBar) realProxy.GetTransparentProxy();
		}
		private static IQTabBarProxy staticInterceptor = null;
		static QTabBar() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQTabBarProxy), null);
			staticInterceptor = (IQTabBarProxy) realProxy.GetTransparentProxy();
		}
		public enum Shape {
			RoundedNorth = 0,
			RoundedSouth = 1,
			RoundedWest = 2,
			RoundedEast = 3,
			TriangularNorth = 4,
			TriangularSouth = 5,
			TriangularWest = 6,
			TriangularEast = 7,
		}
		[Q_PROPERTY("QTabBar::Shape", "shape")]
		public QTabBar.Shape shape {
			[SmokeMethod("shape", "()", "")]
			get { return ((QTabBar) interceptor).shape; }
			[SmokeMethod("setShape", "(QTabBar::Shape)", "$")]
			set { ((QTabBar) interceptor).shape = value; }
		}
		[Q_PROPERTY("int", "currentIndex")]
		public int CurrentIndex {
			[SmokeMethod("currentIndex", "()", "")]
			get { return ((QTabBar) interceptor).CurrentIndex; }
			[SmokeMethod("setCurrentIndex", "(int)", "$")]
			set { ((QTabBar) interceptor).CurrentIndex = value; }
		}
		[Q_PROPERTY("int", "count")]
		public int Count {
			[SmokeMethod("count", "()", "")]
			get { return ((QTabBar) interceptor).Count; }
		}
		[Q_PROPERTY("bool", "drawBase")]
		public bool DrawBase {
			[SmokeMethod("drawBase", "()", "")]
			get { return ((QTabBar) interceptor).DrawBase; }
			[SmokeMethod("setDrawBase", "(bool)", "$")]
			set { ((QTabBar) interceptor).DrawBase = value; }
		}
		[Q_PROPERTY("QSize", "iconSize")]
		public QSize IconSize {
			[SmokeMethod("iconSize", "()", "")]
			get { return ((QTabBar) interceptor).IconSize; }
			[SmokeMethod("setIconSize", "(QSize)", "#")]
			set { ((QTabBar) interceptor).IconSize = value; }
		}
		[Q_PROPERTY("Qt::TextElideMode", "elideMode")]
		public Qt.TextElideMode ElideMode {
			[SmokeMethod("elideMode", "()", "")]
			get { return ((QTabBar) interceptor).ElideMode; }
			[SmokeMethod("setElideMode", "(Qt::TextElideMode)", "$")]
			set { ((QTabBar) interceptor).ElideMode = value; }
		}
		[Q_PROPERTY("bool", "usesScrollButtons")]
		public bool UsesScrollButtons {
			[SmokeMethod("usesScrollButtons", "()", "")]
			get { return ((QTabBar) interceptor).UsesScrollButtons; }
			[SmokeMethod("setUsesScrollButtons", "(bool)", "$")]
			set { ((QTabBar) interceptor).UsesScrollButtons = value; }
		}
		public QTabBar(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQTabBar(parent);
		}
		[SmokeMethod("QTabBar", "(QWidget*)", "#")]
		private void NewQTabBar(QWidget parent) {
			((QTabBar) interceptor).NewQTabBar(parent);
		}
		public QTabBar() : this((Type) null) {
			CreateProxy();
			NewQTabBar();
		}
		[SmokeMethod("QTabBar", "()", "")]
		private void NewQTabBar() {
			((QTabBar) interceptor).NewQTabBar();
		}
		[SmokeMethod("addTab", "(const QString&)", "$")]
		public int AddTab(string text) {
			return ((QTabBar) interceptor).AddTab(text);
		}
		[SmokeMethod("addTab", "(const QIcon&, const QString&)", "#$")]
		public int AddTab(QIcon icon, string text) {
			return ((QTabBar) interceptor).AddTab(icon,text);
		}
		[SmokeMethod("insertTab", "(int, const QString&)", "$$")]
		public int InsertTab(int index, string text) {
			return ((QTabBar) interceptor).InsertTab(index,text);
		}
		[SmokeMethod("insertTab", "(int, const QIcon&, const QString&)", "$#$")]
		public int InsertTab(int index, QIcon icon, string text) {
			return ((QTabBar) interceptor).InsertTab(index,icon,text);
		}
		[SmokeMethod("removeTab", "(int)", "$")]
		public void RemoveTab(int index) {
			((QTabBar) interceptor).RemoveTab(index);
		}
		[SmokeMethod("isTabEnabled", "(int) const", "$")]
		public bool IsTabEnabled(int index) {
			return ((QTabBar) interceptor).IsTabEnabled(index);
		}
		[SmokeMethod("setTabEnabled", "(int, bool)", "$$")]
		public void SetTabEnabled(int index, bool arg2) {
			((QTabBar) interceptor).SetTabEnabled(index,arg2);
		}
		[SmokeMethod("tabText", "(int) const", "$")]
		public string TabText(int index) {
			return ((QTabBar) interceptor).TabText(index);
		}
		[SmokeMethod("setTabText", "(int, const QString&)", "$$")]
		public void SetTabText(int index, string text) {
			((QTabBar) interceptor).SetTabText(index,text);
		}
		[SmokeMethod("tabTextColor", "(int) const", "$")]
		public QColor TabTextColor(int index) {
			return ((QTabBar) interceptor).TabTextColor(index);
		}
		[SmokeMethod("setTabTextColor", "(int, const QColor&)", "$#")]
		public void SetTabTextColor(int index, QColor color) {
			((QTabBar) interceptor).SetTabTextColor(index,color);
		}
		[SmokeMethod("tabIcon", "(int) const", "$")]
		public QIcon TabIcon(int index) {
			return ((QTabBar) interceptor).TabIcon(index);
		}
		[SmokeMethod("setTabIcon", "(int, const QIcon&)", "$#")]
		public void SetTabIcon(int index, QIcon icon) {
			((QTabBar) interceptor).SetTabIcon(index,icon);
		}
		[SmokeMethod("setTabToolTip", "(int, const QString&)", "$$")]
		public void SetTabToolTip(int index, string tip) {
			((QTabBar) interceptor).SetTabToolTip(index,tip);
		}
		[SmokeMethod("tabToolTip", "(int) const", "$")]
		public string TabToolTip(int index) {
			return ((QTabBar) interceptor).TabToolTip(index);
		}
		[SmokeMethod("setTabWhatsThis", "(int, const QString&)", "$$")]
		public void SetTabWhatsThis(int index, string text) {
			((QTabBar) interceptor).SetTabWhatsThis(index,text);
		}
		[SmokeMethod("tabWhatsThis", "(int) const", "$")]
		public string TabWhatsThis(int index) {
			return ((QTabBar) interceptor).TabWhatsThis(index);
		}
		[SmokeMethod("setTabData", "(int, const QVariant&)", "$#")]
		public void SetTabData(int index, QVariant data) {
			((QTabBar) interceptor).SetTabData(index,data);
		}
		[SmokeMethod("tabData", "(int) const", "$")]
		public QVariant TabData(int index) {
			return ((QTabBar) interceptor).TabData(index);
		}
		[SmokeMethod("tabRect", "(int) const", "$")]
		public QRect TabRect(int index) {
			return ((QTabBar) interceptor).TabRect(index);
		}
		[SmokeMethod("sizeHint", "() const", "")]
		public override QSize SizeHint() {
			return ((QTabBar) interceptor).SizeHint();
		}
		[SmokeMethod("minimumSizeHint", "() const", "")]
		public override QSize MinimumSizeHint() {
			return ((QTabBar) interceptor).MinimumSizeHint();
		}
		[SmokeMethod("tabSizeHint", "(int) const", "$")]
		protected virtual QSize TabSizeHint(int index) {
			return ((QTabBar) interceptor).TabSizeHint(index);
		}
		[SmokeMethod("tabInserted", "(int)", "$")]
		protected virtual void TabInserted(int index) {
			((QTabBar) interceptor).TabInserted(index);
		}
		[SmokeMethod("tabRemoved", "(int)", "$")]
		protected virtual void TabRemoved(int index) {
			((QTabBar) interceptor).TabRemoved(index);
		}
		[SmokeMethod("tabLayoutChange", "()", "")]
		protected virtual void TabLayoutChange() {
			((QTabBar) interceptor).TabLayoutChange();
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		protected override bool Event(QEvent arg1) {
			return ((QTabBar) interceptor).Event(arg1);
		}
		[SmokeMethod("resizeEvent", "(QResizeEvent*)", "#")]
		protected override void ResizeEvent(QResizeEvent arg1) {
			((QTabBar) interceptor).ResizeEvent(arg1);
		}
		[SmokeMethod("showEvent", "(QShowEvent*)", "#")]
		protected override void ShowEvent(QShowEvent arg1) {
			((QTabBar) interceptor).ShowEvent(arg1);
		}
		[SmokeMethod("paintEvent", "(QPaintEvent*)", "#")]
		protected override void PaintEvent(QPaintEvent arg1) {
			((QTabBar) interceptor).PaintEvent(arg1);
		}
		[SmokeMethod("mousePressEvent", "(QMouseEvent*)", "#")]
		protected override void MousePressEvent(QMouseEvent arg1) {
			((QTabBar) interceptor).MousePressEvent(arg1);
		}
		[SmokeMethod("mouseMoveEvent", "(QMouseEvent*)", "#")]
		protected override void MouseMoveEvent(QMouseEvent arg1) {
			((QTabBar) interceptor).MouseMoveEvent(arg1);
		}
		[SmokeMethod("mouseReleaseEvent", "(QMouseEvent*)", "#")]
		protected override void MouseReleaseEvent(QMouseEvent arg1) {
			((QTabBar) interceptor).MouseReleaseEvent(arg1);
		}
		[SmokeMethod("keyPressEvent", "(QKeyEvent*)", "#")]
		protected override void KeyPressEvent(QKeyEvent arg1) {
			((QTabBar) interceptor).KeyPressEvent(arg1);
		}
		[SmokeMethod("changeEvent", "(QEvent*)", "#")]
		protected override void ChangeEvent(QEvent arg1) {
			((QTabBar) interceptor).ChangeEvent(arg1);
		}
		~QTabBar() {
			DisposeQTabBar();
		}
		public new void Dispose() {
			DisposeQTabBar();
		}
		[SmokeMethod("~QTabBar", "()", "")]
		private void DisposeQTabBar() {
			((QTabBar) interceptor).DisposeQTabBar();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQTabBarSignals Emit {
			get { return (IQTabBarSignals) Q_EMIT; }
		}
	}

	public interface IQTabBarSignals : IQWidgetSignals {
		[Q_SIGNAL("void currentChanged(int)")]
		void CurrentChanged(int index);
	}
}
