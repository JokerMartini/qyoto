//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QGraphicsLineItem")]
	public class QGraphicsLineItem : QGraphicsItem, IDisposable {
 		protected QGraphicsLineItem(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QGraphicsLineItem), this);
			interceptor = (QGraphicsLineItem) realProxy.GetTransparentProxy();
		}
		public const int Type = 6;

		public QGraphicsLineItem(QGraphicsItem parent, QGraphicsScene scene) : this((Type) null) {
			CreateProxy();
			NewQGraphicsLineItem(parent,scene);
		}
		[SmokeMethod("QGraphicsLineItem", "(QGraphicsItem*, QGraphicsScene*)", "##")]
		private void NewQGraphicsLineItem(QGraphicsItem parent, QGraphicsScene scene) {
			((QGraphicsLineItem) interceptor).NewQGraphicsLineItem(parent,scene);
		}
		public QGraphicsLineItem(QGraphicsItem parent) : this((Type) null) {
			CreateProxy();
			NewQGraphicsLineItem(parent);
		}
		[SmokeMethod("QGraphicsLineItem", "(QGraphicsItem*)", "#")]
		private void NewQGraphicsLineItem(QGraphicsItem parent) {
			((QGraphicsLineItem) interceptor).NewQGraphicsLineItem(parent);
		}
		public QGraphicsLineItem() : this((Type) null) {
			CreateProxy();
			NewQGraphicsLineItem();
		}
		[SmokeMethod("QGraphicsLineItem", "()", "")]
		private void NewQGraphicsLineItem() {
			((QGraphicsLineItem) interceptor).NewQGraphicsLineItem();
		}
		public QGraphicsLineItem(QLineF line, QGraphicsItem parent, QGraphicsScene scene) : this((Type) null) {
			CreateProxy();
			NewQGraphicsLineItem(line,parent,scene);
		}
		[SmokeMethod("QGraphicsLineItem", "(const QLineF&, QGraphicsItem*, QGraphicsScene*)", "###")]
		private void NewQGraphicsLineItem(QLineF line, QGraphicsItem parent, QGraphicsScene scene) {
			((QGraphicsLineItem) interceptor).NewQGraphicsLineItem(line,parent,scene);
		}
		public QGraphicsLineItem(QLineF line, QGraphicsItem parent) : this((Type) null) {
			CreateProxy();
			NewQGraphicsLineItem(line,parent);
		}
		[SmokeMethod("QGraphicsLineItem", "(const QLineF&, QGraphicsItem*)", "##")]
		private void NewQGraphicsLineItem(QLineF line, QGraphicsItem parent) {
			((QGraphicsLineItem) interceptor).NewQGraphicsLineItem(line,parent);
		}
		public QGraphicsLineItem(QLineF line) : this((Type) null) {
			CreateProxy();
			NewQGraphicsLineItem(line);
		}
		[SmokeMethod("QGraphicsLineItem", "(const QLineF&)", "#")]
		private void NewQGraphicsLineItem(QLineF line) {
			((QGraphicsLineItem) interceptor).NewQGraphicsLineItem(line);
		}
		public QGraphicsLineItem(double x1, double y1, double x2, double y2, QGraphicsItem parent, QGraphicsScene scene) : this((Type) null) {
			CreateProxy();
			NewQGraphicsLineItem(x1,y1,x2,y2,parent,scene);
		}
		[SmokeMethod("QGraphicsLineItem", "(qreal, qreal, qreal, qreal, QGraphicsItem*, QGraphicsScene*)", "$$$$##")]
		private void NewQGraphicsLineItem(double x1, double y1, double x2, double y2, QGraphicsItem parent, QGraphicsScene scene) {
			((QGraphicsLineItem) interceptor).NewQGraphicsLineItem(x1,y1,x2,y2,parent,scene);
		}
		public QGraphicsLineItem(double x1, double y1, double x2, double y2, QGraphicsItem parent) : this((Type) null) {
			CreateProxy();
			NewQGraphicsLineItem(x1,y1,x2,y2,parent);
		}
		[SmokeMethod("QGraphicsLineItem", "(qreal, qreal, qreal, qreal, QGraphicsItem*)", "$$$$#")]
		private void NewQGraphicsLineItem(double x1, double y1, double x2, double y2, QGraphicsItem parent) {
			((QGraphicsLineItem) interceptor).NewQGraphicsLineItem(x1,y1,x2,y2,parent);
		}
		public QGraphicsLineItem(double x1, double y1, double x2, double y2) : this((Type) null) {
			CreateProxy();
			NewQGraphicsLineItem(x1,y1,x2,y2);
		}
		[SmokeMethod("QGraphicsLineItem", "(qreal, qreal, qreal, qreal)", "$$$$")]
		private void NewQGraphicsLineItem(double x1, double y1, double x2, double y2) {
			((QGraphicsLineItem) interceptor).NewQGraphicsLineItem(x1,y1,x2,y2);
		}
		[SmokeMethod("pen", "() const", "")]
		public QPen Pen() {
			return ((QGraphicsLineItem) interceptor).Pen();
		}
		[SmokeMethod("setPen", "(const QPen&)", "#")]
		public void SetPen(QPen pen) {
			((QGraphicsLineItem) interceptor).SetPen(pen);
		}
		[SmokeMethod("line", "() const", "")]
		public QLineF Line() {
			return ((QGraphicsLineItem) interceptor).Line();
		}
		[SmokeMethod("setLine", "(const QLineF&)", "#")]
		public void SetLine(QLineF line) {
			((QGraphicsLineItem) interceptor).SetLine(line);
		}
		[SmokeMethod("setLine", "(qreal, qreal, qreal, qreal)", "$$$$")]
		public void SetLine(double x1, double y1, double x2, double y2) {
			((QGraphicsLineItem) interceptor).SetLine(x1,y1,x2,y2);
		}
		[SmokeMethod("boundingRect", "() const", "")]
		public override QRectF BoundingRect() {
			return ((QGraphicsLineItem) interceptor).BoundingRect();
		}
		[SmokeMethod("shape", "() const", "")]
		public override QPainterPath Shape() {
			return ((QGraphicsLineItem) interceptor).Shape();
		}
		[SmokeMethod("contains", "(const QPointF&) const", "#")]
		public override bool Contains(QPointF point) {
			return ((QGraphicsLineItem) interceptor).Contains(point);
		}
		[SmokeMethod("paint", "(QPainter*, const QStyleOptionGraphicsItem*, QWidget*)", "###")]
		public override void Paint(QPainter painter, QStyleOptionGraphicsItem option, QWidget widget) {
			((QGraphicsLineItem) interceptor).Paint(painter,option,widget);
		}
		[SmokeMethod("paint", "(QPainter*, const QStyleOptionGraphicsItem*)", "##")]
		public virtual void Paint(QPainter painter, QStyleOptionGraphicsItem option) {
			((QGraphicsLineItem) interceptor).Paint(painter,option);
		}
		[SmokeMethod("isObscuredBy", "(const QGraphicsItem*) const", "#")]
		public override bool IsObscuredBy(QGraphicsItem item) {
			return ((QGraphicsLineItem) interceptor).IsObscuredBy(item);
		}
		[SmokeMethod("opaqueArea", "() const", "")]
		public override QPainterPath OpaqueArea() {
			return ((QGraphicsLineItem) interceptor).OpaqueArea();
		}
		[SmokeMethod("type", "() const", "")]
		public override int type() {
			return ((QGraphicsLineItem) interceptor).type();
		}
		[SmokeMethod("supportsExtension", "(QGraphicsItem::Extension) const", "$")]
		protected override bool SupportsExtension(QGraphicsItem.Extension extension) {
			return ((QGraphicsLineItem) interceptor).SupportsExtension(extension);
		}
		[SmokeMethod("setExtension", "(QGraphicsItem::Extension, const QVariant&)", "$#")]
		protected override void SetExtension(QGraphicsItem.Extension extension, QVariant variant) {
			((QGraphicsLineItem) interceptor).SetExtension(extension,variant);
		}
		[SmokeMethod("extension", "(const QVariant&) const", "#")]
		protected override QVariant extension(QVariant variant) {
			return ((QGraphicsLineItem) interceptor).extension(variant);
		}
		~QGraphicsLineItem() {
			DisposeQGraphicsLineItem();
		}
		public void Dispose() {
			DisposeQGraphicsLineItem();
		}
		[SmokeMethod("~QGraphicsLineItem", "()", "")]
		private void DisposeQGraphicsLineItem() {
			((QGraphicsLineItem) interceptor).DisposeQGraphicsLineItem();
		}
	}
}
