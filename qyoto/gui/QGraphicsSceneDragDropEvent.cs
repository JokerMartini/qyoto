//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QGraphicsSceneDragDropEvent")]
	public class QGraphicsSceneDragDropEvent : QGraphicsSceneEvent, IDisposable {
 		protected QGraphicsSceneDragDropEvent(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(QGraphicsSceneDragDropEvent), this);
		}
		public QGraphicsSceneDragDropEvent(QEvent.TypeOf type) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QGraphicsSceneDragDropEvent$", "QGraphicsSceneDragDropEvent(QEvent::Type)", typeof(void), typeof(QEvent.TypeOf), type);
		}
		public QGraphicsSceneDragDropEvent() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QGraphicsSceneDragDropEvent", "QGraphicsSceneDragDropEvent()", typeof(void));
		}
		public QPointF Pos() {
			return (QPointF) interceptor.Invoke("pos", "pos() const", typeof(QPointF));
		}
		public void SetPos(QPointF pos) {
			interceptor.Invoke("setPos#", "setPos(const QPointF&)", typeof(void), typeof(QPointF), pos);
		}
		public QPointF ScenePos() {
			return (QPointF) interceptor.Invoke("scenePos", "scenePos() const", typeof(QPointF));
		}
		public void SetScenePos(QPointF pos) {
			interceptor.Invoke("setScenePos#", "setScenePos(const QPointF&)", typeof(void), typeof(QPointF), pos);
		}
		public QPoint ScreenPos() {
			return (QPoint) interceptor.Invoke("screenPos", "screenPos() const", typeof(QPoint));
		}
		public void SetScreenPos(QPoint pos) {
			interceptor.Invoke("setScreenPos#", "setScreenPos(const QPoint&)", typeof(void), typeof(QPoint), pos);
		}
		public int Buttons() {
			return (int) interceptor.Invoke("buttons", "buttons() const", typeof(int));
		}
		public void SetButtons(int buttons) {
			interceptor.Invoke("setButtons$", "setButtons(Qt::MouseButtons)", typeof(void), typeof(int), buttons);
		}
		public int Modifiers() {
			return (int) interceptor.Invoke("modifiers", "modifiers() const", typeof(int));
		}
		public void SetModifiers(int modifiers) {
			interceptor.Invoke("setModifiers$", "setModifiers(Qt::KeyboardModifiers)", typeof(void), typeof(int), modifiers);
		}
		public int PossibleActions() {
			return (int) interceptor.Invoke("possibleActions", "possibleActions() const", typeof(int));
		}
		public void SetPossibleActions(int actions) {
			interceptor.Invoke("setPossibleActions$", "setPossibleActions(Qt::DropActions)", typeof(void), typeof(int), actions);
		}
		public Qt.DropAction ProposedAction() {
			return (Qt.DropAction) interceptor.Invoke("proposedAction", "proposedAction() const", typeof(Qt.DropAction));
		}
		public void SetProposedAction(Qt.DropAction action) {
			interceptor.Invoke("setProposedAction$", "setProposedAction(Qt::DropAction)", typeof(void), typeof(Qt.DropAction), action);
		}
		public void AcceptProposedAction() {
			interceptor.Invoke("acceptProposedAction", "acceptProposedAction()", typeof(void));
		}
		public Qt.DropAction DropAction() {
			return (Qt.DropAction) interceptor.Invoke("dropAction", "dropAction() const", typeof(Qt.DropAction));
		}
		public void SetDropAction(Qt.DropAction action) {
			interceptor.Invoke("setDropAction$", "setDropAction(Qt::DropAction)", typeof(void), typeof(Qt.DropAction), action);
		}
		public QWidget Source() {
			return (QWidget) interceptor.Invoke("source", "source() const", typeof(QWidget));
		}
		public void SetSource(QWidget source) {
			interceptor.Invoke("setSource#", "setSource(QWidget*)", typeof(void), typeof(QWidget), source);
		}
		public QMimeData MimeData() {
			return (QMimeData) interceptor.Invoke("mimeData", "mimeData() const", typeof(QMimeData));
		}
		public void SetMimeData(QMimeData data) {
			interceptor.Invoke("setMimeData#", "setMimeData(const QMimeData*)", typeof(void), typeof(QMimeData), data);
		}
		~QGraphicsSceneDragDropEvent() {
			interceptor.Invoke("~QGraphicsSceneDragDropEvent", "~QGraphicsSceneDragDropEvent()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~QGraphicsSceneDragDropEvent", "~QGraphicsSceneDragDropEvent()", typeof(void));
		}
	}
}
