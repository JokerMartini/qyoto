//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QBitmap")]
	public class QBitmap : QPixmap, IDisposable {
 		protected QBitmap(Type dummy) : base((Type) null) {}
		[SmokeClass("QBitmap")]
		interface IQBitmapProxy {
			[SmokeMethod("fromImage", "(const QImage&, Qt::ImageConversionFlags)", "#$")]
			QBitmap FromImage(QImage image, int flags);
			[SmokeMethod("fromImage", "(const QImage&)", "#")]
			QBitmap FromImage(QImage image);
			[SmokeMethod("fromData", "(const QSize&, const uchar*, QImage::Format)", "#$$")]
			QBitmap FromData(QSize size, char[] bits, QImage.Format monoFormat);
			[SmokeMethod("fromData", "(const QSize&, const uchar*)", "#$")]
			QBitmap FromData(QSize size, char[] bits);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QBitmap), this);
			interceptor = (QBitmap) realProxy.GetTransparentProxy();
		}
		private static IQBitmapProxy staticInterceptor = null;
		static QBitmap() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQBitmapProxy), null);
			staticInterceptor = (IQBitmapProxy) realProxy.GetTransparentProxy();
		}
		//  operator QVariant(); >>>> NOT CONVERTED
		public QBitmap() : this((Type) null) {
			CreateProxy();
			NewQBitmap();
		}
		[SmokeMethod("QBitmap", "()", "")]
		private void NewQBitmap() {
			((QBitmap) interceptor).NewQBitmap();
		}
		public QBitmap(QPixmap arg1) : this((Type) null) {
			CreateProxy();
			NewQBitmap(arg1);
		}
		[SmokeMethod("QBitmap", "(const QPixmap&)", "#")]
		private void NewQBitmap(QPixmap arg1) {
			((QBitmap) interceptor).NewQBitmap(arg1);
		}
		public QBitmap(int w, int h) : this((Type) null) {
			CreateProxy();
			NewQBitmap(w,h);
		}
		[SmokeMethod("QBitmap", "(int, int)", "$$")]
		private void NewQBitmap(int w, int h) {
			((QBitmap) interceptor).NewQBitmap(w,h);
		}
		public QBitmap(QSize arg1) : this((Type) null) {
			CreateProxy();
			NewQBitmap(arg1);
		}
		[SmokeMethod("QBitmap", "(const QSize&)", "#")]
		private void NewQBitmap(QSize arg1) {
			((QBitmap) interceptor).NewQBitmap(arg1);
		}
		public QBitmap(string fileName, string format) : this((Type) null) {
			CreateProxy();
			NewQBitmap(fileName,format);
		}
		[SmokeMethod("QBitmap", "(const QString&, const char*)", "$$")]
		private void NewQBitmap(string fileName, string format) {
			((QBitmap) interceptor).NewQBitmap(fileName,format);
		}
		public QBitmap(string fileName) : this((Type) null) {
			CreateProxy();
			NewQBitmap(fileName);
		}
		[SmokeMethod("QBitmap", "(const QString&)", "$")]
		private void NewQBitmap(string fileName) {
			((QBitmap) interceptor).NewQBitmap(fileName);
		}
		[SmokeMethod("clear", "()", "")]
		public void Clear() {
			((QBitmap) interceptor).Clear();
		}
		[SmokeMethod("transformed", "(const QMatrix&) const", "#")]
		public QBitmap Transformed(QMatrix arg1) {
			return ((QBitmap) interceptor).Transformed(arg1);
		}
		~QBitmap() {
			DisposeQBitmap();
		}
		public void Dispose() {
			DisposeQBitmap();
		}
		[SmokeMethod("~QBitmap", "()", "")]
		private void DisposeQBitmap() {
			((QBitmap) interceptor).DisposeQBitmap();
		}
		public static QBitmap FromImage(QImage image, int flags) {
			return staticInterceptor.FromImage(image,flags);
		}
		public static QBitmap FromImage(QImage image) {
			return staticInterceptor.FromImage(image);
		}
		public static QBitmap FromData(QSize size, char[] bits, QImage.Format monoFormat) {
			return staticInterceptor.FromData(size,bits,monoFormat);
		}
		public static QBitmap FromData(QSize size, char[] bits) {
			return staticInterceptor.FromData(size,bits);
		}
	}
}
