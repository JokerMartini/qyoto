//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	[SmokeClass("QPainterPathStroker")]
	public class QPainterPathStroker : MarshalByRefObject, IDisposable {
		protected QPainterPathStroker interceptor = null;
		private IntPtr smokeObject;
		protected QPainterPathStroker(Type dummy) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QPainterPathStroker), this);
			interceptor = (QPainterPathStroker) realProxy.GetTransparentProxy();
		}
		public QPainterPathStroker() : this((Type) null) {
			CreateProxy();
			NewQPainterPathStroker();
		}
		[SmokeMethod("QPainterPathStroker", "()", "")]
		private void NewQPainterPathStroker() {
			((QPainterPathStroker) interceptor).NewQPainterPathStroker();
		}
		[SmokeMethod("setWidth", "(qreal)", "$")]
		public void SetWidth(double width) {
			((QPainterPathStroker) interceptor).SetWidth(width);
		}
		[SmokeMethod("width", "() const", "")]
		public double Width() {
			return ((QPainterPathStroker) interceptor).Width();
		}
		[SmokeMethod("setCapStyle", "(Qt::PenCapStyle)", "$")]
		public void SetCapStyle(Qt.PenCapStyle style) {
			((QPainterPathStroker) interceptor).SetCapStyle(style);
		}
		[SmokeMethod("capStyle", "() const", "")]
		public Qt.PenCapStyle CapStyle() {
			return ((QPainterPathStroker) interceptor).CapStyle();
		}
		[SmokeMethod("setJoinStyle", "(Qt::PenJoinStyle)", "$")]
		public void SetJoinStyle(Qt.PenJoinStyle style) {
			((QPainterPathStroker) interceptor).SetJoinStyle(style);
		}
		[SmokeMethod("joinStyle", "() const", "")]
		public Qt.PenJoinStyle JoinStyle() {
			return ((QPainterPathStroker) interceptor).JoinStyle();
		}
		[SmokeMethod("setMiterLimit", "(qreal)", "$")]
		public void SetMiterLimit(double length) {
			((QPainterPathStroker) interceptor).SetMiterLimit(length);
		}
		[SmokeMethod("miterLimit", "() const", "")]
		public double MiterLimit() {
			return ((QPainterPathStroker) interceptor).MiterLimit();
		}
		[SmokeMethod("setCurveThreshold", "(qreal)", "$")]
		public void SetCurveThreshold(double threshold) {
			((QPainterPathStroker) interceptor).SetCurveThreshold(threshold);
		}
		[SmokeMethod("curveThreshold", "() const", "")]
		public double CurveThreshold() {
			return ((QPainterPathStroker) interceptor).CurveThreshold();
		}
		[SmokeMethod("setDashPattern", "(Qt::PenStyle)", "$")]
		public void SetDashPattern(Qt.PenStyle arg1) {
			((QPainterPathStroker) interceptor).SetDashPattern(arg1);
		}
		[SmokeMethod("setDashPattern", "(const QVector<qreal>&)", "?")]
		public void SetDashPattern(List<double> dashPattern) {
			((QPainterPathStroker) interceptor).SetDashPattern(dashPattern);
		}
		[SmokeMethod("dashPattern", "() const", "")]
		public List<double> DashPattern() {
			return ((QPainterPathStroker) interceptor).DashPattern();
		}
		[SmokeMethod("createStroke", "(const QPainterPath&) const", "#")]
		public QPainterPath CreateStroke(QPainterPath path) {
			return ((QPainterPathStroker) interceptor).CreateStroke(path);
		}
		~QPainterPathStroker() {
			DisposeQPainterPathStroker();
		}
		public void Dispose() {
			DisposeQPainterPathStroker();
		}
		[SmokeMethod("~QPainterPathStroker", "()", "")]
		private void DisposeQPainterPathStroker() {
			((QPainterPathStroker) interceptor).DisposeQPainterPathStroker();
		}
	}
}
