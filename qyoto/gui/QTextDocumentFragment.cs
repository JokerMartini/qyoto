//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QTextDocumentFragment")]
	public class QTextDocumentFragment : MarshalByRefObject, IDisposable {
		protected QTextDocumentFragment interceptor = null;
		private IntPtr smokeObject;
		protected QTextDocumentFragment(Type dummy) {}
		[SmokeClass("QTextDocumentFragment")]
		interface IQTextDocumentFragmentProxy {
			[SmokeMethod("fromPlainText", "(const QString&)", "$")]
			QTextDocumentFragment FromPlainText(string plainText);
			[SmokeMethod("fromHtml", "(const QString&)", "$")]
			QTextDocumentFragment FromHtml(string html);
			[SmokeMethod("fromHtml", "(const QString&, const QTextDocument*)", "$#")]
			QTextDocumentFragment FromHtml(string html, QTextDocument resourceProvider);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTextDocumentFragment), this);
			interceptor = (QTextDocumentFragment) realProxy.GetTransparentProxy();
		}
		private static IQTextDocumentFragmentProxy staticInterceptor = null;
		static QTextDocumentFragment() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQTextDocumentFragmentProxy), null);
			staticInterceptor = (IQTextDocumentFragmentProxy) realProxy.GetTransparentProxy();
		}
		public QTextDocumentFragment() : this((Type) null) {
			CreateProxy();
			NewQTextDocumentFragment();
		}
		[SmokeMethod("QTextDocumentFragment", "()", "")]
		private void NewQTextDocumentFragment() {
			((QTextDocumentFragment) interceptor).NewQTextDocumentFragment();
		}
		public QTextDocumentFragment(QTextDocument document) : this((Type) null) {
			CreateProxy();
			NewQTextDocumentFragment(document);
		}
		[SmokeMethod("QTextDocumentFragment", "(const QTextDocument*)", "#")]
		private void NewQTextDocumentFragment(QTextDocument document) {
			((QTextDocumentFragment) interceptor).NewQTextDocumentFragment(document);
		}
		public QTextDocumentFragment(QTextCursor range) : this((Type) null) {
			CreateProxy();
			NewQTextDocumentFragment(range);
		}
		[SmokeMethod("QTextDocumentFragment", "(const QTextCursor&)", "#")]
		private void NewQTextDocumentFragment(QTextCursor range) {
			((QTextDocumentFragment) interceptor).NewQTextDocumentFragment(range);
		}
		public QTextDocumentFragment(QTextDocumentFragment rhs) : this((Type) null) {
			CreateProxy();
			NewQTextDocumentFragment(rhs);
		}
		[SmokeMethod("QTextDocumentFragment", "(const QTextDocumentFragment&)", "#")]
		private void NewQTextDocumentFragment(QTextDocumentFragment rhs) {
			((QTextDocumentFragment) interceptor).NewQTextDocumentFragment(rhs);
		}
		[SmokeMethod("isEmpty", "() const", "")]
		public bool IsEmpty() {
			return ((QTextDocumentFragment) interceptor).IsEmpty();
		}
		[SmokeMethod("toPlainText", "() const", "")]
		public string ToPlainText() {
			return ((QTextDocumentFragment) interceptor).ToPlainText();
		}
		[SmokeMethod("toHtml", "() const", "")]
		public string ToHtml() {
			return ((QTextDocumentFragment) interceptor).ToHtml();
		}
		[SmokeMethod("toHtml", "(const QByteArray&) const", "#")]
		public string ToHtml(QByteArray encoding) {
			return ((QTextDocumentFragment) interceptor).ToHtml(encoding);
		}
		~QTextDocumentFragment() {
			DisposeQTextDocumentFragment();
		}
		public void Dispose() {
			DisposeQTextDocumentFragment();
		}
		[SmokeMethod("~QTextDocumentFragment", "()", "")]
		private void DisposeQTextDocumentFragment() {
			((QTextDocumentFragment) interceptor).DisposeQTextDocumentFragment();
		}
		public static QTextDocumentFragment FromPlainText(string plainText) {
			return staticInterceptor.FromPlainText(plainText);
		}
		public static QTextDocumentFragment FromHtml(string html) {
			return staticInterceptor.FromHtml(html);
		}
		public static QTextDocumentFragment FromHtml(string html, QTextDocument resourceProvider) {
			return staticInterceptor.FromHtml(html,resourceProvider);
		}
	}
}
