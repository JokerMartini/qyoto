//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;

	[SmokeClass("QTextDocumentFragment")]
	public class QTextDocumentFragment : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
		protected QTextDocumentFragment(Type dummy) {}
		interface IQTextDocumentFragmentProxy {
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTextDocumentFragment), this);
			_interceptor = (QTextDocumentFragment) realProxy.GetTransparentProxy();
		}
		private QTextDocumentFragment ProxyQTextDocumentFragment() {
			return (QTextDocumentFragment) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QTextDocumentFragment() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQTextDocumentFragmentProxy), null);
			_staticInterceptor = (IQTextDocumentFragmentProxy) realProxy.GetTransparentProxy();
		}
		private static IQTextDocumentFragmentProxy StaticQTextDocumentFragment() {
			return (IQTextDocumentFragmentProxy) _staticInterceptor;
		}

		// QTextDocumentFragment* QTextDocumentFragment(); >>>> NOT CONVERTED
		// QTextDocumentFragment* QTextDocumentFragment(const QTextDocument* arg1); >>>> NOT CONVERTED
		// QTextDocumentFragment* QTextDocumentFragment(const QTextCursor& arg1); >>>> NOT CONVERTED
		// QTextDocumentFragment* QTextDocumentFragment(const QTextDocumentFragment& arg1); >>>> NOT CONVERTED
		[SmokeMethod("isEmpty", "() const")]
		public bool IsEmpty() {
			return ProxyQTextDocumentFragment().IsEmpty();
		}
		[SmokeMethod("toPlainText", "() const")]
		public string ToPlainText() {
			return ProxyQTextDocumentFragment().ToPlainText();
		}
		[SmokeMethod("toHtml", "() const")]
		public string ToHtml() {
			return ProxyQTextDocumentFragment().ToHtml();
		}
		[SmokeMethod("toHtml#", "(const QByteArray&) const")]
		public string ToHtml(QByteArray encoding) {
			return ProxyQTextDocumentFragment().ToHtml(encoding);
		}
		// QTextDocumentFragment fromPlainText(const QString& arg1); >>>> NOT CONVERTED
		// QTextDocumentFragment fromHtml(const QString& arg1); >>>> NOT CONVERTED
		// QTextDocumentFragment fromHtml(const QString& arg1,const QTextDocument* arg2); >>>> NOT CONVERTED
		~QTextDocumentFragment() {
			DisposeQTextDocumentFragment();
		}
		public void Dispose() {
			DisposeQTextDocumentFragment();
		}
		[SmokeMethod("~QTextDocumentFragment", "()")]
		private void DisposeQTextDocumentFragment() {
			ProxyQTextDocumentFragment().DisposeQTextDocumentFragment();
		}
	}
}
