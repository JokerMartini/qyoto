//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QFileOpenEvent")]
	public class QFileOpenEvent : QEvent, IDisposable {
 		protected QFileOpenEvent(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QFileOpenEvent), this);
			interceptor = (QFileOpenEvent) realProxy.GetTransparentProxy();
		}
		public QFileOpenEvent(string file) : this((Type) null) {
			CreateProxy();
			NewQFileOpenEvent(file);
		}
		[SmokeMethod("QFileOpenEvent", "(const QString&)", "$")]
		private void NewQFileOpenEvent(string file) {
			((QFileOpenEvent) interceptor).NewQFileOpenEvent(file);
		}
		[SmokeMethod("file", "() const", "")]
		public string File() {
			return ((QFileOpenEvent) interceptor).File();
		}
		~QFileOpenEvent() {
			DisposeQFileOpenEvent();
		}
		public new void Dispose() {
			DisposeQFileOpenEvent();
		}
		[SmokeMethod("~QFileOpenEvent", "()", "")]
		private void DisposeQFileOpenEvent() {
			((QFileOpenEvent) interceptor).DisposeQFileOpenEvent();
		}
	}
}
