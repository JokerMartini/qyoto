//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	/// See <see cref="IQWorkspaceSignals"></see> for signals emitted by QWorkspace
	[SmokeClass("QWorkspace")]
	public class QWorkspace : QWidget, IDisposable {
 		protected QWorkspace(Type dummy) : base((Type) null) {}
		[SmokeClass("QWorkspace")]
		interface IQWorkspaceProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QWorkspace), this);
			interceptor = (QWorkspace) realProxy.GetTransparentProxy();
		}
		private static IQWorkspaceProxy staticInterceptor = null;
		static QWorkspace() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQWorkspaceProxy), null);
			staticInterceptor = (IQWorkspaceProxy) realProxy.GetTransparentProxy();
		}
		public enum WindowOrder {
			CreationOrder = 0,
			StackingOrder = 1,
		}
		[Q_PROPERTY("bool", "scrollBarsEnabled")]
		public bool ScrollBarsEnabled {
			[SmokeMethod("scrollBarsEnabled", "()", "")]
			get { return ((QWorkspace) interceptor).ScrollBarsEnabled; }
			[SmokeMethod("setScrollBarsEnabled", "(bool)", "$")]
			set { ((QWorkspace) interceptor).ScrollBarsEnabled = value; }
		}
		[Q_PROPERTY("QBrush", "background")]
		public QBrush Background {
			[SmokeMethod("background", "()", "")]
			get { return ((QWorkspace) interceptor).Background; }
			[SmokeMethod("setBackground", "(QBrush)", "#")]
			set { ((QWorkspace) interceptor).Background = value; }
		}
		public QWorkspace(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQWorkspace(parent);
		}
		[SmokeMethod("QWorkspace", "(QWidget*)", "#")]
		private void NewQWorkspace(QWidget parent) {
			((QWorkspace) interceptor).NewQWorkspace(parent);
		}
		public QWorkspace() : this((Type) null) {
			CreateProxy();
			NewQWorkspace();
		}
		[SmokeMethod("QWorkspace", "()", "")]
		private void NewQWorkspace() {
			((QWorkspace) interceptor).NewQWorkspace();
		}
		[SmokeMethod("activeWindow", "() const", "")]
		public QWidget ActiveWindow() {
			return ((QWorkspace) interceptor).ActiveWindow();
		}
		[SmokeMethod("windowList", "(QWorkspace::WindowOrder) const", "$")]
		public List<QWidget> WindowList(QWorkspace.WindowOrder order) {
			return ((QWorkspace) interceptor).WindowList(order);
		}
		[SmokeMethod("windowList", "() const", "")]
		public List<QWidget> WindowList() {
			return ((QWorkspace) interceptor).WindowList();
		}
		[SmokeMethod("addWindow", "(QWidget*, Qt::WindowFlags)", "#$")]
		public QWidget AddWindow(QWidget w, int flags) {
			return ((QWorkspace) interceptor).AddWindow(w,flags);
		}
		[SmokeMethod("addWindow", "(QWidget*)", "#")]
		public QWidget AddWindow(QWidget w) {
			return ((QWorkspace) interceptor).AddWindow(w);
		}
		[SmokeMethod("sizeHint", "() const", "")]
		public override QSize SizeHint() {
			return ((QWorkspace) interceptor).SizeHint();
		}
		[Q_SLOT("void setActiveWindow(QWidget*)")]
		[SmokeMethod("setActiveWindow", "(QWidget*)", "#")]
		public void SetActiveWindow(QWidget w) {
			((QWorkspace) interceptor).SetActiveWindow(w);
		}
		[Q_SLOT("void cascade()")]
		[SmokeMethod("cascade", "()", "")]
		public void Cascade() {
			((QWorkspace) interceptor).Cascade();
		}
		[Q_SLOT("void tile()")]
		[SmokeMethod("tile", "()", "")]
		public void Tile() {
			((QWorkspace) interceptor).Tile();
		}
		[Q_SLOT("void arrangeIcons()")]
		[SmokeMethod("arrangeIcons", "()", "")]
		public void ArrangeIcons() {
			((QWorkspace) interceptor).ArrangeIcons();
		}
		[Q_SLOT("void closeActiveWindow()")]
		[SmokeMethod("closeActiveWindow", "()", "")]
		public void CloseActiveWindow() {
			((QWorkspace) interceptor).CloseActiveWindow();
		}
		[Q_SLOT("void closeAllWindows()")]
		[SmokeMethod("closeAllWindows", "()", "")]
		public void CloseAllWindows() {
			((QWorkspace) interceptor).CloseAllWindows();
		}
		[Q_SLOT("void activateNextWindow()")]
		[SmokeMethod("activateNextWindow", "()", "")]
		public void ActivateNextWindow() {
			((QWorkspace) interceptor).ActivateNextWindow();
		}
		[Q_SLOT("void activatePreviousWindow()")]
		[SmokeMethod("activatePreviousWindow", "()", "")]
		public void ActivatePreviousWindow() {
			((QWorkspace) interceptor).ActivatePreviousWindow();
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		protected override bool Event(QEvent e) {
			return ((QWorkspace) interceptor).Event(e);
		}
		[SmokeMethod("paintEvent", "(QPaintEvent*)", "#")]
		protected override void PaintEvent(QPaintEvent e) {
			((QWorkspace) interceptor).PaintEvent(e);
		}
		[SmokeMethod("changeEvent", "(QEvent*)", "#")]
		protected override void ChangeEvent(QEvent arg1) {
			((QWorkspace) interceptor).ChangeEvent(arg1);
		}
		[SmokeMethod("childEvent", "(QChildEvent*)", "#")]
		protected override void ChildEvent(QChildEvent arg1) {
			((QWorkspace) interceptor).ChildEvent(arg1);
		}
		[SmokeMethod("resizeEvent", "(QResizeEvent*)", "#")]
		protected override void ResizeEvent(QResizeEvent arg1) {
			((QWorkspace) interceptor).ResizeEvent(arg1);
		}
		[SmokeMethod("eventFilter", "(QObject*, QEvent*)", "##")]
		protected new virtual bool EventFilter(QObject arg1, QEvent arg2) {
			return ((QWorkspace) interceptor).EventFilter(arg1,arg2);
		}
		[SmokeMethod("showEvent", "(QShowEvent*)", "#")]
		protected override void ShowEvent(QShowEvent e) {
			((QWorkspace) interceptor).ShowEvent(e);
		}
		[SmokeMethod("hideEvent", "(QHideEvent*)", "#")]
		protected override void HideEvent(QHideEvent e) {
			((QWorkspace) interceptor).HideEvent(e);
		}
		[SmokeMethod("wheelEvent", "(QWheelEvent*)", "#")]
		protected override void WheelEvent(QWheelEvent e) {
			((QWorkspace) interceptor).WheelEvent(e);
		}
		~QWorkspace() {
			DisposeQWorkspace();
		}
		public new void Dispose() {
			DisposeQWorkspace();
		}
		[SmokeMethod("~QWorkspace", "()", "")]
		private void DisposeQWorkspace() {
			((QWorkspace) interceptor).DisposeQWorkspace();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQWorkspaceSignals Emit {
			get { return (IQWorkspaceSignals) Q_EMIT; }
		}
	}

	public interface IQWorkspaceSignals : IQWidgetSignals {
		[Q_SIGNAL("void windowActivated(QWidget*)")]
		void WindowActivated(QWidget w);
	}
}
