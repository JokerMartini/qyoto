//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QStyleOptionToolBar")]
	public class QStyleOptionToolBar : QStyleOption, IDisposable {
 		protected QStyleOptionToolBar(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(QStyleOptionToolBar), this);
		}
		public enum StyleOptionType {
			Type = QStyleOption.OptionType.SO_ToolBar,
		}
		public enum StyleOptionVersion {
			Version = 1,
		}
		public enum ToolBarPosition {
			Beginning = 0,
			Middle = 1,
			End = 2,
			OnlyOne = 3,
		}
		public enum ToolBarFeature {
			None = 0x0,
			Movable = 0x1,
		}
		public QStyleOptionToolBar() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QStyleOptionToolBar", "QStyleOptionToolBar()", typeof(void));
		}
		public QStyleOptionToolBar(QStyleOptionToolBar other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QStyleOptionToolBar#", "QStyleOptionToolBar(const QStyleOptionToolBar&)", typeof(void), typeof(QStyleOptionToolBar), other);
		}
		public QStyleOptionToolBar(int version) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QStyleOptionToolBar$", "QStyleOptionToolBar(int)", typeof(void), typeof(int), version);
		}
		~QStyleOptionToolBar() {
			interceptor.Invoke("~QStyleOptionToolBar", "~QStyleOptionToolBar()", typeof(void));
		}
		public void Dispose() {
			interceptor.Invoke("~QStyleOptionToolBar", "~QStyleOptionToolBar()", typeof(void));
		}
	}
}
