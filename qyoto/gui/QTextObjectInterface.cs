//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QTextObjectInterface")]
	public abstract class QTextObjectInterface : MarshalByRefObject {
		protected Object _interceptor = null;
		private IntPtr _smokeObject;
		protected QTextObjectInterface(Type dummy) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTextObjectInterface), this);
			_interceptor = (QTextObjectInterface) realProxy.GetTransparentProxy();
		}
		private QTextObjectInterface ProxyQTextObjectInterface() {
			return (QTextObjectInterface) _interceptor;
		}
		[SmokeMethod("intrinsicSize", "(QTextDocument*, int, const QTextFormat&)", "#$#")]
		public abstract QSizeF IntrinsicSize(QTextDocument doc, int posInDocument, QTextFormat format);
		[SmokeMethod("drawObject", "(QPainter*, const QRectF&, QTextDocument*, int, const QTextFormat&)", "###$#")]
		public abstract void DrawObject(QPainter painter, QRectF rect, QTextDocument doc, int posInDocument, QTextFormat format);
		public QTextObjectInterface() : this((Type) null) {
			CreateProxy();
			NewQTextObjectInterface();
		}
		[SmokeMethod("QTextObjectInterface", "()", "")]
		private void NewQTextObjectInterface() {
			ProxyQTextObjectInterface().NewQTextObjectInterface();
		}
	}
}
