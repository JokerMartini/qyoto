//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QTextBlockFormat")]
	public class QTextBlockFormat : QTextFormat, IDisposable {
 		protected QTextBlockFormat(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTextBlockFormat), this);
			interceptor = (QTextBlockFormat) realProxy.GetTransparentProxy();
		}
		public QTextBlockFormat() : this((Type) null) {
			CreateProxy();
			NewQTextBlockFormat();
		}
		[SmokeMethod("QTextBlockFormat", "()", "")]
		private void NewQTextBlockFormat() {
			((QTextBlockFormat) interceptor).NewQTextBlockFormat();
		}
		[SmokeMethod("isValid", "() const", "")]
		public bool IsValid() {
			return ((QTextBlockFormat) interceptor).IsValid();
		}
		[SmokeMethod("setAlignment", "(Qt::Alignment)", "$")]
		public void SetAlignment(int alignment) {
			((QTextBlockFormat) interceptor).SetAlignment(alignment);
		}
		[SmokeMethod("alignment", "() const", "")]
		public int Alignment() {
			return ((QTextBlockFormat) interceptor).Alignment();
		}
		[SmokeMethod("setTopMargin", "(qreal)", "$")]
		public void SetTopMargin(double margin) {
			((QTextBlockFormat) interceptor).SetTopMargin(margin);
		}
		[SmokeMethod("topMargin", "() const", "")]
		public double TopMargin() {
			return ((QTextBlockFormat) interceptor).TopMargin();
		}
		[SmokeMethod("setBottomMargin", "(qreal)", "$")]
		public void SetBottomMargin(double margin) {
			((QTextBlockFormat) interceptor).SetBottomMargin(margin);
		}
		[SmokeMethod("bottomMargin", "() const", "")]
		public double BottomMargin() {
			return ((QTextBlockFormat) interceptor).BottomMargin();
		}
		[SmokeMethod("setLeftMargin", "(qreal)", "$")]
		public void SetLeftMargin(double margin) {
			((QTextBlockFormat) interceptor).SetLeftMargin(margin);
		}
		[SmokeMethod("leftMargin", "() const", "")]
		public double LeftMargin() {
			return ((QTextBlockFormat) interceptor).LeftMargin();
		}
		[SmokeMethod("setRightMargin", "(qreal)", "$")]
		public void SetRightMargin(double margin) {
			((QTextBlockFormat) interceptor).SetRightMargin(margin);
		}
		[SmokeMethod("rightMargin", "() const", "")]
		public double RightMargin() {
			return ((QTextBlockFormat) interceptor).RightMargin();
		}
		[SmokeMethod("setTextIndent", "(qreal)", "$")]
		public void SetTextIndent(double margin) {
			((QTextBlockFormat) interceptor).SetTextIndent(margin);
		}
		[SmokeMethod("textIndent", "() const", "")]
		public double TextIndent() {
			return ((QTextBlockFormat) interceptor).TextIndent();
		}
		[SmokeMethod("setIndent", "(int)", "$")]
		public void SetIndent(int indent) {
			((QTextBlockFormat) interceptor).SetIndent(indent);
		}
		[SmokeMethod("indent", "() const", "")]
		public int Indent() {
			return ((QTextBlockFormat) interceptor).Indent();
		}
		[SmokeMethod("setNonBreakableLines", "(bool)", "$")]
		public void SetNonBreakableLines(bool b) {
			((QTextBlockFormat) interceptor).SetNonBreakableLines(b);
		}
		[SmokeMethod("nonBreakableLines", "() const", "")]
		public bool NonBreakableLines() {
			return ((QTextBlockFormat) interceptor).NonBreakableLines();
		}
		[SmokeMethod("setPageBreakPolicy", "(PageBreakFlags)", "$")]
		public void SetPageBreakPolicy(int flags) {
			((QTextBlockFormat) interceptor).SetPageBreakPolicy(flags);
		}
		[SmokeMethod("pageBreakPolicy", "() const", "")]
		public int PageBreakPolicy() {
			return ((QTextBlockFormat) interceptor).PageBreakPolicy();
		}
		~QTextBlockFormat() {
			DisposeQTextBlockFormat();
		}
		public void Dispose() {
			DisposeQTextBlockFormat();
		}
		[SmokeMethod("~QTextBlockFormat", "()", "")]
		private void DisposeQTextBlockFormat() {
			((QTextBlockFormat) interceptor).DisposeQTextBlockFormat();
		}
	}
}
