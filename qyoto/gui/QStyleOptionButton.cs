//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QStyleOptionButton")]
	public class QStyleOptionButton : QStyleOption, IDisposable {
 		protected QStyleOptionButton(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QStyleOptionButton), this);
			interceptor = (QStyleOptionButton) realProxy.GetTransparentProxy();
		}
		public enum StyleOptionType {
			Type = QStyleOption.OptionType.SO_Button,
		}
		public enum StyleOptionVersion {
			Version = 1,
		}
		public enum ButtonFeature {
			None = 0x00,
			Flat = 0x01,
			HasMenu = 0x02,
			DefaultButton = 0x04,
			AutoDefaultButton = 0x08,
		}
		public QStyleOptionButton() : this((Type) null) {
			CreateProxy();
			NewQStyleOptionButton();
		}
		[SmokeMethod("QStyleOptionButton", "()", "")]
		private void NewQStyleOptionButton() {
			((QStyleOptionButton) interceptor).NewQStyleOptionButton();
		}
		public QStyleOptionButton(QStyleOptionButton other) : this((Type) null) {
			CreateProxy();
			NewQStyleOptionButton(other);
		}
		[SmokeMethod("QStyleOptionButton", "(const QStyleOptionButton&)", "#")]
		private void NewQStyleOptionButton(QStyleOptionButton other) {
			((QStyleOptionButton) interceptor).NewQStyleOptionButton(other);
		}
		public QStyleOptionButton(int version) : this((Type) null) {
			CreateProxy();
			NewQStyleOptionButton(version);
		}
		[SmokeMethod("QStyleOptionButton", "(int)", "$")]
		private void NewQStyleOptionButton(int version) {
			((QStyleOptionButton) interceptor).NewQStyleOptionButton(version);
		}
		~QStyleOptionButton() {
			DisposeQStyleOptionButton();
		}
		public void Dispose() {
			DisposeQStyleOptionButton();
		}
		[SmokeMethod("~QStyleOptionButton", "()", "")]
		private void DisposeQStyleOptionButton() {
			((QStyleOptionButton) interceptor).DisposeQStyleOptionButton();
		}
	}
}
