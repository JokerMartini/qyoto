//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	/// See <see cref="IQSystemTrayIconSignals"></see> for signals emitted by QSystemTrayIcon
	[SmokeClass("QSystemTrayIcon")]
	public class QSystemTrayIcon : QObject, IDisposable {
 		protected QSystemTrayIcon(Type dummy) : base((Type) null) {}
		[SmokeClass("QSystemTrayIcon")]
		interface IQSystemTrayIconProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
			[SmokeMethod("isSystemTrayAvailable", "()", "")]
			bool IsSystemTrayAvailable();
			[SmokeMethod("supportsMessages", "()", "")]
			bool SupportsMessages();
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSystemTrayIcon), this);
			interceptor = (QSystemTrayIcon) realProxy.GetTransparentProxy();
		}
		private static IQSystemTrayIconProxy staticInterceptor = null;
		static QSystemTrayIcon() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSystemTrayIconProxy), null);
			staticInterceptor = (IQSystemTrayIconProxy) realProxy.GetTransparentProxy();
		}
		public enum ActivationReason {
			Unknown = 0,
			Context = 1,
			DoubleClick = 2,
			Trigger = 3,
			MiddleClick = 4,
		}
		public enum MessageIcon {
			NoIcon = 0,
			Information = 1,
			Warning = 2,
			Critical = 3,
		}
		[Q_PROPERTY("QString", "toolTip")]
		public string ToolTip {
			[SmokeMethod("toolTip", "()", "")]
			get { return ((QSystemTrayIcon) interceptor).ToolTip; }
			[SmokeMethod("setToolTip", "(QString)", "$")]
			set { ((QSystemTrayIcon) interceptor).ToolTip = value; }
		}
		[Q_PROPERTY("QIcon", "icon")]
		public QIcon Icon {
			[SmokeMethod("icon", "()", "")]
			get { return ((QSystemTrayIcon) interceptor).Icon; }
			[SmokeMethod("setIcon", "(QIcon)", "#")]
			set { ((QSystemTrayIcon) interceptor).Icon = value; }
		}
		[Q_PROPERTY("bool", "visible")]
		public bool Visible {
			[SmokeMethod("isVisible", "()", "")]
			get { return ((QSystemTrayIcon) interceptor).Visible; }
			[SmokeMethod("setVisible", "(bool)", "$")]
			set { ((QSystemTrayIcon) interceptor).Visible = value; }
		}
		public QSystemTrayIcon(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQSystemTrayIcon(parent);
		}
		[SmokeMethod("QSystemTrayIcon", "(QObject*)", "#")]
		private void NewQSystemTrayIcon(QObject parent) {
			((QSystemTrayIcon) interceptor).NewQSystemTrayIcon(parent);
		}
		public QSystemTrayIcon() : this((Type) null) {
			CreateProxy();
			NewQSystemTrayIcon();
		}
		[SmokeMethod("QSystemTrayIcon", "()", "")]
		private void NewQSystemTrayIcon() {
			((QSystemTrayIcon) interceptor).NewQSystemTrayIcon();
		}
		public QSystemTrayIcon(QIcon icon, QObject parent) : this((Type) null) {
			CreateProxy();
			NewQSystemTrayIcon(icon,parent);
		}
		[SmokeMethod("QSystemTrayIcon", "(const QIcon&, QObject*)", "##")]
		private void NewQSystemTrayIcon(QIcon icon, QObject parent) {
			((QSystemTrayIcon) interceptor).NewQSystemTrayIcon(icon,parent);
		}
		public QSystemTrayIcon(QIcon icon) : this((Type) null) {
			CreateProxy();
			NewQSystemTrayIcon(icon);
		}
		[SmokeMethod("QSystemTrayIcon", "(const QIcon&)", "#")]
		private void NewQSystemTrayIcon(QIcon icon) {
			((QSystemTrayIcon) interceptor).NewQSystemTrayIcon(icon);
		}
		[SmokeMethod("setContextMenu", "(QMenu*)", "#")]
		public void SetContextMenu(QMenu menu) {
			((QSystemTrayIcon) interceptor).SetContextMenu(menu);
		}
		[SmokeMethod("contextMenu", "() const", "")]
		public QMenu ContextMenu() {
			return ((QSystemTrayIcon) interceptor).ContextMenu();
		}
		[SmokeMethod("showMessage", "(const QString&, const QString&, QSystemTrayIcon::MessageIcon, int)", "$$$$")]
		public void ShowMessage(string title, string msg, QSystemTrayIcon.MessageIcon icon, int msecs) {
			((QSystemTrayIcon) interceptor).ShowMessage(title,msg,icon,msecs);
		}
		[SmokeMethod("showMessage", "(const QString&, const QString&, QSystemTrayIcon::MessageIcon)", "$$$")]
		public void ShowMessage(string title, string msg, QSystemTrayIcon.MessageIcon icon) {
			((QSystemTrayIcon) interceptor).ShowMessage(title,msg,icon);
		}
		[SmokeMethod("showMessage", "(const QString&, const QString&)", "$$")]
		public void ShowMessage(string title, string msg) {
			((QSystemTrayIcon) interceptor).ShowMessage(title,msg);
		}
		[SmokeMethod("isVisible", "() const", "")]
		public bool IsVisible() {
			return ((QSystemTrayIcon) interceptor).IsVisible();
		}
		[Q_SLOT("void show()")]
		[SmokeMethod("show", "()", "")]
		public void Show() {
			((QSystemTrayIcon) interceptor).Show();
		}
		[Q_SLOT("void hide()")]
		[SmokeMethod("hide", "()", "")]
		public void Hide() {
			((QSystemTrayIcon) interceptor).Hide();
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		protected new virtual bool Event(QEvent arg1) {
			return ((QSystemTrayIcon) interceptor).Event(arg1);
		}
		~QSystemTrayIcon() {
			DisposeQSystemTrayIcon();
		}
		public new void Dispose() {
			DisposeQSystemTrayIcon();
		}
		[SmokeMethod("~QSystemTrayIcon", "()", "")]
		private void DisposeQSystemTrayIcon() {
			((QSystemTrayIcon) interceptor).DisposeQSystemTrayIcon();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		public static bool IsSystemTrayAvailable() {
			return staticInterceptor.IsSystemTrayAvailable();
		}
		public static bool SupportsMessages() {
			return staticInterceptor.SupportsMessages();
		}
		protected new IQSystemTrayIconSignals Emit {
			get { return (IQSystemTrayIconSignals) Q_EMIT; }
		}
	}

	public interface IQSystemTrayIconSignals : IQObjectSignals {
		[Q_SIGNAL("void activated(QSystemTrayIcon::ActivationReason)")]
		void Activated(QSystemTrayIcon.ActivationReason reason);
		[Q_SIGNAL("void messageClicked()")]
		void MessageClicked();
	}
}
