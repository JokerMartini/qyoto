//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QSound")]
	public class QSound : QObject, IDisposable {
 		protected QSound(Type dummy) : base((Type) null) {}
		[SmokeClass("QSound")]
		interface IQSoundProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
			[SmokeMethod("isAvailable", "()", "")]
			bool IsAvailable();
			[SmokeMethod("play", "(const QString&)", "$")]
			void Play(string filename);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSound), this);
			_interceptor = (QSound) realProxy.GetTransparentProxy();
		}
		private QSound ProxyQSound() {
			return (QSound) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QSound() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSoundProxy), null);
			_staticInterceptor = (IQSoundProxy) realProxy.GetTransparentProxy();
		}
		private static IQSoundProxy StaticQSound() {
			return (IQSoundProxy) _staticInterceptor;
		}
		public QSound(string filename, QObject parent) : this((Type) null) {
			CreateProxy();
			NewQSound(filename,parent);
		}
		[SmokeMethod("QSound", "(const QString&, QObject*)", "$#")]
		private void NewQSound(string filename, QObject parent) {
			ProxyQSound().NewQSound(filename,parent);
		}
		public QSound(string filename) : this((Type) null) {
			CreateProxy();
			NewQSound(filename);
		}
		[SmokeMethod("QSound", "(const QString&)", "$")]
		private void NewQSound(string filename) {
			ProxyQSound().NewQSound(filename);
		}
		[SmokeMethod("loops", "() const", "")]
		public int Loops() {
			return ProxyQSound().Loops();
		}
		[SmokeMethod("loopsRemaining", "() const", "")]
		public int LoopsRemaining() {
			return ProxyQSound().LoopsRemaining();
		}
		[SmokeMethod("setLoops", "(int)", "$")]
		public void SetLoops(int arg1) {
			ProxyQSound().SetLoops(arg1);
		}
		[SmokeMethod("fileName", "() const", "")]
		public string FileName() {
			return ProxyQSound().FileName();
		}
		[SmokeMethod("isFinished", "() const", "")]
		public bool IsFinished() {
			return ProxyQSound().IsFinished();
		}
		[Q_SLOT("void play()")]
		[SmokeMethod("play", "()", "")]
		public void Play() {
			ProxyQSound().Play();
		}
		[Q_SLOT("void stop()")]
		[SmokeMethod("stop", "()", "")]
		public void Stop() {
			ProxyQSound().Stop();
		}
		~QSound() {
			DisposeQSound();
		}
		public new void Dispose() {
			DisposeQSound();
		}
		[SmokeMethod("~QSound", "()", "")]
		private void DisposeQSound() {
			ProxyQSound().DisposeQSound();
		}
		public static string Tr(string s, string c) {
			return StaticQSound().Tr(s,c);
		}
		public static string Tr(string s) {
			return StaticQSound().Tr(s);
		}
		public static bool IsAvailable() {
			return StaticQSound().IsAvailable();
		}
		public static void Play(string filename) {
			StaticQSound().Play(filename);
		}
		protected new IQSoundSignals Emit {
			get { return (IQSoundSignals) Q_EMIT; }
		}
	}

	public interface IQSoundSignals : IQObjectSignals {
	}
}
