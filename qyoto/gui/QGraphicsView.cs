//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	[SmokeClass("QGraphicsView")]
	public class QGraphicsView : QAbstractScrollArea, IDisposable {
 		protected QGraphicsView(Type dummy) : base((Type) null) {}
		[SmokeClass("QGraphicsView")]
		interface IQGraphicsViewProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QGraphicsView), this);
			interceptor = (QGraphicsView) realProxy.GetTransparentProxy();
		}
		private static IQGraphicsViewProxy staticInterceptor = null;
		static QGraphicsView() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQGraphicsViewProxy), null);
			staticInterceptor = (IQGraphicsViewProxy) realProxy.GetTransparentProxy();
		}
		public enum ViewportAnchor {
			NoAnchor = 0,
			AnchorViewCenter = 1,
			AnchorUnderMouse = 2,
		}
		public enum CacheModeFlag {
			CacheNone = 0x0,
			CacheBackground = 0x1,
		}
		public enum DragMode {
			NoDrag = 0,
			ScrollHandDrag = 1,
			RubberBandDrag = 2,
		}
		[Q_PROPERTY("QBrush", "backgroundBrush")]
		public QBrush BackgroundBrush {
			[SmokeMethod("backgroundBrush", "()", "")]
			get { return ((QGraphicsView) interceptor).BackgroundBrush; }
			[SmokeMethod("setBackgroundBrush", "(QBrush)", "#")]
			set { ((QGraphicsView) interceptor).BackgroundBrush = value; }
		}
		[Q_PROPERTY("QBrush", "foregroundBrush")]
		public QBrush ForegroundBrush {
			[SmokeMethod("foregroundBrush", "()", "")]
			get { return ((QGraphicsView) interceptor).ForegroundBrush; }
			[SmokeMethod("setForegroundBrush", "(QBrush)", "#")]
			set { ((QGraphicsView) interceptor).ForegroundBrush = value; }
		}
		[Q_PROPERTY("bool", "interactive")]
		public bool Interactive {
			[SmokeMethod("isInteractive", "()", "")]
			get { return ((QGraphicsView) interceptor).Interactive; }
			[SmokeMethod("setInteractive", "(bool)", "$")]
			set { ((QGraphicsView) interceptor).Interactive = value; }
		}
		[Q_PROPERTY("QRectF", "sceneRect")]
		public QRectF SceneRect {
			[SmokeMethod("sceneRect", "()", "")]
			get { return ((QGraphicsView) interceptor).SceneRect; }
			[SmokeMethod("setSceneRect", "(QRectF)", "#")]
			set { ((QGraphicsView) interceptor).SceneRect = value; }
		}
		[Q_PROPERTY("Qt::Alignment", "alignment")]
		public int Alignment {
			[SmokeMethod("alignment", "()", "")]
			get { return ((QGraphicsView) interceptor).Alignment; }
			[SmokeMethod("setAlignment", "(Qt::Alignment)", "$")]
			set { ((QGraphicsView) interceptor).Alignment = value; }
		}
		[Q_PROPERTY("QPainter::RenderHints", "renderHints")]
		public int RenderHints {
			[SmokeMethod("renderHints", "()", "")]
			get { return ((QGraphicsView) interceptor).RenderHints; }
			[SmokeMethod("setRenderHints", "(QPainter::RenderHints)", "$")]
			set { ((QGraphicsView) interceptor).RenderHints = value; }
		}
		[Q_PROPERTY("QGraphicsView::DragMode", "dragMode")]
		public QGraphicsView.DragMode dragMode {
			[SmokeMethod("dragMode", "()", "")]
			get { return ((QGraphicsView) interceptor).dragMode; }
			[SmokeMethod("setDragMode", "(QGraphicsView::DragMode)", "$")]
			set { ((QGraphicsView) interceptor).dragMode = value; }
		}
		[Q_PROPERTY("CacheMode", "cacheMode")]
		public int CacheMode {
			[SmokeMethod("cacheMode", "()", "")]
			get { return ((QGraphicsView) interceptor).CacheMode; }
			[SmokeMethod("setCacheMode", "(CacheMode)", "$")]
			set { ((QGraphicsView) interceptor).CacheMode = value; }
		}
		[Q_PROPERTY("QGraphicsView::ViewportAnchor", "transformationAnchor")]
		public QGraphicsView.ViewportAnchor TransformationAnchor {
			[SmokeMethod("transformationAnchor", "()", "")]
			get { return ((QGraphicsView) interceptor).TransformationAnchor; }
			[SmokeMethod("setTransformationAnchor", "(QGraphicsView::ViewportAnchor)", "$")]
			set { ((QGraphicsView) interceptor).TransformationAnchor = value; }
		}
		[Q_PROPERTY("QGraphicsView::ViewportAnchor", "resizeAnchor")]
		public QGraphicsView.ViewportAnchor ResizeAnchor {
			[SmokeMethod("resizeAnchor", "()", "")]
			get { return ((QGraphicsView) interceptor).ResizeAnchor; }
			[SmokeMethod("setResizeAnchor", "(QGraphicsView::ViewportAnchor)", "$")]
			set { ((QGraphicsView) interceptor).ResizeAnchor = value; }
		}
		// void drawItems(QPainter* arg1,int arg2,QGraphicsItem** arg3,const QStyleOptionGraphicsItem* arg4); >>>> NOT CONVERTED
		public QGraphicsView(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQGraphicsView(parent);
		}
		[SmokeMethod("QGraphicsView", "(QWidget*)", "#")]
		private void NewQGraphicsView(QWidget parent) {
			((QGraphicsView) interceptor).NewQGraphicsView(parent);
		}
		public QGraphicsView() : this((Type) null) {
			CreateProxy();
			NewQGraphicsView();
		}
		[SmokeMethod("QGraphicsView", "()", "")]
		private void NewQGraphicsView() {
			((QGraphicsView) interceptor).NewQGraphicsView();
		}
		public QGraphicsView(QGraphicsScene scene, QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQGraphicsView(scene,parent);
		}
		[SmokeMethod("QGraphicsView", "(QGraphicsScene*, QWidget*)", "##")]
		private void NewQGraphicsView(QGraphicsScene scene, QWidget parent) {
			((QGraphicsView) interceptor).NewQGraphicsView(scene,parent);
		}
		public QGraphicsView(QGraphicsScene scene) : this((Type) null) {
			CreateProxy();
			NewQGraphicsView(scene);
		}
		[SmokeMethod("QGraphicsView", "(QGraphicsScene*)", "#")]
		private void NewQGraphicsView(QGraphicsScene scene) {
			((QGraphicsView) interceptor).NewQGraphicsView(scene);
		}
		[SmokeMethod("sizeHint", "() const", "")]
		public override QSize SizeHint() {
			return ((QGraphicsView) interceptor).SizeHint();
		}
		[SmokeMethod("setRenderHint", "(QPainter::RenderHint, bool)", "$$")]
		public void SetRenderHint(QPainter.RenderHint hint, bool enabled) {
			((QGraphicsView) interceptor).SetRenderHint(hint,enabled);
		}
		[SmokeMethod("setRenderHint", "(QPainter::RenderHint)", "$")]
		public void SetRenderHint(QPainter.RenderHint hint) {
			((QGraphicsView) interceptor).SetRenderHint(hint);
		}
		[SmokeMethod("resetCachedContent", "()", "")]
		public void ResetCachedContent() {
			((QGraphicsView) interceptor).ResetCachedContent();
		}
		[SmokeMethod("isInteractive", "() const", "")]
		public bool IsInteractive() {
			return ((QGraphicsView) interceptor).IsInteractive();
		}
		[SmokeMethod("scene", "() const", "")]
		public QGraphicsScene Scene() {
			return ((QGraphicsView) interceptor).Scene();
		}
		[SmokeMethod("setScene", "(QGraphicsScene*)", "#")]
		public void SetScene(QGraphicsScene scene) {
			((QGraphicsView) interceptor).SetScene(scene);
		}
		[SmokeMethod("setSceneRect", "(qreal, qreal, qreal, qreal)", "$$$$")]
		public void SetSceneRect(double x, double y, double w, double h) {
			((QGraphicsView) interceptor).SetSceneRect(x,y,w,h);
		}
		[SmokeMethod("matrix", "() const", "")]
		public QMatrix Matrix() {
			return ((QGraphicsView) interceptor).Matrix();
		}
		[SmokeMethod("setMatrix", "(const QMatrix&, bool)", "#$")]
		public void SetMatrix(QMatrix matrix, bool combine) {
			((QGraphicsView) interceptor).SetMatrix(matrix,combine);
		}
		[SmokeMethod("setMatrix", "(const QMatrix&)", "#")]
		public void SetMatrix(QMatrix matrix) {
			((QGraphicsView) interceptor).SetMatrix(matrix);
		}
		[SmokeMethod("resetMatrix", "()", "")]
		public void ResetMatrix() {
			((QGraphicsView) interceptor).ResetMatrix();
		}
		[SmokeMethod("rotate", "(qreal)", "$")]
		public void Rotate(double angle) {
			((QGraphicsView) interceptor).Rotate(angle);
		}
		[SmokeMethod("scale", "(qreal, qreal)", "$$")]
		public void Scale(double sx, double sy) {
			((QGraphicsView) interceptor).Scale(sx,sy);
		}
		[SmokeMethod("shear", "(qreal, qreal)", "$$")]
		public void Shear(double sh, double sv) {
			((QGraphicsView) interceptor).Shear(sh,sv);
		}
		[SmokeMethod("translate", "(qreal, qreal)", "$$")]
		public void Translate(double dx, double dy) {
			((QGraphicsView) interceptor).Translate(dx,dy);
		}
		[SmokeMethod("centerOn", "(const QPointF&)", "#")]
		public void CenterOn(QPointF pos) {
			((QGraphicsView) interceptor).CenterOn(pos);
		}
		[SmokeMethod("centerOn", "(qreal, qreal)", "$$")]
		public void CenterOn(double x, double y) {
			((QGraphicsView) interceptor).CenterOn(x,y);
		}
		[SmokeMethod("centerOn", "(const QGraphicsItem*)", "#")]
		public void CenterOn(QGraphicsItem item) {
			((QGraphicsView) interceptor).CenterOn(item);
		}
		[SmokeMethod("ensureVisible", "(const QRectF&, int, int)", "#$$")]
		public void EnsureVisible(QRectF rect, int xmargin, int ymargin) {
			((QGraphicsView) interceptor).EnsureVisible(rect,xmargin,ymargin);
		}
		[SmokeMethod("ensureVisible", "(const QRectF&, int)", "#$")]
		public void EnsureVisible(QRectF rect, int xmargin) {
			((QGraphicsView) interceptor).EnsureVisible(rect,xmargin);
		}
		[SmokeMethod("ensureVisible", "(const QRectF&)", "#")]
		public void EnsureVisible(QRectF rect) {
			((QGraphicsView) interceptor).EnsureVisible(rect);
		}
		[SmokeMethod("ensureVisible", "(qreal, qreal, qreal, qreal, int, int)", "$$$$$$")]
		public void EnsureVisible(double x, double y, double w, double h, int xmargin, int ymargin) {
			((QGraphicsView) interceptor).EnsureVisible(x,y,w,h,xmargin,ymargin);
		}
		[SmokeMethod("ensureVisible", "(qreal, qreal, qreal, qreal, int)", "$$$$$")]
		public void EnsureVisible(double x, double y, double w, double h, int xmargin) {
			((QGraphicsView) interceptor).EnsureVisible(x,y,w,h,xmargin);
		}
		[SmokeMethod("ensureVisible", "(qreal, qreal, qreal, qreal)", "$$$$")]
		public void EnsureVisible(double x, double y, double w, double h) {
			((QGraphicsView) interceptor).EnsureVisible(x,y,w,h);
		}
		[SmokeMethod("ensureVisible", "(const QGraphicsItem*, int, int)", "#$$")]
		public void EnsureVisible(QGraphicsItem item, int xmargin, int ymargin) {
			((QGraphicsView) interceptor).EnsureVisible(item,xmargin,ymargin);
		}
		[SmokeMethod("ensureVisible", "(const QGraphicsItem*, int)", "#$")]
		public void EnsureVisible(QGraphicsItem item, int xmargin) {
			((QGraphicsView) interceptor).EnsureVisible(item,xmargin);
		}
		[SmokeMethod("ensureVisible", "(const QGraphicsItem*)", "#")]
		public void EnsureVisible(QGraphicsItem item) {
			((QGraphicsView) interceptor).EnsureVisible(item);
		}
		[SmokeMethod("fitInView", "(const QRectF&, Qt::AspectRatioMode)", "#$")]
		public void FitInView(QRectF rect, Qt.AspectRatioMode aspectRadioMode) {
			((QGraphicsView) interceptor).FitInView(rect,aspectRadioMode);
		}
		[SmokeMethod("fitInView", "(const QRectF&)", "#")]
		public void FitInView(QRectF rect) {
			((QGraphicsView) interceptor).FitInView(rect);
		}
		[SmokeMethod("fitInView", "(qreal, qreal, qreal, qreal, Qt::AspectRatioMode)", "$$$$$")]
		public void FitInView(double x, double y, double w, double h, Qt.AspectRatioMode aspectRadioMode) {
			((QGraphicsView) interceptor).FitInView(x,y,w,h,aspectRadioMode);
		}
		[SmokeMethod("fitInView", "(qreal, qreal, qreal, qreal)", "$$$$")]
		public void FitInView(double x, double y, double w, double h) {
			((QGraphicsView) interceptor).FitInView(x,y,w,h);
		}
		[SmokeMethod("fitInView", "(const QGraphicsItem*, Qt::AspectRatioMode)", "#$")]
		public void FitInView(QGraphicsItem item, Qt.AspectRatioMode aspectRadioMode) {
			((QGraphicsView) interceptor).FitInView(item,aspectRadioMode);
		}
		[SmokeMethod("fitInView", "(const QGraphicsItem*)", "#")]
		public void FitInView(QGraphicsItem item) {
			((QGraphicsView) interceptor).FitInView(item);
		}
		[SmokeMethod("render", "(QPainter*, const QRectF&, const QRect&, Qt::AspectRatioMode)", "###$")]
		public void Render(QPainter painter, QRectF target, QRect source, Qt.AspectRatioMode aspectRatioMode) {
			((QGraphicsView) interceptor).Render(painter,target,source,aspectRatioMode);
		}
		[SmokeMethod("render", "(QPainter*, const QRectF&, const QRect&)", "###")]
		public void Render(QPainter painter, QRectF target, QRect source) {
			((QGraphicsView) interceptor).Render(painter,target,source);
		}
		[SmokeMethod("render", "(QPainter*, const QRectF&)", "##")]
		public void Render(QPainter painter, QRectF target) {
			((QGraphicsView) interceptor).Render(painter,target);
		}
		[SmokeMethod("render", "(QPainter*)", "#")]
		public void Render(QPainter painter) {
			((QGraphicsView) interceptor).Render(painter);
		}
		[SmokeMethod("items", "() const", "")]
		public List<QGraphicsItem> Items() {
			return ((QGraphicsView) interceptor).Items();
		}
		[SmokeMethod("items", "(const QPoint&) const", "#")]
		public List<QGraphicsItem> Items(QPoint pos) {
			return ((QGraphicsView) interceptor).Items(pos);
		}
		[SmokeMethod("items", "(int, int) const", "$$")]
		public List<QGraphicsItem> Items(int x, int y) {
			return ((QGraphicsView) interceptor).Items(x,y);
		}
		[SmokeMethod("items", "(const QRect&, Qt::ItemSelectionMode) const", "#$")]
		public List<QGraphicsItem> Items(QRect rect, Qt.ItemSelectionMode mode) {
			return ((QGraphicsView) interceptor).Items(rect,mode);
		}
		[SmokeMethod("items", "(const QRect&) const", "#")]
		public List<QGraphicsItem> Items(QRect rect) {
			return ((QGraphicsView) interceptor).Items(rect);
		}
		[SmokeMethod("items", "(const QPolygon&, Qt::ItemSelectionMode) const", "#$")]
		public List<QGraphicsItem> Items(QPolygon polygon, Qt.ItemSelectionMode mode) {
			return ((QGraphicsView) interceptor).Items(polygon,mode);
		}
		[SmokeMethod("items", "(const QPolygon&) const", "#")]
		public List<QGraphicsItem> Items(QPolygon polygon) {
			return ((QGraphicsView) interceptor).Items(polygon);
		}
		[SmokeMethod("items", "(const QPainterPath&, Qt::ItemSelectionMode) const", "#$")]
		public List<QGraphicsItem> Items(QPainterPath path, Qt.ItemSelectionMode mode) {
			return ((QGraphicsView) interceptor).Items(path,mode);
		}
		[SmokeMethod("items", "(const QPainterPath&) const", "#")]
		public List<QGraphicsItem> Items(QPainterPath path) {
			return ((QGraphicsView) interceptor).Items(path);
		}
		[SmokeMethod("itemAt", "(const QPoint&) const", "#")]
		public QGraphicsItem ItemAt(QPoint pos) {
			return ((QGraphicsView) interceptor).ItemAt(pos);
		}
		[SmokeMethod("itemAt", "(int, int) const", "$$")]
		public QGraphicsItem ItemAt(int x, int y) {
			return ((QGraphicsView) interceptor).ItemAt(x,y);
		}
		[SmokeMethod("mapToScene", "(const QPoint&) const", "#")]
		public QPointF MapToScene(QPoint point) {
			return ((QGraphicsView) interceptor).MapToScene(point);
		}
		[SmokeMethod("mapToScene", "(const QRect&) const", "#")]
		public QPolygonF MapToScene(QRect rect) {
			return ((QGraphicsView) interceptor).MapToScene(rect);
		}
		[SmokeMethod("mapToScene", "(const QPolygon&) const", "#")]
		public QPolygonF MapToScene(QPolygon polygon) {
			return ((QGraphicsView) interceptor).MapToScene(polygon);
		}
		[SmokeMethod("mapToScene", "(const QPainterPath&) const", "#")]
		public QPainterPath MapToScene(QPainterPath path) {
			return ((QGraphicsView) interceptor).MapToScene(path);
		}
		[SmokeMethod("mapFromScene", "(const QPointF&) const", "#")]
		public QPoint MapFromScene(QPointF point) {
			return ((QGraphicsView) interceptor).MapFromScene(point);
		}
		[SmokeMethod("mapFromScene", "(const QRectF&) const", "#")]
		public QPolygon MapFromScene(QRectF rect) {
			return ((QGraphicsView) interceptor).MapFromScene(rect);
		}
		[SmokeMethod("mapFromScene", "(const QPolygonF&) const", "#")]
		public QPolygon MapFromScene(QPolygonF polygon) {
			return ((QGraphicsView) interceptor).MapFromScene(polygon);
		}
		[SmokeMethod("mapFromScene", "(const QPainterPath&) const", "#")]
		public QPainterPath MapFromScene(QPainterPath path) {
			return ((QGraphicsView) interceptor).MapFromScene(path);
		}
		[SmokeMethod("mapToScene", "(int, int) const", "$$")]
		public QPointF MapToScene(int x, int y) {
			return ((QGraphicsView) interceptor).MapToScene(x,y);
		}
		[SmokeMethod("mapToScene", "(int, int, int, int) const", "$$$$")]
		public QPolygonF MapToScene(int x, int y, int w, int h) {
			return ((QGraphicsView) interceptor).MapToScene(x,y,w,h);
		}
		[SmokeMethod("mapFromScene", "(qreal, qreal) const", "$$")]
		public QPoint MapFromScene(double x, double y) {
			return ((QGraphicsView) interceptor).MapFromScene(x,y);
		}
		[SmokeMethod("mapFromScene", "(qreal, qreal, qreal, qreal) const", "$$$$")]
		public QPolygon MapFromScene(double x, double y, double w, double h) {
			return ((QGraphicsView) interceptor).MapFromScene(x,y,w,h);
		}
		[SmokeMethod("inputMethodQuery", "(Qt::InputMethodQuery) const", "$")]
		public override QVariant InputMethodQuery(Qt.InputMethodQuery query) {
			return ((QGraphicsView) interceptor).InputMethodQuery(query);
		}
		[Q_SLOT("void updateScene(const QList<QRectF>&)")]
		[SmokeMethod("updateScene", "(const QList<QRectF>&)", "?")]
		public void UpdateScene(List<QRectF> rects) {
			((QGraphicsView) interceptor).UpdateScene(rects);
		}
		[Q_SLOT("void updateSceneRect(const QRectF&)")]
		[SmokeMethod("updateSceneRect", "(const QRectF&)", "#")]
		public void UpdateSceneRect(QRectF rect) {
			((QGraphicsView) interceptor).UpdateSceneRect(rect);
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		protected override bool Event(QEvent arg1) {
			return ((QGraphicsView) interceptor).Event(arg1);
		}
		[SmokeMethod("viewportEvent", "(QEvent*)", "#")]
		protected override bool ViewportEvent(QEvent arg1) {
			return ((QGraphicsView) interceptor).ViewportEvent(arg1);
		}
		[SmokeMethod("contextMenuEvent", "(QContextMenuEvent*)", "#")]
		protected override void ContextMenuEvent(QContextMenuEvent arg1) {
			((QGraphicsView) interceptor).ContextMenuEvent(arg1);
		}
		[SmokeMethod("dragEnterEvent", "(QDragEnterEvent*)", "#")]
		protected override void DragEnterEvent(QDragEnterEvent arg1) {
			((QGraphicsView) interceptor).DragEnterEvent(arg1);
		}
		[SmokeMethod("dragLeaveEvent", "(QDragLeaveEvent*)", "#")]
		protected override void DragLeaveEvent(QDragLeaveEvent arg1) {
			((QGraphicsView) interceptor).DragLeaveEvent(arg1);
		}
		[SmokeMethod("dragMoveEvent", "(QDragMoveEvent*)", "#")]
		protected override void DragMoveEvent(QDragMoveEvent arg1) {
			((QGraphicsView) interceptor).DragMoveEvent(arg1);
		}
		[SmokeMethod("dropEvent", "(QDropEvent*)", "#")]
		protected override void DropEvent(QDropEvent arg1) {
			((QGraphicsView) interceptor).DropEvent(arg1);
		}
		[SmokeMethod("focusInEvent", "(QFocusEvent*)", "#")]
		protected override void FocusInEvent(QFocusEvent arg1) {
			((QGraphicsView) interceptor).FocusInEvent(arg1);
		}
		[SmokeMethod("focusOutEvent", "(QFocusEvent*)", "#")]
		protected override void FocusOutEvent(QFocusEvent arg1) {
			((QGraphicsView) interceptor).FocusOutEvent(arg1);
		}
		[SmokeMethod("keyPressEvent", "(QKeyEvent*)", "#")]
		protected override void KeyPressEvent(QKeyEvent arg1) {
			((QGraphicsView) interceptor).KeyPressEvent(arg1);
		}
		[SmokeMethod("keyReleaseEvent", "(QKeyEvent*)", "#")]
		protected override void KeyReleaseEvent(QKeyEvent arg1) {
			((QGraphicsView) interceptor).KeyReleaseEvent(arg1);
		}
		[SmokeMethod("mouseDoubleClickEvent", "(QMouseEvent*)", "#")]
		protected override void MouseDoubleClickEvent(QMouseEvent arg1) {
			((QGraphicsView) interceptor).MouseDoubleClickEvent(arg1);
		}
		[SmokeMethod("mousePressEvent", "(QMouseEvent*)", "#")]
		protected override void MousePressEvent(QMouseEvent arg1) {
			((QGraphicsView) interceptor).MousePressEvent(arg1);
		}
		[SmokeMethod("mouseMoveEvent", "(QMouseEvent*)", "#")]
		protected override void MouseMoveEvent(QMouseEvent arg1) {
			((QGraphicsView) interceptor).MouseMoveEvent(arg1);
		}
		[SmokeMethod("mouseReleaseEvent", "(QMouseEvent*)", "#")]
		protected override void MouseReleaseEvent(QMouseEvent arg1) {
			((QGraphicsView) interceptor).MouseReleaseEvent(arg1);
		}
		[SmokeMethod("wheelEvent", "(QWheelEvent*)", "#")]
		protected override void WheelEvent(QWheelEvent arg1) {
			((QGraphicsView) interceptor).WheelEvent(arg1);
		}
		[SmokeMethod("paintEvent", "(QPaintEvent*)", "#")]
		protected override void PaintEvent(QPaintEvent arg1) {
			((QGraphicsView) interceptor).PaintEvent(arg1);
		}
		[SmokeMethod("resizeEvent", "(QResizeEvent*)", "#")]
		protected override void ResizeEvent(QResizeEvent arg1) {
			((QGraphicsView) interceptor).ResizeEvent(arg1);
		}
		[SmokeMethod("scrollContentsBy", "(int, int)", "$$")]
		protected override void ScrollContentsBy(int dx, int dy) {
			((QGraphicsView) interceptor).ScrollContentsBy(dx,dy);
		}
		[SmokeMethod("showEvent", "(QShowEvent*)", "#")]
		protected override void ShowEvent(QShowEvent arg1) {
			((QGraphicsView) interceptor).ShowEvent(arg1);
		}
		[SmokeMethod("inputMethodEvent", "(QInputMethodEvent*)", "#")]
		protected override void InputMethodEvent(QInputMethodEvent arg1) {
			((QGraphicsView) interceptor).InputMethodEvent(arg1);
		}
		[SmokeMethod("drawBackground", "(QPainter*, const QRectF&)", "##")]
		protected virtual void DrawBackground(QPainter painter, QRectF rect) {
			((QGraphicsView) interceptor).DrawBackground(painter,rect);
		}
		[SmokeMethod("drawForeground", "(QPainter*, const QRectF&)", "##")]
		protected virtual void DrawForeground(QPainter painter, QRectF rect) {
			((QGraphicsView) interceptor).DrawForeground(painter,rect);
		}
		[Q_SLOT("void setupViewport(QWidget*)")]
		[SmokeMethod("setupViewport", "(QWidget*)", "#")]
		protected void SetupViewport(QWidget widget) {
			((QGraphicsView) interceptor).SetupViewport(widget);
		}
		~QGraphicsView() {
			DisposeQGraphicsView();
		}
		public new void Dispose() {
			DisposeQGraphicsView();
		}
		[SmokeMethod("~QGraphicsView", "()", "")]
		private void DisposeQGraphicsView() {
			((QGraphicsView) interceptor).DisposeQGraphicsView();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQGraphicsViewSignals Emit {
			get { return (IQGraphicsViewSignals) Q_EMIT; }
		}
	}

	public interface IQGraphicsViewSignals : IQAbstractScrollAreaSignals {
	}
}
