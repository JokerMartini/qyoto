//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QGraphicsSceneHoverEvent")]
	public class QGraphicsSceneHoverEvent : QGraphicsSceneEvent, IDisposable {
 		protected QGraphicsSceneHoverEvent(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QGraphicsSceneHoverEvent), this);
			interceptor = (QGraphicsSceneHoverEvent) realProxy.GetTransparentProxy();
		}
		public QGraphicsSceneHoverEvent(QEvent.TypeOf type) : this((Type) null) {
			CreateProxy();
			NewQGraphicsSceneHoverEvent(type);
		}
		[SmokeMethod("QGraphicsSceneHoverEvent", "(QEvent::Type)", "$")]
		private void NewQGraphicsSceneHoverEvent(QEvent.TypeOf type) {
			((QGraphicsSceneHoverEvent) interceptor).NewQGraphicsSceneHoverEvent(type);
		}
		public QGraphicsSceneHoverEvent() : this((Type) null) {
			CreateProxy();
			NewQGraphicsSceneHoverEvent();
		}
		[SmokeMethod("QGraphicsSceneHoverEvent", "()", "")]
		private void NewQGraphicsSceneHoverEvent() {
			((QGraphicsSceneHoverEvent) interceptor).NewQGraphicsSceneHoverEvent();
		}
		[SmokeMethod("pos", "() const", "")]
		public QPointF Pos() {
			return ((QGraphicsSceneHoverEvent) interceptor).Pos();
		}
		[SmokeMethod("setPos", "(const QPointF&)", "#")]
		public void SetPos(QPointF pos) {
			((QGraphicsSceneHoverEvent) interceptor).SetPos(pos);
		}
		[SmokeMethod("scenePos", "() const", "")]
		public QPointF ScenePos() {
			return ((QGraphicsSceneHoverEvent) interceptor).ScenePos();
		}
		[SmokeMethod("setScenePos", "(const QPointF&)", "#")]
		public void SetScenePos(QPointF pos) {
			((QGraphicsSceneHoverEvent) interceptor).SetScenePos(pos);
		}
		[SmokeMethod("screenPos", "() const", "")]
		public QPoint ScreenPos() {
			return ((QGraphicsSceneHoverEvent) interceptor).ScreenPos();
		}
		[SmokeMethod("setScreenPos", "(const QPoint&)", "#")]
		public void SetScreenPos(QPoint pos) {
			((QGraphicsSceneHoverEvent) interceptor).SetScreenPos(pos);
		}
		~QGraphicsSceneHoverEvent() {
			DisposeQGraphicsSceneHoverEvent();
		}
		public new void Dispose() {
			DisposeQGraphicsSceneHoverEvent();
		}
		[SmokeMethod("~QGraphicsSceneHoverEvent", "()", "")]
		private void DisposeQGraphicsSceneHoverEvent() {
			((QGraphicsSceneHoverEvent) interceptor).DisposeQGraphicsSceneHoverEvent();
		}
	}
}
