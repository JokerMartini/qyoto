//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;
	using System.Collections.Generic;

	/// See <see cref="IQCompleterSignals"></see> for signals emitted by QCompleter
	[SmokeClass("QCompleter")]
	public class QCompleter : QObject, IDisposable {
 		protected QCompleter(Type dummy) : base((Type) null) {}
		interface IQCompleterProxy {
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QCompleter), this);
			_interceptor = (QCompleter) realProxy.GetTransparentProxy();
		}
		private QCompleter ProxyQCompleter() {
			return (QCompleter) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QCompleter() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQCompleterProxy), null);
			_staticInterceptor = (IQCompleterProxy) realProxy.GetTransparentProxy();
		}
		private static IQCompleterProxy StaticQCompleter() {
			return (IQCompleterProxy) _staticInterceptor;
		}

		public enum CompletionMode {
			PopupCompletion = 0,
			UnfilteredPopupCompletion = 1,
			InlineCompletion = 2,
		}
		public enum ModelSorting {
			UnsortedModel = 0,
			CaseSensitivelySortedModel = 1,
			CaseInsensitivelySortedModel = 2,
		}
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QCompleter(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQCompleter(parent);
		}
		[SmokeMethod("QCompleter(QObject*)")]
		private void NewQCompleter(QObject parent) {
			ProxyQCompleter().NewQCompleter(parent);
		}
		public QCompleter() : this((Type) null) {
			CreateProxy();
			NewQCompleter();
		}
		[SmokeMethod("QCompleter()")]
		private void NewQCompleter() {
			ProxyQCompleter().NewQCompleter();
		}
		public QCompleter(QAbstractItemModel model, QObject parent) : this((Type) null) {
			CreateProxy();
			NewQCompleter(model,parent);
		}
		[SmokeMethod("QCompleter(QAbstractItemModel*, QObject*)")]
		private void NewQCompleter(QAbstractItemModel model, QObject parent) {
			ProxyQCompleter().NewQCompleter(model,parent);
		}
		public QCompleter(QAbstractItemModel model) : this((Type) null) {
			CreateProxy();
			NewQCompleter(model);
		}
		[SmokeMethod("QCompleter(QAbstractItemModel*)")]
		private void NewQCompleter(QAbstractItemModel model) {
			ProxyQCompleter().NewQCompleter(model);
		}
		public QCompleter(List<string> completions, QObject parent) : this((Type) null) {
			CreateProxy();
			NewQCompleter(completions,parent);
		}
		[SmokeMethod("QCompleter(const QStringList&, QObject*)")]
		private void NewQCompleter(List<string> completions, QObject parent) {
			ProxyQCompleter().NewQCompleter(completions,parent);
		}
		public QCompleter(List<string> completions) : this((Type) null) {
			CreateProxy();
			NewQCompleter(completions);
		}
		[SmokeMethod("QCompleter(const QStringList&)")]
		private void NewQCompleter(List<string> completions) {
			ProxyQCompleter().NewQCompleter(completions);
		}
		[SmokeMethod("setWidget(QWidget*)")]
		public void SetWidget(QWidget widget) {
			ProxyQCompleter().SetWidget(widget);
		}
		[SmokeMethod("widget() const")]
		public QWidget Widget() {
			return ProxyQCompleter().Widget();
		}
		[SmokeMethod("setModel(QAbstractItemModel*)")]
		public void SetModel(QAbstractItemModel c) {
			ProxyQCompleter().SetModel(c);
		}
		[SmokeMethod("model() const")]
		public QAbstractItemModel Model() {
			return ProxyQCompleter().Model();
		}
		[SmokeMethod("setCompletionMode(QCompleter::CompletionMode)")]
		public void SetCompletionMode(QCompleter.CompletionMode mode) {
			ProxyQCompleter().SetCompletionMode(mode);
		}
		[SmokeMethod("completionMode() const")]
		public QCompleter.CompletionMode completionMode() {
			return ProxyQCompleter().completionMode();
		}
		[SmokeMethod("popup() const")]
		public QAbstractItemView Popup() {
			return ProxyQCompleter().Popup();
		}
		[SmokeMethod("setPopup(QAbstractItemView*)")]
		public void SetPopup(QAbstractItemView popup) {
			ProxyQCompleter().SetPopup(popup);
		}
		[SmokeMethod("setCaseSensitivity(Qt::CaseSensitivity)")]
		public void SetCaseSensitivity(Qt.CaseSensitivity caseSensitivity) {
			ProxyQCompleter().SetCaseSensitivity(caseSensitivity);
		}
		[SmokeMethod("caseSensitivity() const")]
		public Qt.CaseSensitivity CaseSensitivity() {
			return ProxyQCompleter().CaseSensitivity();
		}
		[SmokeMethod("setModelSorting(QCompleter::ModelSorting)")]
		public void SetModelSorting(QCompleter.ModelSorting sorting) {
			ProxyQCompleter().SetModelSorting(sorting);
		}
		[SmokeMethod("modelSorting() const")]
		public QCompleter.ModelSorting modelSorting() {
			return ProxyQCompleter().modelSorting();
		}
		[SmokeMethod("setCompletionColumn(int)")]
		public void SetCompletionColumn(int column) {
			ProxyQCompleter().SetCompletionColumn(column);
		}
		[SmokeMethod("completionColumn() const")]
		public int CompletionColumn() {
			return ProxyQCompleter().CompletionColumn();
		}
		[SmokeMethod("setCompletionRole(int)")]
		public void SetCompletionRole(int role) {
			ProxyQCompleter().SetCompletionRole(role);
		}
		[SmokeMethod("completionRole() const")]
		public int CompletionRole() {
			return ProxyQCompleter().CompletionRole();
		}
		[SmokeMethod("completionCount() const")]
		public int CompletionCount() {
			return ProxyQCompleter().CompletionCount();
		}
		[SmokeMethod("setCurrentRow(int)")]
		public bool SetCurrentRow(int row) {
			return ProxyQCompleter().SetCurrentRow(row);
		}
		[SmokeMethod("currentRow() const")]
		public int CurrentRow() {
			return ProxyQCompleter().CurrentRow();
		}
		[SmokeMethod("currentIndex() const")]
		public QModelIndex CurrentIndex() {
			return ProxyQCompleter().CurrentIndex();
		}
		[SmokeMethod("currentCompletion() const")]
		public string CurrentCompletion() {
			return ProxyQCompleter().CurrentCompletion();
		}
		[SmokeMethod("completionModel() const")]
		public QAbstractItemModel CompletionModel() {
			return ProxyQCompleter().CompletionModel();
		}
		[SmokeMethod("completionPrefix() const")]
		public string CompletionPrefix() {
			return ProxyQCompleter().CompletionPrefix();
		}
		[SmokeMethod("setCompletionPrefix(const QString&)")]
		public void SetCompletionPrefix(string prefix) {
			ProxyQCompleter().SetCompletionPrefix(prefix);
		}
		[SmokeMethod("complete(const QRect&)")]
		public void Complete(QRect rect) {
			ProxyQCompleter().Complete(rect);
		}
		[SmokeMethod("complete()")]
		public void Complete() {
			ProxyQCompleter().Complete();
		}
		[SmokeMethod("pathFromIndex(const QModelIndex&) const")]
		public virtual string PathFromIndex(QModelIndex index) {
			return ProxyQCompleter().PathFromIndex(index);
		}
		[SmokeMethod("splitPath(const QString&) const")]
		public virtual List<string> SplitPath(string path) {
			return ProxyQCompleter().SplitPath(path);
		}
		[SmokeMethod("tr(const char*, const char*)")]
		public static new string Tr(string s, string c) {
			return StaticQCompleter().Tr(s,c);
		}
		[SmokeMethod("tr(const char*)")]
		public static new string Tr(string s) {
			return StaticQCompleter().Tr(s);
		}
		[SmokeMethod("eventFilter(QObject*, QEvent*)")]
		public new bool EventFilter(QObject o, QEvent e) {
			return ProxyQCompleter().EventFilter(o,e);
		}
		[SmokeMethod("event(QEvent*)")]
		public new bool Event(QEvent arg1) {
			return ProxyQCompleter().Event(arg1);
		}
		~QCompleter() {
			DisposeQCompleter();
		}
		public new void Dispose() {
			DisposeQCompleter();
		}
		[SmokeMethod("~QCompleter()")]
		private void DisposeQCompleter() {
			ProxyQCompleter().DisposeQCompleter();
		}
		protected new IQCompleterSignals Emit() {
			return (IQCompleterSignals) Q_EMIT;
		}
	}

	public interface IQCompleterSignals : IQObjectSignals {
		[Q_SIGNAL("void activated(const QString&)")]
		void Activated(string text);
		[Q_SIGNAL("void activated(const QModelIndex&)")]
		void Activated(QModelIndex index);
		[Q_SIGNAL("void highlighted(const QString&)")]
		void Highlighted(string text);
		[Q_SIGNAL("void highlighted(const QModelIndex&)")]
		void Highlighted(QModelIndex index);
	}
}
