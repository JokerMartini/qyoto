//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections.Generic;

	/// See <see cref="IQCompleterSignals"></see> for signals emitted by QCompleter
	[SmokeClass("QCompleter")]
	public class QCompleter : QObject, IDisposable {
 		protected QCompleter(Type dummy) : base((Type) null) {}
		[SmokeClass("QCompleter")]
		interface IQCompleterProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QCompleter), this);
			interceptor = (QCompleter) realProxy.GetTransparentProxy();
		}
		private static IQCompleterProxy staticInterceptor = null;
		static QCompleter() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQCompleterProxy), null);
			staticInterceptor = (IQCompleterProxy) realProxy.GetTransparentProxy();
		}
		public enum CompletionMode {
			PopupCompletion = 0,
			UnfilteredPopupCompletion = 1,
			InlineCompletion = 2,
		}
		public enum ModelSorting {
			UnsortedModel = 0,
			CaseSensitivelySortedModel = 1,
			CaseInsensitivelySortedModel = 2,
		}
		[Q_PROPERTY("QString", "completionPrefix")]
		public string CompletionPrefix {
			get { return Property("completionPrefix").Value<string>(); }
			set { SetProperty("completionPrefix", QVariant.FromValue<string>(value)); }
		}
		[Q_PROPERTY("QCompleter::ModelSorting", "modelSorting")]
		public QCompleter.ModelSorting modelSorting {
			get { return Property("modelSorting").Value<QCompleter.ModelSorting>(); }
			set { SetProperty("modelSorting", QVariant.FromValue<QCompleter.ModelSorting>(value)); }
		}
		[Q_PROPERTY("QCompleter::CompletionMode", "completionMode")]
		public QCompleter.CompletionMode completionMode {
			get { return Property("completionMode").Value<QCompleter.CompletionMode>(); }
			set { SetProperty("completionMode", QVariant.FromValue<QCompleter.CompletionMode>(value)); }
		}
		[Q_PROPERTY("int", "completionColumn")]
		public int CompletionColumn {
			get { return Property("completionColumn").Value<int>(); }
			set { SetProperty("completionColumn", QVariant.FromValue<int>(value)); }
		}
		[Q_PROPERTY("int", "completionRole")]
		public int CompletionRole {
			get { return Property("completionRole").Value<int>(); }
			set { SetProperty("completionRole", QVariant.FromValue<int>(value)); }
		}
		[Q_PROPERTY("Qt::CaseSensitivity", "caseSensitivity")]
		public Qt.CaseSensitivity CaseSensitivity {
			get { return Property("caseSensitivity").Value<Qt.CaseSensitivity>(); }
			set { SetProperty("caseSensitivity", QVariant.FromValue<Qt.CaseSensitivity>(value)); }
		}
		public QCompleter(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQCompleter(parent);
		}
		[SmokeMethod("QCompleter", "(QObject*)", "#")]
		private void NewQCompleter(QObject parent) {
			((QCompleter) interceptor).NewQCompleter(parent);
		}
		public QCompleter() : this((Type) null) {
			CreateProxy();
			NewQCompleter();
		}
		[SmokeMethod("QCompleter", "()", "")]
		private void NewQCompleter() {
			((QCompleter) interceptor).NewQCompleter();
		}
		public QCompleter(QAbstractItemModel model, QObject parent) : this((Type) null) {
			CreateProxy();
			NewQCompleter(model,parent);
		}
		[SmokeMethod("QCompleter", "(QAbstractItemModel*, QObject*)", "##")]
		private void NewQCompleter(QAbstractItemModel model, QObject parent) {
			((QCompleter) interceptor).NewQCompleter(model,parent);
		}
		public QCompleter(QAbstractItemModel model) : this((Type) null) {
			CreateProxy();
			NewQCompleter(model);
		}
		[SmokeMethod("QCompleter", "(QAbstractItemModel*)", "#")]
		private void NewQCompleter(QAbstractItemModel model) {
			((QCompleter) interceptor).NewQCompleter(model);
		}
		public QCompleter(List<string> completions, QObject parent) : this((Type) null) {
			CreateProxy();
			NewQCompleter(completions,parent);
		}
		[SmokeMethod("QCompleter", "(const QStringList&, QObject*)", "?#")]
		private void NewQCompleter(List<string> completions, QObject parent) {
			((QCompleter) interceptor).NewQCompleter(completions,parent);
		}
		public QCompleter(List<string> completions) : this((Type) null) {
			CreateProxy();
			NewQCompleter(completions);
		}
		[SmokeMethod("QCompleter", "(const QStringList&)", "?")]
		private void NewQCompleter(List<string> completions) {
			((QCompleter) interceptor).NewQCompleter(completions);
		}
		[SmokeMethod("setWidget", "(QWidget*)", "#")]
		public void SetWidget(QWidget widget) {
			((QCompleter) interceptor).SetWidget(widget);
		}
		[SmokeMethod("widget", "() const", "")]
		public QWidget Widget() {
			return ((QCompleter) interceptor).Widget();
		}
		[SmokeMethod("setModel", "(QAbstractItemModel*)", "#")]
		public void SetModel(QAbstractItemModel c) {
			((QCompleter) interceptor).SetModel(c);
		}
		[SmokeMethod("model", "() const", "")]
		public QAbstractItemModel Model() {
			return ((QCompleter) interceptor).Model();
		}
		[SmokeMethod("popup", "() const", "")]
		public QAbstractItemView Popup() {
			return ((QCompleter) interceptor).Popup();
		}
		[SmokeMethod("setPopup", "(QAbstractItemView*)", "#")]
		public void SetPopup(QAbstractItemView popup) {
			((QCompleter) interceptor).SetPopup(popup);
		}
		[SmokeMethod("completionCount", "() const", "")]
		public int CompletionCount() {
			return ((QCompleter) interceptor).CompletionCount();
		}
		[SmokeMethod("setCurrentRow", "(int)", "$")]
		public bool SetCurrentRow(int row) {
			return ((QCompleter) interceptor).SetCurrentRow(row);
		}
		[SmokeMethod("currentRow", "() const", "")]
		public int CurrentRow() {
			return ((QCompleter) interceptor).CurrentRow();
		}
		[SmokeMethod("currentIndex", "() const", "")]
		public QModelIndex CurrentIndex() {
			return ((QCompleter) interceptor).CurrentIndex();
		}
		[SmokeMethod("currentCompletion", "() const", "")]
		public string CurrentCompletion() {
			return ((QCompleter) interceptor).CurrentCompletion();
		}
		[SmokeMethod("completionModel", "() const", "")]
		public QAbstractItemModel CompletionModel() {
			return ((QCompleter) interceptor).CompletionModel();
		}
		[SmokeMethod("pathFromIndex", "(const QModelIndex&) const", "#")]
		public virtual string PathFromIndex(QModelIndex index) {
			return ((QCompleter) interceptor).PathFromIndex(index);
		}
		[SmokeMethod("splitPath", "(const QString&) const", "$")]
		public virtual List<string> SplitPath(string path) {
			return ((QCompleter) interceptor).SplitPath(path);
		}
		[Q_SLOT("void complete(const QRect&)")]
		[SmokeMethod("complete", "(const QRect&)", "#")]
		public void Complete(QRect rect) {
			((QCompleter) interceptor).Complete(rect);
		}
		[Q_SLOT("void complete()")]
		[SmokeMethod("complete", "()", "")]
		public void Complete() {
			((QCompleter) interceptor).Complete();
		}
		[SmokeMethod("eventFilter", "(QObject*, QEvent*)", "##")]
		protected new virtual bool EventFilter(QObject o, QEvent e) {
			return ((QCompleter) interceptor).EventFilter(o,e);
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		protected new virtual bool Event(QEvent arg1) {
			return ((QCompleter) interceptor).Event(arg1);
		}
		~QCompleter() {
			DisposeQCompleter();
		}
		public new void Dispose() {
			DisposeQCompleter();
		}
		[SmokeMethod("~QCompleter", "()", "")]
		private void DisposeQCompleter() {
			((QCompleter) interceptor).DisposeQCompleter();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQCompleterSignals Emit {
			get { return (IQCompleterSignals) Q_EMIT; }
		}
	}

	public interface IQCompleterSignals : IQObjectSignals {
		[Q_SIGNAL("void activated(const QString&)")]
		void Activated(string text);
		[Q_SIGNAL("void activated(const QModelIndex&)")]
		void Activated(QModelIndex index);
		[Q_SIGNAL("void highlighted(const QString&)")]
		void Highlighted(string text);
		[Q_SIGNAL("void highlighted(const QModelIndex&)")]
		void Highlighted(QModelIndex index);
	}
}
