//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;

	[SmokeClass("QErrorMessage")]
	public class QErrorMessage : QDialog, IDisposable {
 		protected QErrorMessage(Type dummy) : base((Type) null) {}
		interface IQErrorMessageProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
			[SmokeMethod("qtHandler", "()", "")]
			QErrorMessage QtHandler();
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QErrorMessage), this);
			_interceptor = (QErrorMessage) realProxy.GetTransparentProxy();
		}
		private QErrorMessage ProxyQErrorMessage() {
			return (QErrorMessage) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QErrorMessage() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQErrorMessageProxy), null);
			_staticInterceptor = (IQErrorMessageProxy) realProxy.GetTransparentProxy();
		}
		private static IQErrorMessageProxy StaticQErrorMessage() {
			return (IQErrorMessageProxy) _staticInterceptor;
		}

		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QErrorMessage(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQErrorMessage(parent);
		}
		[SmokeMethod("QErrorMessage", "(QWidget*)", "#")]
		private void NewQErrorMessage(QWidget parent) {
			ProxyQErrorMessage().NewQErrorMessage(parent);
		}
		public QErrorMessage() : this((Type) null) {
			CreateProxy();
			NewQErrorMessage();
		}
		[SmokeMethod("QErrorMessage", "()", "")]
		private void NewQErrorMessage() {
			ProxyQErrorMessage().NewQErrorMessage();
		}
		[Q_SLOT("void showMessage(const QString&)")]
		[SmokeMethod("showMessage", "(const QString&)", "$")]
		public void ShowMessage(string message) {
			ProxyQErrorMessage().ShowMessage(message);
		}
		public static new string Tr(string s, string c) {
			return StaticQErrorMessage().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQErrorMessage().Tr(s);
		}
		public static QErrorMessage QtHandler() {
			return StaticQErrorMessage().QtHandler();
		}
		[SmokeMethod("done", "(int)", "$")]
		protected new void Done(int arg1) {
			ProxyQErrorMessage().Done(arg1);
		}
		~QErrorMessage() {
			DisposeQErrorMessage();
		}
		public new void Dispose() {
			DisposeQErrorMessage();
		}
		[SmokeMethod("~QErrorMessage", "()", "")]
		private void DisposeQErrorMessage() {
			ProxyQErrorMessage().DisposeQErrorMessage();
		}
		protected new IQErrorMessageSignals Emit {
			get {
				return (IQErrorMessageSignals) Q_EMIT;
			}
		}
	}

	public interface IQErrorMessageSignals : IQDialogSignals {
	}
}
