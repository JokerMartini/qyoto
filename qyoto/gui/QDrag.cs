//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	/// See <see cref="IQDragSignals"></see> for signals emitted by QDrag
	[SmokeClass("QDrag")]
	public class QDrag : QObject, IDisposable {
 		protected QDrag(Type dummy) : base((Type) null) {}
		[SmokeClass("QDrag")]
		interface IQDragProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDrag), this);
			interceptor = (QDrag) realProxy.GetTransparentProxy();
		}
		private static IQDragProxy staticInterceptor = null;
		static QDrag() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDragProxy), null);
			staticInterceptor = (IQDragProxy) realProxy.GetTransparentProxy();
		}
		public QDrag(QWidget dragSource) : this((Type) null) {
			CreateProxy();
			NewQDrag(dragSource);
		}
		[SmokeMethod("QDrag", "(QWidget*)", "#")]
		private void NewQDrag(QWidget dragSource) {
			((QDrag) interceptor).NewQDrag(dragSource);
		}
		[SmokeMethod("setMimeData", "(QMimeData*)", "#")]
		public void SetMimeData(QMimeData data) {
			((QDrag) interceptor).SetMimeData(data);
		}
		[SmokeMethod("mimeData", "() const", "")]
		public QMimeData MimeData() {
			return ((QDrag) interceptor).MimeData();
		}
		[SmokeMethod("setPixmap", "(const QPixmap&)", "#")]
		public void SetPixmap(QPixmap arg1) {
			((QDrag) interceptor).SetPixmap(arg1);
		}
		[SmokeMethod("pixmap", "() const", "")]
		public QPixmap Pixmap() {
			return ((QDrag) interceptor).Pixmap();
		}
		[SmokeMethod("setHotSpot", "(const QPoint&)", "#")]
		public void SetHotSpot(QPoint hotspot) {
			((QDrag) interceptor).SetHotSpot(hotspot);
		}
		[SmokeMethod("hotSpot", "() const", "")]
		public QPoint HotSpot() {
			return ((QDrag) interceptor).HotSpot();
		}
		[SmokeMethod("source", "() const", "")]
		public QWidget Source() {
			return ((QDrag) interceptor).Source();
		}
		[SmokeMethod("target", "() const", "")]
		public QWidget Target() {
			return ((QDrag) interceptor).Target();
		}
		[SmokeMethod("start", "(Qt::DropActions)", "$")]
		public Qt.DropAction Start(int supportedActions) {
			return ((QDrag) interceptor).Start(supportedActions);
		}
		[SmokeMethod("start", "()", "")]
		public Qt.DropAction Start() {
			return ((QDrag) interceptor).Start();
		}
		[SmokeMethod("setDragCursor", "(const QPixmap&, Qt::DropAction)", "#$")]
		public void SetDragCursor(QPixmap cursor, Qt.DropAction action) {
			((QDrag) interceptor).SetDragCursor(cursor,action);
		}
		~QDrag() {
			DisposeQDrag();
		}
		public new void Dispose() {
			DisposeQDrag();
		}
		[SmokeMethod("~QDrag", "()", "")]
		private void DisposeQDrag() {
			((QDrag) interceptor).DisposeQDrag();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQDragSignals Emit {
			get { return (IQDragSignals) Q_EMIT; }
		}
	}

	public interface IQDragSignals : IQObjectSignals {
		[Q_SIGNAL("void actionChanged(Qt::DropAction)")]
		void ActionChanged(Qt.DropAction action);
		[Q_SIGNAL("void targetChanged(QWidget*)")]
		void TargetChanged(QWidget newTarget);
	}
}
