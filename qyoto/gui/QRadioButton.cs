//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QRadioButton")]
	public class QRadioButton : QAbstractButton, IDisposable {
 		protected QRadioButton(Type dummy) : base((Type) null) {}
		[SmokeClass("QRadioButton")]
		interface IQRadioButtonProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QRadioButton), this);
			interceptor = (QRadioButton) realProxy.GetTransparentProxy();
		}
		private static IQRadioButtonProxy staticInterceptor = null;
		static QRadioButton() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQRadioButtonProxy), null);
			staticInterceptor = (IQRadioButtonProxy) realProxy.GetTransparentProxy();
		}
		public QRadioButton(QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQRadioButton(parent);
		}
		[SmokeMethod("QRadioButton", "(QWidget*)", "#")]
		private void NewQRadioButton(QWidget parent) {
			((QRadioButton) interceptor).NewQRadioButton(parent);
		}
		public QRadioButton() : this((Type) null) {
			CreateProxy();
			NewQRadioButton();
		}
		[SmokeMethod("QRadioButton", "()", "")]
		private void NewQRadioButton() {
			((QRadioButton) interceptor).NewQRadioButton();
		}
		public QRadioButton(string text, QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQRadioButton(text,parent);
		}
		[SmokeMethod("QRadioButton", "(const QString&, QWidget*)", "$#")]
		private void NewQRadioButton(string text, QWidget parent) {
			((QRadioButton) interceptor).NewQRadioButton(text,parent);
		}
		public QRadioButton(string text) : this((Type) null) {
			CreateProxy();
			NewQRadioButton(text);
		}
		[SmokeMethod("QRadioButton", "(const QString&)", "$")]
		private void NewQRadioButton(string text) {
			((QRadioButton) interceptor).NewQRadioButton(text);
		}
		[SmokeMethod("sizeHint", "() const", "")]
		public override QSize SizeHint() {
			return ((QRadioButton) interceptor).SizeHint();
		}
		[SmokeMethod("event", "(QEvent*)", "#")]
		protected override bool Event(QEvent e) {
			return ((QRadioButton) interceptor).Event(e);
		}
		[SmokeMethod("hitButton", "(const QPoint&) const", "#")]
		protected override bool HitButton(QPoint arg1) {
			return ((QRadioButton) interceptor).HitButton(arg1);
		}
		[SmokeMethod("paintEvent", "(QPaintEvent*)", "#")]
		protected override void PaintEvent(QPaintEvent arg1) {
			((QRadioButton) interceptor).PaintEvent(arg1);
		}
		[SmokeMethod("mouseMoveEvent", "(QMouseEvent*)", "#")]
		protected override void MouseMoveEvent(QMouseEvent arg1) {
			((QRadioButton) interceptor).MouseMoveEvent(arg1);
		}
		~QRadioButton() {
			DisposeQRadioButton();
		}
		public new void Dispose() {
			DisposeQRadioButton();
		}
		[SmokeMethod("~QRadioButton", "()", "")]
		private void DisposeQRadioButton() {
			((QRadioButton) interceptor).DisposeQRadioButton();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQRadioButtonSignals Emit {
			get { return (IQRadioButtonSignals) Q_EMIT; }
		}
	}

	public interface IQRadioButtonSignals : IQAbstractButtonSignals {
	}
}
