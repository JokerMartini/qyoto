//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QDragEnterEvent")]
	public class QDragEnterEvent : QDragMoveEvent, IDisposable {
 		protected QDragEnterEvent(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDragEnterEvent), this);
			interceptor = (QDragEnterEvent) realProxy.GetTransparentProxy();
		}
		public QDragEnterEvent(QPoint pos, int actions, QMimeData data, int buttons, int modifiers) : this((Type) null) {
			CreateProxy();
			NewQDragEnterEvent(pos,actions,data,buttons,modifiers);
		}
		[SmokeMethod("QDragEnterEvent", "(const QPoint&, Qt::DropActions, const QMimeData*, Qt::MouseButtons, Qt::KeyboardModifiers)", "#$#$$")]
		private void NewQDragEnterEvent(QPoint pos, int actions, QMimeData data, int buttons, int modifiers) {
			((QDragEnterEvent) interceptor).NewQDragEnterEvent(pos,actions,data,buttons,modifiers);
		}
		~QDragEnterEvent() {
			DisposeQDragEnterEvent();
		}
		public new void Dispose() {
			DisposeQDragEnterEvent();
		}
		[SmokeMethod("~QDragEnterEvent", "()", "")]
		private void DisposeQDragEnterEvent() {
			((QDragEnterEvent) interceptor).DisposeQDragEnterEvent();
		}
	}
}
