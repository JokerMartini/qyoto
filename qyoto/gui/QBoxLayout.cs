//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QBoxLayout")]
	public class QBoxLayout : QLayout, IDisposable {
 		protected QBoxLayout(Type dummy) : base((Type) null) {}
		[SmokeClass("QBoxLayout")]
		interface IQBoxLayoutProxy {
			[SmokeMethod("tr", "(const char*, const char*)", "$$")]
			string Tr(string s, string c);
			[SmokeMethod("tr", "(const char*)", "$")]
			string Tr(string s);
		}
		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QBoxLayout), this);
			interceptor = (QBoxLayout) realProxy.GetTransparentProxy();
		}
		private static IQBoxLayoutProxy staticInterceptor = null;
		static QBoxLayout() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQBoxLayoutProxy), null);
			staticInterceptor = (IQBoxLayoutProxy) realProxy.GetTransparentProxy();
		}
		public enum Direction {
			LeftToRight = 0,
			RightToLeft = 1,
			TopToBottom = 2,
			BottomToTop = 3,
			Down = TopToBottom,
			Up = BottomToTop,
		}
		public QBoxLayout(QBoxLayout.Direction arg1, QWidget parent) : this((Type) null) {
			CreateProxy();
			NewQBoxLayout(arg1,parent);
		}
		[SmokeMethod("QBoxLayout", "(QBoxLayout::Direction, QWidget*)", "$#")]
		private void NewQBoxLayout(QBoxLayout.Direction arg1, QWidget parent) {
			((QBoxLayout) interceptor).NewQBoxLayout(arg1,parent);
		}
		public QBoxLayout(QBoxLayout.Direction arg1) : this((Type) null) {
			CreateProxy();
			NewQBoxLayout(arg1);
		}
		[SmokeMethod("QBoxLayout", "(QBoxLayout::Direction)", "$")]
		private void NewQBoxLayout(QBoxLayout.Direction arg1) {
			((QBoxLayout) interceptor).NewQBoxLayout(arg1);
		}
		[SmokeMethod("direction", "() const", "")]
		public QBoxLayout.Direction direction() {
			return ((QBoxLayout) interceptor).direction();
		}
		[SmokeMethod("setDirection", "(QBoxLayout::Direction)", "$")]
		public void SetDirection(QBoxLayout.Direction arg1) {
			((QBoxLayout) interceptor).SetDirection(arg1);
		}
		[SmokeMethod("addSpacing", "(int)", "$")]
		public void AddSpacing(int size) {
			((QBoxLayout) interceptor).AddSpacing(size);
		}
		[SmokeMethod("addStretch", "(int)", "$")]
		public void AddStretch(int stretch) {
			((QBoxLayout) interceptor).AddStretch(stretch);
		}
		[SmokeMethod("addStretch", "()", "")]
		public void AddStretch() {
			((QBoxLayout) interceptor).AddStretch();
		}
		[SmokeMethod("addWidget", "(QWidget*, int, Qt::Alignment)", "#$$")]
		public void AddWidget(QWidget arg1, int stretch, int alignment) {
			((QBoxLayout) interceptor).AddWidget(arg1,stretch,alignment);
		}
		[SmokeMethod("addWidget", "(QWidget*, int)", "#$")]
		public void AddWidget(QWidget arg1, int stretch) {
			((QBoxLayout) interceptor).AddWidget(arg1,stretch);
		}
		[SmokeMethod("addWidget", "(QWidget*)", "#")]
		public void AddWidget(QWidget arg1) {
			((QBoxLayout) interceptor).AddWidget(arg1);
		}
		[SmokeMethod("addLayout", "(QLayout*, int)", "#$")]
		public void AddLayout(QLayout layout, int stretch) {
			((QBoxLayout) interceptor).AddLayout(layout,stretch);
		}
		[SmokeMethod("addLayout", "(QLayout*)", "#")]
		public void AddLayout(QLayout layout) {
			((QBoxLayout) interceptor).AddLayout(layout);
		}
		[SmokeMethod("addStrut", "(int)", "$")]
		public void AddStrut(int arg1) {
			((QBoxLayout) interceptor).AddStrut(arg1);
		}
		[SmokeMethod("addItem", "(QLayoutItem*)", "#")]
		public override void AddItem(IQLayoutItem arg1) {
			((QBoxLayout) interceptor).AddItem(arg1);
		}
		[SmokeMethod("insertSpacing", "(int, int)", "$$")]
		public void InsertSpacing(int index, int size) {
			((QBoxLayout) interceptor).InsertSpacing(index,size);
		}
		[SmokeMethod("insertStretch", "(int, int)", "$$")]
		public void InsertStretch(int index, int stretch) {
			((QBoxLayout) interceptor).InsertStretch(index,stretch);
		}
		[SmokeMethod("insertStretch", "(int)", "$")]
		public void InsertStretch(int index) {
			((QBoxLayout) interceptor).InsertStretch(index);
		}
		[SmokeMethod("insertWidget", "(int, QWidget*, int, Qt::Alignment)", "$#$$")]
		public void InsertWidget(int index, QWidget widget, int stretch, int alignment) {
			((QBoxLayout) interceptor).InsertWidget(index,widget,stretch,alignment);
		}
		[SmokeMethod("insertWidget", "(int, QWidget*, int)", "$#$")]
		public void InsertWidget(int index, QWidget widget, int stretch) {
			((QBoxLayout) interceptor).InsertWidget(index,widget,stretch);
		}
		[SmokeMethod("insertWidget", "(int, QWidget*)", "$#")]
		public void InsertWidget(int index, QWidget widget) {
			((QBoxLayout) interceptor).InsertWidget(index,widget);
		}
		[SmokeMethod("insertLayout", "(int, QLayout*, int)", "$#$")]
		public void InsertLayout(int index, QLayout layout, int stretch) {
			((QBoxLayout) interceptor).InsertLayout(index,layout,stretch);
		}
		[SmokeMethod("insertLayout", "(int, QLayout*)", "$#")]
		public void InsertLayout(int index, QLayout layout) {
			((QBoxLayout) interceptor).InsertLayout(index,layout);
		}
		[SmokeMethod("setStretchFactor", "(QWidget*, int)", "#$")]
		public bool SetStretchFactor(QWidget w, int stretch) {
			return ((QBoxLayout) interceptor).SetStretchFactor(w,stretch);
		}
		[SmokeMethod("setStretchFactor", "(QLayout*, int)", "#$")]
		public bool SetStretchFactor(QLayout l, int stretch) {
			return ((QBoxLayout) interceptor).SetStretchFactor(l,stretch);
		}
		[SmokeMethod("sizeHint", "() const", "")]
		public override QSize SizeHint() {
			return ((QBoxLayout) interceptor).SizeHint();
		}
		[SmokeMethod("minimumSize", "() const", "")]
		public override QSize MinimumSize() {
			return ((QBoxLayout) interceptor).MinimumSize();
		}
		[SmokeMethod("maximumSize", "() const", "")]
		public override QSize MaximumSize() {
			return ((QBoxLayout) interceptor).MaximumSize();
		}
		[SmokeMethod("hasHeightForWidth", "() const", "")]
		public override bool HasHeightForWidth() {
			return ((QBoxLayout) interceptor).HasHeightForWidth();
		}
		[SmokeMethod("heightForWidth", "(int) const", "$")]
		public override int HeightForWidth(int arg1) {
			return ((QBoxLayout) interceptor).HeightForWidth(arg1);
		}
		[SmokeMethod("minimumHeightForWidth", "(int) const", "$")]
		public override int MinimumHeightForWidth(int arg1) {
			return ((QBoxLayout) interceptor).MinimumHeightForWidth(arg1);
		}
		[SmokeMethod("expandingDirections", "() const", "")]
		public override int ExpandingDirections() {
			return ((QBoxLayout) interceptor).ExpandingDirections();
		}
		[SmokeMethod("invalidate", "()", "")]
		public override void Invalidate() {
			((QBoxLayout) interceptor).Invalidate();
		}
		[SmokeMethod("itemAt", "(int) const", "$")]
		public override IQLayoutItem ItemAt(int arg1) {
			return ((QBoxLayout) interceptor).ItemAt(arg1);
		}
		[SmokeMethod("takeAt", "(int)", "$")]
		public override IQLayoutItem TakeAt(int arg1) {
			return ((QBoxLayout) interceptor).TakeAt(arg1);
		}
		[SmokeMethod("count", "() const", "")]
		public override int Count() {
			return ((QBoxLayout) interceptor).Count();
		}
		[SmokeMethod("setGeometry", "(const QRect&)", "#")]
		public override void SetGeometry(QRect arg1) {
			((QBoxLayout) interceptor).SetGeometry(arg1);
		}
		[SmokeMethod("insertItem", "(int, QLayoutItem*)", "$#")]
		protected void InsertItem(int index, IQLayoutItem arg2) {
			((QBoxLayout) interceptor).InsertItem(index,arg2);
		}
		~QBoxLayout() {
			DisposeQBoxLayout();
		}
		public new void Dispose() {
			DisposeQBoxLayout();
		}
		[SmokeMethod("~QBoxLayout", "()", "")]
		private void DisposeQBoxLayout() {
			((QBoxLayout) interceptor).DisposeQBoxLayout();
		}
		public static string Tr(string s, string c) {
			return staticInterceptor.Tr(s,c);
		}
		public static string Tr(string s) {
			return staticInterceptor.Tr(s);
		}
		protected new IQBoxLayoutSignals Emit {
			get { return (IQBoxLayoutSignals) Q_EMIT; }
		}
	}

	public interface IQBoxLayoutSignals : IQLayoutSignals {
	}
}
