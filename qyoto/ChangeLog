2007-02-14  Arno Rehn  <arno@arnorehn.de>

	* Implemented adding Q_PROPERTY's to the QMetaObject. Next step is
	  adding classes like InvokeSlot for properties in qyoto.cpp.
	* When retrieving slot signatures, also include the slots of the superclass,
	  if it isn't a native C++ class. Same has to be done for signals.
	* Did some code cleanup:
		* Moved QyotoMetaData class into a seperate file, QyotoMetaData.cs
		* Made code in QyotoMetaData better readable

2007-02-14  Arno Rehn  <arno@arnorehn.de>

	* Fixed compilation error in t14
	* Modified all CMakeLists.txt to produce nicer output

2007-02-14  Richard Dale  <rdale@foton.es>

	* Added cmake files for building the csrcc tool
	* Fix the cmake file for building the uics tool
	* Specify the ${UICS_PATH} and ${CSRCC_PATH} as their relative positions
	  within the qyoto project.

2007-02-13  Richard Dale  <rdale@foton.es>

	* Removed the signal spy check and replaced it with a global flag 
	  'application_terminated'. Once the flag is set, destructors are no
	  longer called.

2007-02-12  Richard Dale  <rdale@foton.es>

	* The scheme for caching the smoke methodId inside a SmokeMethod Attribute
	  didn't work, and the value returned was always -1, even when it had been
	  set to a value. So use a dictionary of type Dictionary<MethodInfo, int>
	  as a cache instead.
	* When a destructor has been called, remove the item from the weak 
	  reference map
	* Additionally, in a destructor free the smokeqyoto_object struct, and
	  set the pointer to it in the C# instance to 0.

2007-02-11  Richard Dale  <rdale@foton.es>

	* Don't call a destructor is the instance was allocated in the C++ world
	* If a destructor has been called then set the ptr field on the 
	  smokeqyoto_object struct to 0, and don't call methods on it again.
	* Renamed IsInstanceContained() as IsContainedInstance(), and only call
	  a destructor for instances where it is false, as the C++ side will
	  delete the instance.
	* Q_INIT_RESOURCE() now correctly finds the resource class to load
	* Added QT_TRANSLATE_NOOP() and QT_TR_NOOP() methods

2007-02-10  Arno Rehn  <arno@arnorehn.de>

	* If the aboutToQuit() signal is catched, no destructors will be called.
	  Replaces the check for qApp == 0. No warning about QSocketNotifiers at
	  the end of the main event loop anymore.

2007-02-10  Richard Dale  <rdale@foton.es>

	* Improved debug messages in SmokeInvocation.cs
	* The csrcc tool nearly works, but Qt.Q_INIT_RESOURCE() can't find the
	  class where the resource is.

2007-02-09  Arno Rehn  <arno@arnorehn.de>

	* When a qApp instance was destroyed, it would automatically destroy all
	  other Qt objects, in some cases our own destructor calls could interfere
	  with this mechanism. Fixed by checking if qApp == 0 and if so skipping
	  the destructor calls.

2007-02-09  Richard Dale  <rdale@foton.es>

	* Renamed CreateStrongReference() as IsInstanceContained()
	* Added 'csrcc', a C# version of the Qt rcc tool
	* Added the graphicsview/collidingmice example
	* Fixed code generation of the csrcc tool, and added a static
	  constructor
	* Added a cmake rule for a ${CSRCC_PATH} variable

2007-02-08  Arno Rehn  <arno@arnorehn.de>

	* Made destructors work. The only problem was that we have to check
	  if the instance of which a method should be invoked still exists.
	  This was not the case, e.g. if the QApplication instance was destroyed
	  at the end of an app and with it all other Qt instances.
	  Now the DeleteQApp-Hack isn't needed anymore, too.

2007-02-08  Richard Dale  <rdale@foton.es>

	* Added a first attempt at setting up the strongReferenceMap and calling
	  destructors. A boolean function CreateStrongReference() checks whether
	  or not a strong reference is needed when a new instance has been
	  constructed. Another function is needed to checked whether the C++
	  instance still has a parent or container, and not delete if it has.

	* Currently apps crash on exit, but the Qyoto.DeleteQApp()
	  hack shouldn't be need anymore once destructors are working.

2007-02-08  Arno Rehn  <arno@arnorehn.de>

	* Fixed names of flags in Qyoto.cs
	* Modified CMakeLists.txt to output more infos and to get out-of-source-dir
	  builds working

2007-02-08  Richard Dale  <rdale@foton.es>

	* Fixed bugs in the debug dump of QMetaObjects created at runtime
	* Normalized some code layout
	* Only QApplication and QCoreApplication destructors are now called
	* Added a strongReferenceMap to hold a mapping from a C++ pointer to
	  a C# instance. It is used to prevent garbage collection for instances
	  which are contained in another instance, such as a QObject with a
	  parent, even when there are no references to the child within the C#
	  Qyoto application code. When the parent finally deletes the child on 
	  the C++ side, the reference is removed from the Dictionary by the 
	  SmokeMarshallers.UnmapPointer() method.
	* Renamed the QTDB_METHOD_MISSING debugging flag as QTDB_TRANSPARENT_PROXY

2007-02-07  Richard Dale  <rdale@foton.es>

	* Added a Debug.DebugChannel() method to get debug setting in C#

2007-02-06  Richard Dale  <rdale@foton.es>

	* Added a QPair struct corresponding to the C++ one, and generate
	  method calls with arguments that use it
	* Generate accessor methods for static variables and instance variables
	* Added the widgets/analogclock example
	* Fixed bug in marshalling QVector types with an unitialise variable in
	  a for loop
	* Added QMin() and QMax() methods
	* Added marshalling for StringBuilder <--> QStrings
	* Add a generically typed QDBusVariant.FromValue() method to make 
	  constructing them less ugly.
	* Use reflection via GetType() to find out whether a string or a 
	  StringBuilder needs to be marshalled to a QString

2007-02-05  Richard Dale  <rdale@foton.es>

	* Moved operator methods out of Qt.cs, and made them operator
	  methods in the classes of their arguments. In Qt.cs they
	  had to be translated to use names like op_mult() or op_add()
	  because C# only allows operator methods to be defined in the
	  class of one of their arguments. Now they are proper operator
	  methods which looks better.

2007-02-04  Richard Dale  <rdale@foton.es>

	* Updated the project TODO list
	* Added a a Qyoto Debug class for turning on debugging options
	  Example usage:

		Debug.SetDebug(QtDebugChannel.QTDB_VIRTUAL);

	  This will show the virtual method callbacks from the Smoke lib
	* Removed core/QGlobalSpace.cs as it isn't needed because the methods in 
	  it are in Qt.cs
	* The 'operator<<' and 'operator>>' methods are no longer renamed 
	  'op_write' and 'op_read', but 'Write' and 'Read' instead.
	* Started to implement QObject.FindChild() and QObject.FindChildren(),
	  but the code needs to be translated from QtRuby.
	* Removed unwanted blank lines from the generated code.

2007-02-03  Richard Dale  <rdale@foton.es>

	* The SmokeMethod attribute constructor now takes three arguments,
	  for example:

		[SmokeMethod("eventFilter", "(QObject*, QEvent*)", "##")]
		public virtual bool EventFilter(QObject arg1, QEvent arg2) {
			return ProxyQObject().EventFilter(arg1,arg2);
		}

	* There are four properties to access the values of a SmokeMethod.
	  For example:

		SmokeMethod.Name => "eventFilter"
		SmokeMethod.ArgsSignature => "(QObject*, QEvent*)"
		SmokeMethod.MungedName => "eventFilter##"
		SmokeMethod.Signature => "eventFilter(QObject*, QEvent*)"

	* Virtual method callbacks are now working again
	* In SmokeInvocation.Invoke() destructors aren't called until a way of
	  coordinating C# GC with C++ Qt instance deletion has been implemented.
	* C# operator methods are always static, and so the SmokeMethod Attribute
	  must be for the method in the I<classname>Proxy interface, rather than
	  on the static method call implementation.
	* Added a SmokeClass Attribute to the interfaces used to create the 
	  transparent proxy for static method invocations.
	* The SmokeClass Attribute is now used for the name of the class to use
	  when looking up methods in the Smoke library
	* The default format of a string in mono is utf8, and so assume that when
	  converting to and from QStrings.

2007-02-03  Richard Dale  <rdale@foton.es>

	* Added qdbus/remotecontrolledcar example
	* The enums named 'Type' clash with the C# method of the same name,
	  instead of renaming them 'E_Type', use 'TypeOf' as it looks better.
	* Changed the SmokeMethod Attribute to include the 'munged method name'
	  as well as the C++ type signature of the method's arguments. This 
	  make it easier and faster to look up the method in the Smoke library
	  at runtime. The SmokeMethod attribute wasn't working with static
	  methods as it needed to be on the interface where the static method
	  was defined, and not on the method itself. For instance, an instance
	  method is now defined like this:

		[SmokeMethod("setParent#", "(QObject*)")]
		public void SetParent(QObject arg1) {
			ProxyQObject().SetParent(arg1);
		}

	  And a static method is defined like this:

		[SmokeMethod("sessionBus", "()")]
		QDBusConnection SessionBus();
		...

		public static QDBusConnection SessionBus() {
			return StaticQDBusConnection().SessionBus();
		}

	  Once a methodId method selector has been looked up, it is cached inside
	  the SmokeMethod Attribute.
	* The generation of the 'munged method names' in the Attributes is currently
	  wrong, and needs fixing.

2007-02-02  Richard Dale  <rdale@foton.es>

	* Improved the debugging output for the content of a QMetaObject
	* Added the qdbus/chat example
	* Made the classes generated by uics public
	* Added a rule for setting up ${UICS_PATH}

2007-31-01  Richard Dale  <rdale@foton.es>

	* Changed the uics code generation to use C# properties
	* Special case shortcut properties to create a QKeySequence
	* Added an '-x' option to the uics tool to generate a Main method
	  for testing purposes
	* Made QWidget.MiniumumSizeHint a method rather than a property
	  and changed the uics code generation to match.

2007-30-01  Arno Rehn  <arno@arnorehn.de>

	* Fixed off-by-one mistake when invoking signals in SmokeInvocation.cs
	  and qyoto.cpp

2007-30-01  Richard Dale  <rdale@foton.es>

	* Fixed regressions caused by adding signal return values
	* Added a QDBusVariant class and marshalling for it
	* The complexpong example still doesn't return a QDBusVariant value

2007-29-01  Richard Dale  <rdale@foton.es>

	* Added reply values when emitting signals
	* Some static methods were being dropped because they had the same
	  name as property names. So make the static methods start with a
	  lower case letter and keep them.
	* When marshalling a QDBusVariant, special case as a QVariant as it
	  doesn't exist in the Smoke library, but is needed for QtDBus support.
	* Added a not quite working qdbus/complexpingpong example

2007-29-01  Arno Rehn  <arno@arnorehn.de>

	* Fixed compiler options in examples to use -r instead of -addmodule

2007-28-01  Richard Dale  <rdale@foton.es>

	* Commented out the QMetaObject.InvokeMethod() call in the pong.cs
	  example as it causes a crash
	* Fixed bug where the name of a slot was being lost when passed to
	  Invoke slot as a temporary 'const char *' that was being deleted
	  before it could be used.
	* In the C# to C++ list marshaller the temporary list of 'void*'s
	  was not being deleted. If a C++ list element instance aleady has
	  a mapping onto a C# instance, then use that.
	* Added a Q_PROPERTY atttribute to C# properties, restored Q_SLOT
	  properties which were not being generated from slots labelled
	  Q_SLOTS.

2007-26-01  Richard Dale  <rdale@foton.es>

	* Added the qdbus/listnames example
	* Added the qdbus/pingpong example
	* When the type signature of a slot was being derived from the types of
	  the C# arguments, a C# string should map onto 'QString' and not 'string'

2007-25-01  Richard Dale  <rdale@foton.es>

	* QObject.Emit is now a property, rather than a method. For example:

		protected new ICannonFieldSignals Emit {
			get {
				return (ICannonFieldSignals) Q_EMIT;
			}
		}

		...

		Emit.forceChanged(currentForce);

	* Only add C# set properties for Q_PROPERTYs with a WRITE option
	* Added cannon game tutorial t12
	* Added tutorials t13 and t14
	* QWidget.SizeHint is no longer a property as it needs to be overriden in
	  subclasses.

2007-24-01  Richard Dale  <rdale@foton.es>

	* Q_PROPERTYs are now mapped onto C# properties, and the correponding set
	  and get methods removed from the api
	* QDomNodeList is no longer an ArrayList type
	* Added QList<QRgb> as a C# List<uint> type
	* QVariant.Value() and QVariant.FromValue() now work correctly with enums
	* The Enums in properties are now fully qualified with the classname
	* Fixed up the code for the t11 example
	* Added some more CMakeLists.txt files
	* Implemented callbacks to construct QVariants and to get values via
	  QVariant.FromValue() and QVariant.Value() when the type is greater
	  than QVariant::LastCoreType

2007-22-01  Arno Rehn  <arno@arnorehn.de>

	* Updated marshallers to work with generic types

2007-22-01  Richard Dale  <rdale@foton.es>

	* Add QApplicationExtras.cs, QCoreApplicationExtras.cs and QtExtras.cs
	* Fix bug in setting up argv array passed to QApplication constructor
	  pointed out by Arno.
	* Convert to generic types for marshalling QLists, QVectors and QMaps,
	  and use C# List<>s and Dictionary<>s.
	* Convert qint64 and qlonglong to C# longs, and quint64 and qulonglong to
	  C# ulongs.

2007-21-01  Richard Dale  <rdale@foton.es>

	* Split QVariant.cs and QDBusConnectionInterface in two files with partial
	  classes to make customisation easier to maintain.
	* Fixed bugs in the code generation for args with QStrings or QStringLists
	  inside template type.
	* operator methods '<<' and '>>' were being converted to static methods even
	  when the methods couldn't be operator methods in C# and should have been
	  either 'op_read()' or 'op_write()' in which case they should be instance
	  methods.
	* Fixed parsing in for Q_PROPERTY which meant that some methods in 
	  QToolBar.cs were lost.
	* Added a QVariant.FromValue() method
	* Removed QTextCodecPlugin.cs
	* Fixed build error in QSysInfo.cs

2007-17-01  Arno Rehn  <arno@arnorehn.de>

	* Split SmokeInvocation.cs into SmokeInvocation.cs and SmokeMarshallers.cs
	* Updated CMakeLists.txt to work with more variables

2007-16-01  Richard Dale  <rdale@foton.es>

	* Added missing QX11EmbedContainer and QX11EmbedWidget classes

2007-15-01  Richard Dale  <rdale@foton.es>

	* Change the names of the methods that setup callbacks from
	  AddFoobar() to InstallFoobar(), where Foobar() is the callback
	  being setup.

2007-14-01  Paolo Capriotti  <paolo.capriotti@gmail.com>

	* Ported most of the .NET 1.1 code to .NET 2.0
	
2007-13-01  Richard Dale  <rdale@foton.es>

	* Added a generically typed QVariant.Value() method
	* QDBusReply uses QVariant.Value()
	* Added a couple of methods using QDBusReply to QDBusConnectionInterface

2007-12-01  Richard Dale  <rdale@foton.es>

	* Change the cmake build to use gmcs rather than mcs
	* Added a QDBusReply class using a generic type
	* Added some missing methods to QDBusConnectionInterface

2006-12-07  Richard Dale  <rdale@foton.es>

	* Use QDate, QDateTime and QTime for dates and times, not the C#
	  DateTime class
	* Added missing QAccessible* and QFileSystemWatcher classes

2006-12-06  Richard Dale  <rdale@foton.es>

	* Regenerate the Qyoto classes against the Qt 4.2.2 headers
	* Split the classes into core, qdbus, gui, network, opengl, sql, svg
      and xml directories corresponding to the Qt modules.
	* Changed the CMakeLists.txt build file to match the new structure

2006-12-04  Arno Rehn  <arno@arnorehn.de>

	* Added marshallers for QMaps

2006-12-02  Arno Rehn  <arno@arnorehn.de>

	* Added marshalling function for QList<int>

2006-11-26  Arno Rehn  <arno@arnorehn.de>

	* Added marshall_ItemList and all DEF_LIST_MARSHALLER and
	  DEF_VALUELIST_MARSHALLER from qtruby.
	* Added a CMake file for compilation with CMake. Still keeping
	  the old makefile in case for some reason we need it again.

2006-10-23  Arno Rehn  <arno@arnorehn.de>

	* Marshalling ItemLists should now fully work. But we still need
	  many of the DEF_VALUELIST_MARSHALLER things.

2006-10-23  Arno Rehn  <arno@arnorehn.de>

	* Added more code for marshalling QLists. QList<T> return types
	  should now work for all QLists where T is not a primitive type.

2006-10-23  Richard Dale  <rdale@foton.es>

	* When a QMetaObject was constructed, the parent was wrongly being
	  set to the superclass of the superclass, rather than just the
	  superclass
	* If no Emit() method is found for a class, assume it doesn't have
	  any signals and don't include any in the QMetaObject for it.
	* Only look for methods marked Q_SLOT in the current class, and not
	  the superclasses when constructing a QMetaObject.

2006-10-22  Arno Rehn  <arno@arnorehn.de>

	* Currect return value for QyotoSmokeBinding::callMethod() where
	  it would return 'true' if metaObject() was overriden
	  (fixes QDockWidget bug)
	* Fixed some internal class names

2006-10-20  Richard Dale  <rdale@foton.es>

	* Added alloc_smokeqyoto_object() and free_smokeqyoto_object() f'ns

2006-10-19  Arno Rehn  <arno@arnorehn.de>

	* Fixed marshalling of QStringLists

2006-10-19  Arno Rehn  <arno@arnorehn.de>

	* Added support for marshalling C++-QStringLists to C#-ArrayLists
	  (not tested yet)

2006-10-19  Richard Dale  <rdale@foton.es>

	* Removed Qt3 Qyoto sources
	* Moved Qyoto.cs to the top directory, so that only autogenerated
	  classes are in the qyoto directory.
	* Added some non-working list marshalling code for QStringLists and 
	  QList<QVector> so that they can be used for getting QDBus to work
	* Removed assignment to the qApp global variable in the QCoreApplication
	  constructor as C# doesn't support downcasting.

2006-10-18  Richard Dale  <rdale@foton.es>

	* Enum return types were failing with an invalid cast error.
	  They are now created correctly with a Enum.ToObject() call.
	* Regenerated the QDBus* classes from the Qt 4.2 headers

2006-10-18  Arno Rehn  <arno@arnorehn.de>

	* Implemented a very ugly hack to construct a QMainWindow in C++ and set
	  the resulting smokeqyoto_object to the C#-instance. This fixes the
	  QDockWidgets not being movable.
	  Needs improvement!

2006-10-18  Arno Rehn  <arno@arnorehn.de>

	* Added a methodCache, so if a methodId has already been looked up it can
	  be retrieved from the methodCache.

2006-10-15  Richard Dale  <rdale@foton.es>

	* When there was more than one possible candidate for a method in the
	  Smoke library, the SmokeInvocation code was just choosing the first one
	  it found. Added some code to select the one that matched the SmokeMethod()
	  type signature annotation. Fixes problem reported by Arno Rehn.

2006-10-06  Arno Rehn  <arno@arnorehn.de>

	* Fixed some problems with enums in uics.
	* Fixed problem where SetupUi() and RetranslateUi() weren't accessible
	  due to a missing 'public'

2006-10-06  Arno Rehn  <arno@arnorehn.de>

	* Copied over some fixes from QtRuby:
		* Fixed a bug in slot return values where they were only
		  working when a signal was emitted in Ruby, and not when
		  a C++ signal was emitted. The zeroth element in the array
		  of 'void*'s passed to qt_metacall() was being overwritten
		  by a pointer to the result of the slot invocation. Instead
		  the pointer in the zeroth element is now correctly deref'd,
		  and the result put where it points to.

2006-10-06  Arno Rehn  <arno@arnorehn.de>

	* Implemented Q_CLASSINFO and Q_SCRIPTABLE attributes.
	* Fixed an error in the automatic signature generation when return type was
	  void.

2006-10-04  Arno Rehn  <arno@arnorehn.de>

	* Now slot return values should work, but didn't test it.

2006-10-03  Arno Rehn  <arno@arnorehn.de>

	* Fixed crash when constructing a QSpacerItem (may need improvement)
	* Fixed crash when GetSmokeObject() was called without a proper InstanceHandle

2006-09-23  Richard Dale  <rdale@foton.es>

	* Fixed crash when a class didn't have any signals defined

2006-09-23  Arno Rehn  <arno@arnorehn.de>

	* The signatures for slots and signals are now autogenerated, so it's not necessary
	  anymore to specify them by hand. It's still possible, though.
	* The signal signatures are now stored in a Hashtable, too.

2006-09-22  Arno Rehn  <arno@arnorehn.de>

	* The return type of a slot is now being added to the definition in the QMetaObject
	* Added a struct which holds the MethodInfo, the signature and the return type of a slot.
	  This struct is now the 'Value' in the Slot-Hashtable

2006-09-17  Richard Dale  <rdale@foton.es>

	* Applied patches from Arno Rehn:
		* Added the code from QtRuby to marshall slot return types
		* TODO: add code to parse the return type in a Q_SLOT() attribute, and add it
		  to the slot's definition in the QMetaObject

2006-09-11  Richard Dale  <rdale@foton.es>

	* Applied patches from Arno Rehn:
		* Fixed a bug in emitting signals where the arguments were being
		  wrongly copied from the C# argument array to the smoke stack
		  with an 'off by one' error.
		* A Qt.dll is now built by the makefile instead of all the sources
		  always all being compiled.

2006-08-24  Richard Dale  <rdale@foton.es>

	* Applied patches from Arno Rehn:
		* Prevent crash when a custom slot was defined with no arguments
		* Fix crash when on application exit by deleting the qApp
		  QApplication instance

2006-07-16  Richard Dale  <rdale@foton.es>

	* Regenerated the C# sources from the Qt 4.2 headers

2006-06-08  Richard Dale  <rdale@foton.es>

	* Add SmokeMethod() attribute to destructors
	* More list arguments are now C# ArrayLists

2006-06-09  Paolo Capriotti  <paolo.capriotti@gmail.com>

	* Added example t10.

2006-06-09  Paolo Capriotti  <paolo.capriotti@gmail.com>

	* Added example t9.

2006-06-09  Paolo Capriotti  <paolo.capriotti@gmail.com>

	* Added example t8. It almost works.
	* Fixed resolve_classname.
	* Added IDisposable to QObject's parents.
	* Fixed off-by-one error when handling arguments in
	  SmokeInvocation.InvokeMethod.

2006-06-08  Richard Dale  <rdale@foton.es>

	* Example t7 now works, which means that both custom slots
	  slots and signals work.
	* At present an Emit() method and signals interface is
	  needed for classes which don't have any custom signals
	* The example wasn't working because the slots and signals
	  had return types of 'void', and slot/signal return values
	  haven't been implemented yet.

2006-06-08  Paolo Capriotti  <paolo.capriotti@gmail.com>

	* The overriden MetaObject is now called in place
	  of the qt version.
	* make_metaObject didn't create the parent meta object
	  correctly. Modified it so that it calls the parent version
	  of metaObject().
	* Slot arguments are now handled correctly.
	* Added static IsSmokeClass method to Qyoto.

2006-06-08  Richard Dale  <rdale@foton.es>

	* Added the QtDBus classes

2006-06-07  Paolo Capriotti  <paolo.capriotti@gmail.com>

	* Changed all occurences of Qt namespace to Qyoto in qyoto.cpp
	* Restored the _smokeObject field in QObject.

2006-06-06  Richard Dale  <rdale@foton.es>

	* Added a Q_SCRIPTABLE attribute for dbus support
	* The Qt class needs to be a MarshallByRefObject instance for
	  transparent proxies to work with its subclasses
	* Added a Q_CLASSINFO attribute for dbus support

2006-06-05  Richard Dale  <rdale@foton.es>

	* QObject is now a subclass of Qt, as suggested in the previous
	  commit.
	* The Qyoto classes are now in a namespace called 'Qyoto' rather
	  than 'Qt'. It would probably be best to make QObject.cs a sub
	  class of Qt, to avoid needed to prefix SLOT() and SIGNAL() with
	  'Qt.' in QObject subclasses.
	* Added QObject.MetaObject() as specified by Paolo for custom slots
	  and signals.
	* Fixed the 'Hello.cs' example to work with the new namespace

2006-06-02  Richard Dale  <rdale@foton.es>

	* Invocations of signals via the qt_metacall() C function
	  are now special cased, and QMetaObject::activate() is used
	  to call them. C# slots are still invoked via the InvokeSlot
	  class.
	* Fixed bug when emitting signals for pointer arg types
	* setMocType() now works with reference types when there
	  in no corresponding value type in the Smoke lib.

2006-05-31  Paolo Capriotti  <paolo.capriotti@gmail.com>

	* Avoided some useless method calls to handle qt_metacall
	  (removed InvokeMetaCallMethod and QyotoMetaCall)
	* Fixed QMetaObject creation
		* data and stringdata are now copied in C++ code to prevent 
		  garbage collection.
		* Changed data in QMetaObject to an array of uint instead of int.
	* Removed the void** marshaller since it was unneeded.
	* Partially implemented custom slot invocation.
	* Added tutorial 7 (doesn't work yet).

2006-05-31  Richard Dale  <rdale@foton.es>

	* Moved the tutorial examples to examples/tutorial

2006-05-31  Paolo Capriotti  <paolo.capriotti@gmail.com>

	* Added a void** marshaller in handler.cpp (needed for qt_metacall).
	* Decommented InvokeSlot and ported to qt4 (invokeSlot() method still empty).
	* Added some code to intercept a qt_metacall and invoke the corresponding slot (doesn't work yet).
	* Rewritten Hello.cs to test custom slot invocation.

2006-05-30  Richard Dale  <rdale@foton.es>

	* Applied patch from Arno Rehn for bringing the Qt3 version of Qyoto
	  up to date with the Qt4 one wrt Paulo's changes

2006-05-29  Richard Dale  <rdale@foton.es>

	* More fixes from Paulo:
	* To avoid virtual method dispatch resulting in infinite loop, the
	  meta object instance is now created in c++ code using smoke (just as
	  in qtruby).
	* Qyoto.GetMetaObject now works for Qt types as well
	* Decommented code in set_obj_info. This function is used by the
	  return value marshaller for non-primitive types and by
	  make_metaObject.

	* Added patch from Paulo Capriotti to create a QMetaObject at runtime
	  for a Qyoto class with custom slots and/or signals

2006-05-26  Richard Dale  <rdale@foton.es>

	* Added code from Arno Rehn to access obtain the return value of
	  a classes Emit() method as an interface and obtain the C++ signal 
	  type signatures and set them up in HashTables with a top level
	  table with the classes as keys, containing sub tables with the
	  C++ signatures as keys which map onto the correponding C# 
	  MethodInfo as a value
	* Some fixes from Paolo Capriotti:
		* Added fix for a crash in SmokeInvocation.cs when a class with
		  virtual methods wasn't a subclass of Qt
		* The code for emitting signals now works with Qt4
		* The code in QObject.cs to set up the transparent proxy Q_EMIT 
		  for an instance's signal interfaces now works.

2006-05-26  Richard Dale  <rdale@foton.es>

	* The Hash table to get a marshaller given a type name wasn't working.
	  Thanks to Paolo Capriotti for the fix.

2006-04-21  sedwards

	* C# bindings roughly converted from Qt3 to Qt4. (doesn't work yet).

2006-05-01  Richard Dale  <Richard_Dale@tipitina.demon.co.uk>

	* Regenerated the Qt4 *.cs sources

2006-02-14  Richard Dale  <Richard_Dale@tipitina.demon.co.uk>

	* Added a TODO list, and this ChangeLog to the project

