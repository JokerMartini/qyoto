2006-06-05  Richard Dale  <rdale@foton.es>

	* The Qyoto classes are now in a namespace called 'Qyoto' rather
	  than 'Qt'. It would probably be best to make QObject.cs a sub
	  class of Qt, to avoid needed to prefix SLOT() and SIGNAL() with
	  'Qt.' in QObject subclasses.
	* Added QObject.MetaObject() as specified by Paolo for custom slots
	  and signals.
	* Fixed the 'Hello.cs' example to work with the new namespace

2006-06-02  Richard Dale  <rdale@foton.es>

	* Invocations of signals via the qt_metacall() C function
	  are now special cased, and QMetaObject::activate() is used
	  to call them. C# slots are still invoked via the InvokeSlot
	  class.
	* Fixed bug when emitting signals for pointer arg types
	* setMocType() now works with reference types when there
	  in no corresponding value type in the Smoke lib.

2006-05-31  Paolo Capriotti  <paolo.capriotti@gmail.com>

	* Avoided some useless method calls to handle qt_metacall
	  (removed InvokeMetaCallMethod and QyotoMetaCall)
	* Fixed QMetaObject creation
		* data and stringdata are now copied in C++ code to prevent 
		  garbage collection.
		* Changed data in QMetaObject to an array of uint instead of int.
	* Removed the void** marshaller since it was unneeded.
	* Partially implemented custom slot invocation.
	* Added tutorial 7 (doesn't work yet).

2006-05-31  Richard Dale  <rdale@foton.es>

	* Moved the tutorial examples to examples/tutorial

2006-05-31  Paolo Capriotti  <paolo.capriotti@gmail.com>

	* Added a void** marshaller in handler.cpp (needed for qt_metacall).
	* Decommented InvokeSlot and ported to qt4 (invokeSlot() method still empty).
	* Added some code to intercept a qt_metacall and invoke the corresponding slot (doesn't work yet).
	* Rewritten Hello.cs to test custom slot invocation.

2006-05-30  Richard Dale  <rdale@foton.es>

	* Applied patch from Arno Rehn for bringing the Qt3 version of Qyoto
	  up to date with the Qt4 one wrt Paulo's changes

2006-05-29  Richard Dale  <rdale@foton.es>

	* More fixes from Paulo:
	* To avoid virtual method dispatch resulting in infinite loop, the
	  meta object instance is now created in c++ code using smoke (just as
	  in qtruby).
	* Qyoto.GetMetaObject now works for Qt types as well
	* Decommented code in set_obj_info. This function is used by the
	  return value marshaller for non-primitive types and by
	  make_metaObject.

	* Added patch from Paulo Capriotti to create a QMetaObject at runtime
	  for a Qyoto class with custom slots and/or signals

2006-05-26  Richard Dale  <rdale@foton.es>

	* Added code from Arno Rehn to access obtain the return value of
	  a classes Emit() method as an interface and obtain the C++ signal 
	  type signatures and set them up in HashTables with a top level
	  table with the classes as keys, containing sub tables with the
	  C++ signatures as keys which map onto the correponding C# 
	  MethodInfo as a value
	* Some fixes from Paolo Capriotti:
		* Added fix for a crash in SmokeInvocation.cs when a class with
		  virtual methods wasn't a subclass of Qt
		* The code for emitting signals now works with Qt4
		* The code in QObject.cs to set up the transparent proxy Q_EMIT 
		  for an instance's signal interfaces now works.

2006-05-26  Richard Dale  <rdale@foton.es>

	* The Hash table to get a marshaller given a type name wasn't working.
	  Thanks to Paolo Capriotti for the fix.

2006-04-21  sedwards

	* C# bindings roughly converted from Qt3 to Qt4. (doesn't work yet).

2006-05-01  Richard Dale  <Richard_Dale@tipitina.demon.co.uk>

	* Regenerated the Qt4 *.cs sources

2006-02-14  Richard Dale  <Richard_Dale@tipitina.demon.co.uk>

	* Added a TODO list, and this ChangeLog to the project

