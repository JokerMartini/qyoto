//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QImageIOHandlerFactoryInterface")]
	public class QImageIOHandlerFactoryInterface : QFactoryInterface {
 		protected QImageIOHandlerFactoryInterface(Type dummy) : base((Type) null) {}
		interface IQImageIOHandlerFactoryInterfaceProxy {
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QImageIOHandlerFactoryInterface), this);
			_interceptor = (QImageIOHandlerFactoryInterface) realProxy.GetTransparentProxy();
		}
		private QImageIOHandlerFactoryInterface ProxyQImageIOHandlerFactoryInterface() {
			return (QImageIOHandlerFactoryInterface) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QImageIOHandlerFactoryInterface() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQImageIOHandlerFactoryInterfaceProxy), null);
			_staticInterceptor = (IQImageIOHandlerFactoryInterfaceProxy) realProxy.GetTransparentProxy();
		}
		private static IQImageIOHandlerFactoryInterfaceProxy StaticQImageIOHandlerFactoryInterface() {
			return (IQImageIOHandlerFactoryInterfaceProxy) _staticInterceptor;
		}

		[SmokeMethod("create(QIODevice*, const QByteArray&) const")]
		public virtual QImageIOHandler Create(IQIODevice device, QByteArray format) {
			return ProxyQImageIOHandlerFactoryInterface().Create(device,format);
		}
		[SmokeMethod("create(QIODevice*) const")]
		public virtual QImageIOHandler Create(IQIODevice device) {
			return ProxyQImageIOHandlerFactoryInterface().Create(device);
		}
		public QImageIOHandlerFactoryInterface() : this((Type) null) {
			CreateProxy();
			NewQImageIOHandlerFactoryInterface();
		}
		[SmokeMethod("QImageIOHandlerFactoryInterface()")]
		private void NewQImageIOHandlerFactoryInterface() {
			ProxyQImageIOHandlerFactoryInterface().NewQImageIOHandlerFactoryInterface();
		}
		~QImageIOHandlerFactoryInterface() {
			DisposeQImageIOHandlerFactoryInterface();
		}
		public new void Dispose() {
			DisposeQImageIOHandlerFactoryInterface();
		}
		[SmokeMethod("~QImageIOHandlerFactoryInterface()")]
		private void DisposeQImageIOHandlerFactoryInterface() {
			ProxyQImageIOHandlerFactoryInterface().DisposeQImageIOHandlerFactoryInterface();
		}
	}
}
