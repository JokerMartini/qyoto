//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QBasicTimer : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QBasicTimer(Type dummy) {}
		interface IQBasicTimerProxy {
		}

		protected void CreateQBasicTimerProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QBasicTimer), this);
			_interceptor = (QBasicTimer) realProxy.GetTransparentProxy();
		}
		private QBasicTimer ProxyQBasicTimer() {
			return (QBasicTimer) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QBasicTimer() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQBasicTimerProxy), null);
			_staticInterceptor = (IQBasicTimerProxy) realProxy.GetTransparentProxy();
		}
		private static IQBasicTimerProxy StaticQBasicTimer() {
			return (IQBasicTimerProxy) _staticInterceptor;
		}

		public QBasicTimer() : this((Type) null) {
			CreateQBasicTimerProxy();
			NewQBasicTimer();
		}
		private void NewQBasicTimer() {
			ProxyQBasicTimer().NewQBasicTimer();
		}
		public bool IsActive() {
			return ProxyQBasicTimer().IsActive();
		}
		public int TimerId() {
			return ProxyQBasicTimer().TimerId();
		}
		public void Start(int msec, QObject arg2) {
			ProxyQBasicTimer().Start(msec,arg2);
		}
		public void Stop() {
			ProxyQBasicTimer().Stop();
		}
		~QBasicTimer() {
			ProxyQBasicTimer().Dispose();
		}
		public void Dispose() {
			ProxyQBasicTimer().Dispose();
		}
	}
}
