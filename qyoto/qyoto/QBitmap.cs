//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QBitmap : QPixmap, IDisposable {
 		protected QBitmap(Type dummy) : base((Type) null) {}
		interface IQBitmapProxy {
			QBitmap FromImage(QImage image, int flags);
			QBitmap FromImage(QImage image);
			QBitmap FromData(QSize size, char[] bits, int monoFormat);
			QBitmap FromData(QSize size, char[] bits);
		}

		protected void CreateQBitmapProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QBitmap), this);
			_interceptor = (QBitmap) realProxy.GetTransparentProxy();
		}
		private QBitmap ProxyQBitmap() {
			return (QBitmap) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QBitmap() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQBitmapProxy), null);
			_staticInterceptor = (IQBitmapProxy) realProxy.GetTransparentProxy();
		}
		private static IQBitmapProxy StaticQBitmap() {
			return (IQBitmapProxy) _staticInterceptor;
		}

		public QBitmap() : this((Type) null) {
			CreateQBitmapProxy();
			NewQBitmap();
		}
		private void NewQBitmap() {
			ProxyQBitmap().NewQBitmap();
		}
		public QBitmap(QPixmap arg1) : this((Type) null) {
			CreateQBitmapProxy();
			NewQBitmap(arg1);
		}
		private void NewQBitmap(QPixmap arg1) {
			ProxyQBitmap().NewQBitmap(arg1);
		}
		public QBitmap(int w, int h) : this((Type) null) {
			CreateQBitmapProxy();
			NewQBitmap(w,h);
		}
		private void NewQBitmap(int w, int h) {
			ProxyQBitmap().NewQBitmap(w,h);
		}
		public QBitmap(QSize arg1) : this((Type) null) {
			CreateQBitmapProxy();
			NewQBitmap(arg1);
		}
		private void NewQBitmap(QSize arg1) {
			ProxyQBitmap().NewQBitmap(arg1);
		}
		public QBitmap(string fileName, string format) : this((Type) null) {
			CreateQBitmapProxy();
			NewQBitmap(fileName,format);
		}
		private void NewQBitmap(string fileName, string format) {
			ProxyQBitmap().NewQBitmap(fileName,format);
		}
		public QBitmap(string fileName) : this((Type) null) {
			CreateQBitmapProxy();
			NewQBitmap(fileName);
		}
		private void NewQBitmap(string fileName) {
			ProxyQBitmap().NewQBitmap(fileName);
		}
		//  operator QVariant(); >>>> NOT CONVERTED
		public void Clear() {
			ProxyQBitmap().Clear();
		}
		public new QBitmap Transformed(QMatrix arg1) {
			return ProxyQBitmap().Transformed(arg1);
		}
		public static new QBitmap FromImage(QImage image, int flags) {
			return StaticQBitmap().FromImage(image,flags);
		}
		public static new QBitmap FromImage(QImage image) {
			return StaticQBitmap().FromImage(image);
		}
		public static QBitmap FromData(QSize size, char[] bits, int monoFormat) {
			return StaticQBitmap().FromData(size,bits,monoFormat);
		}
		public static QBitmap FromData(QSize size, char[] bits) {
			return StaticQBitmap().FromData(size,bits);
		}
		~QBitmap() {
			ProxyQBitmap().Dispose();
		}
		public void Dispose() {
			ProxyQBitmap().Dispose();
		}
//	public QBitmap(QPixmap arg1) {
//		super((Class) null);
//		newQBitmap(arg1);
//	}
//	private native void newQBitmap(QPixmap arg1);
//	public QBitmap(QImage arg1) {
//		super((Class) null);
//		newQBitmap(arg1);
//	}
//	private native void newQBitmap(QImage arg1);
	
	}
}
