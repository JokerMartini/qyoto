//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Collections;
	using System.Text;

	public class QDir : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QDir(Type dummy) {}
		interface IQDirProxy {
			bool op_equals(QDir lhs, QDir dir);
			void AddResourceSearchPath(string path);
			string ConvertSeparators(string pathName);
			ArrayList NameFiltersFromString(string nameFilter);
			bool IsRelativePath(string path);
			bool IsAbsolutePath(string path);
			char Separator();
			bool SetCurrent(string path);
			QDir Current();
			string CurrentPath();
			QDir Home();
			string HomePath();
			QDir Root();
			string RootPath();
			QDir Temp();
			string TempPath();
			bool Match(string[] filters, string fileName);
			bool Match(string filter, string fileName);
			string CleanPath(string path);
		}

		protected void CreateQDirProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDir), this);
			_interceptor = (QDir) realProxy.GetTransparentProxy();
		}
		private QDir ProxyQDir() {
			return (QDir) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QDir() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDirProxy), null);
			_staticInterceptor = (IQDirProxy) realProxy.GetTransparentProxy();
		}
		private static IQDirProxy StaticQDir() {
			return (IQDirProxy) _staticInterceptor;
		}

		enum E_Filter {
			Dirs = 0x001,
			Files = 0x002,
			Drives = 0x004,
			NoSymLinks = 0x008,
			TypeMask = 0x00f,
			Readable = 0x010,
			Writable = 0x020,
			Executable = 0x040,
			PermissionMask = 0x070,
			Modified = 0x080,
			Hidden = 0x100,
			System = 0x200,
			AccessMask = 0x3F0,
			AllDirs = 0x400,
			CaseSensitive = 0x800,
			NoFilter = -1,
		}
		enum SortFlag {
			Name = 0x00,
			Time = 0x01,
			Size = 0x02,
			Unsorted = 0x03,
			SortByMask = 0x03,
			DirsFirst = 0x04,
			Reversed = 0x08,
			IgnoreCase = 0x10,
			DirsLast = 0x20,
			Type = 0x80,
			NoSort = -1,
		}
		public QDir(QDir arg1) : this((Type) null) {
			CreateQDirProxy();
			NewQDir(arg1);
		}
		private void NewQDir(QDir arg1) {
			ProxyQDir().NewQDir(arg1);
		}
		public QDir(string path) : this((Type) null) {
			CreateQDirProxy();
			NewQDir(path);
		}
		private void NewQDir(string path) {
			ProxyQDir().NewQDir(path);
		}
		public QDir() : this((Type) null) {
			CreateQDirProxy();
			NewQDir();
		}
		private void NewQDir() {
			ProxyQDir().NewQDir();
		}
		public QDir(string path, string nameFilter, int sort, int filter) : this((Type) null) {
			CreateQDirProxy();
			NewQDir(path,nameFilter,sort,filter);
		}
		private void NewQDir(string path, string nameFilter, int sort, int filter) {
			ProxyQDir().NewQDir(path,nameFilter,sort,filter);
		}
		public QDir(string path, string nameFilter, int sort) : this((Type) null) {
			CreateQDirProxy();
			NewQDir(path,nameFilter,sort);
		}
		private void NewQDir(string path, string nameFilter, int sort) {
			ProxyQDir().NewQDir(path,nameFilter,sort);
		}
		public QDir(string path, string nameFilter) : this((Type) null) {
			CreateQDirProxy();
			NewQDir(path,nameFilter);
		}
		private void NewQDir(string path, string nameFilter) {
			ProxyQDir().NewQDir(path,nameFilter);
		}
		public void SetPath(string path) {
			ProxyQDir().SetPath(path);
		}
		public string Path() {
			return ProxyQDir().Path();
		}
		public string AbsolutePath() {
			return ProxyQDir().AbsolutePath();
		}
		public string CanonicalPath() {
			return ProxyQDir().CanonicalPath();
		}
		public string DirName() {
			return ProxyQDir().DirName();
		}
		public string FilePath(string fileName) {
			return ProxyQDir().FilePath(fileName);
		}
		public string AbsoluteFilePath(string fileName) {
			return ProxyQDir().AbsoluteFilePath(fileName);
		}
		public string RelativeFilePath(string fileName) {
			return ProxyQDir().RelativeFilePath(fileName);
		}
		public bool Cd(string dirName) {
			return ProxyQDir().Cd(dirName);
		}
		public bool CdUp() {
			return ProxyQDir().CdUp();
		}
		public ArrayList NameFilters() {
			return ProxyQDir().NameFilters();
		}
		public void SetNameFilters(string[] nameFilters) {
			ProxyQDir().SetNameFilters(nameFilters);
		}
		public int Filter() {
			return ProxyQDir().Filter();
		}
		public void SetFilter(int filter) {
			ProxyQDir().SetFilter(filter);
		}
		public int Sorting() {
			return ProxyQDir().Sorting();
		}
		public void SetSorting(int sort) {
			ProxyQDir().SetSorting(sort);
		}
		public uint Count() {
			return ProxyQDir().Count();
		}
		public ArrayList EntryList(int filters, int sort) {
			return ProxyQDir().EntryList(filters,sort);
		}
		public ArrayList EntryList(int filters) {
			return ProxyQDir().EntryList(filters);
		}
		public ArrayList EntryList() {
			return ProxyQDir().EntryList();
		}
		public ArrayList EntryList(string[] nameFilters, int filters, int sort) {
			return ProxyQDir().EntryList(nameFilters,filters,sort);
		}
		public ArrayList EntryList(string[] nameFilters, int filters) {
			return ProxyQDir().EntryList(nameFilters,filters);
		}
		public ArrayList EntryList(string[] nameFilters) {
			return ProxyQDir().EntryList(nameFilters);
		}
		// QFileInfoList entryInfoList(Filters arg1,SortFlags arg2); >>>> NOT CONVERTED
		// QFileInfoList entryInfoList(Filters arg1); >>>> NOT CONVERTED
		// QFileInfoList entryInfoList(); >>>> NOT CONVERTED
		// QFileInfoList entryInfoList(const QStringList& arg1,Filters arg2,SortFlags arg3); >>>> NOT CONVERTED
		// QFileInfoList entryInfoList(const QStringList& arg1,Filters arg2); >>>> NOT CONVERTED
		// QFileInfoList entryInfoList(const QStringList& arg1); >>>> NOT CONVERTED
		public bool Mkdir(string dirName) {
			return ProxyQDir().Mkdir(dirName);
		}
		public bool Rmdir(string dirName) {
			return ProxyQDir().Rmdir(dirName);
		}
		public bool Mkpath(string dirPath) {
			return ProxyQDir().Mkpath(dirPath);
		}
		public bool Rmpath(string dirPath) {
			return ProxyQDir().Rmpath(dirPath);
		}
		public bool IsReadable() {
			return ProxyQDir().IsReadable();
		}
		public bool Exists() {
			return ProxyQDir().Exists();
		}
		public bool IsRoot() {
			return ProxyQDir().IsRoot();
		}
		public bool IsRelative() {
			return ProxyQDir().IsRelative();
		}
		public bool IsAbsolute() {
			return ProxyQDir().IsAbsolute();
		}
		public bool MakeAbsolute() {
			return ProxyQDir().MakeAbsolute();
		}
		public static bool operator==(QDir lhs, QDir dir) {
			return StaticQDir().op_equals(lhs,dir);
		}
		public static bool operator!=(QDir lhs, QDir dir) {
			return !StaticQDir().op_equals(lhs,dir);
		}
		public override bool Equals(object o) {
			if (!(o is QDir)) { return false; }
			return this == (QDir) o;
		}
		public override int GetHashCode() {
			return ProxyQDir().GetHashCode();
		}
		public bool Remove(string fileName) {
			return ProxyQDir().Remove(fileName);
		}
		public bool Rename(string oldName, string newName) {
			return ProxyQDir().Rename(oldName,newName);
		}
		public bool Exists(string name) {
			return ProxyQDir().Exists(name);
		}
		public void Refresh() {
			ProxyQDir().Refresh();
		}
		public static void AddResourceSearchPath(string path) {
			StaticQDir().AddResourceSearchPath(path);
		}
		public static string ConvertSeparators(string pathName) {
			return StaticQDir().ConvertSeparators(pathName);
		}
		public static ArrayList NameFiltersFromString(string nameFilter) {
			return StaticQDir().NameFiltersFromString(nameFilter);
		}
		public static bool IsRelativePath(string path) {
			return StaticQDir().IsRelativePath(path);
		}
		public static bool IsAbsolutePath(string path) {
			return StaticQDir().IsAbsolutePath(path);
		}
		// QFileInfoList drives(); >>>> NOT CONVERTED
		public static char Separator() {
			return StaticQDir().Separator();
		}
		public static bool SetCurrent(string path) {
			return StaticQDir().SetCurrent(path);
		}
		public static QDir Current() {
			return StaticQDir().Current();
		}
		public static string CurrentPath() {
			return StaticQDir().CurrentPath();
		}
		public static QDir Home() {
			return StaticQDir().Home();
		}
		public static string HomePath() {
			return StaticQDir().HomePath();
		}
		public static QDir Root() {
			return StaticQDir().Root();
		}
		public static string RootPath() {
			return StaticQDir().RootPath();
		}
		public static QDir Temp() {
			return StaticQDir().Temp();
		}
		public static string TempPath() {
			return StaticQDir().TempPath();
		}
		public static bool Match(string[] filters, string fileName) {
			return StaticQDir().Match(filters,fileName);
		}
		public static bool Match(string filter, string fileName) {
			return StaticQDir().Match(filter,fileName);
		}
		public static string CleanPath(string path) {
			return StaticQDir().CleanPath(path);
		}
		~QDir() {
			ProxyQDir().Dispose();
		}
		public void Dispose() {
			ProxyQDir().Dispose();
		}
	}
}
