//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QRectF : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QRectF(Type dummy) {}
		interface IQRectFProxy {
			QRectF op_or(QRectF lhs, QRectF r);
			QRectF op_and(QRectF lhs, QRectF r);
		}

		protected void CreateQRectFProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QRectF), this);
			_interceptor = (QRectF) realProxy.GetTransparentProxy();
		}
		private QRectF ProxyQRectF() {
			return (QRectF) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QRectF() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQRectFProxy), null);
			_staticInterceptor = (IQRectFProxy) realProxy.GetTransparentProxy();
		}
		private static IQRectFProxy StaticQRectF() {
			return (IQRectFProxy) _staticInterceptor;
		}

		public QRectF() : this((Type) null) {
			CreateQRectFProxy();
			NewQRectF();
		}
		private void NewQRectF() {
			ProxyQRectF().NewQRectF();
		}
		public QRectF(QPointF topleft, QSizeF size) : this((Type) null) {
			CreateQRectFProxy();
			NewQRectF(topleft,size);
		}
		private void NewQRectF(QPointF topleft, QSizeF size) {
			ProxyQRectF().NewQRectF(topleft,size);
		}
		// QRectF* QRectF(qreal arg1,qreal arg2,qreal arg3,qreal arg4); >>>> NOT CONVERTED
		public QRectF(QRect rect) : this((Type) null) {
			CreateQRectFProxy();
			NewQRectF(rect);
		}
		private void NewQRectF(QRect rect) {
			ProxyQRectF().NewQRectF(rect);
		}
		public bool IsNull() {
			return ProxyQRectF().IsNull();
		}
		public bool IsEmpty() {
			return ProxyQRectF().IsEmpty();
		}
		public bool IsValid() {
			return ProxyQRectF().IsValid();
		}
		public QRectF Normalized() {
			return ProxyQRectF().Normalized();
		}
		// qreal left(); >>>> NOT CONVERTED
		// qreal top(); >>>> NOT CONVERTED
		// qreal right(); >>>> NOT CONVERTED
		// qreal bottom(); >>>> NOT CONVERTED
		// qreal x(); >>>> NOT CONVERTED
		// qreal y(); >>>> NOT CONVERTED
		// void setLeft(qreal arg1); >>>> NOT CONVERTED
		// void setTop(qreal arg1); >>>> NOT CONVERTED
		// void setRight(qreal arg1); >>>> NOT CONVERTED
		// void setBottom(qreal arg1); >>>> NOT CONVERTED
		public QPointF TopLeft() {
			return ProxyQRectF().TopLeft();
		}
		public QPointF BottomRight() {
			return ProxyQRectF().BottomRight();
		}
		public QPointF TopRight() {
			return ProxyQRectF().TopRight();
		}
		public QPointF BottomLeft() {
			return ProxyQRectF().BottomLeft();
		}
		public QPointF Center() {
			return ProxyQRectF().Center();
		}
		public void SetTopLeft(QPointF p) {
			ProxyQRectF().SetTopLeft(p);
		}
		public void SetBottomRight(QPointF p) {
			ProxyQRectF().SetBottomRight(p);
		}
		public void SetTopRight(QPointF p) {
			ProxyQRectF().SetTopRight(p);
		}
		public void SetBottomLeft(QPointF p) {
			ProxyQRectF().SetBottomLeft(p);
		}
		// void moveLeft(qreal arg1); >>>> NOT CONVERTED
		// void moveTop(qreal arg1); >>>> NOT CONVERTED
		// void moveRight(qreal arg1); >>>> NOT CONVERTED
		// void moveBottom(qreal arg1); >>>> NOT CONVERTED
		public void MoveTopLeft(QPointF p) {
			ProxyQRectF().MoveTopLeft(p);
		}
		public void MoveBottomRight(QPointF p) {
			ProxyQRectF().MoveBottomRight(p);
		}
		public void MoveTopRight(QPointF p) {
			ProxyQRectF().MoveTopRight(p);
		}
		public void MoveBottomLeft(QPointF p) {
			ProxyQRectF().MoveBottomLeft(p);
		}
		public void MoveCenter(QPointF p) {
			ProxyQRectF().MoveCenter(p);
		}
		// void translate(qreal arg1,qreal arg2); >>>> NOT CONVERTED
		public void Translate(QPointF p) {
			ProxyQRectF().Translate(p);
		}
		// QRectF translated(qreal arg1,qreal arg2); >>>> NOT CONVERTED
		public QRectF Translated(QPointF p) {
			return ProxyQRectF().Translated(p);
		}
		// void moveTo(qreal arg1,qreal arg2); >>>> NOT CONVERTED
		public void MoveTo(QPointF p) {
			ProxyQRectF().MoveTo(p);
		}
		// void setRect(qreal arg1,qreal arg2,qreal arg3,qreal arg4); >>>> NOT CONVERTED
		// void getRect(qreal* arg1,qreal* arg2,qreal* arg3,qreal* arg4); >>>> NOT CONVERTED
		// void setCoords(qreal arg1,qreal arg2,qreal arg3,qreal arg4); >>>> NOT CONVERTED
		// void getCoords(qreal* arg1,qreal* arg2,qreal* arg3,qreal* arg4); >>>> NOT CONVERTED
		// void adjust(qreal arg1,qreal arg2,qreal arg3,qreal arg4); >>>> NOT CONVERTED
		// QRectF adjusted(qreal arg1,qreal arg2,qreal arg3,qreal arg4); >>>> NOT CONVERTED
		public QSizeF Size() {
			return ProxyQRectF().Size();
		}
		// qreal width(); >>>> NOT CONVERTED
		// qreal height(); >>>> NOT CONVERTED
		// void setWidth(qreal arg1); >>>> NOT CONVERTED
		// void setHeight(qreal arg1); >>>> NOT CONVERTED
		public void SetSize(QSizeF s) {
			ProxyQRectF().SetSize(s);
		}
		public static QRectF operator|(QRectF lhs, QRectF r) {
			return StaticQRectF().op_or(lhs,r);
		}
		public static QRectF operator&(QRectF lhs, QRectF r) {
			return StaticQRectF().op_and(lhs,r);
		}
		public bool Contains(QPointF p) {
			return ProxyQRectF().Contains(p);
		}
		// bool contains(qreal arg1,qreal arg2); >>>> NOT CONVERTED
		public bool Contains(QRectF r) {
			return ProxyQRectF().Contains(r);
		}
		public QRectF Unite(QRectF r) {
			return ProxyQRectF().Unite(r);
		}
		public QRectF Intersect(QRectF r) {
			return ProxyQRectF().Intersect(r);
		}
		public bool Intersects(QRectF r) {
			return ProxyQRectF().Intersects(r);
		}
		public QRect ToRect() {
			return ProxyQRectF().ToRect();
		}
		~QRectF() {
			ProxyQRectF().Dispose();
		}
		public void Dispose() {
			ProxyQRectF().Dispose();
		}
	}
}
