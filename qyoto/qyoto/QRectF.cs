//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QRectF : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QRectF(Type dummy) {}
		interface IQRectFProxy {
			QRectF op_or(QRectF lhs, QRectF r);
			QRectF op_and(QRectF lhs, QRectF r);
		}

		protected void CreateQRectFProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QRectF), this);
			_interceptor = (QRectF) realProxy.GetTransparentProxy();
		}
		private QRectF ProxyQRectF() {
			return (QRectF) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QRectF() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQRectFProxy), null);
			_staticInterceptor = (IQRectFProxy) realProxy.GetTransparentProxy();
		}
		private static IQRectFProxy StaticQRectF() {
			return (IQRectFProxy) _staticInterceptor;
		}

		public QRectF() : this((Type) null) {
			CreateQRectFProxy();
			NewQRectF();
		}
		private void NewQRectF() {
			ProxyQRectF().NewQRectF();
		}
		public QRectF(QPointF topleft, QSizeF size) : this((Type) null) {
			CreateQRectFProxy();
			NewQRectF(topleft,size);
		}
		private void NewQRectF(QPointF topleft, QSizeF size) {
			ProxyQRectF().NewQRectF(topleft,size);
		}
		public QRectF(double left, double top, double width, double height) : this((Type) null) {
			CreateQRectFProxy();
			NewQRectF(left,top,width,height);
		}
		private void NewQRectF(double left, double top, double width, double height) {
			ProxyQRectF().NewQRectF(left,top,width,height);
		}
		public QRectF(QRect rect) : this((Type) null) {
			CreateQRectFProxy();
			NewQRectF(rect);
		}
		private void NewQRectF(QRect rect) {
			ProxyQRectF().NewQRectF(rect);
		}
		public bool IsNull() {
			return ProxyQRectF().IsNull();
		}
		public bool IsEmpty() {
			return ProxyQRectF().IsEmpty();
		}
		public bool IsValid() {
			return ProxyQRectF().IsValid();
		}
		public QRectF Normalized() {
			return ProxyQRectF().Normalized();
		}
		public double Left() {
			return ProxyQRectF().Left();
		}
		public double Top() {
			return ProxyQRectF().Top();
		}
		public double Right() {
			return ProxyQRectF().Right();
		}
		public double Bottom() {
			return ProxyQRectF().Bottom();
		}
		public double X() {
			return ProxyQRectF().X();
		}
		public double Y() {
			return ProxyQRectF().Y();
		}
		public void SetLeft(double pos) {
			ProxyQRectF().SetLeft(pos);
		}
		public void SetTop(double pos) {
			ProxyQRectF().SetTop(pos);
		}
		public void SetRight(double pos) {
			ProxyQRectF().SetRight(pos);
		}
		public void SetBottom(double pos) {
			ProxyQRectF().SetBottom(pos);
		}
		public QPointF TopLeft() {
			return ProxyQRectF().TopLeft();
		}
		public QPointF BottomRight() {
			return ProxyQRectF().BottomRight();
		}
		public QPointF TopRight() {
			return ProxyQRectF().TopRight();
		}
		public QPointF BottomLeft() {
			return ProxyQRectF().BottomLeft();
		}
		public QPointF Center() {
			return ProxyQRectF().Center();
		}
		public void SetTopLeft(QPointF p) {
			ProxyQRectF().SetTopLeft(p);
		}
		public void SetBottomRight(QPointF p) {
			ProxyQRectF().SetBottomRight(p);
		}
		public void SetTopRight(QPointF p) {
			ProxyQRectF().SetTopRight(p);
		}
		public void SetBottomLeft(QPointF p) {
			ProxyQRectF().SetBottomLeft(p);
		}
		public void MoveLeft(double pos) {
			ProxyQRectF().MoveLeft(pos);
		}
		public void MoveTop(double pos) {
			ProxyQRectF().MoveTop(pos);
		}
		public void MoveRight(double pos) {
			ProxyQRectF().MoveRight(pos);
		}
		public void MoveBottom(double pos) {
			ProxyQRectF().MoveBottom(pos);
		}
		public void MoveTopLeft(QPointF p) {
			ProxyQRectF().MoveTopLeft(p);
		}
		public void MoveBottomRight(QPointF p) {
			ProxyQRectF().MoveBottomRight(p);
		}
		public void MoveTopRight(QPointF p) {
			ProxyQRectF().MoveTopRight(p);
		}
		public void MoveBottomLeft(QPointF p) {
			ProxyQRectF().MoveBottomLeft(p);
		}
		public void MoveCenter(QPointF p) {
			ProxyQRectF().MoveCenter(p);
		}
		public void Translate(double dx, double dy) {
			ProxyQRectF().Translate(dx,dy);
		}
		public void Translate(QPointF p) {
			ProxyQRectF().Translate(p);
		}
		public QRectF Translated(double dx, double dy) {
			return ProxyQRectF().Translated(dx,dy);
		}
		public QRectF Translated(QPointF p) {
			return ProxyQRectF().Translated(p);
		}
		public void MoveTo(double x, double t) {
			ProxyQRectF().MoveTo(x,t);
		}
		public void MoveTo(QPointF p) {
			ProxyQRectF().MoveTo(p);
		}
		public void SetRect(double x, double y, double w, double h) {
			ProxyQRectF().SetRect(x,y,w,h);
		}
		// void getRect(qreal* arg1,qreal* arg2,qreal* arg3,qreal* arg4); >>>> NOT CONVERTED
		public void SetCoords(double x1, double y1, double x2, double y2) {
			ProxyQRectF().SetCoords(x1,y1,x2,y2);
		}
		// void getCoords(qreal* arg1,qreal* arg2,qreal* arg3,qreal* arg4); >>>> NOT CONVERTED
		public void Adjust(double x1, double y1, double x2, double y2) {
			ProxyQRectF().Adjust(x1,y1,x2,y2);
		}
		public QRectF Adjusted(double x1, double y1, double x2, double y2) {
			return ProxyQRectF().Adjusted(x1,y1,x2,y2);
		}
		public QSizeF Size() {
			return ProxyQRectF().Size();
		}
		public double Width() {
			return ProxyQRectF().Width();
		}
		public double Height() {
			return ProxyQRectF().Height();
		}
		public void SetWidth(double w) {
			ProxyQRectF().SetWidth(w);
		}
		public void SetHeight(double h) {
			ProxyQRectF().SetHeight(h);
		}
		public void SetSize(QSizeF s) {
			ProxyQRectF().SetSize(s);
		}
		public static QRectF operator|(QRectF lhs, QRectF r) {
			return StaticQRectF().op_or(lhs,r);
		}
		public static QRectF operator&(QRectF lhs, QRectF r) {
			return StaticQRectF().op_and(lhs,r);
		}
		public bool Contains(QPointF p) {
			return ProxyQRectF().Contains(p);
		}
		public bool Contains(double x, double y) {
			return ProxyQRectF().Contains(x,y);
		}
		public bool Contains(QRectF r) {
			return ProxyQRectF().Contains(r);
		}
		public QRectF Unite(QRectF r) {
			return ProxyQRectF().Unite(r);
		}
		public QRectF Intersect(QRectF r) {
			return ProxyQRectF().Intersect(r);
		}
		public bool Intersects(QRectF r) {
			return ProxyQRectF().Intersects(r);
		}
		public QRect ToRect() {
			return ProxyQRectF().ToRect();
		}
		~QRectF() {
			ProxyQRectF().Dispose();
		}
		public void Dispose() {
			ProxyQRectF().Dispose();
		}
	}
}
