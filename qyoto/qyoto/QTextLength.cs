//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QTextLength : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QTextLength(Type dummy) {}
		interface IQTextLengthProxy {
			bool op_equals(QTextLength lhs, QTextLength other);
		}

		protected void CreateQTextLengthProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTextLength), this);
			_interceptor = (QTextLength) realProxy.GetTransparentProxy();
		}
		private QTextLength ProxyQTextLength() {
			return (QTextLength) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QTextLength() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQTextLengthProxy), null);
			_staticInterceptor = (IQTextLengthProxy) realProxy.GetTransparentProxy();
		}
		private static IQTextLengthProxy StaticQTextLength() {
			return (IQTextLengthProxy) _staticInterceptor;
		}

		enum E_Type {
			VariableLength = 0,
			FixedLength = 1,
			PercentageLength = 2,
		}
		public QTextLength() : this((Type) null) {
			CreateQTextLengthProxy();
			NewQTextLength();
		}
		private void NewQTextLength() {
			ProxyQTextLength().NewQTextLength();
		}
		// QTextLength* QTextLength(QTextLength::Type arg1,qreal arg2); >>>> NOT CONVERTED
		// qreal value(qreal arg1); >>>> NOT CONVERTED
		// qreal rawValue(); >>>> NOT CONVERTED
		public static bool operator==(QTextLength lhs, QTextLength other) {
			return StaticQTextLength().op_equals(lhs,other);
		}
		public static bool operator!=(QTextLength lhs, QTextLength other) {
			return !StaticQTextLength().op_equals(lhs,other);
		}
		public override bool Equals(object o) {
			if (!(o is QTextLength)) { return false; }
			return this == (QTextLength) o;
		}
		public override int GetHashCode() {
			return ProxyQTextLength().GetHashCode();
		}
		//  operator QVariant(); >>>> NOT CONVERTED
		~QTextLength() {
			ProxyQTextLength().Dispose();
		}
		public void Dispose() {
			ProxyQTextLength().Dispose();
		}
	}
}
