//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	/// See <see cref="IQSpinBoxSignals"></see> for signals emitted by QSpinBox
	public class QSpinBox : QAbstractSpinBox, IDisposable {
 		protected QSpinBox(Type dummy) : base((Type) null) {}
		interface IQSpinBoxProxy {
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected void CreateQSpinBoxProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSpinBox), this);
			_interceptor = (QSpinBox) realProxy.GetTransparentProxy();
		}
		private QSpinBox ProxyQSpinBox() {
			return (QSpinBox) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QSpinBox() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSpinBoxProxy), null);
			_staticInterceptor = (IQSpinBoxProxy) realProxy.GetTransparentProxy();
		}
		private static IQSpinBoxProxy StaticQSpinBox() {
			return (IQSpinBoxProxy) _staticInterceptor;
		}

		public new virtual QMetaObject MetaObject() {
			return ProxyQSpinBox().MetaObject();
		}
		// void* qt_metacast(const char* arg1); >>>> NOT CONVERTED
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QSpinBox(QWidget parent) : this((Type) null) {
			CreateQSpinBoxProxy();
			NewQSpinBox(parent);
		}
		private void NewQSpinBox(QWidget parent) {
			ProxyQSpinBox().NewQSpinBox(parent);
		}
		public QSpinBox() : this((Type) null) {
			CreateQSpinBoxProxy();
			NewQSpinBox();
		}
		private void NewQSpinBox() {
			ProxyQSpinBox().NewQSpinBox();
		}
		public int Value() {
			return ProxyQSpinBox().Value();
		}
		public string Prefix() {
			return ProxyQSpinBox().Prefix();
		}
		public void SetPrefix(string p) {
			ProxyQSpinBox().SetPrefix(p);
		}
		public string Suffix() {
			return ProxyQSpinBox().Suffix();
		}
		public void SetSuffix(string s) {
			ProxyQSpinBox().SetSuffix(s);
		}
		public string CleanText() {
			return ProxyQSpinBox().CleanText();
		}
		public int SingleStep() {
			return ProxyQSpinBox().SingleStep();
		}
		public void SetSingleStep(int val) {
			ProxyQSpinBox().SetSingleStep(val);
		}
		public int Minimum() {
			return ProxyQSpinBox().Minimum();
		}
		public void SetMinimum(int min) {
			ProxyQSpinBox().SetMinimum(min);
		}
		public int Maximum() {
			return ProxyQSpinBox().Maximum();
		}
		public void SetMaximum(int max) {
			ProxyQSpinBox().SetMaximum(max);
		}
		public void SetRange(int min, int max) {
			ProxyQSpinBox().SetRange(min,max);
		}
		public void SetValue(int val) {
			ProxyQSpinBox().SetValue(val);
		}
		public static new string Tr(string s, string c) {
			return StaticQSpinBox().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQSpinBox().Tr(s);
		}
		protected new virtual int Validate(StringBuilder input, out int pos) {
			return ProxyQSpinBox().Validate(input,out pos);
		}
		protected virtual int ValueFromText(string text) {
			return ProxyQSpinBox().ValueFromText(text);
		}
		protected virtual string TextFromValue(int v) {
			return ProxyQSpinBox().TextFromValue(v);
		}
		protected new virtual void Fixup(StringBuilder str) {
			ProxyQSpinBox().Fixup(str);
		}
		~QSpinBox() {
			ProxyQSpinBox().Dispose();
		}
		public new void Dispose() {
			ProxyQSpinBox().Dispose();
		}
	}

	public interface IQSpinBoxSignals {
		void ValueChanged(int arg1);
		void ValueChanged(string arg1);
	}
}
