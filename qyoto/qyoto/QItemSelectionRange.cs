//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections;

	[SmokeClass("QItemSelectionRange")]
	public class QItemSelectionRange : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
		protected QItemSelectionRange(Type dummy) {}
		interface IQItemSelectionRangeProxy {
			bool op_equals(QItemSelectionRange lhs, QItemSelectionRange other);
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QItemSelectionRange), this);
			_interceptor = (QItemSelectionRange) realProxy.GetTransparentProxy();
		}
		private QItemSelectionRange ProxyQItemSelectionRange() {
			return (QItemSelectionRange) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QItemSelectionRange() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQItemSelectionRangeProxy), null);
			_staticInterceptor = (IQItemSelectionRangeProxy) realProxy.GetTransparentProxy();
		}
		private static IQItemSelectionRangeProxy StaticQItemSelectionRange() {
			return (IQItemSelectionRangeProxy) _staticInterceptor;
		}

		public QItemSelectionRange() : this((Type) null) {
			CreateProxy();
			NewQItemSelectionRange();
		}
		[SmokeMethod("QItemSelectionRange()")]
		private void NewQItemSelectionRange() {
			ProxyQItemSelectionRange().NewQItemSelectionRange();
		}
		public QItemSelectionRange(QItemSelectionRange other) : this((Type) null) {
			CreateProxy();
			NewQItemSelectionRange(other);
		}
		[SmokeMethod("QItemSelectionRange(const QItemSelectionRange&)")]
		private void NewQItemSelectionRange(QItemSelectionRange other) {
			ProxyQItemSelectionRange().NewQItemSelectionRange(other);
		}
		public QItemSelectionRange(QModelIndex topLeft, QModelIndex bottomRight) : this((Type) null) {
			CreateProxy();
			NewQItemSelectionRange(topLeft,bottomRight);
		}
		[SmokeMethod("QItemSelectionRange(const QModelIndex&, const QModelIndex&)")]
		private void NewQItemSelectionRange(QModelIndex topLeft, QModelIndex bottomRight) {
			ProxyQItemSelectionRange().NewQItemSelectionRange(topLeft,bottomRight);
		}
		public QItemSelectionRange(QModelIndex index) : this((Type) null) {
			CreateProxy();
			NewQItemSelectionRange(index);
		}
		[SmokeMethod("QItemSelectionRange(const QModelIndex&)")]
		private void NewQItemSelectionRange(QModelIndex index) {
			ProxyQItemSelectionRange().NewQItemSelectionRange(index);
		}
		[SmokeMethod("top() const")]
		public int Top() {
			return ProxyQItemSelectionRange().Top();
		}
		[SmokeMethod("left() const")]
		public int Left() {
			return ProxyQItemSelectionRange().Left();
		}
		[SmokeMethod("bottom() const")]
		public int Bottom() {
			return ProxyQItemSelectionRange().Bottom();
		}
		[SmokeMethod("right() const")]
		public int Right() {
			return ProxyQItemSelectionRange().Right();
		}
		[SmokeMethod("width() const")]
		public int Width() {
			return ProxyQItemSelectionRange().Width();
		}
		[SmokeMethod("height() const")]
		public int Height() {
			return ProxyQItemSelectionRange().Height();
		}
		[SmokeMethod("topLeft() const")]
		public QModelIndex TopLeft() {
			return ProxyQItemSelectionRange().TopLeft();
		}
		[SmokeMethod("bottomRight() const")]
		public QModelIndex BottomRight() {
			return ProxyQItemSelectionRange().BottomRight();
		}
		[SmokeMethod("parent() const")]
		public QModelIndex Parent() {
			return ProxyQItemSelectionRange().Parent();
		}
		[SmokeMethod("model() const")]
		public QAbstractItemModel Model() {
			return ProxyQItemSelectionRange().Model();
		}
		[SmokeMethod("contains(const QModelIndex&) const")]
		public bool Contains(QModelIndex index) {
			return ProxyQItemSelectionRange().Contains(index);
		}
		[SmokeMethod("contains(int, int, const QModelIndex&) const")]
		public bool Contains(int row, int column, QModelIndex parentIndex) {
			return ProxyQItemSelectionRange().Contains(row,column,parentIndex);
		}
		[SmokeMethod("intersects(const QItemSelectionRange&) const")]
		public bool Intersects(QItemSelectionRange other) {
			return ProxyQItemSelectionRange().Intersects(other);
		}
		[SmokeMethod("intersect(const QItemSelectionRange&) const")]
		public QItemSelectionRange Intersect(QItemSelectionRange other) {
			return ProxyQItemSelectionRange().Intersect(other);
		}
		[SmokeMethod("operator==(const QItemSelectionRange&) const")]
		public static bool operator==(QItemSelectionRange lhs, QItemSelectionRange other) {
			return StaticQItemSelectionRange().op_equals(lhs,other);
		}
		public static bool operator!=(QItemSelectionRange lhs, QItemSelectionRange other) {
			return !StaticQItemSelectionRange().op_equals(lhs,other);
		}
		public override bool Equals(object o) {
			if (!(o is QItemSelectionRange)) { return false; }
			return this == (QItemSelectionRange) o;
		}
		public override int GetHashCode() {
			return ProxyQItemSelectionRange().GetHashCode();
		}
		[SmokeMethod("isValid() const")]
		public bool IsValid() {
			return ProxyQItemSelectionRange().IsValid();
		}
		[SmokeMethod("indexes() const")]
		public ArrayList Indexes() {
			return ProxyQItemSelectionRange().Indexes();
		}
		~QItemSelectionRange() {
			DisposeQItemSelectionRange();
		}
		public void Dispose() {
			DisposeQItemSelectionRange();
		}
		[SmokeMethod("~QItemSelectionRange()")]
		private void DisposeQItemSelectionRange() {
			ProxyQItemSelectionRange().DisposeQItemSelectionRange();
		}
	}
}
