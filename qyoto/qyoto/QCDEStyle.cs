//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	[SmokeClass("QCDEStyle")]
	public class QCDEStyle : QMotifStyle, IDisposable {
 		protected QCDEStyle(Type dummy) : base((Type) null) {}
		interface IQCDEStyleProxy {
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QCDEStyle), this);
			_interceptor = (QCDEStyle) realProxy.GetTransparentProxy();
		}
		private QCDEStyle ProxyQCDEStyle() {
			return (QCDEStyle) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QCDEStyle() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQCDEStyleProxy), null);
			_staticInterceptor = (IQCDEStyleProxy) realProxy.GetTransparentProxy();
		}
		private static IQCDEStyleProxy StaticQCDEStyle() {
			return (IQCDEStyleProxy) _staticInterceptor;
		}

		[SmokeMethod("metaObject() const")]
		public new virtual QMetaObject MetaObject() {
			return ProxyQCDEStyle().MetaObject();
		}
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QCDEStyle(bool useHighlightCols) : this((Type) null) {
			CreateProxy();
			NewQCDEStyle(useHighlightCols);
		}
		[SmokeMethod("QCDEStyle(bool)")]
		private void NewQCDEStyle(bool useHighlightCols) {
			ProxyQCDEStyle().NewQCDEStyle(useHighlightCols);
		}
		public QCDEStyle() : this((Type) null) {
			CreateProxy();
			NewQCDEStyle();
		}
		[SmokeMethod("QCDEStyle()")]
		private void NewQCDEStyle() {
			ProxyQCDEStyle().NewQCDEStyle();
		}
		[SmokeMethod("pixelMetric(QStyle::PixelMetric, const QStyleOption*, const QWidget*) const")]
		public new int PixelMetric(QStyle.PixelMetric metric, out int option, QWidget widget) {
			return ProxyQCDEStyle().PixelMetric(metric,out option,widget);
		}
		[SmokeMethod("pixelMetric(QStyle::PixelMetric, const QStyleOption*) const")]
		public new int PixelMetric(QStyle.PixelMetric metric, out int option) {
			return ProxyQCDEStyle().PixelMetric(metric,out option);
		}
		[SmokeMethod("pixelMetric(QStyle::PixelMetric) const")]
		public new int PixelMetric(QStyle.PixelMetric metric) {
			return ProxyQCDEStyle().PixelMetric(metric);
		}
		[SmokeMethod("drawControl(QStyle::ControlElement, const QStyleOption*, QPainter*, const QWidget*) const")]
		public new void DrawControl(QStyle.ControlElement element, out int opt, QPainter p, QWidget w) {
			ProxyQCDEStyle().DrawControl(element,out opt,p,w);
		}
		[SmokeMethod("drawControl(QStyle::ControlElement, const QStyleOption*, QPainter*) const")]
		public new void DrawControl(QStyle.ControlElement element, out int opt, QPainter p) {
			ProxyQCDEStyle().DrawControl(element,out opt,p);
		}
		[SmokeMethod("drawPrimitive(QStyle::PrimitiveElement, const QStyleOption*, QPainter*, const QWidget*) const")]
		public new void DrawPrimitive(QStyle.PrimitiveElement pe, out int opt, QPainter p, QWidget w) {
			ProxyQCDEStyle().DrawPrimitive(pe,out opt,p,w);
		}
		[SmokeMethod("drawPrimitive(QStyle::PrimitiveElement, const QStyleOption*, QPainter*) const")]
		public new void DrawPrimitive(QStyle.PrimitiveElement pe, out int opt, QPainter p) {
			ProxyQCDEStyle().DrawPrimitive(pe,out opt,p);
		}
		[SmokeMethod("standardPalette() const")]
		public new QPalette StandardPalette() {
			return ProxyQCDEStyle().StandardPalette();
		}
		[SmokeMethod("tr(const char*, const char*)")]
		public static new string Tr(string s, string c) {
			return StaticQCDEStyle().Tr(s,c);
		}
		[SmokeMethod("tr(const char*)")]
		public static new string Tr(string s) {
			return StaticQCDEStyle().Tr(s);
		}
		~QCDEStyle() {
			DisposeQCDEStyle();
		}
		public new void Dispose() {
			DisposeQCDEStyle();
		}
		private void DisposeQCDEStyle() {
			ProxyQCDEStyle().DisposeQCDEStyle();
		}
		protected new IQCDEStyleSignals Emit() {
			return (IQCDEStyleSignals) Q_EMIT;
		}
	}

	public interface IQCDEStyleSignals : IQMotifStyleSignals {
	}
}
