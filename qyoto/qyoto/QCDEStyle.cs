//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QCDEStyle : QMotifStyle, IDisposable {
 		protected QCDEStyle(Type dummy) : base((Type) null) {}
		interface IQCDEStyleProxy {
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected void CreateQCDEStyleProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QCDEStyle), this);
			_interceptor = (QCDEStyle) realProxy.GetTransparentProxy();
		}
		private QCDEStyle ProxyQCDEStyle() {
			return (QCDEStyle) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QCDEStyle() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQCDEStyleProxy), null);
			_staticInterceptor = (IQCDEStyleProxy) realProxy.GetTransparentProxy();
		}
		private static IQCDEStyleProxy StaticQCDEStyle() {
			return (IQCDEStyleProxy) _staticInterceptor;
		}

		public new virtual QMetaObject MetaObject() {
			return ProxyQCDEStyle().MetaObject();
		}
		// void* qt_metacast(const char* arg1); >>>> NOT CONVERTED
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QCDEStyle(bool useHighlightCols) : this((Type) null) {
			CreateQCDEStyleProxy();
			NewQCDEStyle(useHighlightCols);
		}
		private void NewQCDEStyle(bool useHighlightCols) {
			ProxyQCDEStyle().NewQCDEStyle(useHighlightCols);
		}
		public QCDEStyle() : this((Type) null) {
			CreateQCDEStyleProxy();
			NewQCDEStyle();
		}
		private void NewQCDEStyle() {
			ProxyQCDEStyle().NewQCDEStyle();
		}
		public new int PixelMetric(int metric, out int option, QWidget widget) {
			return ProxyQCDEStyle().PixelMetric(metric,out option,widget);
		}
		public new int PixelMetric(int metric, out int option) {
			return ProxyQCDEStyle().PixelMetric(metric,out option);
		}
		public new int PixelMetric(int metric) {
			return ProxyQCDEStyle().PixelMetric(metric);
		}
		public new void DrawControl(int element, out int opt, QPainter p, QWidget w) {
			ProxyQCDEStyle().DrawControl(element,out opt,p,w);
		}
		public new void DrawControl(int element, out int opt, QPainter p) {
			ProxyQCDEStyle().DrawControl(element,out opt,p);
		}
		public new void DrawPrimitive(int pe, out int opt, QPainter p, QWidget w) {
			ProxyQCDEStyle().DrawPrimitive(pe,out opt,p,w);
		}
		public new void DrawPrimitive(int pe, out int opt, QPainter p) {
			ProxyQCDEStyle().DrawPrimitive(pe,out opt,p);
		}
		public new QPalette StandardPalette() {
			return ProxyQCDEStyle().StandardPalette();
		}
		public static new string Tr(string s, string c) {
			return StaticQCDEStyle().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQCDEStyle().Tr(s);
		}
		~QCDEStyle() {
			ProxyQCDEStyle().Dispose();
		}
		public new void Dispose() {
			ProxyQCDEStyle().Dispose();
		}
	}
}
