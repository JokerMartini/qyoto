//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections;
	using System.Text;

	[SmokeClass("QInputContextFactory")]
	public class QInputContextFactory : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
		protected QInputContextFactory(Type dummy) {}
		interface IQInputContextFactoryProxy {
			ArrayList Keys();
			QInputContext Create(string key, QObject parent);
			ArrayList Languages(string key);
			string DisplayName(string key);
			string Description(string key);
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QInputContextFactory), this);
			_interceptor = (QInputContextFactory) realProxy.GetTransparentProxy();
		}
		private QInputContextFactory ProxyQInputContextFactory() {
			return (QInputContextFactory) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QInputContextFactory() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQInputContextFactoryProxy), null);
			_staticInterceptor = (IQInputContextFactoryProxy) realProxy.GetTransparentProxy();
		}
		private static IQInputContextFactoryProxy StaticQInputContextFactory() {
			return (IQInputContextFactoryProxy) _staticInterceptor;
		}

		public QInputContextFactory() : this((Type) null) {
			CreateProxy();
			NewQInputContextFactory();
		}
		[SmokeMethod("QInputContextFactory()")]
		private void NewQInputContextFactory() {
			ProxyQInputContextFactory().NewQInputContextFactory();
		}
		[SmokeMethod("keys()")]
		public static ArrayList Keys() {
			return StaticQInputContextFactory().Keys();
		}
		[SmokeMethod("create(const QString&, QObject*)")]
		public static QInputContext Create(string key, QObject parent) {
			return StaticQInputContextFactory().Create(key,parent);
		}
		[SmokeMethod("languages(const QString&)")]
		public static ArrayList Languages(string key) {
			return StaticQInputContextFactory().Languages(key);
		}
		[SmokeMethod("displayName(const QString&)")]
		public static string DisplayName(string key) {
			return StaticQInputContextFactory().DisplayName(key);
		}
		[SmokeMethod("description(const QString&)")]
		public static string Description(string key) {
			return StaticQInputContextFactory().Description(key);
		}
		~QInputContextFactory() {
			DisposeQInputContextFactory();
		}
		public void Dispose() {
			DisposeQInputContextFactory();
		}
		private void DisposeQInputContextFactory() {
			ProxyQInputContextFactory().DisposeQInputContextFactory();
		}
	}
}
