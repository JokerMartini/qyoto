//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QModelIndex : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QModelIndex(Type dummy) {}
		interface IQModelIndexProxy {
			bool op_equals(QModelIndex lhs, QModelIndex other);
		}

		protected void CreateQModelIndexProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QModelIndex), this);
			_interceptor = (QModelIndex) realProxy.GetTransparentProxy();
		}
		private QModelIndex ProxyQModelIndex() {
			return (QModelIndex) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QModelIndex() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQModelIndexProxy), null);
			_staticInterceptor = (IQModelIndexProxy) realProxy.GetTransparentProxy();
		}
		private static IQModelIndexProxy StaticQModelIndex() {
			return (IQModelIndexProxy) _staticInterceptor;
		}

		public QModelIndex() : this((Type) null) {
			CreateQModelIndexProxy();
			NewQModelIndex();
		}
		private void NewQModelIndex() {
			ProxyQModelIndex().NewQModelIndex();
		}
		public QModelIndex(QModelIndex other) : this((Type) null) {
			CreateQModelIndexProxy();
			NewQModelIndex(other);
		}
		private void NewQModelIndex(QModelIndex other) {
			ProxyQModelIndex().NewQModelIndex(other);
		}
		public int Row() {
			return ProxyQModelIndex().Row();
		}
		public int Column() {
			return ProxyQModelIndex().Column();
		}
		// void* internalPointer(); >>>> NOT CONVERTED
		// qint64 internalId(); >>>> NOT CONVERTED
		public QModelIndex Parent() {
			return ProxyQModelIndex().Parent();
		}
		public QModelIndex Sibling(int row, int column) {
			return ProxyQModelIndex().Sibling(row,column);
		}
		public QModelIndex Child(int row, int column) {
			return ProxyQModelIndex().Child(row,column);
		}
		public QAbstractItemModel Model() {
			return ProxyQModelIndex().Model();
		}
		public bool IsValid() {
			return ProxyQModelIndex().IsValid();
		}
		public static bool operator==(QModelIndex lhs, QModelIndex other) {
			return StaticQModelIndex().op_equals(lhs,other);
		}
		public static bool operator!=(QModelIndex lhs, QModelIndex other) {
			return !StaticQModelIndex().op_equals(lhs,other);
		}
		public override bool Equals(object o) {
			if (!(o is QModelIndex)) { return false; }
			return this == (QModelIndex) o;
		}
		public override int GetHashCode() {
			return ProxyQModelIndex().GetHashCode();
		}
		~QModelIndex() {
			ProxyQModelIndex().Dispose();
		}
		public void Dispose() {
			ProxyQModelIndex().Dispose();
		}
	}
}
