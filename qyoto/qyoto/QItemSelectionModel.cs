//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	/// See <see cref="IQItemSelectionModelSignals"></see> for signals emitted by QItemSelectionModel
	public class QItemSelectionModel : QObject, IDisposable {
 		protected QItemSelectionModel(Type dummy) : base((Type) null) {}
		interface IQItemSelectionModelProxy {
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected void CreateQItemSelectionModelProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QItemSelectionModel), this);
			_interceptor = (QItemSelectionModel) realProxy.GetTransparentProxy();
		}
		private QItemSelectionModel ProxyQItemSelectionModel() {
			return (QItemSelectionModel) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QItemSelectionModel() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQItemSelectionModelProxy), null);
			_staticInterceptor = (IQItemSelectionModelProxy) realProxy.GetTransparentProxy();
		}
		private static IQItemSelectionModelProxy StaticQItemSelectionModel() {
			return (IQItemSelectionModelProxy) _staticInterceptor;
		}

		enum SelectionFlag {
			NoUpdate = 0x0000,
			Clear = 0x0001,
			Select = 0x0002,
			Deselect = 0x0004,
			Toggle = 0x0008,
			Current = 0x0010,
			Rows = 0x0020,
			Columns = 0x0040,
			SelectCurrent = Select|Current,
			ToggleCurrent = Toggle|Current,
			ClearAndSelect = Clear|Select,
		}
		public new virtual QMetaObject MetaObject() {
			return ProxyQItemSelectionModel().MetaObject();
		}
		// void* qt_metacast(const char* arg1); >>>> NOT CONVERTED
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QItemSelectionModel(QAbstractItemModel model) : this((Type) null) {
			CreateQItemSelectionModelProxy();
			NewQItemSelectionModel(model);
		}
		private void NewQItemSelectionModel(QAbstractItemModel model) {
			ProxyQItemSelectionModel().NewQItemSelectionModel(model);
		}
		public QModelIndex CurrentIndex() {
			return ProxyQItemSelectionModel().CurrentIndex();
		}
		public bool IsSelected(QModelIndex index) {
			return ProxyQItemSelectionModel().IsSelected(index);
		}
		public bool IsRowSelected(int row, QModelIndex parent) {
			return ProxyQItemSelectionModel().IsRowSelected(row,parent);
		}
		public bool IsColumnSelected(int column, QModelIndex parent) {
			return ProxyQItemSelectionModel().IsColumnSelected(column,parent);
		}
		public bool RowIntersectsSelection(int row, QModelIndex parent) {
			return ProxyQItemSelectionModel().RowIntersectsSelection(row,parent);
		}
		public bool ColumnIntersectsSelection(int column, QModelIndex parent) {
			return ProxyQItemSelectionModel().ColumnIntersectsSelection(column,parent);
		}
		// QModelIndexList selectedIndexes(); >>>> NOT CONVERTED
		public QItemSelection Selection() {
			return ProxyQItemSelectionModel().Selection();
		}
		public QAbstractItemModel Model() {
			return ProxyQItemSelectionModel().Model();
		}
		public void SetCurrentIndex(QModelIndex index, int command) {
			ProxyQItemSelectionModel().SetCurrentIndex(index,command);
		}
		public virtual void Select(QModelIndex index, int command) {
			ProxyQItemSelectionModel().Select(index,command);
		}
		public virtual void Select(QItemSelection selection, int command) {
			ProxyQItemSelectionModel().Select(selection,command);
		}
		public virtual void Clear() {
			ProxyQItemSelectionModel().Clear();
		}
		public virtual void Reset() {
			ProxyQItemSelectionModel().Reset();
		}
		public static new string Tr(string s, string c) {
			return StaticQItemSelectionModel().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQItemSelectionModel().Tr(s);
		}
		protected void EmitSelectionChanged(QItemSelection newSelection, QItemSelection oldSelection) {
			ProxyQItemSelectionModel().EmitSelectionChanged(newSelection,oldSelection);
		}
		~QItemSelectionModel() {
			ProxyQItemSelectionModel().Dispose();
		}
		public new void Dispose() {
			ProxyQItemSelectionModel().Dispose();
		}
	}

	public interface IQItemSelectionModelSignals {
		void SelectionChanged(QItemSelection selected, QItemSelection deselected);
		void CurrentChanged(QModelIndex current, QModelIndex previous);
		void CurrentRowChanged(QModelIndex current, QModelIndex previous);
		void CurrentColumnChanged(QModelIndex current, QModelIndex previous);
	}
}
