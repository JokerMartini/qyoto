//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QRegion : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QRegion(Type dummy) {}
		interface IQRegionProxy {
			QRegion op_or(QRegion lhs, QRegion r);
			QRegion op_plus(QRegion lhs, QRegion r);
			QRegion op_and(QRegion lhs, QRegion r);
			QRegion op_minus(QRegion lhs, QRegion r);
			QRegion op_xor(QRegion lhs, QRegion r);
			bool op_equals(QRegion lhs, QRegion r);
		}

		protected void CreateQRegionProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QRegion), this);
			_interceptor = (QRegion) realProxy.GetTransparentProxy();
		}
		private QRegion ProxyQRegion() {
			return (QRegion) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QRegion() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQRegionProxy), null);
			_staticInterceptor = (IQRegionProxy) realProxy.GetTransparentProxy();
		}
		private static IQRegionProxy StaticQRegion() {
			return (IQRegionProxy) _staticInterceptor;
		}

		enum RegionType {
			Rectangle = 0,
			Ellipse = 1,
		}
		public QRegion() : this((Type) null) {
			CreateQRegionProxy();
			NewQRegion();
		}
		private void NewQRegion() {
			ProxyQRegion().NewQRegion();
		}
		public QRegion(int x, int y, int w, int h, int t) : this((Type) null) {
			CreateQRegionProxy();
			NewQRegion(x,y,w,h,t);
		}
		private void NewQRegion(int x, int y, int w, int h, int t) {
			ProxyQRegion().NewQRegion(x,y,w,h,t);
		}
		public QRegion(int x, int y, int w, int h) : this((Type) null) {
			CreateQRegionProxy();
			NewQRegion(x,y,w,h);
		}
		private void NewQRegion(int x, int y, int w, int h) {
			ProxyQRegion().NewQRegion(x,y,w,h);
		}
		public QRegion(QRect r, int t) : this((Type) null) {
			CreateQRegionProxy();
			NewQRegion(r,t);
		}
		private void NewQRegion(QRect r, int t) {
			ProxyQRegion().NewQRegion(r,t);
		}
		public QRegion(QRect r) : this((Type) null) {
			CreateQRegionProxy();
			NewQRegion(r);
		}
		private void NewQRegion(QRect r) {
			ProxyQRegion().NewQRegion(r);
		}
		public QRegion(QPolygon pa, int fillRule) : this((Type) null) {
			CreateQRegionProxy();
			NewQRegion(pa,fillRule);
		}
		private void NewQRegion(QPolygon pa, int fillRule) {
			ProxyQRegion().NewQRegion(pa,fillRule);
		}
		public QRegion(QPolygon pa) : this((Type) null) {
			CreateQRegionProxy();
			NewQRegion(pa);
		}
		private void NewQRegion(QPolygon pa) {
			ProxyQRegion().NewQRegion(pa);
		}
		public QRegion(QRegion region) : this((Type) null) {
			CreateQRegionProxy();
			NewQRegion(region);
		}
		private void NewQRegion(QRegion region) {
			ProxyQRegion().NewQRegion(region);
		}
		public QRegion(QBitmap bitmap) : this((Type) null) {
			CreateQRegionProxy();
			NewQRegion(bitmap);
		}
		private void NewQRegion(QBitmap bitmap) {
			ProxyQRegion().NewQRegion(bitmap);
		}
		public bool IsEmpty() {
			return ProxyQRegion().IsEmpty();
		}
		public bool Contains(QPoint p) {
			return ProxyQRegion().Contains(p);
		}
		public bool Contains(QRect r) {
			return ProxyQRegion().Contains(r);
		}
		public void Translate(int dx, int dy) {
			ProxyQRegion().Translate(dx,dy);
		}
		public void Translate(QPoint p) {
			ProxyQRegion().Translate(p);
		}
		public QRegion Unite(QRegion r) {
			return ProxyQRegion().Unite(r);
		}
		public QRegion Intersect(QRegion r) {
			return ProxyQRegion().Intersect(r);
		}
		public QRegion Subtract(QRegion r) {
			return ProxyQRegion().Subtract(r);
		}
		public QRegion Eor(QRegion r) {
			return ProxyQRegion().Eor(r);
		}
		public QRect BoundingRect() {
			return ProxyQRegion().BoundingRect();
		}
		// QVector<QRect> rects(); >>>> NOT CONVERTED
		public void SetRects(QRect rect, int num) {
			ProxyQRegion().SetRects(rect,num);
		}
		public static QRegion operator|(QRegion lhs, QRegion r) {
			return StaticQRegion().op_or(lhs,r);
		}
		public static QRegion operator+(QRegion lhs, QRegion r) {
			return StaticQRegion().op_plus(lhs,r);
		}
		public static QRegion operator&(QRegion lhs, QRegion r) {
			return StaticQRegion().op_and(lhs,r);
		}
		public static QRegion operator-(QRegion lhs, QRegion r) {
			return StaticQRegion().op_minus(lhs,r);
		}
		public static QRegion operator^(QRegion lhs, QRegion r) {
			return StaticQRegion().op_xor(lhs,r);
		}
		public static bool operator==(QRegion lhs, QRegion r) {
			return StaticQRegion().op_equals(lhs,r);
		}
		public static bool operator!=(QRegion lhs, QRegion r) {
			return !StaticQRegion().op_equals(lhs,r);
		}
		public override bool Equals(object o) {
			if (!(o is QRegion)) { return false; }
			return this == (QRegion) o;
		}
		public override int GetHashCode() {
			return ProxyQRegion().GetHashCode();
		}
		//  operator QVariant(); >>>> NOT CONVERTED
		~QRegion() {
			ProxyQRegion().Dispose();
		}
		public void Dispose() {
			ProxyQRegion().Dispose();
		}
	}
}
