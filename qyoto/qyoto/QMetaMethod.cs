//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QMetaMethod : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QMetaMethod(Type dummy) {}
		interface IQMetaMethodProxy {
		}

		protected void CreateQMetaMethodProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QMetaMethod), this);
			_interceptor = (QMetaMethod) realProxy.GetTransparentProxy();
		}
		private QMetaMethod ProxyQMetaMethod() {
			return (QMetaMethod) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QMetaMethod() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQMetaMethodProxy), null);
			_staticInterceptor = (IQMetaMethodProxy) realProxy.GetTransparentProxy();
		}
		private static IQMetaMethodProxy StaticQMetaMethod() {
			return (IQMetaMethodProxy) _staticInterceptor;
		}

		enum E_Access {
			Private = 0,
			Protected = 1,
			Public = 2,
		}
		enum E_MethodType {
			Method = 0,
			Signal = 1,
			Slot = 2,
		}
		enum E_Attributes {
			Compatibility = 0x1,
			Cloned = 0x2,
			Scriptable = 0x4,
		}
		public QMetaMethod() : this((Type) null) {
			CreateQMetaMethodProxy();
			NewQMetaMethod();
		}
		private void NewQMetaMethod() {
			ProxyQMetaMethod().NewQMetaMethod();
		}
		public string Signature() {
			return ProxyQMetaMethod().Signature();
		}
		public string TypeName() {
			return ProxyQMetaMethod().TypeName();
		}
		// QList<QByteArray> parameterTypes(); >>>> NOT CONVERTED
		// QList<QByteArray> parameterNames(); >>>> NOT CONVERTED
		public string Tag() {
			return ProxyQMetaMethod().Tag();
		}
		public int Access() {
			return ProxyQMetaMethod().Access();
		}
		public int MethodType() {
			return ProxyQMetaMethod().MethodType();
		}
		public int Attributes() {
			return ProxyQMetaMethod().Attributes();
		}
		~QMetaMethod() {
			ProxyQMetaMethod().Dispose();
		}
		public void Dispose() {
			ProxyQMetaMethod().Dispose();
		}
	}
}
