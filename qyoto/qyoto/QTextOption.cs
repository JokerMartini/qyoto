//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QTextOption : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QTextOption(Type dummy) {}
		interface IQTextOptionProxy {
		}

		protected void CreateQTextOptionProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTextOption), this);
			_interceptor = (QTextOption) realProxy.GetTransparentProxy();
		}
		private QTextOption ProxyQTextOption() {
			return (QTextOption) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QTextOption() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQTextOptionProxy), null);
			_staticInterceptor = (IQTextOptionProxy) realProxy.GetTransparentProxy();
		}
		private static IQTextOptionProxy StaticQTextOption() {
			return (IQTextOptionProxy) _staticInterceptor;
		}

		enum E_WrapMode {
			NoWrap = 0,
			WordWrap = 1,
			ManualWrap = 2,
			WrapAnywhere = 3,
			WrapAtWordBoundaryOrAnywhere = 4,
		}
		enum Flag :long {
			IncludeTrailingSpaces = 0x80000000,
		}
		public QTextOption() : this((Type) null) {
			CreateQTextOptionProxy();
			NewQTextOption();
		}
		private void NewQTextOption() {
			ProxyQTextOption().NewQTextOption();
		}
		public QTextOption(int alignment) : this((Type) null) {
			CreateQTextOptionProxy();
			NewQTextOption(alignment);
		}
		private void NewQTextOption(int alignment) {
			ProxyQTextOption().NewQTextOption(alignment);
		}
		public QTextOption(QTextOption o) : this((Type) null) {
			CreateQTextOptionProxy();
			NewQTextOption(o);
		}
		private void NewQTextOption(QTextOption o) {
			ProxyQTextOption().NewQTextOption(o);
		}
		public void SetAlignment(int alignment) {
			ProxyQTextOption().SetAlignment(alignment);
		}
		public int Alignment() {
			return ProxyQTextOption().Alignment();
		}
		public void SetTextDirection(int aDirection) {
			ProxyQTextOption().SetTextDirection(aDirection);
		}
		public int TextDirection() {
			return ProxyQTextOption().TextDirection();
		}
		public void SetWrapMode(int wrap) {
			ProxyQTextOption().SetWrapMode(wrap);
		}
		public int WrapMode() {
			return ProxyQTextOption().WrapMode();
		}
		public void SetFlags(int flags) {
			ProxyQTextOption().SetFlags(flags);
		}
		public int Flags() {
			return ProxyQTextOption().Flags();
		}
		public void SetTabStop(double tabStop) {
			ProxyQTextOption().SetTabStop(tabStop);
		}
		public double TabStop() {
			return ProxyQTextOption().TabStop();
		}
		// void setTabArray(QList<qreal> arg1); >>>> NOT CONVERTED
		// QList<qreal> tabArray(); >>>> NOT CONVERTED
		public void SetUseDesignMetrics(bool b) {
			ProxyQTextOption().SetUseDesignMetrics(b);
		}
		public bool UseDesignMetrics() {
			return ProxyQTextOption().UseDesignMetrics();
		}
		~QTextOption() {
			ProxyQTextOption().Dispose();
		}
		public void Dispose() {
			ProxyQTextOption().Dispose();
		}
	}
}
