//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QLine : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QLine(Type dummy) {}
		interface IQLineProxy {
			bool op_equals(QLine lhs, QLine d);
		}

		protected void CreateQLineProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QLine), this);
			_interceptor = (QLine) realProxy.GetTransparentProxy();
		}
		private QLine ProxyQLine() {
			return (QLine) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QLine() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQLineProxy), null);
			_staticInterceptor = (IQLineProxy) realProxy.GetTransparentProxy();
		}
		private static IQLineProxy StaticQLine() {
			return (IQLineProxy) _staticInterceptor;
		}

		public QLine() : this((Type) null) {
			CreateQLineProxy();
			NewQLine();
		}
		private void NewQLine() {
			ProxyQLine().NewQLine();
		}
		public QLine(QPoint pt1, QPoint pt2) : this((Type) null) {
			CreateQLineProxy();
			NewQLine(pt1,pt2);
		}
		private void NewQLine(QPoint pt1, QPoint pt2) {
			ProxyQLine().NewQLine(pt1,pt2);
		}
		public QLine(int x1, int y1, int x2, int y2) : this((Type) null) {
			CreateQLineProxy();
			NewQLine(x1,y1,x2,y2);
		}
		private void NewQLine(int x1, int y1, int x2, int y2) {
			ProxyQLine().NewQLine(x1,y1,x2,y2);
		}
		public bool IsNull() {
			return ProxyQLine().IsNull();
		}
		public QPoint P1() {
			return ProxyQLine().P1();
		}
		public QPoint P2() {
			return ProxyQLine().P2();
		}
		public int X1() {
			return ProxyQLine().X1();
		}
		public int Y1() {
			return ProxyQLine().Y1();
		}
		public int X2() {
			return ProxyQLine().X2();
		}
		public int Y2() {
			return ProxyQLine().Y2();
		}
		public int Dx() {
			return ProxyQLine().Dx();
		}
		public int Dy() {
			return ProxyQLine().Dy();
		}
		public void Translate(QPoint p) {
			ProxyQLine().Translate(p);
		}
		public void Translate(int dx, int dy) {
			ProxyQLine().Translate(dx,dy);
		}
		public static bool operator==(QLine lhs, QLine d) {
			return StaticQLine().op_equals(lhs,d);
		}
		public static bool operator!=(QLine lhs, QLine d) {
			return !StaticQLine().op_equals(lhs,d);
		}
		public override bool Equals(object o) {
			if (!(o is QLine)) { return false; }
			return this == (QLine) o;
		}
		public override int GetHashCode() {
			return ProxyQLine().GetHashCode();
		}
		~QLine() {
			ProxyQLine().Dispose();
		}
		public void Dispose() {
			ProxyQLine().Dispose();
		}
	}
}
