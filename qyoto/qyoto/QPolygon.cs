//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QPolygon : IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QPolygon(Type dummy) {}
		interface IQPolygonProxy {
		}

		protected void CreateQPolygonProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QPolygon), this);
			_interceptor = (QPolygon) realProxy.GetTransparentProxy();
		}
		private QPolygon ProxyQPolygon() {
			return (QPolygon) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QPolygon() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQPolygonProxy), null);
			_staticInterceptor = (IQPolygonProxy) realProxy.GetTransparentProxy();
		}
		private static IQPolygonProxy StaticQPolygon() {
			return (IQPolygonProxy) _staticInterceptor;
		}

		public QPolygon() : this((Type) null) {
			CreateQPolygonProxy();
			NewQPolygon();
		}
		private void NewQPolygon() {
			ProxyQPolygon().NewQPolygon();
		}
		public QPolygon(int size) : this((Type) null) {
			CreateQPolygonProxy();
			NewQPolygon(size);
		}
		private void NewQPolygon(int size) {
			ProxyQPolygon().NewQPolygon(size);
		}
		public QPolygon(QPolygon a) : this((Type) null) {
			CreateQPolygonProxy();
			NewQPolygon(a);
		}
		private void NewQPolygon(QPolygon a) {
			ProxyQPolygon().NewQPolygon(a);
		}
		// QPolygon* QPolygon(const QVector<QPoint>& arg1); >>>> NOT CONVERTED
		public QPolygon(QRect r, bool closed) : this((Type) null) {
			CreateQPolygonProxy();
			NewQPolygon(r,closed);
		}
		private void NewQPolygon(QRect r, bool closed) {
			ProxyQPolygon().NewQPolygon(r,closed);
		}
		public QPolygon(QRect r) : this((Type) null) {
			CreateQPolygonProxy();
			NewQPolygon(r);
		}
		private void NewQPolygon(QRect r) {
			ProxyQPolygon().NewQPolygon(r);
		}
		public QPolygon(int nPoints, out int points) : this((Type) null) {
			CreateQPolygonProxy();
			NewQPolygon(nPoints,out points);
		}
		private void NewQPolygon(int nPoints, out int points) {
			ProxyQPolygon().NewQPolygon(nPoints,out points);
		}
		//  operator QVariant(); >>>> NOT CONVERTED
		public void Translate(int dx, int dy) {
			ProxyQPolygon().Translate(dx,dy);
		}
		public void Translate(QPoint offset) {
			ProxyQPolygon().Translate(offset);
		}
		public QRect BoundingRect() {
			return ProxyQPolygon().BoundingRect();
		}
		public void Point(int i, out int x, out int y) {
			ProxyQPolygon().Point(i,out x,out y);
		}
		public QPoint Point(int i) {
			return ProxyQPolygon().Point(i);
		}
		public void SetPoint(int index, int x, int y) {
			ProxyQPolygon().SetPoint(index,x,y);
		}
		public void SetPoint(int index, QPoint p) {
			ProxyQPolygon().SetPoint(index,p);
		}
		public void SetPoints(int nPoints, out int points) {
			ProxyQPolygon().SetPoints(nPoints,out points);
		}
		public void PutPoints(int index, int nPoints, out int points) {
			ProxyQPolygon().PutPoints(index,nPoints,out points);
		}
		public void PutPoints(int index, int nPoints, QPolygon from, int fromIndex) {
			ProxyQPolygon().PutPoints(index,nPoints,from,fromIndex);
		}
		public void PutPoints(int index, int nPoints, QPolygon from) {
			ProxyQPolygon().PutPoints(index,nPoints,from);
		}
		~QPolygon() {
			ProxyQPolygon().Dispose();
		}
		public void Dispose() {
			ProxyQPolygon().Dispose();
		}
	}
}
