//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QFocusEvent : QEvent, IDisposable {
 		protected QFocusEvent(Type dummy) : base((Type) null) {}
		interface IQFocusEventProxy {
		}

		protected void CreateQFocusEventProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QFocusEvent), this);
			_interceptor = (QFocusEvent) realProxy.GetTransparentProxy();
		}
		private QFocusEvent ProxyQFocusEvent() {
			return (QFocusEvent) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QFocusEvent() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQFocusEventProxy), null);
			_staticInterceptor = (IQFocusEventProxy) realProxy.GetTransparentProxy();
		}
		private static IQFocusEventProxy StaticQFocusEvent() {
			return (IQFocusEventProxy) _staticInterceptor;
		}

		public QFocusEvent(int type, int reason) : this((Type) null) {
			CreateQFocusEventProxy();
			NewQFocusEvent(type,reason);
		}
		private void NewQFocusEvent(int type, int reason) {
			ProxyQFocusEvent().NewQFocusEvent(type,reason);
		}
		public QFocusEvent(int type) : this((Type) null) {
			CreateQFocusEventProxy();
			NewQFocusEvent(type);
		}
		private void NewQFocusEvent(int type) {
			ProxyQFocusEvent().NewQFocusEvent(type);
		}
		public bool GotFocus() {
			return ProxyQFocusEvent().GotFocus();
		}
		public bool LostFocus() {
			return ProxyQFocusEvent().LostFocus();
		}
		public int Reason() {
			return ProxyQFocusEvent().Reason();
		}
		~QFocusEvent() {
			ProxyQFocusEvent().Dispose();
		}
		public new void Dispose() {
			ProxyQFocusEvent().Dispose();
		}
	}
}
