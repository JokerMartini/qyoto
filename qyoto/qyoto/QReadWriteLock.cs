//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QReadWriteLock : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QReadWriteLock(Type dummy) {}
		interface IQReadWriteLockProxy {
		}

		protected void CreateQReadWriteLockProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QReadWriteLock), this);
			_interceptor = (QReadWriteLock) realProxy.GetTransparentProxy();
		}
		private QReadWriteLock ProxyQReadWriteLock() {
			return (QReadWriteLock) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QReadWriteLock() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQReadWriteLockProxy), null);
			_staticInterceptor = (IQReadWriteLockProxy) realProxy.GetTransparentProxy();
		}
		private static IQReadWriteLockProxy StaticQReadWriteLock() {
			return (IQReadWriteLockProxy) _staticInterceptor;
		}

		public QReadWriteLock() : this((Type) null) {
			CreateQReadWriteLockProxy();
			NewQReadWriteLock();
		}
		private void NewQReadWriteLock() {
			ProxyQReadWriteLock().NewQReadWriteLock();
		}
		public void LockForRead() {
			ProxyQReadWriteLock().LockForRead();
		}
		public bool TryLockForRead() {
			return ProxyQReadWriteLock().TryLockForRead();
		}
		public void LockForWrite() {
			ProxyQReadWriteLock().LockForWrite();
		}
		public bool TryLockForWrite() {
			return ProxyQReadWriteLock().TryLockForWrite();
		}
		public void Unlock() {
			ProxyQReadWriteLock().Unlock();
		}
		~QReadWriteLock() {
			ProxyQReadWriteLock().Dispose();
		}
		public void Dispose() {
			ProxyQReadWriteLock().Dispose();
		}
	}
}
