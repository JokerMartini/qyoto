//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QPaintEngineState : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QPaintEngineState(Type dummy) {}
		interface IQPaintEngineStateProxy {
		}

		protected void CreateQPaintEngineStateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QPaintEngineState), this);
			_interceptor = (QPaintEngineState) realProxy.GetTransparentProxy();
		}
		private QPaintEngineState ProxyQPaintEngineState() {
			return (QPaintEngineState) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QPaintEngineState() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQPaintEngineStateProxy), null);
			_staticInterceptor = (IQPaintEngineStateProxy) realProxy.GetTransparentProxy();
		}
		private static IQPaintEngineStateProxy StaticQPaintEngineState() {
			return (IQPaintEngineStateProxy) _staticInterceptor;
		}

		public int State() {
			return ProxyQPaintEngineState().State();
		}
		public QPen Pen() {
			return ProxyQPaintEngineState().Pen();
		}
		public QBrush Brush() {
			return ProxyQPaintEngineState().Brush();
		}
		public QPointF BrushOrigin() {
			return ProxyQPaintEngineState().BrushOrigin();
		}
		public QBrush BackgroundBrush() {
			return ProxyQPaintEngineState().BackgroundBrush();
		}
		public int BackgroundMode() {
			return ProxyQPaintEngineState().BackgroundMode();
		}
		public QFont Font() {
			return ProxyQPaintEngineState().Font();
		}
		public QMatrix Matrix() {
			return ProxyQPaintEngineState().Matrix();
		}
		public int ClipOperation() {
			return ProxyQPaintEngineState().ClipOperation();
		}
		public QRegion ClipRegion() {
			return ProxyQPaintEngineState().ClipRegion();
		}
		public QPainterPath ClipPath() {
			return ProxyQPaintEngineState().ClipPath();
		}
		public int RenderHints() {
			return ProxyQPaintEngineState().RenderHints();
		}
		public int CompositionMode() {
			return ProxyQPaintEngineState().CompositionMode();
		}
		public QPainter Painter() {
			return ProxyQPaintEngineState().Painter();
		}
		public QPaintEngineState() : this((Type) null) {
			CreateQPaintEngineStateProxy();
			NewQPaintEngineState();
		}
		private void NewQPaintEngineState() {
			ProxyQPaintEngineState().NewQPaintEngineState();
		}
		~QPaintEngineState() {
			ProxyQPaintEngineState().Dispose();
		}
		public void Dispose() {
			ProxyQPaintEngineState().Dispose();
		}
	}
}
