//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QDomNotation : QDomNode, IDisposable {
 		protected QDomNotation(Type dummy) : base((Type) null) {}
		interface IQDomNotationProxy {
		}

		protected void CreateQDomNotationProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDomNotation), this);
			_interceptor = (QDomNotation) realProxy.GetTransparentProxy();
		}
		private QDomNotation ProxyQDomNotation() {
			return (QDomNotation) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QDomNotation() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDomNotationProxy), null);
			_staticInterceptor = (IQDomNotationProxy) realProxy.GetTransparentProxy();
		}
		private static IQDomNotationProxy StaticQDomNotation() {
			return (IQDomNotationProxy) _staticInterceptor;
		}

		public QDomNotation() : this((Type) null) {
			CreateQDomNotationProxy();
			NewQDomNotation();
		}
		private void NewQDomNotation() {
			ProxyQDomNotation().NewQDomNotation();
		}
		public QDomNotation(QDomNotation x) : this((Type) null) {
			CreateQDomNotationProxy();
			NewQDomNotation(x);
		}
		private void NewQDomNotation(QDomNotation x) {
			ProxyQDomNotation().NewQDomNotation(x);
		}
		public string PublicId() {
			return ProxyQDomNotation().PublicId();
		}
		public string SystemId() {
			return ProxyQDomNotation().SystemId();
		}
		public new int NodeType() {
			return ProxyQDomNotation().NodeType();
		}
		~QDomNotation() {
			ProxyQDomNotation().Dispose();
		}
		public void Dispose() {
			ProxyQDomNotation().Dispose();
		}
	}
}
