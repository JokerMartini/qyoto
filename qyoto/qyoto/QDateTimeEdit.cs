//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	/// See <see cref="IQDateTimeEditSignals"></see> for signals emitted by QDateTimeEdit
	public class QDateTimeEdit : QAbstractSpinBox, IDisposable {
 		protected QDateTimeEdit(Type dummy) : base((Type) null) {}
		interface IQDateTimeEditProxy {
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected void CreateQDateTimeEditProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDateTimeEdit), this);
			_interceptor = (QDateTimeEdit) realProxy.GetTransparentProxy();
		}
		private QDateTimeEdit ProxyQDateTimeEdit() {
			return (QDateTimeEdit) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QDateTimeEdit() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDateTimeEditProxy), null);
			_staticInterceptor = (IQDateTimeEditProxy) realProxy.GetTransparentProxy();
		}
		private static IQDateTimeEditProxy StaticQDateTimeEdit() {
			return (IQDateTimeEditProxy) _staticInterceptor;
		}

		enum Section {
			NoSection = 0x0000,
			AmPmSection = 0x0001,
			MSecSection = 0x0002,
			SecondSection = 0x0004,
			MinuteSection = 0x0008,
			HourSection = 0x0010,
			DaySection = 0x0100,
			MonthSection = 0x0200,
			YearSection = 0x0400,
			TimeSections_Mask = AmPmSection|MSecSection|SecondSection|MinuteSection|HourSection,
			DateSections_Mask = DaySection|MonthSection|YearSection,
		}
		public new virtual QMetaObject MetaObject() {
			return ProxyQDateTimeEdit().MetaObject();
		}
		// void* qt_metacast(const char* arg1); >>>> NOT CONVERTED
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QDateTimeEdit(QWidget parent) : this((Type) null) {
			CreateQDateTimeEditProxy();
			NewQDateTimeEdit(parent);
		}
		private void NewQDateTimeEdit(QWidget parent) {
			ProxyQDateTimeEdit().NewQDateTimeEdit(parent);
		}
		public QDateTimeEdit() : this((Type) null) {
			CreateQDateTimeEditProxy();
			NewQDateTimeEdit();
		}
		private void NewQDateTimeEdit() {
			ProxyQDateTimeEdit().NewQDateTimeEdit();
		}
		public QDateTimeEdit(DateTime dt, QWidget parent) : this((Type) null) {
			CreateQDateTimeEditProxy();
			NewQDateTimeEdit(dt,parent);
		}
		private void NewQDateTimeEdit(DateTime dt, QWidget parent) {
			ProxyQDateTimeEdit().NewQDateTimeEdit(dt,parent);
		}
		public QDateTimeEdit(DateTime dt) : this((Type) null) {
			CreateQDateTimeEditProxy();
			NewQDateTimeEdit(dt);
		}
		private void NewQDateTimeEdit(DateTime dt) {
			ProxyQDateTimeEdit().NewQDateTimeEdit(dt);
		}
		public DateTime DateTime() {
			return ProxyQDateTimeEdit().DateTime();
		}
		public DateTime Date() {
			return ProxyQDateTimeEdit().Date();
		}
		public DateTime Time() {
			return ProxyQDateTimeEdit().Time();
		}
		public DateTime MinimumDate() {
			return ProxyQDateTimeEdit().MinimumDate();
		}
		public void SetMinimumDate(DateTime min) {
			ProxyQDateTimeEdit().SetMinimumDate(min);
		}
		public void ClearMinimumDate() {
			ProxyQDateTimeEdit().ClearMinimumDate();
		}
		public DateTime MaximumDate() {
			return ProxyQDateTimeEdit().MaximumDate();
		}
		public void SetMaximumDate(DateTime max) {
			ProxyQDateTimeEdit().SetMaximumDate(max);
		}
		public void ClearMaximumDate() {
			ProxyQDateTimeEdit().ClearMaximumDate();
		}
		public void SetDateRange(DateTime min, DateTime max) {
			ProxyQDateTimeEdit().SetDateRange(min,max);
		}
		public DateTime MinimumTime() {
			return ProxyQDateTimeEdit().MinimumTime();
		}
		public void SetMinimumTime(DateTime min) {
			ProxyQDateTimeEdit().SetMinimumTime(min);
		}
		public void ClearMinimumTime() {
			ProxyQDateTimeEdit().ClearMinimumTime();
		}
		public DateTime MaximumTime() {
			return ProxyQDateTimeEdit().MaximumTime();
		}
		public void SetMaximumTime(DateTime max) {
			ProxyQDateTimeEdit().SetMaximumTime(max);
		}
		public void ClearMaximumTime() {
			ProxyQDateTimeEdit().ClearMaximumTime();
		}
		public void SetTimeRange(DateTime min, DateTime max) {
			ProxyQDateTimeEdit().SetTimeRange(min,max);
		}
		public int DisplayedSections() {
			return ProxyQDateTimeEdit().DisplayedSections();
		}
		public int CurrentSection() {
			return ProxyQDateTimeEdit().CurrentSection();
		}
		public void SetCurrentSection(int section) {
			ProxyQDateTimeEdit().SetCurrentSection(section);
		}
		public string SectionText(int s) {
			return ProxyQDateTimeEdit().SectionText(s);
		}
		public string DisplayFormat() {
			return ProxyQDateTimeEdit().DisplayFormat();
		}
		public void SetDisplayFormat(string format) {
			ProxyQDateTimeEdit().SetDisplayFormat(format);
		}
		public new QSize SizeHint() {
			return ProxyQDateTimeEdit().SizeHint();
		}
		public new virtual void Clear() {
			ProxyQDateTimeEdit().Clear();
		}
		public new virtual void StepBy(int steps) {
			ProxyQDateTimeEdit().StepBy(steps);
		}
		public new bool Event(QEvent e) {
			return ProxyQDateTimeEdit().Event(e);
		}
		public void SetDateTime(DateTime dateTime) {
			ProxyQDateTimeEdit().SetDateTime(dateTime);
		}
		public void SetDate(DateTime date) {
			ProxyQDateTimeEdit().SetDate(date);
		}
		public void SetTime(DateTime time) {
			ProxyQDateTimeEdit().SetTime(time);
		}
		public static new string Tr(string s, string c) {
			return StaticQDateTimeEdit().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQDateTimeEdit().Tr(s);
		}
		protected new virtual void KeyPressEvent(QKeyEvent e) {
			ProxyQDateTimeEdit().KeyPressEvent(e);
		}
		protected new virtual void WheelEvent(QWheelEvent e) {
			ProxyQDateTimeEdit().WheelEvent(e);
		}
		protected new virtual void FocusInEvent(QFocusEvent e) {
			ProxyQDateTimeEdit().FocusInEvent(e);
		}
		protected new virtual bool FocusNextPrevChild(bool next) {
			return ProxyQDateTimeEdit().FocusNextPrevChild(next);
		}
		protected new virtual int Validate(StringBuilder input, out int pos) {
			return ProxyQDateTimeEdit().Validate(input,out pos);
		}
		protected virtual DateTime DateTimeFromText(string text) {
			return ProxyQDateTimeEdit().DateTimeFromText(text);
		}
		protected virtual string TextFromDateTime(DateTime dt) {
			return ProxyQDateTimeEdit().TextFromDateTime(dt);
		}
		protected new virtual int StepEnabled() {
			return ProxyQDateTimeEdit().StepEnabled();
		}
		~QDateTimeEdit() {
			ProxyQDateTimeEdit().Dispose();
		}
		public new void Dispose() {
			ProxyQDateTimeEdit().Dispose();
		}
	}

	public interface IQDateTimeEditSignals {
		void DateTimeChanged(DateTime date);
		void TimeChanged(DateTime date);
		void DateChanged(DateTime date);
	}
}
