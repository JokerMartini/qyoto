//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	/// See <see cref="IQThreadSignals"></see> for signals emitted by QThread
	public class QThread : QObject {
 		protected QThread(Type dummy) : base((Type) null) {}
		interface IQThreadProxy {
			uint CurrentThreadId();
			QThread CurrentThread();
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected void CreateQThreadProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QThread), this);
			_interceptor = (QThread) realProxy.GetTransparentProxy();
		}
		private QThread ProxyQThread() {
			return (QThread) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QThread() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQThreadProxy), null);
			_staticInterceptor = (IQThreadProxy) realProxy.GetTransparentProxy();
		}
		private static IQThreadProxy StaticQThread() {
			return (IQThreadProxy) _staticInterceptor;
		}

		enum Priority {
			IdlePriority = 0,
			LowestPriority = 1,
			LowPriority = 2,
			NormalPriority = 3,
			HighPriority = 4,
			HighestPriority = 5,
			TimeCriticalPriority = 6,
			InheritPriority = 7,
		}
		public bool IsFinished() {
			return ProxyQThread().IsFinished();
		}
		public bool IsRunning() {
			return ProxyQThread().IsRunning();
		}
		public void SetStackSize(uint stackSize) {
			ProxyQThread().SetStackSize(stackSize);
		}
		public uint StackSize() {
			return ProxyQThread().StackSize();
		}
		public void Exit(int retcode) {
			ProxyQThread().Exit(retcode);
		}
		public void Exit() {
			ProxyQThread().Exit();
		}
		public bool Wait(ulong time) {
			return ProxyQThread().Wait(time);
		}
		public bool Wait() {
			return ProxyQThread().Wait();
		}
		public new virtual QMetaObject MetaObject() {
			return ProxyQThread().MetaObject();
		}
		// void* qt_metacast(const char* arg1); >>>> NOT CONVERTED
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public void Start(int arg1) {
			ProxyQThread().Start(arg1);
		}
		public void Start() {
			ProxyQThread().Start();
		}
		public void Terminate() {
			ProxyQThread().Terminate();
		}
		public void Quit() {
			ProxyQThread().Quit();
		}
		public static uint CurrentThreadId() {
			return StaticQThread().CurrentThreadId();
		}
		public static QThread CurrentThread() {
			return StaticQThread().CurrentThread();
		}
		public static new string Tr(string s, string c) {
			return StaticQThread().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQThread().Tr(s);
		}
	}

	public interface IQThreadSignals {
		void Started();
		void Finished();
		void Terminated();
	}
}
