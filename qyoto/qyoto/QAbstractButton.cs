//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	/// See <see cref="IQAbstractButtonSignals"></see> for signals emitted by QAbstractButton
	public class QAbstractButton : QWidget {
 		protected QAbstractButton(Type dummy) : base((Type) null) {}
		interface IQAbstractButtonProxy {
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected void CreateQAbstractButtonProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QAbstractButton), this);
			_interceptor = (QAbstractButton) realProxy.GetTransparentProxy();
		}
		private QAbstractButton ProxyQAbstractButton() {
			return (QAbstractButton) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QAbstractButton() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQAbstractButtonProxy), null);
			_staticInterceptor = (IQAbstractButtonProxy) realProxy.GetTransparentProxy();
		}
		private static IQAbstractButtonProxy StaticQAbstractButton() {
			return (IQAbstractButtonProxy) _staticInterceptor;
		}

		public new virtual QMetaObject MetaObject() {
			return ProxyQAbstractButton().MetaObject();
		}
		// void* qt_metacast(const char* arg1); >>>> NOT CONVERTED
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public void SetText(string text) {
			ProxyQAbstractButton().SetText(text);
		}
		public string Text() {
			return ProxyQAbstractButton().Text();
		}
		public void SetIcon(QIcon icon) {
			ProxyQAbstractButton().SetIcon(icon);
		}
		public QIcon Icon() {
			return ProxyQAbstractButton().Icon();
		}
		public QSize IconSize() {
			return ProxyQAbstractButton().IconSize();
		}
		public void SetShortcut(QKeySequence key) {
			ProxyQAbstractButton().SetShortcut(key);
		}
		public QKeySequence Shortcut() {
			return ProxyQAbstractButton().Shortcut();
		}
		public void SetCheckable(bool arg1) {
			ProxyQAbstractButton().SetCheckable(arg1);
		}
		public bool IsCheckable() {
			return ProxyQAbstractButton().IsCheckable();
		}
		public bool IsChecked() {
			return ProxyQAbstractButton().IsChecked();
		}
		public void SetDown(bool arg1) {
			ProxyQAbstractButton().SetDown(arg1);
		}
		public bool IsDown() {
			return ProxyQAbstractButton().IsDown();
		}
		public void SetAutoRepeat(bool arg1) {
			ProxyQAbstractButton().SetAutoRepeat(arg1);
		}
		public bool AutoRepeat() {
			return ProxyQAbstractButton().AutoRepeat();
		}
		public void SetAutoExclusive(bool arg1) {
			ProxyQAbstractButton().SetAutoExclusive(arg1);
		}
		public bool AutoExclusive() {
			return ProxyQAbstractButton().AutoExclusive();
		}
		public QButtonGroup Group() {
			return ProxyQAbstractButton().Group();
		}
		public void SetIconSize(QSize size) {
			ProxyQAbstractButton().SetIconSize(size);
		}
		public void AnimateClick(int msec) {
			ProxyQAbstractButton().AnimateClick(msec);
		}
		public void AnimateClick() {
			ProxyQAbstractButton().AnimateClick();
		}
		public void Click() {
			ProxyQAbstractButton().Click();
		}
		public void Toggle() {
			ProxyQAbstractButton().Toggle();
		}
		public void SetChecked(bool arg1) {
			ProxyQAbstractButton().SetChecked(arg1);
		}
		public static new string Tr(string s, string c) {
			return StaticQAbstractButton().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQAbstractButton().Tr(s);
		}
	}

	public interface IQAbstractButtonSignals {
		void Pressed();
		void Released();
		void Clicked(bool arg1);
		void Clicked();
		void Toggled(bool arg1);
	}
}
