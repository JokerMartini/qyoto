//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QStyleOptionHeader : QStyleOption, IDisposable {
 		protected QStyleOptionHeader(Type dummy) : base((Type) null) {}
		interface IQStyleOptionHeaderProxy {
		}

		protected void CreateQStyleOptionHeaderProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QStyleOptionHeader), this);
			_interceptor = (QStyleOptionHeader) realProxy.GetTransparentProxy();
		}
		private QStyleOptionHeader ProxyQStyleOptionHeader() {
			return (QStyleOptionHeader) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QStyleOptionHeader() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQStyleOptionHeaderProxy), null);
			_staticInterceptor = (IQStyleOptionHeaderProxy) realProxy.GetTransparentProxy();
		}
		private static IQStyleOptionHeaderProxy StaticQStyleOptionHeader() {
			return (IQStyleOptionHeaderProxy) _staticInterceptor;
		}

		public const int Type = (int) OptionType.SO_Header;

		public const int Version = 1;

		enum SectionPosition {
			Beginning = 0,
			Middle = 1,
			End = 2,
			OnlyOneSection = 3,
		}
		enum SelectedPosition {
			NotAdjacent = 0,
			NextIsSelected = 1,
			PreviousIsSelected = 2,
			NextAndPreviousAreSelected = 3,
		}
		enum SortIndicator {
			None = 0,
			SortUp = 1,
			SortDown = 2,
		}
		public QStyleOptionHeader() : this((Type) null) {
			CreateQStyleOptionHeaderProxy();
			NewQStyleOptionHeader();
		}
		private void NewQStyleOptionHeader() {
			ProxyQStyleOptionHeader().NewQStyleOptionHeader();
		}
		public QStyleOptionHeader(QStyleOptionHeader other) : this((Type) null) {
			CreateQStyleOptionHeaderProxy();
			NewQStyleOptionHeader(other);
		}
		private void NewQStyleOptionHeader(QStyleOptionHeader other) {
			ProxyQStyleOptionHeader().NewQStyleOptionHeader(other);
		}
		public QStyleOptionHeader(int version) : this((Type) null) {
			CreateQStyleOptionHeaderProxy();
			NewQStyleOptionHeader(version);
		}
		private void NewQStyleOptionHeader(int version) {
			ProxyQStyleOptionHeader().NewQStyleOptionHeader(version);
		}
		~QStyleOptionHeader() {
			ProxyQStyleOptionHeader().Dispose();
		}
		public void Dispose() {
			ProxyQStyleOptionHeader().Dispose();
		}
	}
}
