//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Collections;
	using System.Text;

	/// See <see cref="IQWorkspaceSignals"></see> for signals emitted by QWorkspace
	public class QWorkspace : QWidget, IDisposable {
 		protected QWorkspace(Type dummy) : base((Type) null) {}
		interface IQWorkspaceProxy {
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected void CreateQWorkspaceProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QWorkspace), this);
			_interceptor = (QWorkspace) realProxy.GetTransparentProxy();
		}
		private QWorkspace ProxyQWorkspace() {
			return (QWorkspace) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QWorkspace() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQWorkspaceProxy), null);
			_staticInterceptor = (IQWorkspaceProxy) realProxy.GetTransparentProxy();
		}
		private static IQWorkspaceProxy StaticQWorkspace() {
			return (IQWorkspaceProxy) _staticInterceptor;
		}

		enum WindowOrder {
			CreationOrder = 0,
			StackingOrder = 1,
		}
		public new virtual QMetaObject MetaObject() {
			return ProxyQWorkspace().MetaObject();
		}
		// void* qt_metacast(const char* arg1); >>>> NOT CONVERTED
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QWorkspace(QWidget parent) : this((Type) null) {
			CreateQWorkspaceProxy();
			NewQWorkspace(parent);
		}
		private void NewQWorkspace(QWidget parent) {
			ProxyQWorkspace().NewQWorkspace(parent);
		}
		public QWorkspace() : this((Type) null) {
			CreateQWorkspaceProxy();
			NewQWorkspace();
		}
		private void NewQWorkspace() {
			ProxyQWorkspace().NewQWorkspace();
		}
		public QWidget ActiveWindow() {
			return ProxyQWorkspace().ActiveWindow();
		}
		public ArrayList WindowList(int order) {
			return ProxyQWorkspace().WindowList(order);
		}
		public ArrayList WindowList() {
			return ProxyQWorkspace().WindowList();
		}
		public QWidget AddWindow(QWidget w, int flags) {
			return ProxyQWorkspace().AddWindow(w,flags);
		}
		public QWidget AddWindow(QWidget w) {
			return ProxyQWorkspace().AddWindow(w);
		}
		public new QSize SizeHint() {
			return ProxyQWorkspace().SizeHint();
		}
		public bool ScrollBarsEnabled() {
			return ProxyQWorkspace().ScrollBarsEnabled();
		}
		public void SetScrollBarsEnabled(bool enable) {
			ProxyQWorkspace().SetScrollBarsEnabled(enable);
		}
		public void SetBackground(QBrush background) {
			ProxyQWorkspace().SetBackground(background);
		}
		public QBrush Background() {
			return ProxyQWorkspace().Background();
		}
		public void SetActiveWindow(QWidget w) {
			ProxyQWorkspace().SetActiveWindow(w);
		}
		public void Cascade() {
			ProxyQWorkspace().Cascade();
		}
		public void Tile() {
			ProxyQWorkspace().Tile();
		}
		public void CloseActiveWindow() {
			ProxyQWorkspace().CloseActiveWindow();
		}
		public void CloseAllWindows() {
			ProxyQWorkspace().CloseAllWindows();
		}
		public void ActivateNextWindow() {
			ProxyQWorkspace().ActivateNextWindow();
		}
		public void ActivatePreviousWindow() {
			ProxyQWorkspace().ActivatePreviousWindow();
		}
		public static new string Tr(string s, string c) {
			return StaticQWorkspace().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQWorkspace().Tr(s);
		}
		protected new void PaintEvent(QPaintEvent e) {
			ProxyQWorkspace().PaintEvent(e);
		}
		protected new void ChangeEvent(QEvent arg1) {
			ProxyQWorkspace().ChangeEvent(arg1);
		}
		protected new void ChildEvent(QChildEvent arg1) {
			ProxyQWorkspace().ChildEvent(arg1);
		}
		protected new void ResizeEvent(QResizeEvent arg1) {
			ProxyQWorkspace().ResizeEvent(arg1);
		}
		public new bool EventFilter(QObject arg1, QEvent arg2) {
			return ProxyQWorkspace().EventFilter(arg1,arg2);
		}
		public new void ShowEvent(QShowEvent e) {
			ProxyQWorkspace().ShowEvent(e);
		}
		protected new void HideEvent(QHideEvent e) {
			ProxyQWorkspace().HideEvent(e);
		}
		protected new void WheelEvent(QWheelEvent e) {
			ProxyQWorkspace().WheelEvent(e);
		}
		~QWorkspace() {
			ProxyQWorkspace().Dispose();
		}
		public new void Dispose() {
			ProxyQWorkspace().Dispose();
		}
	}

	public interface IQWorkspaceSignals {
		void WindowActivated(QWidget w);
	}
}
