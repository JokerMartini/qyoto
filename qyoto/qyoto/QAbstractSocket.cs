//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	/// See <see cref="IQAbstractSocketSignals"></see> for signals emitted by QAbstractSocket
	public class QAbstractSocket : QIODevice, IDisposable {
 		protected QAbstractSocket(Type dummy) : base((Type) null) {}
		interface IQAbstractSocketProxy {
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected void CreateQAbstractSocketProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QAbstractSocket), this);
			_interceptor = (QAbstractSocket) realProxy.GetTransparentProxy();
		}
		private QAbstractSocket ProxyQAbstractSocket() {
			return (QAbstractSocket) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QAbstractSocket() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQAbstractSocketProxy), null);
			_staticInterceptor = (IQAbstractSocketProxy) realProxy.GetTransparentProxy();
		}
		private static IQAbstractSocketProxy StaticQAbstractSocket() {
			return (IQAbstractSocketProxy) _staticInterceptor;
		}

		enum E_SocketType {
			TcpSocket = 0,
			UdpSocket = 1,
			UnknownSocketType = -1,
		}
		enum NetworkLayerProtocol {
			IPv4Protocol = 0,
			IPv6Protocol = 1,
			UnknownNetworkLayerProtocol = -1,
		}
		enum SocketError {
			ConnectionRefusedError = 0,
			RemoteHostClosedError = 1,
			HostNotFoundError = 2,
			SocketAccessError = 3,
			SocketResourceError = 4,
			SocketTimeoutError = 5,
			DatagramTooLargeError = 6,
			NetworkError = 7,
			AddressInUseError = 8,
			SocketAddressNotAvailableError = 9,
			UnsupportedSocketOperationError = 10,
			UnknownSocketError = -1,
		}
		enum SocketState {
			UnconnectedState = 0,
			HostLookupState = 1,
			ConnectingState = 2,
			ConnectedState = 3,
			BoundState = 4,
			ListeningState = 5,
			ClosingState = 6,
		}
		public new virtual QMetaObject MetaObject() {
			return ProxyQAbstractSocket().MetaObject();
		}
		// void* qt_metacast(const char* arg1); >>>> NOT CONVERTED
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QAbstractSocket(int socketType, QObject parent) : this((Type) null) {
			CreateQAbstractSocketProxy();
			NewQAbstractSocket(socketType,parent);
		}
		private void NewQAbstractSocket(int socketType, QObject parent) {
			ProxyQAbstractSocket().NewQAbstractSocket(socketType,parent);
		}
		public void ConnectToHost(string hostName, ushort port, int mode) {
			ProxyQAbstractSocket().ConnectToHost(hostName,port,mode);
		}
		public void ConnectToHost(string hostName, ushort port) {
			ProxyQAbstractSocket().ConnectToHost(hostName,port);
		}
		public void ConnectToHost(QHostAddress address, ushort port, int mode) {
			ProxyQAbstractSocket().ConnectToHost(address,port,mode);
		}
		public void ConnectToHost(QHostAddress address, ushort port) {
			ProxyQAbstractSocket().ConnectToHost(address,port);
		}
		public void DisconnectFromHost() {
			ProxyQAbstractSocket().DisconnectFromHost();
		}
		public bool IsValid() {
			return ProxyQAbstractSocket().IsValid();
		}
		// qint64 bytesAvailable(); >>>> NOT CONVERTED
		// qint64 bytesToWrite(); >>>> NOT CONVERTED
		public new bool CanReadLine() {
			return ProxyQAbstractSocket().CanReadLine();
		}
		public ushort LocalPort() {
			return ProxyQAbstractSocket().LocalPort();
		}
		public QHostAddress LocalAddress() {
			return ProxyQAbstractSocket().LocalAddress();
		}
		public ushort PeerPort() {
			return ProxyQAbstractSocket().PeerPort();
		}
		public QHostAddress PeerAddress() {
			return ProxyQAbstractSocket().PeerAddress();
		}
		public string PeerName() {
			return ProxyQAbstractSocket().PeerName();
		}
		// qint64 readBufferSize(); >>>> NOT CONVERTED
		// void setReadBufferSize(qint64 arg1); >>>> NOT CONVERTED
		public void Abort() {
			ProxyQAbstractSocket().Abort();
		}
		public int SocketDescriptor() {
			return ProxyQAbstractSocket().SocketDescriptor();
		}
		public bool SetSocketDescriptor(int socketDescriptor, int state, int openMode) {
			return ProxyQAbstractSocket().SetSocketDescriptor(socketDescriptor,state,openMode);
		}
		public bool SetSocketDescriptor(int socketDescriptor, int state) {
			return ProxyQAbstractSocket().SetSocketDescriptor(socketDescriptor,state);
		}
		public bool SetSocketDescriptor(int socketDescriptor) {
			return ProxyQAbstractSocket().SetSocketDescriptor(socketDescriptor);
		}
		public int SocketType() {
			return ProxyQAbstractSocket().SocketType();
		}
		public int State() {
			return ProxyQAbstractSocket().State();
		}
		public int Error() {
			return ProxyQAbstractSocket().Error();
		}
		public new void Close() {
			ProxyQAbstractSocket().Close();
		}
		public new bool IsSequential() {
			return ProxyQAbstractSocket().IsSequential();
		}
		public new bool AtEnd() {
			return ProxyQAbstractSocket().AtEnd();
		}
		public bool Flush() {
			return ProxyQAbstractSocket().Flush();
		}
		public bool WaitForConnected(int msecs) {
			return ProxyQAbstractSocket().WaitForConnected(msecs);
		}
		public bool WaitForConnected() {
			return ProxyQAbstractSocket().WaitForConnected();
		}
		public new bool WaitForReadyRead(int msecs) {
			return ProxyQAbstractSocket().WaitForReadyRead(msecs);
		}
		public new bool WaitForReadyRead() {
			return ProxyQAbstractSocket().WaitForReadyRead();
		}
		public new bool WaitForBytesWritten(int msecs) {
			return ProxyQAbstractSocket().WaitForBytesWritten(msecs);
		}
		public new bool WaitForBytesWritten() {
			return ProxyQAbstractSocket().WaitForBytesWritten();
		}
		public bool WaitForDisconnected(int msecs) {
			return ProxyQAbstractSocket().WaitForDisconnected(msecs);
		}
		public bool WaitForDisconnected() {
			return ProxyQAbstractSocket().WaitForDisconnected();
		}
		public static new string Tr(string s, string c) {
			return StaticQAbstractSocket().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQAbstractSocket().Tr(s);
		}
		// qint64 readData(char* arg1,qint64 arg2); >>>> NOT CONVERTED
		// qint64 readLineData(char* arg1,qint64 arg2); >>>> NOT CONVERTED
		// qint64 writeData(const char* arg1,qint64 arg2); >>>> NOT CONVERTED
		protected void SetSocketState(int state) {
			ProxyQAbstractSocket().SetSocketState(state);
		}
		protected void SetSocketError(int socketError) {
			ProxyQAbstractSocket().SetSocketError(socketError);
		}
		// QAbstractSocket* QAbstractSocket(QAbstractSocket::SocketType arg1,QAbstractSocketPrivate& arg2,QObject* arg3); >>>> NOT CONVERTED
		// QAbstractSocket* QAbstractSocket(QAbstractSocket::SocketType arg1,QAbstractSocketPrivate& arg2); >>>> NOT CONVERTED
		~QAbstractSocket() {
			ProxyQAbstractSocket().Dispose();
		}
		public void Dispose() {
			ProxyQAbstractSocket().Dispose();
		}
	}

	public interface IQAbstractSocketSignals {
		void HostFound();
		void Connected();
		void Disconnected();
		void StateChanged(int arg1);
		void Error(int arg1);
	}
}
