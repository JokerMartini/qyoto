//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	/// See <see cref="IQWidgetSignals"></see> for signals emitted by QWidget
	public class QWidget : QObject, IQPaintDevice, IDisposable {
 		protected QWidget(Type dummy) : base((Type) null) {}
		interface IQWidgetProxy {
			string Tr(string s, string c);
			string Tr(string s);
			void SetTabOrder(QWidget arg1, QWidget arg2);
			QWidget MouseGrabber();
			QWidget KeyboardGrabber();
			QWidget Find(ulong arg1);
		}

		protected void CreateQWidgetProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QWidget), this);
			_interceptor = (QWidget) realProxy.GetTransparentProxy();
		}
		private QWidget ProxyQWidget() {
			return (QWidget) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QWidget() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQWidgetProxy), null);
			_staticInterceptor = (IQWidgetProxy) realProxy.GetTransparentProxy();
		}
		private static IQWidgetProxy StaticQWidget() {
			return (IQWidgetProxy) _staticInterceptor;
		}

		public new virtual QMetaObject MetaObject() {
			return ProxyQWidget().MetaObject();
		}
		// void* qt_metacast(const char* arg1); >>>> NOT CONVERTED
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QWidget(QWidget parent, int f) : this((Type) null) {
			CreateQWidgetProxy();
			NewQWidget(parent,f);
		}
		private void NewQWidget(QWidget parent, int f) {
			ProxyQWidget().NewQWidget(parent,f);
		}
		public QWidget(QWidget parent) : this((Type) null) {
			CreateQWidgetProxy();
			NewQWidget(parent);
		}
		private void NewQWidget(QWidget parent) {
			ProxyQWidget().NewQWidget(parent);
		}
		public QWidget() : this((Type) null) {
			CreateQWidgetProxy();
			NewQWidget();
		}
		private void NewQWidget() {
			ProxyQWidget().NewQWidget();
		}
		public int DevType() {
			return ProxyQWidget().DevType();
		}
		public ulong WinId() {
			return ProxyQWidget().WinId();
		}
		public QStyle Style() {
			return ProxyQWidget().Style();
		}
		public void SetStyle(QStyle arg1) {
			ProxyQWidget().SetStyle(arg1);
		}
		public bool IsTopLevel() {
			return ProxyQWidget().IsTopLevel();
		}
		public bool IsWindow() {
			return ProxyQWidget().IsWindow();
		}
		public bool IsModal() {
			return ProxyQWidget().IsModal();
		}
		public bool IsEnabled() {
			return ProxyQWidget().IsEnabled();
		}
		public bool IsEnabledTo(QWidget arg1) {
			return ProxyQWidget().IsEnabledTo(arg1);
		}
		public bool IsEnabledToTLW() {
			return ProxyQWidget().IsEnabledToTLW();
		}
		public QRect FrameGeometry() {
			return ProxyQWidget().FrameGeometry();
		}
		public QRect Geometry() {
			return ProxyQWidget().Geometry();
		}
		public QRect NormalGeometry() {
			return ProxyQWidget().NormalGeometry();
		}
		public int X() {
			return ProxyQWidget().X();
		}
		public int Y() {
			return ProxyQWidget().Y();
		}
		public QPoint Pos() {
			return ProxyQWidget().Pos();
		}
		public QSize FrameSize() {
			return ProxyQWidget().FrameSize();
		}
		public QSize Size() {
			return ProxyQWidget().Size();
		}
		public int Width() {
			return ProxyQWidget().Width();
		}
		public int Height() {
			return ProxyQWidget().Height();
		}
		public QRect Rect() {
			return ProxyQWidget().Rect();
		}
		public QRect ChildrenRect() {
			return ProxyQWidget().ChildrenRect();
		}
		public QRegion ChildrenRegion() {
			return ProxyQWidget().ChildrenRegion();
		}
		public QSize MinimumSize() {
			return ProxyQWidget().MinimumSize();
		}
		public QSize MaximumSize() {
			return ProxyQWidget().MaximumSize();
		}
		public int MinimumWidth() {
			return ProxyQWidget().MinimumWidth();
		}
		public int MinimumHeight() {
			return ProxyQWidget().MinimumHeight();
		}
		public int MaximumWidth() {
			return ProxyQWidget().MaximumWidth();
		}
		public int MaximumHeight() {
			return ProxyQWidget().MaximumHeight();
		}
		public void SetMinimumSize(QSize arg1) {
			ProxyQWidget().SetMinimumSize(arg1);
		}
		public void SetMinimumSize(int minw, int minh) {
			ProxyQWidget().SetMinimumSize(minw,minh);
		}
		public void SetMaximumSize(QSize arg1) {
			ProxyQWidget().SetMaximumSize(arg1);
		}
		public void SetMaximumSize(int maxw, int maxh) {
			ProxyQWidget().SetMaximumSize(maxw,maxh);
		}
		public void SetMinimumWidth(int minw) {
			ProxyQWidget().SetMinimumWidth(minw);
		}
		public void SetMinimumHeight(int minh) {
			ProxyQWidget().SetMinimumHeight(minh);
		}
		public void SetMaximumWidth(int maxw) {
			ProxyQWidget().SetMaximumWidth(maxw);
		}
		public void SetMaximumHeight(int maxh) {
			ProxyQWidget().SetMaximumHeight(maxh);
		}
		public QSize SizeIncrement() {
			return ProxyQWidget().SizeIncrement();
		}
		public void SetSizeIncrement(QSize arg1) {
			ProxyQWidget().SetSizeIncrement(arg1);
		}
		public void SetSizeIncrement(int w, int h) {
			ProxyQWidget().SetSizeIncrement(w,h);
		}
		public QSize BaseSize() {
			return ProxyQWidget().BaseSize();
		}
		public void SetBaseSize(QSize arg1) {
			ProxyQWidget().SetBaseSize(arg1);
		}
		public void SetBaseSize(int basew, int baseh) {
			ProxyQWidget().SetBaseSize(basew,baseh);
		}
		public void SetFixedSize(QSize arg1) {
			ProxyQWidget().SetFixedSize(arg1);
		}
		public void SetFixedSize(int w, int h) {
			ProxyQWidget().SetFixedSize(w,h);
		}
		public void SetFixedWidth(int w) {
			ProxyQWidget().SetFixedWidth(w);
		}
		public void SetFixedHeight(int h) {
			ProxyQWidget().SetFixedHeight(h);
		}
		public QPoint MapToGlobal(QPoint arg1) {
			return ProxyQWidget().MapToGlobal(arg1);
		}
		public QPoint MapFromGlobal(QPoint arg1) {
			return ProxyQWidget().MapFromGlobal(arg1);
		}
		public QPoint MapToParent(QPoint arg1) {
			return ProxyQWidget().MapToParent(arg1);
		}
		public QPoint MapFromParent(QPoint arg1) {
			return ProxyQWidget().MapFromParent(arg1);
		}
		public QPoint MapTo(QWidget arg1, QPoint arg2) {
			return ProxyQWidget().MapTo(arg1,arg2);
		}
		public QPoint MapFrom(QWidget arg1, QPoint arg2) {
			return ProxyQWidget().MapFrom(arg1,arg2);
		}
		public QWidget Window() {
			return ProxyQWidget().Window();
		}
		public QWidget TopLevelWidget() {
			return ProxyQWidget().TopLevelWidget();
		}
		public QPalette Palette() {
			return ProxyQWidget().Palette();
		}
		public void SetPalette(QPalette arg1) {
			ProxyQWidget().SetPalette(arg1);
		}
		public void SetBackgroundRole(int arg1) {
			ProxyQWidget().SetBackgroundRole(arg1);
		}
		public int BackgroundRole() {
			return ProxyQWidget().BackgroundRole();
		}
		public void SetForegroundRole(int arg1) {
			ProxyQWidget().SetForegroundRole(arg1);
		}
		public int ForegroundRole() {
			return ProxyQWidget().ForegroundRole();
		}
		public QFont Font() {
			return ProxyQWidget().Font();
		}
		public void SetFont(QFont arg1) {
			ProxyQWidget().SetFont(arg1);
		}
		public QFontMetrics FontMetrics() {
			return ProxyQWidget().FontMetrics();
		}
		public QFontInfo FontInfo() {
			return ProxyQWidget().FontInfo();
		}
		public QCursor Cursor() {
			return ProxyQWidget().Cursor();
		}
		public void SetCursor(QCursor arg1) {
			ProxyQWidget().SetCursor(arg1);
		}
		public void UnsetCursor() {
			ProxyQWidget().UnsetCursor();
		}
		public void SetMouseTracking(bool enable) {
			ProxyQWidget().SetMouseTracking(enable);
		}
		public bool HasMouseTracking() {
			return ProxyQWidget().HasMouseTracking();
		}
		public bool UnderMouse() {
			return ProxyQWidget().UnderMouse();
		}
		public void SetMask(QBitmap arg1) {
			ProxyQWidget().SetMask(arg1);
		}
		public void SetMask(QRegion arg1) {
			ProxyQWidget().SetMask(arg1);
		}
		public QRegion Mask() {
			return ProxyQWidget().Mask();
		}
		public void ClearMask() {
			ProxyQWidget().ClearMask();
		}
		public void SetWindowTitle(string arg1) {
			ProxyQWidget().SetWindowTitle(arg1);
		}
		public string WindowTitle() {
			return ProxyQWidget().WindowTitle();
		}
		public void SetWindowIcon(QIcon icon) {
			ProxyQWidget().SetWindowIcon(icon);
		}
		public QIcon WindowIcon() {
			return ProxyQWidget().WindowIcon();
		}
		public void SetWindowIconText(string arg1) {
			ProxyQWidget().SetWindowIconText(arg1);
		}
		public string WindowIconText() {
			return ProxyQWidget().WindowIconText();
		}
		public void SetWindowRole(string arg1) {
			ProxyQWidget().SetWindowRole(arg1);
		}
		public string WindowRole() {
			return ProxyQWidget().WindowRole();
		}
		public void SetWindowOpacity(double level) {
			ProxyQWidget().SetWindowOpacity(level);
		}
		public double WindowOpacity() {
			return ProxyQWidget().WindowOpacity();
		}
		public bool IsWindowModified() {
			return ProxyQWidget().IsWindowModified();
		}
		public void SetToolTip(string arg1) {
			ProxyQWidget().SetToolTip(arg1);
		}
		public string ToolTip() {
			return ProxyQWidget().ToolTip();
		}
		public void SetStatusTip(string arg1) {
			ProxyQWidget().SetStatusTip(arg1);
		}
		public string StatusTip() {
			return ProxyQWidget().StatusTip();
		}
		public void SetWhatsThis(string arg1) {
			ProxyQWidget().SetWhatsThis(arg1);
		}
		public string WhatsThis() {
			return ProxyQWidget().WhatsThis();
		}
		public string AccessibleName() {
			return ProxyQWidget().AccessibleName();
		}
		public void SetAccessibleName(string name) {
			ProxyQWidget().SetAccessibleName(name);
		}
		public string AccessibleDescription() {
			return ProxyQWidget().AccessibleDescription();
		}
		public void SetAccessibleDescription(string description) {
			ProxyQWidget().SetAccessibleDescription(description);
		}
		public void SetLayoutDirection(int direction) {
			ProxyQWidget().SetLayoutDirection(direction);
		}
		public int LayoutDirection() {
			return ProxyQWidget().LayoutDirection();
		}
		public void UnsetLayoutDirection() {
			ProxyQWidget().UnsetLayoutDirection();
		}
		public bool IsRightToLeft() {
			return ProxyQWidget().IsRightToLeft();
		}
		public bool IsLeftToRight() {
			return ProxyQWidget().IsLeftToRight();
		}
		public bool IsActiveWindow() {
			return ProxyQWidget().IsActiveWindow();
		}
		public void ActivateWindow() {
			ProxyQWidget().ActivateWindow();
		}
		public void ClearFocus() {
			ProxyQWidget().ClearFocus();
		}
		public void SetFocus(int reason) {
			ProxyQWidget().SetFocus(reason);
		}
		public int FocusPolicy() {
			return ProxyQWidget().FocusPolicy();
		}
		public void SetFocusPolicy(int policy) {
			ProxyQWidget().SetFocusPolicy(policy);
		}
		public bool HasFocus() {
			return ProxyQWidget().HasFocus();
		}
		public void SetFocusProxy(QWidget arg1) {
			ProxyQWidget().SetFocusProxy(arg1);
		}
		public QWidget FocusProxy() {
			return ProxyQWidget().FocusProxy();
		}
		public int ContextMenuPolicy() {
			return ProxyQWidget().ContextMenuPolicy();
		}
		public void SetContextMenuPolicy(int policy) {
			ProxyQWidget().SetContextMenuPolicy(policy);
		}
		public void GrabMouse() {
			ProxyQWidget().GrabMouse();
		}
		public void GrabMouse(QCursor arg1) {
			ProxyQWidget().GrabMouse(arg1);
		}
		public void ReleaseMouse() {
			ProxyQWidget().ReleaseMouse();
		}
		public void GrabKeyboard() {
			ProxyQWidget().GrabKeyboard();
		}
		public void ReleaseKeyboard() {
			ProxyQWidget().ReleaseKeyboard();
		}
		public int GrabShortcut(QKeySequence key, int context) {
			return ProxyQWidget().GrabShortcut(key,context);
		}
		public int GrabShortcut(QKeySequence key) {
			return ProxyQWidget().GrabShortcut(key);
		}
		public void ReleaseShortcut(int id) {
			ProxyQWidget().ReleaseShortcut(id);
		}
		public void SetShortcutEnabled(int id, bool enable) {
			ProxyQWidget().SetShortcutEnabled(id,enable);
		}
		public void SetShortcutEnabled(int id) {
			ProxyQWidget().SetShortcutEnabled(id);
		}
		public bool UpdatesEnabled() {
			return ProxyQWidget().UpdatesEnabled();
		}
		public void SetUpdatesEnabled(bool enable) {
			ProxyQWidget().SetUpdatesEnabled(enable);
		}
		public void Update(int x, int y, int w, int h) {
			ProxyQWidget().Update(x,y,w,h);
		}
		public void Update(QRect arg1) {
			ProxyQWidget().Update(arg1);
		}
		public void Update(QRegion arg1) {
			ProxyQWidget().Update(arg1);
		}
		public void Repaint(int x, int y, int w, int h) {
			ProxyQWidget().Repaint(x,y,w,h);
		}
		public void Repaint(QRect arg1) {
			ProxyQWidget().Repaint(arg1);
		}
		public void Repaint(QRegion arg1) {
			ProxyQWidget().Repaint(arg1);
		}
		public void StackUnder(QWidget arg1) {
			ProxyQWidget().StackUnder(arg1);
		}
		public void Move(int x, int y) {
			ProxyQWidget().Move(x,y);
		}
		public void Move(QPoint arg1) {
			ProxyQWidget().Move(arg1);
		}
		public void Resize(int w, int h) {
			ProxyQWidget().Resize(w,h);
		}
		public void Resize(QSize arg1) {
			ProxyQWidget().Resize(arg1);
		}
		public void SetGeometry(int x, int y, int w, int h) {
			ProxyQWidget().SetGeometry(x,y,w,h);
		}
		public void SetGeometry(QRect arg1) {
			ProxyQWidget().SetGeometry(arg1);
		}
		public void AdjustSize() {
			ProxyQWidget().AdjustSize();
		}
		public bool IsVisible() {
			return ProxyQWidget().IsVisible();
		}
		public bool IsVisibleTo(QWidget arg1) {
			return ProxyQWidget().IsVisibleTo(arg1);
		}
		public bool IsHidden() {
			return ProxyQWidget().IsHidden();
		}
		public bool IsMinimized() {
			return ProxyQWidget().IsMinimized();
		}
		public bool IsMaximized() {
			return ProxyQWidget().IsMaximized();
		}
		public bool IsFullScreen() {
			return ProxyQWidget().IsFullScreen();
		}
		public int WindowState() {
			return ProxyQWidget().WindowState();
		}
		public void SetWindowState(int state) {
			ProxyQWidget().SetWindowState(state);
		}
		public void OverrideWindowState(int state) {
			ProxyQWidget().OverrideWindowState(state);
		}
		public virtual QSize SizeHint() {
			return ProxyQWidget().SizeHint();
		}
		public virtual QSize MinimumSizeHint() {
			return ProxyQWidget().MinimumSizeHint();
		}
		public QSizePolicy SizePolicy() {
			return ProxyQWidget().SizePolicy();
		}
		public void SetSizePolicy(QSizePolicy arg1) {
			ProxyQWidget().SetSizePolicy(arg1);
		}
		public void SetSizePolicy(int horizontal, int vertical) {
			ProxyQWidget().SetSizePolicy(horizontal,vertical);
		}
		public virtual int HeightForWidth(int arg1) {
			return ProxyQWidget().HeightForWidth(arg1);
		}
		public QRegion VisibleRegion() {
			return ProxyQWidget().VisibleRegion();
		}
		public void SetContentsMargins(int left, int top, int right, int bottom) {
			ProxyQWidget().SetContentsMargins(left,top,right,bottom);
		}
		public void GetContentsMargins(out int left, out int top, out int right, out int bottom) {
			ProxyQWidget().GetContentsMargins(out left,out top,out right,out bottom);
		}
		public QRect ContentsRect() {
			return ProxyQWidget().ContentsRect();
		}
		public QLayout Layout() {
			return ProxyQWidget().Layout();
		}
		public void SetLayout(QLayout arg1) {
			ProxyQWidget().SetLayout(arg1);
		}
		public void UpdateGeometry() {
			ProxyQWidget().UpdateGeometry();
		}
		public new void SetParent(QWidget parent) {
			ProxyQWidget().SetParent(parent);
		}
		public new void SetParent(QWidget parent, int f) {
			ProxyQWidget().SetParent(parent,f);
		}
		public void Scroll(int dx, int dy) {
			ProxyQWidget().Scroll(dx,dy);
		}
		public void Scroll(int dx, int dy, QRect arg3) {
			ProxyQWidget().Scroll(dx,dy,arg3);
		}
		public QWidget FocusWidget() {
			return ProxyQWidget().FocusWidget();
		}
		public QWidget NextInFocusChain() {
			return ProxyQWidget().NextInFocusChain();
		}
		public bool AcceptDrops() {
			return ProxyQWidget().AcceptDrops();
		}
		public void SetAcceptDrops(bool on) {
			ProxyQWidget().SetAcceptDrops(on);
		}
		public void AddAction(QAction action) {
			ProxyQWidget().AddAction(action);
		}
		// void addActions(QList<QAction*> arg1); >>>> NOT CONVERTED
		public void InsertAction(QAction before, QAction action) {
			ProxyQWidget().InsertAction(before,action);
		}
		// void insertActions(QAction* arg1,QList<QAction*> arg2); >>>> NOT CONVERTED
		public void RemoveAction(QAction action) {
			ProxyQWidget().RemoveAction(action);
		}
		// QList<QAction*> actions(); >>>> NOT CONVERTED
		public QWidget ParentWidget() {
			return ProxyQWidget().ParentWidget();
		}
		public void SetWindowFlags(int type) {
			ProxyQWidget().SetWindowFlags(type);
		}
		public int WindowFlags() {
			return ProxyQWidget().WindowFlags();
		}
		public void OverrideWindowFlags(int type) {
			ProxyQWidget().OverrideWindowFlags(type);
		}
		public int WindowType() {
			return ProxyQWidget().WindowType();
		}
		public QWidget ChildAt(int x, int y) {
			return ProxyQWidget().ChildAt(x,y);
		}
		public QWidget ChildAt(QPoint p) {
			return ProxyQWidget().ChildAt(p);
		}
		public uint Handle() {
			return ProxyQWidget().Handle();
		}
		public void SetAttribute(int arg1, bool on) {
			ProxyQWidget().SetAttribute(arg1,on);
		}
		public void SetAttribute(int arg1) {
			ProxyQWidget().SetAttribute(arg1);
		}
		public bool TestAttribute(int arg1) {
			return ProxyQWidget().TestAttribute(arg1);
		}
		public QPaintEngine PaintEngine() {
			return ProxyQWidget().PaintEngine();
		}
		public void EnsurePolished() {
			ProxyQWidget().EnsurePolished();
		}
		public QInputContext InputContext() {
			return ProxyQWidget().InputContext();
		}
		public void SetInputContext(QInputContext arg1) {
			ProxyQWidget().SetInputContext(arg1);
		}
		public bool IsAncestorOf(QWidget child) {
			return ProxyQWidget().IsAncestorOf(child);
		}
		public virtual QVariant InputMethodQuery(int arg1) {
			return ProxyQWidget().InputMethodQuery(arg1);
		}
		public void SetEnabled(bool arg1) {
			ProxyQWidget().SetEnabled(arg1);
		}
		public void SetDisabled(bool arg1) {
			ProxyQWidget().SetDisabled(arg1);
		}
		public void SetWindowModified(bool arg1) {
			ProxyQWidget().SetWindowModified(arg1);
		}
		public void SetFocus() {
			ProxyQWidget().SetFocus();
		}
		public void Update() {
			ProxyQWidget().Update();
		}
		public void Repaint() {
			ProxyQWidget().Repaint();
		}
		public virtual void SetVisible(bool visible) {
			ProxyQWidget().SetVisible(visible);
		}
		public void SetHidden(bool hidden) {
			ProxyQWidget().SetHidden(hidden);
		}
		public void Show() {
			ProxyQWidget().Show();
		}
		public void Hide() {
			ProxyQWidget().Hide();
		}
		public void SetShown(bool shown) {
			ProxyQWidget().SetShown(shown);
		}
		public void ShowMinimized() {
			ProxyQWidget().ShowMinimized();
		}
		public void ShowMaximized() {
			ProxyQWidget().ShowMaximized();
		}
		public void ShowFullScreen() {
			ProxyQWidget().ShowFullScreen();
		}
		public void ShowNormal() {
			ProxyQWidget().ShowNormal();
		}
		public bool Close() {
			return ProxyQWidget().Close();
		}
		public void Raise() {
			ProxyQWidget().Raise();
		}
		public void Lower() {
			ProxyQWidget().Lower();
		}
		public static new string Tr(string s, string c) {
			return StaticQWidget().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQWidget().Tr(s);
		}
		public static void SetTabOrder(QWidget arg1, QWidget arg2) {
			StaticQWidget().SetTabOrder(arg1,arg2);
		}
		public static QWidget MouseGrabber() {
			return StaticQWidget().MouseGrabber();
		}
		public static QWidget KeyboardGrabber() {
			return StaticQWidget().KeyboardGrabber();
		}
		public static QWidget Find(ulong arg1) {
			return StaticQWidget().Find(arg1);
		}
		public new bool Event(QEvent arg1) {
			return ProxyQWidget().Event(arg1);
		}
		protected virtual void MousePressEvent(QMouseEvent arg1) {
			ProxyQWidget().MousePressEvent(arg1);
		}
		protected virtual void MouseReleaseEvent(QMouseEvent arg1) {
			ProxyQWidget().MouseReleaseEvent(arg1);
		}
		protected virtual void MouseDoubleClickEvent(QMouseEvent arg1) {
			ProxyQWidget().MouseDoubleClickEvent(arg1);
		}
		protected virtual void MouseMoveEvent(QMouseEvent arg1) {
			ProxyQWidget().MouseMoveEvent(arg1);
		}
		protected virtual void WheelEvent(QWheelEvent arg1) {
			ProxyQWidget().WheelEvent(arg1);
		}
		protected virtual void KeyPressEvent(QKeyEvent arg1) {
			ProxyQWidget().KeyPressEvent(arg1);
		}
		protected virtual void KeyReleaseEvent(QKeyEvent arg1) {
			ProxyQWidget().KeyReleaseEvent(arg1);
		}
		protected virtual void FocusInEvent(QFocusEvent arg1) {
			ProxyQWidget().FocusInEvent(arg1);
		}
		protected virtual void FocusOutEvent(QFocusEvent arg1) {
			ProxyQWidget().FocusOutEvent(arg1);
		}
		protected virtual void EnterEvent(QEvent arg1) {
			ProxyQWidget().EnterEvent(arg1);
		}
		protected virtual void LeaveEvent(QEvent arg1) {
			ProxyQWidget().LeaveEvent(arg1);
		}
		protected virtual void PaintEvent(QPaintEvent arg1) {
			ProxyQWidget().PaintEvent(arg1);
		}
		protected virtual void MoveEvent(QMoveEvent arg1) {
			ProxyQWidget().MoveEvent(arg1);
		}
		protected virtual void ResizeEvent(QResizeEvent arg1) {
			ProxyQWidget().ResizeEvent(arg1);
		}
		protected virtual void CloseEvent(QCloseEvent arg1) {
			ProxyQWidget().CloseEvent(arg1);
		}
		protected virtual void ContextMenuEvent(QContextMenuEvent arg1) {
			ProxyQWidget().ContextMenuEvent(arg1);
		}
		protected virtual void TabletEvent(QTabletEvent arg1) {
			ProxyQWidget().TabletEvent(arg1);
		}
		protected virtual void ActionEvent(QActionEvent arg1) {
			ProxyQWidget().ActionEvent(arg1);
		}
		protected virtual void DragEnterEvent(QDragEnterEvent arg1) {
			ProxyQWidget().DragEnterEvent(arg1);
		}
		protected virtual void DragMoveEvent(QDragMoveEvent arg1) {
			ProxyQWidget().DragMoveEvent(arg1);
		}
		protected virtual void DragLeaveEvent(QDragLeaveEvent arg1) {
			ProxyQWidget().DragLeaveEvent(arg1);
		}
		protected virtual void DropEvent(QDropEvent arg1) {
			ProxyQWidget().DropEvent(arg1);
		}
		public virtual void ShowEvent(QShowEvent arg1) {
			ProxyQWidget().ShowEvent(arg1);
		}
		protected virtual void HideEvent(QHideEvent arg1) {
			ProxyQWidget().HideEvent(arg1);
		}
		protected virtual void ChangeEvent(QEvent arg1) {
			ProxyQWidget().ChangeEvent(arg1);
		}
		protected int Metric(IQPaintDevice arg1) {
			return ProxyQWidget().Metric(arg1);
		}
		protected virtual void InputMethodEvent(QInputMethodEvent arg1) {
			ProxyQWidget().InputMethodEvent(arg1);
		}
		protected void ResetInputContext() {
			ProxyQWidget().ResetInputContext();
		}
		protected void UpdateMicroFocus() {
			ProxyQWidget().UpdateMicroFocus();
		}
		protected void Create(ulong arg1, bool initializeWindow, bool destroyOldWindow) {
			ProxyQWidget().Create(arg1,initializeWindow,destroyOldWindow);
		}
		protected void Create(ulong arg1, bool initializeWindow) {
			ProxyQWidget().Create(arg1,initializeWindow);
		}
		protected void Create(ulong arg1) {
			ProxyQWidget().Create(arg1);
		}
		protected void Create() {
			ProxyQWidget().Create();
		}
		protected void Destroy(bool destroyWindow, bool destroySubWindows) {
			ProxyQWidget().Destroy(destroyWindow,destroySubWindows);
		}
		protected void Destroy(bool destroyWindow) {
			ProxyQWidget().Destroy(destroyWindow);
		}
		protected void Destroy() {
			ProxyQWidget().Destroy();
		}
		protected virtual bool FocusNextPrevChild(bool next) {
			return ProxyQWidget().FocusNextPrevChild(next);
		}
		protected bool FocusNextChild() {
			return ProxyQWidget().FocusNextChild();
		}
		protected bool FocusPreviousChild() {
			return ProxyQWidget().FocusPreviousChild();
		}
		public virtual void StyleChange(QStyle arg1) {
			ProxyQWidget().StyleChange(arg1);
		}
		protected virtual void EnabledChange(bool arg1) {
			ProxyQWidget().EnabledChange(arg1);
		}
		protected virtual void PaletteChange(QPalette arg1) {
			ProxyQWidget().PaletteChange(arg1);
		}
		protected virtual void FontChange(QFont arg1) {
			ProxyQWidget().FontChange(arg1);
		}
		protected virtual void WindowActivationChange(bool arg1) {
			ProxyQWidget().WindowActivationChange(arg1);
		}
		protected virtual void LanguageChange() {
			ProxyQWidget().LanguageChange();
		}
		~QWidget() {
			ProxyQWidget().Dispose();
		}
		public new void Dispose() {
			ProxyQWidget().Dispose();
		}
		public bool PaintingActive() {
			return ProxyQWidget().PaintingActive();
		}
		public int WidthMM() {
			return ProxyQWidget().WidthMM();
		}
		public int HeightMM() {
			return ProxyQWidget().HeightMM();
		}
		public int LogicalDpiX() {
			return ProxyQWidget().LogicalDpiX();
		}
		public int LogicalDpiY() {
			return ProxyQWidget().LogicalDpiY();
		}
		public int PhysicalDpiX() {
			return ProxyQWidget().PhysicalDpiX();
		}
		public int PhysicalDpiY() {
			return ProxyQWidget().PhysicalDpiY();
		}
		public int NumColors() {
			return ProxyQWidget().NumColors();
		}
		public int Depth() {
			return ProxyQWidget().Depth();
		}

	}

	public interface IQWidgetSignals {
		void CustomContextMenuRequested(QPoint pos);
	}
}
