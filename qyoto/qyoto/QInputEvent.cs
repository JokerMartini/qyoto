//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QInputEvent : QEvent, IDisposable {
 		protected QInputEvent(Type dummy) : base((Type) null) {}
		interface IQInputEventProxy {
		}

		protected void CreateQInputEventProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QInputEvent), this);
			_interceptor = (QInputEvent) realProxy.GetTransparentProxy();
		}
		private QInputEvent ProxyQInputEvent() {
			return (QInputEvent) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QInputEvent() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQInputEventProxy), null);
			_staticInterceptor = (IQInputEventProxy) realProxy.GetTransparentProxy();
		}
		private static IQInputEventProxy StaticQInputEvent() {
			return (IQInputEventProxy) _staticInterceptor;
		}

		public QInputEvent(int type, int modifiers) : this((Type) null) {
			CreateQInputEventProxy();
			NewQInputEvent(type,modifiers);
		}
		private void NewQInputEvent(int type, int modifiers) {
			ProxyQInputEvent().NewQInputEvent(type,modifiers);
		}
		public QInputEvent(int type) : this((Type) null) {
			CreateQInputEventProxy();
			NewQInputEvent(type);
		}
		private void NewQInputEvent(int type) {
			ProxyQInputEvent().NewQInputEvent(type);
		}
		public int Modifiers() {
			return ProxyQInputEvent().Modifiers();
		}
		~QInputEvent() {
			ProxyQInputEvent().Dispose();
		}
		public new void Dispose() {
			ProxyQInputEvent().Dispose();
		}
	}
}
