//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QPainterPath : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QPainterPath(Type dummy) {}
		interface IQPainterPathProxy {
			bool op_equals(QPainterPath lhs, QPainterPath other);
		}

		protected void CreateQPainterPathProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QPainterPath), this);
			_interceptor = (QPainterPath) realProxy.GetTransparentProxy();
		}
		private QPainterPath ProxyQPainterPath() {
			return (QPainterPath) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QPainterPath() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQPainterPathProxy), null);
			_staticInterceptor = (IQPainterPathProxy) realProxy.GetTransparentProxy();
		}
		private static IQPainterPathProxy StaticQPainterPath() {
			return (IQPainterPathProxy) _staticInterceptor;
		}

		enum ElementType {
			MoveToElement = 0,
			LineToElement = 1,
			CurveToElement = 2,
			CurveToDataElement = 3,
		}
		public QPainterPath() : this((Type) null) {
			CreateQPainterPathProxy();
			NewQPainterPath();
		}
		private void NewQPainterPath() {
			ProxyQPainterPath().NewQPainterPath();
		}
		public QPainterPath(QPointF startPoint) : this((Type) null) {
			CreateQPainterPathProxy();
			NewQPainterPath(startPoint);
		}
		private void NewQPainterPath(QPointF startPoint) {
			ProxyQPainterPath().NewQPainterPath(startPoint);
		}
		public QPainterPath(QPainterPath other) : this((Type) null) {
			CreateQPainterPathProxy();
			NewQPainterPath(other);
		}
		private void NewQPainterPath(QPainterPath other) {
			ProxyQPainterPath().NewQPainterPath(other);
		}
		public void CloseSubpath() {
			ProxyQPainterPath().CloseSubpath();
		}
		public void MoveTo(QPointF p) {
			ProxyQPainterPath().MoveTo(p);
		}
		// void moveTo(qreal arg1,qreal arg2); >>>> NOT CONVERTED
		public void LineTo(QPointF p) {
			ProxyQPainterPath().LineTo(p);
		}
		// void lineTo(qreal arg1,qreal arg2); >>>> NOT CONVERTED
		// void arcTo(const QRectF& arg1,qreal arg2,qreal arg3); >>>> NOT CONVERTED
		// void arcTo(qreal arg1,qreal arg2,qreal arg3,qreal arg4,qreal arg5,qreal arg6); >>>> NOT CONVERTED
		public void CubicTo(QPointF ctrlPt1, QPointF ctrlPt2, QPointF endPt) {
			ProxyQPainterPath().CubicTo(ctrlPt1,ctrlPt2,endPt);
		}
		// void cubicTo(qreal arg1,qreal arg2,qreal arg3,qreal arg4,qreal arg5,qreal arg6); >>>> NOT CONVERTED
		public void QuadTo(QPointF ctrlPt, QPointF endPt) {
			ProxyQPainterPath().QuadTo(ctrlPt,endPt);
		}
		// void quadTo(qreal arg1,qreal arg2,qreal arg3,qreal arg4); >>>> NOT CONVERTED
		public QPointF CurrentPosition() {
			return ProxyQPainterPath().CurrentPosition();
		}
		public void AddRect(QRectF rect) {
			ProxyQPainterPath().AddRect(rect);
		}
		// void addRect(qreal arg1,qreal arg2,qreal arg3,qreal arg4); >>>> NOT CONVERTED
		public void AddEllipse(QRectF rect) {
			ProxyQPainterPath().AddEllipse(rect);
		}
		// void addEllipse(qreal arg1,qreal arg2,qreal arg3,qreal arg4); >>>> NOT CONVERTED
		public void AddPolygon(QPolygonF polygon) {
			ProxyQPainterPath().AddPolygon(polygon);
		}
		public void AddText(QPointF point, QFont f, string text) {
			ProxyQPainterPath().AddText(point,f,text);
		}
		// void addText(qreal arg1,qreal arg2,const QFont& arg3,const QString& arg4); >>>> NOT CONVERTED
		public void AddPath(QPainterPath path) {
			ProxyQPainterPath().AddPath(path);
		}
		public void AddRegion(QRegion region) {
			ProxyQPainterPath().AddRegion(region);
		}
		public void ConnectPath(QPainterPath path) {
			ProxyQPainterPath().ConnectPath(path);
		}
		public bool Contains(QPointF pt) {
			return ProxyQPainterPath().Contains(pt);
		}
		public bool Contains(QRectF rect) {
			return ProxyQPainterPath().Contains(rect);
		}
		public bool Intersects(QRectF rect) {
			return ProxyQPainterPath().Intersects(rect);
		}
		public QRectF BoundingRect() {
			return ProxyQPainterPath().BoundingRect();
		}
		public QRectF ControlPointRect() {
			return ProxyQPainterPath().ControlPointRect();
		}
		public int FillRule() {
			return ProxyQPainterPath().FillRule();
		}
		public void SetFillRule(int fillRule) {
			ProxyQPainterPath().SetFillRule(fillRule);
		}
		public bool IsEmpty() {
			return ProxyQPainterPath().IsEmpty();
		}
		public QPainterPath ToReversed() {
			return ProxyQPainterPath().ToReversed();
		}
		// QList<QPolygonF> toSubpathPolygons(const QMatrix& arg1); >>>> NOT CONVERTED
		// QList<QPolygonF> toSubpathPolygons(); >>>> NOT CONVERTED
		// QList<QPolygonF> toFillPolygons(const QMatrix& arg1); >>>> NOT CONVERTED
		// QList<QPolygonF> toFillPolygons(); >>>> NOT CONVERTED
		public QPolygonF ToFillPolygon(QMatrix matrix) {
			return ProxyQPainterPath().ToFillPolygon(matrix);
		}
		public QPolygonF ToFillPolygon() {
			return ProxyQPainterPath().ToFillPolygon();
		}
		public int ElementCount() {
			return ProxyQPainterPath().ElementCount();
		}
		// const QPainterPath::Element& elementAt(int arg1); >>>> NOT CONVERTED
		public static bool operator==(QPainterPath lhs, QPainterPath other) {
			return StaticQPainterPath().op_equals(lhs,other);
		}
		public static bool operator!=(QPainterPath lhs, QPainterPath other) {
			return !StaticQPainterPath().op_equals(lhs,other);
		}
		public override bool Equals(object o) {
			if (!(o is QPainterPath)) { return false; }
			return this == (QPainterPath) o;
		}
		public override int GetHashCode() {
			return ProxyQPainterPath().GetHashCode();
		}
		~QPainterPath() {
			ProxyQPainterPath().Dispose();
		}
		public void Dispose() {
			ProxyQPainterPath().Dispose();
		}
	}
}
