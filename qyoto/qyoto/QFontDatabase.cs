//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Collections;
	using System.Text;

	public class QFontDatabase : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QFontDatabase(Type dummy) {}
		interface IQFontDatabaseProxy {
			string WritingSystemName(int writingSystem);
			string WritingSystemSample(int writingSystem);
		}

		protected void CreateQFontDatabaseProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QFontDatabase), this);
			_interceptor = (QFontDatabase) realProxy.GetTransparentProxy();
		}
		private QFontDatabase ProxyQFontDatabase() {
			return (QFontDatabase) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QFontDatabase() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQFontDatabaseProxy), null);
			_staticInterceptor = (IQFontDatabaseProxy) realProxy.GetTransparentProxy();
		}
		private static IQFontDatabaseProxy StaticQFontDatabase() {
			return (IQFontDatabaseProxy) _staticInterceptor;
		}

		enum WritingSystem {
			Any = 0,
			Latin = 1,
			Greek = 2,
			Cyrillic = 3,
			Armenian = 4,
			Hebrew = 5,
			Arabic = 6,
			Syriac = 7,
			Thaana = 8,
			Devanagari = 9,
			Bengali = 10,
			Gurmukhi = 11,
			Gujarati = 12,
			Oriya = 13,
			Tamil = 14,
			Telugu = 15,
			Kannada = 16,
			Malayalam = 17,
			Sinhala = 18,
			Thai = 19,
			Lao = 20,
			Tibetan = 21,
			Myanmar = 22,
			Georgian = 23,
			Khmer = 24,
			SimplifiedChinese = 25,
			TraditionalChinese = 26,
			Japanese = 27,
			Korean = 28,
			Vietnamese = 29,
			Other = 30,
			WritingSystemsCount = 31,
		}
		public QFontDatabase() : this((Type) null) {
			CreateQFontDatabaseProxy();
			NewQFontDatabase();
		}
		private void NewQFontDatabase() {
			ProxyQFontDatabase().NewQFontDatabase();
		}
		// QList<QFontDatabase::WritingSystem> writingSystems(); >>>> NOT CONVERTED
		public ArrayList Families(int writingSystem) {
			return ProxyQFontDatabase().Families(writingSystem);
		}
		public ArrayList Families() {
			return ProxyQFontDatabase().Families();
		}
		public ArrayList Styles(string family) {
			return ProxyQFontDatabase().Styles(family);
		}
		// QList<int> pointSizes(const QString& arg1,const QString& arg2); >>>> NOT CONVERTED
		// QList<int> pointSizes(const QString& arg1); >>>> NOT CONVERTED
		// QList<int> smoothSizes(const QString& arg1,const QString& arg2); >>>> NOT CONVERTED
		public string StyleString(QFont font) {
			return ProxyQFontDatabase().StyleString(font);
		}
		public QFont Font(string family, string style, int pointSize) {
			return ProxyQFontDatabase().Font(family,style,pointSize);
		}
		public bool IsBitmapScalable(string family, string style) {
			return ProxyQFontDatabase().IsBitmapScalable(family,style);
		}
		public bool IsBitmapScalable(string family) {
			return ProxyQFontDatabase().IsBitmapScalable(family);
		}
		public bool IsSmoothlyScalable(string family, string style) {
			return ProxyQFontDatabase().IsSmoothlyScalable(family,style);
		}
		public bool IsSmoothlyScalable(string family) {
			return ProxyQFontDatabase().IsSmoothlyScalable(family);
		}
		public bool IsScalable(string family, string style) {
			return ProxyQFontDatabase().IsScalable(family,style);
		}
		public bool IsScalable(string family) {
			return ProxyQFontDatabase().IsScalable(family);
		}
		public bool IsFixedPitch(string family, string style) {
			return ProxyQFontDatabase().IsFixedPitch(family,style);
		}
		public bool IsFixedPitch(string family) {
			return ProxyQFontDatabase().IsFixedPitch(family);
		}
		public bool Italic(string family, string style) {
			return ProxyQFontDatabase().Italic(family,style);
		}
		public bool Bold(string family, string style) {
			return ProxyQFontDatabase().Bold(family,style);
		}
		public int Weight(string family, string style) {
			return ProxyQFontDatabase().Weight(family,style);
		}
		// QList<int> standardSizes(); >>>> NOT CONVERTED
		public static string WritingSystemName(int writingSystem) {
			return StaticQFontDatabase().WritingSystemName(writingSystem);
		}
		public static string WritingSystemSample(int writingSystem) {
			return StaticQFontDatabase().WritingSystemSample(writingSystem);
		}
		~QFontDatabase() {
			ProxyQFontDatabase().Dispose();
		}
		public void Dispose() {
			ProxyQFontDatabase().Dispose();
		}
	}
}
