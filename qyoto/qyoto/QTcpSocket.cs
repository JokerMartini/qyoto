//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QTcpSocket : QAbstractSocket, IDisposable {
 		protected QTcpSocket(Type dummy) : base((Type) null) {}
		interface IQTcpSocketProxy {
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected void CreateQTcpSocketProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTcpSocket), this);
			_interceptor = (QTcpSocket) realProxy.GetTransparentProxy();
		}
		private QTcpSocket ProxyQTcpSocket() {
			return (QTcpSocket) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QTcpSocket() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQTcpSocketProxy), null);
			_staticInterceptor = (IQTcpSocketProxy) realProxy.GetTransparentProxy();
		}
		private static IQTcpSocketProxy StaticQTcpSocket() {
			return (IQTcpSocketProxy) _staticInterceptor;
		}

		public new virtual QMetaObject MetaObject() {
			return ProxyQTcpSocket().MetaObject();
		}
		// void* qt_metacast(const char* arg1); >>>> NOT CONVERTED
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QTcpSocket(QObject parent) : this((Type) null) {
			CreateQTcpSocketProxy();
			NewQTcpSocket(parent);
		}
		private void NewQTcpSocket(QObject parent) {
			ProxyQTcpSocket().NewQTcpSocket(parent);
		}
		public QTcpSocket() : this((Type) null) {
			CreateQTcpSocketProxy();
			NewQTcpSocket();
		}
		private void NewQTcpSocket() {
			ProxyQTcpSocket().NewQTcpSocket();
		}
		public static new string Tr(string s, string c) {
			return StaticQTcpSocket().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQTcpSocket().Tr(s);
		}
		~QTcpSocket() {
			ProxyQTcpSocket().Dispose();
		}
		public new void Dispose() {
			ProxyQTcpSocket().Dispose();
		}
	}
}
