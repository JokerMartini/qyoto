//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public interface IQIODevice {
			QMetaObject MetaObject();
			int OpenMode();
			void SetTextModeEnabled(bool enabled);
			bool IsTextModeEnabled();
			bool IsOpen();
			bool IsReadable();
			bool IsWritable();
			bool IsSequential();
			bool Open(int mode);
			void Close();
			bool AtEnd();
			bool Reset();
			QByteArray ReadAll();
			QByteArray ReadLine();
			bool CanReadLine();
			bool WaitForReadyRead(int msecs);
			bool WaitForBytesWritten(int msecs);
			void UngetChar(char c);
			bool PutChar(char c);
			bool GetChar(string c);
			string ErrorString();
	}

	/// See <see cref="IQIODeviceSignals"></see> for signals emitted by QIODevice
	public class QIODevice : QObject {
 		protected QIODevice(Type dummy) : base((Type) null) {}
		interface IQIODeviceProxy {
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected void CreateQIODeviceProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QIODevice), this);
			_interceptor = (QIODevice) realProxy.GetTransparentProxy();
		}
		private QIODevice ProxyQIODevice() {
			return (QIODevice) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QIODevice() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQIODeviceProxy), null);
			_staticInterceptor = (IQIODeviceProxy) realProxy.GetTransparentProxy();
		}
		private static IQIODeviceProxy StaticQIODevice() {
			return (IQIODeviceProxy) _staticInterceptor;
		}

		enum OpenModeFlag {
			NotOpen = 0x0000,
			ReadOnly = 0x0001,
			WriteOnly = 0x0002,
			ReadWrite = ReadOnly|WriteOnly,
			Append = 0x0004,
			Truncate = 0x0008,
			Text = 0x0010,
			Unbuffered = 0x0020,
		}
		public new virtual QMetaObject MetaObject() {
			return ProxyQIODevice().MetaObject();
		}
		// void* qt_metacast(const char* arg1); >>>> NOT CONVERTED
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public int OpenMode() {
			return ProxyQIODevice().OpenMode();
		}
		public void SetTextModeEnabled(bool enabled) {
			ProxyQIODevice().SetTextModeEnabled(enabled);
		}
		public bool IsTextModeEnabled() {
			return ProxyQIODevice().IsTextModeEnabled();
		}
		public bool IsOpen() {
			return ProxyQIODevice().IsOpen();
		}
		public bool IsReadable() {
			return ProxyQIODevice().IsReadable();
		}
		public bool IsWritable() {
			return ProxyQIODevice().IsWritable();
		}
		public virtual bool IsSequential() {
			return ProxyQIODevice().IsSequential();
		}
		public virtual bool Open(int mode) {
			return ProxyQIODevice().Open(mode);
		}
		public virtual void Close() {
			ProxyQIODevice().Close();
		}
		// qint64 pos(); >>>> NOT CONVERTED
		// qint64 size(); >>>> NOT CONVERTED
		// bool seek(qint64 arg1); >>>> NOT CONVERTED
		public virtual bool AtEnd() {
			return ProxyQIODevice().AtEnd();
		}
		public virtual bool Reset() {
			return ProxyQIODevice().Reset();
		}
		// qint64 bytesAvailable(); >>>> NOT CONVERTED
		// qint64 bytesToWrite(); >>>> NOT CONVERTED
		// qint64 read(char* arg1,qint64 arg2); >>>> NOT CONVERTED
		// QByteArray read(qint64 arg1); >>>> NOT CONVERTED
		public QByteArray ReadAll() {
			return ProxyQIODevice().ReadAll();
		}
		// qint64 readLine(char* arg1,qint64 arg2); >>>> NOT CONVERTED
		// QByteArray readLine(qint64 arg1); >>>> NOT CONVERTED
		public QByteArray ReadLine() {
			return ProxyQIODevice().ReadLine();
		}
		public virtual bool CanReadLine() {
			return ProxyQIODevice().CanReadLine();
		}
		// qint64 write(const char* arg1,qint64 arg2); >>>> NOT CONVERTED
		// qint64 write(const QByteArray& arg1); >>>> NOT CONVERTED
		public virtual bool WaitForReadyRead(int msecs) {
			return ProxyQIODevice().WaitForReadyRead(msecs);
		}
		public virtual bool WaitForBytesWritten(int msecs) {
			return ProxyQIODevice().WaitForBytesWritten(msecs);
		}
		public void UngetChar(char c) {
			ProxyQIODevice().UngetChar(c);
		}
		public bool PutChar(char c) {
			return ProxyQIODevice().PutChar(c);
		}
		public bool GetChar(string c) {
			return ProxyQIODevice().GetChar(c);
		}
		public string ErrorString() {
			return ProxyQIODevice().ErrorString();
		}
		public static new string Tr(string s, string c) {
			return StaticQIODevice().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQIODevice().Tr(s);
		}


	}

	public interface IQIODeviceSignals {
		void ReadyRead();
		// void bytesWritten(qint64 arg1); >>>> NOT CONVERTED
		void AboutToClose();
	}
}
