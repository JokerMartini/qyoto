//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QTextCodec : MarshalByRefObject {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QTextCodec(Type dummy) {}
		interface IQTextCodecProxy {
			QTextCodec CodecForName(byte[] name);
			QTextCodec CodecForName(string name);
			QTextCodec CodecForMib(int mib);
			byte[] AvailableCodecs();
			QTextCodec CodecForLocale();
			void SetCodecForLocale(QTextCodec c);
			QTextCodec CodecForTr();
			void SetCodecForTr(QTextCodec c);
			QTextCodec CodecForCStrings();
			void SetCodecForCStrings(QTextCodec c);
		}

		protected void CreateQTextCodecProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTextCodec), this);
			_interceptor = (QTextCodec) realProxy.GetTransparentProxy();
		}
		private QTextCodec ProxyQTextCodec() {
			return (QTextCodec) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QTextCodec() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQTextCodecProxy), null);
			_staticInterceptor = (IQTextCodecProxy) realProxy.GetTransparentProxy();
		}
		private static IQTextCodecProxy StaticQTextCodec() {
			return (IQTextCodecProxy) _staticInterceptor;
		}

		enum ConversionFlag :long {
			DefaultConversion = 0,
			ConvertInvalidToNull = 0x80000000,
			IgnoreHeader = 0x1,
		}
		public QTextDecoder MakeDecoder() {
			return ProxyQTextCodec().MakeDecoder();
		}
		public QTextEncoder MakeEncoder() {
			return ProxyQTextCodec().MakeEncoder();
		}
		public bool CanEncode(char arg1) {
			return ProxyQTextCodec().CanEncode(arg1);
		}
		public bool CanEncode(string arg1) {
			return ProxyQTextCodec().CanEncode(arg1);
		}
		public string ToUnicode(byte[] arg1) {
			return ProxyQTextCodec().ToUnicode(arg1);
		}
		public string ToUnicode(string chars) {
			return ProxyQTextCodec().ToUnicode(chars);
		}
		public byte[] FromUnicode(string uc) {
			return ProxyQTextCodec().FromUnicode(uc);
		}
		// QString toUnicode(const char* arg1,int arg2,QTextCodec::ConverterState* arg3); >>>> NOT CONVERTED
		public string ToUnicode(string arg1, int length) {
			return ProxyQTextCodec().ToUnicode(arg1,length);
		}
		// QByteArray fromUnicode(const QChar* arg1,int arg2,QTextCodec::ConverterState* arg3); >>>> NOT CONVERTED
		public byte[] FromUnicode(char arg1, int length) {
			return ProxyQTextCodec().FromUnicode(arg1,length);
		}
		public virtual byte[] Name() {
			return ProxyQTextCodec().Name();
		}
		public virtual byte[] Aliases() {
			return ProxyQTextCodec().Aliases();
		}
		public virtual int MibEnum() {
			return ProxyQTextCodec().MibEnum();
		}
		public static QTextCodec CodecForName(byte[] name) {
			return StaticQTextCodec().CodecForName(name);
		}
		public static QTextCodec CodecForName(string name) {
			return StaticQTextCodec().CodecForName(name);
		}
		public static QTextCodec CodecForMib(int mib) {
			return StaticQTextCodec().CodecForMib(mib);
		}
		public static byte[] AvailableCodecs() {
			return StaticQTextCodec().AvailableCodecs();
		}
		// QList<int> availableMibs(); >>>> NOT CONVERTED
		public static QTextCodec CodecForLocale() {
			return StaticQTextCodec().CodecForLocale();
		}
		public static void SetCodecForLocale(QTextCodec c) {
			StaticQTextCodec().SetCodecForLocale(c);
		}
		public static QTextCodec CodecForTr() {
			return StaticQTextCodec().CodecForTr();
		}
		public static void SetCodecForTr(QTextCodec c) {
			StaticQTextCodec().SetCodecForTr(c);
		}
		public static QTextCodec CodecForCStrings() {
			return StaticQTextCodec().CodecForCStrings();
		}
		public static void SetCodecForCStrings(QTextCodec c) {
			StaticQTextCodec().SetCodecForCStrings(c);
		}
	}
}
