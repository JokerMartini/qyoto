//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	[SmokeClass("QTextCodec")]
	public class QTextCodec : MarshalByRefObject {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
		protected QTextCodec(Type dummy) {}
		interface IQTextCodecProxy {
			QTextCodec CodecForName(QByteArray name);
			QTextCodec CodecForName(string name);
			QTextCodec CodecForMib(int mib);
			QTextCodec CodecForLocale();
			void SetCodecForLocale(QTextCodec c);
			QTextCodec CodecForTr();
			void SetCodecForTr(QTextCodec c);
			QTextCodec CodecForCStrings();
			void SetCodecForCStrings(QTextCodec c);
			QTextCodec CodecForHtml(QByteArray ba);
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTextCodec), this);
			_interceptor = (QTextCodec) realProxy.GetTransparentProxy();
		}
		private QTextCodec ProxyQTextCodec() {
			return (QTextCodec) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QTextCodec() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQTextCodecProxy), null);
			_staticInterceptor = (IQTextCodecProxy) realProxy.GetTransparentProxy();
		}
		private static IQTextCodecProxy StaticQTextCodec() {
			return (IQTextCodecProxy) _staticInterceptor;
		}

		public enum ConversionFlag : long {
			DefaultConversion = 0,
			ConvertInvalidToNull = 0x80000000,
			IgnoreHeader = 0x1,
		}
		[SmokeMethod("makeDecoder() const")]
		public QTextDecoder MakeDecoder() {
			return ProxyQTextCodec().MakeDecoder();
		}
		[SmokeMethod("makeEncoder() const")]
		public QTextEncoder MakeEncoder() {
			return ProxyQTextCodec().MakeEncoder();
		}
		[SmokeMethod("canEncode(QChar) const")]
		public bool CanEncode(char arg1) {
			return ProxyQTextCodec().CanEncode(arg1);
		}
		[SmokeMethod("canEncode(const QString&) const")]
		public bool CanEncode(string arg1) {
			return ProxyQTextCodec().CanEncode(arg1);
		}
		[SmokeMethod("toUnicode(const QByteArray&) const")]
		public string ToUnicode(QByteArray arg1) {
			return ProxyQTextCodec().ToUnicode(arg1);
		}
		[SmokeMethod("toUnicode(const char*) const")]
		public string ToUnicode(string chars) {
			return ProxyQTextCodec().ToUnicode(chars);
		}
		[SmokeMethod("fromUnicode(const QString&) const")]
		public QByteArray FromUnicode(string uc) {
			return ProxyQTextCodec().FromUnicode(uc);
		}
		// QString toUnicode(const char* arg1,int arg2,QTextCodec::ConverterState* arg3); >>>> NOT CONVERTED
		[SmokeMethod("toUnicode(const char*, int) const")]
		public string ToUnicode(string arg1, int length) {
			return ProxyQTextCodec().ToUnicode(arg1,length);
		}
		// QByteArray fromUnicode(const QChar* arg1,int arg2,QTextCodec::ConverterState* arg3); >>>> NOT CONVERTED
		[SmokeMethod("fromUnicode(const QChar*, int) const")]
		public QByteArray FromUnicode(char arg1, int length) {
			return ProxyQTextCodec().FromUnicode(arg1,length);
		}
		[SmokeMethod("name() const")]
		public virtual QByteArray Name() {
			return ProxyQTextCodec().Name();
		}
		// QList<QByteArray> aliases(); >>>> NOT CONVERTED
		[SmokeMethod("mibEnum() const")]
		public virtual int MibEnum() {
			return ProxyQTextCodec().MibEnum();
		}
		[SmokeMethod("codecForName(const QByteArray&)")]
		public static QTextCodec CodecForName(QByteArray name) {
			return StaticQTextCodec().CodecForName(name);
		}
		[SmokeMethod("codecForName(const char*)")]
		public static QTextCodec CodecForName(string name) {
			return StaticQTextCodec().CodecForName(name);
		}
		[SmokeMethod("codecForMib(int)")]
		public static QTextCodec CodecForMib(int mib) {
			return StaticQTextCodec().CodecForMib(mib);
		}
		// QList<QByteArray> availableCodecs(); >>>> NOT CONVERTED
		// QList<int> availableMibs(); >>>> NOT CONVERTED
		[SmokeMethod("codecForLocale()")]
		public static QTextCodec CodecForLocale() {
			return StaticQTextCodec().CodecForLocale();
		}
		[SmokeMethod("setCodecForLocale(QTextCodec*)")]
		public static void SetCodecForLocale(QTextCodec c) {
			StaticQTextCodec().SetCodecForLocale(c);
		}
		[SmokeMethod("codecForTr()")]
		public static QTextCodec CodecForTr() {
			return StaticQTextCodec().CodecForTr();
		}
		[SmokeMethod("setCodecForTr(QTextCodec*)")]
		public static void SetCodecForTr(QTextCodec c) {
			StaticQTextCodec().SetCodecForTr(c);
		}
		[SmokeMethod("codecForCStrings()")]
		public static QTextCodec CodecForCStrings() {
			return StaticQTextCodec().CodecForCStrings();
		}
		[SmokeMethod("setCodecForCStrings(QTextCodec*)")]
		public static void SetCodecForCStrings(QTextCodec c) {
			StaticQTextCodec().SetCodecForCStrings(c);
		}
		[SmokeMethod("codecForHtml(const QByteArray&)")]
		public static QTextCodec CodecForHtml(QByteArray ba) {
			return StaticQTextCodec().CodecForHtml(ba);
		}
	}
}
