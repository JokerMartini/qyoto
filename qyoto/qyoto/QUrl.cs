//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Collections;
	using System.Text;

	public interface IQUrl {
			void SetUrl(string url);
			void SetEncodedUrl(byte[] url);
			bool IsValid();
			bool IsEmpty();
			void Clear();
			void SetScheme(string scheme);
			string Scheme();
			void SetAuthority(string authority);
			string Authority();
			void SetUserInfo(string userInfo);
			string UserInfo();
			void SetUserName(string userName);
			string UserName();
			void SetPassword(string password);
			string Password();
			void SetHost(string host);
			string Host();
			void SetPort(int port);
			int Port();
			void SetPath(string path);
			string Path();
			void SetEncodedQuery(byte[] query);
			byte[] EncodedQuery();
			void SetQueryDelimiters(char valueDelimiter, char pairDelimiter);
			char QueryValueDelimiter();
			char QueryPairDelimiter();
			void SetQueryItems(string query);
			void AddQueryItem(string key, string value);
			string QueryItems();
			bool HasQueryItem(string key);
			string QueryItemValue(string key);
			ArrayList AllQueryItemValues(string key);
			void RemoveQueryItem(string key);
			void RemoveAllQueryItems(string key);
			void SetFragment(string fragment);
			string Fragment();
			IQUrl Resolved(IQUrl relative);
			bool IsRelative();
			bool IsParentOf(IQUrl url);
			string ToLocalFile();
			string ToString(int options);
			string ToString();
			byte[] ToEncoded(int options);
			byte[] ToEncoded();
			void Detach();
			bool IsDetached();
	}

	public class QUrl : MarshalByRefObject, IQUrl, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QUrl(Type dummy) {}
		interface IQUrlProxy {
			bool op_lt(QUrl lhs, IQUrl url);
			bool op_gt(QUrl lhs, IQUrl url);
			IQUrl FromLocalFile(string localfile);
			IQUrl FromEncoded(byte[] url);
			string FromPercentEncoding(byte[] arg1);
			byte[] ToPercentEncoding(string arg1, byte[] exclude, byte[] include);
			byte[] ToPercentEncoding(string arg1, byte[] exclude);
			byte[] ToPercentEncoding(string arg1);
			string FromPunycode(byte[] arg1);
			byte[] ToPunycode(string arg1);
		}

		protected void CreateQUrlProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QUrl), this);
			_interceptor = (QUrl) realProxy.GetTransparentProxy();
		}
		private QUrl ProxyQUrl() {
			return (QUrl) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QUrl() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQUrlProxy), null);
			_staticInterceptor = (IQUrlProxy) realProxy.GetTransparentProxy();
		}
		private static IQUrlProxy StaticQUrl() {
			return (IQUrlProxy) _staticInterceptor;
		}

		enum FormattingOption {
			None = 0x0,
			RemoveScheme = 0x1,
			RemovePassword = 0x2,
			RemoveUserInfo = RemovePassword|0x4,
			RemovePort = 0x8,
			RemoveAuthority = RemoveUserInfo|RemovePort|0x10,
			RemovePath = 0x20,
			RemoveQuery = 0x40,
			RemoveFragment = 0x80,
			StripTrailingSlash = 0x10000,
		}
		public QUrl() : this((Type) null) {
			CreateQUrlProxy();
			NewQUrl();
		}
		private void NewQUrl() {
			ProxyQUrl().NewQUrl();
		}
		public QUrl(string url) : this((Type) null) {
			CreateQUrlProxy();
			NewQUrl(url);
		}
		private void NewQUrl(string url) {
			ProxyQUrl().NewQUrl(url);
		}
		public QUrl(IQUrl copy) : this((Type) null) {
			CreateQUrlProxy();
			NewQUrl(copy);
		}
		private void NewQUrl(IQUrl copy) {
			ProxyQUrl().NewQUrl(copy);
		}
		public void SetUrl(string url) {
			ProxyQUrl().SetUrl(url);
		}
		public void SetEncodedUrl(byte[] url) {
			ProxyQUrl().SetEncodedUrl(url);
		}
		public bool IsValid() {
			return ProxyQUrl().IsValid();
		}
		public bool IsEmpty() {
			return ProxyQUrl().IsEmpty();
		}
		public void Clear() {
			ProxyQUrl().Clear();
		}
		public void SetScheme(string scheme) {
			ProxyQUrl().SetScheme(scheme);
		}
		public string Scheme() {
			return ProxyQUrl().Scheme();
		}
		public void SetAuthority(string authority) {
			ProxyQUrl().SetAuthority(authority);
		}
		public string Authority() {
			return ProxyQUrl().Authority();
		}
		public void SetUserInfo(string userInfo) {
			ProxyQUrl().SetUserInfo(userInfo);
		}
		public string UserInfo() {
			return ProxyQUrl().UserInfo();
		}
		public void SetUserName(string userName) {
			ProxyQUrl().SetUserName(userName);
		}
		public string UserName() {
			return ProxyQUrl().UserName();
		}
		public void SetPassword(string password) {
			ProxyQUrl().SetPassword(password);
		}
		public string Password() {
			return ProxyQUrl().Password();
		}
		public void SetHost(string host) {
			ProxyQUrl().SetHost(host);
		}
		public string Host() {
			return ProxyQUrl().Host();
		}
		public void SetPort(int port) {
			ProxyQUrl().SetPort(port);
		}
		public int Port() {
			return ProxyQUrl().Port();
		}
		public void SetPath(string path) {
			ProxyQUrl().SetPath(path);
		}
		public string Path() {
			return ProxyQUrl().Path();
		}
		public void SetEncodedQuery(byte[] query) {
			ProxyQUrl().SetEncodedQuery(query);
		}
		public byte[] EncodedQuery() {
			return ProxyQUrl().EncodedQuery();
		}
		public void SetQueryDelimiters(char valueDelimiter, char pairDelimiter) {
			ProxyQUrl().SetQueryDelimiters(valueDelimiter,pairDelimiter);
		}
		public char QueryValueDelimiter() {
			return ProxyQUrl().QueryValueDelimiter();
		}
		public char QueryPairDelimiter() {
			return ProxyQUrl().QueryPairDelimiter();
		}
		public void SetQueryItems(string query) {
			ProxyQUrl().SetQueryItems(query);
		}
		public void AddQueryItem(string key, string value) {
			ProxyQUrl().AddQueryItem(key,value);
		}
		public string QueryItems() {
			return ProxyQUrl().QueryItems();
		}
		public bool HasQueryItem(string key) {
			return ProxyQUrl().HasQueryItem(key);
		}
		public string QueryItemValue(string key) {
			return ProxyQUrl().QueryItemValue(key);
		}
		public ArrayList AllQueryItemValues(string key) {
			return ProxyQUrl().AllQueryItemValues(key);
		}
		public void RemoveQueryItem(string key) {
			ProxyQUrl().RemoveQueryItem(key);
		}
		public void RemoveAllQueryItems(string key) {
			ProxyQUrl().RemoveAllQueryItems(key);
		}
		public void SetFragment(string fragment) {
			ProxyQUrl().SetFragment(fragment);
		}
		public string Fragment() {
			return ProxyQUrl().Fragment();
		}
		public IQUrl Resolved(IQUrl relative) {
			return ProxyQUrl().Resolved(relative);
		}
		public bool IsRelative() {
			return ProxyQUrl().IsRelative();
		}
		public bool IsParentOf(IQUrl url) {
			return ProxyQUrl().IsParentOf(url);
		}
		public string ToLocalFile() {
			return ProxyQUrl().ToLocalFile();
		}
		public new string ToString(int options) {
			return ProxyQUrl().ToString(options);
		}
		public new string ToString() {
			return ProxyQUrl().ToString();
		}
		public byte[] ToEncoded(int options) {
			return ProxyQUrl().ToEncoded(options);
		}
		public byte[] ToEncoded() {
			return ProxyQUrl().ToEncoded();
		}
		public void Detach() {
			ProxyQUrl().Detach();
		}
		public bool IsDetached() {
			return ProxyQUrl().IsDetached();
		}
		public static bool operator<(QUrl lhs, IQUrl url) {
			return StaticQUrl().op_lt(lhs,url);
		}
		public static bool operator>(QUrl lhs, IQUrl url) {
			return StaticQUrl().op_gt(lhs,url);
		}
		public static IQUrl FromLocalFile(string localfile) {
			return StaticQUrl().FromLocalFile(localfile);
		}
		public static IQUrl FromEncoded(byte[] url) {
			return StaticQUrl().FromEncoded(url);
		}
		public static string FromPercentEncoding(byte[] arg1) {
			return StaticQUrl().FromPercentEncoding(arg1);
		}
		public static byte[] ToPercentEncoding(string arg1, byte[] exclude, byte[] include) {
			return StaticQUrl().ToPercentEncoding(arg1,exclude,include);
		}
		public static byte[] ToPercentEncoding(string arg1, byte[] exclude) {
			return StaticQUrl().ToPercentEncoding(arg1,exclude);
		}
		public static byte[] ToPercentEncoding(string arg1) {
			return StaticQUrl().ToPercentEncoding(arg1);
		}
		public static string FromPunycode(byte[] arg1) {
			return StaticQUrl().FromPunycode(arg1);
		}
		public static byte[] ToPunycode(string arg1) {
			return StaticQUrl().ToPunycode(arg1);
		}
		~QUrl() {
			ProxyQUrl().Dispose();
		}
		public void Dispose() {
			ProxyQUrl().Dispose();
		}
	}
}
