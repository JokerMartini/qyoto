//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QEventLoop : QObject, IDisposable {
 		protected QEventLoop(Type dummy) : base((Type) null) {}
		interface IQEventLoopProxy {
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected void CreateQEventLoopProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QEventLoop), this);
			_interceptor = (QEventLoop) realProxy.GetTransparentProxy();
		}
		private QEventLoop ProxyQEventLoop() {
			return (QEventLoop) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QEventLoop() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQEventLoopProxy), null);
			_staticInterceptor = (IQEventLoopProxy) realProxy.GetTransparentProxy();
		}
		private static IQEventLoopProxy StaticQEventLoop() {
			return (IQEventLoopProxy) _staticInterceptor;
		}

		enum ProcessEventsFlag {
			AllEvents = 0x00,
			ExcludeUserInputEvents = 0x01,
			ExcludeSocketNotifiers = 0x02,
			WaitForMoreEvents = 0x04,
		}
		public new virtual QMetaObject MetaObject() {
			return ProxyQEventLoop().MetaObject();
		}
		// void* qt_metacast(const char* arg1); >>>> NOT CONVERTED
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QEventLoop(QObject parent) : this((Type) null) {
			CreateQEventLoopProxy();
			NewQEventLoop(parent);
		}
		private void NewQEventLoop(QObject parent) {
			ProxyQEventLoop().NewQEventLoop(parent);
		}
		public QEventLoop() : this((Type) null) {
			CreateQEventLoopProxy();
			NewQEventLoop();
		}
		private void NewQEventLoop() {
			ProxyQEventLoop().NewQEventLoop();
		}
		public bool ProcessEvents(int flags) {
			return ProxyQEventLoop().ProcessEvents(flags);
		}
		public bool ProcessEvents() {
			return ProxyQEventLoop().ProcessEvents();
		}
		public void ProcessEvents(int flags, int maximumTime) {
			ProxyQEventLoop().ProcessEvents(flags,maximumTime);
		}
		public int Exec(int flags) {
			return ProxyQEventLoop().Exec(flags);
		}
		public int Exec() {
			return ProxyQEventLoop().Exec();
		}
		public void Exit(int returnCode) {
			ProxyQEventLoop().Exit(returnCode);
		}
		public void Exit() {
			ProxyQEventLoop().Exit();
		}
		public bool IsRunning() {
			return ProxyQEventLoop().IsRunning();
		}
		public void WakeUp() {
			ProxyQEventLoop().WakeUp();
		}
		public void Quit() {
			ProxyQEventLoop().Quit();
		}
		public static new string Tr(string s, string c) {
			return StaticQEventLoop().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQEventLoop().Tr(s);
		}
		~QEventLoop() {
			ProxyQEventLoop().Dispose();
		}
		public new void Dispose() {
			ProxyQEventLoop().Dispose();
		}
	}
}
