//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QRect : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QRect(Type dummy) {}
		interface IQRectProxy {
			QRect op_or(QRect lhs, QRect r);
			QRect op_and(QRect lhs, QRect r);
		}

		protected void CreateQRectProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QRect), this);
			_interceptor = (QRect) realProxy.GetTransparentProxy();
		}
		private QRect ProxyQRect() {
			return (QRect) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QRect() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQRectProxy), null);
			_staticInterceptor = (IQRectProxy) realProxy.GetTransparentProxy();
		}
		private static IQRectProxy StaticQRect() {
			return (IQRectProxy) _staticInterceptor;
		}

		public QRect() : this((Type) null) {
			CreateQRectProxy();
			NewQRect();
		}
		private void NewQRect() {
			ProxyQRect().NewQRect();
		}
		public QRect(QPoint topleft, QPoint bottomright) : this((Type) null) {
			CreateQRectProxy();
			NewQRect(topleft,bottomright);
		}
		private void NewQRect(QPoint topleft, QPoint bottomright) {
			ProxyQRect().NewQRect(topleft,bottomright);
		}
		public QRect(QPoint topleft, QSize size) : this((Type) null) {
			CreateQRectProxy();
			NewQRect(topleft,size);
		}
		private void NewQRect(QPoint topleft, QSize size) {
			ProxyQRect().NewQRect(topleft,size);
		}
		public QRect(int left, int top, int width, int height) : this((Type) null) {
			CreateQRectProxy();
			NewQRect(left,top,width,height);
		}
		private void NewQRect(int left, int top, int width, int height) {
			ProxyQRect().NewQRect(left,top,width,height);
		}
		public bool IsNull() {
			return ProxyQRect().IsNull();
		}
		public bool IsEmpty() {
			return ProxyQRect().IsEmpty();
		}
		public bool IsValid() {
			return ProxyQRect().IsValid();
		}
		public int Left() {
			return ProxyQRect().Left();
		}
		public int Top() {
			return ProxyQRect().Top();
		}
		public int Right() {
			return ProxyQRect().Right();
		}
		public int Bottom() {
			return ProxyQRect().Bottom();
		}
		public QRect Normalized() {
			return ProxyQRect().Normalized();
		}
		public int X() {
			return ProxyQRect().X();
		}
		public int Y() {
			return ProxyQRect().Y();
		}
		public void SetLeft(int pos) {
			ProxyQRect().SetLeft(pos);
		}
		public void SetTop(int pos) {
			ProxyQRect().SetTop(pos);
		}
		public void SetRight(int pos) {
			ProxyQRect().SetRight(pos);
		}
		public void SetBottom(int pos) {
			ProxyQRect().SetBottom(pos);
		}
		public void SetX(int x) {
			ProxyQRect().SetX(x);
		}
		public void SetY(int y) {
			ProxyQRect().SetY(y);
		}
		public void SetTopLeft(QPoint p) {
			ProxyQRect().SetTopLeft(p);
		}
		public void SetBottomRight(QPoint p) {
			ProxyQRect().SetBottomRight(p);
		}
		public void SetTopRight(QPoint p) {
			ProxyQRect().SetTopRight(p);
		}
		public void SetBottomLeft(QPoint p) {
			ProxyQRect().SetBottomLeft(p);
		}
		public QPoint TopLeft() {
			return ProxyQRect().TopLeft();
		}
		public QPoint BottomRight() {
			return ProxyQRect().BottomRight();
		}
		public QPoint TopRight() {
			return ProxyQRect().TopRight();
		}
		public QPoint BottomLeft() {
			return ProxyQRect().BottomLeft();
		}
		public QPoint Center() {
			return ProxyQRect().Center();
		}
		public void MoveLeft(int pos) {
			ProxyQRect().MoveLeft(pos);
		}
		public void MoveTop(int pos) {
			ProxyQRect().MoveTop(pos);
		}
		public void MoveRight(int pos) {
			ProxyQRect().MoveRight(pos);
		}
		public void MoveBottom(int pos) {
			ProxyQRect().MoveBottom(pos);
		}
		public void MoveTopLeft(QPoint p) {
			ProxyQRect().MoveTopLeft(p);
		}
		public void MoveBottomRight(QPoint p) {
			ProxyQRect().MoveBottomRight(p);
		}
		public void MoveTopRight(QPoint p) {
			ProxyQRect().MoveTopRight(p);
		}
		public void MoveBottomLeft(QPoint p) {
			ProxyQRect().MoveBottomLeft(p);
		}
		public void MoveCenter(QPoint p) {
			ProxyQRect().MoveCenter(p);
		}
		public void Translate(int dx, int dy) {
			ProxyQRect().Translate(dx,dy);
		}
		public void Translate(QPoint p) {
			ProxyQRect().Translate(p);
		}
		public QRect Translated(int dx, int dy) {
			return ProxyQRect().Translated(dx,dy);
		}
		public QRect Translated(QPoint p) {
			return ProxyQRect().Translated(p);
		}
		public void MoveTo(int x, int t) {
			ProxyQRect().MoveTo(x,t);
		}
		public void MoveTo(QPoint p) {
			ProxyQRect().MoveTo(p);
		}
		public void SetRect(int x, int y, int w, int h) {
			ProxyQRect().SetRect(x,y,w,h);
		}
		public void GetRect(out int x, out int y, out int w, out int h) {
			ProxyQRect().GetRect(out x,out y,out w,out h);
		}
		public void SetCoords(int x1, int y1, int x2, int y2) {
			ProxyQRect().SetCoords(x1,y1,x2,y2);
		}
		public void GetCoords(out int x1, out int y1, out int x2, out int y2) {
			ProxyQRect().GetCoords(out x1,out y1,out x2,out y2);
		}
		public void Adjust(int x1, int y1, int x2, int y2) {
			ProxyQRect().Adjust(x1,y1,x2,y2);
		}
		public QRect Adjusted(int x1, int y1, int x2, int y2) {
			return ProxyQRect().Adjusted(x1,y1,x2,y2);
		}
		public QSize Size() {
			return ProxyQRect().Size();
		}
		public int Width() {
			return ProxyQRect().Width();
		}
		public int Height() {
			return ProxyQRect().Height();
		}
		public void SetWidth(int w) {
			ProxyQRect().SetWidth(w);
		}
		public void SetHeight(int h) {
			ProxyQRect().SetHeight(h);
		}
		public void SetSize(QSize s) {
			ProxyQRect().SetSize(s);
		}
		public static QRect operator|(QRect lhs, QRect r) {
			return StaticQRect().op_or(lhs,r);
		}
		public static QRect operator&(QRect lhs, QRect r) {
			return StaticQRect().op_and(lhs,r);
		}
		public bool Contains(QPoint p, bool proper) {
			return ProxyQRect().Contains(p,proper);
		}
		public bool Contains(QPoint p) {
			return ProxyQRect().Contains(p);
		}
		public bool Contains(int x, int y) {
			return ProxyQRect().Contains(x,y);
		}
		public bool Contains(int x, int y, bool proper) {
			return ProxyQRect().Contains(x,y,proper);
		}
		public bool Contains(QRect r, bool proper) {
			return ProxyQRect().Contains(r,proper);
		}
		public bool Contains(QRect r) {
			return ProxyQRect().Contains(r);
		}
		public QRect Unite(QRect r) {
			return ProxyQRect().Unite(r);
		}
		public QRect Intersect(QRect r) {
			return ProxyQRect().Intersect(r);
		}
		public bool Intersects(QRect r) {
			return ProxyQRect().Intersects(r);
		}
		~QRect() {
			ProxyQRect().Dispose();
		}
		public void Dispose() {
			ProxyQRect().Dispose();
		}
	}
}
