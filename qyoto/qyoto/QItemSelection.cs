//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QItemSelection : IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QItemSelection(Type dummy) {}

		interface IQItemSelectionProxy {
			void Split(QItemSelectionRange range, QItemSelectionRange other, QItemSelection result);
		}

		protected void CreateQItemSelectionProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QItemSelection), this);
			_interceptor = (QItemSelection) realProxy.GetTransparentProxy();
		}
		private QItemSelection ProxyQItemSelection() {
			return (QItemSelection) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QItemSelection() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQItemSelectionProxy), null);
			_staticInterceptor = (IQItemSelectionProxy) realProxy.GetTransparentProxy();
		}
		private static IQItemSelectionProxy StaticQItemSelection() {
			return (IQItemSelectionProxy) _staticInterceptor;
		}

		public QItemSelection() : this((Type) null) {
			CreateQItemSelectionProxy();
			NewQItemSelection();
		}
		private void NewQItemSelection() {
			ProxyQItemSelection().NewQItemSelection();
		}
		public QItemSelection(QModelIndex topLeft, QModelIndex bottomRight) : this((Type) null) {
			CreateQItemSelectionProxy();
			NewQItemSelection(topLeft,bottomRight);
		}
		private void NewQItemSelection(QModelIndex topLeft, QModelIndex bottomRight) {
			ProxyQItemSelection().NewQItemSelection(topLeft,bottomRight);
		}
		public void Select(QModelIndex topLeft, QModelIndex bottomRight) {
			ProxyQItemSelection().Select(topLeft,bottomRight);
		}
		public bool Contains(QModelIndex index) {
			return ProxyQItemSelection().Contains(index);
		}
		// QModelIndexList indexes(); >>>> NOT CONVERTED
		public void Merge(QItemSelection other, int command) {
			ProxyQItemSelection().Merge(other,command);
		}
		public static void Split(QItemSelectionRange range, QItemSelectionRange other, QItemSelection result) {
			StaticQItemSelection().Split(range,other,result);
		}
		~QItemSelection() {
			ProxyQItemSelection().Dispose();
		}
		public void Dispose() {
			ProxyQItemSelection().Dispose();
		}
	}
}
