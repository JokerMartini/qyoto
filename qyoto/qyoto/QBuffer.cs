//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QBuffer : QIODevice, IDisposable {
 		protected QBuffer(Type dummy) : base((Type) null) {}
		interface IQBufferProxy {
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected void CreateQBufferProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QBuffer), this);
			_interceptor = (QBuffer) realProxy.GetTransparentProxy();
		}
		private QBuffer ProxyQBuffer() {
			return (QBuffer) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QBuffer() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQBufferProxy), null);
			_staticInterceptor = (IQBufferProxy) realProxy.GetTransparentProxy();
		}
		private static IQBufferProxy StaticQBuffer() {
			return (IQBufferProxy) _staticInterceptor;
		}

		public new virtual QMetaObject MetaObject() {
			return ProxyQBuffer().MetaObject();
		}
		// void* qt_metacast(const char* arg1); >>>> NOT CONVERTED
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QBuffer(QObject parent) : this((Type) null) {
			CreateQBufferProxy();
			NewQBuffer(parent);
		}
		private void NewQBuffer(QObject parent) {
			ProxyQBuffer().NewQBuffer(parent);
		}
		public QBuffer() : this((Type) null) {
			CreateQBufferProxy();
			NewQBuffer();
		}
		private void NewQBuffer() {
			ProxyQBuffer().NewQBuffer();
		}
		public QBuffer(byte[] buf, QObject parent) : this((Type) null) {
			CreateQBufferProxy();
			NewQBuffer(buf,parent);
		}
		private void NewQBuffer(byte[] buf, QObject parent) {
			ProxyQBuffer().NewQBuffer(buf,parent);
		}
		public QBuffer(byte[] buf) : this((Type) null) {
			CreateQBufferProxy();
			NewQBuffer(buf);
		}
		private void NewQBuffer(byte[] buf) {
			ProxyQBuffer().NewQBuffer(buf);
		}
		public byte[] Buffer() {
			return ProxyQBuffer().Buffer();
		}
		public void SetBuffer(byte[] a) {
			ProxyQBuffer().SetBuffer(a);
		}
		public void SetData(byte[] data) {
			ProxyQBuffer().SetData(data);
		}
		public void SetData(string data, int len) {
			ProxyQBuffer().SetData(data,len);
		}
		public byte[] Data() {
			return ProxyQBuffer().Data();
		}
		public new bool Open(int openMode) {
			return ProxyQBuffer().Open(openMode);
		}
		public new void Close() {
			ProxyQBuffer().Close();
		}
		// qint64 size(); >>>> NOT CONVERTED
		// qint64 pos(); >>>> NOT CONVERTED
		// bool seek(qint64 arg1); >>>> NOT CONVERTED
		public new bool AtEnd() {
			return ProxyQBuffer().AtEnd();
		}
		public new bool CanReadLine() {
			return ProxyQBuffer().CanReadLine();
		}
		public static new string Tr(string s, string c) {
			return StaticQBuffer().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQBuffer().Tr(s);
		}
		// qint64 readData(char* arg1,qint64 arg2); >>>> NOT CONVERTED
		// qint64 writeData(const char* arg1,qint64 arg2); >>>> NOT CONVERTED
		~QBuffer() {
			ProxyQBuffer().Dispose();
		}
		public void Dispose() {
			ProxyQBuffer().Dispose();
		}
	}
}
