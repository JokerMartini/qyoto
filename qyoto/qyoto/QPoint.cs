//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QPoint : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QPoint(Type dummy) {}
		interface IQPointProxy {
		}

		protected void CreateQPointProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QPoint), this);
			_interceptor = (QPoint) realProxy.GetTransparentProxy();
		}
		private QPoint ProxyQPoint() {
			return (QPoint) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QPoint() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQPointProxy), null);
			_staticInterceptor = (IQPointProxy) realProxy.GetTransparentProxy();
		}
		private static IQPointProxy StaticQPoint() {
			return (IQPointProxy) _staticInterceptor;
		}

		public QPoint() : this((Type) null) {
			CreateQPointProxy();
			NewQPoint();
		}
		private void NewQPoint() {
			ProxyQPoint().NewQPoint();
		}
		public QPoint(int xpos, int ypos) : this((Type) null) {
			CreateQPointProxy();
			NewQPoint(xpos,ypos);
		}
		private void NewQPoint(int xpos, int ypos) {
			ProxyQPoint().NewQPoint(xpos,ypos);
		}
		public bool IsNull() {
			return ProxyQPoint().IsNull();
		}
		public int X() {
			return ProxyQPoint().X();
		}
		public int Y() {
			return ProxyQPoint().Y();
		}
		public void SetX(int x) {
			ProxyQPoint().SetX(x);
		}
		public void SetY(int y) {
			ProxyQPoint().SetY(y);
		}
		public int ManhattanLength() {
			return ProxyQPoint().ManhattanLength();
		}
		public int Rx() {
			return ProxyQPoint().Rx();
		}
		public int Ry() {
			return ProxyQPoint().Ry();
		}
		// QPoint& operator*=(qreal arg1); >>>> NOT CONVERTED
		// QPoint& operator/=(qreal arg1); >>>> NOT CONVERTED
		~QPoint() {
			ProxyQPoint().Dispose();
		}
		public void Dispose() {
			ProxyQPoint().Dispose();
		}
	}
}
