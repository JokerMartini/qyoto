//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	/// See <see cref="IQToolBoxSignals"></see> for signals emitted by QToolBox
	public class QToolBox : QFrame, IDisposable {
 		protected QToolBox(Type dummy) : base((Type) null) {}
		interface IQToolBoxProxy {
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected void CreateQToolBoxProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QToolBox), this);
			_interceptor = (QToolBox) realProxy.GetTransparentProxy();
		}
		private QToolBox ProxyQToolBox() {
			return (QToolBox) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QToolBox() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQToolBoxProxy), null);
			_staticInterceptor = (IQToolBoxProxy) realProxy.GetTransparentProxy();
		}
		private static IQToolBoxProxy StaticQToolBox() {
			return (IQToolBoxProxy) _staticInterceptor;
		}

		public new virtual QMetaObject MetaObject() {
			return ProxyQToolBox().MetaObject();
		}
		// void* qt_metacast(const char* arg1); >>>> NOT CONVERTED
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QToolBox(QWidget parent, int f) : this((Type) null) {
			CreateQToolBoxProxy();
			NewQToolBox(parent,f);
		}
		private void NewQToolBox(QWidget parent, int f) {
			ProxyQToolBox().NewQToolBox(parent,f);
		}
		public QToolBox(QWidget parent) : this((Type) null) {
			CreateQToolBoxProxy();
			NewQToolBox(parent);
		}
		private void NewQToolBox(QWidget parent) {
			ProxyQToolBox().NewQToolBox(parent);
		}
		public QToolBox() : this((Type) null) {
			CreateQToolBoxProxy();
			NewQToolBox();
		}
		private void NewQToolBox() {
			ProxyQToolBox().NewQToolBox();
		}
		public int AddItem(QWidget widget, string text) {
			return ProxyQToolBox().AddItem(widget,text);
		}
		public int AddItem(QWidget widget, QIcon icon, string text) {
			return ProxyQToolBox().AddItem(widget,icon,text);
		}
		public int InsertItem(int index, QWidget widget, string text) {
			return ProxyQToolBox().InsertItem(index,widget,text);
		}
		public int InsertItem(int index, QWidget widget, QIcon icon, string text) {
			return ProxyQToolBox().InsertItem(index,widget,icon,text);
		}
		public void RemoveItem(int index) {
			ProxyQToolBox().RemoveItem(index);
		}
		public void SetItemEnabled(int index, bool enabled) {
			ProxyQToolBox().SetItemEnabled(index,enabled);
		}
		public bool IsItemEnabled(int index) {
			return ProxyQToolBox().IsItemEnabled(index);
		}
		public void SetItemText(int index, string text) {
			ProxyQToolBox().SetItemText(index,text);
		}
		public string ItemText(int index) {
			return ProxyQToolBox().ItemText(index);
		}
		public void SetItemIcon(int index, QIcon icon) {
			ProxyQToolBox().SetItemIcon(index,icon);
		}
		public QIcon ItemIcon(int index) {
			return ProxyQToolBox().ItemIcon(index);
		}
		public void SetItemToolTip(int index, string toolTip) {
			ProxyQToolBox().SetItemToolTip(index,toolTip);
		}
		public string ItemToolTip(int index) {
			return ProxyQToolBox().ItemToolTip(index);
		}
		public int CurrentIndex() {
			return ProxyQToolBox().CurrentIndex();
		}
		public QWidget CurrentWidget() {
			return ProxyQToolBox().CurrentWidget();
		}
		public QWidget Widget(int index) {
			return ProxyQToolBox().Widget(index);
		}
		public int IndexOf(QWidget widget) {
			return ProxyQToolBox().IndexOf(widget);
		}
		public int Count() {
			return ProxyQToolBox().Count();
		}
		public void SetCurrentIndex(int index) {
			ProxyQToolBox().SetCurrentIndex(index);
		}
		public void SetCurrentWidget(QWidget widget) {
			ProxyQToolBox().SetCurrentWidget(widget);
		}
		public static new string Tr(string s, string c) {
			return StaticQToolBox().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQToolBox().Tr(s);
		}
		protected virtual void ItemInserted(int index) {
			ProxyQToolBox().ItemInserted(index);
		}
		protected virtual void ItemRemoved(int index) {
			ProxyQToolBox().ItemRemoved(index);
		}
		public new void ShowEvent(QShowEvent e) {
			ProxyQToolBox().ShowEvent(e);
		}
		protected new void ChangeEvent(QEvent arg1) {
			ProxyQToolBox().ChangeEvent(arg1);
		}
		~QToolBox() {
			ProxyQToolBox().Dispose();
		}
		public new void Dispose() {
			ProxyQToolBox().Dispose();
		}
	}

	public interface IQToolBoxSignals {
		void CurrentChanged(int index);
	}
}
