//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	/// See <see cref="IQSqlTableModelSignals"></see> for signals emitted by QSqlTableModel
	public class QSqlTableModel : QSqlQueryModel, IDisposable {
 		protected QSqlTableModel(Type dummy) : base((Type) null) {}
		interface IQSqlTableModelProxy {
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected void CreateQSqlTableModelProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSqlTableModel), this);
			_interceptor = (QSqlTableModel) realProxy.GetTransparentProxy();
		}
		private QSqlTableModel ProxyQSqlTableModel() {
			return (QSqlTableModel) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QSqlTableModel() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSqlTableModelProxy), null);
			_staticInterceptor = (IQSqlTableModelProxy) realProxy.GetTransparentProxy();
		}
		private static IQSqlTableModelProxy StaticQSqlTableModel() {
			return (IQSqlTableModelProxy) _staticInterceptor;
		}

		enum E_EditStrategy {
			OnFieldChange = 0,
			OnRowChange = 1,
			OnManualSubmit = 2,
		}
		public new virtual QMetaObject MetaObject() {
			return ProxyQSqlTableModel().MetaObject();
		}
		// void* qt_metacast(const char* arg1); >>>> NOT CONVERTED
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QSqlTableModel(QObject parent, QSqlDatabase db) : this((Type) null) {
			CreateQSqlTableModelProxy();
			NewQSqlTableModel(parent,db);
		}
		private void NewQSqlTableModel(QObject parent, QSqlDatabase db) {
			ProxyQSqlTableModel().NewQSqlTableModel(parent,db);
		}
		public QSqlTableModel(QObject parent) : this((Type) null) {
			CreateQSqlTableModelProxy();
			NewQSqlTableModel(parent);
		}
		private void NewQSqlTableModel(QObject parent) {
			ProxyQSqlTableModel().NewQSqlTableModel(parent);
		}
		public QSqlTableModel() : this((Type) null) {
			CreateQSqlTableModelProxy();
			NewQSqlTableModel();
		}
		private void NewQSqlTableModel() {
			ProxyQSqlTableModel().NewQSqlTableModel();
		}
		public virtual bool Select() {
			return ProxyQSqlTableModel().Select();
		}
		public virtual void SetTable(string tableName) {
			ProxyQSqlTableModel().SetTable(tableName);
		}
		public string TableName() {
			return ProxyQSqlTableModel().TableName();
		}
		public new int Flags(QModelIndex index) {
			return ProxyQSqlTableModel().Flags(index);
		}
		public new QVariant Data(QModelIndex idx, int role) {
			return ProxyQSqlTableModel().Data(idx,role);
		}
		public new QVariant Data(QModelIndex idx) {
			return ProxyQSqlTableModel().Data(idx);
		}
		public new bool SetData(QModelIndex index, QVariant value, int role) {
			return ProxyQSqlTableModel().SetData(index,value,role);
		}
		public new bool SetData(QModelIndex index, QVariant value) {
			return ProxyQSqlTableModel().SetData(index,value);
		}
		public new QVariant HeaderData(int section, int orientation, int role) {
			return ProxyQSqlTableModel().HeaderData(section,orientation,role);
		}
		public new QVariant HeaderData(int section, int orientation) {
			return ProxyQSqlTableModel().HeaderData(section,orientation);
		}
		public bool IsDirty(QModelIndex index) {
			return ProxyQSqlTableModel().IsDirty(index);
		}
		public new void Clear() {
			ProxyQSqlTableModel().Clear();
		}
		public virtual void SetEditStrategy(int strategy) {
			ProxyQSqlTableModel().SetEditStrategy(strategy);
		}
		public int EditStrategy() {
			return ProxyQSqlTableModel().EditStrategy();
		}
		public QSqlIndex PrimaryKey() {
			return ProxyQSqlTableModel().PrimaryKey();
		}
		public QSqlDatabase Database() {
			return ProxyQSqlTableModel().Database();
		}
		public int FieldIndex(string fieldName) {
			return ProxyQSqlTableModel().FieldIndex(fieldName);
		}
		public new void Sort(int column, int order) {
			ProxyQSqlTableModel().Sort(column,order);
		}
		public virtual void SetSort(int column, int order) {
			ProxyQSqlTableModel().SetSort(column,order);
		}
		public string Filter() {
			return ProxyQSqlTableModel().Filter();
		}
		public virtual void SetFilter(string filter) {
			ProxyQSqlTableModel().SetFilter(filter);
		}
		public new int RowCount(QModelIndex parent) {
			return ProxyQSqlTableModel().RowCount(parent);
		}
		public new int RowCount() {
			return ProxyQSqlTableModel().RowCount();
		}
		public new bool RemoveColumns(int column, int count, QModelIndex parent) {
			return ProxyQSqlTableModel().RemoveColumns(column,count,parent);
		}
		public new bool RemoveColumns(int column, int count) {
			return ProxyQSqlTableModel().RemoveColumns(column,count);
		}
		public new bool RemoveRows(int row, int count, QModelIndex parent) {
			return ProxyQSqlTableModel().RemoveRows(row,count,parent);
		}
		public new bool RemoveRows(int row, int count) {
			return ProxyQSqlTableModel().RemoveRows(row,count);
		}
		public new bool InsertRows(int row, int count, QModelIndex parent) {
			return ProxyQSqlTableModel().InsertRows(row,count,parent);
		}
		public new bool InsertRows(int row, int count) {
			return ProxyQSqlTableModel().InsertRows(row,count);
		}
		public bool InsertRecord(int row, QSqlRecord record) {
			return ProxyQSqlTableModel().InsertRecord(row,record);
		}
		public bool SetRecord(int row, QSqlRecord record) {
			return ProxyQSqlTableModel().SetRecord(row,record);
		}
		public virtual void RevertRow(int row) {
			ProxyQSqlTableModel().RevertRow(row);
		}
		public new bool Submit() {
			return ProxyQSqlTableModel().Submit();
		}
		public new void Revert() {
			ProxyQSqlTableModel().Revert();
		}
		public bool SubmitAll() {
			return ProxyQSqlTableModel().SubmitAll();
		}
		public void RevertAll() {
			ProxyQSqlTableModel().RevertAll();
		}
		public static new string Tr(string s, string c) {
			return StaticQSqlTableModel().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQSqlTableModel().Tr(s);
		}
		protected virtual bool UpdateRowInTable(int row, QSqlRecord values) {
			return ProxyQSqlTableModel().UpdateRowInTable(row,values);
		}
		protected virtual bool InsertRowIntoTable(QSqlRecord values) {
			return ProxyQSqlTableModel().InsertRowIntoTable(values);
		}
		protected virtual bool DeleteRowFromTable(int row) {
			return ProxyQSqlTableModel().DeleteRowFromTable(row);
		}
		protected virtual string OrderByClause() {
			return ProxyQSqlTableModel().OrderByClause();
		}
		protected virtual string SelectStatement() {
			return ProxyQSqlTableModel().SelectStatement();
		}
		protected void SetPrimaryKey(QSqlIndex key) {
			ProxyQSqlTableModel().SetPrimaryKey(key);
		}
		protected new void SetQuery(IQSqlQuery query) {
			ProxyQSqlTableModel().SetQuery(query);
		}
		protected new QModelIndex IndexInQuery(QModelIndex item) {
			return ProxyQSqlTableModel().IndexInQuery(item);
		}
		~QSqlTableModel() {
			ProxyQSqlTableModel().Dispose();
		}
		public new void Dispose() {
			ProxyQSqlTableModel().Dispose();
		}
	}

	public interface IQSqlTableModelSignals {
		void PrimeInsert(int row, QSqlRecord record);
		void BeforeInsert(QSqlRecord record);
		void BeforeUpdate(int row, QSqlRecord record);
		void BeforeDelete(int row);
	}
}
