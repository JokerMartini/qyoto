//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QDataStream : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QDataStream(Type dummy) {}
		interface IQDataStreamProxy {
			QDataStream op_read(QDataStream lhs, int i);
			QDataStream op_read(QDataStream lhs, bool i);
			QDataStream op_read(QDataStream lhs, float f);
			QDataStream op_read(QDataStream lhs, double f);
			QDataStream op_read(QDataStream lhs, string str);
			QDataStream op_write(QDataStream lhs, short i);
			QDataStream op_write(QDataStream lhs, ushort i);
			QDataStream op_write(QDataStream lhs, int i);
			QDataStream op_write(QDataStream lhs, uint i);
			QDataStream op_write(QDataStream lhs, bool i);
			QDataStream op_write(QDataStream lhs, float f);
			QDataStream op_write(QDataStream lhs, double f);
			QDataStream op_write(QDataStream lhs, string str);
		}

		protected void CreateQDataStreamProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDataStream), this);
			_interceptor = (QDataStream) realProxy.GetTransparentProxy();
		}
		private QDataStream ProxyQDataStream() {
			return (QDataStream) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QDataStream() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDataStreamProxy), null);
			_staticInterceptor = (IQDataStreamProxy) realProxy.GetTransparentProxy();
		}
		private static IQDataStreamProxy StaticQDataStream() {
			return (IQDataStreamProxy) _staticInterceptor;
		}

		enum E_Version {
			Qt_1_0 = 1,
			Qt_2_0 = 2,
			Qt_2_1 = 3,
			Qt_3_0 = 4,
			Qt_3_1 = 5,
			Qt_3_3 = 6,
			Qt_4_0 = 7,
		}
//		enum E_ByteOrder {
//			BigEndian = QSysInfo.BigEndian,
//			LittleEndian = QSysInfo.LittleEndian,
//		}
		enum E_Status {
			Ok = 0,
			ReadPastEnd = 1,
			ReadCorruptData = 2,
		}
		public QDataStream() : this((Type) null) {
			CreateQDataStreamProxy();
			NewQDataStream();
		}
		private void NewQDataStream() {
			ProxyQDataStream().NewQDataStream();
		}
		public QDataStream(IQIODevice arg1) : this((Type) null) {
			CreateQDataStreamProxy();
			NewQDataStream(arg1);
		}
		private void NewQDataStream(IQIODevice arg1) {
			ProxyQDataStream().NewQDataStream(arg1);
		}
		public QDataStream(QByteArray arg1, int flags) : this((Type) null) {
			CreateQDataStreamProxy();
			NewQDataStream(arg1,flags);
		}
		private void NewQDataStream(QByteArray arg1, int flags) {
			ProxyQDataStream().NewQDataStream(arg1,flags);
		}
		public QDataStream(QByteArray arg1) : this((Type) null) {
			CreateQDataStreamProxy();
			NewQDataStream(arg1);
		}
		private void NewQDataStream(QByteArray arg1) {
			ProxyQDataStream().NewQDataStream(arg1);
		}
		public IQIODevice Device() {
			return ProxyQDataStream().Device();
		}
		public void SetDevice(IQIODevice arg1) {
			ProxyQDataStream().SetDevice(arg1);
		}
		public void UnsetDevice() {
			ProxyQDataStream().UnsetDevice();
		}
		public bool AtEnd() {
			return ProxyQDataStream().AtEnd();
		}
		public int Status() {
			return ProxyQDataStream().Status();
		}
		public void SetStatus(int status) {
			ProxyQDataStream().SetStatus(status);
		}
		public void ResetStatus() {
			ProxyQDataStream().ResetStatus();
		}
		public int ByteOrder() {
			return ProxyQDataStream().ByteOrder();
		}
		public void SetByteOrder(int arg1) {
			ProxyQDataStream().SetByteOrder(arg1);
		}
		public int Version() {
			return ProxyQDataStream().Version();
		}
		public void SetVersion(int arg1) {
			ProxyQDataStream().SetVersion(arg1);
		}
		// QDataStream& operator>>(qint8& arg1); >>>> NOT CONVERTED
		// QDataStream& operator>>(quint8& arg1); >>>> NOT CONVERTED
		// QDataStream& operator>>(qint16& arg1); >>>> NOT CONVERTED
		// QDataStream& operator>>(quint16& arg1); >>>> NOT CONVERTED
		public static QDataStream op_read(QDataStream lhs, int i) {
			return StaticQDataStream().op_read(lhs,i);
		}
		// QDataStream& operator>>(quint32& arg1); >>>> NOT CONVERTED
		// QDataStream& operator>>(qint64& arg1); >>>> NOT CONVERTED
		// QDataStream& operator>>(quint64& arg1); >>>> NOT CONVERTED
		public static QDataStream op_read(QDataStream lhs, bool i) {
			return StaticQDataStream().op_read(lhs,i);
		}
		public static QDataStream op_read(QDataStream lhs, float f) {
			return StaticQDataStream().op_read(lhs,f);
		}
		public static QDataStream op_read(QDataStream lhs, double f) {
			return StaticQDataStream().op_read(lhs,f);
		}
		public static QDataStream op_read(QDataStream lhs, string str) {
			return StaticQDataStream().op_read(lhs,str);
		}
		// QDataStream& operator<<(qint8 arg1); >>>> NOT CONVERTED
		// QDataStream& operator<<(quint8 arg1); >>>> NOT CONVERTED
		public static QDataStream op_write(QDataStream lhs, short i) {
			return StaticQDataStream().op_write(lhs,i);
		}
		public static QDataStream op_write(QDataStream lhs, ushort i) {
			return StaticQDataStream().op_write(lhs,i);
		}
		public static QDataStream op_write(QDataStream lhs, int i) {
			return StaticQDataStream().op_write(lhs,i);
		}
		public static QDataStream op_write(QDataStream lhs, uint i) {
			return StaticQDataStream().op_write(lhs,i);
		}
		// QDataStream& operator<<(qint64 arg1); >>>> NOT CONVERTED
		// QDataStream& operator<<(quint64 arg1); >>>> NOT CONVERTED
		public static QDataStream op_write(QDataStream lhs, bool i) {
			return StaticQDataStream().op_write(lhs,i);
		}
		public static QDataStream op_write(QDataStream lhs, float f) {
			return StaticQDataStream().op_write(lhs,f);
		}
		public static QDataStream op_write(QDataStream lhs, double f) {
			return StaticQDataStream().op_write(lhs,f);
		}
		public static QDataStream op_write(QDataStream lhs, string str) {
			return StaticQDataStream().op_write(lhs,str);
		}
		public QDataStream ReadBytes(string arg1, uint len) {
			return ProxyQDataStream().ReadBytes(arg1,len);
		}
		public int ReadRawData(string arg1, int len) {
			return ProxyQDataStream().ReadRawData(arg1,len);
		}
		public QDataStream WriteBytes(string arg1, uint len) {
			return ProxyQDataStream().WriteBytes(arg1,len);
		}
		public int WriteRawData(string arg1, int len) {
			return ProxyQDataStream().WriteRawData(arg1,len);
		}
		~QDataStream() {
			ProxyQDataStream().Dispose();
		}
		public void Dispose() {
			ProxyQDataStream().Dispose();
		}
	}
}
