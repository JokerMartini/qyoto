//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QSemaphore : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QSemaphore(Type dummy) {}
		interface IQSemaphoreProxy {
		}

		protected void CreateQSemaphoreProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSemaphore), this);
			_interceptor = (QSemaphore) realProxy.GetTransparentProxy();
		}
		private QSemaphore ProxyQSemaphore() {
			return (QSemaphore) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QSemaphore() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSemaphoreProxy), null);
			_staticInterceptor = (IQSemaphoreProxy) realProxy.GetTransparentProxy();
		}
		private static IQSemaphoreProxy StaticQSemaphore() {
			return (IQSemaphoreProxy) _staticInterceptor;
		}

		public QSemaphore(int n) : this((Type) null) {
			CreateQSemaphoreProxy();
			NewQSemaphore(n);
		}
		private void NewQSemaphore(int n) {
			ProxyQSemaphore().NewQSemaphore(n);
		}
		public QSemaphore() : this((Type) null) {
			CreateQSemaphoreProxy();
			NewQSemaphore();
		}
		private void NewQSemaphore() {
			ProxyQSemaphore().NewQSemaphore();
		}
		public void Acquire(int n) {
			ProxyQSemaphore().Acquire(n);
		}
		public void Acquire() {
			ProxyQSemaphore().Acquire();
		}
		public bool TryAcquire(int n) {
			return ProxyQSemaphore().TryAcquire(n);
		}
		public bool TryAcquire() {
			return ProxyQSemaphore().TryAcquire();
		}
		public void Release(int n) {
			ProxyQSemaphore().Release(n);
		}
		public void Release() {
			ProxyQSemaphore().Release();
		}
		public int Available() {
			return ProxyQSemaphore().Available();
		}
		~QSemaphore() {
			ProxyQSemaphore().Dispose();
		}
		public void Dispose() {
			ProxyQSemaphore().Dispose();
		}
	}
}
