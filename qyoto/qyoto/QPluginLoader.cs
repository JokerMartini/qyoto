//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections;
	using System.Text;

	[SmokeClass("QPluginLoader")]
	public class QPluginLoader : QObject, IDisposable {
 		protected QPluginLoader(Type dummy) : base((Type) null) {}
		interface IQPluginLoaderProxy {
			string Tr(string s, string c);
			string Tr(string s);
			ArrayList StaticInstances();
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QPluginLoader), this);
			_interceptor = (QPluginLoader) realProxy.GetTransparentProxy();
		}
		private QPluginLoader ProxyQPluginLoader() {
			return (QPluginLoader) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QPluginLoader() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQPluginLoaderProxy), null);
			_staticInterceptor = (IQPluginLoaderProxy) realProxy.GetTransparentProxy();
		}
		private static IQPluginLoaderProxy StaticQPluginLoader() {
			return (IQPluginLoaderProxy) _staticInterceptor;
		}

		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QPluginLoader(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQPluginLoader(parent);
		}
		[SmokeMethod("QPluginLoader(QObject*)")]
		private void NewQPluginLoader(QObject parent) {
			ProxyQPluginLoader().NewQPluginLoader(parent);
		}
		public QPluginLoader() : this((Type) null) {
			CreateProxy();
			NewQPluginLoader();
		}
		[SmokeMethod("QPluginLoader()")]
		private void NewQPluginLoader() {
			ProxyQPluginLoader().NewQPluginLoader();
		}
		public QPluginLoader(string fileName, QObject parent) : this((Type) null) {
			CreateProxy();
			NewQPluginLoader(fileName,parent);
		}
		[SmokeMethod("QPluginLoader(const QString&, QObject*)")]
		private void NewQPluginLoader(string fileName, QObject parent) {
			ProxyQPluginLoader().NewQPluginLoader(fileName,parent);
		}
		public QPluginLoader(string fileName) : this((Type) null) {
			CreateProxy();
			NewQPluginLoader(fileName);
		}
		[SmokeMethod("QPluginLoader(const QString&)")]
		private void NewQPluginLoader(string fileName) {
			ProxyQPluginLoader().NewQPluginLoader(fileName);
		}
		[SmokeMethod("instance()")]
		public QObject Instance() {
			return ProxyQPluginLoader().Instance();
		}
		[SmokeMethod("load()")]
		public bool Load() {
			return ProxyQPluginLoader().Load();
		}
		[SmokeMethod("unload()")]
		public bool Unload() {
			return ProxyQPluginLoader().Unload();
		}
		[SmokeMethod("isLoaded() const")]
		public bool IsLoaded() {
			return ProxyQPluginLoader().IsLoaded();
		}
		[SmokeMethod("setFileName(const QString&)")]
		public void SetFileName(string fileName) {
			ProxyQPluginLoader().SetFileName(fileName);
		}
		[SmokeMethod("fileName() const")]
		public string FileName() {
			return ProxyQPluginLoader().FileName();
		}
		[SmokeMethod("tr(const char*, const char*)")]
		public static new string Tr(string s, string c) {
			return StaticQPluginLoader().Tr(s,c);
		}
		[SmokeMethod("tr(const char*)")]
		public static new string Tr(string s) {
			return StaticQPluginLoader().Tr(s);
		}
		[SmokeMethod("staticInstances()")]
		public static ArrayList StaticInstances() {
			return StaticQPluginLoader().StaticInstances();
		}
		~QPluginLoader() {
			DisposeQPluginLoader();
		}
		public new void Dispose() {
			DisposeQPluginLoader();
		}
		[SmokeMethod("~QPluginLoader()")]
		private void DisposeQPluginLoader() {
			ProxyQPluginLoader().DisposeQPluginLoader();
		}
		protected new IQPluginLoaderSignals Emit() {
			return (IQPluginLoaderSignals) Q_EMIT;
		}
	}

	public interface IQPluginLoaderSignals : IQObjectSignals {
	}
}
