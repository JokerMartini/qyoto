//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QTextDecoder : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QTextDecoder(Type dummy) {}
		interface IQTextDecoderProxy {
		}

		protected void CreateQTextDecoderProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTextDecoder), this);
			_interceptor = (QTextDecoder) realProxy.GetTransparentProxy();
		}
		private QTextDecoder ProxyQTextDecoder() {
			return (QTextDecoder) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QTextDecoder() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQTextDecoderProxy), null);
			_staticInterceptor = (IQTextDecoderProxy) realProxy.GetTransparentProxy();
		}
		private static IQTextDecoderProxy StaticQTextDecoder() {
			return (IQTextDecoderProxy) _staticInterceptor;
		}

		public QTextDecoder(QTextCodec codec) : this((Type) null) {
			CreateQTextDecoderProxy();
			NewQTextDecoder(codec);
		}
		private void NewQTextDecoder(QTextCodec codec) {
			ProxyQTextDecoder().NewQTextDecoder(codec);
		}
		public string ToUnicode(string chars, int len) {
			return ProxyQTextDecoder().ToUnicode(chars,len);
		}
		public string ToUnicode(QByteArray ba) {
			return ProxyQTextDecoder().ToUnicode(ba);
		}
		~QTextDecoder() {
			ProxyQTextDecoder().Dispose();
		}
		public void Dispose() {
			ProxyQTextDecoder().Dispose();
		}
	}
}
