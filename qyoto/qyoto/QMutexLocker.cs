//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QMutexLocker : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QMutexLocker(Type dummy) {}
		interface IQMutexLockerProxy {
		}

		protected void CreateQMutexLockerProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QMutexLocker), this);
			_interceptor = (QMutexLocker) realProxy.GetTransparentProxy();
		}
		private QMutexLocker ProxyQMutexLocker() {
			return (QMutexLocker) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QMutexLocker() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQMutexLockerProxy), null);
			_staticInterceptor = (IQMutexLockerProxy) realProxy.GetTransparentProxy();
		}
		private static IQMutexLockerProxy StaticQMutexLocker() {
			return (IQMutexLockerProxy) _staticInterceptor;
		}

		public QMutexLocker(QMutex m) : this((Type) null) {
			CreateQMutexLockerProxy();
			NewQMutexLocker(m);
		}
		private void NewQMutexLocker(QMutex m) {
			ProxyQMutexLocker().NewQMutexLocker(m);
		}
		public void Unlock() {
			ProxyQMutexLocker().Unlock();
		}
		public void Relock() {
			ProxyQMutexLocker().Relock();
		}
		public QMutex Mutex() {
			return ProxyQMutexLocker().Mutex();
		}
		~QMutexLocker() {
			ProxyQMutexLocker().Dispose();
		}
		public void Dispose() {
			ProxyQMutexLocker().Dispose();
		}
	}
}
