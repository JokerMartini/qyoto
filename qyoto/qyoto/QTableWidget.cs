//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Collections;
	using System.Text;

	/// See <see cref="IQTableWidgetSignals"></see> for signals emitted by QTableWidget
	public class QTableWidget : QTableView, IDisposable {
 		protected QTableWidget(Type dummy) : base((Type) null) {}
		interface IQTableWidgetProxy {
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected void CreateQTableWidgetProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTableWidget), this);
			_interceptor = (QTableWidget) realProxy.GetTransparentProxy();
		}
		private QTableWidget ProxyQTableWidget() {
			return (QTableWidget) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QTableWidget() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQTableWidgetProxy), null);
			_staticInterceptor = (IQTableWidgetProxy) realProxy.GetTransparentProxy();
		}
		private static IQTableWidgetProxy StaticQTableWidget() {
			return (IQTableWidgetProxy) _staticInterceptor;
		}

		public new virtual QMetaObject MetaObject() {
			return ProxyQTableWidget().MetaObject();
		}
		// void* qt_metacast(const char* arg1); >>>> NOT CONVERTED
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QTableWidget(QWidget parent) : this((Type) null) {
			CreateQTableWidgetProxy();
			NewQTableWidget(parent);
		}
		private void NewQTableWidget(QWidget parent) {
			ProxyQTableWidget().NewQTableWidget(parent);
		}
		public QTableWidget() : this((Type) null) {
			CreateQTableWidgetProxy();
			NewQTableWidget();
		}
		private void NewQTableWidget() {
			ProxyQTableWidget().NewQTableWidget();
		}
		public QTableWidget(int rows, int columns, QWidget parent) : this((Type) null) {
			CreateQTableWidgetProxy();
			NewQTableWidget(rows,columns,parent);
		}
		private void NewQTableWidget(int rows, int columns, QWidget parent) {
			ProxyQTableWidget().NewQTableWidget(rows,columns,parent);
		}
		public QTableWidget(int rows, int columns) : this((Type) null) {
			CreateQTableWidgetProxy();
			NewQTableWidget(rows,columns);
		}
		private void NewQTableWidget(int rows, int columns) {
			ProxyQTableWidget().NewQTableWidget(rows,columns);
		}
		public void SetRowCount(int rows) {
			ProxyQTableWidget().SetRowCount(rows);
		}
		public int RowCount() {
			return ProxyQTableWidget().RowCount();
		}
		public void SetColumnCount(int columns) {
			ProxyQTableWidget().SetColumnCount(columns);
		}
		public int ColumnCount() {
			return ProxyQTableWidget().ColumnCount();
		}
		public int Row(QTableWidgetItem item) {
			return ProxyQTableWidget().Row(item);
		}
		public int Column(QTableWidgetItem item) {
			return ProxyQTableWidget().Column(item);
		}
		public QTableWidgetItem Item(int row, int column) {
			return ProxyQTableWidget().Item(row,column);
		}
		public void SetItem(int row, int column, QTableWidgetItem item) {
			ProxyQTableWidget().SetItem(row,column,item);
		}
		public QTableWidgetItem TakeItem(int row, int column) {
			return ProxyQTableWidget().TakeItem(row,column);
		}
		public QTableWidgetItem VerticalHeaderItem(int row) {
			return ProxyQTableWidget().VerticalHeaderItem(row);
		}
		public void SetVerticalHeaderItem(int row, QTableWidgetItem item) {
			ProxyQTableWidget().SetVerticalHeaderItem(row,item);
		}
		public QTableWidgetItem HorizontalHeaderItem(int column) {
			return ProxyQTableWidget().HorizontalHeaderItem(column);
		}
		public void SetHorizontalHeaderItem(int column, QTableWidgetItem item) {
			ProxyQTableWidget().SetHorizontalHeaderItem(column,item);
		}
		public void SetVerticalHeaderLabels(string[] labels) {
			ProxyQTableWidget().SetVerticalHeaderLabels(labels);
		}
		public void SetHorizontalHeaderLabels(string[] labels) {
			ProxyQTableWidget().SetHorizontalHeaderLabels(labels);
		}
		public int CurrentRow() {
			return ProxyQTableWidget().CurrentRow();
		}
		public int CurrentColumn() {
			return ProxyQTableWidget().CurrentColumn();
		}
		public QTableWidgetItem CurrentItem() {
			return ProxyQTableWidget().CurrentItem();
		}
		public void SetCurrentItem(QTableWidgetItem item) {
			ProxyQTableWidget().SetCurrentItem(item);
		}
		public void SortItems(int column, int order) {
			ProxyQTableWidget().SortItems(column,order);
		}
		public void SortItems(int column) {
			ProxyQTableWidget().SortItems(column);
		}
		public void SetSortingEnabled(bool enable) {
			ProxyQTableWidget().SetSortingEnabled(enable);
		}
		public bool IsSortingEnabled() {
			return ProxyQTableWidget().IsSortingEnabled();
		}
		public void EditItem(QTableWidgetItem item) {
			ProxyQTableWidget().EditItem(item);
		}
		public new void OpenPersistentEditor(QTableWidgetItem item) {
			ProxyQTableWidget().OpenPersistentEditor(item);
		}
		public new void ClosePersistentEditor(QTableWidgetItem item) {
			ProxyQTableWidget().ClosePersistentEditor(item);
		}
		public bool IsItemSelected(QTableWidgetItem item) {
			return ProxyQTableWidget().IsItemSelected(item);
		}
		public void SetItemSelected(QTableWidgetItem item, bool select) {
			ProxyQTableWidget().SetItemSelected(item,select);
		}
		public void SetRangeSelected(QTableWidgetSelectionRange range, bool select) {
			ProxyQTableWidget().SetRangeSelected(range,select);
		}
		// QList<QTableWidgetSelectionRange> selectedRanges(); >>>> NOT CONVERTED
		// QList<QTableWidgetItem*> selectedItems(); >>>> NOT CONVERTED
		// QList<QTableWidgetItem*> findItems(const QString& arg1,Qt::MatchFlags arg2); >>>> NOT CONVERTED
		public int VisualRow(int logicalRow) {
			return ProxyQTableWidget().VisualRow(logicalRow);
		}
		public int VisualColumn(int logicalColumn) {
			return ProxyQTableWidget().VisualColumn(logicalColumn);
		}
		public QTableWidgetItem ItemAt(QPoint p) {
			return ProxyQTableWidget().ItemAt(p);
		}
		public QTableWidgetItem ItemAt(int x, int y) {
			return ProxyQTableWidget().ItemAt(x,y);
		}
		public QRect VisualItemRect(QTableWidgetItem item) {
			return ProxyQTableWidget().VisualItemRect(item);
		}
		public QTableWidgetItem ItemPrototype() {
			return ProxyQTableWidget().ItemPrototype();
		}
		public void SetItemPrototype(QTableWidgetItem item) {
			ProxyQTableWidget().SetItemPrototype(item);
		}
		public void ScrollToItem(QTableWidgetItem item, int hint) {
			ProxyQTableWidget().ScrollToItem(item,hint);
		}
		public void ScrollToItem(QTableWidgetItem item) {
			ProxyQTableWidget().ScrollToItem(item);
		}
		public void InsertRow(int row) {
			ProxyQTableWidget().InsertRow(row);
		}
		public void InsertColumn(int column) {
			ProxyQTableWidget().InsertColumn(column);
		}
		public void RemoveRow(int row) {
			ProxyQTableWidget().RemoveRow(row);
		}
		public void RemoveColumn(int column) {
			ProxyQTableWidget().RemoveColumn(column);
		}
		public void Clear() {
			ProxyQTableWidget().Clear();
		}
		public static new string Tr(string s, string c) {
			return StaticQTableWidget().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQTableWidget().Tr(s);
		}
		protected virtual ArrayList MimeTypes() {
			return ProxyQTableWidget().MimeTypes();
		}
		// QMimeData* mimeData(const QList<QTableWidgetItem*> arg1); >>>> NOT CONVERTED
		protected virtual bool DropMimeData(int row, int column, QMimeData data, int action) {
			return ProxyQTableWidget().DropMimeData(row,column,data,action);
		}
		protected virtual int SupportedDropActions() {
			return ProxyQTableWidget().SupportedDropActions();
		}
		// QList<QTableWidgetItem*> items(const QMimeData* arg1); >>>> NOT CONVERTED
		protected QModelIndex IndexFromItem(QTableWidgetItem item) {
			return ProxyQTableWidget().IndexFromItem(item);
		}
		protected QTableWidgetItem ItemFromIndex(QModelIndex index) {
			return ProxyQTableWidget().ItemFromIndex(index);
		}
		~QTableWidget() {
			ProxyQTableWidget().Dispose();
		}
		public new void Dispose() {
			ProxyQTableWidget().Dispose();
		}
	}

	public interface IQTableWidgetSignals {
		void ItemPressed(QTableWidgetItem item);
		void ItemClicked(QTableWidgetItem item);
		void ItemDoubleClicked(QTableWidgetItem item);
		void ItemActivated(QTableWidgetItem item);
		void ItemEntered(QTableWidgetItem item);
		void ItemChanged(QTableWidgetItem item);
		void CurrentItemChanged(QTableWidgetItem current, QTableWidgetItem previous);
		void ItemSelectionChanged();
	}
}
