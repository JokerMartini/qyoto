//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QPen : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QPen(Type dummy) {}
		interface IQPenProxy {
			bool op_equals(QPen lhs, QPen p);
		}

		protected void CreateQPenProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QPen), this);
			_interceptor = (QPen) realProxy.GetTransparentProxy();
		}
		private QPen ProxyQPen() {
			return (QPen) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QPen() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQPenProxy), null);
			_staticInterceptor = (IQPenProxy) realProxy.GetTransparentProxy();
		}
		private static IQPenProxy StaticQPen() {
			return (IQPenProxy) _staticInterceptor;
		}

		public QPen() : this((Type) null) {
			CreateQPenProxy();
			NewQPen();
		}
		private void NewQPen() {
			ProxyQPen().NewQPen();
		}
		public QPen(int arg1) : this((Type) null) {
			CreateQPenProxy();
			NewQPen(arg1);
		}
		private void NewQPen(int arg1) {
			ProxyQPen().NewQPen(arg1);
		}
		public QPen(QColor color) : this((Type) null) {
			CreateQPenProxy();
			NewQPen(color);
		}
		private void NewQPen(QColor color) {
			ProxyQPen().NewQPen(color);
		}
		// QPen* QPen(const QBrush& arg1,qreal arg2,Qt::PenStyle arg3,Qt::PenCapStyle arg4,Qt::PenJoinStyle arg5); >>>> NOT CONVERTED
		// QPen* QPen(const QBrush& arg1,qreal arg2,Qt::PenStyle arg3,Qt::PenCapStyle arg4); >>>> NOT CONVERTED
		// QPen* QPen(const QBrush& arg1,qreal arg2,Qt::PenStyle arg3); >>>> NOT CONVERTED
		// QPen* QPen(const QBrush& arg1,qreal arg2); >>>> NOT CONVERTED
		public QPen(QPen pen) : this((Type) null) {
			CreateQPenProxy();
			NewQPen(pen);
		}
		private void NewQPen(QPen pen) {
			ProxyQPen().NewQPen(pen);
		}
		public int Style() {
			return ProxyQPen().Style();
		}
		public void SetStyle(int arg1) {
			ProxyQPen().SetStyle(arg1);
		}
		// qreal widthF(); >>>> NOT CONVERTED
		// void setWidthF(qreal arg1); >>>> NOT CONVERTED
		public int Width() {
			return ProxyQPen().Width();
		}
		public void SetWidth(int width) {
			ProxyQPen().SetWidth(width);
		}
		public QColor Color() {
			return ProxyQPen().Color();
		}
		public void SetColor(QColor color) {
			ProxyQPen().SetColor(color);
		}
		public QBrush Brush() {
			return ProxyQPen().Brush();
		}
		public void SetBrush(QBrush brush) {
			ProxyQPen().SetBrush(brush);
		}
		public bool IsSolid() {
			return ProxyQPen().IsSolid();
		}
		public int CapStyle() {
			return ProxyQPen().CapStyle();
		}
		public void SetCapStyle(int pcs) {
			ProxyQPen().SetCapStyle(pcs);
		}
		public int JoinStyle() {
			return ProxyQPen().JoinStyle();
		}
		public void SetJoinStyle(int pcs) {
			ProxyQPen().SetJoinStyle(pcs);
		}
		public static bool operator==(QPen lhs, QPen p) {
			return StaticQPen().op_equals(lhs,p);
		}
		public static bool operator!=(QPen lhs, QPen p) {
			return !StaticQPen().op_equals(lhs,p);
		}
		public override bool Equals(object o) {
			if (!(o is QPen)) { return false; }
			return this == (QPen) o;
		}
		public override int GetHashCode() {
			return ProxyQPen().GetHashCode();
		}
		//  operator QVariant(); >>>> NOT CONVERTED
		public bool IsDetached() {
			return ProxyQPen().IsDetached();
		}
		~QPen() {
			ProxyQPen().Dispose();
		}
		public void Dispose() {
			ProxyQPen().Dispose();
		}
	}
}
