//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QFileOpenEvent : QEvent, IDisposable {
 		protected QFileOpenEvent(Type dummy) : base((Type) null) {}
		interface IQFileOpenEventProxy {
		}

		protected void CreateQFileOpenEventProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QFileOpenEvent), this);
			_interceptor = (QFileOpenEvent) realProxy.GetTransparentProxy();
		}
		private QFileOpenEvent ProxyQFileOpenEvent() {
			return (QFileOpenEvent) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QFileOpenEvent() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQFileOpenEventProxy), null);
			_staticInterceptor = (IQFileOpenEventProxy) realProxy.GetTransparentProxy();
		}
		private static IQFileOpenEventProxy StaticQFileOpenEvent() {
			return (IQFileOpenEventProxy) _staticInterceptor;
		}

		public QFileOpenEvent(string file) : this((Type) null) {
			CreateQFileOpenEventProxy();
			NewQFileOpenEvent(file);
		}
		private void NewQFileOpenEvent(string file) {
			ProxyQFileOpenEvent().NewQFileOpenEvent(file);
		}
		public string File() {
			return ProxyQFileOpenEvent().File();
		}
		~QFileOpenEvent() {
			ProxyQFileOpenEvent().Dispose();
		}
		public new void Dispose() {
			ProxyQFileOpenEvent().Dispose();
		}
	}
}
