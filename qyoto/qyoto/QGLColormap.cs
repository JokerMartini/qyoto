//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QGLColormap : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QGLColormap(Type dummy) {}
		interface IQGLColormapProxy {
		}

		protected void CreateQGLColormapProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QGLColormap), this);
			_interceptor = (QGLColormap) realProxy.GetTransparentProxy();
		}
		private QGLColormap ProxyQGLColormap() {
			return (QGLColormap) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QGLColormap() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQGLColormapProxy), null);
			_staticInterceptor = (IQGLColormapProxy) realProxy.GetTransparentProxy();
		}
		private static IQGLColormapProxy StaticQGLColormap() {
			return (IQGLColormapProxy) _staticInterceptor;
		}

		public QGLColormap() : this((Type) null) {
			CreateQGLColormapProxy();
			NewQGLColormap();
		}
		private void NewQGLColormap() {
			ProxyQGLColormap().NewQGLColormap();
		}
		public QGLColormap(QGLColormap arg1) : this((Type) null) {
			CreateQGLColormapProxy();
			NewQGLColormap(arg1);
		}
		private void NewQGLColormap(QGLColormap arg1) {
			ProxyQGLColormap().NewQGLColormap(arg1);
		}
		public bool IsEmpty() {
			return ProxyQGLColormap().IsEmpty();
		}
		public int Size() {
			return ProxyQGLColormap().Size();
		}
		public void Detach() {
			ProxyQGLColormap().Detach();
		}
		public void SetEntries(int count, out int colors, int arg3) {
			ProxyQGLColormap().SetEntries(count,out colors,arg3);
		}
		public void SetEntries(int count, out int colors) {
			ProxyQGLColormap().SetEntries(count,out colors);
		}
		public void SetEntry(int idx, uint color) {
			ProxyQGLColormap().SetEntry(idx,color);
		}
		public void SetEntry(int idx, QColor color) {
			ProxyQGLColormap().SetEntry(idx,color);
		}
		public uint EntryRgb(int idx) {
			return ProxyQGLColormap().EntryRgb(idx);
		}
		public QColor EntryColor(int idx) {
			return ProxyQGLColormap().EntryColor(idx);
		}
		public int Find(uint color) {
			return ProxyQGLColormap().Find(color);
		}
		public int FindNearest(uint color) {
			return ProxyQGLColormap().FindNearest(color);
		}
		protected uint Handle() {
			return ProxyQGLColormap().Handle();
		}
		protected void SetHandle(uint ahandle) {
			ProxyQGLColormap().SetHandle(ahandle);
		}
		~QGLColormap() {
			ProxyQGLColormap().Dispose();
		}
		public void Dispose() {
			ProxyQGLColormap().Dispose();
		}
	}
}
