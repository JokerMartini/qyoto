//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	/// See <see cref="IQLineEditSignals"></see> for signals emitted by QLineEdit
	public class QLineEdit : QWidget, IDisposable {
 		protected QLineEdit(Type dummy) : base((Type) null) {}
		interface IQLineEditProxy {
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected void CreateQLineEditProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QLineEdit), this);
			_interceptor = (QLineEdit) realProxy.GetTransparentProxy();
		}
		private QLineEdit ProxyQLineEdit() {
			return (QLineEdit) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QLineEdit() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQLineEditProxy), null);
			_staticInterceptor = (IQLineEditProxy) realProxy.GetTransparentProxy();
		}
		private static IQLineEditProxy StaticQLineEdit() {
			return (IQLineEditProxy) _staticInterceptor;
		}

		enum E_EchoMode {
			Normal = 0,
			NoEcho = 1,
			Password = 2,
		}
		public new virtual QMetaObject MetaObject() {
			return ProxyQLineEdit().MetaObject();
		}
		// void* qt_metacast(const char* arg1); >>>> NOT CONVERTED
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QLineEdit(QWidget parent) : this((Type) null) {
			CreateQLineEditProxy();
			NewQLineEdit(parent);
		}
		private void NewQLineEdit(QWidget parent) {
			ProxyQLineEdit().NewQLineEdit(parent);
		}
		public QLineEdit() : this((Type) null) {
			CreateQLineEditProxy();
			NewQLineEdit();
		}
		private void NewQLineEdit() {
			ProxyQLineEdit().NewQLineEdit();
		}
		public QLineEdit(string arg1, QWidget parent) : this((Type) null) {
			CreateQLineEditProxy();
			NewQLineEdit(arg1,parent);
		}
		private void NewQLineEdit(string arg1, QWidget parent) {
			ProxyQLineEdit().NewQLineEdit(arg1,parent);
		}
		public QLineEdit(string arg1) : this((Type) null) {
			CreateQLineEditProxy();
			NewQLineEdit(arg1);
		}
		private void NewQLineEdit(string arg1) {
			ProxyQLineEdit().NewQLineEdit(arg1);
		}
		public string Text() {
			return ProxyQLineEdit().Text();
		}
		public string DisplayText() {
			return ProxyQLineEdit().DisplayText();
		}
		public int MaxLength() {
			return ProxyQLineEdit().MaxLength();
		}
		public void SetMaxLength(int arg1) {
			ProxyQLineEdit().SetMaxLength(arg1);
		}
		public void SetFrame(bool arg1) {
			ProxyQLineEdit().SetFrame(arg1);
		}
		public bool HasFrame() {
			return ProxyQLineEdit().HasFrame();
		}
		public int EchoMode() {
			return ProxyQLineEdit().EchoMode();
		}
		public void SetEchoMode(int arg1) {
			ProxyQLineEdit().SetEchoMode(arg1);
		}
		public bool IsReadOnly() {
			return ProxyQLineEdit().IsReadOnly();
		}
		public void SetReadOnly(bool arg1) {
			ProxyQLineEdit().SetReadOnly(arg1);
		}
		public void SetValidator(QValidator arg1) {
			ProxyQLineEdit().SetValidator(arg1);
		}
		public QValidator Validator() {
			return ProxyQLineEdit().Validator();
		}
		public new QSize SizeHint() {
			return ProxyQLineEdit().SizeHint();
		}
		public new QSize MinimumSizeHint() {
			return ProxyQLineEdit().MinimumSizeHint();
		}
		public int CursorPosition() {
			return ProxyQLineEdit().CursorPosition();
		}
		public void SetCursorPosition(int arg1) {
			ProxyQLineEdit().SetCursorPosition(arg1);
		}
		public int CursorPositionAt(QPoint pos) {
			return ProxyQLineEdit().CursorPositionAt(pos);
		}
		public void SetAlignment(int flag) {
			ProxyQLineEdit().SetAlignment(flag);
		}
		public int Alignment() {
			return ProxyQLineEdit().Alignment();
		}
		public void CursorForward(bool mark, int steps) {
			ProxyQLineEdit().CursorForward(mark,steps);
		}
		public void CursorForward(bool mark) {
			ProxyQLineEdit().CursorForward(mark);
		}
		public void CursorBackward(bool mark, int steps) {
			ProxyQLineEdit().CursorBackward(mark,steps);
		}
		public void CursorBackward(bool mark) {
			ProxyQLineEdit().CursorBackward(mark);
		}
		public void CursorWordForward(bool mark) {
			ProxyQLineEdit().CursorWordForward(mark);
		}
		public void CursorWordBackward(bool mark) {
			ProxyQLineEdit().CursorWordBackward(mark);
		}
		public void Backspace() {
			ProxyQLineEdit().Backspace();
		}
		public void Del() {
			ProxyQLineEdit().Del();
		}
		public void Home(bool mark) {
			ProxyQLineEdit().Home(mark);
		}
		public void End(bool mark) {
			ProxyQLineEdit().End(mark);
		}
		public bool IsModified() {
			return ProxyQLineEdit().IsModified();
		}
		public void SetModified(bool arg1) {
			ProxyQLineEdit().SetModified(arg1);
		}
		public void SetSelection(int arg1, int arg2) {
			ProxyQLineEdit().SetSelection(arg1,arg2);
		}
		public bool HasSelectedText() {
			return ProxyQLineEdit().HasSelectedText();
		}
		public string SelectedText() {
			return ProxyQLineEdit().SelectedText();
		}
		public int SelectionStart() {
			return ProxyQLineEdit().SelectionStart();
		}
		public bool IsUndoAvailable() {
			return ProxyQLineEdit().IsUndoAvailable();
		}
		public bool IsRedoAvailable() {
			return ProxyQLineEdit().IsRedoAvailable();
		}
		public void SetDragEnabled(bool b) {
			ProxyQLineEdit().SetDragEnabled(b);
		}
		public bool DragEnabled() {
			return ProxyQLineEdit().DragEnabled();
		}
		public string InputMask() {
			return ProxyQLineEdit().InputMask();
		}
		public void SetInputMask(string inputMask) {
			ProxyQLineEdit().SetInputMask(inputMask);
		}
		public bool HasAcceptableInput() {
			return ProxyQLineEdit().HasAcceptableInput();
		}
		public void Deselect() {
			ProxyQLineEdit().Deselect();
		}
		public void Insert(string arg1) {
			ProxyQLineEdit().Insert(arg1);
		}
		public QMenu CreateStandardContextMenu() {
			return ProxyQLineEdit().CreateStandardContextMenu();
		}
		public new QVariant InputMethodQuery(int arg1) {
			return ProxyQLineEdit().InputMethodQuery(arg1);
		}
		public new bool Event(QEvent arg1) {
			return ProxyQLineEdit().Event(arg1);
		}
		public void SetText(string arg1) {
			ProxyQLineEdit().SetText(arg1);
		}
		public void Clear() {
			ProxyQLineEdit().Clear();
		}
		public void SelectAll() {
			ProxyQLineEdit().SelectAll();
		}
		public void Undo() {
			ProxyQLineEdit().Undo();
		}
		public void Redo() {
			ProxyQLineEdit().Redo();
		}
		public void Cut() {
			ProxyQLineEdit().Cut();
		}
		public void Copy() {
			ProxyQLineEdit().Copy();
		}
		public void Paste() {
			ProxyQLineEdit().Paste();
		}
		public static new string Tr(string s, string c) {
			return StaticQLineEdit().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQLineEdit().Tr(s);
		}
		protected new void MousePressEvent(QMouseEvent arg1) {
			ProxyQLineEdit().MousePressEvent(arg1);
		}
		protected new void MouseMoveEvent(QMouseEvent arg1) {
			ProxyQLineEdit().MouseMoveEvent(arg1);
		}
		protected new void MouseReleaseEvent(QMouseEvent arg1) {
			ProxyQLineEdit().MouseReleaseEvent(arg1);
		}
		protected new void MouseDoubleClickEvent(QMouseEvent arg1) {
			ProxyQLineEdit().MouseDoubleClickEvent(arg1);
		}
		protected new void KeyPressEvent(QKeyEvent arg1) {
			ProxyQLineEdit().KeyPressEvent(arg1);
		}
		protected new void FocusInEvent(QFocusEvent arg1) {
			ProxyQLineEdit().FocusInEvent(arg1);
		}
		protected new void FocusOutEvent(QFocusEvent arg1) {
			ProxyQLineEdit().FocusOutEvent(arg1);
		}
		protected new void PaintEvent(QPaintEvent arg1) {
			ProxyQLineEdit().PaintEvent(arg1);
		}
		protected new void DragEnterEvent(QDragEnterEvent arg1) {
			ProxyQLineEdit().DragEnterEvent(arg1);
		}
		protected new void DragMoveEvent(QDragMoveEvent e) {
			ProxyQLineEdit().DragMoveEvent(e);
		}
		protected new void DragLeaveEvent(QDragLeaveEvent e) {
			ProxyQLineEdit().DragLeaveEvent(e);
		}
		protected new void DropEvent(QDropEvent arg1) {
			ProxyQLineEdit().DropEvent(arg1);
		}
		protected new void ChangeEvent(QEvent arg1) {
			ProxyQLineEdit().ChangeEvent(arg1);
		}
		protected new void ContextMenuEvent(QContextMenuEvent arg1) {
			ProxyQLineEdit().ContextMenuEvent(arg1);
		}
		protected new void InputMethodEvent(QInputMethodEvent arg1) {
			ProxyQLineEdit().InputMethodEvent(arg1);
		}
		~QLineEdit() {
			ProxyQLineEdit().Dispose();
		}
		public new void Dispose() {
			ProxyQLineEdit().Dispose();
		}
	}

	public interface IQLineEditSignals {
		void TextChanged(string arg1);
		void TextEdited(string arg1);
		void CursorPositionChanged(int arg1, int arg2);
		void ReturnPressed();
		void EditingFinished();
		void SelectionChanged();
	}
}
