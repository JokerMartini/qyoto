//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QBool : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QBool(Type dummy) {}
		interface IQBoolProxy {
		}

		protected void CreateQBoolProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QBool), this);
			_interceptor = (QBool) realProxy.GetTransparentProxy();
		}
		private QBool ProxyQBool() {
			return (QBool) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QBool() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQBoolProxy), null);
			_staticInterceptor = (IQBoolProxy) realProxy.GetTransparentProxy();
		}
		private static IQBoolProxy StaticQBool() {
			return (IQBoolProxy) _staticInterceptor;
		}

		public QBool(bool B) : this((Type) null) {
			CreateQBoolProxy();
			NewQBool(B);
		}
		private void NewQBool(bool B) {
			ProxyQBool().NewQBool(B);
		}
		//  operator const void *(); >>>> NOT CONVERTED
		~QBool() {
			ProxyQBool().Dispose();
		}
		public void Dispose() {
			ProxyQBool().Dispose();
		}
	}
}
