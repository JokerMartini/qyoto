//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QItemDelegate : QAbstractItemDelegate, IDisposable {
 		protected QItemDelegate(Type dummy) : base((Type) null) {}
		interface IQItemDelegateProxy {
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected void CreateQItemDelegateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QItemDelegate), this);
			_interceptor = (QItemDelegate) realProxy.GetTransparentProxy();
		}
		private QItemDelegate ProxyQItemDelegate() {
			return (QItemDelegate) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QItemDelegate() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQItemDelegateProxy), null);
			_staticInterceptor = (IQItemDelegateProxy) realProxy.GetTransparentProxy();
		}
		private static IQItemDelegateProxy StaticQItemDelegate() {
			return (IQItemDelegateProxy) _staticInterceptor;
		}

		public new virtual QMetaObject MetaObject() {
			return ProxyQItemDelegate().MetaObject();
		}
		// void* qt_metacast(const char* arg1); >>>> NOT CONVERTED
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QItemDelegate(QObject parent) : this((Type) null) {
			CreateQItemDelegateProxy();
			NewQItemDelegate(parent);
		}
		private void NewQItemDelegate(QObject parent) {
			ProxyQItemDelegate().NewQItemDelegate(parent);
		}
		public QItemDelegate() : this((Type) null) {
			CreateQItemDelegateProxy();
			NewQItemDelegate();
		}
		private void NewQItemDelegate() {
			ProxyQItemDelegate().NewQItemDelegate();
		}
		public new void Paint(QPainter painter, QStyleOptionViewItem option, QModelIndex index) {
			ProxyQItemDelegate().Paint(painter,option,index);
		}
		public new QSize SizeHint(QStyleOptionViewItem option, QModelIndex index) {
			return ProxyQItemDelegate().SizeHint(option,index);
		}
		public new QWidget CreateEditor(QWidget parent, QStyleOptionViewItem option, QModelIndex index) {
			return ProxyQItemDelegate().CreateEditor(parent,option,index);
		}
		public new void SetEditorData(QWidget editor, QModelIndex index) {
			ProxyQItemDelegate().SetEditorData(editor,index);
		}
		public new void SetModelData(QWidget editor, QAbstractItemModel model, QModelIndex index) {
			ProxyQItemDelegate().SetModelData(editor,model,index);
		}
		public new void UpdateEditorGeometry(QWidget editor, QStyleOptionViewItem option, QModelIndex index) {
			ProxyQItemDelegate().UpdateEditorGeometry(editor,option,index);
		}
		public QItemEditorFactory ItemEditorFactory() {
			return ProxyQItemDelegate().ItemEditorFactory();
		}
		public void SetItemEditorFactory(QItemEditorFactory factory) {
			ProxyQItemDelegate().SetItemEditorFactory(factory);
		}
		public static new string Tr(string s, string c) {
			return StaticQItemDelegate().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQItemDelegate().Tr(s);
		}
		protected virtual void DrawDisplay(QPainter painter, QStyleOptionViewItem option, QRect rect, string text) {
			ProxyQItemDelegate().DrawDisplay(painter,option,rect,text);
		}
		protected virtual void DrawDecoration(QPainter painter, QStyleOptionViewItem option, QRect rect, QPixmap pixmap) {
			ProxyQItemDelegate().DrawDecoration(painter,option,rect,pixmap);
		}
		protected virtual void DrawFocus(QPainter painter, QStyleOptionViewItem option, QRect rect) {
			ProxyQItemDelegate().DrawFocus(painter,option,rect);
		}
		protected virtual void DrawCheck(QPainter painter, QStyleOptionViewItem option, QRect rect, int state) {
			ProxyQItemDelegate().DrawCheck(painter,option,rect,state);
		}
		protected void DoLayout(QStyleOptionViewItem option, QRect checkRect, QRect iconRect, QRect textRect, bool hint) {
			ProxyQItemDelegate().DoLayout(option,checkRect,iconRect,textRect,hint);
		}
		protected QPixmap Decoration(QStyleOptionViewItem option, QVariant variant) {
			return ProxyQItemDelegate().Decoration(option,variant);
		}
		protected QPixmap Selected(QPixmap pixmap, QPalette palette, bool enabled) {
			return ProxyQItemDelegate().Selected(pixmap,palette,enabled);
		}
		protected QRect Check(QStyleOptionViewItem option, QRect bounding, QVariant variant) {
			return ProxyQItemDelegate().Check(option,bounding,variant);
		}
		public new bool EventFilter(QObject arg1, QEvent arg2) {
			return ProxyQItemDelegate().EventFilter(arg1,arg2);
		}
		protected new bool EditorEvent(QEvent arg1, QAbstractItemModel model, QStyleOptionViewItem option, QModelIndex index) {
			return ProxyQItemDelegate().EditorEvent(arg1,model,option,index);
		}
		~QItemDelegate() {
			ProxyQItemDelegate().Dispose();
		}
		public new void Dispose() {
			ProxyQItemDelegate().Dispose();
		}
	}
}
