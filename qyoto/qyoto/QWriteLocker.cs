//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QWriteLocker : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QWriteLocker(Type dummy) {}
		interface IQWriteLockerProxy {
		}

		protected void CreateQWriteLockerProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QWriteLocker), this);
			_interceptor = (QWriteLocker) realProxy.GetTransparentProxy();
		}
		private QWriteLocker ProxyQWriteLocker() {
			return (QWriteLocker) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QWriteLocker() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQWriteLockerProxy), null);
			_staticInterceptor = (IQWriteLockerProxy) realProxy.GetTransparentProxy();
		}
		private static IQWriteLockerProxy StaticQWriteLocker() {
			return (IQWriteLockerProxy) _staticInterceptor;
		}

		public QWriteLocker(QReadWriteLock readWriteLock) : this((Type) null) {
			CreateQWriteLockerProxy();
			NewQWriteLocker(readWriteLock);
		}
		private void NewQWriteLocker(QReadWriteLock readWriteLock) {
			ProxyQWriteLocker().NewQWriteLocker(readWriteLock);
		}
		public void Unlock() {
			ProxyQWriteLocker().Unlock();
		}
		public void Relock() {
			ProxyQWriteLocker().Relock();
		}
		public QReadWriteLock ReadWriteLock() {
			return ProxyQWriteLocker().ReadWriteLock();
		}
		~QWriteLocker() {
			ProxyQWriteLocker().Dispose();
		}
		public void Dispose() {
			ProxyQWriteLocker().Dispose();
		}
	}
}
