//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QTextTable : QTextFrame, IDisposable {
 		protected QTextTable(Type dummy) : base((Type) null) {}
		interface IQTextTableProxy {
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected void CreateQTextTableProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTextTable), this);
			_interceptor = (QTextTable) realProxy.GetTransparentProxy();
		}
		private QTextTable ProxyQTextTable() {
			return (QTextTable) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QTextTable() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQTextTableProxy), null);
			_staticInterceptor = (IQTextTableProxy) realProxy.GetTransparentProxy();
		}
		private static IQTextTableProxy StaticQTextTable() {
			return (IQTextTableProxy) _staticInterceptor;
		}

		public new virtual QMetaObject MetaObject() {
			return ProxyQTextTable().MetaObject();
		}
		// void* qt_metacast(const char* arg1); >>>> NOT CONVERTED
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		// QTextTable* QTextTable(QTextDocument* arg1); >>>> NOT CONVERTED
		public void Resize(int rows, int cols) {
			ProxyQTextTable().Resize(rows,cols);
		}
		public void InsertRows(int pos, int num) {
			ProxyQTextTable().InsertRows(pos,num);
		}
		public void InsertColumns(int pos, int num) {
			ProxyQTextTable().InsertColumns(pos,num);
		}
		public void RemoveRows(int pos, int num) {
			ProxyQTextTable().RemoveRows(pos,num);
		}
		public void RemoveColumns(int pos, int num) {
			ProxyQTextTable().RemoveColumns(pos,num);
		}
		public int Rows() {
			return ProxyQTextTable().Rows();
		}
		public int Columns() {
			return ProxyQTextTable().Columns();
		}
		public QTextTableCell CellAt(int row, int col) {
			return ProxyQTextTable().CellAt(row,col);
		}
		public QTextTableCell CellAt(int position) {
			return ProxyQTextTable().CellAt(position);
		}
		// QTextTableCell cellAt(const QTextCursor& arg1); >>>> NOT CONVERTED
		// QTextCursor rowStart(const QTextCursor& arg1); >>>> NOT CONVERTED
		// QTextCursor rowEnd(const QTextCursor& arg1); >>>> NOT CONVERTED
		public new void SetFormat(QTextTableFormat format) {
			ProxyQTextTable().SetFormat(format);
		}
		public new QTextTableFormat Format() {
			return ProxyQTextTable().Format();
		}
		public static new string Tr(string s, string c) {
			return StaticQTextTable().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQTextTable().Tr(s);
		}
		~QTextTable() {
			ProxyQTextTable().Dispose();
		}
		public new void Dispose() {
			ProxyQTextTable().Dispose();
		}
	}
}
