//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QItemEditorFactory : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QItemEditorFactory(Type dummy) {}
		interface IQItemEditorFactoryProxy {
			QItemEditorFactory DefaultFactory();
			void SetDefaultFactory(QItemEditorFactory factory);
		}

		protected void CreateQItemEditorFactoryProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QItemEditorFactory), this);
			_interceptor = (QItemEditorFactory) realProxy.GetTransparentProxy();
		}
		private QItemEditorFactory ProxyQItemEditorFactory() {
			return (QItemEditorFactory) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QItemEditorFactory() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQItemEditorFactoryProxy), null);
			_staticInterceptor = (IQItemEditorFactoryProxy) realProxy.GetTransparentProxy();
		}
		private static IQItemEditorFactoryProxy StaticQItemEditorFactory() {
			return (IQItemEditorFactoryProxy) _staticInterceptor;
		}

		public QItemEditorFactory() : this((Type) null) {
			CreateQItemEditorFactoryProxy();
			NewQItemEditorFactory();
		}
		private void NewQItemEditorFactory() {
			ProxyQItemEditorFactory().NewQItemEditorFactory();
		}
		public virtual QWidget CreateEditor(int type, QWidget parent) {
			return ProxyQItemEditorFactory().CreateEditor(type,parent);
		}
		public virtual QByteArray ValuePropertyName(int type) {
			return ProxyQItemEditorFactory().ValuePropertyName(type);
		}
		public void RegisterEditor(int type, QItemEditorCreatorBase creator) {
			ProxyQItemEditorFactory().RegisterEditor(type,creator);
		}
		public static QItemEditorFactory DefaultFactory() {
			return StaticQItemEditorFactory().DefaultFactory();
		}
		public static void SetDefaultFactory(QItemEditorFactory factory) {
			StaticQItemEditorFactory().SetDefaultFactory(factory);
		}
		~QItemEditorFactory() {
			ProxyQItemEditorFactory().Dispose();
		}
		public void Dispose() {
			ProxyQItemEditorFactory().Dispose();
		}
	}
}
