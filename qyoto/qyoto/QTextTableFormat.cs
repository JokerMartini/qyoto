//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	[SmokeClass("QTextTableFormat")]
	public class QTextTableFormat : QTextFrameFormat, IDisposable {
 		protected QTextTableFormat(Type dummy) : base((Type) null) {}
		interface IQTextTableFormatProxy {
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTextTableFormat), this);
			_interceptor = (QTextTableFormat) realProxy.GetTransparentProxy();
		}
		private QTextTableFormat ProxyQTextTableFormat() {
			return (QTextTableFormat) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QTextTableFormat() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQTextTableFormatProxy), null);
			_staticInterceptor = (IQTextTableFormatProxy) realProxy.GetTransparentProxy();
		}
		private static IQTextTableFormatProxy StaticQTextTableFormat() {
			return (IQTextTableFormatProxy) _staticInterceptor;
		}

		public QTextTableFormat() : this((Type) null) {
			CreateProxy();
			NewQTextTableFormat();
		}
		[SmokeMethod("QTextTableFormat()")]
		private void NewQTextTableFormat() {
			ProxyQTextTableFormat().NewQTextTableFormat();
		}
		[SmokeMethod("isValid() const")]
		public new bool IsValid() {
			return ProxyQTextTableFormat().IsValid();
		}
		[SmokeMethod("columns() const")]
		public int Columns() {
			return ProxyQTextTableFormat().Columns();
		}
		[SmokeMethod("setColumns(int)")]
		public void SetColumns(int columns) {
			ProxyQTextTableFormat().SetColumns(columns);
		}
		// void setColumnWidthConstraints(const QVector<QTextLength>& arg1); >>>> NOT CONVERTED
		// QVector<QTextLength> columnWidthConstraints(); >>>> NOT CONVERTED
		[SmokeMethod("clearColumnWidthConstraints()")]
		public void ClearColumnWidthConstraints() {
			ProxyQTextTableFormat().ClearColumnWidthConstraints();
		}
		[SmokeMethod("cellSpacing() const")]
		public double CellSpacing() {
			return ProxyQTextTableFormat().CellSpacing();
		}
		[SmokeMethod("setCellSpacing(qreal)")]
		public void SetCellSpacing(double spacing) {
			ProxyQTextTableFormat().SetCellSpacing(spacing);
		}
		[SmokeMethod("cellPadding() const")]
		public double CellPadding() {
			return ProxyQTextTableFormat().CellPadding();
		}
		[SmokeMethod("setCellPadding(qreal)")]
		public void SetCellPadding(double padding) {
			ProxyQTextTableFormat().SetCellPadding(padding);
		}
		[SmokeMethod("setAlignment(Qt::Alignment)")]
		public void SetAlignment(int alignment) {
			ProxyQTextTableFormat().SetAlignment(alignment);
		}
		[SmokeMethod("alignment() const")]
		public int Alignment() {
			return ProxyQTextTableFormat().Alignment();
		}
		~QTextTableFormat() {
			DisposeQTextTableFormat();
		}
		public void Dispose() {
			DisposeQTextTableFormat();
		}
		private void DisposeQTextTableFormat() {
			ProxyQTextTableFormat().DisposeQTextTableFormat();
		}
	}
}
