//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QSize : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QSize(Type dummy) {}
		interface IQSizeProxy {
			QSize op_mult(QSize lhs, double c);
			QSize op_div(QSize lhs, double c);
		}

		protected void CreateQSizeProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSize), this);
			_interceptor = (QSize) realProxy.GetTransparentProxy();
		}
		private QSize ProxyQSize() {
			return (QSize) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QSize() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSizeProxy), null);
			_staticInterceptor = (IQSizeProxy) realProxy.GetTransparentProxy();
		}
		private static IQSizeProxy StaticQSize() {
			return (IQSizeProxy) _staticInterceptor;
		}

		public QSize() : this((Type) null) {
			CreateQSizeProxy();
			NewQSize();
		}
		private void NewQSize() {
			ProxyQSize().NewQSize();
		}
		public QSize(int w, int h) : this((Type) null) {
			CreateQSizeProxy();
			NewQSize(w,h);
		}
		private void NewQSize(int w, int h) {
			ProxyQSize().NewQSize(w,h);
		}
		public bool IsNull() {
			return ProxyQSize().IsNull();
		}
		public bool IsEmpty() {
			return ProxyQSize().IsEmpty();
		}
		public bool IsValid() {
			return ProxyQSize().IsValid();
		}
		public int Width() {
			return ProxyQSize().Width();
		}
		public int Height() {
			return ProxyQSize().Height();
		}
		public void SetWidth(int w) {
			ProxyQSize().SetWidth(w);
		}
		public void SetHeight(int h) {
			ProxyQSize().SetHeight(h);
		}
		public void Transpose() {
			ProxyQSize().Transpose();
		}
		public void Scale(int w, int h, int mode) {
			ProxyQSize().Scale(w,h,mode);
		}
		public void Scale(QSize s, int mode) {
			ProxyQSize().Scale(s,mode);
		}
		public QSize ExpandedTo(QSize arg1) {
			return ProxyQSize().ExpandedTo(arg1);
		}
		public QSize BoundedTo(QSize arg1) {
			return ProxyQSize().BoundedTo(arg1);
		}
		public int Rwidth() {
			return ProxyQSize().Rwidth();
		}
		public int Rheight() {
			return ProxyQSize().Rheight();
		}
		public static QSize operator*(QSize lhs, double c) {
			return StaticQSize().op_mult(lhs,c);
		}
		public static QSize operator/(QSize lhs, double c) {
			return StaticQSize().op_div(lhs,c);
		}
		~QSize() {
			ProxyQSize().Dispose();
		}
		public void Dispose() {
			ProxyQSize().Dispose();
		}
	}
}
