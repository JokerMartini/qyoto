//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Collections;
	using System.Text;

	/// See <see cref="IQAbstractItemModelSignals"></see> for signals emitted by QAbstractItemModel
	public class QAbstractItemModel : QObject {
 		protected QAbstractItemModel(Type dummy) : base((Type) null) {}
		interface IQAbstractItemModelProxy {
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected void CreateQAbstractItemModelProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QAbstractItemModel), this);
			_interceptor = (QAbstractItemModel) realProxy.GetTransparentProxy();
		}
		private QAbstractItemModel ProxyQAbstractItemModel() {
			return (QAbstractItemModel) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QAbstractItemModel() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQAbstractItemModelProxy), null);
			_staticInterceptor = (IQAbstractItemModelProxy) realProxy.GetTransparentProxy();
		}
		private static IQAbstractItemModelProxy StaticQAbstractItemModel() {
			return (IQAbstractItemModelProxy) _staticInterceptor;
		}

		public new virtual QMetaObject MetaObject() {
			return ProxyQAbstractItemModel().MetaObject();
		}
		// void* qt_metacast(const char* arg1); >>>> NOT CONVERTED
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public bool HasIndex(int row, int column, QModelIndex parent) {
			return ProxyQAbstractItemModel().HasIndex(row,column,parent);
		}
		public bool HasIndex(int row, int column) {
			return ProxyQAbstractItemModel().HasIndex(row,column);
		}
		public virtual QModelIndex Index(int row, int column, QModelIndex parent) {
			return ProxyQAbstractItemModel().Index(row,column,parent);
		}
		public virtual QModelIndex Index(int row, int column) {
			return ProxyQAbstractItemModel().Index(row,column);
		}
		public new virtual QModelIndex Parent(QModelIndex child) {
			return ProxyQAbstractItemModel().Parent(child);
		}
		public QModelIndex Sibling(int row, int column, QModelIndex idx) {
			return ProxyQAbstractItemModel().Sibling(row,column,idx);
		}
		public virtual int RowCount(QModelIndex parent) {
			return ProxyQAbstractItemModel().RowCount(parent);
		}
		public virtual int RowCount() {
			return ProxyQAbstractItemModel().RowCount();
		}
		public virtual int ColumnCount(QModelIndex parent) {
			return ProxyQAbstractItemModel().ColumnCount(parent);
		}
		public virtual int ColumnCount() {
			return ProxyQAbstractItemModel().ColumnCount();
		}
		public virtual bool HasChildren(QModelIndex parent) {
			return ProxyQAbstractItemModel().HasChildren(parent);
		}
		public virtual bool HasChildren() {
			return ProxyQAbstractItemModel().HasChildren();
		}
		public virtual QVariant Data(QModelIndex index, int role) {
			return ProxyQAbstractItemModel().Data(index,role);
		}
		public virtual QVariant Data(QModelIndex index) {
			return ProxyQAbstractItemModel().Data(index);
		}
		public virtual bool SetData(QModelIndex index, QVariant value, int role) {
			return ProxyQAbstractItemModel().SetData(index,value,role);
		}
		public virtual bool SetData(QModelIndex index, QVariant value) {
			return ProxyQAbstractItemModel().SetData(index,value);
		}
		public virtual QVariant HeaderData(int section, int orientation, int role) {
			return ProxyQAbstractItemModel().HeaderData(section,orientation,role);
		}
		public virtual QVariant HeaderData(int section, int orientation) {
			return ProxyQAbstractItemModel().HeaderData(section,orientation);
		}
		public virtual bool SetHeaderData(int section, int orientation, QVariant value, int role) {
			return ProxyQAbstractItemModel().SetHeaderData(section,orientation,value,role);
		}
		public virtual bool SetHeaderData(int section, int orientation, QVariant value) {
			return ProxyQAbstractItemModel().SetHeaderData(section,orientation,value);
		}
		// QMap<int, QVariant> itemData(const QModelIndex& arg1); >>>> NOT CONVERTED
		// bool setItemData(const QModelIndex& arg1,const QMap<int, QVariant>& arg2); >>>> NOT CONVERTED
		public virtual ArrayList MimeTypes() {
			return ProxyQAbstractItemModel().MimeTypes();
		}
		// QMimeData* mimeData(const QModelIndexList& arg1); >>>> NOT CONVERTED
		public virtual bool DropMimeData(QMimeData data, int action, int row, int column, QModelIndex parent) {
			return ProxyQAbstractItemModel().DropMimeData(data,action,row,column,parent);
		}
		public virtual int SupportedDropActions() {
			return ProxyQAbstractItemModel().SupportedDropActions();
		}
		public virtual bool InsertRows(int row, int count, QModelIndex parent) {
			return ProxyQAbstractItemModel().InsertRows(row,count,parent);
		}
		public virtual bool InsertRows(int row, int count) {
			return ProxyQAbstractItemModel().InsertRows(row,count);
		}
		public virtual bool InsertColumns(int column, int count, QModelIndex parent) {
			return ProxyQAbstractItemModel().InsertColumns(column,count,parent);
		}
		public virtual bool InsertColumns(int column, int count) {
			return ProxyQAbstractItemModel().InsertColumns(column,count);
		}
		public virtual bool RemoveRows(int row, int count, QModelIndex parent) {
			return ProxyQAbstractItemModel().RemoveRows(row,count,parent);
		}
		public virtual bool RemoveRows(int row, int count) {
			return ProxyQAbstractItemModel().RemoveRows(row,count);
		}
		public virtual bool RemoveColumns(int column, int count, QModelIndex parent) {
			return ProxyQAbstractItemModel().RemoveColumns(column,count,parent);
		}
		public virtual bool RemoveColumns(int column, int count) {
			return ProxyQAbstractItemModel().RemoveColumns(column,count);
		}
		public bool InsertRow(int row, QModelIndex parent) {
			return ProxyQAbstractItemModel().InsertRow(row,parent);
		}
		public bool InsertRow(int row) {
			return ProxyQAbstractItemModel().InsertRow(row);
		}
		public bool InsertColumn(int column, QModelIndex parent) {
			return ProxyQAbstractItemModel().InsertColumn(column,parent);
		}
		public bool InsertColumn(int column) {
			return ProxyQAbstractItemModel().InsertColumn(column);
		}
		public bool RemoveRow(int row, QModelIndex parent) {
			return ProxyQAbstractItemModel().RemoveRow(row,parent);
		}
		public bool RemoveRow(int row) {
			return ProxyQAbstractItemModel().RemoveRow(row);
		}
		public bool RemoveColumn(int column, QModelIndex parent) {
			return ProxyQAbstractItemModel().RemoveColumn(column,parent);
		}
		public bool RemoveColumn(int column) {
			return ProxyQAbstractItemModel().RemoveColumn(column);
		}
		public virtual void FetchMore(QModelIndex parent) {
			ProxyQAbstractItemModel().FetchMore(parent);
		}
		public virtual bool CanFetchMore(QModelIndex parent) {
			return ProxyQAbstractItemModel().CanFetchMore(parent);
		}
		public virtual int Flags(QModelIndex index) {
			return ProxyQAbstractItemModel().Flags(index);
		}
		public virtual void Sort(int column, int order) {
			ProxyQAbstractItemModel().Sort(column,order);
		}
		public virtual void Sort(int column) {
			ProxyQAbstractItemModel().Sort(column);
		}
		public virtual QModelIndex Buddy(QModelIndex index) {
			return ProxyQAbstractItemModel().Buddy(index);
		}
		// QModelIndexList match(const QModelIndex& arg1,int arg2,const QVariant& arg3,int arg4,Qt::MatchFlags arg5); >>>> NOT CONVERTED
		// QModelIndexList match(const QModelIndex& arg1,int arg2,const QVariant& arg3,int arg4); >>>> NOT CONVERTED
		// QModelIndexList match(const QModelIndex& arg1,int arg2,const QVariant& arg3); >>>> NOT CONVERTED
		public virtual QSize Span(QModelIndex index) {
			return ProxyQAbstractItemModel().Span(index);
		}
		public virtual bool Submit() {
			return ProxyQAbstractItemModel().Submit();
		}
		public virtual void Revert() {
			ProxyQAbstractItemModel().Revert();
		}
		public static new string Tr(string s, string c) {
			return StaticQAbstractItemModel().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQAbstractItemModel().Tr(s);
		}
	}

	public interface IQAbstractItemModelSignals {
		void DataChanged(QModelIndex topLeft, QModelIndex bottomRight);
		void HeaderDataChanged(int orientation, int first, int last);
		void LayoutChanged();
	}
}
