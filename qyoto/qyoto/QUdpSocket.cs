//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QUdpSocket : QAbstractSocket, IDisposable {
 		protected QUdpSocket(Type dummy) : base((Type) null) {}
		interface IQUdpSocketProxy {
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected void CreateQUdpSocketProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QUdpSocket), this);
			_interceptor = (QUdpSocket) realProxy.GetTransparentProxy();
		}
		private QUdpSocket ProxyQUdpSocket() {
			return (QUdpSocket) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QUdpSocket() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQUdpSocketProxy), null);
			_staticInterceptor = (IQUdpSocketProxy) realProxy.GetTransparentProxy();
		}
		private static IQUdpSocketProxy StaticQUdpSocket() {
			return (IQUdpSocketProxy) _staticInterceptor;
		}

		public new virtual QMetaObject MetaObject() {
			return ProxyQUdpSocket().MetaObject();
		}
		// void* qt_metacast(const char* arg1); >>>> NOT CONVERTED
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QUdpSocket(QObject parent) : this((Type) null) {
			CreateQUdpSocketProxy();
			NewQUdpSocket(parent);
		}
		private void NewQUdpSocket(QObject parent) {
			ProxyQUdpSocket().NewQUdpSocket(parent);
		}
		public QUdpSocket() : this((Type) null) {
			CreateQUdpSocketProxy();
			NewQUdpSocket();
		}
		private void NewQUdpSocket() {
			ProxyQUdpSocket().NewQUdpSocket();
		}
		public bool Bind(QHostAddress address, ushort port) {
			return ProxyQUdpSocket().Bind(address,port);
		}
		public bool Bind(ushort port) {
			return ProxyQUdpSocket().Bind(port);
		}
		public bool Bind() {
			return ProxyQUdpSocket().Bind();
		}
		public bool HasPendingDatagrams() {
			return ProxyQUdpSocket().HasPendingDatagrams();
		}
		// qint64 pendingDatagramSize(); >>>> NOT CONVERTED
		// qint64 readDatagram(char* arg1,qint64 arg2,QHostAddress* arg3,quint16* arg4); >>>> NOT CONVERTED
		// qint64 readDatagram(char* arg1,qint64 arg2,QHostAddress* arg3); >>>> NOT CONVERTED
		// qint64 readDatagram(char* arg1,qint64 arg2); >>>> NOT CONVERTED
		// qint64 writeDatagram(const char* arg1,qint64 arg2,const QHostAddress& arg3,quint16 arg4); >>>> NOT CONVERTED
		// qint64 writeDatagram(const QByteArray& arg1,const QHostAddress& arg2,quint16 arg3); >>>> NOT CONVERTED
		public static new string Tr(string s, string c) {
			return StaticQUdpSocket().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQUdpSocket().Tr(s);
		}
		~QUdpSocket() {
			ProxyQUdpSocket().Dispose();
		}
		public new void Dispose() {
			ProxyQUdpSocket().Dispose();
		}
	}
}
