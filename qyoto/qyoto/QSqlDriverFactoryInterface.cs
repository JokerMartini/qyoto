//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QSqlDriverFactoryInterface : QFactoryInterface {
 		protected QSqlDriverFactoryInterface(Type dummy) : base((Type) null) {}
		interface IQSqlDriverFactoryInterfaceProxy {
		}

		protected void CreateQSqlDriverFactoryInterfaceProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSqlDriverFactoryInterface), this);
			_interceptor = (QSqlDriverFactoryInterface) realProxy.GetTransparentProxy();
		}
		private QSqlDriverFactoryInterface ProxyQSqlDriverFactoryInterface() {
			return (QSqlDriverFactoryInterface) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QSqlDriverFactoryInterface() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSqlDriverFactoryInterfaceProxy), null);
			_staticInterceptor = (IQSqlDriverFactoryInterfaceProxy) realProxy.GetTransparentProxy();
		}
		private static IQSqlDriverFactoryInterfaceProxy StaticQSqlDriverFactoryInterface() {
			return (IQSqlDriverFactoryInterfaceProxy) _staticInterceptor;
		}

		public virtual QSqlDriver Create(string name) {
			return ProxyQSqlDriverFactoryInterface().Create(name);
		}
	}
}
