//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QTextCharFormat : QTextFormat, IDisposable {
 		protected QTextCharFormat(Type dummy) : base((Type) null) {}
		interface IQTextCharFormatProxy {
		}

		protected void CreateQTextCharFormatProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTextCharFormat), this);
			_interceptor = (QTextCharFormat) realProxy.GetTransparentProxy();
		}
		private QTextCharFormat ProxyQTextCharFormat() {
			return (QTextCharFormat) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QTextCharFormat() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQTextCharFormatProxy), null);
			_staticInterceptor = (IQTextCharFormatProxy) realProxy.GetTransparentProxy();
		}
		private static IQTextCharFormatProxy StaticQTextCharFormat() {
			return (IQTextCharFormatProxy) _staticInterceptor;
		}

		enum E_VerticalAlignment {
			AlignNormal = 0,
			AlignSuperScript = 1,
			AlignSubScript = 2,
		}
		public QTextCharFormat() : this((Type) null) {
			CreateQTextCharFormatProxy();
			NewQTextCharFormat();
		}
		private void NewQTextCharFormat() {
			ProxyQTextCharFormat().NewQTextCharFormat();
		}
		public new bool IsValid() {
			return ProxyQTextCharFormat().IsValid();
		}
		public void SetFont(QFont font) {
			ProxyQTextCharFormat().SetFont(font);
		}
		public QFont Font() {
			return ProxyQTextCharFormat().Font();
		}
		public void SetFontFamily(string family) {
			ProxyQTextCharFormat().SetFontFamily(family);
		}
		public string FontFamily() {
			return ProxyQTextCharFormat().FontFamily();
		}
		public void SetFontPointSize(double size) {
			ProxyQTextCharFormat().SetFontPointSize(size);
		}
		public double FontPointSize() {
			return ProxyQTextCharFormat().FontPointSize();
		}
		public void SetFontWeight(int weight) {
			ProxyQTextCharFormat().SetFontWeight(weight);
		}
		public int FontWeight() {
			return ProxyQTextCharFormat().FontWeight();
		}
		public void SetFontItalic(bool italic) {
			ProxyQTextCharFormat().SetFontItalic(italic);
		}
		public bool FontItalic() {
			return ProxyQTextCharFormat().FontItalic();
		}
		public void SetFontUnderline(bool underline) {
			ProxyQTextCharFormat().SetFontUnderline(underline);
		}
		public bool FontUnderline() {
			return ProxyQTextCharFormat().FontUnderline();
		}
		public void SetFontOverline(bool overline) {
			ProxyQTextCharFormat().SetFontOverline(overline);
		}
		public bool FontOverline() {
			return ProxyQTextCharFormat().FontOverline();
		}
		public void SetFontStrikeOut(bool strikeOut) {
			ProxyQTextCharFormat().SetFontStrikeOut(strikeOut);
		}
		public bool FontStrikeOut() {
			return ProxyQTextCharFormat().FontStrikeOut();
		}
		public void SetUnderlineColor(QColor color) {
			ProxyQTextCharFormat().SetUnderlineColor(color);
		}
		public QColor UnderlineColor() {
			return ProxyQTextCharFormat().UnderlineColor();
		}
		public void SetFontFixedPitch(bool fixedPitch) {
			ProxyQTextCharFormat().SetFontFixedPitch(fixedPitch);
		}
		public bool FontFixedPitch() {
			return ProxyQTextCharFormat().FontFixedPitch();
		}
		public void SetVerticalAlignment(int alignment) {
			ProxyQTextCharFormat().SetVerticalAlignment(alignment);
		}
		public int VerticalAlignment() {
			return ProxyQTextCharFormat().VerticalAlignment();
		}
		public void SetAnchor(bool anchor) {
			ProxyQTextCharFormat().SetAnchor(anchor);
		}
		public bool IsAnchor() {
			return ProxyQTextCharFormat().IsAnchor();
		}
		public void SetAnchorHref(string value) {
			ProxyQTextCharFormat().SetAnchorHref(value);
		}
		public string AnchorHref() {
			return ProxyQTextCharFormat().AnchorHref();
		}
		public void SetAnchorName(string name) {
			ProxyQTextCharFormat().SetAnchorName(name);
		}
		public string AnchorName() {
			return ProxyQTextCharFormat().AnchorName();
		}
		public void SetTableCellRowSpan(int tableCellRowSpan) {
			ProxyQTextCharFormat().SetTableCellRowSpan(tableCellRowSpan);
		}
		public int TableCellRowSpan() {
			return ProxyQTextCharFormat().TableCellRowSpan();
		}
		public void SetTableCellColumnSpan(int tableCellColumnSpan) {
			ProxyQTextCharFormat().SetTableCellColumnSpan(tableCellColumnSpan);
		}
		public int TableCellColumnSpan() {
			return ProxyQTextCharFormat().TableCellColumnSpan();
		}
		~QTextCharFormat() {
			ProxyQTextCharFormat().Dispose();
		}
		public void Dispose() {
			ProxyQTextCharFormat().Dispose();
		}
	}
}
