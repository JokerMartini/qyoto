//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QMotifStyle : QCommonStyle, IDisposable {
 		protected QMotifStyle(Type dummy) : base((Type) null) {}
		interface IQMotifStyleProxy {
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected void CreateQMotifStyleProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QMotifStyle), this);
			_interceptor = (QMotifStyle) realProxy.GetTransparentProxy();
		}
		private QMotifStyle ProxyQMotifStyle() {
			return (QMotifStyle) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QMotifStyle() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQMotifStyleProxy), null);
			_staticInterceptor = (IQMotifStyleProxy) realProxy.GetTransparentProxy();
		}
		private static IQMotifStyleProxy StaticQMotifStyle() {
			return (IQMotifStyleProxy) _staticInterceptor;
		}

		public new virtual QMetaObject MetaObject() {
			return ProxyQMotifStyle().MetaObject();
		}
		// void* qt_metacast(const char* arg1); >>>> NOT CONVERTED
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QMotifStyle(bool useHighlightCols) : this((Type) null) {
			CreateQMotifStyleProxy();
			NewQMotifStyle(useHighlightCols);
		}
		private void NewQMotifStyle(bool useHighlightCols) {
			ProxyQMotifStyle().NewQMotifStyle(useHighlightCols);
		}
		public QMotifStyle() : this((Type) null) {
			CreateQMotifStyleProxy();
			NewQMotifStyle();
		}
		private void NewQMotifStyle() {
			ProxyQMotifStyle().NewQMotifStyle();
		}
		public void SetUseHighlightColors(bool arg1) {
			ProxyQMotifStyle().SetUseHighlightColors(arg1);
		}
		public bool UseHighlightColors() {
			return ProxyQMotifStyle().UseHighlightColors();
		}
		public new void Polish(QPalette arg1) {
			ProxyQMotifStyle().Polish(arg1);
		}
		public new void Polish(QWidget arg1) {
			ProxyQMotifStyle().Polish(arg1);
		}
		public new void Polish(QApplication arg1) {
			ProxyQMotifStyle().Polish(arg1);
		}
		public new void DrawPrimitive(int pe, out int opt, QPainter p, QWidget w) {
			ProxyQMotifStyle().DrawPrimitive(pe,out opt,p,w);
		}
		public new void DrawPrimitive(int pe, out int opt, QPainter p) {
			ProxyQMotifStyle().DrawPrimitive(pe,out opt,p);
		}
		public new void DrawControl(int element, out int opt, QPainter p, QWidget w) {
			ProxyQMotifStyle().DrawControl(element,out opt,p,w);
		}
		public new void DrawControl(int element, out int opt, QPainter p) {
			ProxyQMotifStyle().DrawControl(element,out opt,p);
		}
		public new void DrawComplexControl(int cc, QStyleOptionComplex opt, QPainter p, QWidget w) {
			ProxyQMotifStyle().DrawComplexControl(cc,opt,p,w);
		}
		public new void DrawComplexControl(int cc, QStyleOptionComplex opt, QPainter p) {
			ProxyQMotifStyle().DrawComplexControl(cc,opt,p);
		}
		public new QRect SubControlRect(int cc, QStyleOptionComplex opt, int sc, QWidget widget) {
			return ProxyQMotifStyle().SubControlRect(cc,opt,sc,widget);
		}
		public new QRect SubControlRect(int cc, QStyleOptionComplex opt, int sc) {
			return ProxyQMotifStyle().SubControlRect(cc,opt,sc);
		}
		public new int PixelMetric(int metric, out int option, QWidget widget) {
			return ProxyQMotifStyle().PixelMetric(metric,out option,widget);
		}
		public new int PixelMetric(int metric, out int option) {
			return ProxyQMotifStyle().PixelMetric(metric,out option);
		}
		public new int PixelMetric(int metric) {
			return ProxyQMotifStyle().PixelMetric(metric);
		}
		public new QSize SizeFromContents(int ct, out int opt, QSize contentsSize, QWidget widget) {
			return ProxyQMotifStyle().SizeFromContents(ct,out opt,contentsSize,widget);
		}
		public new QSize SizeFromContents(int ct, out int opt, QSize contentsSize) {
			return ProxyQMotifStyle().SizeFromContents(ct,out opt,contentsSize);
		}
		public new QRect SubElementRect(int r, out int opt, QWidget widget) {
			return ProxyQMotifStyle().SubElementRect(r,out opt,widget);
		}
		public new QRect SubElementRect(int r, out int opt) {
			return ProxyQMotifStyle().SubElementRect(r,out opt);
		}
		public new QPixmap StandardPixmap(int standardPixmap, out int opt, QWidget widget) {
			return ProxyQMotifStyle().StandardPixmap(standardPixmap,out opt,widget);
		}
		public new QPixmap StandardPixmap(int standardPixmap, out int opt) {
			return ProxyQMotifStyle().StandardPixmap(standardPixmap,out opt);
		}
		public new int StyleHint(int hint, out int opt, QWidget widget, QStyleHintReturn returnData) {
			return ProxyQMotifStyle().StyleHint(hint,out opt,widget,returnData);
		}
		public new int StyleHint(int hint, out int opt, QWidget widget) {
			return ProxyQMotifStyle().StyleHint(hint,out opt,widget);
		}
		public new int StyleHint(int hint, out int opt) {
			return ProxyQMotifStyle().StyleHint(hint,out opt);
		}
		public new int StyleHint(int hint) {
			return ProxyQMotifStyle().StyleHint(hint);
		}
		public new bool Event(QEvent arg1) {
			return ProxyQMotifStyle().Event(arg1);
		}
		public new QPalette StandardPalette() {
			return ProxyQMotifStyle().StandardPalette();
		}
		public static new string Tr(string s, string c) {
			return StaticQMotifStyle().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQMotifStyle().Tr(s);
		}
		~QMotifStyle() {
			ProxyQMotifStyle().Dispose();
		}
		public new void Dispose() {
			ProxyQMotifStyle().Dispose();
		}
	}
}
