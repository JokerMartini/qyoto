//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	[SmokeClass("QMotifStyle")]
	public class QMotifStyle : QCommonStyle, IDisposable {
 		protected QMotifStyle(Type dummy) : base((Type) null) {}
		interface IQMotifStyleProxy {
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QMotifStyle), this);
			_interceptor = (QMotifStyle) realProxy.GetTransparentProxy();
		}
		private QMotifStyle ProxyQMotifStyle() {
			return (QMotifStyle) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QMotifStyle() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQMotifStyleProxy), null);
			_staticInterceptor = (IQMotifStyleProxy) realProxy.GetTransparentProxy();
		}
		private static IQMotifStyleProxy StaticQMotifStyle() {
			return (IQMotifStyleProxy) _staticInterceptor;
		}

		[SmokeMethod("metaObject() const")]
		public new virtual QMetaObject MetaObject() {
			return ProxyQMotifStyle().MetaObject();
		}
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QMotifStyle(bool useHighlightCols) : this((Type) null) {
			CreateProxy();
			NewQMotifStyle(useHighlightCols);
		}
		[SmokeMethod("QMotifStyle(bool)")]
		private void NewQMotifStyle(bool useHighlightCols) {
			ProxyQMotifStyle().NewQMotifStyle(useHighlightCols);
		}
		public QMotifStyle() : this((Type) null) {
			CreateProxy();
			NewQMotifStyle();
		}
		[SmokeMethod("QMotifStyle()")]
		private void NewQMotifStyle() {
			ProxyQMotifStyle().NewQMotifStyle();
		}
		[SmokeMethod("setUseHighlightColors(bool)")]
		public void SetUseHighlightColors(bool arg1) {
			ProxyQMotifStyle().SetUseHighlightColors(arg1);
		}
		[SmokeMethod("useHighlightColors() const")]
		public bool UseHighlightColors() {
			return ProxyQMotifStyle().UseHighlightColors();
		}
		[SmokeMethod("polish(QPalette&)")]
		public new void Polish(QPalette arg1) {
			ProxyQMotifStyle().Polish(arg1);
		}
		[SmokeMethod("polish(QWidget*)")]
		public new void Polish(QWidget arg1) {
			ProxyQMotifStyle().Polish(arg1);
		}
		[SmokeMethod("unpolish(QWidget*)")]
		public new void Unpolish(QWidget arg1) {
			ProxyQMotifStyle().Unpolish(arg1);
		}
		[SmokeMethod("polish(QApplication*)")]
		public new void Polish(QApplication arg1) {
			ProxyQMotifStyle().Polish(arg1);
		}
		[SmokeMethod("unpolish(QApplication*)")]
		public new void Unpolish(QApplication arg1) {
			ProxyQMotifStyle().Unpolish(arg1);
		}
		[SmokeMethod("drawPrimitive(QStyle::PrimitiveElement, const QStyleOption*, QPainter*, const QWidget*) const")]
		public new void DrawPrimitive(QStyle.PrimitiveElement pe, out int opt, QPainter p, QWidget w) {
			ProxyQMotifStyle().DrawPrimitive(pe,out opt,p,w);
		}
		[SmokeMethod("drawPrimitive(QStyle::PrimitiveElement, const QStyleOption*, QPainter*) const")]
		public new void DrawPrimitive(QStyle.PrimitiveElement pe, out int opt, QPainter p) {
			ProxyQMotifStyle().DrawPrimitive(pe,out opt,p);
		}
		[SmokeMethod("drawControl(QStyle::ControlElement, const QStyleOption*, QPainter*, const QWidget*) const")]
		public new void DrawControl(QStyle.ControlElement element, out int opt, QPainter p, QWidget w) {
			ProxyQMotifStyle().DrawControl(element,out opt,p,w);
		}
		[SmokeMethod("drawControl(QStyle::ControlElement, const QStyleOption*, QPainter*) const")]
		public new void DrawControl(QStyle.ControlElement element, out int opt, QPainter p) {
			ProxyQMotifStyle().DrawControl(element,out opt,p);
		}
		[SmokeMethod("drawComplexControl(QStyle::ComplexControl, const QStyleOptionComplex*, QPainter*, const QWidget*) const")]
		public new void DrawComplexControl(QStyle.ComplexControl cc, QStyleOptionComplex opt, QPainter p, QWidget w) {
			ProxyQMotifStyle().DrawComplexControl(cc,opt,p,w);
		}
		[SmokeMethod("drawComplexControl(QStyle::ComplexControl, const QStyleOptionComplex*, QPainter*) const")]
		public new void DrawComplexControl(QStyle.ComplexControl cc, QStyleOptionComplex opt, QPainter p) {
			ProxyQMotifStyle().DrawComplexControl(cc,opt,p);
		}
		[SmokeMethod("subControlRect(QStyle::ComplexControl, const QStyleOptionComplex*, QStyle::SubControl, const QWidget*) const")]
		public new QRect SubControlRect(QStyle.ComplexControl cc, QStyleOptionComplex opt, QStyle.SubControl sc, QWidget widget) {
			return ProxyQMotifStyle().SubControlRect(cc,opt,sc,widget);
		}
		[SmokeMethod("subControlRect(QStyle::ComplexControl, const QStyleOptionComplex*, QStyle::SubControl) const")]
		public new QRect SubControlRect(QStyle.ComplexControl cc, QStyleOptionComplex opt, QStyle.SubControl sc) {
			return ProxyQMotifStyle().SubControlRect(cc,opt,sc);
		}
		[SmokeMethod("pixelMetric(QStyle::PixelMetric, const QStyleOption*, const QWidget*) const")]
		public new int PixelMetric(QStyle.PixelMetric metric, out int option, QWidget widget) {
			return ProxyQMotifStyle().PixelMetric(metric,out option,widget);
		}
		[SmokeMethod("pixelMetric(QStyle::PixelMetric, const QStyleOption*) const")]
		public new int PixelMetric(QStyle.PixelMetric metric, out int option) {
			return ProxyQMotifStyle().PixelMetric(metric,out option);
		}
		[SmokeMethod("pixelMetric(QStyle::PixelMetric) const")]
		public new int PixelMetric(QStyle.PixelMetric metric) {
			return ProxyQMotifStyle().PixelMetric(metric);
		}
		[SmokeMethod("sizeFromContents(QStyle::ContentsType, const QStyleOption*, const QSize&, const QWidget*) const")]
		public new QSize SizeFromContents(QStyle.ContentsType ct, out int opt, QSize contentsSize, QWidget widget) {
			return ProxyQMotifStyle().SizeFromContents(ct,out opt,contentsSize,widget);
		}
		[SmokeMethod("sizeFromContents(QStyle::ContentsType, const QStyleOption*, const QSize&) const")]
		public new QSize SizeFromContents(QStyle.ContentsType ct, out int opt, QSize contentsSize) {
			return ProxyQMotifStyle().SizeFromContents(ct,out opt,contentsSize);
		}
		[SmokeMethod("subElementRect(QStyle::SubElement, const QStyleOption*, const QWidget*) const")]
		public new QRect SubElementRect(QStyle.SubElement r, out int opt, QWidget widget) {
			return ProxyQMotifStyle().SubElementRect(r,out opt,widget);
		}
		[SmokeMethod("subElementRect(QStyle::SubElement, const QStyleOption*) const")]
		public new QRect SubElementRect(QStyle.SubElement r, out int opt) {
			return ProxyQMotifStyle().SubElementRect(r,out opt);
		}
		[SmokeMethod("standardPixmap(QStyle::StandardPixmap, const QStyleOption*, const QWidget*) const")]
		public new QPixmap StandardPixmap(QStyle.StandardPixmap standardPixmap, out int opt, QWidget widget) {
			return ProxyQMotifStyle().StandardPixmap(standardPixmap,out opt,widget);
		}
		[SmokeMethod("standardPixmap(QStyle::StandardPixmap, const QStyleOption*) const")]
		public new QPixmap StandardPixmap(QStyle.StandardPixmap standardPixmap, out int opt) {
			return ProxyQMotifStyle().StandardPixmap(standardPixmap,out opt);
		}
		[SmokeMethod("styleHint(QStyle::StyleHint, const QStyleOption*, const QWidget*, QStyleHintReturn*) const")]
		public new int StyleHint(QStyle.StyleHint hint, out int opt, QWidget widget, QStyleHintReturn returnData) {
			return ProxyQMotifStyle().StyleHint(hint,out opt,widget,returnData);
		}
		[SmokeMethod("styleHint(QStyle::StyleHint, const QStyleOption*, const QWidget*) const")]
		public new int StyleHint(QStyle.StyleHint hint, out int opt, QWidget widget) {
			return ProxyQMotifStyle().StyleHint(hint,out opt,widget);
		}
		[SmokeMethod("styleHint(QStyle::StyleHint, const QStyleOption*) const")]
		public new int StyleHint(QStyle.StyleHint hint, out int opt) {
			return ProxyQMotifStyle().StyleHint(hint,out opt);
		}
		[SmokeMethod("styleHint(QStyle::StyleHint) const")]
		public new int StyleHint(QStyle.StyleHint hint) {
			return ProxyQMotifStyle().StyleHint(hint);
		}
		[SmokeMethod("event(QEvent*)")]
		public new bool Event(QEvent arg1) {
			return ProxyQMotifStyle().Event(arg1);
		}
		[SmokeMethod("standardPalette() const")]
		public new QPalette StandardPalette() {
			return ProxyQMotifStyle().StandardPalette();
		}
		[SmokeMethod("tr(const char*, const char*)")]
		public static new string Tr(string s, string c) {
			return StaticQMotifStyle().Tr(s,c);
		}
		[SmokeMethod("tr(const char*)")]
		public static new string Tr(string s) {
			return StaticQMotifStyle().Tr(s);
		}
		[SmokeMethod("timerEvent(QTimerEvent*)")]
		protected new void TimerEvent(QTimerEvent arg1) {
			ProxyQMotifStyle().TimerEvent(arg1);
		}
		[SmokeMethod("eventFilter(QObject*, QEvent*)")]
		public new bool EventFilter(QObject o, QEvent e) {
			return ProxyQMotifStyle().EventFilter(o,e);
		}
		~QMotifStyle() {
			DisposeQMotifStyle();
		}
		public new void Dispose() {
			DisposeQMotifStyle();
		}
		private void DisposeQMotifStyle() {
			ProxyQMotifStyle().DisposeQMotifStyle();
		}
		protected new IQMotifStyleSignals Emit() {
			return (IQMotifStyleSignals) Q_EMIT;
		}
	}

	public interface IQMotifStyleSignals : IQCommonStyleSignals {
	}
}
