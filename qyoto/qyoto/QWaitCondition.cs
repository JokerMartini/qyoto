//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QWaitCondition : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QWaitCondition(Type dummy) {}
		interface IQWaitConditionProxy {
		}

		protected void CreateQWaitConditionProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QWaitCondition), this);
			_interceptor = (QWaitCondition) realProxy.GetTransparentProxy();
		}
		private QWaitCondition ProxyQWaitCondition() {
			return (QWaitCondition) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QWaitCondition() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQWaitConditionProxy), null);
			_staticInterceptor = (IQWaitConditionProxy) realProxy.GetTransparentProxy();
		}
		private static IQWaitConditionProxy StaticQWaitCondition() {
			return (IQWaitConditionProxy) _staticInterceptor;
		}

		public QWaitCondition() : this((Type) null) {
			CreateQWaitConditionProxy();
			NewQWaitCondition();
		}
		private void NewQWaitCondition() {
			ProxyQWaitCondition().NewQWaitCondition();
		}
		public bool Wait(QMutex mutex, ulong time) {
			return ProxyQWaitCondition().Wait(mutex,time);
		}
		public bool Wait(QMutex mutex) {
			return ProxyQWaitCondition().Wait(mutex);
		}
		public void WakeOne() {
			ProxyQWaitCondition().WakeOne();
		}
		public void WakeAll() {
			ProxyQWaitCondition().WakeAll();
		}
		~QWaitCondition() {
			ProxyQWaitCondition().Dispose();
		}
		public void Dispose() {
			ProxyQWaitCondition().Dispose();
		}
	}
}
