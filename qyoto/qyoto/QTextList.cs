//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QTextList : QTextBlockGroup, IDisposable {
 		protected QTextList(Type dummy) : base((Type) null) {}
		interface IQTextListProxy {
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected void CreateQTextListProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTextList), this);
			_interceptor = (QTextList) realProxy.GetTransparentProxy();
		}
		private QTextList ProxyQTextList() {
			return (QTextList) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QTextList() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQTextListProxy), null);
			_staticInterceptor = (IQTextListProxy) realProxy.GetTransparentProxy();
		}
		private static IQTextListProxy StaticQTextList() {
			return (IQTextListProxy) _staticInterceptor;
		}

		public new virtual QMetaObject MetaObject() {
			return ProxyQTextList().MetaObject();
		}
		// void* qt_metacast(const char* arg1); >>>> NOT CONVERTED
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		// QTextList* QTextList(QTextDocument* arg1); >>>> NOT CONVERTED
		public int Count() {
			return ProxyQTextList().Count();
		}
		public bool IsEmpty() {
			return ProxyQTextList().IsEmpty();
		}
		public QTextBlock Item(int i) {
			return ProxyQTextList().Item(i);
		}
		public int ItemNumber(QTextBlock arg1) {
			return ProxyQTextList().ItemNumber(arg1);
		}
		public string ItemText(QTextBlock arg1) {
			return ProxyQTextList().ItemText(arg1);
		}
		public void RemoveItem(int i) {
			ProxyQTextList().RemoveItem(i);
		}
		public void Remove(QTextBlock arg1) {
			ProxyQTextList().Remove(arg1);
		}
		public void Add(QTextBlock block) {
			ProxyQTextList().Add(block);
		}
		public new void SetFormat(QTextListFormat format) {
			ProxyQTextList().SetFormat(format);
		}
		public new QTextListFormat Format() {
			return ProxyQTextList().Format();
		}
		public static new string Tr(string s, string c) {
			return StaticQTextList().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQTextList().Tr(s);
		}
		~QTextList() {
			ProxyQTextList().Dispose();
		}
		public new void Dispose() {
			ProxyQTextList().Dispose();
		}
	}
}
