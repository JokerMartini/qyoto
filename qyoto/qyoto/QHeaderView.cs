//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	/// See <see cref="IQHeaderViewSignals"></see> for signals emitted by QHeaderView
	public class QHeaderView : QAbstractItemView, IDisposable {
 		protected QHeaderView(Type dummy) : base((Type) null) {}
		interface IQHeaderViewProxy {
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected void CreateQHeaderViewProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QHeaderView), this);
			_interceptor = (QHeaderView) realProxy.GetTransparentProxy();
		}
		private QHeaderView ProxyQHeaderView() {
			return (QHeaderView) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QHeaderView() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQHeaderViewProxy), null);
			_staticInterceptor = (IQHeaderViewProxy) realProxy.GetTransparentProxy();
		}
		private static IQHeaderViewProxy StaticQHeaderView() {
			return (IQHeaderViewProxy) _staticInterceptor;
		}

		enum E_ResizeMode {
			Interactive = 0,
			Stretch = 1,
			Custom = 2,
		}
		public new virtual QMetaObject MetaObject() {
			return ProxyQHeaderView().MetaObject();
		}
		// void* qt_metacast(const char* arg1); >>>> NOT CONVERTED
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QHeaderView(int orientation, QWidget parent) : this((Type) null) {
			CreateQHeaderViewProxy();
			NewQHeaderView(orientation,parent);
		}
		private void NewQHeaderView(int orientation, QWidget parent) {
			ProxyQHeaderView().NewQHeaderView(orientation,parent);
		}
		public QHeaderView(int orientation) : this((Type) null) {
			CreateQHeaderViewProxy();
			NewQHeaderView(orientation);
		}
		private void NewQHeaderView(int orientation) {
			ProxyQHeaderView().NewQHeaderView(orientation);
		}
		public new void SetModel(QAbstractItemModel model) {
			ProxyQHeaderView().SetModel(model);
		}
		public int Orientation() {
			return ProxyQHeaderView().Orientation();
		}
		public int Offset() {
			return ProxyQHeaderView().Offset();
		}
		public int Length() {
			return ProxyQHeaderView().Length();
		}
		public new QSize SizeHint() {
			return ProxyQHeaderView().SizeHint();
		}
		public int SectionSizeHint(int logicalIndex) {
			return ProxyQHeaderView().SectionSizeHint(logicalIndex);
		}
		public int VisualIndexAt(int position) {
			return ProxyQHeaderView().VisualIndexAt(position);
		}
		public int LogicalIndexAt(int position) {
			return ProxyQHeaderView().LogicalIndexAt(position);
		}
		public int LogicalIndexAt(int x, int y) {
			return ProxyQHeaderView().LogicalIndexAt(x,y);
		}
		public int LogicalIndexAt(QPoint pos) {
			return ProxyQHeaderView().LogicalIndexAt(pos);
		}
		public int SectionSize(int logicalIndex) {
			return ProxyQHeaderView().SectionSize(logicalIndex);
		}
		public int SectionPosition(int logicalIndex) {
			return ProxyQHeaderView().SectionPosition(logicalIndex);
		}
		public int SectionViewportPosition(int logicalIndex) {
			return ProxyQHeaderView().SectionViewportPosition(logicalIndex);
		}
		public void MoveSection(int from, int to) {
			ProxyQHeaderView().MoveSection(from,to);
		}
		public void ResizeSection(int logicalIndex, int size) {
			ProxyQHeaderView().ResizeSection(logicalIndex,size);
		}
		public bool IsSectionHidden(int logicalIndex) {
			return ProxyQHeaderView().IsSectionHidden(logicalIndex);
		}
		public void SetSectionHidden(int logicalIndex, bool hide) {
			ProxyQHeaderView().SetSectionHidden(logicalIndex,hide);
		}
		public void HideSection(int logicalIndex) {
			ProxyQHeaderView().HideSection(logicalIndex);
		}
		public void ShowSection(int logicalIndex) {
			ProxyQHeaderView().ShowSection(logicalIndex);
		}
		public int Count() {
			return ProxyQHeaderView().Count();
		}
		public int VisualIndex(int logicalIndex) {
			return ProxyQHeaderView().VisualIndex(logicalIndex);
		}
		public int LogicalIndex(int visualIndex) {
			return ProxyQHeaderView().LogicalIndex(visualIndex);
		}
		public void SetMovable(bool movable) {
			ProxyQHeaderView().SetMovable(movable);
		}
		public bool IsMovable() {
			return ProxyQHeaderView().IsMovable();
		}
		public void SetClickable(bool clickable) {
			ProxyQHeaderView().SetClickable(clickable);
		}
		public bool IsClickable() {
			return ProxyQHeaderView().IsClickable();
		}
		public void SetHighlightSections(bool highlight) {
			ProxyQHeaderView().SetHighlightSections(highlight);
		}
		public bool HighlightSections() {
			return ProxyQHeaderView().HighlightSections();
		}
		public void SetResizeMode(int mode) {
			ProxyQHeaderView().SetResizeMode(mode);
		}
		public void SetResizeMode(int logicalIndex, int mode) {
			ProxyQHeaderView().SetResizeMode(logicalIndex,mode);
		}
		public int ResizeMode(int logicalIndex) {
			return ProxyQHeaderView().ResizeMode(logicalIndex);
		}
		public int StretchSectionCount() {
			return ProxyQHeaderView().StretchSectionCount();
		}
		public void SetSortIndicatorShown(bool show) {
			ProxyQHeaderView().SetSortIndicatorShown(show);
		}
		public bool IsSortIndicatorShown() {
			return ProxyQHeaderView().IsSortIndicatorShown();
		}
		public void SetSortIndicator(int logicalIndex, int order) {
			ProxyQHeaderView().SetSortIndicator(logicalIndex,order);
		}
		public int SortIndicatorSection() {
			return ProxyQHeaderView().SortIndicatorSection();
		}
		public int SortIndicatorOrder() {
			return ProxyQHeaderView().SortIndicatorOrder();
		}
		public bool StretchLastSection() {
			return ProxyQHeaderView().StretchLastSection();
		}
		public void SetStretchLastSection(bool stretch) {
			ProxyQHeaderView().SetStretchLastSection(stretch);
		}
		public new void DoItemsLayout() {
			ProxyQHeaderView().DoItemsLayout();
		}
		public bool SectionsMoved() {
			return ProxyQHeaderView().SectionsMoved();
		}
		public void SetOffset(int offset) {
			ProxyQHeaderView().SetOffset(offset);
		}
		public void HeaderDataChanged(int orientation, int logicalFirst, int logicalLast) {
			ProxyQHeaderView().HeaderDataChanged(orientation,logicalFirst,logicalLast);
		}
		public static new string Tr(string s, string c) {
			return StaticQHeaderView().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQHeaderView().Tr(s);
		}
		protected void Initialize() {
			ProxyQHeaderView().Initialize();
		}
		protected void InitializeSections() {
			ProxyQHeaderView().InitializeSections();
		}
		protected void InitializeSections(int start, int end) {
			ProxyQHeaderView().InitializeSections(start,end);
		}
		protected new void CurrentChanged(QModelIndex current, QModelIndex old) {
			ProxyQHeaderView().CurrentChanged(current,old);
		}
		public new bool Event(QEvent e) {
			return ProxyQHeaderView().Event(e);
		}
		protected new void PaintEvent(QPaintEvent e) {
			ProxyQHeaderView().PaintEvent(e);
		}
		protected new void MousePressEvent(QMouseEvent e) {
			ProxyQHeaderView().MousePressEvent(e);
		}
		protected new void MouseMoveEvent(QMouseEvent e) {
			ProxyQHeaderView().MouseMoveEvent(e);
		}
		protected new void MouseReleaseEvent(QMouseEvent e) {
			ProxyQHeaderView().MouseReleaseEvent(e);
		}
		protected new void MouseDoubleClickEvent(QMouseEvent e) {
			ProxyQHeaderView().MouseDoubleClickEvent(e);
		}
		protected virtual void PaintSection(QPainter painter, QRect rect, int logicalIndex) {
			ProxyQHeaderView().PaintSection(painter,rect,logicalIndex);
		}
		protected virtual QSize SectionSizeFromContents(int logicalIndex) {
			return ProxyQHeaderView().SectionSizeFromContents(logicalIndex);
		}
		protected new int HorizontalOffset() {
			return ProxyQHeaderView().HorizontalOffset();
		}
		protected new int VerticalOffset() {
			return ProxyQHeaderView().VerticalOffset();
		}
		protected new void UpdateGeometries() {
			ProxyQHeaderView().UpdateGeometries();
		}
		protected new void ScrollContentsBy(int dx, int dy) {
			ProxyQHeaderView().ScrollContentsBy(dx,dy);
		}
		protected new void DataChanged(QModelIndex topLeft, QModelIndex bottomRight) {
			ProxyQHeaderView().DataChanged(topLeft,bottomRight);
		}
		protected new void RowsInserted(QModelIndex parent, int start, int end) {
			ProxyQHeaderView().RowsInserted(parent,start,end);
		}
		protected new QRect VisualRect(QModelIndex index) {
			return ProxyQHeaderView().VisualRect(index);
		}
		protected new void ScrollTo(QModelIndex index, int hint) {
			ProxyQHeaderView().ScrollTo(index,hint);
		}
		protected new QModelIndex IndexAt(QPoint p) {
			return ProxyQHeaderView().IndexAt(p);
		}
		protected new bool IsIndexHidden(QModelIndex index) {
			return ProxyQHeaderView().IsIndexHidden(index);
		}
		protected new QModelIndex MoveCursor(int arg1, int arg2) {
			return ProxyQHeaderView().MoveCursor(arg1,arg2);
		}
		protected new void SetSelection(QRect arg1, int arg2) {
			ProxyQHeaderView().SetSelection(arg1,arg2);
		}
		protected new QRegion VisualRegionForSelection(QItemSelection selection) {
			return ProxyQHeaderView().VisualRegionForSelection(selection);
		}
		protected void UpdateSection(int logicalIndex) {
			ProxyQHeaderView().UpdateSection(logicalIndex);
		}
		protected void ResizeSections() {
			ProxyQHeaderView().ResizeSections();
		}
		protected void SectionsInserted(QModelIndex parent, int logicalFirst, int logicalLast) {
			ProxyQHeaderView().SectionsInserted(parent,logicalFirst,logicalLast);
		}
		protected void SectionsAboutToBeRemoved(QModelIndex parent, int logicalFirst, int logicalLast) {
			ProxyQHeaderView().SectionsAboutToBeRemoved(parent,logicalFirst,logicalLast);
		}
		~QHeaderView() {
			ProxyQHeaderView().Dispose();
		}
		public new void Dispose() {
			ProxyQHeaderView().Dispose();
		}
	}

	public interface IQHeaderViewSignals {
		void SectionMoved(int logicalIndex, int oldVisualIndex, int newVisualIndex);
		void SectionResized(int logicalIndex, int oldSize, int newSize);
		void SectionPressed(int logicalIndex);
		void SectionClicked(int logicalIndex);
		void SectionDoubleClicked(int logicalIndex);
		void SectionCountChanged(int oldCount, int newCount);
		void SectionHandleDoubleClicked(int logicalIndex);
		void SectionAutoResize(int logicalIndex, int mode);
	}
}
