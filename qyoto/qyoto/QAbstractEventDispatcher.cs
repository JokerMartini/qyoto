//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	/// See <see cref="IQAbstractEventDispatcherSignals"></see> for signals emitted by QAbstractEventDispatcher
	public class QAbstractEventDispatcher : QObject {
 		protected QAbstractEventDispatcher(Type dummy) : base((Type) null) {}
		interface IQAbstractEventDispatcherProxy {
			string Tr(string s, string c);
			string Tr(string s);
			QAbstractEventDispatcher Instance(QThread thread);
			QAbstractEventDispatcher Instance();
		}

		protected void CreateQAbstractEventDispatcherProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QAbstractEventDispatcher), this);
			_interceptor = (QAbstractEventDispatcher) realProxy.GetTransparentProxy();
		}
		private QAbstractEventDispatcher ProxyQAbstractEventDispatcher() {
			return (QAbstractEventDispatcher) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QAbstractEventDispatcher() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQAbstractEventDispatcherProxy), null);
			_staticInterceptor = (IQAbstractEventDispatcherProxy) realProxy.GetTransparentProxy();
		}
		private static IQAbstractEventDispatcherProxy StaticQAbstractEventDispatcher() {
			return (IQAbstractEventDispatcherProxy) _staticInterceptor;
		}

		public new virtual QMetaObject MetaObject() {
			return ProxyQAbstractEventDispatcher().MetaObject();
		}
		// void* qt_metacast(const char* arg1); >>>> NOT CONVERTED
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public virtual bool ProcessEvents(uint flags) {
			return ProxyQAbstractEventDispatcher().ProcessEvents(flags);
		}
		public virtual bool HasPendingEvents() {
			return ProxyQAbstractEventDispatcher().HasPendingEvents();
		}
		public virtual void RegisterSocketNotifier(QSocketNotifier notifier) {
			ProxyQAbstractEventDispatcher().RegisterSocketNotifier(notifier);
		}
		public virtual void UnregisterSocketNotifier(QSocketNotifier notifier) {
			ProxyQAbstractEventDispatcher().UnregisterSocketNotifier(notifier);
		}
		public int RegisterTimer(int interval, QObject arg2) {
			return ProxyQAbstractEventDispatcher().RegisterTimer(interval,arg2);
		}
		public virtual void RegisterTimer(int timerId, int interval, QObject arg3) {
			ProxyQAbstractEventDispatcher().RegisterTimer(timerId,interval,arg3);
		}
		public virtual bool UnregisterTimer(int timerId) {
			return ProxyQAbstractEventDispatcher().UnregisterTimer(timerId);
		}
		public virtual bool UnregisterTimers(QObject arg1) {
			return ProxyQAbstractEventDispatcher().UnregisterTimers(arg1);
		}
		// QList<QAbstractEventDispatcher::TimerInfo> registeredTimers(QObject* arg1); >>>> NOT CONVERTED
		public virtual void WakeUp() {
			ProxyQAbstractEventDispatcher().WakeUp();
		}
		public virtual void Interrupt() {
			ProxyQAbstractEventDispatcher().Interrupt();
		}
		public virtual void Flush() {
			ProxyQAbstractEventDispatcher().Flush();
		}
		public virtual void StartingUp() {
			ProxyQAbstractEventDispatcher().StartingUp();
		}
		public virtual void ClosingDown() {
			ProxyQAbstractEventDispatcher().ClosingDown();
		}
		// EventFilter setEventFilter(EventFilter arg1); >>>> NOT CONVERTED
		// bool filterEvent(void* arg1); >>>> NOT CONVERTED
		public static new string Tr(string s, string c) {
			return StaticQAbstractEventDispatcher().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQAbstractEventDispatcher().Tr(s);
		}
		public static QAbstractEventDispatcher Instance(QThread thread) {
			return StaticQAbstractEventDispatcher().Instance(thread);
		}
		public static QAbstractEventDispatcher Instance() {
			return StaticQAbstractEventDispatcher().Instance();
		}
	}

	public interface IQAbstractEventDispatcherSignals {
		void AboutToBlock();
		void Awake();
	}
}
