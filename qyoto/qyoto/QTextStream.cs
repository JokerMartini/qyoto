//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QTextStream : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QTextStream(Type dummy) {}
		interface IQTextStreamProxy {
			QTextStream op_read(QTextStream lhs, char ch);
			QTextStream op_read(QTextStream lhs, ushort i);
			QTextStream op_read(QTextStream lhs, uint i);
			QTextStream op_read(QTextStream lhs, ulong i);
			QTextStream op_read(QTextStream lhs, float f);
			QTextStream op_read(QTextStream lhs, double f);
			QTextStream op_read(QTextStream lhs, StringBuilder s);
			QTextStream op_read(QTextStream lhs, byte[] array);
			QTextStream op_read(QTextStream lhs, string c);
			QTextStream op_write(QTextStream lhs, char ch);
			QTextStream op_write(QTextStream lhs, ushort i);
			QTextStream op_write(QTextStream lhs, uint i);
			QTextStream op_write(QTextStream lhs, ulong i);
			QTextStream op_write(QTextStream lhs, float f);
			QTextStream op_write(QTextStream lhs, double f);
			QTextStream op_write(QTextStream lhs, string s);
			QTextStream op_write(QTextStream lhs, byte[] array);
		}

		protected void CreateQTextStreamProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTextStream), this);
			_interceptor = (QTextStream) realProxy.GetTransparentProxy();
		}
		private QTextStream ProxyQTextStream() {
			return (QTextStream) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QTextStream() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQTextStreamProxy), null);
			_staticInterceptor = (IQTextStreamProxy) realProxy.GetTransparentProxy();
		}
		private static IQTextStreamProxy StaticQTextStream() {
			return (IQTextStreamProxy) _staticInterceptor;
		}

		enum E_RealNumberNotation {
			SmartNotation = 0,
			FixedNotation = 1,
			ScientificNotation = 2,
		}
		enum E_FieldAlignment {
			AlignLeft = 0,
			AlignRight = 1,
			AlignCenter = 2,
			AlignAccountingStyle = 3,
		}
		enum NumberFlag {
			ShowBase = 0x1,
			ForcePoint = 0x2,
			ForceSign = 0x4,
			UppercaseBase = 0x8,
			UppercaseDigits = 0x10,
		}
		public QTextStream() : this((Type) null) {
			CreateQTextStreamProxy();
			NewQTextStream();
		}
		private void NewQTextStream() {
			ProxyQTextStream().NewQTextStream();
		}
		public QTextStream(IQIODevice device) : this((Type) null) {
			CreateQTextStreamProxy();
			NewQTextStream(device);
		}
		private void NewQTextStream(IQIODevice device) {
			ProxyQTextStream().NewQTextStream(device);
		}
		public QTextStream(StringBuilder arg1, int openMode) : this((Type) null) {
			CreateQTextStreamProxy();
			NewQTextStream(arg1,openMode);
		}
		private void NewQTextStream(StringBuilder arg1, int openMode) {
			ProxyQTextStream().NewQTextStream(arg1,openMode);
		}
		public QTextStream(StringBuilder arg1) : this((Type) null) {
			CreateQTextStreamProxy();
			NewQTextStream(arg1);
		}
		private void NewQTextStream(StringBuilder arg1) {
			ProxyQTextStream().NewQTextStream(arg1);
		}
		public QTextStream(byte[] array, int openMode) : this((Type) null) {
			CreateQTextStreamProxy();
			NewQTextStream(array,openMode);
		}
		private void NewQTextStream(byte[] array, int openMode) {
			ProxyQTextStream().NewQTextStream(array,openMode);
		}
		public QTextStream(byte[] array) : this((Type) null) {
			CreateQTextStreamProxy();
			NewQTextStream(array);
		}
		private void NewQTextStream(byte[] array) {
			ProxyQTextStream().NewQTextStream(array);
		}
		public void SetCodec(QTextCodec codec) {
			ProxyQTextStream().SetCodec(codec);
		}
		public void SetCodec(string codecName) {
			ProxyQTextStream().SetCodec(codecName);
		}
		public QTextCodec Codec() {
			return ProxyQTextStream().Codec();
		}
		public void SetAutoDetectUnicode(bool enabled) {
			ProxyQTextStream().SetAutoDetectUnicode(enabled);
		}
		public bool AutoDetectUnicode() {
			return ProxyQTextStream().AutoDetectUnicode();
		}
		public void SetGenerateByteOrderMark(bool generate) {
			ProxyQTextStream().SetGenerateByteOrderMark(generate);
		}
		public bool GenerateByteOrderMark() {
			return ProxyQTextStream().GenerateByteOrderMark();
		}
		public void SetDevice(IQIODevice device) {
			ProxyQTextStream().SetDevice(device);
		}
		public IQIODevice Device() {
			return ProxyQTextStream().Device();
		}
		public void SetString(StringBuilder arg1, int openMode) {
			ProxyQTextStream().SetString(arg1,openMode);
		}
		public void SetString(StringBuilder arg1) {
			ProxyQTextStream().SetString(arg1);
		}
		public string String() {
			return ProxyQTextStream().String();
		}
		public bool AtEnd() {
			return ProxyQTextStream().AtEnd();
		}
		public void Reset() {
			ProxyQTextStream().Reset();
		}
		public void Flush() {
			ProxyQTextStream().Flush();
		}
		// bool seek(qint64 arg1); >>>> NOT CONVERTED
		public void SkipWhiteSpace() {
			ProxyQTextStream().SkipWhiteSpace();
		}
		// QString readLine(qint64 arg1); >>>> NOT CONVERTED
		public string ReadLine() {
			return ProxyQTextStream().ReadLine();
		}
		public string ReadAll() {
			return ProxyQTextStream().ReadAll();
		}
		public void SetFieldAlignment(int alignment) {
			ProxyQTextStream().SetFieldAlignment(alignment);
		}
		public int FieldAlignment() {
			return ProxyQTextStream().FieldAlignment();
		}
		public void SetPadChar(char ch) {
			ProxyQTextStream().SetPadChar(ch);
		}
		public char PadChar() {
			return ProxyQTextStream().PadChar();
		}
		public void SetFieldWidth(int width) {
			ProxyQTextStream().SetFieldWidth(width);
		}
		public int FieldWidth() {
			return ProxyQTextStream().FieldWidth();
		}
		public void SetNumberFlags(int flags) {
			ProxyQTextStream().SetNumberFlags(flags);
		}
		public int NumberFlags() {
			return ProxyQTextStream().NumberFlags();
		}
		public void SetIntegerBase(int arg1) {
			ProxyQTextStream().SetIntegerBase(arg1);
		}
		public int IntegerBase() {
			return ProxyQTextStream().IntegerBase();
		}
		public void SetRealNumberNotation(int notation) {
			ProxyQTextStream().SetRealNumberNotation(notation);
		}
		public int RealNumberNotation() {
			return ProxyQTextStream().RealNumberNotation();
		}
		public void SetRealNumberPrecision(int precision) {
			ProxyQTextStream().SetRealNumberPrecision(precision);
		}
		public int RealNumberPrecision() {
			return ProxyQTextStream().RealNumberPrecision();
		}
		public static QTextStream op_read(QTextStream lhs, char ch) {
			return StaticQTextStream().op_read(lhs,ch);
		}
		// QTextStream& operator>>(signed short& arg1); >>>> NOT CONVERTED
		public static QTextStream op_read(QTextStream lhs, ushort i) {
			return StaticQTextStream().op_read(lhs,i);
		}
		// QTextStream& operator>>(signed int& arg1); >>>> NOT CONVERTED
		public static QTextStream op_read(QTextStream lhs, uint i) {
			return StaticQTextStream().op_read(lhs,i);
		}
		// QTextStream& operator>>(signed long& arg1); >>>> NOT CONVERTED
		public static QTextStream op_read(QTextStream lhs, ulong i) {
			return StaticQTextStream().op_read(lhs,i);
		}
		// QTextStream& operator>>(qlonglong& arg1); >>>> NOT CONVERTED
		// QTextStream& operator>>(qulonglong& arg1); >>>> NOT CONVERTED
		public static QTextStream op_read(QTextStream lhs, float f) {
			return StaticQTextStream().op_read(lhs,f);
		}
		public static QTextStream op_read(QTextStream lhs, double f) {
			return StaticQTextStream().op_read(lhs,f);
		}
		public static QTextStream op_read(QTextStream lhs, StringBuilder s) {
			return StaticQTextStream().op_read(lhs,s);
		}
		public static QTextStream op_read(QTextStream lhs, byte[] array) {
			return StaticQTextStream().op_read(lhs,array);
		}
		public static QTextStream op_read(QTextStream lhs, string c) {
			return StaticQTextStream().op_read(lhs,c);
		}
		public static QTextStream op_write(QTextStream lhs, char ch) {
			return StaticQTextStream().op_write(lhs,ch);
		}
		// QTextStream& operator<<(signed short arg1); >>>> NOT CONVERTED
		public static QTextStream op_write(QTextStream lhs, ushort i) {
			return StaticQTextStream().op_write(lhs,i);
		}
		// QTextStream& operator<<(signed int arg1); >>>> NOT CONVERTED
		public static QTextStream op_write(QTextStream lhs, uint i) {
			return StaticQTextStream().op_write(lhs,i);
		}
		// QTextStream& operator<<(signed long arg1); >>>> NOT CONVERTED
		public static QTextStream op_write(QTextStream lhs, ulong i) {
			return StaticQTextStream().op_write(lhs,i);
		}
		// QTextStream& operator<<(qlonglong arg1); >>>> NOT CONVERTED
		// QTextStream& operator<<(qulonglong arg1); >>>> NOT CONVERTED
		public static QTextStream op_write(QTextStream lhs, float f) {
			return StaticQTextStream().op_write(lhs,f);
		}
		public static QTextStream op_write(QTextStream lhs, double f) {
			return StaticQTextStream().op_write(lhs,f);
		}
		public static QTextStream op_write(QTextStream lhs, string s) {
			return StaticQTextStream().op_write(lhs,s);
		}
		public static QTextStream op_write(QTextStream lhs, byte[] array) {
			return StaticQTextStream().op_write(lhs,array);
		}
		// QTextStream& operator<<(const void* arg1); >>>> NOT CONVERTED
		~QTextStream() {
			ProxyQTextStream().Dispose();
		}
		public void Dispose() {
			ProxyQTextStream().Dispose();
		}
	}
}
