//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Collections;
	using System.Text;

	public class QDirModel : QAbstractItemModel, IDisposable {
 		protected QDirModel(Type dummy) : base((Type) null) {}
		interface IQDirModelProxy {
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected void CreateQDirModelProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QDirModel), this);
			_interceptor = (QDirModel) realProxy.GetTransparentProxy();
		}
		private QDirModel ProxyQDirModel() {
			return (QDirModel) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QDirModel() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQDirModelProxy), null);
			_staticInterceptor = (IQDirModelProxy) realProxy.GetTransparentProxy();
		}
		private static IQDirModelProxy StaticQDirModel() {
			return (IQDirModelProxy) _staticInterceptor;
		}

		enum Roles {
			FileIconRole = Qt.ItemDataRole.DecorationRole,
			FilePathRole = Qt.ItemDataRole.UserRole+1,
			FileNameRole = 0,
		}
		public new virtual QMetaObject MetaObject() {
			return ProxyQDirModel().MetaObject();
		}
		// void* qt_metacast(const char* arg1); >>>> NOT CONVERTED
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QDirModel(string[] nameFilters, int filters, int sort, QObject parent) : this((Type) null) {
			CreateQDirModelProxy();
			NewQDirModel(nameFilters,filters,sort,parent);
		}
		private void NewQDirModel(string[] nameFilters, int filters, int sort, QObject parent) {
			ProxyQDirModel().NewQDirModel(nameFilters,filters,sort,parent);
		}
		public QDirModel(string[] nameFilters, int filters, int sort) : this((Type) null) {
			CreateQDirModelProxy();
			NewQDirModel(nameFilters,filters,sort);
		}
		private void NewQDirModel(string[] nameFilters, int filters, int sort) {
			ProxyQDirModel().NewQDirModel(nameFilters,filters,sort);
		}
		public QDirModel(QObject parent) : this((Type) null) {
			CreateQDirModelProxy();
			NewQDirModel(parent);
		}
		private void NewQDirModel(QObject parent) {
			ProxyQDirModel().NewQDirModel(parent);
		}
		public QDirModel() : this((Type) null) {
			CreateQDirModelProxy();
			NewQDirModel();
		}
		private void NewQDirModel() {
			ProxyQDirModel().NewQDirModel();
		}
		public new QModelIndex Index(int row, int column, QModelIndex parent) {
			return ProxyQDirModel().Index(row,column,parent);
		}
		public new QModelIndex Index(int row, int column) {
			return ProxyQDirModel().Index(row,column);
		}
		public new QModelIndex Parent(QModelIndex child) {
			return ProxyQDirModel().Parent(child);
		}
		public new int RowCount(QModelIndex parent) {
			return ProxyQDirModel().RowCount(parent);
		}
		public new int ColumnCount(QModelIndex parent) {
			return ProxyQDirModel().ColumnCount(parent);
		}
		public new QVariant Data(QModelIndex index, int role) {
			return ProxyQDirModel().Data(index,role);
		}
		public new QVariant Data(QModelIndex index) {
			return ProxyQDirModel().Data(index);
		}
		public new bool SetData(QModelIndex index, QVariant value, int role) {
			return ProxyQDirModel().SetData(index,value,role);
		}
		public new QVariant HeaderData(int section, int orientation, int role) {
			return ProxyQDirModel().HeaderData(section,orientation,role);
		}
		public new bool HasChildren(QModelIndex index) {
			return ProxyQDirModel().HasChildren(index);
		}
		public new int Flags(QModelIndex index) {
			return ProxyQDirModel().Flags(index);
		}
		public new void Sort(int column, int order) {
			ProxyQDirModel().Sort(column,order);
		}
		public new ArrayList MimeTypes() {
			return ProxyQDirModel().MimeTypes();
		}
		// QMimeData* mimeData(const QModelIndexList& arg1); >>>> NOT CONVERTED
		public new bool DropMimeData(QMimeData data, int action, int row, int column, QModelIndex parent) {
			return ProxyQDirModel().DropMimeData(data,action,row,column,parent);
		}
		public new int SupportedDropActions() {
			return ProxyQDirModel().SupportedDropActions();
		}
		public void SetIconProvider(QFileIconProvider provider) {
			ProxyQDirModel().SetIconProvider(provider);
		}
		public QFileIconProvider IconProvider() {
			return ProxyQDirModel().IconProvider();
		}
		public void SetNameFilters(string[] filters) {
			ProxyQDirModel().SetNameFilters(filters);
		}
		public ArrayList NameFilters() {
			return ProxyQDirModel().NameFilters();
		}
		public void SetFilter(int filters) {
			ProxyQDirModel().SetFilter(filters);
		}
		public int Filter() {
			return ProxyQDirModel().Filter();
		}
		public void SetSorting(int sort) {
			ProxyQDirModel().SetSorting(sort);
		}
		public int Sorting() {
			return ProxyQDirModel().Sorting();
		}
		public void SetResolveSymlinks(bool enable) {
			ProxyQDirModel().SetResolveSymlinks(enable);
		}
		public bool ResolveSymlinks() {
			return ProxyQDirModel().ResolveSymlinks();
		}
		public void SetReadOnly(bool enable) {
			ProxyQDirModel().SetReadOnly(enable);
		}
		public bool IsReadOnly() {
			return ProxyQDirModel().IsReadOnly();
		}
		public void SetLazyChildCount(bool enable) {
			ProxyQDirModel().SetLazyChildCount(enable);
		}
		public bool LazyChildCount() {
			return ProxyQDirModel().LazyChildCount();
		}
		public void Refresh(QModelIndex parent) {
			ProxyQDirModel().Refresh(parent);
		}
		public void Refresh() {
			ProxyQDirModel().Refresh();
		}
		public new QModelIndex Index(string path, int column) {
			return ProxyQDirModel().Index(path,column);
		}
		public new QModelIndex Index(string path) {
			return ProxyQDirModel().Index(path);
		}
		public bool IsDir(QModelIndex index) {
			return ProxyQDirModel().IsDir(index);
		}
		public QModelIndex Mkdir(QModelIndex parent, string name) {
			return ProxyQDirModel().Mkdir(parent,name);
		}
		public bool Rmdir(QModelIndex index) {
			return ProxyQDirModel().Rmdir(index);
		}
		public bool Remove(QModelIndex index) {
			return ProxyQDirModel().Remove(index);
		}
		public string FilePath(QModelIndex index) {
			return ProxyQDirModel().FilePath(index);
		}
		public string FileName(QModelIndex index) {
			return ProxyQDirModel().FileName(index);
		}
		public QIcon FileIcon(QModelIndex index) {
			return ProxyQDirModel().FileIcon(index);
		}
		public QFileInfo FileInfo(QModelIndex index) {
			return ProxyQDirModel().FileInfo(index);
		}
		public static new string Tr(string s, string c) {
			return StaticQDirModel().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQDirModel().Tr(s);
		}
		~QDirModel() {
			ProxyQDirModel().Dispose();
		}
		public new void Dispose() {
			ProxyQDirModel().Dispose();
		}
	}
}
