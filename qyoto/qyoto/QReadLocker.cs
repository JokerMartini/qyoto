//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QReadLocker : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QReadLocker(Type dummy) {}
		interface IQReadLockerProxy {
		}

		protected void CreateQReadLockerProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QReadLocker), this);
			_interceptor = (QReadLocker) realProxy.GetTransparentProxy();
		}
		private QReadLocker ProxyQReadLocker() {
			return (QReadLocker) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QReadLocker() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQReadLockerProxy), null);
			_staticInterceptor = (IQReadLockerProxy) realProxy.GetTransparentProxy();
		}
		private static IQReadLockerProxy StaticQReadLocker() {
			return (IQReadLockerProxy) _staticInterceptor;
		}

		public QReadLocker(QReadWriteLock readWriteLock) : this((Type) null) {
			CreateQReadLockerProxy();
			NewQReadLocker(readWriteLock);
		}
		private void NewQReadLocker(QReadWriteLock readWriteLock) {
			ProxyQReadLocker().NewQReadLocker(readWriteLock);
		}
		public void Unlock() {
			ProxyQReadLocker().Unlock();
		}
		public void Relock() {
			ProxyQReadLocker().Relock();
		}
		public QReadWriteLock ReadWriteLock() {
			return ProxyQReadLocker().ReadWriteLock();
		}
		~QReadLocker() {
			ProxyQReadLocker().Dispose();
		}
		public void Dispose() {
			ProxyQReadLocker().Dispose();
		}
	}
}
