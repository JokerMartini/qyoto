//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QIcon : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QIcon(Type dummy) {}
		interface IQIconProxy {
		}

		protected void CreateQIconProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QIcon), this);
			_interceptor = (QIcon) realProxy.GetTransparentProxy();
		}
		private QIcon ProxyQIcon() {
			return (QIcon) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QIcon() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQIconProxy), null);
			_staticInterceptor = (IQIconProxy) realProxy.GetTransparentProxy();
		}
		private static IQIconProxy StaticQIcon() {
			return (IQIconProxy) _staticInterceptor;
		}

		enum Mode {
			Normal = 0,
			Disabled = 1,
			Active = 2,
		}
		enum State {
			On = 0,
			Off = 1,
		}
		public QIcon() : this((Type) null) {
			CreateQIconProxy();
			NewQIcon();
		}
		private void NewQIcon() {
			ProxyQIcon().NewQIcon();
		}
		public QIcon(QPixmap pixmap) : this((Type) null) {
			CreateQIconProxy();
			NewQIcon(pixmap);
		}
		private void NewQIcon(QPixmap pixmap) {
			ProxyQIcon().NewQIcon(pixmap);
		}
		public QIcon(QIcon other) : this((Type) null) {
			CreateQIconProxy();
			NewQIcon(other);
		}
		private void NewQIcon(QIcon other) {
			ProxyQIcon().NewQIcon(other);
		}
		public QIcon(string fileName) : this((Type) null) {
			CreateQIconProxy();
			NewQIcon(fileName);
		}
		private void NewQIcon(string fileName) {
			ProxyQIcon().NewQIcon(fileName);
		}
		// QIcon* QIcon(QIconEngine* arg1); >>>> NOT CONVERTED
		//  operator QVariant(); >>>> NOT CONVERTED
		public QPixmap Pixmap(QSize size, int mode, int state) {
			return ProxyQIcon().Pixmap(size,mode,state);
		}
		public QPixmap Pixmap(QSize size, int mode) {
			return ProxyQIcon().Pixmap(size,mode);
		}
		public QPixmap Pixmap(QSize size) {
			return ProxyQIcon().Pixmap(size);
		}
		public QPixmap Pixmap(int w, int h, int mode, int state) {
			return ProxyQIcon().Pixmap(w,h,mode,state);
		}
		public QPixmap Pixmap(int w, int h, int mode) {
			return ProxyQIcon().Pixmap(w,h,mode);
		}
		public QPixmap Pixmap(int w, int h) {
			return ProxyQIcon().Pixmap(w,h);
		}
		public QPixmap Pixmap(int extent) {
			return ProxyQIcon().Pixmap(extent);
		}
		public QSize ActualSize(QSize size, int mode, int state) {
			return ProxyQIcon().ActualSize(size,mode,state);
		}
		public QSize ActualSize(QSize size, int mode) {
			return ProxyQIcon().ActualSize(size,mode);
		}
		public QSize ActualSize(QSize size) {
			return ProxyQIcon().ActualSize(size);
		}
		public void Paint(QPainter painter, QRect rect, int alignment, int mode, int state) {
			ProxyQIcon().Paint(painter,rect,alignment,mode,state);
		}
		public void Paint(QPainter painter, QRect rect, int alignment, int mode) {
			ProxyQIcon().Paint(painter,rect,alignment,mode);
		}
		public void Paint(QPainter painter, QRect rect, int alignment) {
			ProxyQIcon().Paint(painter,rect,alignment);
		}
		public void Paint(QPainter painter, QRect rect) {
			ProxyQIcon().Paint(painter,rect);
		}
		public void Paint(QPainter painter, int x, int y, int w, int h, int alignment, int mode, int state) {
			ProxyQIcon().Paint(painter,x,y,w,h,alignment,mode,state);
		}
		public void Paint(QPainter painter, int x, int y, int w, int h, int alignment, int mode) {
			ProxyQIcon().Paint(painter,x,y,w,h,alignment,mode);
		}
		public void Paint(QPainter painter, int x, int y, int w, int h, int alignment) {
			ProxyQIcon().Paint(painter,x,y,w,h,alignment);
		}
		public void Paint(QPainter painter, int x, int y, int w, int h) {
			ProxyQIcon().Paint(painter,x,y,w,h);
		}
		public bool IsNull() {
			return ProxyQIcon().IsNull();
		}
		public bool IsDetached() {
			return ProxyQIcon().IsDetached();
		}
		public int SerialNumber() {
			return ProxyQIcon().SerialNumber();
		}
		public void AddPixmap(QPixmap pixmap, int mode, int state) {
			ProxyQIcon().AddPixmap(pixmap,mode,state);
		}
		public void AddPixmap(QPixmap pixmap, int mode) {
			ProxyQIcon().AddPixmap(pixmap,mode);
		}
		public void AddPixmap(QPixmap pixmap) {
			ProxyQIcon().AddPixmap(pixmap);
		}
		public void AddFile(string fileName, QSize size, int mode, int state) {
			ProxyQIcon().AddFile(fileName,size,mode,state);
		}
		public void AddFile(string fileName, QSize size, int mode) {
			ProxyQIcon().AddFile(fileName,size,mode);
		}
		public void AddFile(string fileName, QSize size) {
			ProxyQIcon().AddFile(fileName,size);
		}
		public void AddFile(string fileName) {
			ProxyQIcon().AddFile(fileName);
		}
		~QIcon() {
			ProxyQIcon().Dispose();
		}
		public void Dispose() {
			ProxyQIcon().Dispose();
		}
	}
}
