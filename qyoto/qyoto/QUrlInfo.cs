//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QUrlInfo : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QUrlInfo(Type dummy) {}
		interface IQUrlInfoProxy {
			bool GreaterThan(QUrlInfo i1, QUrlInfo i2, int sortBy);
			bool LessThan(QUrlInfo i1, QUrlInfo i2, int sortBy);
			bool Equal(QUrlInfo i1, QUrlInfo i2, int sortBy);
		}

		protected void CreateQUrlInfoProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QUrlInfo), this);
			_interceptor = (QUrlInfo) realProxy.GetTransparentProxy();
		}
		private QUrlInfo ProxyQUrlInfo() {
			return (QUrlInfo) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QUrlInfo() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQUrlInfoProxy), null);
			_staticInterceptor = (IQUrlInfoProxy) realProxy.GetTransparentProxy();
		}
		private static IQUrlInfoProxy StaticQUrlInfo() {
			return (IQUrlInfoProxy) _staticInterceptor;
		}

		enum PermissionSpec {
			ReadOwner = 00400,
			WriteOwner = 00200,
			ExeOwner = 00100,
			ReadGroup = 00040,
			WriteGroup = 00020,
			ExeGroup = 00010,
			ReadOther = 00004,
			WriteOther = 00002,
			ExeOther = 00001,
		}
		public QUrlInfo() : this((Type) null) {
			CreateQUrlInfoProxy();
			NewQUrlInfo();
		}
		private void NewQUrlInfo() {
			ProxyQUrlInfo().NewQUrlInfo();
		}
		public QUrlInfo(QUrlInfo ui) : this((Type) null) {
			CreateQUrlInfoProxy();
			NewQUrlInfo(ui);
		}
		private void NewQUrlInfo(QUrlInfo ui) {
			ProxyQUrlInfo().NewQUrlInfo(ui);
		}
		// QUrlInfo* QUrlInfo(const QString& arg1,int arg2,const QString& arg3,const QString& arg4,qint64 arg5,const QDateTime& arg6,const QDateTime& arg7,bool arg8,bool arg9,bool arg10,bool arg11,bool arg12,bool arg13); >>>> NOT CONVERTED
		// QUrlInfo* QUrlInfo(const QUrl& arg1,int arg2,const QString& arg3,const QString& arg4,qint64 arg5,const QDateTime& arg6,const QDateTime& arg7,bool arg8,bool arg9,bool arg10,bool arg11,bool arg12,bool arg13); >>>> NOT CONVERTED
		public virtual void SetName(string name) {
			ProxyQUrlInfo().SetName(name);
		}
		public virtual void SetDir(bool b) {
			ProxyQUrlInfo().SetDir(b);
		}
		public virtual void SetFile(bool b) {
			ProxyQUrlInfo().SetFile(b);
		}
		public virtual void SetSymLink(bool b) {
			ProxyQUrlInfo().SetSymLink(b);
		}
		public virtual void SetOwner(string s) {
			ProxyQUrlInfo().SetOwner(s);
		}
		public virtual void SetGroup(string s) {
			ProxyQUrlInfo().SetGroup(s);
		}
		// void setSize(qint64 arg1); >>>> NOT CONVERTED
		public virtual void SetWritable(bool b) {
			ProxyQUrlInfo().SetWritable(b);
		}
		public virtual void SetReadable(bool b) {
			ProxyQUrlInfo().SetReadable(b);
		}
		public virtual void SetPermissions(int p) {
			ProxyQUrlInfo().SetPermissions(p);
		}
		public virtual void SetLastModified(DateTime dt) {
			ProxyQUrlInfo().SetLastModified(dt);
		}
		public bool IsValid() {
			return ProxyQUrlInfo().IsValid();
		}
		public string Name() {
			return ProxyQUrlInfo().Name();
		}
		public int Permissions() {
			return ProxyQUrlInfo().Permissions();
		}
		public string Owner() {
			return ProxyQUrlInfo().Owner();
		}
		public string Group() {
			return ProxyQUrlInfo().Group();
		}
		// qint64 size(); >>>> NOT CONVERTED
		public DateTime LastModified() {
			return ProxyQUrlInfo().LastModified();
		}
		public DateTime LastRead() {
			return ProxyQUrlInfo().LastRead();
		}
		public bool IsDir() {
			return ProxyQUrlInfo().IsDir();
		}
		public bool IsFile() {
			return ProxyQUrlInfo().IsFile();
		}
		public bool IsSymLink() {
			return ProxyQUrlInfo().IsSymLink();
		}
		public bool IsWritable() {
			return ProxyQUrlInfo().IsWritable();
		}
		public bool IsReadable() {
			return ProxyQUrlInfo().IsReadable();
		}
		public bool IsExecutable() {
			return ProxyQUrlInfo().IsExecutable();
		}
		public static bool GreaterThan(QUrlInfo i1, QUrlInfo i2, int sortBy) {
			return StaticQUrlInfo().GreaterThan(i1,i2,sortBy);
		}
		public static bool LessThan(QUrlInfo i1, QUrlInfo i2, int sortBy) {
			return StaticQUrlInfo().LessThan(i1,i2,sortBy);
		}
		public static bool Equal(QUrlInfo i1, QUrlInfo i2, int sortBy) {
			return StaticQUrlInfo().Equal(i1,i2,sortBy);
		}
		~QUrlInfo() {
			ProxyQUrlInfo().Dispose();
		}
		public void Dispose() {
			ProxyQUrlInfo().Dispose();
		}
	}
}
