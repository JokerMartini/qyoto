//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QSizePolicy : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QSizePolicy(Type dummy) {}
		interface IQSizePolicyProxy {
			bool op_equals(QSizePolicy lhs, QSizePolicy s);
		}

		protected void CreateQSizePolicyProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSizePolicy), this);
			_interceptor = (QSizePolicy) realProxy.GetTransparentProxy();
		}
		private QSizePolicy ProxyQSizePolicy() {
			return (QSizePolicy) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QSizePolicy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSizePolicyProxy), null);
			_staticInterceptor = (IQSizePolicyProxy) realProxy.GetTransparentProxy();
		}
		private static IQSizePolicyProxy StaticQSizePolicy() {
			return (IQSizePolicyProxy) _staticInterceptor;
		}

		enum PolicyFlag {
			GrowFlag = 1,
			ExpandFlag = 2,
			ShrinkFlag = 4,
			IgnoreFlag = 8,
		}
		enum Policy {
			Fixed = 0,
			Minimum = PolicyFlag.GrowFlag,
			Maximum = PolicyFlag.ShrinkFlag,
			Preferred = PolicyFlag.GrowFlag|PolicyFlag.ShrinkFlag,
			MinimumExpanding = PolicyFlag.GrowFlag|PolicyFlag.ExpandFlag,
			Expanding = PolicyFlag.GrowFlag|PolicyFlag.ShrinkFlag|PolicyFlag.ExpandFlag,
			Ignored = PolicyFlag.ShrinkFlag|PolicyFlag.GrowFlag|PolicyFlag.IgnoreFlag,
		}
		public QSizePolicy() : this((Type) null) {
			CreateQSizePolicyProxy();
			NewQSizePolicy();
		}
		private void NewQSizePolicy() {
			ProxyQSizePolicy().NewQSizePolicy();
		}
		public QSizePolicy(int horizontal, int vertical) : this((Type) null) {
			CreateQSizePolicyProxy();
			NewQSizePolicy(horizontal,vertical);
		}
		private void NewQSizePolicy(int horizontal, int vertical) {
			ProxyQSizePolicy().NewQSizePolicy(horizontal,vertical);
		}
		public int HorizontalPolicy() {
			return ProxyQSizePolicy().HorizontalPolicy();
		}
		public int VerticalPolicy() {
			return ProxyQSizePolicy().VerticalPolicy();
		}
		public void SetHorizontalPolicy(int d) {
			ProxyQSizePolicy().SetHorizontalPolicy(d);
		}
		public void SetVerticalPolicy(int d) {
			ProxyQSizePolicy().SetVerticalPolicy(d);
		}
		public int ExpandingDirections() {
			return ProxyQSizePolicy().ExpandingDirections();
		}
		public void SetHeightForWidth(bool b) {
			ProxyQSizePolicy().SetHeightForWidth(b);
		}
		public bool HasHeightForWidth() {
			return ProxyQSizePolicy().HasHeightForWidth();
		}
		public static bool operator==(QSizePolicy lhs, QSizePolicy s) {
			return StaticQSizePolicy().op_equals(lhs,s);
		}
		public static bool operator!=(QSizePolicy lhs, QSizePolicy s) {
			return !StaticQSizePolicy().op_equals(lhs,s);
		}
		public override bool Equals(object o) {
			if (!(o is QSizePolicy)) { return false; }
			return this == (QSizePolicy) o;
		}
		public override int GetHashCode() {
			return ProxyQSizePolicy().GetHashCode();
		}
		//  operator QVariant(); >>>> NOT CONVERTED
		public int HorizontalStretch() {
			return ProxyQSizePolicy().HorizontalStretch();
		}
		public int VerticalStretch() {
			return ProxyQSizePolicy().VerticalStretch();
		}
		public void SetHorizontalStretch(ushort stretchFactor) {
			ProxyQSizePolicy().SetHorizontalStretch(stretchFactor);
		}
		public void SetVerticalStretch(ushort stretchFactor) {
			ProxyQSizePolicy().SetVerticalStretch(stretchFactor);
		}
		public void Transpose() {
			ProxyQSizePolicy().Transpose();
		}
		~QSizePolicy() {
			ProxyQSizePolicy().Dispose();
		}
		public void Dispose() {
			ProxyQSizePolicy().Dispose();
		}
	}
}
