//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QMutex : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QMutex(Type dummy) {}
		interface IQMutexProxy {
		}

		protected void CreateQMutexProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QMutex), this);
			_interceptor = (QMutex) realProxy.GetTransparentProxy();
		}
		private QMutex ProxyQMutex() {
			return (QMutex) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QMutex() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQMutexProxy), null);
			_staticInterceptor = (IQMutexProxy) realProxy.GetTransparentProxy();
		}
		private static IQMutexProxy StaticQMutex() {
			return (IQMutexProxy) _staticInterceptor;
		}

		enum RecursionMode {
			NonRecursive = 0,
			Recursive = 1,
		}
		public QMutex(int mode) : this((Type) null) {
			CreateQMutexProxy();
			NewQMutex(mode);
		}
		private void NewQMutex(int mode) {
			ProxyQMutex().NewQMutex(mode);
		}
		public QMutex() : this((Type) null) {
			CreateQMutexProxy();
			NewQMutex();
		}
		private void NewQMutex() {
			ProxyQMutex().NewQMutex();
		}
		public void Lock() {
			ProxyQMutex().Lock();
		}
		public bool TryLock() {
			return ProxyQMutex().TryLock();
		}
		public void Unlock() {
			ProxyQMutex().Unlock();
		}
		~QMutex() {
			ProxyQMutex().Dispose();
		}
		public void Dispose() {
			ProxyQMutex().Dispose();
		}
	}
}
