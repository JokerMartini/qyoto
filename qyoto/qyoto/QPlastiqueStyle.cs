//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;

	[SmokeClass("QPlastiqueStyle")]
	public class QPlastiqueStyle : QWindowsStyle, IDisposable {
 		protected QPlastiqueStyle(Type dummy) : base((Type) null) {}
		interface IQPlastiqueStyleProxy {
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QPlastiqueStyle), this);
			_interceptor = (QPlastiqueStyle) realProxy.GetTransparentProxy();
		}
		private QPlastiqueStyle ProxyQPlastiqueStyle() {
			return (QPlastiqueStyle) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QPlastiqueStyle() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQPlastiqueStyleProxy), null);
			_staticInterceptor = (IQPlastiqueStyleProxy) realProxy.GetTransparentProxy();
		}
		private static IQPlastiqueStyleProxy StaticQPlastiqueStyle() {
			return (IQPlastiqueStyleProxy) _staticInterceptor;
		}

		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QPlastiqueStyle() : this((Type) null) {
			CreateProxy();
			NewQPlastiqueStyle();
		}
		[SmokeMethod("QPlastiqueStyle()")]
		private void NewQPlastiqueStyle() {
			ProxyQPlastiqueStyle().NewQPlastiqueStyle();
		}
		[SmokeMethod("drawPrimitive(QStyle::PrimitiveElement, const QStyleOption*, QPainter*, const QWidget*) const")]
		public new void DrawPrimitive(QStyle.PrimitiveElement element, out int option, QPainter painter, QWidget widget) {
			ProxyQPlastiqueStyle().DrawPrimitive(element,out option,painter,widget);
		}
		[SmokeMethod("drawPrimitive(QStyle::PrimitiveElement, const QStyleOption*, QPainter*) const")]
		public new void DrawPrimitive(QStyle.PrimitiveElement element, out int option, QPainter painter) {
			ProxyQPlastiqueStyle().DrawPrimitive(element,out option,painter);
		}
		[SmokeMethod("drawControl(QStyle::ControlElement, const QStyleOption*, QPainter*, const QWidget*) const")]
		public new void DrawControl(QStyle.ControlElement element, out int option, QPainter painter, QWidget widget) {
			ProxyQPlastiqueStyle().DrawControl(element,out option,painter,widget);
		}
		[SmokeMethod("drawComplexControl(QStyle::ComplexControl, const QStyleOptionComplex*, QPainter*, const QWidget*) const")]
		public new void DrawComplexControl(QStyle.ComplexControl control, QStyleOptionComplex option, QPainter painter, QWidget widget) {
			ProxyQPlastiqueStyle().DrawComplexControl(control,option,painter,widget);
		}
		[SmokeMethod("sizeFromContents(QStyle::ContentsType, const QStyleOption*, const QSize&, const QWidget*) const")]
		public new QSize SizeFromContents(QStyle.ContentsType type, out int option, QSize size, QWidget widget) {
			return ProxyQPlastiqueStyle().SizeFromContents(type,out option,size,widget);
		}
		[SmokeMethod("subElementRect(QStyle::SubElement, const QStyleOption*, const QWidget*) const")]
		public new QRect SubElementRect(QStyle.SubElement element, out int option, QWidget widget) {
			return ProxyQPlastiqueStyle().SubElementRect(element,out option,widget);
		}
		[SmokeMethod("subControlRect(QStyle::ComplexControl, const QStyleOptionComplex*, QStyle::SubControl, const QWidget*) const")]
		public new QRect SubControlRect(QStyle.ComplexControl cc, QStyleOptionComplex opt, QStyle.SubControl sc, QWidget widget) {
			return ProxyQPlastiqueStyle().SubControlRect(cc,opt,sc,widget);
		}
		[SmokeMethod("styleHint(QStyle::StyleHint, const QStyleOption*, const QWidget*, QStyleHintReturn*) const")]
		public new int StyleHint(QStyle.StyleHint hint, out int option, QWidget widget, QStyleHintReturn returnData) {
			return ProxyQPlastiqueStyle().StyleHint(hint,out option,widget,returnData);
		}
		[SmokeMethod("styleHint(QStyle::StyleHint, const QStyleOption*, const QWidget*) const")]
		public new int StyleHint(QStyle.StyleHint hint, out int option, QWidget widget) {
			return ProxyQPlastiqueStyle().StyleHint(hint,out option,widget);
		}
		[SmokeMethod("styleHint(QStyle::StyleHint, const QStyleOption*) const")]
		public new int StyleHint(QStyle.StyleHint hint, out int option) {
			return ProxyQPlastiqueStyle().StyleHint(hint,out option);
		}
		[SmokeMethod("styleHint(QStyle::StyleHint) const")]
		public new int StyleHint(QStyle.StyleHint hint) {
			return ProxyQPlastiqueStyle().StyleHint(hint);
		}
		[SmokeMethod("hitTestComplexControl(QStyle::ComplexControl, const QStyleOptionComplex*, const QPoint&, const QWidget*) const")]
		public new QStyle.SubControl HitTestComplexControl(QStyle.ComplexControl control, QStyleOptionComplex option, QPoint pos, QWidget widget) {
			return ProxyQPlastiqueStyle().HitTestComplexControl(control,option,pos,widget);
		}
		[SmokeMethod("hitTestComplexControl(QStyle::ComplexControl, const QStyleOptionComplex*, const QPoint&) const")]
		public new QStyle.SubControl HitTestComplexControl(QStyle.ComplexControl control, QStyleOptionComplex option, QPoint pos) {
			return ProxyQPlastiqueStyle().HitTestComplexControl(control,option,pos);
		}
		[SmokeMethod("pixelMetric(QStyle::PixelMetric, const QStyleOption*, const QWidget*) const")]
		public new int PixelMetric(QStyle.PixelMetric metric, out int option, QWidget widget) {
			return ProxyQPlastiqueStyle().PixelMetric(metric,out option,widget);
		}
		[SmokeMethod("pixelMetric(QStyle::PixelMetric, const QStyleOption*) const")]
		public new int PixelMetric(QStyle.PixelMetric metric, out int option) {
			return ProxyQPlastiqueStyle().PixelMetric(metric,out option);
		}
		[SmokeMethod("pixelMetric(QStyle::PixelMetric) const")]
		public new int PixelMetric(QStyle.PixelMetric metric) {
			return ProxyQPlastiqueStyle().PixelMetric(metric);
		}
		[SmokeMethod("polish(QWidget*)")]
		public new void Polish(QWidget widget) {
			ProxyQPlastiqueStyle().Polish(widget);
		}
		[SmokeMethod("polish(QApplication*)")]
		public new void Polish(QApplication app) {
			ProxyQPlastiqueStyle().Polish(app);
		}
		[SmokeMethod("polish(QPalette&)")]
		public new void Polish(QPalette pal) {
			ProxyQPlastiqueStyle().Polish(pal);
		}
		[SmokeMethod("unpolish(QWidget*)")]
		public new void Unpolish(QWidget widget) {
			ProxyQPlastiqueStyle().Unpolish(widget);
		}
		[SmokeMethod("unpolish(QApplication*)")]
		public new void Unpolish(QApplication app) {
			ProxyQPlastiqueStyle().Unpolish(app);
		}
		[SmokeMethod("standardPalette() const")]
		public new QPalette StandardPalette() {
			return ProxyQPlastiqueStyle().StandardPalette();
		}
		[SmokeMethod("tr(const char*, const char*)")]
		public static new string Tr(string s, string c) {
			return StaticQPlastiqueStyle().Tr(s,c);
		}
		[SmokeMethod("tr(const char*)")]
		public static new string Tr(string s) {
			return StaticQPlastiqueStyle().Tr(s);
		}
		[SmokeMethod("eventFilter(QObject*, QEvent*)")]
		public new bool EventFilter(QObject watched, QEvent arg2) {
			return ProxyQPlastiqueStyle().EventFilter(watched,arg2);
		}
		[SmokeMethod("timerEvent(QTimerEvent*)")]
		protected new void TimerEvent(QTimerEvent arg1) {
			ProxyQPlastiqueStyle().TimerEvent(arg1);
		}
		~QPlastiqueStyle() {
			DisposeQPlastiqueStyle();
		}
		public new void Dispose() {
			DisposeQPlastiqueStyle();
		}
		[SmokeMethod("~QPlastiqueStyle()")]
		private void DisposeQPlastiqueStyle() {
			ProxyQPlastiqueStyle().DisposeQPlastiqueStyle();
		}
		protected new IQPlastiqueStyleSignals Emit() {
			return (IQPlastiqueStyleSignals) Q_EMIT;
		}
	}

	public interface IQPlastiqueStyleSignals : IQWindowsStyleSignals {
	}
}
