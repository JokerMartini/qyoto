//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QKeyEvent : QInputEvent, IDisposable {
 		protected QKeyEvent(Type dummy) : base((Type) null) {}
		interface IQKeyEventProxy {
		}

		protected void CreateQKeyEventProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QKeyEvent), this);
			_interceptor = (QKeyEvent) realProxy.GetTransparentProxy();
		}
		private QKeyEvent ProxyQKeyEvent() {
			return (QKeyEvent) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QKeyEvent() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQKeyEventProxy), null);
			_staticInterceptor = (IQKeyEventProxy) realProxy.GetTransparentProxy();
		}
		private static IQKeyEventProxy StaticQKeyEvent() {
			return (IQKeyEventProxy) _staticInterceptor;
		}

		public QKeyEvent(int type, int key, int modifiers, string text, bool autorep, ushort count) : this((Type) null) {
			CreateQKeyEventProxy();
			NewQKeyEvent(type,key,modifiers,text,autorep,count);
		}
		private void NewQKeyEvent(int type, int key, int modifiers, string text, bool autorep, ushort count) {
			ProxyQKeyEvent().NewQKeyEvent(type,key,modifiers,text,autorep,count);
		}
		public QKeyEvent(int type, int key, int modifiers, string text, bool autorep) : this((Type) null) {
			CreateQKeyEventProxy();
			NewQKeyEvent(type,key,modifiers,text,autorep);
		}
		private void NewQKeyEvent(int type, int key, int modifiers, string text, bool autorep) {
			ProxyQKeyEvent().NewQKeyEvent(type,key,modifiers,text,autorep);
		}
		public QKeyEvent(int type, int key, int modifiers, string text) : this((Type) null) {
			CreateQKeyEventProxy();
			NewQKeyEvent(type,key,modifiers,text);
		}
		private void NewQKeyEvent(int type, int key, int modifiers, string text) {
			ProxyQKeyEvent().NewQKeyEvent(type,key,modifiers,text);
		}
		public QKeyEvent(int type, int key, int modifiers) : this((Type) null) {
			CreateQKeyEventProxy();
			NewQKeyEvent(type,key,modifiers);
		}
		private void NewQKeyEvent(int type, int key, int modifiers) {
			ProxyQKeyEvent().NewQKeyEvent(type,key,modifiers);
		}
		public int Key() {
			return ProxyQKeyEvent().Key();
		}
		public new int Modifiers() {
			return ProxyQKeyEvent().Modifiers();
		}
		public string Text() {
			return ProxyQKeyEvent().Text();
		}
		public bool IsAutoRepeat() {
			return ProxyQKeyEvent().IsAutoRepeat();
		}
		public int Count() {
			return ProxyQKeyEvent().Count();
		}
		~QKeyEvent() {
			ProxyQKeyEvent().Dispose();
		}
		public new void Dispose() {
			ProxyQKeyEvent().Dispose();
		}
	}
}
