//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Collections;
	using System.Text;

	/// See <see cref="IQListWidgetSignals"></see> for signals emitted by QListWidget
	public class QListWidget : QListView, IDisposable {
 		protected QListWidget(Type dummy) : base((Type) null) {}
		interface IQListWidgetProxy {
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected void CreateQListWidgetProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QListWidget), this);
			_interceptor = (QListWidget) realProxy.GetTransparentProxy();
		}
		private QListWidget ProxyQListWidget() {
			return (QListWidget) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QListWidget() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQListWidgetProxy), null);
			_staticInterceptor = (IQListWidgetProxy) realProxy.GetTransparentProxy();
		}
		private static IQListWidgetProxy StaticQListWidget() {
			return (IQListWidgetProxy) _staticInterceptor;
		}

		public new virtual QMetaObject MetaObject() {
			return ProxyQListWidget().MetaObject();
		}
		// void* qt_metacast(const char* arg1); >>>> NOT CONVERTED
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QListWidget(QWidget parent) : this((Type) null) {
			CreateQListWidgetProxy();
			NewQListWidget(parent);
		}
		private void NewQListWidget(QWidget parent) {
			ProxyQListWidget().NewQListWidget(parent);
		}
		public QListWidget() : this((Type) null) {
			CreateQListWidgetProxy();
			NewQListWidget();
		}
		private void NewQListWidget() {
			ProxyQListWidget().NewQListWidget();
		}
		public QListWidgetItem Item(int row) {
			return ProxyQListWidget().Item(row);
		}
		public int Row(QListWidgetItem item) {
			return ProxyQListWidget().Row(item);
		}
		public void InsertItem(int row, QListWidgetItem item) {
			ProxyQListWidget().InsertItem(row,item);
		}
		public void InsertItem(int row, string label) {
			ProxyQListWidget().InsertItem(row,label);
		}
		public void InsertItems(int row, string[] labels) {
			ProxyQListWidget().InsertItems(row,labels);
		}
		public void AddItem(string label) {
			ProxyQListWidget().AddItem(label);
		}
		public void AddItem(QListWidgetItem item) {
			ProxyQListWidget().AddItem(item);
		}
		public void AddItems(string[] labels) {
			ProxyQListWidget().AddItems(labels);
		}
		public QListWidgetItem TakeItem(int row) {
			return ProxyQListWidget().TakeItem(row);
		}
		public int Count() {
			return ProxyQListWidget().Count();
		}
		public QListWidgetItem CurrentItem() {
			return ProxyQListWidget().CurrentItem();
		}
		public void SetCurrentItem(QListWidgetItem item) {
			ProxyQListWidget().SetCurrentItem(item);
		}
		public int CurrentRow() {
			return ProxyQListWidget().CurrentRow();
		}
		public void SetCurrentRow(int row) {
			ProxyQListWidget().SetCurrentRow(row);
		}
		public QListWidgetItem ItemAt(QPoint p) {
			return ProxyQListWidget().ItemAt(p);
		}
		public QListWidgetItem ItemAt(int x, int y) {
			return ProxyQListWidget().ItemAt(x,y);
		}
		public QRect VisualItemRect(QListWidgetItem item) {
			return ProxyQListWidget().VisualItemRect(item);
		}
		public void SortItems(int order) {
			ProxyQListWidget().SortItems(order);
		}
		public void SortItems() {
			ProxyQListWidget().SortItems();
		}
		public void EditItem(QListWidgetItem item) {
			ProxyQListWidget().EditItem(item);
		}
		public new void OpenPersistentEditor(QListWidgetItem item) {
			ProxyQListWidget().OpenPersistentEditor(item);
		}
		public new void ClosePersistentEditor(QListWidgetItem item) {
			ProxyQListWidget().ClosePersistentEditor(item);
		}
		public bool IsItemSelected(QListWidgetItem item) {
			return ProxyQListWidget().IsItemSelected(item);
		}
		public void SetItemSelected(QListWidgetItem item, bool select) {
			ProxyQListWidget().SetItemSelected(item,select);
		}
		// QList<QListWidgetItem*> selectedItems(); >>>> NOT CONVERTED
		// QList<QListWidgetItem*> findItems(const QString& arg1,Qt::MatchFlags arg2); >>>> NOT CONVERTED
		public bool IsItemHidden(QListWidgetItem item) {
			return ProxyQListWidget().IsItemHidden(item);
		}
		public void SetItemHidden(QListWidgetItem item, bool hide) {
			ProxyQListWidget().SetItemHidden(item,hide);
		}
		public void ScrollToItem(QListWidgetItem item, int hint) {
			ProxyQListWidget().ScrollToItem(item,hint);
		}
		public void ScrollToItem(QListWidgetItem item) {
			ProxyQListWidget().ScrollToItem(item);
		}
		public void Clear() {
			ProxyQListWidget().Clear();
		}
		public static new string Tr(string s, string c) {
			return StaticQListWidget().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQListWidget().Tr(s);
		}
		protected virtual ArrayList MimeTypes() {
			return ProxyQListWidget().MimeTypes();
		}
		// QMimeData* mimeData(const QList<QListWidgetItem*> arg1); >>>> NOT CONVERTED
		protected virtual bool DropMimeData(int index, QMimeData data, int action) {
			return ProxyQListWidget().DropMimeData(index,data,action);
		}
		protected virtual int SupportedDropActions() {
			return ProxyQListWidget().SupportedDropActions();
		}
		// QList<QListWidgetItem*> items(const QMimeData* arg1); >>>> NOT CONVERTED
		protected QModelIndex IndexFromItem(QListWidgetItem item) {
			return ProxyQListWidget().IndexFromItem(item);
		}
		protected QListWidgetItem ItemFromIndex(QModelIndex index) {
			return ProxyQListWidget().ItemFromIndex(index);
		}
		~QListWidget() {
			ProxyQListWidget().Dispose();
		}
		public new void Dispose() {
			ProxyQListWidget().Dispose();
		}
	}

	public interface IQListWidgetSignals {
		void ItemPressed(QListWidgetItem item);
		void ItemClicked(QListWidgetItem item);
		void ItemDoubleClicked(QListWidgetItem item);
		void ItemActivated(QListWidgetItem item);
		void ItemEntered(QListWidgetItem item);
		void ItemChanged(QListWidgetItem item);
		void CurrentItemChanged(QListWidgetItem current, QListWidgetItem previous);
		void CurrentTextChanged(string currentText);
		void CurrentRowChanged(int currentRow);
		void ItemSelectionChanged();
	}
}
