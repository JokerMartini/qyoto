//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QFontDialog : QDialog {
 		protected QFontDialog(Type dummy) : base((Type) null) {}
		interface IQFontDialogProxy {
			string Tr(string s, string c);
			string Tr(string s);
			QFont GetFont(out bool ok, QFont def, QWidget parent);
			QFont GetFont(out bool ok, QFont def);
			QFont GetFont(out bool ok, QWidget parent);
			QFont GetFont(out bool ok);
		}

		protected void CreateQFontDialogProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QFontDialog), this);
			_interceptor = (QFontDialog) realProxy.GetTransparentProxy();
		}
		private QFontDialog ProxyQFontDialog() {
			return (QFontDialog) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QFontDialog() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQFontDialogProxy), null);
			_staticInterceptor = (IQFontDialogProxy) realProxy.GetTransparentProxy();
		}
		private static IQFontDialogProxy StaticQFontDialog() {
			return (IQFontDialogProxy) _staticInterceptor;
		}

		public new virtual QMetaObject MetaObject() {
			return ProxyQFontDialog().MetaObject();
		}
		// void* qt_metacast(const char* arg1); >>>> NOT CONVERTED
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public static new string Tr(string s, string c) {
			return StaticQFontDialog().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQFontDialog().Tr(s);
		}
		public static QFont GetFont(out bool ok, QFont def, QWidget parent) {
			return StaticQFontDialog().GetFont(out ok,def,parent);
		}
		public static QFont GetFont(out bool ok, QFont def) {
			return StaticQFontDialog().GetFont(out ok,def);
		}
		public static QFont GetFont(out bool ok, QWidget parent) {
			return StaticQFontDialog().GetFont(out ok,parent);
		}
		public static QFont GetFont(out bool ok) {
			return StaticQFontDialog().GetFont(out ok);
		}
	}
}
