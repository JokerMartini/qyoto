//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Collections;
	using System.Text;

	/// See <see cref="IQProcessSignals"></see> for signals emitted by QProcess
	public class QProcess : QIODevice, IDisposable {
 		protected QProcess(Type dummy) : base((Type) null) {}
		interface IQProcessProxy {
			string Tr(string s, string c);
			string Tr(string s);
			int Execute(string program, string[] arguments);
			int Execute(string program);
			bool StartDetached(string program, string[] arguments);
			bool StartDetached(string program);
		}

		protected void CreateQProcessProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QProcess), this);
			_interceptor = (QProcess) realProxy.GetTransparentProxy();
		}
		private QProcess ProxyQProcess() {
			return (QProcess) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QProcess() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQProcessProxy), null);
			_staticInterceptor = (IQProcessProxy) realProxy.GetTransparentProxy();
		}
		private static IQProcessProxy StaticQProcess() {
			return (IQProcessProxy) _staticInterceptor;
		}

		enum ProcessError {
			FailedToStart = 0,
			Crashed = 1,
			Timedout = 2,
			ReadError = 3,
			WriteError = 4,
			UnknownError = 5,
		}
		enum ProcessState {
			NotRunning = 0,
			Starting = 1,
			Running = 2,
		}
		enum ProcessChannel {
			StandardOutput = 0,
			StandardError = 1,
		}
		enum ProcessChannelMode {
			SeparateChannels = 0,
			MergedChannels = 1,
			ForwardedChannels = 2,
		}
		public new virtual QMetaObject MetaObject() {
			return ProxyQProcess().MetaObject();
		}
		// void* qt_metacast(const char* arg1); >>>> NOT CONVERTED
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QProcess(QObject parent) : this((Type) null) {
			CreateQProcessProxy();
			NewQProcess(parent);
		}
		private void NewQProcess(QObject parent) {
			ProxyQProcess().NewQProcess(parent);
		}
		public QProcess() : this((Type) null) {
			CreateQProcessProxy();
			NewQProcess();
		}
		private void NewQProcess() {
			ProxyQProcess().NewQProcess();
		}
		public void Start(string program, string[] arguments, int mode) {
			ProxyQProcess().Start(program,arguments,mode);
		}
		public void Start(string program, string[] arguments) {
			ProxyQProcess().Start(program,arguments);
		}
		public void Start(string program, int mode) {
			ProxyQProcess().Start(program,mode);
		}
		public void Start(string program) {
			ProxyQProcess().Start(program);
		}
		public int ReadChannelMode() {
			return ProxyQProcess().ReadChannelMode();
		}
		public void SetReadChannelMode(int mode) {
			ProxyQProcess().SetReadChannelMode(mode);
		}
		public int ReadChannel() {
			return ProxyQProcess().ReadChannel();
		}
		public void SetReadChannel(int channel) {
			ProxyQProcess().SetReadChannel(channel);
		}
		public void CloseReadChannel(int channel) {
			ProxyQProcess().CloseReadChannel(channel);
		}
		public void CloseWriteChannel() {
			ProxyQProcess().CloseWriteChannel();
		}
		public string WorkingDirectory() {
			return ProxyQProcess().WorkingDirectory();
		}
		public void SetWorkingDirectory(string dir) {
			ProxyQProcess().SetWorkingDirectory(dir);
		}
		public void SetEnvironment(string[] environment) {
			ProxyQProcess().SetEnvironment(environment);
		}
		public ArrayList Environment() {
			return ProxyQProcess().Environment();
		}
		public int Error() {
			return ProxyQProcess().Error();
		}
		public int State() {
			return ProxyQProcess().State();
		}
		public int Pid() {
			return ProxyQProcess().Pid();
		}
		public bool WaitForStarted(int msecs) {
			return ProxyQProcess().WaitForStarted(msecs);
		}
		public bool WaitForStarted() {
			return ProxyQProcess().WaitForStarted();
		}
		public new bool WaitForReadyRead(int msecs) {
			return ProxyQProcess().WaitForReadyRead(msecs);
		}
		public new bool WaitForReadyRead() {
			return ProxyQProcess().WaitForReadyRead();
		}
		public new bool WaitForBytesWritten(int msecs) {
			return ProxyQProcess().WaitForBytesWritten(msecs);
		}
		public new bool WaitForBytesWritten() {
			return ProxyQProcess().WaitForBytesWritten();
		}
		public bool WaitForFinished(int msecs) {
			return ProxyQProcess().WaitForFinished(msecs);
		}
		public bool WaitForFinished() {
			return ProxyQProcess().WaitForFinished();
		}
		public QByteArray ReadAllStandardOutput() {
			return ProxyQProcess().ReadAllStandardOutput();
		}
		public QByteArray ReadAllStandardError() {
			return ProxyQProcess().ReadAllStandardError();
		}
		public int ExitCode() {
			return ProxyQProcess().ExitCode();
		}
		// qint64 bytesAvailable(); >>>> NOT CONVERTED
		// qint64 bytesToWrite(); >>>> NOT CONVERTED
		public new bool IsSequential() {
			return ProxyQProcess().IsSequential();
		}
		public new bool CanReadLine() {
			return ProxyQProcess().CanReadLine();
		}
		public new void Close() {
			ProxyQProcess().Close();
		}
		public new bool AtEnd() {
			return ProxyQProcess().AtEnd();
		}
		public void Terminate() {
			ProxyQProcess().Terminate();
		}
		public void Kill() {
			ProxyQProcess().Kill();
		}
		public static new string Tr(string s, string c) {
			return StaticQProcess().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQProcess().Tr(s);
		}
		public static int Execute(string program, string[] arguments) {
			return StaticQProcess().Execute(program,arguments);
		}
		public static int Execute(string program) {
			return StaticQProcess().Execute(program);
		}
		public static bool StartDetached(string program, string[] arguments) {
			return StaticQProcess().StartDetached(program,arguments);
		}
		public static bool StartDetached(string program) {
			return StaticQProcess().StartDetached(program);
		}
		protected void SetProcessState(int state) {
			ProxyQProcess().SetProcessState(state);
		}
		protected virtual void SetupChildProcess() {
			ProxyQProcess().SetupChildProcess();
		}
		// qint64 readData(char* arg1,qint64 arg2); >>>> NOT CONVERTED
		// qint64 writeData(const char* arg1,qint64 arg2); >>>> NOT CONVERTED
		~QProcess() {
			ProxyQProcess().Dispose();
		}
		public void Dispose() {
			ProxyQProcess().Dispose();
		}
	}

	public interface IQProcessSignals {
		void Started();
		void Finished(int exitCode);
		void Error(int error);
		void StateChanged(int state);
		void ReadyReadStandardOutput();
		void ReadyReadStandardError();
	}
}
