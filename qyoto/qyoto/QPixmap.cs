//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QPixmap : QPaintDevice, IDisposable {
 		protected QPixmap(Type dummy) : base((Type) null) {}
		interface IQPixmapProxy {
			bool op_not(QPixmap lhs);
			int DefaultDepth();
			QPixmap GrabWindow(ulong arg1, int x, int y, int w, int h);
			QPixmap GrabWindow(ulong arg1, int x, int y, int w);
			QPixmap GrabWindow(ulong arg1, int x, int y);
			QPixmap GrabWindow(ulong arg1, int x);
			QPixmap GrabWindow(ulong arg1);
			QPixmap GrabWidget(QWidget widget, QRect rect);
			QPixmap GrabWidget(QWidget widget, int x, int y, int w, int h);
			QPixmap GrabWidget(QWidget widget, int x, int y, int w);
			QPixmap GrabWidget(QWidget widget, int x, int y);
			QPixmap GrabWidget(QWidget widget, int x);
			QPixmap GrabWidget(QWidget widget);
			QMatrix TrueMatrix(QMatrix m, int w, int h);
			QPixmap FromImage(QImage image, int flags);
			QPixmap FromImage(QImage image);
		}

		protected void CreateQPixmapProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QPixmap), this);
			_interceptor = (QPixmap) realProxy.GetTransparentProxy();
		}
		private QPixmap ProxyQPixmap() {
			return (QPixmap) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QPixmap() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQPixmapProxy), null);
			_staticInterceptor = (IQPixmapProxy) realProxy.GetTransparentProxy();
		}
		private static IQPixmapProxy StaticQPixmap() {
			return (IQPixmapProxy) _staticInterceptor;
		}

		public QPixmap() : this((Type) null) {
			CreateQPixmapProxy();
			NewQPixmap();
		}
		private void NewQPixmap() {
			ProxyQPixmap().NewQPixmap();
		}
		public QPixmap(int w, int h) : this((Type) null) {
			CreateQPixmapProxy();
			NewQPixmap(w,h);
		}
		private void NewQPixmap(int w, int h) {
			ProxyQPixmap().NewQPixmap(w,h);
		}
		public QPixmap(QSize arg1) : this((Type) null) {
			CreateQPixmapProxy();
			NewQPixmap(arg1);
		}
		private void NewQPixmap(QSize arg1) {
			ProxyQPixmap().NewQPixmap(arg1);
		}
		public QPixmap(string fileName, string format, int flags) : this((Type) null) {
			CreateQPixmapProxy();
			NewQPixmap(fileName,format,flags);
		}
		private void NewQPixmap(string fileName, string format, int flags) {
			ProxyQPixmap().NewQPixmap(fileName,format,flags);
		}
		public QPixmap(string fileName, string format) : this((Type) null) {
			CreateQPixmapProxy();
			NewQPixmap(fileName,format);
		}
		private void NewQPixmap(string fileName, string format) {
			ProxyQPixmap().NewQPixmap(fileName,format);
		}
		public QPixmap(string fileName) : this((Type) null) {
			CreateQPixmapProxy();
			NewQPixmap(fileName);
		}
		private void NewQPixmap(string fileName) {
			ProxyQPixmap().NewQPixmap(fileName);
		}
		// QPixmap* QPixmap(const char** arg1); >>>> NOT CONVERTED
		public QPixmap(QPixmap arg1) : this((Type) null) {
			CreateQPixmapProxy();
			NewQPixmap(arg1);
		}
		private void NewQPixmap(QPixmap arg1) {
			ProxyQPixmap().NewQPixmap(arg1);
		}
		//  operator QVariant(); >>>> NOT CONVERTED
		public bool IsNull() {
			return ProxyQPixmap().IsNull();
		}
		public new int DevType() {
			return ProxyQPixmap().DevType();
		}
		public new int Width() {
			return ProxyQPixmap().Width();
		}
		public new int Height() {
			return ProxyQPixmap().Height();
		}
		public QSize Size() {
			return ProxyQPixmap().Size();
		}
		public QRect Rect() {
			return ProxyQPixmap().Rect();
		}
		public new int Depth() {
			return ProxyQPixmap().Depth();
		}
		public void Fill(QColor fillColor) {
			ProxyQPixmap().Fill(fillColor);
		}
		public void Fill() {
			ProxyQPixmap().Fill();
		}
		public void Fill(QWidget widget, QPoint ofs) {
			ProxyQPixmap().Fill(widget,ofs);
		}
		public void Fill(QWidget widget, int xofs, int yofs) {
			ProxyQPixmap().Fill(widget,xofs,yofs);
		}
		public QBitmap Mask() {
			return ProxyQPixmap().Mask();
		}
		public void SetMask(QBitmap arg1) {
			ProxyQPixmap().SetMask(arg1);
		}
		public QPixmap AlphaChannel() {
			return ProxyQPixmap().AlphaChannel();
		}
		public void SetAlphaChannel(QPixmap arg1) {
			ProxyQPixmap().SetAlphaChannel(arg1);
		}
		public bool HasAlpha() {
			return ProxyQPixmap().HasAlpha();
		}
		public bool HasAlphaChannel() {
			return ProxyQPixmap().HasAlphaChannel();
		}
		public QBitmap CreateHeuristicMask(bool clipTight) {
			return ProxyQPixmap().CreateHeuristicMask(clipTight);
		}
		public QBitmap CreateHeuristicMask() {
			return ProxyQPixmap().CreateHeuristicMask();
		}
		public QBitmap CreateMaskFromColor(QColor maskColor) {
			return ProxyQPixmap().CreateMaskFromColor(maskColor);
		}
		public QPixmap Scaled(int w, int h, int aspectMode, int mode) {
			return ProxyQPixmap().Scaled(w,h,aspectMode,mode);
		}
		public QPixmap Scaled(int w, int h, int aspectMode) {
			return ProxyQPixmap().Scaled(w,h,aspectMode);
		}
		public QPixmap Scaled(int w, int h) {
			return ProxyQPixmap().Scaled(w,h);
		}
		public QPixmap Scaled(QSize s, int aspectMode, int mode) {
			return ProxyQPixmap().Scaled(s,aspectMode,mode);
		}
		public QPixmap Scaled(QSize s, int aspectMode) {
			return ProxyQPixmap().Scaled(s,aspectMode);
		}
		public QPixmap Scaled(QSize s) {
			return ProxyQPixmap().Scaled(s);
		}
		public QPixmap ScaledToWidth(int w, int mode) {
			return ProxyQPixmap().ScaledToWidth(w,mode);
		}
		public QPixmap ScaledToWidth(int w) {
			return ProxyQPixmap().ScaledToWidth(w);
		}
		public QPixmap ScaledToHeight(int h, int mode) {
			return ProxyQPixmap().ScaledToHeight(h,mode);
		}
		public QPixmap ScaledToHeight(int h) {
			return ProxyQPixmap().ScaledToHeight(h);
		}
		public QPixmap Transformed(QMatrix arg1, int mode) {
			return ProxyQPixmap().Transformed(arg1,mode);
		}
		public QPixmap Transformed(QMatrix arg1) {
			return ProxyQPixmap().Transformed(arg1);
		}
		public QImage ToImage() {
			return ProxyQPixmap().ToImage();
		}
		public bool Load(string fileName, string format, int flags) {
			return ProxyQPixmap().Load(fileName,format,flags);
		}
		public bool Load(string fileName, string format) {
			return ProxyQPixmap().Load(fileName,format);
		}
		public bool Load(string fileName) {
			return ProxyQPixmap().Load(fileName);
		}
		public bool LoadFromData(char[] buf, uint len, string format, int flags) {
			return ProxyQPixmap().LoadFromData(buf,len,format,flags);
		}
		public bool LoadFromData(char[] buf, uint len, string format) {
			return ProxyQPixmap().LoadFromData(buf,len,format);
		}
		public bool LoadFromData(char[] buf, uint len) {
			return ProxyQPixmap().LoadFromData(buf,len);
		}
		public bool LoadFromData(byte[] data, string format, int flags) {
			return ProxyQPixmap().LoadFromData(data,format,flags);
		}
		public bool LoadFromData(byte[] data, string format) {
			return ProxyQPixmap().LoadFromData(data,format);
		}
		public bool LoadFromData(byte[] data) {
			return ProxyQPixmap().LoadFromData(data);
		}
		public bool Save(string fileName, string format, int quality) {
			return ProxyQPixmap().Save(fileName,format,quality);
		}
		public bool Save(string fileName, string format) {
			return ProxyQPixmap().Save(fileName,format);
		}
		public bool Save(IQIODevice device, string format, int quality) {
			return ProxyQPixmap().Save(device,format,quality);
		}
		public bool Save(IQIODevice device, string format) {
			return ProxyQPixmap().Save(device,format);
		}
		public QPixmap Copy(int x, int y, int width, int height) {
			return ProxyQPixmap().Copy(x,y,width,height);
		}
		public QPixmap Copy(QRect rect) {
			return ProxyQPixmap().Copy(rect);
		}
		public QPixmap Copy() {
			return ProxyQPixmap().Copy();
		}
		public int SerialNumber() {
			return ProxyQPixmap().SerialNumber();
		}
		public bool IsDetached() {
			return ProxyQPixmap().IsDetached();
		}
		public void Detach() {
			ProxyQPixmap().Detach();
		}
		public bool IsQBitmap() {
			return ProxyQPixmap().IsQBitmap();
		}
		public uint Handle() {
			return ProxyQPixmap().Handle();
		}
		public new QPaintEngine PaintEngine() {
			return ProxyQPixmap().PaintEngine();
		}
		public static bool operator!(QPixmap lhs) {
			return StaticQPixmap().op_not(lhs);
		}
		public static int DefaultDepth() {
			return StaticQPixmap().DefaultDepth();
		}
		public static QPixmap GrabWindow(ulong arg1, int x, int y, int w, int h) {
			return StaticQPixmap().GrabWindow(arg1,x,y,w,h);
		}
		public static QPixmap GrabWindow(ulong arg1, int x, int y, int w) {
			return StaticQPixmap().GrabWindow(arg1,x,y,w);
		}
		public static QPixmap GrabWindow(ulong arg1, int x, int y) {
			return StaticQPixmap().GrabWindow(arg1,x,y);
		}
		public static QPixmap GrabWindow(ulong arg1, int x) {
			return StaticQPixmap().GrabWindow(arg1,x);
		}
		public static QPixmap GrabWindow(ulong arg1) {
			return StaticQPixmap().GrabWindow(arg1);
		}
		public static QPixmap GrabWidget(QWidget widget, QRect rect) {
			return StaticQPixmap().GrabWidget(widget,rect);
		}
		public static QPixmap GrabWidget(QWidget widget, int x, int y, int w, int h) {
			return StaticQPixmap().GrabWidget(widget,x,y,w,h);
		}
		public static QPixmap GrabWidget(QWidget widget, int x, int y, int w) {
			return StaticQPixmap().GrabWidget(widget,x,y,w);
		}
		public static QPixmap GrabWidget(QWidget widget, int x, int y) {
			return StaticQPixmap().GrabWidget(widget,x,y);
		}
		public static QPixmap GrabWidget(QWidget widget, int x) {
			return StaticQPixmap().GrabWidget(widget,x);
		}
		public static QPixmap GrabWidget(QWidget widget) {
			return StaticQPixmap().GrabWidget(widget);
		}
		public static QMatrix TrueMatrix(QMatrix m, int w, int h) {
			return StaticQPixmap().TrueMatrix(m,w,h);
		}
		public static QPixmap FromImage(QImage image, int flags) {
			return StaticQPixmap().FromImage(image,flags);
		}
		public static QPixmap FromImage(QImage image) {
			return StaticQPixmap().FromImage(image);
		}
		protected new int Metric(IQPaintDevice arg1) {
			return ProxyQPixmap().Metric(arg1);
		}
		~QPixmap() {
			ProxyQPixmap().Dispose();
		}
		public void Dispose() {
			ProxyQPixmap().Dispose();
		}
//	public native bool loadFromData(char[] data);

	}
}
