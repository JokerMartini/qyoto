//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QGlobalSpace : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QGlobalSpace(Type dummy) {}
		interface IQGlobalSpaceProxy {
			int QRed(uint rgb);
			int QGreen(uint rgb);
			int QBlue(uint rgb);
			int QAlpha(uint rgb);
			uint QRgb(int r, int g, int b);
			uint QRgba(int r, int g, int b, int a);
			int QGray(int r, int g, int b);
			int QGray(uint rgb);
			bool QIsGray(uint rgb);
			QDataStream op_write(QDataStream arg1, QRegion arg2);
			QDataStream op_read(QDataStream arg1, QRegion arg2);
			QDataStream op_write(QDataStream ds, QPalette p);
			QDataStream op_read(QDataStream ds, QPalette p);
			QDataStream op_write(QDataStream stream, QPolygonF array);
			QDataStream op_read(QDataStream stream, QPolygonF array);
			QDataStream op_write(QDataStream arg1, QTreeWidgetItem item);
			QDataStream op_read(QDataStream arg1, QTreeWidgetItem item);
			void QDrawShadeLine(QPainter p, int x1, int y1, int x2, int y2, QPalette pal, bool sunken, int lineWidth, int midLineWidth);
			void QDrawShadeLine(QPainter p, int x1, int y1, int x2, int y2, QPalette pal, bool sunken, int lineWidth);
			void QDrawShadeLine(QPainter p, int x1, int y1, int x2, int y2, QPalette pal, bool sunken);
			void QDrawShadeLine(QPainter p, int x1, int y1, int x2, int y2, QPalette pal);
			void QDrawShadeLine(QPainter p, QPoint p1, QPoint p2, QPalette pal, bool sunken, int lineWidth, int midLineWidth);
			void QDrawShadeLine(QPainter p, QPoint p1, QPoint p2, QPalette pal, bool sunken, int lineWidth);
			void QDrawShadeLine(QPainter p, QPoint p1, QPoint p2, QPalette pal, bool sunken);
			void QDrawShadeLine(QPainter p, QPoint p1, QPoint p2, QPalette pal);
			void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken, int lineWidth, int midLineWidth, QBrush fill);
			void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken, int lineWidth, int midLineWidth);
			void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken, int lineWidth);
			void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken);
			void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QPalette pal);
			void QDrawShadeRect(QPainter p, QRect r, QPalette pal, bool sunken, int lineWidth, int midLineWidth, QBrush fill);
			void QDrawShadeRect(QPainter p, QRect r, QPalette pal, bool sunken, int lineWidth, int midLineWidth);
			void QDrawShadeRect(QPainter p, QRect r, QPalette pal, bool sunken, int lineWidth);
			void QDrawShadeRect(QPainter p, QRect r, QPalette pal, bool sunken);
			void QDrawShadeRect(QPainter p, QRect r, QPalette pal);
			void QDrawShadePanel(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken, int lineWidth, QBrush fill);
			void QDrawShadePanel(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken, int lineWidth);
			void QDrawShadePanel(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken);
			void QDrawShadePanel(QPainter p, int x, int y, int w, int h, QPalette pal);
			void QDrawShadePanel(QPainter p, QRect r, QPalette pal, bool sunken, int lineWidth, QBrush fill);
			void QDrawShadePanel(QPainter p, QRect r, QPalette pal, bool sunken, int lineWidth);
			void QDrawShadePanel(QPainter p, QRect r, QPalette pal, bool sunken);
			void QDrawShadePanel(QPainter p, QRect r, QPalette pal);
			void QDrawWinButton(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken, QBrush fill);
			void QDrawWinButton(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken);
			void QDrawWinButton(QPainter p, int x, int y, int w, int h, QPalette pal);
			void QDrawWinButton(QPainter p, QRect r, QPalette pal, bool sunken, QBrush fill);
			void QDrawWinButton(QPainter p, QRect r, QPalette pal, bool sunken);
			void QDrawWinButton(QPainter p, QRect r, QPalette pal);
			void QDrawWinPanel(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken, QBrush fill);
			void QDrawWinPanel(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken);
			void QDrawWinPanel(QPainter p, int x, int y, int w, int h, QPalette pal);
			void QDrawWinPanel(QPainter p, QRect r, QPalette pal, bool sunken, QBrush fill);
			void QDrawWinPanel(QPainter p, QRect r, QPalette pal, bool sunken);
			void QDrawWinPanel(QPainter p, QRect r, QPalette pal);
			void QDrawPlainRect(QPainter p, int x, int y, int w, int h, QColor arg6, int lineWidth, QBrush fill);
			void QDrawPlainRect(QPainter p, int x, int y, int w, int h, QColor arg6, int lineWidth);
			void QDrawPlainRect(QPainter p, int x, int y, int w, int h, QColor arg6);
			void QDrawPlainRect(QPainter p, QRect r, QColor arg3, int lineWidth, QBrush fill);
			void QDrawPlainRect(QPainter p, QRect r, QColor arg3, int lineWidth);
			void QDrawPlainRect(QPainter p, QRect r, QColor arg3);
			QDataStream op_write(QDataStream outS, QCursor cursor);
			QDataStream op_read(QDataStream inS, QCursor cursor);
			QDataStream op_write(QDataStream arg1, QBrush arg2);
			QDataStream op_read(QDataStream arg1, QBrush arg2);
			QDataStream op_write(QDataStream arg1, QImage arg2);
			QDataStream op_read(QDataStream arg1, QImage arg2);
			QDataStream op_write(QDataStream arg1, QFont arg2);
			QDataStream op_read(QDataStream arg1, QFont arg2);
			QDataStream op_read(QDataStream arg1, QTableWidgetItem item);
			QDataStream op_write(QDataStream arg1, QTableWidgetItem item);
			QDataStream op_write(QDataStream arg1, QPixmap arg2);
			QDataStream op_read(QDataStream arg1, QPixmap arg2);
			QDataStream op_write(QDataStream arg1, QListWidgetItem item);
			QDataStream op_read(QDataStream arg1, QListWidgetItem item);
			QPoint op_mult(QPoint p, QMatrix m);
			QPointF op_mult(QPointF p, QMatrix m);
			QLineF op_mult(QLineF l, QMatrix m);
			QLine op_mult(QLine l, QMatrix m);
			QPolygon op_mult(QPolygon a, QMatrix m);
			QPolygonF op_mult(QPolygonF a, QMatrix m);
			QRegion op_mult(QRegion r, QMatrix m);
			QPainterPath op_mult(QPainterPath p, QMatrix m);
			QDataStream op_write(QDataStream arg1, QMatrix arg2);
			QDataStream op_read(QDataStream arg1, QMatrix arg2);
			QDataStream op_write(QDataStream arg1, QPen arg2);
			QDataStream op_read(QDataStream arg1, QPen arg2);
			QDataStream op_write(QDataStream arg1, QColor arg2);
			QDataStream op_read(QDataStream arg1, QColor arg2);
			QTextStream op_write(QTextStream arg1, QSplitter arg2);
			QTextStream op_read(QTextStream arg1, QSplitter arg2);
			QDataStream op_write(QDataStream arg1, QKeySequence ks);
			QDataStream op_read(QDataStream arg1, QKeySequence ks);
			QDataStream op_write(QDataStream arg1, QPicture arg2);
			QDataStream op_read(QDataStream arg1, QPicture arg2);
			QDataStream op_write(QDataStream arg1, QTextLength arg2);
			QDataStream op_read(QDataStream arg1, QTextLength arg2);
			QDataStream op_write(QDataStream arg1, QPainterPath arg2);
			QDataStream op_read(QDataStream arg1, QPainterPath arg2);
			uint QHash(QItemSelectionRange arg1);
			QDataStream op_write(QDataStream arg1, IQUrl arg2);
			QDataStream op_read(QDataStream arg1, IQUrl arg2);
			QDataStream op_write(QDataStream arg1, QPoint arg2);
			QDataStream op_read(QDataStream arg1, QPoint arg2);
			bool op_equals(QPoint p1, QPoint p2);
			QPoint op_plus(QPoint p1, QPoint p2);
			QPoint op_minus(QPoint p1, QPoint p2);
			QPoint op_minus(QPoint p);
			QDataStream op_write(QDataStream arg1, QPointF arg2);
			QDataStream op_read(QDataStream arg1, QPointF arg2);
			bool op_equals(QPointF p1, QPointF p2);
			QPointF op_plus(QPointF p1, QPointF p2);
			QPointF op_minus(QPointF p1, QPointF p2);
			QPointF op_minus(QPointF p);
			bool op_equals(char c1, char c2);
			bool op_lte(char c1, char c2);
			bool op_gte(char c1, char c2);
			bool op_lt(char c1, char c2);
			bool op_gt(char c1, char c2);
			QDataStream op_write(QDataStream arg1, char arg2);
			QDataStream op_read(QDataStream arg1, char arg2);
			QDataStream op_write(QDataStream arg1, QLocale arg2);
			QDataStream op_read(QDataStream arg1, QLocale arg2);
			QTextStream Bin(QTextStream s);
			QTextStream Oct(QTextStream s);
			QTextStream Dec(QTextStream s);
			QTextStream Hex(QTextStream s);
			QTextStream Showbase(QTextStream s);
			QTextStream Forcesign(QTextStream s);
			QTextStream Forcepoint(QTextStream s);
			QTextStream Noshowbase(QTextStream s);
			QTextStream Noforcesign(QTextStream s);
			QTextStream Noforcepoint(QTextStream s);
			QTextStream Uppercasebase(QTextStream s);
			QTextStream Uppercasedigits(QTextStream s);
			QTextStream Lowercasebase(QTextStream s);
			QTextStream Lowercasedigits(QTextStream s);
			QTextStream Fixed(QTextStream s);
			QTextStream Scientific(QTextStream s);
			QTextStream Left(QTextStream s);
			QTextStream Right(QTextStream s);
			QTextStream Center(QTextStream s);
			QTextStream Endl(QTextStream s);
			QTextStream Flush(QTextStream s);
			QTextStream Reset(QTextStream s);
			QTextStream Bom(QTextStream s);
			QTextStream Ws(QTextStream s);
			QDataStream op_write(QDataStream arg1, QLine arg2);
			QDataStream op_read(QDataStream arg1, QLine arg2);
			QDataStream op_write(QDataStream arg1, QLineF arg2);
			QDataStream op_read(QDataStream arg1, QLineF arg2);
			bool op_equals(string arg1, string arg2);
			bool op_lt(string s1, string s2);
			bool op_gt(string s1, string s2);
			bool op_lte(string s1, string s2);
			bool op_gte(string s1, string s2);
			string op_plus(string s1, string s2);
			string op_plus(string s1, char s2);
			string op_plus(char s1, string s2);
			string op_plus(byte[] ba, string s);
			string op_plus(string s, byte[] ba);
			QDataStream op_write(QDataStream arg1, string arg2);
			QDataStream op_read(QDataStream arg1, StringBuilder arg2);
			string Qstrdup(string arg1);
			uint Qstrlen(string str);
			string Qstrcpy(string dst, string src);
			string Qstrncpy(string dst, string src, uint len);
			int Qstrcmp(string str1, string str2);
			int Qstrncmp(string str1, string str2, uint len);
			int Qstricmp(string arg1, string arg2);
			int Qstrnicmp(string arg1, string arg2, uint len);
			ushort QChecksum(string s, uint len);
			bool op_equals(byte[] a1, byte[] a2);
			bool op_equals(byte[] a1, string a2);
			bool op_equals(string a1, byte[] a2);
			bool op_lt(byte[] a1, byte[] a2);
			bool op_lt(byte[] a1, string a2);
			bool op_lt(string a1, byte[] a2);
			bool op_lte(byte[] a1, byte[] a2);
			bool op_lte(byte[] a1, string a2);
			bool op_lte(string a1, byte[] a2);
			bool op_gt(byte[] a1, byte[] a2);
			bool op_gt(byte[] a1, string a2);
			bool op_gt(string a1, byte[] a2);
			bool op_gte(byte[] a1, byte[] a2);
			bool op_gte(byte[] a1, string a2);
			bool op_gte(string a1, byte[] a2);
			byte[] op_plus(byte[] a1, byte[] a2);
			byte[] op_plus(byte[] a1, char a2);
			byte[] op_plus(char a1, byte[] a2);
			QDataStream op_write(QDataStream arg1, byte[] arg2);
			QDataStream op_read(QDataStream arg1, byte[] arg2);
			byte[] QCompress(char[] data, int nbytes, int compressionLevel);
			byte[] QCompress(char[] data, int nbytes);
			byte[] QUncompress(char[] data, int nbytes);
			byte[] QCompress(byte[] data, int compressionLevel);
			byte[] QCompress(byte[] data);
			byte[] QUncompress(byte[] data);
			QDataStream op_read(QDataStream s, QVariant p);
			QDataStream op_write(QDataStream s, QVariant p);
			bool op_equals(QVariant v1, QVariant v2);
			QDataStream op_write(QDataStream arg1, QSize arg2);
			QDataStream op_read(QDataStream arg1, QSize arg2);
			bool op_equals(QSize s1, QSize s2);
			QSize op_plus(QSize s1, QSize s2);
			QSize op_minus(QSize s1, QSize s2);
			QDataStream op_write(QDataStream arg1, QSizeF arg2);
			QDataStream op_read(QDataStream arg1, QSizeF arg2);
			bool op_equals(QSizeF s1, QSizeF s2);
			QSizeF op_plus(QSizeF s1, QSizeF s2);
			QSizeF op_minus(QSizeF s1, QSizeF s2);
			QDataStream op_read(QDataStream arg1, string[] list);
			QDataStream op_write(QDataStream arg1, string[] list);
			QDataStream op_write(QDataStream arg1, QUuid arg2);
			QDataStream op_read(QDataStream arg1, QUuid arg2);
			QDataStream op_write(QDataStream arg1, DateTime arg2);
			QDataStream op_read(QDataStream arg1, DateTime arg2);
			string QAppName();
			int QRound(double d);
			string QVersion();
			bool QSharedBuild();
			bool op_equals(QBool b1, bool b2);
			bool op_equals(bool b1, QBool b2);
			bool op_equals(QBool b1, QBool b2);
			byte[] Qgetenv(string varName);
			int QIntCast(double f);
			int QIntCast(float f);
			bool op_equals(QRect arg1, QRect arg2);
			QDataStream op_write(QDataStream arg1, QRect arg2);
			QDataStream op_read(QDataStream arg1, QRect arg2);
			bool op_equals(QRectF arg1, QRectF arg2);
			QDataStream op_write(QDataStream arg1, QRectF arg2);
			QDataStream op_read(QDataStream arg1, QRectF arg2);
			QTextStream op_write(QTextStream arg1, QDomNode arg2);
			bool op_equals(QGLFormat arg1, QGLFormat arg2);
		}

		protected void CreateQGlobalSpaceProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QGlobalSpace), this);
			_interceptor = (QGlobalSpace) realProxy.GetTransparentProxy();
		}
		private QGlobalSpace ProxyQGlobalSpace() {
			return (QGlobalSpace) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QGlobalSpace() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQGlobalSpaceProxy), null);
			_staticInterceptor = (IQGlobalSpaceProxy) realProxy.GetTransparentProxy();
		}
		private static IQGlobalSpaceProxy StaticQGlobalSpace() {
			return (IQGlobalSpaceProxy) _staticInterceptor;
		}

		public static int QRed(uint rgb) {
			return StaticQGlobalSpace().QRed(rgb);
		}
		public static int QGreen(uint rgb) {
			return StaticQGlobalSpace().QGreen(rgb);
		}
		public static int QBlue(uint rgb) {
			return StaticQGlobalSpace().QBlue(rgb);
		}
		public static int QAlpha(uint rgb) {
			return StaticQGlobalSpace().QAlpha(rgb);
		}
		public static uint QRgb(int r, int g, int b) {
			return StaticQGlobalSpace().QRgb(r,g,b);
		}
		public static uint QRgba(int r, int g, int b, int a) {
			return StaticQGlobalSpace().QRgba(r,g,b,a);
		}
		public static int QGray(int r, int g, int b) {
			return StaticQGlobalSpace().QGray(r,g,b);
		}
		public static int QGray(uint rgb) {
			return StaticQGlobalSpace().QGray(rgb);
		}
		public static bool QIsGray(uint rgb) {
			return StaticQGlobalSpace().QIsGray(rgb);
		}
		///<remarks>**************************************************
		///  QRegion stream functions
		///**************************************************</remarks>		<short>                                                                                QRegion stream functions                                                                            </short>
		public static QDataStream op_write(QDataStream arg1, QRegion arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QRegion arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QPalette stream functions
		///**************************************************</remarks>		<short>                                                                                QPalette stream functions                                                                            </short>
		public static QDataStream op_write(QDataStream ds, QPalette p) {
			return StaticQGlobalSpace().op_write(ds,p);
		}
		public static QDataStream op_read(QDataStream ds, QPalette p) {
			return StaticQGlobalSpace().op_read(ds,p);
		}
		///<remarks>**************************************************
		///  QPolygonF stream functions
		///**************************************************</remarks>		<short>                                                                                QPolygonF stream functions                                                                            </short>
		public static QDataStream op_write(QDataStream stream, QPolygonF array) {
			return StaticQGlobalSpace().op_write(stream,array);
		}
		public static QDataStream op_read(QDataStream stream, QPolygonF array) {
			return StaticQGlobalSpace().op_read(stream,array);
		}
		public static QDataStream op_write(QDataStream arg1, QTreeWidgetItem item) {
			return StaticQGlobalSpace().op_write(arg1,item);
		}
		public static QDataStream op_read(QDataStream arg1, QTreeWidgetItem item) {
			return StaticQGlobalSpace().op_read(arg1,item);
		}
		public static void QDrawShadeLine(QPainter p, int x1, int y1, int x2, int y2, QPalette pal, bool sunken, int lineWidth, int midLineWidth) {
			StaticQGlobalSpace().QDrawShadeLine(p,x1,y1,x2,y2,pal,sunken,lineWidth,midLineWidth);
		}
		public static void QDrawShadeLine(QPainter p, int x1, int y1, int x2, int y2, QPalette pal, bool sunken, int lineWidth) {
			StaticQGlobalSpace().QDrawShadeLine(p,x1,y1,x2,y2,pal,sunken,lineWidth);
		}
		public static void QDrawShadeLine(QPainter p, int x1, int y1, int x2, int y2, QPalette pal, bool sunken) {
			StaticQGlobalSpace().QDrawShadeLine(p,x1,y1,x2,y2,pal,sunken);
		}
		public static void QDrawShadeLine(QPainter p, int x1, int y1, int x2, int y2, QPalette pal) {
			StaticQGlobalSpace().QDrawShadeLine(p,x1,y1,x2,y2,pal);
		}
		public static void QDrawShadeLine(QPainter p, QPoint p1, QPoint p2, QPalette pal, bool sunken, int lineWidth, int midLineWidth) {
			StaticQGlobalSpace().QDrawShadeLine(p,p1,p2,pal,sunken,lineWidth,midLineWidth);
		}
		public static void QDrawShadeLine(QPainter p, QPoint p1, QPoint p2, QPalette pal, bool sunken, int lineWidth) {
			StaticQGlobalSpace().QDrawShadeLine(p,p1,p2,pal,sunken,lineWidth);
		}
		public static void QDrawShadeLine(QPainter p, QPoint p1, QPoint p2, QPalette pal, bool sunken) {
			StaticQGlobalSpace().QDrawShadeLine(p,p1,p2,pal,sunken);
		}
		public static void QDrawShadeLine(QPainter p, QPoint p1, QPoint p2, QPalette pal) {
			StaticQGlobalSpace().QDrawShadeLine(p,p1,p2,pal);
		}
		public static void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken, int lineWidth, int midLineWidth, QBrush fill) {
			StaticQGlobalSpace().QDrawShadeRect(p,x,y,w,h,pal,sunken,lineWidth,midLineWidth,fill);
		}
		public static void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken, int lineWidth, int midLineWidth) {
			StaticQGlobalSpace().QDrawShadeRect(p,x,y,w,h,pal,sunken,lineWidth,midLineWidth);
		}
		public static void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken, int lineWidth) {
			StaticQGlobalSpace().QDrawShadeRect(p,x,y,w,h,pal,sunken,lineWidth);
		}
		public static void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken) {
			StaticQGlobalSpace().QDrawShadeRect(p,x,y,w,h,pal,sunken);
		}
		public static void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QPalette pal) {
			StaticQGlobalSpace().QDrawShadeRect(p,x,y,w,h,pal);
		}
		public static void QDrawShadeRect(QPainter p, QRect r, QPalette pal, bool sunken, int lineWidth, int midLineWidth, QBrush fill) {
			StaticQGlobalSpace().QDrawShadeRect(p,r,pal,sunken,lineWidth,midLineWidth,fill);
		}
		public static void QDrawShadeRect(QPainter p, QRect r, QPalette pal, bool sunken, int lineWidth, int midLineWidth) {
			StaticQGlobalSpace().QDrawShadeRect(p,r,pal,sunken,lineWidth,midLineWidth);
		}
		public static void QDrawShadeRect(QPainter p, QRect r, QPalette pal, bool sunken, int lineWidth) {
			StaticQGlobalSpace().QDrawShadeRect(p,r,pal,sunken,lineWidth);
		}
		public static void QDrawShadeRect(QPainter p, QRect r, QPalette pal, bool sunken) {
			StaticQGlobalSpace().QDrawShadeRect(p,r,pal,sunken);
		}
		public static void QDrawShadeRect(QPainter p, QRect r, QPalette pal) {
			StaticQGlobalSpace().QDrawShadeRect(p,r,pal);
		}
		public static void QDrawShadePanel(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken, int lineWidth, QBrush fill) {
			StaticQGlobalSpace().QDrawShadePanel(p,x,y,w,h,pal,sunken,lineWidth,fill);
		}
		public static void QDrawShadePanel(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken, int lineWidth) {
			StaticQGlobalSpace().QDrawShadePanel(p,x,y,w,h,pal,sunken,lineWidth);
		}
		public static void QDrawShadePanel(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken) {
			StaticQGlobalSpace().QDrawShadePanel(p,x,y,w,h,pal,sunken);
		}
		public static void QDrawShadePanel(QPainter p, int x, int y, int w, int h, QPalette pal) {
			StaticQGlobalSpace().QDrawShadePanel(p,x,y,w,h,pal);
		}
		public static void QDrawShadePanel(QPainter p, QRect r, QPalette pal, bool sunken, int lineWidth, QBrush fill) {
			StaticQGlobalSpace().QDrawShadePanel(p,r,pal,sunken,lineWidth,fill);
		}
		public static void QDrawShadePanel(QPainter p, QRect r, QPalette pal, bool sunken, int lineWidth) {
			StaticQGlobalSpace().QDrawShadePanel(p,r,pal,sunken,lineWidth);
		}
		public static void QDrawShadePanel(QPainter p, QRect r, QPalette pal, bool sunken) {
			StaticQGlobalSpace().QDrawShadePanel(p,r,pal,sunken);
		}
		public static void QDrawShadePanel(QPainter p, QRect r, QPalette pal) {
			StaticQGlobalSpace().QDrawShadePanel(p,r,pal);
		}
		public static void QDrawWinButton(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken, QBrush fill) {
			StaticQGlobalSpace().QDrawWinButton(p,x,y,w,h,pal,sunken,fill);
		}
		public static void QDrawWinButton(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken) {
			StaticQGlobalSpace().QDrawWinButton(p,x,y,w,h,pal,sunken);
		}
		public static void QDrawWinButton(QPainter p, int x, int y, int w, int h, QPalette pal) {
			StaticQGlobalSpace().QDrawWinButton(p,x,y,w,h,pal);
		}
		public static void QDrawWinButton(QPainter p, QRect r, QPalette pal, bool sunken, QBrush fill) {
			StaticQGlobalSpace().QDrawWinButton(p,r,pal,sunken,fill);
		}
		public static void QDrawWinButton(QPainter p, QRect r, QPalette pal, bool sunken) {
			StaticQGlobalSpace().QDrawWinButton(p,r,pal,sunken);
		}
		public static void QDrawWinButton(QPainter p, QRect r, QPalette pal) {
			StaticQGlobalSpace().QDrawWinButton(p,r,pal);
		}
		public static void QDrawWinPanel(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken, QBrush fill) {
			StaticQGlobalSpace().QDrawWinPanel(p,x,y,w,h,pal,sunken,fill);
		}
		public static void QDrawWinPanel(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken) {
			StaticQGlobalSpace().QDrawWinPanel(p,x,y,w,h,pal,sunken);
		}
		public static void QDrawWinPanel(QPainter p, int x, int y, int w, int h, QPalette pal) {
			StaticQGlobalSpace().QDrawWinPanel(p,x,y,w,h,pal);
		}
		public static void QDrawWinPanel(QPainter p, QRect r, QPalette pal, bool sunken, QBrush fill) {
			StaticQGlobalSpace().QDrawWinPanel(p,r,pal,sunken,fill);
		}
		public static void QDrawWinPanel(QPainter p, QRect r, QPalette pal, bool sunken) {
			StaticQGlobalSpace().QDrawWinPanel(p,r,pal,sunken);
		}
		public static void QDrawWinPanel(QPainter p, QRect r, QPalette pal) {
			StaticQGlobalSpace().QDrawWinPanel(p,r,pal);
		}
		public static void QDrawPlainRect(QPainter p, int x, int y, int w, int h, QColor arg6, int lineWidth, QBrush fill) {
			StaticQGlobalSpace().QDrawPlainRect(p,x,y,w,h,arg6,lineWidth,fill);
		}
		public static void QDrawPlainRect(QPainter p, int x, int y, int w, int h, QColor arg6, int lineWidth) {
			StaticQGlobalSpace().QDrawPlainRect(p,x,y,w,h,arg6,lineWidth);
		}
		public static void QDrawPlainRect(QPainter p, int x, int y, int w, int h, QColor arg6) {
			StaticQGlobalSpace().QDrawPlainRect(p,x,y,w,h,arg6);
		}
		public static void QDrawPlainRect(QPainter p, QRect r, QColor arg3, int lineWidth, QBrush fill) {
			StaticQGlobalSpace().QDrawPlainRect(p,r,arg3,lineWidth,fill);
		}
		public static void QDrawPlainRect(QPainter p, QRect r, QColor arg3, int lineWidth) {
			StaticQGlobalSpace().QDrawPlainRect(p,r,arg3,lineWidth);
		}
		public static void QDrawPlainRect(QPainter p, QRect r, QColor arg3) {
			StaticQGlobalSpace().QDrawPlainRect(p,r,arg3);
		}
		///<remarks>**************************************************
		///  QCursor stream functions
		///**************************************************</remarks>		<short>                                                                                QCursor stream functions                                                                            </short>
		public static QDataStream op_write(QDataStream outS, QCursor cursor) {
			return StaticQGlobalSpace().op_write(outS,cursor);
		}
		public static QDataStream op_read(QDataStream inS, QCursor cursor) {
			return StaticQGlobalSpace().op_read(inS,cursor);
		}
		///<remarks>**************************************************
		///  QBrush stream functions
		///**************************************************</remarks>		<short>                                                                                QBrush stream functions                                                                            </short>
		public static QDataStream op_write(QDataStream arg1, QBrush arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QBrush arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		public static QDataStream op_write(QDataStream arg1, QImage arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QImage arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QFont stream functions
		///**************************************************</remarks>		<short>                                                                                QFont stream functions                                                                            </short>
		public static QDataStream op_write(QDataStream arg1, QFont arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QFont arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QTableWidgetItem item) {
			return StaticQGlobalSpace().op_read(arg1,item);
		}
		public static QDataStream op_write(QDataStream arg1, QTableWidgetItem item) {
			return StaticQGlobalSpace().op_write(arg1,item);
		}
		///<remarks>**************************************************
		/// QPixmap stream functions
		///**************************************************</remarks>		<short>                                                                               QPixmap stream functions                                                                            </short>
		public static QDataStream op_write(QDataStream arg1, QPixmap arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QPixmap arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		public static QDataStream op_write(QDataStream arg1, QListWidgetItem item) {
			return StaticQGlobalSpace().op_write(arg1,item);
		}
		public static QDataStream op_read(QDataStream arg1, QListWidgetItem item) {
			return StaticQGlobalSpace().op_read(arg1,item);
		}
		public static QPoint op_mult(QPoint p, QMatrix m) {
			return StaticQGlobalSpace().op_mult(p,m);
		}
		public static QPointF op_mult(QPointF p, QMatrix m) {
			return StaticQGlobalSpace().op_mult(p,m);
		}
		public static QLineF op_mult(QLineF l, QMatrix m) {
			return StaticQGlobalSpace().op_mult(l,m);
		}
		public static QLine op_mult(QLine l, QMatrix m) {
			return StaticQGlobalSpace().op_mult(l,m);
		}
		public static QPolygon op_mult(QPolygon a, QMatrix m) {
			return StaticQGlobalSpace().op_mult(a,m);
		}
		public static QPolygonF op_mult(QPolygonF a, QMatrix m) {
			return StaticQGlobalSpace().op_mult(a,m);
		}
		public static QRegion op_mult(QRegion r, QMatrix m) {
			return StaticQGlobalSpace().op_mult(r,m);
		}
		public static QPainterPath op_mult(QPainterPath p, QMatrix m) {
			return StaticQGlobalSpace().op_mult(p,m);
		}
		///<remarks>**************************************************
		/// QMatrix stream functions
		///**************************************************</remarks>		<short>                                                                               QMatrix stream functions                                                                            </short>
		public static QDataStream op_write(QDataStream arg1, QMatrix arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QMatrix arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QPen stream functions
		///**************************************************</remarks>		<short>                                                                                QPen stream functions                                                                            </short>
		public static QDataStream op_write(QDataStream arg1, QPen arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QPen arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		public static QDataStream op_write(QDataStream arg1, QColor arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QColor arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		public static QTextStream op_write(QTextStream arg1, QSplitter arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QTextStream op_read(QTextStream arg1, QSplitter arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		public static QDataStream op_write(QDataStream arg1, QKeySequence ks) {
			return StaticQGlobalSpace().op_write(arg1,ks);
		}
		public static QDataStream op_read(QDataStream arg1, QKeySequence ks) {
			return StaticQGlobalSpace().op_read(arg1,ks);
		}
		///<remarks>**************************************************
		///  QPicture stream functions
		///**************************************************</remarks>		<short>                                                                                QPicture stream functions                                                                            </short>
		public static QDataStream op_write(QDataStream arg1, QPicture arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QPicture arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		public static QDataStream op_write(QDataStream arg1, QTextLength arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QTextLength arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		// QDataStream& operator<<(QDataStream& arg1,const QTextFormat& arg2); >>>> NOT CONVERTED
		// QDataStream& operator>>(QDataStream& arg1,QTextFormat& arg2); >>>> NOT CONVERTED
		public static QDataStream op_write(QDataStream arg1, QPainterPath arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QPainterPath arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		public static uint QHash(QItemSelectionRange arg1) {
			return StaticQGlobalSpace().QHash(arg1);
		}
		public static QDataStream op_write(QDataStream arg1, IQUrl arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, IQUrl arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QPoint stream functions
		///**************************************************</remarks>		<short>                                                                                QPoint stream functions                                                                            </short>
		public static QDataStream op_write(QDataStream arg1, QPoint arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QPoint arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QPoint inline functions
		///**************************************************</remarks>		<short>                                                                                QPoint inline functions                                                                            </short>
		public static bool op_equals(QPoint p1, QPoint p2) {
			return StaticQGlobalSpace().op_equals(p1,p2);
		}
		public static QPoint op_plus(QPoint p1, QPoint p2) {
			return StaticQGlobalSpace().op_plus(p1,p2);
		}
		public static QPoint op_minus(QPoint p1, QPoint p2) {
			return StaticQGlobalSpace().op_minus(p1,p2);
		}
		// const QPoint operator*(const QPoint& arg1,qreal arg2); >>>> NOT CONVERTED
		// const QPoint operator*(qreal arg1,const QPoint& arg2); >>>> NOT CONVERTED
		public static QPoint op_minus(QPoint p) {
			return StaticQGlobalSpace().op_minus(p);
		}
		// const QPoint operator/(const QPoint& arg1,qreal arg2); >>>> NOT CONVERTED
		///<remarks>**************************************************
		///  QPointF stream functions
		///**************************************************</remarks>		<short>                                                                                QPointF stream functions                                                                            </short>
		public static QDataStream op_write(QDataStream arg1, QPointF arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QPointF arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QPointF inline functions
		///**************************************************</remarks>		<short>                                                                                QPointF inline functions                                                                            </short>
		public static bool op_equals(QPointF p1, QPointF p2) {
			return StaticQGlobalSpace().op_equals(p1,p2);
		}
		public static QPointF op_plus(QPointF p1, QPointF p2) {
			return StaticQGlobalSpace().op_plus(p1,p2);
		}
		public static QPointF op_minus(QPointF p1, QPointF p2) {
			return StaticQGlobalSpace().op_minus(p1,p2);
		}
		// const QPointF operator*(const QPointF& arg1,qreal arg2); >>>> NOT CONVERTED
		// const QPointF operator*(qreal arg1,const QPointF& arg2); >>>> NOT CONVERTED
		public static QPointF op_minus(QPointF p) {
			return StaticQGlobalSpace().op_minus(p);
		}
		// const QPointF operator/(const QPointF& arg1,qreal arg2); >>>> NOT CONVERTED
		// QBitArray operator&(const QBitArray& arg1,const QBitArray& arg2); >>>> NOT CONVERTED
		// QBitArray operator|(const QBitArray& arg1,const QBitArray& arg2); >>>> NOT CONVERTED
		// QBitArray operator^(const QBitArray& arg1,const QBitArray& arg2); >>>> NOT CONVERTED
		// QDataStream& operator<<(QDataStream& arg1,const QBitArray& arg2); >>>> NOT CONVERTED
		// QDataStream& operator>>(QDataStream& arg1,QBitArray& arg2); >>>> NOT CONVERTED
		public static bool op_equals(char c1, char c2) {
			return StaticQGlobalSpace().op_equals(c1,c2);
		}
		public static bool op_lte(char c1, char c2) {
			return StaticQGlobalSpace().op_lte(c1,c2);
		}
		public static bool op_gte(char c1, char c2) {
			return StaticQGlobalSpace().op_gte(c1,c2);
		}
		public static bool op_lt(char c1, char c2) {
			return StaticQGlobalSpace().op_lt(c1,c2);
		}
		public static bool op_gt(char c1, char c2) {
			return StaticQGlobalSpace().op_gt(c1,c2);
		}
		public static QDataStream op_write(QDataStream arg1, char arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, char arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		public static QDataStream op_write(QDataStream arg1, QLocale arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QLocale arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		// QTextStream& operator>>(QTextStream& arg1,QTextStreamFunction arg2); >>>> NOT CONVERTED
		// QTextStream& operator<<(QTextStream& arg1,QTextStreamFunction arg2); >>>> NOT CONVERTED
		// QTextStream& operator<<(QTextStream& arg1,QTextStreamManipulator arg2); >>>> NOT CONVERTED
		public static QTextStream Bin(QTextStream s) {
			return StaticQGlobalSpace().Bin(s);
		}
		public static QTextStream Oct(QTextStream s) {
			return StaticQGlobalSpace().Oct(s);
		}
		public static QTextStream Dec(QTextStream s) {
			return StaticQGlobalSpace().Dec(s);
		}
		public static QTextStream Hex(QTextStream s) {
			return StaticQGlobalSpace().Hex(s);
		}
		public static QTextStream Showbase(QTextStream s) {
			return StaticQGlobalSpace().Showbase(s);
		}
		public static QTextStream Forcesign(QTextStream s) {
			return StaticQGlobalSpace().Forcesign(s);
		}
		public static QTextStream Forcepoint(QTextStream s) {
			return StaticQGlobalSpace().Forcepoint(s);
		}
		public static QTextStream Noshowbase(QTextStream s) {
			return StaticQGlobalSpace().Noshowbase(s);
		}
		public static QTextStream Noforcesign(QTextStream s) {
			return StaticQGlobalSpace().Noforcesign(s);
		}
		public static QTextStream Noforcepoint(QTextStream s) {
			return StaticQGlobalSpace().Noforcepoint(s);
		}
		public static QTextStream Uppercasebase(QTextStream s) {
			return StaticQGlobalSpace().Uppercasebase(s);
		}
		public static QTextStream Uppercasedigits(QTextStream s) {
			return StaticQGlobalSpace().Uppercasedigits(s);
		}
		public static QTextStream Lowercasebase(QTextStream s) {
			return StaticQGlobalSpace().Lowercasebase(s);
		}
		public static QTextStream Lowercasedigits(QTextStream s) {
			return StaticQGlobalSpace().Lowercasedigits(s);
		}
		public static QTextStream Fixed(QTextStream s) {
			return StaticQGlobalSpace().Fixed(s);
		}
		public static QTextStream Scientific(QTextStream s) {
			return StaticQGlobalSpace().Scientific(s);
		}
		public static QTextStream Left(QTextStream s) {
			return StaticQGlobalSpace().Left(s);
		}
		public static QTextStream Right(QTextStream s) {
			return StaticQGlobalSpace().Right(s);
		}
		public static QTextStream Center(QTextStream s) {
			return StaticQGlobalSpace().Center(s);
		}
		public static QTextStream Endl(QTextStream s) {
			return StaticQGlobalSpace().Endl(s);
		}
		public static QTextStream Flush(QTextStream s) {
			return StaticQGlobalSpace().Flush(s);
		}
		public static QTextStream Reset(QTextStream s) {
			return StaticQGlobalSpace().Reset(s);
		}
		public static QTextStream Bom(QTextStream s) {
			return StaticQGlobalSpace().Bom(s);
		}
		public static QTextStream Ws(QTextStream s) {
			return StaticQGlobalSpace().Ws(s);
		}
		// QTextStreamManipulator qSetFieldWidth(int arg1); >>>> NOT CONVERTED
		// QTextStreamManipulator qSetPadChar(QChar arg1); >>>> NOT CONVERTED
		// QTextStreamManipulator qSetRealNumberPrecision(int arg1); >>>> NOT CONVERTED
		// QDebug qDebug(); >>>> NOT CONVERTED
		// QDebug qWarning(); >>>> NOT CONVERTED
		// QDebug qCritical(); >>>> NOT CONVERTED
		public static QDataStream op_write(QDataStream arg1, QLine arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QLine arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		public static QDataStream op_write(QDataStream arg1, QLineF arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QLineF arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		public static bool op_equals(string arg1, string arg2) {
			return StaticQGlobalSpace().op_equals(arg1,arg2);
		}
		public static bool op_lt(string s1, string s2) {
			return StaticQGlobalSpace().op_lt(s1,s2);
		}
		public static bool op_gt(string s1, string s2) {
			return StaticQGlobalSpace().op_gt(s1,s2);
		}
		public static bool op_lte(string s1, string s2) {
			return StaticQGlobalSpace().op_lte(s1,s2);
		}
		public static bool op_gte(string s1, string s2) {
			return StaticQGlobalSpace().op_gte(s1,s2);
		}
		public static string op_plus(string s1, string s2) {
			return StaticQGlobalSpace().op_plus(s1,s2);
		}
		public static string op_plus(string s1, char s2) {
			return StaticQGlobalSpace().op_plus(s1,s2);
		}
		public static string op_plus(char s1, string s2) {
			return StaticQGlobalSpace().op_plus(s1,s2);
		}
		public static string op_plus(byte[] ba, string s) {
			return StaticQGlobalSpace().op_plus(ba,s);
		}
		public static string op_plus(string s, byte[] ba) {
			return StaticQGlobalSpace().op_plus(s,ba);
		}
		public static QDataStream op_write(QDataStream arg1, string arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, StringBuilder arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		///<remarks>**************************************************
		///  Safe and portable C string functions; extensions to standard string.h
		///**************************************************</remarks>		<short>                                                                                Safe and portable C string functions; extensions to standard string.</short>
		public static string Qstrdup(string arg1) {
			return StaticQGlobalSpace().Qstrdup(arg1);
		}
		public static uint Qstrlen(string str) {
			return StaticQGlobalSpace().Qstrlen(str);
		}
		public static string Qstrcpy(string dst, string src) {
			return StaticQGlobalSpace().Qstrcpy(dst,src);
		}
		public static string Qstrncpy(string dst, string src, uint len) {
			return StaticQGlobalSpace().Qstrncpy(dst,src,len);
		}
		public static int Qstrcmp(string str1, string str2) {
			return StaticQGlobalSpace().Qstrcmp(str1,str2);
		}
		public static int Qstrncmp(string str1, string str2, uint len) {
			return StaticQGlobalSpace().Qstrncmp(str1,str2,len);
		}
		public static int Qstricmp(string arg1, string arg2) {
			return StaticQGlobalSpace().Qstricmp(arg1,arg2);
		}
		public static int Qstrnicmp(string arg1, string arg2, uint len) {
			return StaticQGlobalSpace().Qstrnicmp(arg1,arg2,len);
		}
		// int qvsnprintf(char* arg1,size_t arg2,const char* arg3,va_list arg4); >>>> NOT CONVERTED
		public static ushort QChecksum(string s, uint len) {
			return StaticQGlobalSpace().QChecksum(s,len);
		}
		public static bool op_equals(byte[] a1, byte[] a2) {
			return StaticQGlobalSpace().op_equals(a1,a2);
		}
		public static bool op_equals(byte[] a1, string a2) {
			return StaticQGlobalSpace().op_equals(a1,a2);
		}
		public static bool op_equals(string a1, byte[] a2) {
			return StaticQGlobalSpace().op_equals(a1,a2);
		}
		public static bool op_lt(byte[] a1, byte[] a2) {
			return StaticQGlobalSpace().op_lt(a1,a2);
		}
		public static bool op_lt(byte[] a1, string a2) {
			return StaticQGlobalSpace().op_lt(a1,a2);
		}
		public static bool op_lt(string a1, byte[] a2) {
			return StaticQGlobalSpace().op_lt(a1,a2);
		}
		public static bool op_lte(byte[] a1, byte[] a2) {
			return StaticQGlobalSpace().op_lte(a1,a2);
		}
		public static bool op_lte(byte[] a1, string a2) {
			return StaticQGlobalSpace().op_lte(a1,a2);
		}
		public static bool op_lte(string a1, byte[] a2) {
			return StaticQGlobalSpace().op_lte(a1,a2);
		}
		public static bool op_gt(byte[] a1, byte[] a2) {
			return StaticQGlobalSpace().op_gt(a1,a2);
		}
		public static bool op_gt(byte[] a1, string a2) {
			return StaticQGlobalSpace().op_gt(a1,a2);
		}
		public static bool op_gt(string a1, byte[] a2) {
			return StaticQGlobalSpace().op_gt(a1,a2);
		}
		public static bool op_gte(byte[] a1, byte[] a2) {
			return StaticQGlobalSpace().op_gte(a1,a2);
		}
		public static bool op_gte(byte[] a1, string a2) {
			return StaticQGlobalSpace().op_gte(a1,a2);
		}
		public static bool op_gte(string a1, byte[] a2) {
			return StaticQGlobalSpace().op_gte(a1,a2);
		}
		public static byte[] op_plus(byte[] a1, byte[] a2) {
			return StaticQGlobalSpace().op_plus(a1,a2);
		}
		public static byte[] op_plus(byte[] a1, char a2) {
			return StaticQGlobalSpace().op_plus(a1,a2);
		}
		public static byte[] op_plus(char a1, byte[] a2) {
			return StaticQGlobalSpace().op_plus(a1,a2);
		}
		public static QDataStream op_write(QDataStream arg1, byte[] arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, byte[] arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		public static byte[] QCompress(char[] data, int nbytes, int compressionLevel) {
			return StaticQGlobalSpace().QCompress(data,nbytes,compressionLevel);
		}
		public static byte[] QCompress(char[] data, int nbytes) {
			return StaticQGlobalSpace().QCompress(data,nbytes);
		}
		public static byte[] QUncompress(char[] data, int nbytes) {
			return StaticQGlobalSpace().QUncompress(data,nbytes);
		}
		public static byte[] QCompress(byte[] data, int compressionLevel) {
			return StaticQGlobalSpace().QCompress(data,compressionLevel);
		}
		public static byte[] QCompress(byte[] data) {
			return StaticQGlobalSpace().QCompress(data);
		}
		public static byte[] QUncompress(byte[] data) {
			return StaticQGlobalSpace().QUncompress(data);
		}
		// bool qvariant_cast_helper(const QVariant& arg1,QVariant::Type arg2,void* arg3); >>>> NOT CONVERTED
		public static QDataStream op_read(QDataStream s, QVariant p) {
			return StaticQGlobalSpace().op_read(s,p);
		}
		public static QDataStream op_write(QDataStream s, QVariant p) {
			return StaticQGlobalSpace().op_write(s,p);
		}
		public static bool op_equals(QVariant v1, QVariant v2) {
			return StaticQGlobalSpace().op_equals(v1,v2);
		}
		///<remarks>**************************************************
		///  QSize stream functions
		///**************************************************</remarks>		<short>                                                                                QSize stream functions                                                                            </short>
		public static QDataStream op_write(QDataStream arg1, QSize arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QSize arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QSize inline functions
		///**************************************************</remarks>		<short>                                                                                QSize inline functions                                                                            </short>
		public static bool op_equals(QSize s1, QSize s2) {
			return StaticQGlobalSpace().op_equals(s1,s2);
		}
		public static QSize op_plus(QSize s1, QSize s2) {
			return StaticQGlobalSpace().op_plus(s1,s2);
		}
		public static QSize op_minus(QSize s1, QSize s2) {
			return StaticQGlobalSpace().op_minus(s1,s2);
		}
		// const QSize operator*(const QSize& arg1,qreal arg2); >>>> NOT CONVERTED
		// const QSize operator*(qreal arg1,const QSize& arg2); >>>> NOT CONVERTED
		// const QSize operator/(const QSize& arg1,qreal arg2); >>>> NOT CONVERTED
		///<remarks>**************************************************
		///  QSizeF stream functions
		///**************************************************</remarks>		<short>                                                                                QSizeF stream functions                                                                            </short>
		public static QDataStream op_write(QDataStream arg1, QSizeF arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QSizeF arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QSizeF inline functions
		///**************************************************</remarks>		<short>                                                                                QSizeF inline functions                                                                            </short>
		public static bool op_equals(QSizeF s1, QSizeF s2) {
			return StaticQGlobalSpace().op_equals(s1,s2);
		}
		public static QSizeF op_plus(QSizeF s1, QSizeF s2) {
			return StaticQGlobalSpace().op_plus(s1,s2);
		}
		public static QSizeF op_minus(QSizeF s1, QSizeF s2) {
			return StaticQGlobalSpace().op_minus(s1,s2);
		}
		// const QSizeF operator*(const QSizeF& arg1,qreal arg2); >>>> NOT CONVERTED
		// const QSizeF operator*(qreal arg1,const QSizeF& arg2); >>>> NOT CONVERTED
		// const QSizeF operator/(const QSizeF& arg1,qreal arg2); >>>> NOT CONVERTED
		public static QDataStream op_read(QDataStream arg1, string[] list) {
			return StaticQGlobalSpace().op_read(arg1,list);
		}
		public static QDataStream op_write(QDataStream arg1, string[] list) {
			return StaticQGlobalSpace().op_write(arg1,list);
		}
		public static QDataStream op_write(QDataStream arg1, QUuid arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QUuid arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		public static QDataStream op_write(QDataStream arg1, DateTime arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, DateTime arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		// void qAddPostRoutine(QtCleanUpFunction arg1); >>>> NOT CONVERTED
		// void qRemovePostRoutine(QtCleanUpFunction arg1); >>>> NOT CONVERTED
		public static string QAppName() {
			return StaticQGlobalSpace().QAppName();
		}
		public static int QRound(double d) {
			return StaticQGlobalSpace().QRound(d);
		}
		// qint64 qRound64(double arg1); >>>> NOT CONVERTED
		public static string QVersion() {
			return StaticQGlobalSpace().QVersion();
		}
		public static bool QSharedBuild() {
			return StaticQGlobalSpace().QSharedBuild();
		}
		// QtMsgHandler qInstallMsgHandler(QtMsgHandler arg1); >>>> NOT CONVERTED
		public static bool op_equals(QBool b1, bool b2) {
			return StaticQGlobalSpace().op_equals(b1,b2);
		}
		public static bool op_equals(bool b1, QBool b2) {
			return StaticQGlobalSpace().op_equals(b1,b2);
		}
		public static bool op_equals(QBool b1, QBool b2) {
			return StaticQGlobalSpace().op_equals(b1,b2);
		}
		// void* qMalloc(size_t arg1); >>>> NOT CONVERTED
		// void qFree(void* arg1); >>>> NOT CONVERTED
		// void* qRealloc(void* arg1,size_t arg2); >>>> NOT CONVERTED
		// void* qMemCopy(void* arg1,const void* arg2,size_t arg3); >>>> NOT CONVERTED
		// void* qMemSet(void* arg1,int arg2,size_t arg3); >>>> NOT CONVERTED
		public static byte[] Qgetenv(string varName) {
			return StaticQGlobalSpace().Qgetenv(varName);
		}
		public static int QIntCast(double f) {
			return StaticQGlobalSpace().QIntCast(f);
		}
		public static int QIntCast(float f) {
			return StaticQGlobalSpace().QIntCast(f);
		}
		public static bool op_equals(QRect arg1, QRect arg2) {
			return StaticQGlobalSpace().op_equals(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QRect stream functions
		///**************************************************</remarks>		<short>                                                                                QRect stream functions                                                                            </short>
		public static QDataStream op_write(QDataStream arg1, QRect arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QRect arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		public static bool op_equals(QRectF arg1, QRectF arg2) {
			return StaticQGlobalSpace().op_equals(arg1,arg2);
		}
		///<remarks>**************************************************
		///  QRectF stream functions
		///**************************************************</remarks>		<short>                                                                                QRectF stream functions                                                                            </short>
		public static QDataStream op_write(QDataStream arg1, QRectF arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static QDataStream op_read(QDataStream arg1, QRectF arg2) {
			return StaticQGlobalSpace().op_read(arg1,arg2);
		}
		public static QTextStream op_write(QTextStream arg1, QDomNode arg2) {
			return StaticQGlobalSpace().op_write(arg1,arg2);
		}
		public static bool op_equals(QGLFormat arg1, QGLFormat arg2) {
			return StaticQGlobalSpace().op_equals(arg1,arg2);
		}
		~QGlobalSpace() {
			ProxyQGlobalSpace().Dispose();
		}
		public void Dispose() {
			ProxyQGlobalSpace().Dispose();
		}
	}
}
