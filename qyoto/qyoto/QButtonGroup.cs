//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	/// See <see cref="IQButtonGroupSignals"></see> for signals emitted by QButtonGroup
	public class QButtonGroup : QObject, IDisposable {
 		protected QButtonGroup(Type dummy) : base((Type) null) {}
		interface IQButtonGroupProxy {
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected void CreateQButtonGroupProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QButtonGroup), this);
			_interceptor = (QButtonGroup) realProxy.GetTransparentProxy();
		}
		private QButtonGroup ProxyQButtonGroup() {
			return (QButtonGroup) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QButtonGroup() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQButtonGroupProxy), null);
			_staticInterceptor = (IQButtonGroupProxy) realProxy.GetTransparentProxy();
		}
		private static IQButtonGroupProxy StaticQButtonGroup() {
			return (IQButtonGroupProxy) _staticInterceptor;
		}

		public new virtual QMetaObject MetaObject() {
			return ProxyQButtonGroup().MetaObject();
		}
		// void* qt_metacast(const char* arg1); >>>> NOT CONVERTED
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QButtonGroup(QObject parent) : this((Type) null) {
			CreateQButtonGroupProxy();
			NewQButtonGroup(parent);
		}
		private void NewQButtonGroup(QObject parent) {
			ProxyQButtonGroup().NewQButtonGroup(parent);
		}
		public QButtonGroup() : this((Type) null) {
			CreateQButtonGroupProxy();
			NewQButtonGroup();
		}
		private void NewQButtonGroup() {
			ProxyQButtonGroup().NewQButtonGroup();
		}
		public void SetExclusive(bool arg1) {
			ProxyQButtonGroup().SetExclusive(arg1);
		}
		public bool Exclusive() {
			return ProxyQButtonGroup().Exclusive();
		}
		public void AddButton(QAbstractButton arg1) {
			ProxyQButtonGroup().AddButton(arg1);
		}
		public void RemoveButton(QAbstractButton arg1) {
			ProxyQButtonGroup().RemoveButton(arg1);
		}
		// QList<QAbstractButton*> buttons(); >>>> NOT CONVERTED
		public QAbstractButton CheckedButton() {
			return ProxyQButtonGroup().CheckedButton();
		}
		public static new string Tr(string s, string c) {
			return StaticQButtonGroup().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQButtonGroup().Tr(s);
		}
		~QButtonGroup() {
			ProxyQButtonGroup().Dispose();
		}
		public new void Dispose() {
			ProxyQButtonGroup().Dispose();
		}
	}

	public interface IQButtonGroupSignals {
		void ButtonClicked(QAbstractButton arg1);
	}
}
