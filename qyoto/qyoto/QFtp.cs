//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	/// See <see cref="IQFtpSignals"></see> for signals emitted by QFtp
	public class QFtp : QObject, IDisposable {
 		protected QFtp(Type dummy) : base((Type) null) {}
		interface IQFtpProxy {
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected void CreateQFtpProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QFtp), this);
			_interceptor = (QFtp) realProxy.GetTransparentProxy();
		}
		private QFtp ProxyQFtp() {
			return (QFtp) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QFtp() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQFtpProxy), null);
			_staticInterceptor = (IQFtpProxy) realProxy.GetTransparentProxy();
		}
		private static IQFtpProxy StaticQFtp() {
			return (IQFtpProxy) _staticInterceptor;
		}

		enum E_State {
			Unconnected = 0,
			HostLookup = 1,
			Connecting = 2,
			Connected = 3,
			LoggedIn = 4,
			Closing = 5,
		}
		enum E_Error {
			NoError = 0,
			UnknownError = 1,
			HostNotFound = 2,
			ConnectionRefused = 3,
			NotConnected = 4,
		}
		enum Command {
			None = 0,
			SetTransferMode = 1,
			SetProxy = 2,
			ConnectToHost = 3,
			Login = 4,
			Close = 5,
			List = 6,
			Cd = 7,
			Get = 8,
			Put = 9,
			Remove = 10,
			Mkdir = 11,
			Rmdir = 12,
			Rename = 13,
			RawCommand = 14,
		}
		enum TransferMode {
			Active = 0,
			Passive = 1,
		}
		enum TransferType {
			Binary = 0,
			Ascii = 1,
		}
		public new virtual QMetaObject MetaObject() {
			return ProxyQFtp().MetaObject();
		}
		// void* qt_metacast(const char* arg1); >>>> NOT CONVERTED
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QFtp(QObject parent) : this((Type) null) {
			CreateQFtpProxy();
			NewQFtp(parent);
		}
		private void NewQFtp(QObject parent) {
			ProxyQFtp().NewQFtp(parent);
		}
		public QFtp() : this((Type) null) {
			CreateQFtpProxy();
			NewQFtp();
		}
		private void NewQFtp() {
			ProxyQFtp().NewQFtp();
		}
		public int SetProxy(string host, ushort port) {
			return ProxyQFtp().SetProxy(host,port);
		}
		public int ConnectToHost(string host, ushort port) {
			return ProxyQFtp().ConnectToHost(host,port);
		}
		public int ConnectToHost(string host) {
			return ProxyQFtp().ConnectToHost(host);
		}
		public int Login(string user, string password) {
			return ProxyQFtp().Login(user,password);
		}
		public int Login(string user) {
			return ProxyQFtp().Login(user);
		}
		public int Login() {
			return ProxyQFtp().Login();
		}
		public int Close() {
			return ProxyQFtp().Close();
		}
		public int SetTransferMode(int mode) {
			return ProxyQFtp().SetTransferMode(mode);
		}
		public int List(string dir) {
			return ProxyQFtp().List(dir);
		}
		public int List() {
			return ProxyQFtp().List();
		}
		public int Cd(string dir) {
			return ProxyQFtp().Cd(dir);
		}
		public int Get(string file, IQIODevice dev, int type) {
			return ProxyQFtp().Get(file,dev,type);
		}
		public int Get(string file, IQIODevice dev) {
			return ProxyQFtp().Get(file,dev);
		}
		public int Get(string file) {
			return ProxyQFtp().Get(file);
		}
		public int Put(byte[] data, string file, int type) {
			return ProxyQFtp().Put(data,file,type);
		}
		public int Put(byte[] data, string file) {
			return ProxyQFtp().Put(data,file);
		}
		public int Put(IQIODevice dev, string file, int type) {
			return ProxyQFtp().Put(dev,file,type);
		}
		public int Put(IQIODevice dev, string file) {
			return ProxyQFtp().Put(dev,file);
		}
		public int Remove(string file) {
			return ProxyQFtp().Remove(file);
		}
		public int Mkdir(string dir) {
			return ProxyQFtp().Mkdir(dir);
		}
		public int Rmdir(string dir) {
			return ProxyQFtp().Rmdir(dir);
		}
		public int Rename(string oldname, string newname) {
			return ProxyQFtp().Rename(oldname,newname);
		}
		public int RawCommand(string command) {
			return ProxyQFtp().RawCommand(command);
		}
		// qint64 bytesAvailable(); >>>> NOT CONVERTED
		// qint64 read(char* arg1,qint64 arg2); >>>> NOT CONVERTED
		public byte[] ReadAll() {
			return ProxyQFtp().ReadAll();
		}
		public int CurrentId() {
			return ProxyQFtp().CurrentId();
		}
		public IQIODevice CurrentDevice() {
			return ProxyQFtp().CurrentDevice();
		}
		public int CurrentCommand() {
			return ProxyQFtp().CurrentCommand();
		}
		public bool HasPendingCommands() {
			return ProxyQFtp().HasPendingCommands();
		}
		public void ClearPendingCommands() {
			ProxyQFtp().ClearPendingCommands();
		}
		public int State() {
			return ProxyQFtp().State();
		}
		public int Error() {
			return ProxyQFtp().Error();
		}
		public string ErrorString() {
			return ProxyQFtp().ErrorString();
		}
		public void Abort() {
			ProxyQFtp().Abort();
		}
		public static new string Tr(string s, string c) {
			return StaticQFtp().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQFtp().Tr(s);
		}
		~QFtp() {
			ProxyQFtp().Dispose();
		}
		public new void Dispose() {
			ProxyQFtp().Dispose();
		}
	}

	public interface IQFtpSignals {
		void StateChanged(int arg1);
		void ListInfo(QUrlInfo arg1);
		void ReadyRead();
		// void dataTransferProgress(qint64 arg1,qint64 arg2); >>>> NOT CONVERTED
		void RawCommandReply(int arg1, string arg2);
		void CommandStarted(int arg1);
		void CommandFinished(int arg1, bool arg2);
		void Done(bool arg1);
	}
}
