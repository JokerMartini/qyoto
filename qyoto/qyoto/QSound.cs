//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QSound : QObject, IDisposable {
 		protected QSound(Type dummy) : base((Type) null) {}
		interface IQSoundProxy {
			string Tr(string s, string c);
			string Tr(string s);
			bool IsAvailable();
			void Play(string filename);
		}

		protected void CreateQSoundProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSound), this);
			_interceptor = (QSound) realProxy.GetTransparentProxy();
		}
		private QSound ProxyQSound() {
			return (QSound) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QSound() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSoundProxy), null);
			_staticInterceptor = (IQSoundProxy) realProxy.GetTransparentProxy();
		}
		private static IQSoundProxy StaticQSound() {
			return (IQSoundProxy) _staticInterceptor;
		}

		public new virtual QMetaObject MetaObject() {
			return ProxyQSound().MetaObject();
		}
		// void* qt_metacast(const char* arg1); >>>> NOT CONVERTED
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QSound(string filename, QObject parent) : this((Type) null) {
			CreateQSoundProxy();
			NewQSound(filename,parent);
		}
		private void NewQSound(string filename, QObject parent) {
			ProxyQSound().NewQSound(filename,parent);
		}
		public QSound(string filename) : this((Type) null) {
			CreateQSoundProxy();
			NewQSound(filename);
		}
		private void NewQSound(string filename) {
			ProxyQSound().NewQSound(filename);
		}
		public int Loops() {
			return ProxyQSound().Loops();
		}
		public int LoopsRemaining() {
			return ProxyQSound().LoopsRemaining();
		}
		public void SetLoops(int arg1) {
			ProxyQSound().SetLoops(arg1);
		}
		public string FileName() {
			return ProxyQSound().FileName();
		}
		public bool IsFinished() {
			return ProxyQSound().IsFinished();
		}
		public void Play() {
			ProxyQSound().Play();
		}
		public void Stop() {
			ProxyQSound().Stop();
		}
		public static new string Tr(string s, string c) {
			return StaticQSound().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQSound().Tr(s);
		}
		public static bool IsAvailable() {
			return StaticQSound().IsAvailable();
		}
		public static void Play(string filename) {
			StaticQSound().Play(filename);
		}
		~QSound() {
			ProxyQSound().Dispose();
		}
		public new void Dispose() {
			ProxyQSound().Dispose();
		}
	}
}
