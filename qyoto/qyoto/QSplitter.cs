//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	/// See <see cref="IQSplitterSignals"></see> for signals emitted by QSplitter
	public class QSplitter : QFrame, IDisposable {
 		protected QSplitter(Type dummy) : base((Type) null) {}
		interface IQSplitterProxy {
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected void CreateQSplitterProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QSplitter), this);
			_interceptor = (QSplitter) realProxy.GetTransparentProxy();
		}
		private QSplitter ProxyQSplitter() {
			return (QSplitter) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QSplitter() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQSplitterProxy), null);
			_staticInterceptor = (IQSplitterProxy) realProxy.GetTransparentProxy();
		}
		private static IQSplitterProxy StaticQSplitter() {
			return (IQSplitterProxy) _staticInterceptor;
		}

		public new virtual QMetaObject MetaObject() {
			return ProxyQSplitter().MetaObject();
		}
		// void* qt_metacast(const char* arg1); >>>> NOT CONVERTED
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QSplitter(QWidget parent) : this((Type) null) {
			CreateQSplitterProxy();
			NewQSplitter(parent);
		}
		private void NewQSplitter(QWidget parent) {
			ProxyQSplitter().NewQSplitter(parent);
		}
		public QSplitter() : this((Type) null) {
			CreateQSplitterProxy();
			NewQSplitter();
		}
		private void NewQSplitter() {
			ProxyQSplitter().NewQSplitter();
		}
		public QSplitter(int arg1, QWidget parent) : this((Type) null) {
			CreateQSplitterProxy();
			NewQSplitter(arg1,parent);
		}
		private void NewQSplitter(int arg1, QWidget parent) {
			ProxyQSplitter().NewQSplitter(arg1,parent);
		}
		public QSplitter(int arg1) : this((Type) null) {
			CreateQSplitterProxy();
			NewQSplitter(arg1);
		}
		private void NewQSplitter(int arg1) {
			ProxyQSplitter().NewQSplitter(arg1);
		}
		public void AddWidget(QWidget widget) {
			ProxyQSplitter().AddWidget(widget);
		}
		public void InsertWidget(int index, QWidget widget) {
			ProxyQSplitter().InsertWidget(index,widget);
		}
		public void SetOrientation(int arg1) {
			ProxyQSplitter().SetOrientation(arg1);
		}
		public int Orientation() {
			return ProxyQSplitter().Orientation();
		}
		public void SetChildrenCollapsible(bool arg1) {
			ProxyQSplitter().SetChildrenCollapsible(arg1);
		}
		public bool ChildrenCollapsible() {
			return ProxyQSplitter().ChildrenCollapsible();
		}
		public void SetCollapsible(int index, bool arg2) {
			ProxyQSplitter().SetCollapsible(index,arg2);
		}
		public bool IsCollapsible(int index) {
			return ProxyQSplitter().IsCollapsible(index);
		}
		public void SetOpaqueResize(bool opaque) {
			ProxyQSplitter().SetOpaqueResize(opaque);
		}
		public void SetOpaqueResize() {
			ProxyQSplitter().SetOpaqueResize();
		}
		public bool OpaqueResize() {
			return ProxyQSplitter().OpaqueResize();
		}
		public void Refresh() {
			ProxyQSplitter().Refresh();
		}
		public new QSize SizeHint() {
			return ProxyQSplitter().SizeHint();
		}
		public new QSize MinimumSizeHint() {
			return ProxyQSplitter().MinimumSizeHint();
		}
		// QList<int> sizes(); >>>> NOT CONVERTED
		// void setSizes(const QList<int>& arg1); >>>> NOT CONVERTED
		public byte[] SaveState() {
			return ProxyQSplitter().SaveState();
		}
		public bool RestoreState(byte[] state) {
			return ProxyQSplitter().RestoreState(state);
		}
		public int HandleWidth() {
			return ProxyQSplitter().HandleWidth();
		}
		public void SetHandleWidth(int arg1) {
			ProxyQSplitter().SetHandleWidth(arg1);
		}
		public int IndexOf(QWidget w) {
			return ProxyQSplitter().IndexOf(w);
		}
		public QWidget Widget(int index) {
			return ProxyQSplitter().Widget(index);
		}
		public int Count() {
			return ProxyQSplitter().Count();
		}
		public void GetRange(int index, out int arg2, out int arg3) {
			ProxyQSplitter().GetRange(index,out arg2,out arg3);
		}
		public new QSplitterHandle Handle(int index) {
			return ProxyQSplitter().Handle(index);
		}
		public void SetStretchFactor(int index, int stretch) {
			ProxyQSplitter().SetStretchFactor(index,stretch);
		}
		public static new string Tr(string s, string c) {
			return StaticQSplitter().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQSplitter().Tr(s);
		}
		protected virtual QSplitterHandle CreateHandle() {
			return ProxyQSplitter().CreateHandle();
		}
		protected new void ChildEvent(QChildEvent arg1) {
			ProxyQSplitter().ChildEvent(arg1);
		}
		public new bool Event(QEvent arg1) {
			return ProxyQSplitter().Event(arg1);
		}
		protected new void ResizeEvent(QResizeEvent arg1) {
			ProxyQSplitter().ResizeEvent(arg1);
		}
		protected new void ChangeEvent(QEvent arg1) {
			ProxyQSplitter().ChangeEvent(arg1);
		}
		protected void MoveSplitter(int pos, int index) {
			ProxyQSplitter().MoveSplitter(pos,index);
		}
		protected void SetRubberBand(int position) {
			ProxyQSplitter().SetRubberBand(position);
		}
		protected int ClosestLegalPosition(int arg1, int arg2) {
			return ProxyQSplitter().ClosestLegalPosition(arg1,arg2);
		}
		~QSplitter() {
			ProxyQSplitter().Dispose();
		}
		public new void Dispose() {
			ProxyQSplitter().Dispose();
		}
	}

	public interface IQSplitterSignals {
		void SplitterMoved(int pos, int index);
	}
}
