//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QBrush : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QBrush(Type dummy) {}
		interface IQBrushProxy {
			bool op_equals(QBrush lhs, QBrush b);
		}

		protected void CreateQBrushProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QBrush), this);
			_interceptor = (QBrush) realProxy.GetTransparentProxy();
		}
		private QBrush ProxyQBrush() {
			return (QBrush) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QBrush() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQBrushProxy), null);
			_staticInterceptor = (IQBrushProxy) realProxy.GetTransparentProxy();
		}
		private static IQBrushProxy StaticQBrush() {
			return (IQBrushProxy) _staticInterceptor;
		}

		public QBrush() : this((Type) null) {
			CreateQBrushProxy();
			NewQBrush();
		}
		private void NewQBrush() {
			ProxyQBrush().NewQBrush();
		}
		public QBrush(int bs) : this((Type) null) {
			CreateQBrushProxy();
			NewQBrush(bs);
		}
		private void NewQBrush(int bs) {
			ProxyQBrush().NewQBrush(bs);
		}
		public QBrush(QColor color, int bs) : this((Type) null) {
			CreateQBrushProxy();
			NewQBrush(color,bs);
		}
		private void NewQBrush(QColor color, int bs) {
			ProxyQBrush().NewQBrush(color,bs);
		}
		public QBrush(QColor color) : this((Type) null) {
			CreateQBrushProxy();
			NewQBrush(color);
		}
		private void NewQBrush(QColor color) {
			ProxyQBrush().NewQBrush(color);
		}
		public QBrush(int color, int bs) : this((Type) null) {
			CreateQBrushProxy();
			NewQBrush(color,bs);
		}
		private void NewQBrush(int color, int bs) {
			ProxyQBrush().NewQBrush(color,bs);
		}
		public QBrush(QColor color, QPixmap pixmap) : this((Type) null) {
			CreateQBrushProxy();
			NewQBrush(color,pixmap);
		}
		private void NewQBrush(QColor color, QPixmap pixmap) {
			ProxyQBrush().NewQBrush(color,pixmap);
		}
		public QBrush(int color, QPixmap pixmap) : this((Type) null) {
			CreateQBrushProxy();
			NewQBrush(color,pixmap);
		}
		private void NewQBrush(int color, QPixmap pixmap) {
			ProxyQBrush().NewQBrush(color,pixmap);
		}
		public QBrush(QPixmap pixmap) : this((Type) null) {
			CreateQBrushProxy();
			NewQBrush(pixmap);
		}
		private void NewQBrush(QPixmap pixmap) {
			ProxyQBrush().NewQBrush(pixmap);
		}
		public QBrush(QBrush brush) : this((Type) null) {
			CreateQBrushProxy();
			NewQBrush(brush);
		}
		private void NewQBrush(QBrush brush) {
			ProxyQBrush().NewQBrush(brush);
		}
		public QBrush(QGradient gradient) : this((Type) null) {
			CreateQBrushProxy();
			NewQBrush(gradient);
		}
		private void NewQBrush(QGradient gradient) {
			ProxyQBrush().NewQBrush(gradient);
		}
		//  operator QVariant(); >>>> NOT CONVERTED
		public int Style() {
			return ProxyQBrush().Style();
		}
		public void SetStyle(int arg1) {
			ProxyQBrush().SetStyle(arg1);
		}
		public QPixmap Texture() {
			return ProxyQBrush().Texture();
		}
		public void SetTexture(QPixmap pixmap) {
			ProxyQBrush().SetTexture(pixmap);
		}
		public QColor Color() {
			return ProxyQBrush().Color();
		}
		public void SetColor(QColor color) {
			ProxyQBrush().SetColor(color);
		}
		public void SetColor(int color) {
			ProxyQBrush().SetColor(color);
		}
		public QGradient Gradient() {
			return ProxyQBrush().Gradient();
		}
		public bool IsOpaque() {
			return ProxyQBrush().IsOpaque();
		}
		public static bool operator==(QBrush lhs, QBrush b) {
			return StaticQBrush().op_equals(lhs,b);
		}
		public static bool operator!=(QBrush lhs, QBrush b) {
			return !StaticQBrush().op_equals(lhs,b);
		}
		public override bool Equals(object o) {
			if (!(o is QBrush)) { return false; }
			return this == (QBrush) o;
		}
		public override int GetHashCode() {
			return ProxyQBrush().GetHashCode();
		}
		~QBrush() {
			ProxyQBrush().Dispose();
		}
		public void Dispose() {
			ProxyQBrush().Dispose();
		}
	}
}
