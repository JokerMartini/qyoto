//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;

	[SmokeClass("QFileIconProvider")]
	public class QFileIconProvider : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
		protected QFileIconProvider(Type dummy) {}
		interface IQFileIconProviderProxy {
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QFileIconProvider), this);
			_interceptor = (QFileIconProvider) realProxy.GetTransparentProxy();
		}
		private QFileIconProvider ProxyQFileIconProvider() {
			return (QFileIconProvider) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QFileIconProvider() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQFileIconProviderProxy), null);
			_staticInterceptor = (IQFileIconProviderProxy) realProxy.GetTransparentProxy();
		}
		private static IQFileIconProviderProxy StaticQFileIconProvider() {
			return (IQFileIconProviderProxy) _staticInterceptor;
		}

		public enum IconType {
			Computer = 0,
			Desktop = 1,
			Trashcan = 2,
			Network = 3,
			Drive = 4,
			Folder = 5,
			File = 6,
		}
		public QFileIconProvider() : this((Type) null) {
			CreateProxy();
			NewQFileIconProvider();
		}
		[SmokeMethod("QFileIconProvider()")]
		private void NewQFileIconProvider() {
			ProxyQFileIconProvider().NewQFileIconProvider();
		}
		[SmokeMethod("icon(QFileIconProvider::IconType) const")]
		public virtual QIcon Icon(QFileIconProvider.IconType type) {
			return ProxyQFileIconProvider().Icon(type);
		}
		[SmokeMethod("icon(const QFileInfo&) const")]
		public virtual QIcon Icon(QFileInfo info) {
			return ProxyQFileIconProvider().Icon(info);
		}
		[SmokeMethod("type(const QFileInfo&) const")]
		public virtual string type(QFileInfo info) {
			return ProxyQFileIconProvider().type(info);
		}
		~QFileIconProvider() {
			DisposeQFileIconProvider();
		}
		public void Dispose() {
			DisposeQFileIconProvider();
		}
		private void DisposeQFileIconProvider() {
			ProxyQFileIconProvider().DisposeQFileIconProvider();
		}
	}
}
