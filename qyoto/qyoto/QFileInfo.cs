//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QFileInfo : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QFileInfo(Type dummy) {}
		interface IQFileInfoProxy {
			bool op_equals(QFileInfo lhs, QFileInfo fileinfo);
		}

		protected void CreateQFileInfoProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QFileInfo), this);
			_interceptor = (QFileInfo) realProxy.GetTransparentProxy();
		}
		private QFileInfo ProxyQFileInfo() {
			return (QFileInfo) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QFileInfo() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQFileInfoProxy), null);
			_staticInterceptor = (IQFileInfoProxy) realProxy.GetTransparentProxy();
		}
		private static IQFileInfoProxy StaticQFileInfo() {
			return (IQFileInfoProxy) _staticInterceptor;
		}

		public QFileInfo() : this((Type) null) {
			CreateQFileInfoProxy();
			NewQFileInfo();
		}
		private void NewQFileInfo() {
			ProxyQFileInfo().NewQFileInfo();
		}
		public QFileInfo(string file) : this((Type) null) {
			CreateQFileInfoProxy();
			NewQFileInfo(file);
		}
		private void NewQFileInfo(string file) {
			ProxyQFileInfo().NewQFileInfo(file);
		}
		public QFileInfo(QFile file) : this((Type) null) {
			CreateQFileInfoProxy();
			NewQFileInfo(file);
		}
		private void NewQFileInfo(QFile file) {
			ProxyQFileInfo().NewQFileInfo(file);
		}
		public QFileInfo(QDir dir, string file) : this((Type) null) {
			CreateQFileInfoProxy();
			NewQFileInfo(dir,file);
		}
		private void NewQFileInfo(QDir dir, string file) {
			ProxyQFileInfo().NewQFileInfo(dir,file);
		}
		public QFileInfo(QFileInfo fileinfo) : this((Type) null) {
			CreateQFileInfoProxy();
			NewQFileInfo(fileinfo);
		}
		private void NewQFileInfo(QFileInfo fileinfo) {
			ProxyQFileInfo().NewQFileInfo(fileinfo);
		}
		public static bool operator==(QFileInfo lhs, QFileInfo fileinfo) {
			return StaticQFileInfo().op_equals(lhs,fileinfo);
		}
		public static bool operator!=(QFileInfo lhs, QFileInfo fileinfo) {
			return !StaticQFileInfo().op_equals(lhs,fileinfo);
		}
		public override bool Equals(object o) {
			if (!(o is QFileInfo)) { return false; }
			return this == (QFileInfo) o;
		}
		public override int GetHashCode() {
			return ProxyQFileInfo().GetHashCode();
		}
		public void SetFile(string file) {
			ProxyQFileInfo().SetFile(file);
		}
		public void SetFile(QFile file) {
			ProxyQFileInfo().SetFile(file);
		}
		public void SetFile(QDir dir, string file) {
			ProxyQFileInfo().SetFile(dir,file);
		}
		public bool Exists() {
			return ProxyQFileInfo().Exists();
		}
		public void Refresh() {
			ProxyQFileInfo().Refresh();
		}
		public string FilePath() {
			return ProxyQFileInfo().FilePath();
		}
		public string AbsoluteFilePath() {
			return ProxyQFileInfo().AbsoluteFilePath();
		}
		public string CanonicalFilePath() {
			return ProxyQFileInfo().CanonicalFilePath();
		}
		public string FileName() {
			return ProxyQFileInfo().FileName();
		}
		public string BaseName() {
			return ProxyQFileInfo().BaseName();
		}
		public string CompleteBaseName() {
			return ProxyQFileInfo().CompleteBaseName();
		}
		public string Suffix() {
			return ProxyQFileInfo().Suffix();
		}
		public string CompleteSuffix() {
			return ProxyQFileInfo().CompleteSuffix();
		}
		public string Path() {
			return ProxyQFileInfo().Path();
		}
		public string AbsolutePath() {
			return ProxyQFileInfo().AbsolutePath();
		}
		public string CanonicalPath() {
			return ProxyQFileInfo().CanonicalPath();
		}
		public QDir Dir() {
			return ProxyQFileInfo().Dir();
		}
		public QDir AbsoluteDir() {
			return ProxyQFileInfo().AbsoluteDir();
		}
		public bool IsReadable() {
			return ProxyQFileInfo().IsReadable();
		}
		public bool IsWritable() {
			return ProxyQFileInfo().IsWritable();
		}
		public bool IsExecutable() {
			return ProxyQFileInfo().IsExecutable();
		}
		public bool IsHidden() {
			return ProxyQFileInfo().IsHidden();
		}
		public bool IsRelative() {
			return ProxyQFileInfo().IsRelative();
		}
		public bool IsAbsolute() {
			return ProxyQFileInfo().IsAbsolute();
		}
		public bool MakeAbsolute() {
			return ProxyQFileInfo().MakeAbsolute();
		}
		public bool IsFile() {
			return ProxyQFileInfo().IsFile();
		}
		public bool IsDir() {
			return ProxyQFileInfo().IsDir();
		}
		public bool IsSymLink() {
			return ProxyQFileInfo().IsSymLink();
		}
		public bool IsRoot() {
			return ProxyQFileInfo().IsRoot();
		}
		public string ReadLink() {
			return ProxyQFileInfo().ReadLink();
		}
		public string Owner() {
			return ProxyQFileInfo().Owner();
		}
		public uint OwnerId() {
			return ProxyQFileInfo().OwnerId();
		}
		public string Group() {
			return ProxyQFileInfo().Group();
		}
		public uint GroupId() {
			return ProxyQFileInfo().GroupId();
		}
		public bool Permission(int permissions) {
			return ProxyQFileInfo().Permission(permissions);
		}
		public int Permissions() {
			return ProxyQFileInfo().Permissions();
		}
		// qint64 size(); >>>> NOT CONVERTED
		public DateTime Created() {
			return ProxyQFileInfo().Created();
		}
		public DateTime LastModified() {
			return ProxyQFileInfo().LastModified();
		}
		public DateTime LastRead() {
			return ProxyQFileInfo().LastRead();
		}
		public void Detach() {
			ProxyQFileInfo().Detach();
		}
		public bool Caching() {
			return ProxyQFileInfo().Caching();
		}
		public void SetCaching(bool on) {
			ProxyQFileInfo().SetCaching(on);
		}
		~QFileInfo() {
			ProxyQFileInfo().Dispose();
		}
		public void Dispose() {
			ProxyQFileInfo().Dispose();
		}
	}
}
