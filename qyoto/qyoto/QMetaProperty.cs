//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QMetaProperty : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QMetaProperty(Type dummy) {}
		interface IQMetaPropertyProxy {
		}

		protected void CreateQMetaPropertyProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QMetaProperty), this);
			_interceptor = (QMetaProperty) realProxy.GetTransparentProxy();
		}
		private QMetaProperty ProxyQMetaProperty() {
			return (QMetaProperty) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QMetaProperty() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQMetaPropertyProxy), null);
			_staticInterceptor = (IQMetaPropertyProxy) realProxy.GetTransparentProxy();
		}
		private static IQMetaPropertyProxy StaticQMetaProperty() {
			return (IQMetaPropertyProxy) _staticInterceptor;
		}

		public QMetaProperty() : this((Type) null) {
			CreateQMetaPropertyProxy();
			NewQMetaProperty();
		}
		private void NewQMetaProperty() {
			ProxyQMetaProperty().NewQMetaProperty();
		}
		public string Name() {
			return ProxyQMetaProperty().Name();
		}
		public string TypeName() {
			return ProxyQMetaProperty().TypeName();
		}
		public bool IsReadable() {
			return ProxyQMetaProperty().IsReadable();
		}
		public bool IsWritable() {
			return ProxyQMetaProperty().IsWritable();
		}
		public bool IsDesignable(QObject arg1) {
			return ProxyQMetaProperty().IsDesignable(arg1);
		}
		public bool IsDesignable() {
			return ProxyQMetaProperty().IsDesignable();
		}
		public bool IsScriptable(QObject arg1) {
			return ProxyQMetaProperty().IsScriptable(arg1);
		}
		public bool IsScriptable() {
			return ProxyQMetaProperty().IsScriptable();
		}
		public bool IsStored(QObject arg1) {
			return ProxyQMetaProperty().IsStored(arg1);
		}
		public bool IsStored() {
			return ProxyQMetaProperty().IsStored();
		}
		public bool IsEditable(QObject arg1) {
			return ProxyQMetaProperty().IsEditable(arg1);
		}
		public bool IsEditable() {
			return ProxyQMetaProperty().IsEditable();
		}
		public bool IsFlagType() {
			return ProxyQMetaProperty().IsFlagType();
		}
		public bool IsEnumType() {
			return ProxyQMetaProperty().IsEnumType();
		}
		public QMetaEnum Enumerator() {
			return ProxyQMetaProperty().Enumerator();
		}
		public QVariant Read(QObject arg1) {
			return ProxyQMetaProperty().Read(arg1);
		}
		public bool Write(QObject arg1, QVariant value) {
			return ProxyQMetaProperty().Write(arg1,value);
		}
		public bool Reset(QObject arg1) {
			return ProxyQMetaProperty().Reset(arg1);
		}
		public bool HasStdCppSet() {
			return ProxyQMetaProperty().HasStdCppSet();
		}
		public bool IsValid() {
			return ProxyQMetaProperty().IsValid();
		}
		~QMetaProperty() {
			ProxyQMetaProperty().Dispose();
		}
		public void Dispose() {
			ProxyQMetaProperty().Dispose();
		}
	}
}
