//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QFile : QIODevice, IDisposable {
 		protected QFile(Type dummy) : base((Type) null) {}
		interface IQFileProxy {
			string Tr(string s, string c);
			string Tr(string s);
			byte[] EncodeName(string fileName);
			string DecodeName(byte[] localFileName);
			string DecodeName(string localFileName);
			bool Exists(string fileName);
			string ReadLink(string fileName);
			bool Remove(string fileName);
			bool Rename(string oldName, string newName);
			bool Link(string oldname, string newName);
			bool Copy(string fileName, string newName);
			int Permissions(string filename);
			bool SetPermissions(string filename, int permissionSpec);
		}

		protected void CreateQFileProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QFile), this);
			_interceptor = (QFile) realProxy.GetTransparentProxy();
		}
		private QFile ProxyQFile() {
			return (QFile) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QFile() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQFileProxy), null);
			_staticInterceptor = (IQFileProxy) realProxy.GetTransparentProxy();
		}
		private static IQFileProxy StaticQFile() {
			return (IQFileProxy) _staticInterceptor;
		}

		enum FileError {
			NoError = 0,
			ReadError = 1,
			WriteError = 2,
			FatalError = 3,
			ResourceError = 4,
			OpenError = 5,
			AbortError = 6,
			TimeOutError = 7,
			UnspecifiedError = 8,
			RemoveError = 9,
			RenameError = 10,
			PositionError = 11,
			ResizeError = 12,
			PermissionsError = 13,
			CopyError = 14,
		}
		enum Permission {
			ReadOwner = 0x4000,
			WriteOwner = 0x2000,
			ExeOwner = 0x1000,
			ReadUser = 0x0400,
			WriteUser = 0x0200,
			ExeUser = 0x0100,
			ReadGroup = 0x0040,
			WriteGroup = 0x0020,
			ExeGroup = 0x0010,
			ReadOther = 0x0004,
			WriteOther = 0x0002,
			ExeOther = 0x0001,
		}
		public new virtual QMetaObject MetaObject() {
			return ProxyQFile().MetaObject();
		}
		// void* qt_metacast(const char* arg1); >>>> NOT CONVERTED
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QFile() : this((Type) null) {
			CreateQFileProxy();
			NewQFile();
		}
		private void NewQFile() {
			ProxyQFile().NewQFile();
		}
		public QFile(string name) : this((Type) null) {
			CreateQFileProxy();
			NewQFile(name);
		}
		private void NewQFile(string name) {
			ProxyQFile().NewQFile(name);
		}
		public QFile(QObject parent) : this((Type) null) {
			CreateQFileProxy();
			NewQFile(parent);
		}
		private void NewQFile(QObject parent) {
			ProxyQFile().NewQFile(parent);
		}
		public QFile(string name, QObject parent) : this((Type) null) {
			CreateQFileProxy();
			NewQFile(name,parent);
		}
		private void NewQFile(string name, QObject parent) {
			ProxyQFile().NewQFile(name,parent);
		}
		public int Error() {
			return ProxyQFile().Error();
		}
		public void UnsetError() {
			ProxyQFile().UnsetError();
		}
		public string FileName() {
			return ProxyQFile().FileName();
		}
		public void SetFileName(string name) {
			ProxyQFile().SetFileName(name);
		}
		public bool Exists() {
			return ProxyQFile().Exists();
		}
		public string ReadLink() {
			return ProxyQFile().ReadLink();
		}
		public bool Remove() {
			return ProxyQFile().Remove();
		}
		public bool Rename(string newName) {
			return ProxyQFile().Rename(newName);
		}
		public bool Link(string newName) {
			return ProxyQFile().Link(newName);
		}
		public bool Copy(string newName) {
			return ProxyQFile().Copy(newName);
		}
		public new bool IsSequential() {
			return ProxyQFile().IsSequential();
		}
		public new bool Open(int flags) {
			return ProxyQFile().Open(flags);
		}
		public new bool Open(int fd, int flags) {
			return ProxyQFile().Open(fd,flags);
		}
		public new virtual void Close() {
			ProxyQFile().Close();
		}
		// qint64 size(); >>>> NOT CONVERTED
		// qint64 pos(); >>>> NOT CONVERTED
		// bool seek(qint64 arg1); >>>> NOT CONVERTED
		public new bool AtEnd() {
			return ProxyQFile().AtEnd();
		}
		public bool Flush() {
			return ProxyQFile().Flush();
		}
		// bool resize(qint64 arg1); >>>> NOT CONVERTED
		public int Permissions() {
			return ProxyQFile().Permissions();
		}
		public bool SetPermissions(int permissionSpec) {
			return ProxyQFile().SetPermissions(permissionSpec);
		}
		public int Handle() {
			return ProxyQFile().Handle();
		}
		// QFileEngine* fileEngine(); >>>> NOT CONVERTED
		public static new string Tr(string s, string c) {
			return StaticQFile().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQFile().Tr(s);
		}
		public static byte[] EncodeName(string fileName) {
			return StaticQFile().EncodeName(fileName);
		}
		public static string DecodeName(byte[] localFileName) {
			return StaticQFile().DecodeName(localFileName);
		}
		public static string DecodeName(string localFileName) {
			return StaticQFile().DecodeName(localFileName);
		}
		public static bool Exists(string fileName) {
			return StaticQFile().Exists(fileName);
		}
		public static string ReadLink(string fileName) {
			return StaticQFile().ReadLink(fileName);
		}
		public static bool Remove(string fileName) {
			return StaticQFile().Remove(fileName);
		}
		public static bool Rename(string oldName, string newName) {
			return StaticQFile().Rename(oldName,newName);
		}
		public static bool Link(string oldname, string newName) {
			return StaticQFile().Link(oldname,newName);
		}
		public static bool Copy(string fileName, string newName) {
			return StaticQFile().Copy(fileName,newName);
		}
		// bool resize(const QString& arg1,qint64 arg2); >>>> NOT CONVERTED
		public static int Permissions(string filename) {
			return StaticQFile().Permissions(filename);
		}
		public static bool SetPermissions(string filename, int permissionSpec) {
			return StaticQFile().SetPermissions(filename,permissionSpec);
		}
		// qint64 readData(char* arg1,qint64 arg2); >>>> NOT CONVERTED
		// qint64 writeData(const char* arg1,qint64 arg2); >>>> NOT CONVERTED
		// qint64 readLineData(char* arg1,qint64 arg2); >>>> NOT CONVERTED
		~QFile() {
			ProxyQFile().Dispose();
		}
		public void Dispose() {
			ProxyQFile().Dispose();
		}
	}
}
