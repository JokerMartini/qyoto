//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	/// See <see cref="IQActionSignals"></see> for signals emitted by QAction
	public class QAction : QObject, IDisposable {
 		protected QAction(Type dummy) : base((Type) null) {}
		interface IQActionProxy {
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected void CreateQActionProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QAction), this);
			_interceptor = (QAction) realProxy.GetTransparentProxy();
		}
		private QAction ProxyQAction() {
			return (QAction) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QAction() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQActionProxy), null);
			_staticInterceptor = (IQActionProxy) realProxy.GetTransparentProxy();
		}
		private static IQActionProxy StaticQAction() {
			return (IQActionProxy) _staticInterceptor;
		}

		enum ActionEvent {
			Trigger = 0,
			Hover = 1,
		}
		public new virtual QMetaObject MetaObject() {
			return ProxyQAction().MetaObject();
		}
		// void* qt_metacast(const char* arg1); >>>> NOT CONVERTED
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QAction(QObject parent) : this((Type) null) {
			CreateQActionProxy();
			NewQAction(parent);
		}
		private void NewQAction(QObject parent) {
			ProxyQAction().NewQAction(parent);
		}
		public QAction(string text, QObject parent) : this((Type) null) {
			CreateQActionProxy();
			NewQAction(text,parent);
		}
		private void NewQAction(string text, QObject parent) {
			ProxyQAction().NewQAction(text,parent);
		}
		public QAction(QIcon icon, string text, QObject parent) : this((Type) null) {
			CreateQActionProxy();
			NewQAction(icon,text,parent);
		}
		private void NewQAction(QIcon icon, string text, QObject parent) {
			ProxyQAction().NewQAction(icon,text,parent);
		}
		public void SetActionGroup(QActionGroup group) {
			ProxyQAction().SetActionGroup(group);
		}
		public QActionGroup ActionGroup() {
			return ProxyQAction().ActionGroup();
		}
		public void SetIcon(QIcon icon) {
			ProxyQAction().SetIcon(icon);
		}
		public QIcon Icon() {
			return ProxyQAction().Icon();
		}
		public void SetText(string text) {
			ProxyQAction().SetText(text);
		}
		public string Text() {
			return ProxyQAction().Text();
		}
		public void SetIconText(string text) {
			ProxyQAction().SetIconText(text);
		}
		public string IconText() {
			return ProxyQAction().IconText();
		}
		public void SetToolTip(string tip) {
			ProxyQAction().SetToolTip(tip);
		}
		public string ToolTip() {
			return ProxyQAction().ToolTip();
		}
		public void SetStatusTip(string statusTip) {
			ProxyQAction().SetStatusTip(statusTip);
		}
		public string StatusTip() {
			return ProxyQAction().StatusTip();
		}
		public void SetWhatsThis(string what) {
			ProxyQAction().SetWhatsThis(what);
		}
		public string WhatsThis() {
			return ProxyQAction().WhatsThis();
		}
		public QMenu Menu() {
			return ProxyQAction().Menu();
		}
		public void SetMenu(QMenu menu) {
			ProxyQAction().SetMenu(menu);
		}
		public void SetSeparator(bool b) {
			ProxyQAction().SetSeparator(b);
		}
		public bool IsSeparator() {
			return ProxyQAction().IsSeparator();
		}
		public void SetShortcut(QKeySequence shortcut) {
			ProxyQAction().SetShortcut(shortcut);
		}
		public QKeySequence Shortcut() {
			return ProxyQAction().Shortcut();
		}
		public void SetShortcutContext(int context) {
			ProxyQAction().SetShortcutContext(context);
		}
		public int ShortcutContext() {
			return ProxyQAction().ShortcutContext();
		}
		public void SetFont(QFont font) {
			ProxyQAction().SetFont(font);
		}
		public QFont Font() {
			return ProxyQAction().Font();
		}
		public void SetCheckable(bool arg1) {
			ProxyQAction().SetCheckable(arg1);
		}
		public bool IsCheckable() {
			return ProxyQAction().IsCheckable();
		}
		public QVariant Data() {
			return ProxyQAction().Data();
		}
		public void SetData(QVariant var) {
			ProxyQAction().SetData(var);
		}
		public bool IsChecked() {
			return ProxyQAction().IsChecked();
		}
		public bool IsEnabled() {
			return ProxyQAction().IsEnabled();
		}
		public bool IsVisible() {
			return ProxyQAction().IsVisible();
		}
		public void Activate(int arg1) {
			ProxyQAction().Activate(arg1);
		}
		public bool ShowStatusText(QWidget widget) {
			return ProxyQAction().ShowStatusText(widget);
		}
		public bool ShowStatusText() {
			return ProxyQAction().ShowStatusText();
		}
		public QWidget ParentWidget() {
			return ProxyQAction().ParentWidget();
		}
		public void Trigger() {
			ProxyQAction().Trigger();
		}
		public void Hover() {
			ProxyQAction().Hover();
		}
		public void SetChecked(bool arg1) {
			ProxyQAction().SetChecked(arg1);
		}
		public void Toggle() {
			ProxyQAction().Toggle();
		}
		public void SetEnabled(bool arg1) {
			ProxyQAction().SetEnabled(arg1);
		}
		public void SetDisabled(bool b) {
			ProxyQAction().SetDisabled(b);
		}
		public void SetVisible(bool arg1) {
			ProxyQAction().SetVisible(arg1);
		}
		public static new string Tr(string s, string c) {
			return StaticQAction().Tr(s,c);
		}
		public static new string Tr(string s) {
			return StaticQAction().Tr(s);
		}
		public new bool Event(QEvent arg1) {
			return ProxyQAction().Event(arg1);
		}
		~QAction() {
			ProxyQAction().Dispose();
		}
		public new void Dispose() {
			ProxyQAction().Dispose();
		}
	}

	public interface IQActionSignals {
		void Changed();
		void Triggered(bool arg1);
		void Triggered();
		void Hovered();
		void Toggled(bool arg1);
	}
}
