//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;

	public class QRadialGradient : QGradient, IDisposable {
 		protected QRadialGradient(Type dummy) : base((Type) null) {}
		interface IQRadialGradientProxy {
		}

		protected void CreateQRadialGradientProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QRadialGradient), this);
			_interceptor = (QRadialGradient) realProxy.GetTransparentProxy();
		}
		private QRadialGradient ProxyQRadialGradient() {
			return (QRadialGradient) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QRadialGradient() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQRadialGradientProxy), null);
			_staticInterceptor = (IQRadialGradientProxy) realProxy.GetTransparentProxy();
		}
		private static IQRadialGradientProxy StaticQRadialGradient() {
			return (IQRadialGradientProxy) _staticInterceptor;
		}

		// QRadialGradient* QRadialGradient(const QPointF& arg1,qreal arg2,const QPointF& arg3); >>>> NOT CONVERTED
		// QRadialGradient* QRadialGradient(const QPointF& arg1,qreal arg2); >>>> NOT CONVERTED
		// QRadialGradient* QRadialGradient(qreal arg1,qreal arg2,qreal arg3,qreal arg4,qreal arg5); >>>> NOT CONVERTED
		// QRadialGradient* QRadialGradient(qreal arg1,qreal arg2,qreal arg3,qreal arg4); >>>> NOT CONVERTED
		// QRadialGradient* QRadialGradient(qreal arg1,qreal arg2,qreal arg3); >>>> NOT CONVERTED
		public QPointF Center() {
			return ProxyQRadialGradient().Center();
		}
		public QPointF FocalPoint() {
			return ProxyQRadialGradient().FocalPoint();
		}
		// qreal radius(); >>>> NOT CONVERTED
		~QRadialGradient() {
			ProxyQRadialGradient().Dispose();
		}
		public void Dispose() {
			ProxyQRadialGradient().Dispose();
		}
	}
}
