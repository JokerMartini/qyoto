//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Collections;
	using System.Text;

	/// See <see cref="IQStandardItemModelSignals"></see> for signals emitted by QStandardItemModel
	[SmokeClass("QStandardItemModel")]
	public class QStandardItemModel : QAbstractItemModel, IDisposable {
 		protected QStandardItemModel(Type dummy) : base((Type) null) {}
		interface IQStandardItemModelProxy {
			string Tr(string s, string c);
			string Tr(string s);
		}

		protected new void CreateProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QStandardItemModel), this);
			_interceptor = (QStandardItemModel) realProxy.GetTransparentProxy();
		}
		private QStandardItemModel ProxyQStandardItemModel() {
			return (QStandardItemModel) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QStandardItemModel() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQStandardItemModelProxy), null);
			_staticInterceptor = (IQStandardItemModelProxy) realProxy.GetTransparentProxy();
		}
		private static IQStandardItemModelProxy StaticQStandardItemModel() {
			return (IQStandardItemModelProxy) _staticInterceptor;
		}

		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QStandardItemModel(QObject parent) : this((Type) null) {
			CreateProxy();
			NewQStandardItemModel(parent);
		}
		[SmokeMethod("QStandardItemModel(QObject*)")]
		private void NewQStandardItemModel(QObject parent) {
			ProxyQStandardItemModel().NewQStandardItemModel(parent);
		}
		public QStandardItemModel() : this((Type) null) {
			CreateProxy();
			NewQStandardItemModel();
		}
		[SmokeMethod("QStandardItemModel()")]
		private void NewQStandardItemModel() {
			ProxyQStandardItemModel().NewQStandardItemModel();
		}
		public QStandardItemModel(int rows, int columns, QObject parent) : this((Type) null) {
			CreateProxy();
			NewQStandardItemModel(rows,columns,parent);
		}
		[SmokeMethod("QStandardItemModel(int, int, QObject*)")]
		private void NewQStandardItemModel(int rows, int columns, QObject parent) {
			ProxyQStandardItemModel().NewQStandardItemModel(rows,columns,parent);
		}
		public QStandardItemModel(int rows, int columns) : this((Type) null) {
			CreateProxy();
			NewQStandardItemModel(rows,columns);
		}
		[SmokeMethod("QStandardItemModel(int, int)")]
		private void NewQStandardItemModel(int rows, int columns) {
			ProxyQStandardItemModel().NewQStandardItemModel(rows,columns);
		}
		[SmokeMethod("index(int, int, const QModelIndex&) const")]
		public new QModelIndex Index(int row, int column, QModelIndex parent) {
			return ProxyQStandardItemModel().Index(row,column,parent);
		}
		[SmokeMethod("index(int, int) const")]
		public new QModelIndex Index(int row, int column) {
			return ProxyQStandardItemModel().Index(row,column);
		}
		[SmokeMethod("parent(const QModelIndex&) const")]
		public new QModelIndex Parent(QModelIndex child) {
			return ProxyQStandardItemModel().Parent(child);
		}
		[SmokeMethod("rowCount(const QModelIndex&) const")]
		public new int RowCount(QModelIndex parent) {
			return ProxyQStandardItemModel().RowCount(parent);
		}
		[SmokeMethod("rowCount() const")]
		public new int RowCount() {
			return ProxyQStandardItemModel().RowCount();
		}
		[SmokeMethod("columnCount(const QModelIndex&) const")]
		public new int ColumnCount(QModelIndex parent) {
			return ProxyQStandardItemModel().ColumnCount(parent);
		}
		[SmokeMethod("columnCount() const")]
		public new int ColumnCount() {
			return ProxyQStandardItemModel().ColumnCount();
		}
		[SmokeMethod("hasChildren(const QModelIndex&) const")]
		public new bool HasChildren(QModelIndex parent) {
			return ProxyQStandardItemModel().HasChildren(parent);
		}
		[SmokeMethod("hasChildren() const")]
		public new bool HasChildren() {
			return ProxyQStandardItemModel().HasChildren();
		}
		[SmokeMethod("data(const QModelIndex&, int) const")]
		public new QVariant Data(QModelIndex index, int role) {
			return ProxyQStandardItemModel().Data(index,role);
		}
		[SmokeMethod("data(const QModelIndex&) const")]
		public new QVariant Data(QModelIndex index) {
			return ProxyQStandardItemModel().Data(index);
		}
		[SmokeMethod("setData(const QModelIndex&, const QVariant&, int)")]
		public new bool SetData(QModelIndex index, QVariant value, int role) {
			return ProxyQStandardItemModel().SetData(index,value,role);
		}
		[SmokeMethod("setData(const QModelIndex&, const QVariant&)")]
		public new bool SetData(QModelIndex index, QVariant value) {
			return ProxyQStandardItemModel().SetData(index,value);
		}
		[SmokeMethod("headerData(int, Qt::Orientation, int) const")]
		public new QVariant HeaderData(int section, Qt.Orientation orientation, int role) {
			return ProxyQStandardItemModel().HeaderData(section,orientation,role);
		}
		[SmokeMethod("headerData(int, Qt::Orientation) const")]
		public new QVariant HeaderData(int section, Qt.Orientation orientation) {
			return ProxyQStandardItemModel().HeaderData(section,orientation);
		}
		[SmokeMethod("setHeaderData(int, Qt::Orientation, const QVariant&, int)")]
		public new bool SetHeaderData(int section, Qt.Orientation orientation, QVariant value, int role) {
			return ProxyQStandardItemModel().SetHeaderData(section,orientation,value,role);
		}
		[SmokeMethod("setHeaderData(int, Qt::Orientation, const QVariant&)")]
		public new bool SetHeaderData(int section, Qt.Orientation orientation, QVariant value) {
			return ProxyQStandardItemModel().SetHeaderData(section,orientation,value);
		}
		[SmokeMethod("insertRows(int, int, const QModelIndex&)")]
		public new bool InsertRows(int row, int count, QModelIndex parent) {
			return ProxyQStandardItemModel().InsertRows(row,count,parent);
		}
		[SmokeMethod("insertRows(int, int)")]
		public new bool InsertRows(int row, int count) {
			return ProxyQStandardItemModel().InsertRows(row,count);
		}
		[SmokeMethod("insertColumns(int, int, const QModelIndex&)")]
		public new bool InsertColumns(int column, int count, QModelIndex parent) {
			return ProxyQStandardItemModel().InsertColumns(column,count,parent);
		}
		[SmokeMethod("insertColumns(int, int)")]
		public new bool InsertColumns(int column, int count) {
			return ProxyQStandardItemModel().InsertColumns(column,count);
		}
		[SmokeMethod("removeRows(int, int, const QModelIndex&)")]
		public new bool RemoveRows(int row, int count, QModelIndex parent) {
			return ProxyQStandardItemModel().RemoveRows(row,count,parent);
		}
		[SmokeMethod("removeRows(int, int)")]
		public new bool RemoveRows(int row, int count) {
			return ProxyQStandardItemModel().RemoveRows(row,count);
		}
		[SmokeMethod("removeColumns(int, int, const QModelIndex&)")]
		public new bool RemoveColumns(int column, int count, QModelIndex parent) {
			return ProxyQStandardItemModel().RemoveColumns(column,count,parent);
		}
		[SmokeMethod("removeColumns(int, int)")]
		public new bool RemoveColumns(int column, int count) {
			return ProxyQStandardItemModel().RemoveColumns(column,count);
		}
		[SmokeMethod("flags(const QModelIndex&) const")]
		public new int Flags(QModelIndex index) {
			return ProxyQStandardItemModel().Flags(index);
		}
		[SmokeMethod("supportedDropActions() const")]
		public new int SupportedDropActions() {
			return ProxyQStandardItemModel().SupportedDropActions();
		}
		// QMap<int, QVariant> itemData(const QModelIndex& arg1); >>>> NOT CONVERTED
		// bool setItemData(const QModelIndex& arg1,const QMap<int, QVariant>& arg2); >>>> NOT CONVERTED
		[SmokeMethod("clear()")]
		public void Clear() {
			ProxyQStandardItemModel().Clear();
		}
		[SmokeMethod("parent() const")]
		public new QObject Parent() {
			return ProxyQStandardItemModel().Parent();
		}
		[SmokeMethod("sort(int, Qt::SortOrder)")]
		public new void Sort(int column, Qt.SortOrder order) {
			ProxyQStandardItemModel().Sort(column,order);
		}
		[SmokeMethod("sort(int)")]
		public new void Sort(int column) {
			ProxyQStandardItemModel().Sort(column);
		}
		[SmokeMethod("itemFromIndex(const QModelIndex&) const")]
		public QStandardItem ItemFromIndex(QModelIndex index) {
			return ProxyQStandardItemModel().ItemFromIndex(index);
		}
		[SmokeMethod("indexFromItem(const QStandardItem*) const")]
		public QModelIndex IndexFromItem(QStandardItem item) {
			return ProxyQStandardItemModel().IndexFromItem(item);
		}
		[SmokeMethod("item(int, int) const")]
		public QStandardItem Item(int row, int column) {
			return ProxyQStandardItemModel().Item(row,column);
		}
		[SmokeMethod("item(int) const")]
		public QStandardItem Item(int row) {
			return ProxyQStandardItemModel().Item(row);
		}
		[SmokeMethod("setItem(int, int, QStandardItem*)")]
		public void SetItem(int row, int column, QStandardItem item) {
			ProxyQStandardItemModel().SetItem(row,column,item);
		}
		[SmokeMethod("setItem(int, QStandardItem*)")]
		public void SetItem(int row, QStandardItem item) {
			ProxyQStandardItemModel().SetItem(row,item);
		}
		[SmokeMethod("topLevelParent() const")]
		public QStandardItem TopLevelParent() {
			return ProxyQStandardItemModel().TopLevelParent();
		}
		[SmokeMethod("horizontalHeaderItem(int) const")]
		public QStandardItem HorizontalHeaderItem(int column) {
			return ProxyQStandardItemModel().HorizontalHeaderItem(column);
		}
		[SmokeMethod("setHorizontalHeaderItem(int, QStandardItem*)")]
		public void SetHorizontalHeaderItem(int column, QStandardItem item) {
			ProxyQStandardItemModel().SetHorizontalHeaderItem(column,item);
		}
		[SmokeMethod("verticalHeaderItem(int) const")]
		public QStandardItem VerticalHeaderItem(int row) {
			return ProxyQStandardItemModel().VerticalHeaderItem(row);
		}
		[SmokeMethod("setVerticalHeaderItem(int, QStandardItem*)")]
		public void SetVerticalHeaderItem(int row, QStandardItem item) {
			ProxyQStandardItemModel().SetVerticalHeaderItem(row,item);
		}
		[SmokeMethod("setHorizontalHeaderLabels(const QStringList&)")]
		public void SetHorizontalHeaderLabels(string[] labels) {
			ProxyQStandardItemModel().SetHorizontalHeaderLabels(labels);
		}
		[SmokeMethod("setVerticalHeaderLabels(const QStringList&)")]
		public void SetVerticalHeaderLabels(string[] labels) {
			ProxyQStandardItemModel().SetVerticalHeaderLabels(labels);
		}
		[SmokeMethod("setRowCount(int)")]
		public void SetRowCount(int rows) {
			ProxyQStandardItemModel().SetRowCount(rows);
		}
		[SmokeMethod("setColumnCount(int)")]
		public void SetColumnCount(int columns) {
			ProxyQStandardItemModel().SetColumnCount(columns);
		}
		[SmokeMethod("appendRow(const QList<QStandardItem*>&)")]
		public void AppendRow(ArrayList items) {
			ProxyQStandardItemModel().AppendRow(items);
		}
		[SmokeMethod("appendColumn(const QList<QStandardItem*>&)")]
		public void AppendColumn(ArrayList items) {
			ProxyQStandardItemModel().AppendColumn(items);
		}
		[SmokeMethod("appendRow(QStandardItem*)")]
		public void AppendRow(QStandardItem item) {
			ProxyQStandardItemModel().AppendRow(item);
		}
		[SmokeMethod("insertRow(int, const QList<QStandardItem*>&)")]
		public new void InsertRow(int row, ArrayList items) {
			ProxyQStandardItemModel().InsertRow(row,items);
		}
		[SmokeMethod("insertColumn(int, const QList<QStandardItem*>&)")]
		public new void InsertColumn(int column, ArrayList items) {
			ProxyQStandardItemModel().InsertColumn(column,items);
		}
		[SmokeMethod("insertRow(int, QStandardItem*)")]
		public new void InsertRow(int row, QStandardItem item) {
			ProxyQStandardItemModel().InsertRow(row,item);
		}
		[SmokeMethod("insertRow(int, const QModelIndex&)")]
		public new void InsertRow(int row, QModelIndex parent) {
			ProxyQStandardItemModel().InsertRow(row,parent);
		}
		[SmokeMethod("insertRow(int)")]
		public new void InsertRow(int row) {
			ProxyQStandardItemModel().InsertRow(row);
		}
		[SmokeMethod("insertColumn(int, const QModelIndex&)")]
		public new void InsertColumn(int column, QModelIndex parent) {
			ProxyQStandardItemModel().InsertColumn(column,parent);
		}
		[SmokeMethod("insertColumn(int)")]
		public new void InsertColumn(int column) {
			ProxyQStandardItemModel().InsertColumn(column);
		}
		[SmokeMethod("takeItem(int, int)")]
		public QStandardItem TakeItem(int row, int column) {
			return ProxyQStandardItemModel().TakeItem(row,column);
		}
		[SmokeMethod("takeItem(int)")]
		public QStandardItem TakeItem(int row) {
			return ProxyQStandardItemModel().TakeItem(row);
		}
		// QList<QStandardItem*> takeRow(int arg1); >>>> NOT CONVERTED
		// QList<QStandardItem*> takeColumn(int arg1); >>>> NOT CONVERTED
		[SmokeMethod("takeHorizontalHeaderItem(int)")]
		public QStandardItem TakeHorizontalHeaderItem(int column) {
			return ProxyQStandardItemModel().TakeHorizontalHeaderItem(column);
		}
		[SmokeMethod("takeVerticalHeaderItem(int)")]
		public QStandardItem TakeVerticalHeaderItem(int row) {
			return ProxyQStandardItemModel().TakeVerticalHeaderItem(row);
		}
		[SmokeMethod("itemPrototype() const")]
		public QStandardItem ItemPrototype() {
			return ProxyQStandardItemModel().ItemPrototype();
		}
		[SmokeMethod("setItemPrototype(const QStandardItem*)")]
		public void SetItemPrototype(QStandardItem item) {
			ProxyQStandardItemModel().SetItemPrototype(item);
		}
		// QList<QStandardItem*> findItems(const QString& arg1,Qt::MatchFlags arg2,int arg3); >>>> NOT CONVERTED
		// QList<QStandardItem*> findItems(const QString& arg1,Qt::MatchFlags arg2); >>>> NOT CONVERTED
		[SmokeMethod("tr(const char*, const char*)")]
		public static new string Tr(string s, string c) {
			return StaticQStandardItemModel().Tr(s,c);
		}
		[SmokeMethod("tr(const char*)")]
		public static new string Tr(string s) {
			return StaticQStandardItemModel().Tr(s);
		}
		~QStandardItemModel() {
			DisposeQStandardItemModel();
		}
		public new void Dispose() {
			DisposeQStandardItemModel();
		}
		[SmokeMethod("~QStandardItemModel()")]
		private void DisposeQStandardItemModel() {
			ProxyQStandardItemModel().DisposeQStandardItemModel();
		}
		protected new IQStandardItemModelSignals Emit() {
			return (IQStandardItemModelSignals) Q_EMIT;
		}
	}

	public interface IQStandardItemModelSignals : IQAbstractItemModelSignals {
		[Q_SIGNAL("void itemChanged(QStandardItem*)")]
		void ItemChanged(QStandardItem item);
	}
}
