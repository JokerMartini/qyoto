//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Text;

	public class QTextLayout : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QTextLayout(Type dummy) {}
		interface IQTextLayoutProxy {
		}

		protected void CreateQTextLayoutProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QTextLayout), this);
			_interceptor = (QTextLayout) realProxy.GetTransparentProxy();
		}
		private QTextLayout ProxyQTextLayout() {
			return (QTextLayout) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QTextLayout() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQTextLayoutProxy), null);
			_staticInterceptor = (IQTextLayoutProxy) realProxy.GetTransparentProxy();
		}
		private static IQTextLayoutProxy StaticQTextLayout() {
			return (IQTextLayoutProxy) _staticInterceptor;
		}

		enum CursorMode {
			SkipCharacters = 0,
			SkipWords = 1,
		}
		public QTextLayout() : this((Type) null) {
			CreateQTextLayoutProxy();
			NewQTextLayout();
		}
		private void NewQTextLayout() {
			ProxyQTextLayout().NewQTextLayout();
		}
		public QTextLayout(string text) : this((Type) null) {
			CreateQTextLayoutProxy();
			NewQTextLayout(text);
		}
		private void NewQTextLayout(string text) {
			ProxyQTextLayout().NewQTextLayout(text);
		}
		public QTextLayout(string text, QFont font, IQPaintDevice paintdevice) : this((Type) null) {
			CreateQTextLayoutProxy();
			NewQTextLayout(text,font,paintdevice);
		}
		private void NewQTextLayout(string text, QFont font, IQPaintDevice paintdevice) {
			ProxyQTextLayout().NewQTextLayout(text,font,paintdevice);
		}
		public QTextLayout(string text, QFont font) : this((Type) null) {
			CreateQTextLayoutProxy();
			NewQTextLayout(text,font);
		}
		private void NewQTextLayout(string text, QFont font) {
			ProxyQTextLayout().NewQTextLayout(text,font);
		}
		public QTextLayout(QTextBlock b) : this((Type) null) {
			CreateQTextLayoutProxy();
			NewQTextLayout(b);
		}
		private void NewQTextLayout(QTextBlock b) {
			ProxyQTextLayout().NewQTextLayout(b);
		}
		public void SetFont(QFont f) {
			ProxyQTextLayout().SetFont(f);
		}
		public QFont Font() {
			return ProxyQTextLayout().Font();
		}
		public void SetText(string arg1) {
			ProxyQTextLayout().SetText(arg1);
		}
		public string Text() {
			return ProxyQTextLayout().Text();
		}
		public void SetTextOption(QTextOption option) {
			ProxyQTextLayout().SetTextOption(option);
		}
		public QTextOption TextOption() {
			return ProxyQTextLayout().TextOption();
		}
		public void SetPreeditArea(int position, string text) {
			ProxyQTextLayout().SetPreeditArea(position,text);
		}
		public int PreeditAreaPosition() {
			return ProxyQTextLayout().PreeditAreaPosition();
		}
		public string PreeditAreaText() {
			return ProxyQTextLayout().PreeditAreaText();
		}
		// void setAdditionalFormats(const QList<QTextLayout::FormatRange>& arg1); >>>> NOT CONVERTED
		// QList<QTextLayout::FormatRange> additionalFormats(); >>>> NOT CONVERTED
		public void ClearAdditionalFormats() {
			ProxyQTextLayout().ClearAdditionalFormats();
		}
		public void SetCacheEnabled(bool enable) {
			ProxyQTextLayout().SetCacheEnabled(enable);
		}
		public bool CacheEnabled() {
			return ProxyQTextLayout().CacheEnabled();
		}
		public void BeginLayout() {
			ProxyQTextLayout().BeginLayout();
		}
		public void EndLayout() {
			ProxyQTextLayout().EndLayout();
		}
		public QTextLine CreateLine() {
			return ProxyQTextLayout().CreateLine();
		}
		public int LineCount() {
			return ProxyQTextLayout().LineCount();
		}
		public QTextLine LineAt(int i) {
			return ProxyQTextLayout().LineAt(i);
		}
		public QTextLine LineForTextPosition(int pos) {
			return ProxyQTextLayout().LineForTextPosition(pos);
		}
		public bool IsValidCursorPosition(int pos) {
			return ProxyQTextLayout().IsValidCursorPosition(pos);
		}
		public int NextCursorPosition(int oldPos, int mode) {
			return ProxyQTextLayout().NextCursorPosition(oldPos,mode);
		}
		public int NextCursorPosition(int oldPos) {
			return ProxyQTextLayout().NextCursorPosition(oldPos);
		}
		public int PreviousCursorPosition(int oldPos, int mode) {
			return ProxyQTextLayout().PreviousCursorPosition(oldPos,mode);
		}
		public int PreviousCursorPosition(int oldPos) {
			return ProxyQTextLayout().PreviousCursorPosition(oldPos);
		}
		// void draw(QPainter* arg1,const QPointF& arg2,const QVector<QTextLayout::FormatRange>& arg3,const QRectF& arg4); >>>> NOT CONVERTED
		// void draw(QPainter* arg1,const QPointF& arg2,const QVector<QTextLayout::FormatRange>& arg3); >>>> NOT CONVERTED
		public void Draw(QPainter p, QPointF pos) {
			ProxyQTextLayout().Draw(p,pos);
		}
		public void DrawCursor(QPainter p, QPointF pos, int cursorPosition) {
			ProxyQTextLayout().DrawCursor(p,pos,cursorPosition);
		}
		public QPointF Position() {
			return ProxyQTextLayout().Position();
		}
		public void SetPosition(QPointF p) {
			ProxyQTextLayout().SetPosition(p);
		}
		public QRectF BoundingRect() {
			return ProxyQTextLayout().BoundingRect();
		}
		public double MinimumWidth() {
			return ProxyQTextLayout().MinimumWidth();
		}
		public double MaximumWidth() {
			return ProxyQTextLayout().MaximumWidth();
		}
		// QTextEngine* engine(); >>>> NOT CONVERTED
		~QTextLayout() {
			ProxyQTextLayout().Dispose();
		}
		public void Dispose() {
			ProxyQTextLayout().Dispose();
		}
	}
}
