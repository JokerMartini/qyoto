//Auto-generated by ../../kalyptus/kalyptus. DO NOT EDIT.
namespace Qt {

	using System;
	using System.Collections;
	using System.Text;

	/// See <see cref="IQObjectSignals"></see> for signals emitted by QObject
	public class QObject : MarshalByRefObject, IDisposable {
		protected Object _interceptor = null;
 
		private IntPtr _smokeObject;
 		protected QObject(Type dummy) {}
		interface IQObjectProxy {
			string Tr(string s, string c);
			string Tr(string s);
			string TrUtf8(string arg1, string arg2);
			bool Connect(QObject sender, string signal, QObject receiver, string member, int arg5);
			bool Connect(QObject sender, string signal, QObject receiver, string member);
			bool Disconnect(QObject sender, string signal, QObject receiver, string member);
			uint RegisterUserData();
		}

		protected void CreateQObjectProxy() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(QObject), this);
			_interceptor = (QObject) realProxy.GetTransparentProxy();
		}
		private QObject ProxyQObject() {
			return (QObject) _interceptor;
		}
		private static Object _staticInterceptor = null;
		static QObject() {
			SmokeInvocation realProxy = new SmokeInvocation(typeof(IQObjectProxy), null);
			_staticInterceptor = (IQObjectProxy) realProxy.GetTransparentProxy();
		}
		private static IQObjectProxy StaticQObject() {
			return (IQObjectProxy) _staticInterceptor;
		}

		public virtual QMetaObject MetaObject() {
			return ProxyQObject().MetaObject();
		}
		// void* qt_metacast(const char* arg1); >>>> NOT CONVERTED
		// int qt_metacall(QMetaObject::Call arg1,int arg2,void** arg3); >>>> NOT CONVERTED
		public QObject(QObject parent) : this((Type) null) {
			CreateQObjectProxy();
			NewQObject(parent);
		}
		private void NewQObject(QObject parent) {
			ProxyQObject().NewQObject(parent);
		}
		public QObject() : this((Type) null) {
			CreateQObjectProxy();
			NewQObject();
		}
		private void NewQObject() {
			ProxyQObject().NewQObject();
		}
		public virtual bool Event(QEvent arg1) {
			return ProxyQObject().Event(arg1);
		}
		public virtual bool EventFilter(QObject arg1, QEvent arg2) {
			return ProxyQObject().EventFilter(arg1,arg2);
		}
		public string ObjectName() {
			return ProxyQObject().ObjectName();
		}
		public void SetObjectName(string name) {
			ProxyQObject().SetObjectName(name);
		}
		public bool IsWidgetType() {
			return ProxyQObject().IsWidgetType();
		}
		public bool SignalsBlocked() {
			return ProxyQObject().SignalsBlocked();
		}
		public bool BlockSignals(bool b) {
			return ProxyQObject().BlockSignals(b);
		}
		public QThread Thread() {
			return ProxyQObject().Thread();
		}
		public void MoveToThread(QThread thread) {
			ProxyQObject().MoveToThread(thread);
		}
		public int StartTimer(int interval) {
			return ProxyQObject().StartTimer(interval);
		}
		public void KillTimer(int id) {
			ProxyQObject().KillTimer(id);
		}
		public ArrayList Children() {
			return ProxyQObject().Children();
		}
		public void SetParent(QObject arg1) {
			ProxyQObject().SetParent(arg1);
		}
		public void InstallEventFilter(QObject arg1) {
			ProxyQObject().InstallEventFilter(arg1);
		}
		public void RemoveEventFilter(QObject arg1) {
			ProxyQObject().RemoveEventFilter(arg1);
		}
		public bool Connect(QObject sender, string signal, string member, int type) {
			return ProxyQObject().Connect(sender,signal,member,type);
		}
		public bool Connect(QObject sender, string signal, string member) {
			return ProxyQObject().Connect(sender,signal,member);
		}
		public bool Disconnect(string signal, QObject receiver, string member) {
			return ProxyQObject().Disconnect(signal,receiver,member);
		}
		public bool Disconnect(string signal, QObject receiver) {
			return ProxyQObject().Disconnect(signal,receiver);
		}
		public bool Disconnect(string signal) {
			return ProxyQObject().Disconnect(signal);
		}
		public bool Disconnect() {
			return ProxyQObject().Disconnect();
		}
		public bool Disconnect(QObject receiver, string member) {
			return ProxyQObject().Disconnect(receiver,member);
		}
		public bool Disconnect(QObject receiver) {
			return ProxyQObject().Disconnect(receiver);
		}
		public void DumpObjectTree() {
			ProxyQObject().DumpObjectTree();
		}
		public void DumpObjectInfo() {
			ProxyQObject().DumpObjectInfo();
		}
		public bool SetProperty(string name, QVariant value) {
			return ProxyQObject().SetProperty(name,value);
		}
		public QVariant Property(string name) {
			return ProxyQObject().Property(name);
		}
		// void setUserData(uint arg1,QObjectUserData* arg2); >>>> NOT CONVERTED
		// QObjectUserData* userData(uint arg1); >>>> NOT CONVERTED
		public QObject Parent() {
			return ProxyQObject().Parent();
		}
		public bool Inherits(string classname) {
			return ProxyQObject().Inherits(classname);
		}
		public void DeleteLater() {
			ProxyQObject().DeleteLater();
		}
		public static string Tr(string s, string c) {
			return StaticQObject().Tr(s,c);
		}
		public static string Tr(string s) {
			return StaticQObject().Tr(s);
		}
		public static string TrUtf8(string arg1, string arg2) {
			return StaticQObject().TrUtf8(arg1,arg2);
		}
		public static bool Connect(QObject sender, string signal, QObject receiver, string member, int arg5) {
			return StaticQObject().Connect(sender,signal,receiver,member,arg5);
		}
		public static bool Connect(QObject sender, string signal, QObject receiver, string member) {
			return StaticQObject().Connect(sender,signal,receiver,member);
		}
		public static bool Disconnect(QObject sender, string signal, QObject receiver, string member) {
			return StaticQObject().Disconnect(sender,signal,receiver,member);
		}
		public static uint RegisterUserData() {
			return StaticQObject().RegisterUserData();
		}
		protected QObject Sender() {
			return ProxyQObject().Sender();
		}
		protected int Receivers(string signal) {
			return ProxyQObject().Receivers(signal);
		}
		protected virtual void TimerEvent(QTimerEvent arg1) {
			ProxyQObject().TimerEvent(arg1);
		}
		protected virtual void ChildEvent(QChildEvent arg1) {
			ProxyQObject().ChildEvent(arg1);
		}
		protected virtual void CustomEvent(QEvent arg1) {
			ProxyQObject().CustomEvent(arg1);
		}
		protected virtual void ConnectNotify(string signal) {
			ProxyQObject().ConnectNotify(signal);
		}
		protected virtual void DisconnectNotify(string signal) {
			ProxyQObject().DisconnectNotify(signal);
		}
		~QObject() {
			ProxyQObject().Dispose();
		}
		public void Dispose() {
			ProxyQObject().Dispose();
		}

	}

	public interface IQObjectSignals {
		void Destroyed(QObject arg1);
		void Destroyed();
	}
}
